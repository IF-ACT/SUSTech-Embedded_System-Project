
LCD_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6bc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b10  0800c8a8  0800c8a8  0001c8a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3b8  0800e3b8  000209b4  2**0
                  CONTENTS
  4 .ARM          00000000  0800e3b8  0800e3b8  000209b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e3b8  0800e3b8  000209b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e3b8  0800e3b8  0001e3b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e3bc  0800e3bc  0001e3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009b4  20000000  0800e3c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  200009b4  0800ed74  000209b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ac0  0800ed74  00020ac0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000209b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a41  00000000  00000000  000209dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e43  00000000  00000000  0003841e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c78  00000000  00000000  0003c268  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a50  00000000  00000000  0003cee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a21c  00000000  00000000  0003d930  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012878  00000000  00000000  00057b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007b03e  00000000  00000000  0006a3c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e5402  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000385c  00000000  00000000  000e5480  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200009b4 	.word	0x200009b4
 8000204:	00000000 	.word	0x00000000
 8000208:	0800c88c 	.word	0x0800c88c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200009b8 	.word	0x200009b8
 8000224:	0800c88c 	.word	0x0800c88c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	d1ed      	bne.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0e:	2afd      	cmp	r2, #253	; 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	; 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	; 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	; 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <__gesf2>:
 800105c:	f04f 3cff 	mov.w	ip, #4294967295
 8001060:	e006      	b.n	8001070 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__lesf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	e002      	b.n	8001070 <__cmpsf2+0x4>
 800106a:	bf00      	nop

0800106c <__cmpsf2>:
 800106c:	f04f 0c01 	mov.w	ip, #1
 8001070:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001074:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001078:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800107c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001080:	bf18      	it	ne
 8001082:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001086:	d011      	beq.n	80010ac <__cmpsf2+0x40>
 8001088:	b001      	add	sp, #4
 800108a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800108e:	bf18      	it	ne
 8001090:	ea90 0f01 	teqne	r0, r1
 8001094:	bf58      	it	pl
 8001096:	ebb2 0003 	subspl.w	r0, r2, r3
 800109a:	bf88      	it	hi
 800109c:	17c8      	asrhi	r0, r1, #31
 800109e:	bf38      	it	cc
 80010a0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010a4:	bf18      	it	ne
 80010a6:	f040 0001 	orrne.w	r0, r0, #1
 80010aa:	4770      	bx	lr
 80010ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b0:	d102      	bne.n	80010b8 <__cmpsf2+0x4c>
 80010b2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010b6:	d105      	bne.n	80010c4 <__cmpsf2+0x58>
 80010b8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010bc:	d1e4      	bne.n	8001088 <__cmpsf2+0x1c>
 80010be:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010c2:	d0e1      	beq.n	8001088 <__cmpsf2+0x1c>
 80010c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <__aeabi_cfrcmple>:
 80010cc:	4684      	mov	ip, r0
 80010ce:	4608      	mov	r0, r1
 80010d0:	4661      	mov	r1, ip
 80010d2:	e7ff      	b.n	80010d4 <__aeabi_cfcmpeq>

080010d4 <__aeabi_cfcmpeq>:
 80010d4:	b50f      	push	{r0, r1, r2, r3, lr}
 80010d6:	f7ff ffc9 	bl	800106c <__cmpsf2>
 80010da:	2800      	cmp	r0, #0
 80010dc:	bf48      	it	mi
 80010de:	f110 0f00 	cmnmi.w	r0, #0
 80010e2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010e4 <__aeabi_fcmpeq>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff fff4 	bl	80010d4 <__aeabi_cfcmpeq>
 80010ec:	bf0c      	ite	eq
 80010ee:	2001      	moveq	r0, #1
 80010f0:	2000      	movne	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmplt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffea 	bl	80010d4 <__aeabi_cfcmpeq>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmple>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff ffe0 	bl	80010d4 <__aeabi_cfcmpeq>
 8001114:	bf94      	ite	ls
 8001116:	2001      	movls	r0, #1
 8001118:	2000      	movhi	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_fcmpge>:
 8001120:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001124:	f7ff ffd2 	bl	80010cc <__aeabi_cfrcmple>
 8001128:	bf94      	ite	ls
 800112a:	2001      	movls	r0, #1
 800112c:	2000      	movhi	r0, #0
 800112e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001132:	bf00      	nop

08001134 <__aeabi_fcmpgt>:
 8001134:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001138:	f7ff ffc8 	bl	80010cc <__aeabi_cfrcmple>
 800113c:	bf34      	ite	cc
 800113e:	2001      	movcc	r0, #1
 8001140:	2000      	movcs	r0, #0
 8001142:	f85d fb08 	ldr.w	pc, [sp], #8
 8001146:	bf00      	nop

08001148 <__aeabi_f2iz>:
 8001148:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800114c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001150:	d30f      	bcc.n	8001172 <__aeabi_f2iz+0x2a>
 8001152:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001156:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800115a:	d90d      	bls.n	8001178 <__aeabi_f2iz+0x30>
 800115c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001164:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001168:	fa23 f002 	lsr.w	r0, r3, r2
 800116c:	bf18      	it	ne
 800116e:	4240      	negne	r0, r0
 8001170:	4770      	bx	lr
 8001172:	f04f 0000 	mov.w	r0, #0
 8001176:	4770      	bx	lr
 8001178:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800117c:	d101      	bne.n	8001182 <__aeabi_f2iz+0x3a>
 800117e:	0242      	lsls	r2, r0, #9
 8001180:	d105      	bne.n	800118e <__aeabi_f2iz+0x46>
 8001182:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001186:	bf08      	it	eq
 8001188:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800118c:	4770      	bx	lr
 800118e:	f04f 0000 	mov.w	r0, #0
 8001192:	4770      	bx	lr

08001194 <__aeabi_f2uiz>:
 8001194:	0042      	lsls	r2, r0, #1
 8001196:	d20e      	bcs.n	80011b6 <__aeabi_f2uiz+0x22>
 8001198:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800119c:	d30b      	bcc.n	80011b6 <__aeabi_f2uiz+0x22>
 800119e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011a6:	d409      	bmi.n	80011bc <__aeabi_f2uiz+0x28>
 80011a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011b0:	fa23 f002 	lsr.w	r0, r3, r2
 80011b4:	4770      	bx	lr
 80011b6:	f04f 0000 	mov.w	r0, #0
 80011ba:	4770      	bx	lr
 80011bc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011c0:	d101      	bne.n	80011c6 <__aeabi_f2uiz+0x32>
 80011c2:	0242      	lsls	r2, r0, #9
 80011c4:	d102      	bne.n	80011cc <__aeabi_f2uiz+0x38>
 80011c6:	f04f 30ff 	mov.w	r0, #4294967295
 80011ca:	4770      	bx	lr
 80011cc:	f04f 0000 	mov.w	r0, #0
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop

080011d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <HAL_Init+0x28>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a07      	ldr	r2, [pc, #28]	; (80011fc <HAL_Init+0x28>)
 80011de:	f043 0310 	orr.w	r3, r3, #16
 80011e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e4:	2003      	movs	r0, #3
 80011e6:	f000 f945 	bl	8001474 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ea:	2000      	movs	r0, #0
 80011ec:	f000 f808 	bl	8001200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f0:	f007 fd26 	bl	8008c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40022000 	.word	0x40022000

08001200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_InitTick+0x54>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_InitTick+0x58>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4619      	mov	r1, r3
 8001212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001216:	fbb3 f3f1 	udiv	r3, r3, r1
 800121a:	fbb2 f3f3 	udiv	r3, r2, r3
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f95d 	bl	80014de <HAL_SYSTICK_Config>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e00e      	b.n	800124c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b0f      	cmp	r3, #15
 8001232:	d80a      	bhi.n	800124a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001234:	2200      	movs	r2, #0
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f000 f925 	bl	800148a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001240:	4a06      	ldr	r2, [pc, #24]	; (800125c <HAL_InitTick+0x5c>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e000      	b.n	800124c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000008 	.word	0x20000008
 8001258:	20000004 	.word	0x20000004
 800125c:	20000000 	.word	0x20000000

08001260 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <HAL_IncTick+0x1c>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_IncTick+0x20>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4413      	add	r3, r2
 8001270:	4a03      	ldr	r2, [pc, #12]	; (8001280 <HAL_IncTick+0x20>)
 8001272:	6013      	str	r3, [r2, #0]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	20000004 	.word	0x20000004
 8001280:	200009e8 	.word	0x200009e8

08001284 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return uwTick;
 8001288:	4b02      	ldr	r3, [pc, #8]	; (8001294 <HAL_GetTick+0x10>)
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	200009e8 	.word	0x200009e8

08001298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a0:	f7ff fff0 	bl	8001284 <HAL_GetTick>
 80012a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b0:	d005      	beq.n	80012be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <HAL_Delay+0x40>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4413      	add	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012be:	bf00      	nop
 80012c0:	f7ff ffe0 	bl	8001284 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d8f7      	bhi.n	80012c0 <HAL_Delay+0x28>
  {
  }
}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000004 	.word	0x20000004

080012dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f8:	4013      	ands	r3, r2
 80012fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800130c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130e:	4a04      	ldr	r2, [pc, #16]	; (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	60d3      	str	r3, [r2, #12]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <__NVIC_GetPriorityGrouping+0x18>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	f003 0307 	and.w	r3, r3, #7
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	2b00      	cmp	r3, #0
 8001350:	db0b      	blt.n	800136a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	f003 021f 	and.w	r2, r3, #31
 8001358:	4906      	ldr	r1, [pc, #24]	; (8001374 <__NVIC_EnableIRQ+0x34>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	095b      	lsrs	r3, r3, #5
 8001360:	2001      	movs	r0, #1
 8001362:	fa00 f202 	lsl.w	r2, r0, r2
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	e000e100 	.word	0xe000e100

08001378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001388:	2b00      	cmp	r3, #0
 800138a:	db0a      	blt.n	80013a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	490c      	ldr	r1, [pc, #48]	; (80013c4 <__NVIC_SetPriority+0x4c>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	0112      	lsls	r2, r2, #4
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	440b      	add	r3, r1
 800139c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a0:	e00a      	b.n	80013b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4908      	ldr	r1, [pc, #32]	; (80013c8 <__NVIC_SetPriority+0x50>)
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	3b04      	subs	r3, #4
 80013b0:	0112      	lsls	r2, r2, #4
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	440b      	add	r3, r1
 80013b6:	761a      	strb	r2, [r3, #24]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000e100 	.word	0xe000e100
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f1c3 0307 	rsb	r3, r3, #7
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	bf28      	it	cs
 80013ea:	2304      	movcs	r3, #4
 80013ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3304      	adds	r3, #4
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d902      	bls.n	80013fc <NVIC_EncodePriority+0x30>
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3b03      	subs	r3, #3
 80013fa:	e000      	b.n	80013fe <NVIC_EncodePriority+0x32>
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	f04f 32ff 	mov.w	r2, #4294967295
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43da      	mvns	r2, r3
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	401a      	ands	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001414:	f04f 31ff 	mov.w	r1, #4294967295
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa01 f303 	lsl.w	r3, r1, r3
 800141e:	43d9      	mvns	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	4313      	orrs	r3, r2
         );
}
 8001426:	4618      	mov	r0, r3
 8001428:	3724      	adds	r7, #36	; 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001440:	d301      	bcc.n	8001446 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001442:	2301      	movs	r3, #1
 8001444:	e00f      	b.n	8001466 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <SysTick_Config+0x40>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144e:	210f      	movs	r1, #15
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	f7ff ff90 	bl	8001378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <SysTick_Config+0x40>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <SysTick_Config+0x40>)
 8001460:	2207      	movs	r2, #7
 8001462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	e000e010 	.word	0xe000e010

08001474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ff2d 	bl	80012dc <__NVIC_SetPriorityGrouping>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800149c:	f7ff ff42 	bl	8001324 <__NVIC_GetPriorityGrouping>
 80014a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	6978      	ldr	r0, [r7, #20]
 80014a8:	f7ff ff90 	bl	80013cc <NVIC_EncodePriority>
 80014ac:	4602      	mov	r2, r0
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff5f 	bl	8001378 <__NVIC_SetPriority>
}
 80014ba:	bf00      	nop
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff35 	bl	8001340 <__NVIC_EnableIRQ>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ffa2 	bl	8001430 <SysTick_Config>
 80014ec:	4603      	mov	r3, r0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b08b      	sub	sp, #44	; 0x2c
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001502:	2300      	movs	r3, #0
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150a:	e133      	b.n	8001774 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800150c:	2201      	movs	r2, #1
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	69fa      	ldr	r2, [r7, #28]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	429a      	cmp	r2, r3
 8001526:	f040 8122 	bne.w	800176e <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b12      	cmp	r3, #18
 8001530:	d034      	beq.n	800159c <HAL_GPIO_Init+0xa4>
 8001532:	2b12      	cmp	r3, #18
 8001534:	d80d      	bhi.n	8001552 <HAL_GPIO_Init+0x5a>
 8001536:	2b02      	cmp	r3, #2
 8001538:	d02b      	beq.n	8001592 <HAL_GPIO_Init+0x9a>
 800153a:	2b02      	cmp	r3, #2
 800153c:	d804      	bhi.n	8001548 <HAL_GPIO_Init+0x50>
 800153e:	2b00      	cmp	r3, #0
 8001540:	d031      	beq.n	80015a6 <HAL_GPIO_Init+0xae>
 8001542:	2b01      	cmp	r3, #1
 8001544:	d01c      	beq.n	8001580 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001546:	e048      	b.n	80015da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001548:	2b03      	cmp	r3, #3
 800154a:	d043      	beq.n	80015d4 <HAL_GPIO_Init+0xdc>
 800154c:	2b11      	cmp	r3, #17
 800154e:	d01b      	beq.n	8001588 <HAL_GPIO_Init+0x90>
          break;
 8001550:	e043      	b.n	80015da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001552:	4a8f      	ldr	r2, [pc, #572]	; (8001790 <HAL_GPIO_Init+0x298>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d026      	beq.n	80015a6 <HAL_GPIO_Init+0xae>
 8001558:	4a8d      	ldr	r2, [pc, #564]	; (8001790 <HAL_GPIO_Init+0x298>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d806      	bhi.n	800156c <HAL_GPIO_Init+0x74>
 800155e:	4a8d      	ldr	r2, [pc, #564]	; (8001794 <HAL_GPIO_Init+0x29c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d020      	beq.n	80015a6 <HAL_GPIO_Init+0xae>
 8001564:	4a8c      	ldr	r2, [pc, #560]	; (8001798 <HAL_GPIO_Init+0x2a0>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d01d      	beq.n	80015a6 <HAL_GPIO_Init+0xae>
          break;
 800156a:	e036      	b.n	80015da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800156c:	4a8b      	ldr	r2, [pc, #556]	; (800179c <HAL_GPIO_Init+0x2a4>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d019      	beq.n	80015a6 <HAL_GPIO_Init+0xae>
 8001572:	4a8b      	ldr	r2, [pc, #556]	; (80017a0 <HAL_GPIO_Init+0x2a8>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d016      	beq.n	80015a6 <HAL_GPIO_Init+0xae>
 8001578:	4a8a      	ldr	r2, [pc, #552]	; (80017a4 <HAL_GPIO_Init+0x2ac>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d013      	beq.n	80015a6 <HAL_GPIO_Init+0xae>
          break;
 800157e:	e02c      	b.n	80015da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	623b      	str	r3, [r7, #32]
          break;
 8001586:	e028      	b.n	80015da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	3304      	adds	r3, #4
 800158e:	623b      	str	r3, [r7, #32]
          break;
 8001590:	e023      	b.n	80015da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	3308      	adds	r3, #8
 8001598:	623b      	str	r3, [r7, #32]
          break;
 800159a:	e01e      	b.n	80015da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	330c      	adds	r3, #12
 80015a2:	623b      	str	r3, [r7, #32]
          break;
 80015a4:	e019      	b.n	80015da <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d102      	bne.n	80015b4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015ae:	2304      	movs	r3, #4
 80015b0:	623b      	str	r3, [r7, #32]
          break;
 80015b2:	e012      	b.n	80015da <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d105      	bne.n	80015c8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015bc:	2308      	movs	r3, #8
 80015be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69fa      	ldr	r2, [r7, #28]
 80015c4:	611a      	str	r2, [r3, #16]
          break;
 80015c6:	e008      	b.n	80015da <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015c8:	2308      	movs	r3, #8
 80015ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69fa      	ldr	r2, [r7, #28]
 80015d0:	615a      	str	r2, [r3, #20]
          break;
 80015d2:	e002      	b.n	80015da <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
          break;
 80015d8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	2bff      	cmp	r3, #255	; 0xff
 80015de:	d801      	bhi.n	80015e4 <HAL_GPIO_Init+0xec>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	e001      	b.n	80015e8 <HAL_GPIO_Init+0xf0>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3304      	adds	r3, #4
 80015e8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	2bff      	cmp	r3, #255	; 0xff
 80015ee:	d802      	bhi.n	80015f6 <HAL_GPIO_Init+0xfe>
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	e002      	b.n	80015fc <HAL_GPIO_Init+0x104>
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	3b08      	subs	r3, #8
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	210f      	movs	r1, #15
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	401a      	ands	r2, r3
 800160e:	6a39      	ldr	r1, [r7, #32]
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	fa01 f303 	lsl.w	r3, r1, r3
 8001616:	431a      	orrs	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 80a2 	beq.w	800176e <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800162a:	4b5f      	ldr	r3, [pc, #380]	; (80017a8 <HAL_GPIO_Init+0x2b0>)
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	4a5e      	ldr	r2, [pc, #376]	; (80017a8 <HAL_GPIO_Init+0x2b0>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6193      	str	r3, [r2, #24]
 8001636:	4b5c      	ldr	r3, [pc, #368]	; (80017a8 <HAL_GPIO_Init+0x2b0>)
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001642:	4a5a      	ldr	r2, [pc, #360]	; (80017ac <HAL_GPIO_Init+0x2b4>)
 8001644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001646:	089b      	lsrs	r3, r3, #2
 8001648:	3302      	adds	r3, #2
 800164a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	220f      	movs	r2, #15
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	4013      	ands	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a51      	ldr	r2, [pc, #324]	; (80017b0 <HAL_GPIO_Init+0x2b8>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d01f      	beq.n	80016ae <HAL_GPIO_Init+0x1b6>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a50      	ldr	r2, [pc, #320]	; (80017b4 <HAL_GPIO_Init+0x2bc>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d019      	beq.n	80016aa <HAL_GPIO_Init+0x1b2>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a4f      	ldr	r2, [pc, #316]	; (80017b8 <HAL_GPIO_Init+0x2c0>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d013      	beq.n	80016a6 <HAL_GPIO_Init+0x1ae>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a4e      	ldr	r2, [pc, #312]	; (80017bc <HAL_GPIO_Init+0x2c4>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d00d      	beq.n	80016a2 <HAL_GPIO_Init+0x1aa>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a4d      	ldr	r2, [pc, #308]	; (80017c0 <HAL_GPIO_Init+0x2c8>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d007      	beq.n	800169e <HAL_GPIO_Init+0x1a6>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a4c      	ldr	r2, [pc, #304]	; (80017c4 <HAL_GPIO_Init+0x2cc>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d101      	bne.n	800169a <HAL_GPIO_Init+0x1a2>
 8001696:	2305      	movs	r3, #5
 8001698:	e00a      	b.n	80016b0 <HAL_GPIO_Init+0x1b8>
 800169a:	2306      	movs	r3, #6
 800169c:	e008      	b.n	80016b0 <HAL_GPIO_Init+0x1b8>
 800169e:	2304      	movs	r3, #4
 80016a0:	e006      	b.n	80016b0 <HAL_GPIO_Init+0x1b8>
 80016a2:	2303      	movs	r3, #3
 80016a4:	e004      	b.n	80016b0 <HAL_GPIO_Init+0x1b8>
 80016a6:	2302      	movs	r3, #2
 80016a8:	e002      	b.n	80016b0 <HAL_GPIO_Init+0x1b8>
 80016aa:	2301      	movs	r3, #1
 80016ac:	e000      	b.n	80016b0 <HAL_GPIO_Init+0x1b8>
 80016ae:	2300      	movs	r3, #0
 80016b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b2:	f002 0203 	and.w	r2, r2, #3
 80016b6:	0092      	lsls	r2, r2, #2
 80016b8:	4093      	lsls	r3, r2
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4313      	orrs	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016c0:	493a      	ldr	r1, [pc, #232]	; (80017ac <HAL_GPIO_Init+0x2b4>)
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	089b      	lsrs	r3, r3, #2
 80016c6:	3302      	adds	r3, #2
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d006      	beq.n	80016e8 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016da:	4b3b      	ldr	r3, [pc, #236]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	493a      	ldr	r1, [pc, #232]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	600b      	str	r3, [r1, #0]
 80016e6:	e006      	b.n	80016f6 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016e8:	4b37      	ldr	r3, [pc, #220]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	43db      	mvns	r3, r3
 80016f0:	4935      	ldr	r1, [pc, #212]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 80016f2:	4013      	ands	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d006      	beq.n	8001710 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001702:	4b31      	ldr	r3, [pc, #196]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	4930      	ldr	r1, [pc, #192]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	604b      	str	r3, [r1, #4]
 800170e:	e006      	b.n	800171e <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001710:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	43db      	mvns	r3, r3
 8001718:	492b      	ldr	r1, [pc, #172]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 800171a:	4013      	ands	r3, r2
 800171c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d006      	beq.n	8001738 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800172a:	4b27      	ldr	r3, [pc, #156]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	4926      	ldr	r1, [pc, #152]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	608b      	str	r3, [r1, #8]
 8001736:	e006      	b.n	8001746 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001738:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	43db      	mvns	r3, r3
 8001740:	4921      	ldr	r1, [pc, #132]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001742:	4013      	ands	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d006      	beq.n	8001760 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001752:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	491c      	ldr	r1, [pc, #112]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	60cb      	str	r3, [r1, #12]
 800175e:	e006      	b.n	800176e <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001762:	68da      	ldr	r2, [r3, #12]
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	43db      	mvns	r3, r3
 8001768:	4917      	ldr	r1, [pc, #92]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 800176a:	4013      	ands	r3, r2
 800176c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	3301      	adds	r3, #1
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	fa22 f303 	lsr.w	r3, r2, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	f47f aec4 	bne.w	800150c <HAL_GPIO_Init+0x14>
  }
}
 8001784:	bf00      	nop
 8001786:	372c      	adds	r7, #44	; 0x2c
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	10210000 	.word	0x10210000
 8001794:	10110000 	.word	0x10110000
 8001798:	10120000 	.word	0x10120000
 800179c:	10310000 	.word	0x10310000
 80017a0:	10320000 	.word	0x10320000
 80017a4:	10220000 	.word	0x10220000
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40010000 	.word	0x40010000
 80017b0:	40010800 	.word	0x40010800
 80017b4:	40010c00 	.word	0x40010c00
 80017b8:	40011000 	.word	0x40011000
 80017bc:	40011400 	.word	0x40011400
 80017c0:	40011800 	.word	0x40011800
 80017c4:	40011c00 	.word	0x40011c00
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	887b      	ldrh	r3, [r7, #2]
 80017de:	4013      	ands	r3, r2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d002      	beq.n	80017ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017e4:	2301      	movs	r3, #1
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	e001      	b.n	80017ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr

080017fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	460b      	mov	r3, r1
 8001804:	807b      	strh	r3, [r7, #2]
 8001806:	4613      	mov	r3, r2
 8001808:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800180a:	787b      	ldrb	r3, [r7, #1]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001810:	887a      	ldrh	r2, [r7, #2]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001816:	e003      	b.n	8001820 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001818:	887b      	ldrh	r3, [r7, #2]
 800181a:	041a      	lsls	r2, r3, #16
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	611a      	str	r2, [r3, #16]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr

0800182a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	460b      	mov	r3, r1
 8001834:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	887b      	ldrh	r3, [r7, #2]
 800183c:	4013      	ands	r3, r2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001842:	887a      	ldrh	r2, [r7, #2]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001848:	e002      	b.n	8001850 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800184a:	887a      	ldrh	r2, [r7, #2]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	611a      	str	r2, [r3, #16]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr
	...

0800185c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001868:	695a      	ldr	r2, [r3, #20]
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	4013      	ands	r3, r2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d006      	beq.n	8001880 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001872:	4a05      	ldr	r2, [pc, #20]	; (8001888 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001874:	88fb      	ldrh	r3, [r7, #6]
 8001876:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	4618      	mov	r0, r3
 800187c:	f007 f958 	bl	8008b30 <HAL_GPIO_EXTI_Callback>
  }
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40010400 	.word	0x40010400

0800188c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e26c      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 8087 	beq.w	80019ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018ac:	4b92      	ldr	r3, [pc, #584]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 030c 	and.w	r3, r3, #12
 80018b4:	2b04      	cmp	r3, #4
 80018b6:	d00c      	beq.n	80018d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018b8:	4b8f      	ldr	r3, [pc, #572]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 030c 	and.w	r3, r3, #12
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	d112      	bne.n	80018ea <HAL_RCC_OscConfig+0x5e>
 80018c4:	4b8c      	ldr	r3, [pc, #560]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d0:	d10b      	bne.n	80018ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d2:	4b89      	ldr	r3, [pc, #548]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d06c      	beq.n	80019b8 <HAL_RCC_OscConfig+0x12c>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d168      	bne.n	80019b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e246      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f2:	d106      	bne.n	8001902 <HAL_RCC_OscConfig+0x76>
 80018f4:	4b80      	ldr	r3, [pc, #512]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a7f      	ldr	r2, [pc, #508]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	e02e      	b.n	8001960 <HAL_RCC_OscConfig+0xd4>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10c      	bne.n	8001924 <HAL_RCC_OscConfig+0x98>
 800190a:	4b7b      	ldr	r3, [pc, #492]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a7a      	ldr	r2, [pc, #488]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	4b78      	ldr	r3, [pc, #480]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a77      	ldr	r2, [pc, #476]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800191c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	e01d      	b.n	8001960 <HAL_RCC_OscConfig+0xd4>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800192c:	d10c      	bne.n	8001948 <HAL_RCC_OscConfig+0xbc>
 800192e:	4b72      	ldr	r3, [pc, #456]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a71      	ldr	r2, [pc, #452]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	4b6f      	ldr	r3, [pc, #444]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a6e      	ldr	r2, [pc, #440]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	e00b      	b.n	8001960 <HAL_RCC_OscConfig+0xd4>
 8001948:	4b6b      	ldr	r3, [pc, #428]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a6a      	ldr	r2, [pc, #424]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800194e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	4b68      	ldr	r3, [pc, #416]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a67      	ldr	r2, [pc, #412]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800195a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800195e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d013      	beq.n	8001990 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff fc8c 	bl	8001284 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001970:	f7ff fc88 	bl	8001284 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b64      	cmp	r3, #100	; 0x64
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e1fa      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001982:	4b5d      	ldr	r3, [pc, #372]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0f0      	beq.n	8001970 <HAL_RCC_OscConfig+0xe4>
 800198e:	e014      	b.n	80019ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff fc78 	bl	8001284 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001998:	f7ff fc74 	bl	8001284 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	; 0x64
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e1e6      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019aa:	4b53      	ldr	r3, [pc, #332]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x10c>
 80019b6:	e000      	b.n	80019ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d063      	beq.n	8001a8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019c6:	4b4c      	ldr	r3, [pc, #304]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00b      	beq.n	80019ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019d2:	4b49      	ldr	r3, [pc, #292]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	2b08      	cmp	r3, #8
 80019dc:	d11c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x18c>
 80019de:	4b46      	ldr	r3, [pc, #280]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d116      	bne.n	8001a18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ea:	4b43      	ldr	r3, [pc, #268]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d005      	beq.n	8001a02 <HAL_RCC_OscConfig+0x176>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d001      	beq.n	8001a02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e1ba      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a02:	4b3d      	ldr	r3, [pc, #244]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4939      	ldr	r1, [pc, #228]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a16:	e03a      	b.n	8001a8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d020      	beq.n	8001a62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a20:	4b36      	ldr	r3, [pc, #216]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a26:	f7ff fc2d 	bl	8001284 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2e:	f7ff fc29 	bl	8001284 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e19b      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a40:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0f0      	beq.n	8001a2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	4927      	ldr	r1, [pc, #156]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	600b      	str	r3, [r1, #0]
 8001a60:	e015      	b.n	8001a8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a62:	4b26      	ldr	r3, [pc, #152]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7ff fc0c 	bl	8001284 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a70:	f7ff fc08 	bl	8001284 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e17a      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a82:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d03a      	beq.n	8001b10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d019      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aa2:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <HAL_RCC_OscConfig+0x274>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa8:	f7ff fbec 	bl	8001284 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab0:	f7ff fbe8 	bl	8001284 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e15a      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f000 fada 	bl	8002088 <RCC_Delay>
 8001ad4:	e01c      	b.n	8001b10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <HAL_RCC_OscConfig+0x274>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001adc:	f7ff fbd2 	bl	8001284 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae2:	e00f      	b.n	8001b04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae4:	f7ff fbce 	bl	8001284 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d908      	bls.n	8001b04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e140      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000
 8001afc:	42420000 	.word	0x42420000
 8001b00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b04:	4b9e      	ldr	r3, [pc, #632]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1e9      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 80a6 	beq.w	8001c6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b22:	4b97      	ldr	r3, [pc, #604]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10d      	bne.n	8001b4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	4b94      	ldr	r3, [pc, #592]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	4a93      	ldr	r2, [pc, #588]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b38:	61d3      	str	r3, [r2, #28]
 8001b3a:	4b91      	ldr	r3, [pc, #580]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b46:	2301      	movs	r3, #1
 8001b48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4a:	4b8e      	ldr	r3, [pc, #568]	; (8001d84 <HAL_RCC_OscConfig+0x4f8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d118      	bne.n	8001b88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b56:	4b8b      	ldr	r3, [pc, #556]	; (8001d84 <HAL_RCC_OscConfig+0x4f8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a8a      	ldr	r2, [pc, #552]	; (8001d84 <HAL_RCC_OscConfig+0x4f8>)
 8001b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b62:	f7ff fb8f 	bl	8001284 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6a:	f7ff fb8b 	bl	8001284 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b64      	cmp	r3, #100	; 0x64
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e0fd      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7c:	4b81      	ldr	r3, [pc, #516]	; (8001d84 <HAL_RCC_OscConfig+0x4f8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d106      	bne.n	8001b9e <HAL_RCC_OscConfig+0x312>
 8001b90:	4b7b      	ldr	r3, [pc, #492]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	4a7a      	ldr	r2, [pc, #488]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6213      	str	r3, [r2, #32]
 8001b9c:	e02d      	b.n	8001bfa <HAL_RCC_OscConfig+0x36e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x334>
 8001ba6:	4b76      	ldr	r3, [pc, #472]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	4a75      	ldr	r2, [pc, #468]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001bac:	f023 0301 	bic.w	r3, r3, #1
 8001bb0:	6213      	str	r3, [r2, #32]
 8001bb2:	4b73      	ldr	r3, [pc, #460]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	4a72      	ldr	r2, [pc, #456]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001bb8:	f023 0304 	bic.w	r3, r3, #4
 8001bbc:	6213      	str	r3, [r2, #32]
 8001bbe:	e01c      	b.n	8001bfa <HAL_RCC_OscConfig+0x36e>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	2b05      	cmp	r3, #5
 8001bc6:	d10c      	bne.n	8001be2 <HAL_RCC_OscConfig+0x356>
 8001bc8:	4b6d      	ldr	r3, [pc, #436]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	4a6c      	ldr	r2, [pc, #432]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001bce:	f043 0304 	orr.w	r3, r3, #4
 8001bd2:	6213      	str	r3, [r2, #32]
 8001bd4:	4b6a      	ldr	r3, [pc, #424]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	4a69      	ldr	r2, [pc, #420]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6213      	str	r3, [r2, #32]
 8001be0:	e00b      	b.n	8001bfa <HAL_RCC_OscConfig+0x36e>
 8001be2:	4b67      	ldr	r3, [pc, #412]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	4a66      	ldr	r2, [pc, #408]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001be8:	f023 0301 	bic.w	r3, r3, #1
 8001bec:	6213      	str	r3, [r2, #32]
 8001bee:	4b64      	ldr	r3, [pc, #400]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	4a63      	ldr	r2, [pc, #396]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001bf4:	f023 0304 	bic.w	r3, r3, #4
 8001bf8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d015      	beq.n	8001c2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c02:	f7ff fb3f 	bl	8001284 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c08:	e00a      	b.n	8001c20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0a:	f7ff fb3b 	bl	8001284 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e0ab      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c20:	4b57      	ldr	r3, [pc, #348]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0ee      	beq.n	8001c0a <HAL_RCC_OscConfig+0x37e>
 8001c2c:	e014      	b.n	8001c58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2e:	f7ff fb29 	bl	8001284 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c34:	e00a      	b.n	8001c4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c36:	f7ff fb25 	bl	8001284 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e095      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c4c:	4b4c      	ldr	r3, [pc, #304]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1ee      	bne.n	8001c36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c58:	7dfb      	ldrb	r3, [r7, #23]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d105      	bne.n	8001c6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5e:	4b48      	ldr	r3, [pc, #288]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	4a47      	ldr	r2, [pc, #284]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 8081 	beq.w	8001d76 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c74:	4b42      	ldr	r3, [pc, #264]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d061      	beq.n	8001d44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d146      	bne.n	8001d16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c88:	4b3f      	ldr	r3, [pc, #252]	; (8001d88 <HAL_RCC_OscConfig+0x4fc>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8e:	f7ff faf9 	bl	8001284 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c96:	f7ff faf5 	bl	8001284 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e067      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca8:	4b35      	ldr	r3, [pc, #212]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f0      	bne.n	8001c96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cbc:	d108      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cbe:	4b30      	ldr	r3, [pc, #192]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	492d      	ldr	r1, [pc, #180]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd0:	4b2b      	ldr	r3, [pc, #172]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a19      	ldr	r1, [r3, #32]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	430b      	orrs	r3, r1
 8001ce2:	4927      	ldr	r1, [pc, #156]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce8:	4b27      	ldr	r3, [pc, #156]	; (8001d88 <HAL_RCC_OscConfig+0x4fc>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cee:	f7ff fac9 	bl	8001284 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf6:	f7ff fac5 	bl	8001284 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e037      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d08:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x46a>
 8001d14:	e02f      	b.n	8001d76 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d16:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <HAL_RCC_OscConfig+0x4fc>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7ff fab2 	bl	8001284 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d24:	f7ff faae 	bl	8001284 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e020      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d36:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x498>
 8001d42:	e018      	b.n	8001d76 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e013      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d106      	bne.n	8001d72 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d001      	beq.n	8001d76 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40007000 	.word	0x40007000
 8001d88:	42420060 	.word	0x42420060

08001d8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0d0      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001da0:	4b6a      	ldr	r3, [pc, #424]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d910      	bls.n	8001dd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dae:	4b67      	ldr	r3, [pc, #412]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 0207 	bic.w	r2, r3, #7
 8001db6:	4965      	ldr	r1, [pc, #404]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbe:	4b63      	ldr	r3, [pc, #396]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e0b8      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d020      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001de8:	4b59      	ldr	r3, [pc, #356]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	4a58      	ldr	r2, [pc, #352]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001df2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e00:	4b53      	ldr	r3, [pc, #332]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	4a52      	ldr	r2, [pc, #328]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e0c:	4b50      	ldr	r3, [pc, #320]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	494d      	ldr	r1, [pc, #308]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d040      	beq.n	8001eac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d107      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e32:	4b47      	ldr	r3, [pc, #284]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d115      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e07f      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d107      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4a:	4b41      	ldr	r3, [pc, #260]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d109      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e073      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5a:	4b3d      	ldr	r3, [pc, #244]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e06b      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e6a:	4b39      	ldr	r3, [pc, #228]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f023 0203 	bic.w	r2, r3, #3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	4936      	ldr	r1, [pc, #216]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e7c:	f7ff fa02 	bl	8001284 <HAL_GetTick>
 8001e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e82:	e00a      	b.n	8001e9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e84:	f7ff f9fe 	bl	8001284 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e053      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9a:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 020c 	and.w	r2, r3, #12
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d1eb      	bne.n	8001e84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eac:	4b27      	ldr	r3, [pc, #156]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d210      	bcs.n	8001edc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eba:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 0207 	bic.w	r2, r3, #7
 8001ec2:	4922      	ldr	r1, [pc, #136]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eca:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d001      	beq.n	8001edc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e032      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d008      	beq.n	8001efa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee8:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	4916      	ldr	r1, [pc, #88]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d009      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f06:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	490e      	ldr	r1, [pc, #56]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f1a:	f000 f821 	bl	8001f60 <HAL_RCC_GetSysClockFreq>
 8001f1e:	4601      	mov	r1, r0
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	091b      	lsrs	r3, r3, #4
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <HAL_RCC_ClockConfig+0x1c8>)
 8001f2c:	5cd3      	ldrb	r3, [r2, r3]
 8001f2e:	fa21 f303 	lsr.w	r3, r1, r3
 8001f32:	4a09      	ldr	r2, [pc, #36]	; (8001f58 <HAL_RCC_ClockConfig+0x1cc>)
 8001f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_RCC_ClockConfig+0x1d0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff f960 	bl	8001200 <HAL_InitTick>

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40022000 	.word	0x40022000
 8001f50:	40021000 	.word	0x40021000
 8001f54:	0800e140 	.word	0x0800e140
 8001f58:	20000008 	.word	0x20000008
 8001f5c:	20000000 	.word	0x20000000

08001f60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f60:	b490      	push	{r4, r7}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f66:	4b2a      	ldr	r3, [pc, #168]	; (8002010 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f68:	1d3c      	adds	r4, r7, #4
 8001f6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f70:	4b28      	ldr	r3, [pc, #160]	; (8002014 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f8a:	4b23      	ldr	r3, [pc, #140]	; (8002018 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d002      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x40>
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d003      	beq.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x46>
 8001f9e:	e02d      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fa0:	4b1e      	ldr	r3, [pc, #120]	; (800201c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fa2:	623b      	str	r3, [r7, #32]
      break;
 8001fa4:	e02d      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	0c9b      	lsrs	r3, r3, #18
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fb8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d013      	beq.n	8001fec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fc4:	4b14      	ldr	r3, [pc, #80]	; (8002018 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	0c5b      	lsrs	r3, r3, #17
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001fd8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	4a0f      	ldr	r2, [pc, #60]	; (800201c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fde:	fb02 f203 	mul.w	r2, r2, r3
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fea:	e004      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	4a0c      	ldr	r2, [pc, #48]	; (8002020 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ff0:	fb02 f303 	mul.w	r3, r2, r3
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	623b      	str	r3, [r7, #32]
      break;
 8001ffa:	e002      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ffc:	4b07      	ldr	r3, [pc, #28]	; (800201c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ffe:	623b      	str	r3, [r7, #32]
      break;
 8002000:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002002:	6a3b      	ldr	r3, [r7, #32]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3728      	adds	r7, #40	; 0x28
 8002008:	46bd      	mov	sp, r7
 800200a:	bc90      	pop	{r4, r7}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	0800c8a8 	.word	0x0800c8a8
 8002014:	0800c8b8 	.word	0x0800c8b8
 8002018:	40021000 	.word	0x40021000
 800201c:	007a1200 	.word	0x007a1200
 8002020:	003d0900 	.word	0x003d0900

08002024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002028:	4b02      	ldr	r3, [pc, #8]	; (8002034 <HAL_RCC_GetHCLKFreq+0x10>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr
 8002034:	20000008 	.word	0x20000008

08002038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800203c:	f7ff fff2 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 8002040:	4601      	mov	r1, r0
 8002042:	4b05      	ldr	r3, [pc, #20]	; (8002058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	0a1b      	lsrs	r3, r3, #8
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	4a03      	ldr	r2, [pc, #12]	; (800205c <HAL_RCC_GetPCLK1Freq+0x24>)
 800204e:	5cd3      	ldrb	r3, [r2, r3]
 8002050:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002054:	4618      	mov	r0, r3
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40021000 	.word	0x40021000
 800205c:	0800e150 	.word	0x0800e150

08002060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002064:	f7ff ffde 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 8002068:	4601      	mov	r1, r0
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	0adb      	lsrs	r3, r3, #11
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	4a03      	ldr	r2, [pc, #12]	; (8002084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002076:	5cd3      	ldrb	r3, [r2, r3]
 8002078:	fa21 f303 	lsr.w	r3, r1, r3
}
 800207c:	4618      	mov	r0, r3
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000
 8002084:	0800e150 	.word	0x0800e150

08002088 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002090:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <RCC_Delay+0x34>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <RCC_Delay+0x38>)
 8002096:	fba2 2303 	umull	r2, r3, r2, r3
 800209a:	0a5b      	lsrs	r3, r3, #9
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	fb02 f303 	mul.w	r3, r2, r3
 80020a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020a4:	bf00      	nop
  }
  while (Delay --);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1e5a      	subs	r2, r3, #1
 80020aa:	60fa      	str	r2, [r7, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1f9      	bne.n	80020a4 <RCC_Delay+0x1c>
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20000008 	.word	0x20000008
 80020c0:	10624dd3 	.word	0x10624dd3

080020c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e03f      	b.n	8002156 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d106      	bne.n	80020f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f006 fec0 	bl	8008e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2224      	movs	r2, #36	; 0x24
 80020f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002106:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f90b 	bl	8002324 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800211c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695a      	ldr	r2, [r3, #20]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800212c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800213c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2220      	movs	r2, #32
 8002150:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b088      	sub	sp, #32
 8002162:	af02      	add	r7, sp, #8
 8002164:	60f8      	str	r0, [r7, #12]
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	603b      	str	r3, [r7, #0]
 800216a:	4613      	mov	r3, r2
 800216c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b20      	cmp	r3, #32
 800217c:	f040 8083 	bne.w	8002286 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d002      	beq.n	800218c <HAL_UART_Transmit+0x2e>
 8002186:	88fb      	ldrh	r3, [r7, #6]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e07b      	b.n	8002288 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_UART_Transmit+0x40>
 800219a:	2302      	movs	r3, #2
 800219c:	e074      	b.n	8002288 <HAL_UART_Transmit+0x12a>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2221      	movs	r2, #33	; 0x21
 80021b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80021b4:	f7ff f866 	bl	8001284 <HAL_GetTick>
 80021b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	88fa      	ldrh	r2, [r7, #6]
 80021be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	88fa      	ldrh	r2, [r7, #6]
 80021c4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80021c6:	e042      	b.n	800224e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	3b01      	subs	r3, #1
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021de:	d122      	bne.n	8002226 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2200      	movs	r2, #0
 80021e8:	2180      	movs	r1, #128	; 0x80
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 f850 	bl	8002290 <UART_WaitOnFlagUntilTimeout>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e046      	b.n	8002288 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800220c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d103      	bne.n	800221e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	3302      	adds	r3, #2
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	e017      	b.n	800224e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	3301      	adds	r3, #1
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	e013      	b.n	800224e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2200      	movs	r2, #0
 800222e:	2180      	movs	r1, #128	; 0x80
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 f82d 	bl	8002290 <UART_WaitOnFlagUntilTimeout>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e023      	b.n	8002288 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	60ba      	str	r2, [r7, #8]
 8002246:	781a      	ldrb	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002252:	b29b      	uxth	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1b7      	bne.n	80021c8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	2200      	movs	r2, #0
 8002260:	2140      	movs	r1, #64	; 0x40
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 f814 	bl	8002290 <UART_WaitOnFlagUntilTimeout>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e00a      	b.n	8002288 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2220      	movs	r2, #32
 8002276:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	e000      	b.n	8002288 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002286:	2302      	movs	r3, #2
  }
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	603b      	str	r3, [r7, #0]
 800229c:	4613      	mov	r3, r2
 800229e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022a0:	e02c      	b.n	80022fc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a8:	d028      	beq.n	80022fc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d007      	beq.n	80022c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80022b0:	f7fe ffe8 	bl	8001284 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d21d      	bcs.n	80022fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80022ce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0201 	bic.w	r2, r2, #1
 80022de:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2220      	movs	r2, #32
 80022e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e00f      	b.n	800231c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	4013      	ands	r3, r2
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	429a      	cmp	r2, r3
 800230a:	bf0c      	ite	eq
 800230c:	2301      	moveq	r3, #1
 800230e:	2300      	movne	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	461a      	mov	r2, r3
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	429a      	cmp	r2, r3
 8002318:	d0c3      	beq.n	80022a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	4313      	orrs	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800235e:	f023 030c 	bic.w	r3, r3, #12
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6812      	ldr	r2, [r2, #0]
 8002366:	68f9      	ldr	r1, [r7, #12]
 8002368:	430b      	orrs	r3, r1
 800236a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699a      	ldr	r2, [r3, #24]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a52      	ldr	r2, [pc, #328]	; (80024d0 <UART_SetConfig+0x1ac>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d14e      	bne.n	800242a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800238c:	f7ff fe68 	bl	8002060 <HAL_RCC_GetPCLK2Freq>
 8002390:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	009a      	lsls	r2, r3, #2
 800239c:	441a      	add	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a8:	4a4a      	ldr	r2, [pc, #296]	; (80024d4 <UART_SetConfig+0x1b0>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	0119      	lsls	r1, r3, #4
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	009a      	lsls	r2, r3, #2
 80023bc:	441a      	add	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80023c8:	4b42      	ldr	r3, [pc, #264]	; (80024d4 <UART_SetConfig+0x1b0>)
 80023ca:	fba3 0302 	umull	r0, r3, r3, r2
 80023ce:	095b      	lsrs	r3, r3, #5
 80023d0:	2064      	movs	r0, #100	; 0x64
 80023d2:	fb00 f303 	mul.w	r3, r0, r3
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	3332      	adds	r3, #50	; 0x32
 80023dc:	4a3d      	ldr	r2, [pc, #244]	; (80024d4 <UART_SetConfig+0x1b0>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023e8:	4419      	add	r1, r3
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	009a      	lsls	r2, r3, #2
 80023f4:	441a      	add	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002400:	4b34      	ldr	r3, [pc, #208]	; (80024d4 <UART_SetConfig+0x1b0>)
 8002402:	fba3 0302 	umull	r0, r3, r3, r2
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	2064      	movs	r0, #100	; 0x64
 800240a:	fb00 f303 	mul.w	r3, r0, r3
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	3332      	adds	r3, #50	; 0x32
 8002414:	4a2f      	ldr	r2, [pc, #188]	; (80024d4 <UART_SetConfig+0x1b0>)
 8002416:	fba2 2303 	umull	r2, r3, r2, r3
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	f003 020f 	and.w	r2, r3, #15
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	440a      	add	r2, r1
 8002426:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002428:	e04d      	b.n	80024c6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800242a:	f7ff fe05 	bl	8002038 <HAL_RCC_GetPCLK1Freq>
 800242e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	009a      	lsls	r2, r3, #2
 800243a:	441a      	add	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	fbb2 f3f3 	udiv	r3, r2, r3
 8002446:	4a23      	ldr	r2, [pc, #140]	; (80024d4 <UART_SetConfig+0x1b0>)
 8002448:	fba2 2303 	umull	r2, r3, r2, r3
 800244c:	095b      	lsrs	r3, r3, #5
 800244e:	0119      	lsls	r1, r3, #4
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	4613      	mov	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	009a      	lsls	r2, r3, #2
 800245a:	441a      	add	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	fbb2 f2f3 	udiv	r2, r2, r3
 8002466:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <UART_SetConfig+0x1b0>)
 8002468:	fba3 0302 	umull	r0, r3, r3, r2
 800246c:	095b      	lsrs	r3, r3, #5
 800246e:	2064      	movs	r0, #100	; 0x64
 8002470:	fb00 f303 	mul.w	r3, r0, r3
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	3332      	adds	r3, #50	; 0x32
 800247a:	4a16      	ldr	r2, [pc, #88]	; (80024d4 <UART_SetConfig+0x1b0>)
 800247c:	fba2 2303 	umull	r2, r3, r2, r3
 8002480:	095b      	lsrs	r3, r3, #5
 8002482:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002486:	4419      	add	r1, r3
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	009a      	lsls	r2, r3, #2
 8002492:	441a      	add	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	fbb2 f2f3 	udiv	r2, r2, r3
 800249e:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <UART_SetConfig+0x1b0>)
 80024a0:	fba3 0302 	umull	r0, r3, r3, r2
 80024a4:	095b      	lsrs	r3, r3, #5
 80024a6:	2064      	movs	r0, #100	; 0x64
 80024a8:	fb00 f303 	mul.w	r3, r0, r3
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	3332      	adds	r3, #50	; 0x32
 80024b2:	4a08      	ldr	r2, [pc, #32]	; (80024d4 <UART_SetConfig+0x1b0>)
 80024b4:	fba2 2303 	umull	r2, r3, r2, r3
 80024b8:	095b      	lsrs	r3, r3, #5
 80024ba:	f003 020f 	and.w	r2, r3, #15
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	440a      	add	r2, r1
 80024c4:	609a      	str	r2, [r3, #8]
}
 80024c6:	bf00      	nop
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40013800 	.word	0x40013800
 80024d4:	51eb851f 	.word	0x51eb851f

080024d8 <__Crash>:
#include <stdlib.h>

static bool __flash;

bool __Crash(GameObject* obj1, GameObject* obj2)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
	float cdis = (float)(obj1->collider + obj2->collider);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	8a1b      	ldrh	r3, [r3, #16]
 80024e6:	461a      	mov	r2, r3
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	8a1b      	ldrh	r3, [r3, #16]
 80024ec:	4413      	add	r3, r2
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe fc10 	bl	8000d14 <__aeabi_i2f>
 80024f4:	4603      	mov	r3, r0
 80024f6:	60bb      	str	r3, [r7, #8]

	bool flag_1 = false;
 80024f8:	2300      	movs	r3, #0
 80024fa:	73fb      	strb	r3, [r7, #15]
	bool flag_2 = false;
 80024fc:	2300      	movs	r3, #0
 80024fe:	73bb      	strb	r3, [r7, #14]

	if (obj1->pos_x > obj2->pos_x)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	4619      	mov	r1, r3
 800250a:	4610      	mov	r0, r2
 800250c:	f7fe fe12 	bl	8001134 <__aeabi_fcmpgt>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d012      	beq.n	800253c <__Crash+0x64>
	{
		if (obj1->pos_x - obj2->pos_x < cdis)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	4619      	mov	r1, r3
 8002520:	4610      	mov	r0, r2
 8002522:	f7fe fb41 	bl	8000ba8 <__aeabi_fsub>
 8002526:	4603      	mov	r3, r0
 8002528:	4619      	mov	r1, r3
 800252a:	68b8      	ldr	r0, [r7, #8]
 800252c:	f7fe fe02 	bl	8001134 <__aeabi_fcmpgt>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d014      	beq.n	8002560 <__Crash+0x88>
			flag_1 = true;
 8002536:	2301      	movs	r3, #1
 8002538:	73fb      	strb	r3, [r7, #15]
 800253a:	e011      	b.n	8002560 <__Crash+0x88>
	}
	else
	{
		if (obj2->pos_x - obj1->pos_x < cdis)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4619      	mov	r1, r3
 8002546:	4610      	mov	r0, r2
 8002548:	f7fe fb2e 	bl	8000ba8 <__aeabi_fsub>
 800254c:	4603      	mov	r3, r0
 800254e:	4619      	mov	r1, r3
 8002550:	68b8      	ldr	r0, [r7, #8]
 8002552:	f7fe fdef 	bl	8001134 <__aeabi_fcmpgt>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <__Crash+0x88>
			flag_1 = true;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
	}

	if (obj1->pos_y > obj2->pos_y)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4619      	mov	r1, r3
 800256a:	4610      	mov	r0, r2
 800256c:	f7fe fde2 	bl	8001134 <__aeabi_fcmpgt>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d012      	beq.n	800259c <__Crash+0xc4>
	{
		if (obj1->pos_y - obj2->pos_y < cdis)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	4619      	mov	r1, r3
 8002580:	4610      	mov	r0, r2
 8002582:	f7fe fb11 	bl	8000ba8 <__aeabi_fsub>
 8002586:	4603      	mov	r3, r0
 8002588:	4619      	mov	r1, r3
 800258a:	68b8      	ldr	r0, [r7, #8]
 800258c:	f7fe fdd2 	bl	8001134 <__aeabi_fcmpgt>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d014      	beq.n	80025c0 <__Crash+0xe8>
			flag_2 = true;
 8002596:	2301      	movs	r3, #1
 8002598:	73bb      	strb	r3, [r7, #14]
 800259a:	e011      	b.n	80025c0 <__Crash+0xe8>
	}
	else
	{
		if (obj2->pos_y - obj1->pos_y < cdis)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	68da      	ldr	r2, [r3, #12]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4619      	mov	r1, r3
 80025a6:	4610      	mov	r0, r2
 80025a8:	f7fe fafe 	bl	8000ba8 <__aeabi_fsub>
 80025ac:	4603      	mov	r3, r0
 80025ae:	4619      	mov	r1, r3
 80025b0:	68b8      	ldr	r0, [r7, #8]
 80025b2:	f7fe fdbf 	bl	8001134 <__aeabi_fcmpgt>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <__Crash+0xe8>
			flag_2 = true;
 80025bc:	2301      	movs	r3, #1
 80025be:	73bb      	strb	r3, [r7, #14]
	}

	return flag_1 && flag_2;
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d004      	beq.n	80025d0 <__Crash+0xf8>
 80025c6:	7bbb      	ldrb	r3, [r7, #14]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <__Crash+0xf8>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <__Crash+0xfa>
 80025d0:	2300      	movs	r3, #0
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	b2db      	uxtb	r3, r3
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <__ObjectEvent_LoopOnce>:

unsigned __ObjectEvent_LoopOnce(LinkedList* events, bool is_bullet)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	70fb      	strb	r3, [r7, #3]
	unsigned i = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61fb      	str	r3, [r7, #28]
	Node *it, *it_temp;
	GameEvent *event;
	void *game_object;

	// object loop
	for (it = events->head->next; it; it = it->next)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	61bb      	str	r3, [r7, #24]
 80025f8:	e0bc      	b.n	8002774 <__ObjectEvent_LoopOnce+0x194>
	{
		event = ((GameEvent*)it->object);
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	613b      	str	r3, [r7, #16]
		game_object = event->game_object;
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	60fb      	str	r3, [r7, #12]

		// Create
		if (!((GameObject*)game_object)->__created)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	7f1b      	ldrb	r3, [r3, #28]
 800260a:	f083 0301 	eor.w	r3, r3, #1
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <__ObjectEvent_LoopOnce+0x3c>
		{
			event->OnCreate(game_object);
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	4798      	blx	r3
		}
		// Update
		event->OnUpdate(game_object);
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	4798      	blx	r3
		// Bullet crash
		if (is_bullet)
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 8082 	beq.w	8002730 <__ObjectEvent_LoopOnce+0x150>
		{
			if (((GameObject_Bullet*)game_object)->is_enemy)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002632:	2b00      	cmp	r3, #0
 8002634:	d03b      	beq.n	80026ae <__ObjectEvent_LoopOnce+0xce>
			{
				// Emeny bullet crash with self plane
				if (__Crash((GameObject*)game_object, (GameObject*)Engine_SelfEvent->game_object))
 8002636:	4b54      	ldr	r3, [pc, #336]	; (8002788 <__ObjectEvent_LoopOnce+0x1a8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4619      	mov	r1, r3
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f7ff ff4a 	bl	80024d8 <__Crash>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d072      	beq.n	8002730 <__ObjectEvent_LoopOnce+0x150>
				{
					((GameObject*)game_object)->__to_destroy = true;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2201      	movs	r2, #1
 800264e:	775a      	strb	r2, [r3, #29]
					if (
						((GameObject_Self*)Engine_SelfEvent->game_object)->life >
 8002650:	4b4d      	ldr	r3, [pc, #308]	; (8002788 <__ObjectEvent_LoopOnce+0x1a8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6a1a      	ldr	r2, [r3, #32]
						((GameObject_Bullet*)game_object)->damage
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a1b      	ldr	r3, [r3, #32]
					if (
 800265c:	429a      	cmp	r2, r3
 800265e:	d90b      	bls.n	8002678 <__ObjectEvent_LoopOnce+0x98>
					)
						((GameObject_Self*)Engine_SelfEvent->game_object)->life -=
 8002660:	4b49      	ldr	r3, [pc, #292]	; (8002788 <__ObjectEvent_LoopOnce+0x1a8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6a19      	ldr	r1, [r3, #32]
						((GameObject_Bullet*)game_object)->damage;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a1a      	ldr	r2, [r3, #32]
						((GameObject_Self*)Engine_SelfEvent->game_object)->life -=
 800266c:	4b46      	ldr	r3, [pc, #280]	; (8002788 <__ObjectEvent_LoopOnce+0x1a8>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	1a8a      	subs	r2, r1, r2
 8002674:	621a      	str	r2, [r3, #32]
 8002676:	e004      	b.n	8002682 <__ObjectEvent_LoopOnce+0xa2>
					else
					{
						((GameObject_Self*)Engine_SelfEvent->game_object)->life = 0;
 8002678:	4b43      	ldr	r3, [pc, #268]	; (8002788 <__ObjectEvent_LoopOnce+0x1a8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2200      	movs	r2, #0
 8002680:	621a      	str	r2, [r3, #32]
					}
					if (!__flash)
 8002682:	4b42      	ldr	r3, [pc, #264]	; (800278c <__ObjectEvent_LoopOnce+0x1ac>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	f083 0301 	eor.w	r3, r3, #1
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d04f      	beq.n	8002730 <__ObjectEvent_LoopOnce+0x150>
					{
						// TODO
						// open led
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002690:	2200      	movs	r2, #0
 8002692:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002696:	483e      	ldr	r0, [pc, #248]	; (8002790 <__ObjectEvent_LoopOnce+0x1b0>)
 8002698:	f7ff f8af 	bl	80017fa <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800269c:	2200      	movs	r2, #0
 800269e:	2104      	movs	r1, #4
 80026a0:	483c      	ldr	r0, [pc, #240]	; (8002794 <__ObjectEvent_LoopOnce+0x1b4>)
 80026a2:	f7ff f8aa 	bl	80017fa <HAL_GPIO_WritePin>
						__flash = true;
 80026a6:	4b39      	ldr	r3, [pc, #228]	; (800278c <__ObjectEvent_LoopOnce+0x1ac>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	701a      	strb	r2, [r3, #0]
 80026ac:	e040      	b.n	8002730 <__ObjectEvent_LoopOnce+0x150>
				}	
			}
			else
			{
				// Self bullet crash with enemy plane
				for (it_temp = Engine_EnemyEvents.head->next; it_temp; it_temp = it_temp->next)
 80026ae:	4b3a      	ldr	r3, [pc, #232]	; (8002798 <__ObjectEvent_LoopOnce+0x1b8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	e038      	b.n	800272a <__ObjectEvent_LoopOnce+0x14a>
				{
					if (__Crash((GameObject*)game_object, (GameObject*)((GameEvent*)it_temp->object)->game_object))
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4619      	mov	r1, r3
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f7ff ff09 	bl	80024d8 <__Crash>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d02b      	beq.n	8002724 <__ObjectEvent_LoopOnce+0x144>
					{
						((GameObject*)game_object)->__to_destroy = true;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2201      	movs	r2, #1
 80026d0:	775a      	strb	r2, [r3, #29]
						if (
							((GameObject_Enemy*)((GameEvent*)it_temp->object)->game_object)->life >
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6a1a      	ldr	r2, [r3, #32]
							((GameObject_Bullet*)game_object)->damage
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
						if (
 80026de:	429a      	cmp	r2, r3
 80026e0:	d90b      	bls.n	80026fa <__ObjectEvent_LoopOnce+0x11a>
						)
							((GameObject_Enemy*)((GameEvent*)it_temp->object)->game_object)->life -=
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6a19      	ldr	r1, [r3, #32]
							((GameObject_Bullet*)game_object)->damage;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6a1a      	ldr	r2, [r3, #32]
							((GameObject_Enemy*)((GameEvent*)it_temp->object)->game_object)->life -=
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	1a8a      	subs	r2, r1, r2
 80026f6:	621a      	str	r2, [r3, #32]
 80026f8:	e014      	b.n	8002724 <__ObjectEvent_LoopOnce+0x144>
						else if (((GameObject_Enemy*)((GameEvent*)it_temp->object)->game_object)->life)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00e      	beq.n	8002724 <__ObjectEvent_LoopOnce+0x144>
						{
							((GameObject_Enemy*)((GameEvent*)it_temp->object)->game_object)->life = 0;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2200      	movs	r2, #0
 800270e:	621a      	str	r2, [r3, #32]
							Game_KillCount++;
 8002710:	4b22      	ldr	r3, [pc, #136]	; (800279c <__ObjectEvent_LoopOnce+0x1bc>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	3301      	adds	r3, #1
 8002716:	4a21      	ldr	r2, [pc, #132]	; (800279c <__ObjectEvent_LoopOnce+0x1bc>)
 8002718:	6013      	str	r3, [r2, #0]
							Game_Score += 200;
 800271a:	4b21      	ldr	r3, [pc, #132]	; (80027a0 <__ObjectEvent_LoopOnce+0x1c0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	33c8      	adds	r3, #200	; 0xc8
 8002720:	4a1f      	ldr	r2, [pc, #124]	; (80027a0 <__ObjectEvent_LoopOnce+0x1c0>)
 8002722:	6013      	str	r3, [r2, #0]
				for (it_temp = Engine_EnemyEvents.head->next; it_temp; it_temp = it_temp->next)
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1c3      	bne.n	80026b8 <__ObjectEvent_LoopOnce+0xd8>
					}
				}
			}
		}
		// Destroy
		if (((GameObject*)game_object)->__to_destroy)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	7f5b      	ldrb	r3, [r3, #29]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d010      	beq.n	800275a <__ObjectEvent_LoopOnce+0x17a>
		{
			event->OnDestroy(game_object);
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	4798      	blx	r3

			free(event);
 8002740:	6938      	ldr	r0, [r7, #16]
 8002742:	f008 f83d 	bl	800a7c0 <free>
			it = it->prev;
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	61bb      	str	r3, [r7, #24]
			RemoveNode(events, it->next);
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4619      	mov	r1, r3
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f007 fdd4 	bl	800a300 <RemoveNode>
 8002758:	e009      	b.n	800276e <__ObjectEvent_LoopOnce+0x18e>
		}
		// Render
		else
		{
			event->OnRender(game_object, screen);
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	4a11      	ldr	r2, [pc, #68]	; (80027a4 <__ObjectEvent_LoopOnce+0x1c4>)
 8002760:	6812      	ldr	r2, [r2, #0]
 8002762:	4611      	mov	r1, r2
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	4798      	blx	r3
			i++;
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	3301      	adds	r3, #1
 800276c:	61fb      	str	r3, [r7, #28]
	for (it = events->head->next; it; it = it->next)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	61bb      	str	r3, [r7, #24]
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	2b00      	cmp	r3, #0
 8002778:	f47f af3f 	bne.w	80025fa <__ObjectEvent_LoopOnce+0x1a>
		}
	}
	return i;
 800277c:	69fb      	ldr	r3, [r7, #28]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3720      	adds	r7, #32
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000a04 	.word	0x20000a04
 800278c:	200009d0 	.word	0x200009d0
 8002790:	40010800 	.word	0x40010800
 8002794:	40011400 	.word	0x40011400
 8002798:	20000a0c 	.word	0x20000a0c
 800279c:	200009ec 	.word	0x200009ec
 80027a0:	20000a08 	.word	0x20000a08
 80027a4:	20000a00 	.word	0x20000a00

080027a8 <GameEngineInit>:

void GameEngineInit()
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
	Game_Life = 1;
 80027ac:	4b24      	ldr	r3, [pc, #144]	; (8002840 <GameEngineInit+0x98>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	601a      	str	r2, [r3, #0]
	Game_KillCount = 0;
 80027b2:	4b24      	ldr	r3, [pc, #144]	; (8002844 <GameEngineInit+0x9c>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
	Game_Score = 0;
 80027b8:	4b23      	ldr	r3, [pc, #140]	; (8002848 <GameEngineInit+0xa0>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
	Game_BombNum = 0;
 80027be:	4b23      	ldr	r3, [pc, #140]	; (800284c <GameEngineInit+0xa4>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
	Game_ChapterNum = 0;
 80027c4:	4b22      	ldr	r3, [pc, #136]	; (8002850 <GameEngineInit+0xa8>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
	Game_ChapterPassed = false;
 80027ca:	4b22      	ldr	r3, [pc, #136]	; (8002854 <GameEngineInit+0xac>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]

	Engine_KeyPressed = 0;
 80027d0:	4b21      	ldr	r3, [pc, #132]	; (8002858 <GameEngineInit+0xb0>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]

	Engine_EnemyEvents.head = malloc(sizeof(Node));
 80027d6:	200c      	movs	r0, #12
 80027d8:	f007 ffea 	bl	800a7b0 <malloc>
 80027dc:	4603      	mov	r3, r0
 80027de:	461a      	mov	r2, r3
 80027e0:	4b1e      	ldr	r3, [pc, #120]	; (800285c <GameEngineInit+0xb4>)
 80027e2:	601a      	str	r2, [r3, #0]
	Engine_EnemyEvents.head->next = NULL;
 80027e4:	4b1d      	ldr	r3, [pc, #116]	; (800285c <GameEngineInit+0xb4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2200      	movs	r2, #0
 80027ea:	609a      	str	r2, [r3, #8]
	Engine_EnemyEvents.tail = Engine_EnemyEvents.head;
 80027ec:	4b1b      	ldr	r3, [pc, #108]	; (800285c <GameEngineInit+0xb4>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a1a      	ldr	r2, [pc, #104]	; (800285c <GameEngineInit+0xb4>)
 80027f2:	6053      	str	r3, [r2, #4]

	Engine_BulletEvents.head = malloc(sizeof(Node));
 80027f4:	200c      	movs	r0, #12
 80027f6:	f007 ffdb 	bl	800a7b0 <malloc>
 80027fa:	4603      	mov	r3, r0
 80027fc:	461a      	mov	r2, r3
 80027fe:	4b18      	ldr	r3, [pc, #96]	; (8002860 <GameEngineInit+0xb8>)
 8002800:	601a      	str	r2, [r3, #0]
	Engine_BulletEvents.head->next = NULL;
 8002802:	4b17      	ldr	r3, [pc, #92]	; (8002860 <GameEngineInit+0xb8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2200      	movs	r2, #0
 8002808:	609a      	str	r2, [r3, #8]
	Engine_BulletEvents.tail = Engine_BulletEvents.head;
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <GameEngineInit+0xb8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a14      	ldr	r2, [pc, #80]	; (8002860 <GameEngineInit+0xb8>)
 8002810:	6053      	str	r3, [r2, #4]

	Engine_UIEvents.head = malloc(sizeof(Node));
 8002812:	200c      	movs	r0, #12
 8002814:	f007 ffcc 	bl	800a7b0 <malloc>
 8002818:	4603      	mov	r3, r0
 800281a:	461a      	mov	r2, r3
 800281c:	4b11      	ldr	r3, [pc, #68]	; (8002864 <GameEngineInit+0xbc>)
 800281e:	601a      	str	r2, [r3, #0]
	Engine_UIEvents.head->next = NULL;
 8002820:	4b10      	ldr	r3, [pc, #64]	; (8002864 <GameEngineInit+0xbc>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2200      	movs	r2, #0
 8002826:	609a      	str	r2, [r3, #8]
	Engine_UIEvents.tail = Engine_UIEvents.head;
 8002828:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <GameEngineInit+0xbc>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0d      	ldr	r2, [pc, #52]	; (8002864 <GameEngineInit+0xbc>)
 800282e:	6053      	str	r3, [r2, #4]

	__flash = false;
 8002830:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <GameEngineInit+0xc0>)
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]
	println("Init finished");
 8002836:	480d      	ldr	r0, [pc, #52]	; (800286c <GameEngineInit+0xc4>)
 8002838:	f006 f9cc 	bl	8008bd4 <println>
}
 800283c:	bf00      	nop
 800283e:	bd80      	pop	{r7, pc}
 8002840:	200009f4 	.word	0x200009f4
 8002844:	200009ec 	.word	0x200009ec
 8002848:	20000a08 	.word	0x20000a08
 800284c:	20000a1c 	.word	0x20000a1c
 8002850:	20000a14 	.word	0x20000a14
 8002854:	20000a20 	.word	0x20000a20
 8002858:	200009f0 	.word	0x200009f0
 800285c:	20000a0c 	.word	0x20000a0c
 8002860:	20000a24 	.word	0x20000a24
 8002864:	200009f8 	.word	0x200009f8
 8002868:	200009d0 	.word	0x200009d0
 800286c:	0800c8bc 	.word	0x0800c8bc

08002870 <GameEngineLoop>:

void GameEngineLoop(void (*OnLoop)(void))
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
	Node *it;
	void *self_object;
	unsigned i, j;

	Time_OnStart();
 8002878:	f007 fef8 	bl	800a66c <Time_OnStart>

	BloodBar_Init();
 800287c:	f000 f918 	bl	8002ab0 <BloodBar_Init>

	while (!Game_ChapterPassed)
 8002880:	e0ad      	b.n	80029de <GameEngineLoop+0x16e>
	{
		// init
		i = 0; j = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
		screen = InitScreen(screen);
 800288a:	4b60      	ldr	r3, [pc, #384]	; (8002a0c <GameEngineLoop+0x19c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f007 fe31 	bl	800a4f6 <InitScreen>
 8002894:	4602      	mov	r2, r0
 8002896:	4b5d      	ldr	r3, [pc, #372]	; (8002a0c <GameEngineLoop+0x19c>)
 8002898:	601a      	str	r2, [r3, #0]
		Time_OnUpdate();
 800289a:	f007 fef3 	bl	800a684 <Time_OnUpdate>

		if (__flash)
 800289e:	4b5c      	ldr	r3, [pc, #368]	; (8002a10 <GameEngineLoop+0x1a0>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00d      	beq.n	80028c2 <GameEngineLoop+0x52>
		{
			// TODO
			// close led
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80028a6:	2201      	movs	r2, #1
 80028a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028ac:	4859      	ldr	r0, [pc, #356]	; (8002a14 <GameEngineLoop+0x1a4>)
 80028ae:	f7fe ffa4 	bl	80017fa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80028b2:	2201      	movs	r2, #1
 80028b4:	2104      	movs	r1, #4
 80028b6:	4858      	ldr	r0, [pc, #352]	; (8002a18 <GameEngineLoop+0x1a8>)
 80028b8:	f7fe ff9f 	bl	80017fa <HAL_GPIO_WritePin>
			__flash = false;
 80028bc:	4b54      	ldr	r3, [pc, #336]	; (8002a10 <GameEngineLoop+0x1a0>)
 80028be:	2200      	movs	r2, #0
 80028c0:	701a      	strb	r2, [r3, #0]
		}


		// Event on loop
		OnLoop();
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4798      	blx	r3
		
		// freshing self plane
		if (Engine_SelfEvent)
 80028c6:	4b55      	ldr	r3, [pc, #340]	; (8002a1c <GameEngineLoop+0x1ac>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d04a      	beq.n	8002964 <GameEngineLoop+0xf4>
		{
			self_object = Engine_SelfEvent->game_object;
 80028ce:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <GameEngineLoop+0x1ac>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60bb      	str	r3, [r7, #8]

			// Create
			if (!((GameObject*)self_object)->__created)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	7f1b      	ldrb	r3, [r3, #28]
 80028da:	f083 0301 	eor.w	r3, r3, #1
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d004      	beq.n	80028ee <GameEngineLoop+0x7e>
			{
				Engine_SelfEvent->OnCreate(self_object);
 80028e4:	4b4d      	ldr	r3, [pc, #308]	; (8002a1c <GameEngineLoop+0x1ac>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	68b8      	ldr	r0, [r7, #8]
 80028ec:	4798      	blx	r3
			}
			// Update
			Engine_SelfEvent->OnUpdate(self_object);
 80028ee:	4b4b      	ldr	r3, [pc, #300]	; (8002a1c <GameEngineLoop+0x1ac>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	68b8      	ldr	r0, [r7, #8]
 80028f6:	4798      	blx	r3
			// Destroy
			if (((GameObject*)self_object)->__to_destroy)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	7f5b      	ldrb	r3, [r3, #29]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d017      	beq.n	8002930 <GameEngineLoop+0xc0>
			{
				Engine_SelfEvent->OnDestroy(self_object);
 8002900:	4b46      	ldr	r3, [pc, #280]	; (8002a1c <GameEngineLoop+0x1ac>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	68b8      	ldr	r0, [r7, #8]
 8002908:	4798      	blx	r3
				
				if (!Game_Life)
 800290a:	4b45      	ldr	r3, [pc, #276]	; (8002a20 <GameEngineLoop+0x1b0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d108      	bne.n	8002924 <GameEngineLoop+0xb4>
				{
					free(Engine_SelfEvent);
 8002912:	4b42      	ldr	r3, [pc, #264]	; (8002a1c <GameEngineLoop+0x1ac>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f007 ff52 	bl	800a7c0 <free>
					Engine_SelfEvent = NULL;
 800291c:	4b3f      	ldr	r3, [pc, #252]	; (8002a1c <GameEngineLoop+0x1ac>)
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	e022      	b.n	800296a <GameEngineLoop+0xfa>
				}
				else
				{
					Game_Life--;
 8002924:	4b3e      	ldr	r3, [pc, #248]	; (8002a20 <GameEngineLoop+0x1b0>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3b01      	subs	r3, #1
 800292a:	4a3d      	ldr	r2, [pc, #244]	; (8002a20 <GameEngineLoop+0x1b0>)
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e01c      	b.n	800296a <GameEngineLoop+0xfa>
				}
			}
			// Render
			else
			{
				Engine_SelfEvent->OnRender(self_object, screen);
 8002930:	4b3a      	ldr	r3, [pc, #232]	; (8002a1c <GameEngineLoop+0x1ac>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	4a35      	ldr	r2, [pc, #212]	; (8002a0c <GameEngineLoop+0x19c>)
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	4611      	mov	r1, r2
 800293c:	68b8      	ldr	r0, [r7, #8]
 800293e:	4798      	blx	r3
				BloodBar_Update(
						(int)((((GameObject_Self*)self_object)->life)*10/SELF_LIFE_MAX)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	6a1a      	ldr	r2, [r3, #32]
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	461a      	mov	r2, r3
 800294e:	4b35      	ldr	r3, [pc, #212]	; (8002a24 <GameEngineLoop+0x1b4>)
 8002950:	fba3 2302 	umull	r2, r3, r3, r2
 8002954:	095b      	lsrs	r3, r3, #5
				BloodBar_Update(
 8002956:	4618      	mov	r0, r3
 8002958:	f000 f8c0 	bl	8002adc <BloodBar_Update>
				);
				i++;
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	3301      	adds	r3, #1
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	e002      	b.n	800296a <GameEngineLoop+0xfa>
			}
		}
		else
		{
			GameOver();
 8002964:	f000 f870 	bl	8002a48 <GameOver>
			break;
 8002968:	e043      	b.n	80029f2 <GameEngineLoop+0x182>
		}

		// object loops
		i += __ObjectEvent_LoopOnce(&Engine_EnemyEvents, false);
 800296a:	2100      	movs	r1, #0
 800296c:	482e      	ldr	r0, [pc, #184]	; (8002a28 <GameEngineLoop+0x1b8>)
 800296e:	f7ff fe37 	bl	80025e0 <__ObjectEvent_LoopOnce>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4413      	add	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
		i += __ObjectEvent_LoopOnce(&Engine_BulletEvents, true);
 800297a:	2101      	movs	r1, #1
 800297c:	482b      	ldr	r0, [pc, #172]	; (8002a2c <GameEngineLoop+0x1bc>)
 800297e:	f7ff fe2f 	bl	80025e0 <__ObjectEvent_LoopOnce>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4413      	add	r3, r2
 8002988:	613b      	str	r3, [r7, #16]
		// UI loop
		for (it = Engine_UIEvents.head->next; it; it = it->next)
 800298a:	4b29      	ldr	r3, [pc, #164]	; (8002a30 <GameEngineLoop+0x1c0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	e005      	b.n	80029a0 <GameEngineLoop+0x130>
		{
			j++;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	3301      	adds	r3, #1
 8002998:	60fb      	str	r3, [r7, #12]
		for (it = Engine_UIEvents.head->next; it; it = it->next)
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f6      	bne.n	8002994 <GameEngineLoop+0x124>
			// TODO
		}
		
		// Reset
		Engine_KeyPressed = 0;
 80029a6:	4b23      	ldr	r3, [pc, #140]	; (8002a34 <GameEngineLoop+0x1c4>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
		// Flush
		screen = Flush(screen);
 80029ac:	4b17      	ldr	r3, [pc, #92]	; (8002a0c <GameEngineLoop+0x19c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f007 fde1 	bl	800a578 <Flush>
 80029b6:	4602      	mov	r2, r0
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <GameEngineLoop+0x19c>)
 80029ba:	601a      	str	r2, [r3, #0]
		// Score
		Game_Score++;
 80029bc:	4b1e      	ldr	r3, [pc, #120]	; (8002a38 <GameEngineLoop+0x1c8>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	3301      	adds	r3, #1
 80029c2:	4a1d      	ldr	r2, [pc, #116]	; (8002a38 <GameEngineLoop+0x1c8>)
 80029c4:	6013      	str	r3, [r2, #0]

		if (Game_ChapterPassed)
 80029c6:	4b1d      	ldr	r3, [pc, #116]	; (8002a3c <GameEngineLoop+0x1cc>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d110      	bne.n	80029f0 <GameEngineLoop+0x180>
			break;

		printlnf("Time: %d, %u gameobject and %u UI freshed", GetTime(), i, j);
 80029ce:	f007 fe41 	bl	800a654 <GetTime>
 80029d2:	4601      	mov	r1, r0
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	4819      	ldr	r0, [pc, #100]	; (8002a40 <GameEngineLoop+0x1d0>)
 80029da:	f006 f919 	bl	8008c10 <printlnf>
	while (!Game_ChapterPassed)
 80029de:	4b17      	ldr	r3, [pc, #92]	; (8002a3c <GameEngineLoop+0x1cc>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	f083 0301 	eor.w	r3, r3, #1
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f47f af4a 	bne.w	8002882 <GameEngineLoop+0x12>
 80029ee:	e000      	b.n	80029f2 <GameEngineLoop+0x182>
			break;
 80029f0:	bf00      	nop
	}

	Game_ChapterNum++;
 80029f2:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <GameEngineLoop+0x1d4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	3301      	adds	r3, #1
 80029f8:	4a12      	ldr	r2, [pc, #72]	; (8002a44 <GameEngineLoop+0x1d4>)
 80029fa:	6013      	str	r3, [r2, #0]
	Game_ChapterPassed = false;
 80029fc:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <GameEngineLoop+0x1cc>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]
}
 8002a02:	bf00      	nop
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000a00 	.word	0x20000a00
 8002a10:	200009d0 	.word	0x200009d0
 8002a14:	40010800 	.word	0x40010800
 8002a18:	40011400 	.word	0x40011400
 8002a1c:	20000a04 	.word	0x20000a04
 8002a20:	200009f4 	.word	0x200009f4
 8002a24:	51eb851f 	.word	0x51eb851f
 8002a28:	20000a0c 	.word	0x20000a0c
 8002a2c:	20000a24 	.word	0x20000a24
 8002a30:	200009f8 	.word	0x200009f8
 8002a34:	200009f0 	.word	0x200009f0
 8002a38:	20000a08 	.word	0x20000a08
 8002a3c:	20000a20 	.word	0x20000a20
 8002a40:	0800c8cc 	.word	0x0800c8cc
 8002a44:	20000a14 	.word	0x20000a14

08002a48 <GameOver>:

void GameOver()
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af02      	add	r7, sp, #8
	LCD_Clear(GRAY);
 8002a4e:	f248 4030 	movw	r0, #33840	; 0x8430
 8002a52:	f005 fd2b 	bl	80084ac <LCD_Clear>
	BACK_COLOR = GRAY;
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <GameOver+0x58>)
 8002a58:	f248 4230 	movw	r2, #33840	; 0x8430
 8002a5c:	801a      	strh	r2, [r3, #0]
	//LCD_DrawRectangle(30, 40, 230, 64);
	//LCD_Color_Fill(30, 40, 230, 64,WHITE);
	LCD_ShowString(30, 10, 140, 24, 14, (uint8_t*) "Score :");
 8002a5e:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <GameOver+0x5c>)
 8002a60:	9301      	str	r3, [sp, #4]
 8002a62:	230e      	movs	r3, #14
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	2318      	movs	r3, #24
 8002a68:	228c      	movs	r2, #140	; 0x8c
 8002a6a:	210a      	movs	r1, #10
 8002a6c:	201e      	movs	r0, #30
 8002a6e:	f005 ffa7 	bl	80089c0 <LCD_ShowString>
	LCD_ShowString(30, 80, 200, 24, 24, (uint8_t*) "Game Over ^_^");
 8002a72:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <GameOver+0x60>)
 8002a74:	9301      	str	r3, [sp, #4]
 8002a76:	2318      	movs	r3, #24
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	2318      	movs	r3, #24
 8002a7c:	22c8      	movs	r2, #200	; 0xc8
 8002a7e:	2150      	movs	r1, #80	; 0x50
 8002a80:	201e      	movs	r0, #30
 8002a82:	f005 ff9d 	bl	80089c0 <LCD_ShowString>

	//LCD_Color_Fill(20, 110, 220, 112,BLACK);

	LCD_ShowNum(100, 30 ,Game_Score, 5,24);
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <GameOver+0x64>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	2318      	movs	r3, #24
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	2305      	movs	r3, #5
 8002a90:	211e      	movs	r1, #30
 8002a92:	2064      	movs	r0, #100	; 0x64
 8002a94:	f005 ff22 	bl	80088dc <LCD_ShowNum>
	exit(0);
 8002a98:	2000      	movs	r0, #0
 8002a9a:	f007 fe51 	bl	800a740 <exit>
 8002a9e:	bf00      	nop
 8002aa0:	20000006 	.word	0x20000006
 8002aa4:	0800c8f8 	.word	0x0800c8f8
 8002aa8:	0800c900 	.word	0x0800c900
 8002aac:	20000a08 	.word	0x20000a08

08002ab0 <BloodBar_Init>:
#include "lcd.h"

int __last;

void BloodBar_Init()
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af02      	add	r7, sp, #8
	__last = 10;
 8002ab6:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <BloodBar_Init+0x28>)
 8002ab8:	220a      	movs	r2, #10
 8002aba:	601a      	str	r2, [r3, #0]
	LCD_Fill(0, 292, 100, 297, WHITE);
 8002abc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	f240 1329 	movw	r3, #297	; 0x129
 8002ac6:	2264      	movs	r2, #100	; 0x64
 8002ac8:	f44f 7192 	mov.w	r1, #292	; 0x124
 8002acc:	2000      	movs	r0, #0
 8002ace:	f005 fd4f 	bl	8008570 <LCD_Fill>
}
 8002ad2:	bf00      	nop
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20000a2c 	.word	0x20000a2c

08002adc <BloodBar_Update>:

void BloodBar_Update(int present)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af02      	add	r7, sp, #8
 8002ae2:	6078      	str	r0, [r7, #4]
	if (present != __last)
 8002ae4:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <BloodBar_Update+0x58>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d01d      	beq.n	8002b2a <BloodBar_Update+0x4e>
	{
		LCD_Fill(0, 292, 100, 297, BLACK);
 8002aee:	2300      	movs	r3, #0
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	f240 1329 	movw	r3, #297	; 0x129
 8002af6:	2264      	movs	r2, #100	; 0x64
 8002af8:	f44f 7192 	mov.w	r1, #292	; 0x124
 8002afc:	2000      	movs	r0, #0
 8002afe:	f005 fd37 	bl	8008570 <LCD_Fill>
		LCD_Fill(0, 292, 10*present, 297, WHITE);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	461a      	mov	r2, r3
 8002b08:	0092      	lsls	r2, r2, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	f240 1329 	movw	r3, #297	; 0x129
 8002b1a:	f44f 7192 	mov.w	r1, #292	; 0x124
 8002b1e:	2000      	movs	r0, #0
 8002b20:	f005 fd26 	bl	8008570 <LCD_Fill>
		__last = present;
 8002b24:	4a03      	ldr	r2, [pc, #12]	; (8002b34 <BloodBar_Update+0x58>)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6013      	str	r3, [r2, #0]
	}
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000a2c 	.word	0x20000a2c

08002b38 <RegistGameEvent>:
	void* game_object,
	void (*OnCreate)(void*),
	void (*OnUpdate)(void*),
	void (*OnDestroy)(void*),
	void (*OnRender)(void*, Color**)
){
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
 8002b44:	603b      	str	r3, [r7, #0]
	GameEvent* ge = malloc(sizeof(GameEvent));
 8002b46:	2014      	movs	r0, #20
 8002b48:	f007 fe32 	bl	800a7b0 <malloc>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	617b      	str	r3, [r7, #20]

	ge->game_object = game_object;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	601a      	str	r2, [r3, #0]
	ge->OnCreate = OnCreate;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	605a      	str	r2, [r3, #4]
	ge->OnUpdate = OnUpdate;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	609a      	str	r2, [r3, #8]
	ge->OnDestroy = OnDestroy;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	60da      	str	r2, [r3, #12]
	ge->OnRender = OnRender;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	6a3a      	ldr	r2, [r7, #32]
 8002b6c:	611a      	str	r2, [r3, #16]

	return ge;
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <GameObject_Initialize>:
void GameObject_Initialize
(
	GameObject* self, uint16_t pos_x, uint16_t pos_y, 
	uint16_t collider, uint16_t width, uint16_t height,
	Color* img
){
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	4608      	mov	r0, r1
 8002b82:	4611      	mov	r1, r2
 8002b84:	461a      	mov	r2, r3
 8002b86:	4603      	mov	r3, r0
 8002b88:	817b      	strh	r3, [r7, #10]
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	813b      	strh	r3, [r7, #8]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	80fb      	strh	r3, [r7, #6]
	self->speed_x = 0.0f;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
	self->speed_y = 0.0f;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	605a      	str	r2, [r3, #4]
	self->pos_x = (float)pos_x;
 8002ba2:	897b      	ldrh	r3, [r7, #10]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fe f8b1 	bl	8000d0c <__aeabi_ui2f>
 8002baa:	4602      	mov	r2, r0
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	609a      	str	r2, [r3, #8]
	self->pos_y = (float)pos_y;
 8002bb0:	893b      	ldrh	r3, [r7, #8]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fe f8aa 	bl	8000d0c <__aeabi_ui2f>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	60da      	str	r2, [r3, #12]
	self->collider = collider;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	88fa      	ldrh	r2, [r7, #6]
 8002bc2:	821a      	strh	r2, [r3, #16]
	self->width = width;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8b3a      	ldrh	r2, [r7, #24]
 8002bc8:	825a      	strh	r2, [r3, #18]
	self->height = height;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8bba      	ldrh	r2, [r7, #28]
 8002bce:	829a      	strh	r2, [r3, #20]
	self->img = img;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a3a      	ldr	r2, [r7, #32]
 8002bd4:	619a      	str	r2, [r3, #24]
	self->__created = false;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	771a      	strb	r2, [r3, #28]
	self->__to_destroy = false;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	775a      	strb	r2, [r3, #29]
}
 8002be2:	bf00      	nop
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <GameObject_OnCreate>:

void inline GameObject_OnCreate(GameObject* self)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
	self->__created = true;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	771a      	strb	r2, [r3, #28]
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr
	...

08002c04 <GameObject_OnUpdate>:

void inline GameObject_OnUpdate(GameObject* self)
{
 8002c04:	b5b0      	push	{r4, r5, r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	self->pos_x += self->speed_x * delta_time;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689c      	ldr	r4, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681d      	ldr	r5, [r3, #0]
 8002c14:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <GameObject_OnUpdate+0x6c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe f87b 	bl	8000d14 <__aeabi_i2f>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	4619      	mov	r1, r3
 8002c22:	4628      	mov	r0, r5
 8002c24:	f7fe f8ca 	bl	8000dbc <__aeabi_fmul>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	f7fd ffbd 	bl	8000bac <__addsf3>
 8002c32:	4603      	mov	r3, r0
 8002c34:	461a      	mov	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	609a      	str	r2, [r3, #8]
	self->pos_y += self->speed_y * delta_time;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68dc      	ldr	r4, [r3, #12]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685d      	ldr	r5, [r3, #4]
 8002c42:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <GameObject_OnUpdate+0x6c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fe f864 	bl	8000d14 <__aeabi_i2f>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4628      	mov	r0, r5
 8002c52:	f7fe f8b3 	bl	8000dbc <__aeabi_fmul>
 8002c56:	4603      	mov	r3, r0
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	f7fd ffa6 	bl	8000bac <__addsf3>
 8002c60:	4603      	mov	r3, r0
 8002c62:	461a      	mov	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	60da      	str	r2, [r3, #12]
}
 8002c68:	bf00      	nop
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c70:	20000a18 	.word	0x20000a18

08002c74 <GameObject_OnRender>:

void inline GameObject_OnRender(GameObject* self, Color** screen)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
	Render(self, screen);
 8002c7e:	6839      	ldr	r1, [r7, #0]
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f007 fc1e 	bl	800a4c2 <Render>
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <GameObject_Bullet_Init>:
	float speed_x, float speed_y,
	uint16_t collider,
	uint16_t width, uint16_t height,
	Color* img,
	bool is_enemy
){
 8002c8e:	b590      	push	{r4, r7, lr}
 8002c90:	b089      	sub	sp, #36	; 0x24
 8002c92:	af04      	add	r7, sp, #16
 8002c94:	60f8      	str	r0, [r7, #12]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	817b      	strh	r3, [r7, #10]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	813b      	strh	r3, [r7, #8]
	GameObject_Initialize(
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	8dbc      	ldrh	r4, [r7, #44]	; 0x2c
 8002ca6:	8c3a      	ldrh	r2, [r7, #32]
 8002ca8:	8939      	ldrh	r1, [r7, #8]
 8002caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cac:	9302      	str	r3, [sp, #8]
 8002cae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002cb0:	9301      	str	r3, [sp, #4]
 8002cb2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	4623      	mov	r3, r4
 8002cb8:	f7ff ff5e 	bl	8002b78 <GameObject_Initialize>
		pos_x, pos_y,
		collider,
		width, height,
		img
	);
	self->ttl = ttl;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	897a      	ldrh	r2, [r7, #10]
 8002cc0:	849a      	strh	r2, [r3, #36]	; 0x24
	self->damage = damage;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	621a      	str	r2, [r3, #32]
	self->base.speed_x = speed_x;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ccc:	601a      	str	r2, [r3, #0]
	self->base.speed_y = speed_y;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cd2:	605a      	str	r2, [r3, #4]
	self->is_enemy = is_enemy;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8002cda:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd90      	pop	{r4, r7, pc}

08002ce6 <GameObject_Bullet_OnCreate>:

void inline GameObject_Bullet_OnCreate(GameObject_Bullet* self)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
	GameObject_OnCreate(&self->base);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff7a 	bl	8002bea <GameObject_OnCreate>
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <GameObject_Bullet_OnUpdate>:

void inline GameObject_Bullet_OnUpdate(GameObject_Bullet* self)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
	// 	printlnf("to destroy");
	// printlnf("location of father object: %d", &self->base);
	// if (((GameObject*)self)->__to_destroy)
	// 	printlnf("to destroy");
	
	if (!self->ttl)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d103      	bne.n	8002d16 <GameObject_Bullet_OnUpdate+0x18>
		self->base.__to_destroy = true;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	775a      	strb	r2, [r3, #29]
 8002d14:	e005      	b.n	8002d22 <GameObject_Bullet_OnUpdate+0x24>
	else
		self->ttl -= 1;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	849a      	strh	r2, [r3, #36]	; 0x24
	GameObject_OnUpdate(&self->base);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff ff6d 	bl	8002c04 <GameObject_OnUpdate>
}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <GameObject_Bullet_OnRender>:

void inline GameObject_Bullet_OnRender(GameObject_Bullet* self, Color** screen)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	6039      	str	r1, [r7, #0]
	GameObject_OnRender(&self->base, screen);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6839      	ldr	r1, [r7, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff ff97 	bl	8002c74 <GameObject_OnRender>
}
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <GameObject_Enemy_Init>:
	unsigned life,
	uint16_t pos_x, uint16_t pos_y, 
	uint16_t collider,
	uint16_t width, uint16_t height,
	Color* img
){
 8002d4e:	b590      	push	{r4, r7, lr}
 8002d50:	b089      	sub	sp, #36	; 0x24
 8002d52:	af04      	add	r7, sp, #16
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	4611      	mov	r1, r2
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	80fb      	strh	r3, [r7, #6]
 8002d60:	4613      	mov	r3, r2
 8002d62:	80bb      	strh	r3, [r7, #4]
	GameObject_Initialize(
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	8c3c      	ldrh	r4, [r7, #32]
 8002d68:	88ba      	ldrh	r2, [r7, #4]
 8002d6a:	88f9      	ldrh	r1, [r7, #6]
 8002d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6e:	9302      	str	r3, [sp, #8]
 8002d70:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d72:	9301      	str	r3, [sp, #4]
 8002d74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	4623      	mov	r3, r4
 8002d7a:	f7ff fefd 	bl	8002b78 <GameObject_Initialize>
		pos_x, pos_y,
		collider,
		width, height,
		img
	);
	self->life = life;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	621a      	str	r2, [r3, #32]
}
 8002d84:	bf00      	nop
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd90      	pop	{r4, r7, pc}

08002d8c <GameObject_Enemy_OnCreate>:

void inline GameObject_Enemy_OnCreate(GameObject_Enemy* self)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
	GameObject_OnCreate(&self->base);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff ff27 	bl	8002bea <GameObject_OnCreate>
}
 8002d9c:	bf00      	nop
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <GameObject_Enemy_OnUpdate>:

void inline GameObject_Enemy_OnUpdate(GameObject_Enemy* self)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
	if (!self->life)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d102      	bne.n	8002dba <GameObject_Enemy_OnUpdate+0x16>
		self->base.__to_destroy = true;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	775a      	strb	r2, [r3, #29]
	GameObject_OnUpdate(&self->base);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff ff21 	bl	8002c04 <GameObject_OnUpdate>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <GameObject_Enemy_OnRender>:

void inline GameObject_Enemy_OnRender(GameObject_Enemy* self, Color** screen)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
 8002dd2:	6039      	str	r1, [r7, #0]
	GameObject_OnRender(&self->base, screen);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6839      	ldr	r1, [r7, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff ff4b 	bl	8002c74 <GameObject_OnRender>
}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <GameObject_Self_Init>:
	unsigned life,
	uint16_t pos_x, uint16_t pos_y, 
	uint16_t collider,
	uint16_t width, uint16_t height,
	Color* img
){
 8002de6:	b590      	push	{r4, r7, lr}
 8002de8:	b089      	sub	sp, #36	; 0x24
 8002dea:	af04      	add	r7, sp, #16
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	4611      	mov	r1, r2
 8002df2:	461a      	mov	r2, r3
 8002df4:	460b      	mov	r3, r1
 8002df6:	80fb      	strh	r3, [r7, #6]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	80bb      	strh	r3, [r7, #4]
	self->life = life;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	621a      	str	r2, [r3, #32]
	GameObject_Initialize(
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	8c3c      	ldrh	r4, [r7, #32]
 8002e06:	88ba      	ldrh	r2, [r7, #4]
 8002e08:	88f9      	ldrh	r1, [r7, #6]
 8002e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0c:	9302      	str	r3, [sp, #8]
 8002e0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002e10:	9301      	str	r3, [sp, #4]
 8002e12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	4623      	mov	r3, r4
 8002e18:	f7ff feae 	bl	8002b78 <GameObject_Initialize>
		pos_x, pos_y,
		collider,
		width, height,
		img
	);
}
 8002e1c:	bf00      	nop
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd90      	pop	{r4, r7, pc}

08002e24 <GameObject_Self_OnCreate>:

void inline GameObject_Self_OnCreate(GameObject_Self* self)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
	GameObject_OnCreate(&self->base);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fedb 	bl	8002bea <GameObject_OnCreate>
}
 8002e34:	bf00      	nop
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <GameObject_Self_OnUpdate>:

void inline GameObject_Self_OnUpdate(GameObject_Self* self)
{
 8002e3c:	b5b0      	push	{r4, r5, r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
	if (Engine_KeyPressed > 0)
 8002e44:	4b28      	ldr	r3, [pc, #160]	; (8002ee8 <GameObject_Self_OnUpdate+0xac>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	dd03      	ble.n	8002e54 <GameObject_Self_OnUpdate+0x18>
		self->base.speed_x = -1.4f;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a27      	ldr	r2, [pc, #156]	; (8002eec <GameObject_Self_OnUpdate+0xb0>)
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	e00b      	b.n	8002e6c <GameObject_Self_OnUpdate+0x30>
	else if (Engine_KeyPressed < 0)
 8002e54:	4b24      	ldr	r3, [pc, #144]	; (8002ee8 <GameObject_Self_OnUpdate+0xac>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	da03      	bge.n	8002e64 <GameObject_Self_OnUpdate+0x28>
		self->base.speed_x = 1.4f;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a24      	ldr	r2, [pc, #144]	; (8002ef0 <GameObject_Self_OnUpdate+0xb4>)
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	e003      	b.n	8002e6c <GameObject_Self_OnUpdate+0x30>
	else
		self->base.speed_x = 0.0f;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]

	self->base.pos_x += self->base.speed_x * delta_time;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689c      	ldr	r4, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681d      	ldr	r5, [r3, #0]
 8002e74:	4b1f      	ldr	r3, [pc, #124]	; (8002ef4 <GameObject_Self_OnUpdate+0xb8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fd ff4b 	bl	8000d14 <__aeabi_i2f>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	4619      	mov	r1, r3
 8002e82:	4628      	mov	r0, r5
 8002e84:	f7fd ff9a 	bl	8000dbc <__aeabi_fmul>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	f7fd fe8d 	bl	8000bac <__addsf3>
 8002e92:	4603      	mov	r3, r0
 8002e94:	461a      	mov	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	609a      	str	r2, [r3, #8]
	
	if (self->base.pos_x < 0)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f04f 0100 	mov.w	r1, #0
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe f928 	bl	80010f8 <__aeabi_fcmplt>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d004      	beq.n	8002eb8 <GameObject_Self_OnUpdate+0x7c>
		self->base.pos_x = 0;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	609a      	str	r2, [r3, #8]
 8002eb6:	e00b      	b.n	8002ed0 <GameObject_Self_OnUpdate+0x94>
	else if (self->base.pos_x >= __WIDTH)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	490e      	ldr	r1, [pc, #56]	; (8002ef8 <GameObject_Self_OnUpdate+0xbc>)
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fe f92e 	bl	8001120 <__aeabi_fcmpge>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <GameObject_Self_OnUpdate+0x94>
		self->base.pos_x = __WIDTH - 1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a0b      	ldr	r2, [pc, #44]	; (8002efc <GameObject_Self_OnUpdate+0xc0>)
 8002ece:	609a      	str	r2, [r3, #8]

	if (!self->life)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d102      	bne.n	8002ede <GameObject_Self_OnUpdate+0xa2>
		self->base.__to_destroy = true;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	775a      	strb	r2, [r3, #29]
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	200009f0 	.word	0x200009f0
 8002eec:	bfb33333 	.word	0xbfb33333
 8002ef0:	3fb33333 	.word	0x3fb33333
 8002ef4:	20000a18 	.word	0x20000a18
 8002ef8:	42980000 	.word	0x42980000
 8002efc:	42960000 	.word	0x42960000

08002f00 <GameObject_Self_OnRender>:

void inline GameObject_Self_OnRender(GameObject_Self* self, Color** screen)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
	GameObject_OnRender(&self->base, screen);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6839      	ldr	r1, [r7, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff feb0 	bl	8002c74 <GameObject_OnRender>
}
 8002f14:	bf00      	nop
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f22:	f107 0310 	add.w	r3, r7, #16
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	605a      	str	r2, [r3, #4]
 8002f2c:	609a      	str	r2, [r3, #8]
 8002f2e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f30:	4b46      	ldr	r3, [pc, #280]	; (800304c <MX_GPIO_Init+0x130>)
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	4a45      	ldr	r2, [pc, #276]	; (800304c <MX_GPIO_Init+0x130>)
 8002f36:	f043 0320 	orr.w	r3, r3, #32
 8002f3a:	6193      	str	r3, [r2, #24]
 8002f3c:	4b43      	ldr	r3, [pc, #268]	; (800304c <MX_GPIO_Init+0x130>)
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f48:	4b40      	ldr	r3, [pc, #256]	; (800304c <MX_GPIO_Init+0x130>)
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	4a3f      	ldr	r2, [pc, #252]	; (800304c <MX_GPIO_Init+0x130>)
 8002f4e:	f043 0304 	orr.w	r3, r3, #4
 8002f52:	6193      	str	r3, [r2, #24]
 8002f54:	4b3d      	ldr	r3, [pc, #244]	; (800304c <MX_GPIO_Init+0x130>)
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f60:	4b3a      	ldr	r3, [pc, #232]	; (800304c <MX_GPIO_Init+0x130>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	4a39      	ldr	r2, [pc, #228]	; (800304c <MX_GPIO_Init+0x130>)
 8002f66:	f043 0310 	orr.w	r3, r3, #16
 8002f6a:	6193      	str	r3, [r2, #24]
 8002f6c:	4b37      	ldr	r3, [pc, #220]	; (800304c <MX_GPIO_Init+0x130>)
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	607b      	str	r3, [r7, #4]
 8002f76:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f7e:	4834      	ldr	r0, [pc, #208]	; (8003050 <MX_GPIO_Init+0x134>)
 8002f80:	f7fe fc3b 	bl	80017fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002f84:	2200      	movs	r2, #0
 8002f86:	2104      	movs	r1, #4
 8002f88:	4832      	ldr	r0, [pc, #200]	; (8003054 <MX_GPIO_Init+0x138>)
 8002f8a:	f7fe fc36 	bl	80017fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_WK_Pin;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f92:	4b31      	ldr	r3, [pc, #196]	; (8003058 <MX_GPIO_Init+0x13c>)
 8002f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f96:	2301      	movs	r3, #1
 8002f98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 8002f9a:	f107 0310 	add.w	r3, r7, #16
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	482b      	ldr	r0, [pc, #172]	; (8003050 <MX_GPIO_Init+0x134>)
 8002fa2:	f7fe faa9 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8002fa6:	2320      	movs	r3, #32
 8002fa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002faa:	4b2b      	ldr	r3, [pc, #172]	; (8003058 <MX_GPIO_Init+0x13c>)
 8002fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 8002fb2:	f107 0310 	add.w	r3, r7, #16
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4828      	ldr	r0, [pc, #160]	; (800305c <MX_GPIO_Init+0x140>)
 8002fba:	f7fe fa9d 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8002fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8002fd0:	f107 0310 	add.w	r3, r7, #16
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	481e      	ldr	r0, [pc, #120]	; (8003050 <MX_GPIO_Init+0x134>)
 8002fd8:	f7fe fa8e 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8002fdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fe0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002fe2:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <MX_GPIO_Init+0x13c>)
 8002fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8002fea:	f107 0310 	add.w	r3, r7, #16
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4817      	ldr	r0, [pc, #92]	; (8003050 <MX_GPIO_Init+0x134>)
 8002ff2:	f7fe fa81 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8002ff6:	2304      	movs	r3, #4
 8002ff8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003002:	2302      	movs	r3, #2
 8003004:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8003006:	f107 0310 	add.w	r3, r7, #16
 800300a:	4619      	mov	r1, r3
 800300c:	4811      	ldr	r0, [pc, #68]	; (8003054 <MX_GPIO_Init+0x138>)
 800300e:	f7fe fa73 	bl	80014f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8003012:	2200      	movs	r2, #0
 8003014:	2101      	movs	r1, #1
 8003016:	2006      	movs	r0, #6
 8003018:	f7fe fa37 	bl	800148a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800301c:	2006      	movs	r0, #6
 800301e:	f7fe fa50 	bl	80014c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1);
 8003022:	2201      	movs	r2, #1
 8003024:	2101      	movs	r1, #1
 8003026:	2017      	movs	r0, #23
 8003028:	f7fe fa2f 	bl	800148a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800302c:	2017      	movs	r0, #23
 800302e:	f7fe fa48 	bl	80014c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 2);
 8003032:	2202      	movs	r2, #2
 8003034:	2101      	movs	r1, #1
 8003036:	2028      	movs	r0, #40	; 0x28
 8003038:	f7fe fa27 	bl	800148a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800303c:	2028      	movs	r0, #40	; 0x28
 800303e:	f7fe fa40 	bl	80014c2 <HAL_NVIC_EnableIRQ>

}
 8003042:	bf00      	nop
 8003044:	3720      	adds	r7, #32
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40021000 	.word	0x40021000
 8003050:	40010800 	.word	0x40010800
 8003054:	40011400 	.word	0x40011400
 8003058:	10210000 	.word	0x10210000
 800305c:	40011000 	.word	0x40011000

08003060 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 800306a:	4b0d      	ldr	r3, [pc, #52]	; (80030a0 <LCD_WR_REG+0x40>)
 800306c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003070:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8003072:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <LCD_WR_REG+0x40>)
 8003074:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003078:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 800307a:	4a0a      	ldr	r2, [pc, #40]	; (80030a4 <LCD_WR_REG+0x44>)
 800307c:	88fb      	ldrh	r3, [r7, #6]
 800307e:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8003080:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <LCD_WR_REG+0x40>)
 8003082:	2280      	movs	r2, #128	; 0x80
 8003084:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8003086:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <LCD_WR_REG+0x40>)
 8003088:	2280      	movs	r2, #128	; 0x80
 800308a:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 800308c:	4b04      	ldr	r3, [pc, #16]	; (80030a0 <LCD_WR_REG+0x40>)
 800308e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003092:	611a      	str	r2, [r3, #16]
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	40011000 	.word	0x40011000
 80030a4:	40010c00 	.word	0x40010c00

080030a8 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 80030b2:	4b0d      	ldr	r3, [pc, #52]	; (80030e8 <LCD_WR_DATAX+0x40>)
 80030b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030b8:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 80030ba:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <LCD_WR_DATAX+0x40>)
 80030bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030c0:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 80030c2:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <LCD_WR_DATAX+0x44>)
 80030c4:	88fb      	ldrh	r3, [r7, #6]
 80030c6:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 80030c8:	4b07      	ldr	r3, [pc, #28]	; (80030e8 <LCD_WR_DATAX+0x40>)
 80030ca:	2280      	movs	r2, #128	; 0x80
 80030cc:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80030ce:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <LCD_WR_DATAX+0x40>)
 80030d0:	2280      	movs	r2, #128	; 0x80
 80030d2:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80030d4:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <LCD_WR_DATAX+0x40>)
 80030d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030da:	611a      	str	r2, [r3, #16]
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40011000 	.word	0x40011000
 80030ec:	40010c00 	.word	0x40010c00

080030f0 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 80030f6:	4b1d      	ldr	r3, [pc, #116]	; (800316c <LCD_RD_DATA+0x7c>)
 80030f8:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 80030fc:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 80030fe:	4b1b      	ldr	r3, [pc, #108]	; (800316c <LCD_RD_DATA+0x7c>)
 8003100:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8003104:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8003106:	4b19      	ldr	r3, [pc, #100]	; (800316c <LCD_RD_DATA+0x7c>)
 8003108:	2200      	movs	r2, #0
 800310a:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 800310c:	4b18      	ldr	r3, [pc, #96]	; (8003170 <LCD_RD_DATA+0x80>)
 800310e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003112:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8003114:	4b16      	ldr	r3, [pc, #88]	; (8003170 <LCD_RD_DATA+0x80>)
 8003116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800311a:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 800311c:	4b14      	ldr	r3, [pc, #80]	; (8003170 <LCD_RD_DATA+0x80>)
 800311e:	2240      	movs	r2, #64	; 0x40
 8003120:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8003122:	4b14      	ldr	r3, [pc, #80]	; (8003174 <LCD_RD_DATA+0x84>)
 8003124:	889b      	ldrh	r3, [r3, #4]
 8003126:	f648 1289 	movw	r2, #35209	; 0x8989
 800312a:	4293      	cmp	r3, r2
 800312c:	d102      	bne.n	8003134 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 800312e:	2001      	movs	r0, #1
 8003130:	f7fe f8b2 	bl	8001298 <HAL_Delay>
	t = DATAIN
 8003134:	4b0d      	ldr	r3, [pc, #52]	; (800316c <LCD_RD_DATA+0x7c>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 800313a:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <LCD_RD_DATA+0x80>)
 800313c:	2240      	movs	r2, #64	; 0x40
 800313e:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8003140:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <LCD_RD_DATA+0x80>)
 8003142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003146:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8003148:	4b08      	ldr	r3, [pc, #32]	; (800316c <LCD_RD_DATA+0x7c>)
 800314a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800314e:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8003150:	4b06      	ldr	r3, [pc, #24]	; (800316c <LCD_RD_DATA+0x7c>)
 8003152:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8003156:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8003158:	4b04      	ldr	r3, [pc, #16]	; (800316c <LCD_RD_DATA+0x7c>)
 800315a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800315e:	60da      	str	r2, [r3, #12]
	return t;
 8003160:	88fb      	ldrh	r3, [r7, #6]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40010c00 	.word	0x40010c00
 8003170:	40011000 	.word	0x40011000
 8003174:	20000a30 	.word	0x20000a30

08003178 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	460a      	mov	r2, r1
 8003182:	80fb      	strh	r3, [r7, #6]
 8003184:	4613      	mov	r3, r2
 8003186:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8003188:	88fb      	ldrh	r3, [r7, #6]
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff ff68 	bl	8003060 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <LCD_WriteReg+0x4c>)
 8003192:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003196:	611a      	str	r2, [r3, #16]
 8003198:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <LCD_WriteReg+0x4c>)
 800319a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800319e:	615a      	str	r2, [r3, #20]
 80031a0:	4a09      	ldr	r2, [pc, #36]	; (80031c8 <LCD_WriteReg+0x50>)
 80031a2:	88bb      	ldrh	r3, [r7, #4]
 80031a4:	60d3      	str	r3, [r2, #12]
 80031a6:	4b07      	ldr	r3, [pc, #28]	; (80031c4 <LCD_WriteReg+0x4c>)
 80031a8:	2280      	movs	r2, #128	; 0x80
 80031aa:	615a      	str	r2, [r3, #20]
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <LCD_WriteReg+0x4c>)
 80031ae:	2280      	movs	r2, #128	; 0x80
 80031b0:	611a      	str	r2, [r3, #16]
 80031b2:	4b04      	ldr	r3, [pc, #16]	; (80031c4 <LCD_WriteReg+0x4c>)
 80031b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031b8:	611a      	str	r2, [r3, #16]
}
 80031ba:	bf00      	nop
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40011000 	.word	0x40011000
 80031c8:	40010c00 	.word	0x40010c00

080031cc <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 80031d6:	88fb      	ldrh	r3, [r7, #6]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff ff41 	bl	8003060 <LCD_WR_REG>
	return LCD_RD_DATA();
 80031de:	f7ff ff87 	bl	80030f0 <LCD_RD_DATA>
 80031e2:	4603      	mov	r3, r0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 80031f0:	4b03      	ldr	r3, [pc, #12]	; (8003200 <LCD_WriteRAM_Prepare+0x14>)
 80031f2:	891b      	ldrh	r3, [r3, #8]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff ff33 	bl	8003060 <LCD_WR_REG>
}
 80031fa:	bf00      	nop
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000a30 	.word	0x20000a30

08003204 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	460a      	mov	r2, r1
 800320e:	80fb      	strh	r3, [r7, #6]
 8003210:	4613      	mov	r3, r2
 8003212:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8003214:	4b73      	ldr	r3, [pc, #460]	; (80033e4 <LCD_SetCursor+0x1e0>)
 8003216:	889b      	ldrh	r3, [r3, #4]
 8003218:	f249 3241 	movw	r2, #37697	; 0x9341
 800321c:	4293      	cmp	r3, r2
 800321e:	d005      	beq.n	800322c <LCD_SetCursor+0x28>
 8003220:	4b70      	ldr	r3, [pc, #448]	; (80033e4 <LCD_SetCursor+0x1e0>)
 8003222:	889b      	ldrh	r3, [r3, #4]
 8003224:	f245 3210 	movw	r2, #21264	; 0x5310
 8003228:	4293      	cmp	r3, r2
 800322a:	d164      	bne.n	80032f6 <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 800322c:	4b6d      	ldr	r3, [pc, #436]	; (80033e4 <LCD_SetCursor+0x1e0>)
 800322e:	895b      	ldrh	r3, [r3, #10]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff ff15 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8003236:	4b6c      	ldr	r3, [pc, #432]	; (80033e8 <LCD_SetCursor+0x1e4>)
 8003238:	f44f 7280 	mov.w	r2, #256	; 0x100
 800323c:	611a      	str	r2, [r3, #16]
 800323e:	4b6a      	ldr	r3, [pc, #424]	; (80033e8 <LCD_SetCursor+0x1e4>)
 8003240:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003244:	615a      	str	r2, [r3, #20]
 8003246:	88fb      	ldrh	r3, [r7, #6]
 8003248:	0a1b      	lsrs	r3, r3, #8
 800324a:	b29a      	uxth	r2, r3
 800324c:	4b67      	ldr	r3, [pc, #412]	; (80033ec <LCD_SetCursor+0x1e8>)
 800324e:	60da      	str	r2, [r3, #12]
 8003250:	4b65      	ldr	r3, [pc, #404]	; (80033e8 <LCD_SetCursor+0x1e4>)
 8003252:	2280      	movs	r2, #128	; 0x80
 8003254:	615a      	str	r2, [r3, #20]
 8003256:	4b64      	ldr	r3, [pc, #400]	; (80033e8 <LCD_SetCursor+0x1e4>)
 8003258:	2280      	movs	r2, #128	; 0x80
 800325a:	611a      	str	r2, [r3, #16]
 800325c:	4b62      	ldr	r3, [pc, #392]	; (80033e8 <LCD_SetCursor+0x1e4>)
 800325e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003262:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8003264:	4b60      	ldr	r3, [pc, #384]	; (80033e8 <LCD_SetCursor+0x1e4>)
 8003266:	f44f 7280 	mov.w	r2, #256	; 0x100
 800326a:	611a      	str	r2, [r3, #16]
 800326c:	4b5e      	ldr	r3, [pc, #376]	; (80033e8 <LCD_SetCursor+0x1e4>)
 800326e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003272:	615a      	str	r2, [r3, #20]
 8003274:	88fb      	ldrh	r3, [r7, #6]
 8003276:	4a5d      	ldr	r2, [pc, #372]	; (80033ec <LCD_SetCursor+0x1e8>)
 8003278:	b2db      	uxtb	r3, r3
 800327a:	60d3      	str	r3, [r2, #12]
 800327c:	4b5a      	ldr	r3, [pc, #360]	; (80033e8 <LCD_SetCursor+0x1e4>)
 800327e:	2280      	movs	r2, #128	; 0x80
 8003280:	615a      	str	r2, [r3, #20]
 8003282:	4b59      	ldr	r3, [pc, #356]	; (80033e8 <LCD_SetCursor+0x1e4>)
 8003284:	2280      	movs	r2, #128	; 0x80
 8003286:	611a      	str	r2, [r3, #16]
 8003288:	4b57      	ldr	r3, [pc, #348]	; (80033e8 <LCD_SetCursor+0x1e4>)
 800328a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800328e:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8003290:	4b54      	ldr	r3, [pc, #336]	; (80033e4 <LCD_SetCursor+0x1e0>)
 8003292:	899b      	ldrh	r3, [r3, #12]
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff fee3 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 800329a:	4b53      	ldr	r3, [pc, #332]	; (80033e8 <LCD_SetCursor+0x1e4>)
 800329c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032a0:	611a      	str	r2, [r3, #16]
 80032a2:	4b51      	ldr	r3, [pc, #324]	; (80033e8 <LCD_SetCursor+0x1e4>)
 80032a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032a8:	615a      	str	r2, [r3, #20]
 80032aa:	88bb      	ldrh	r3, [r7, #4]
 80032ac:	0a1b      	lsrs	r3, r3, #8
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	4b4e      	ldr	r3, [pc, #312]	; (80033ec <LCD_SetCursor+0x1e8>)
 80032b2:	60da      	str	r2, [r3, #12]
 80032b4:	4b4c      	ldr	r3, [pc, #304]	; (80033e8 <LCD_SetCursor+0x1e4>)
 80032b6:	2280      	movs	r2, #128	; 0x80
 80032b8:	615a      	str	r2, [r3, #20]
 80032ba:	4b4b      	ldr	r3, [pc, #300]	; (80033e8 <LCD_SetCursor+0x1e4>)
 80032bc:	2280      	movs	r2, #128	; 0x80
 80032be:	611a      	str	r2, [r3, #16]
 80032c0:	4b49      	ldr	r3, [pc, #292]	; (80033e8 <LCD_SetCursor+0x1e4>)
 80032c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032c6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 80032c8:	4b47      	ldr	r3, [pc, #284]	; (80033e8 <LCD_SetCursor+0x1e4>)
 80032ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032ce:	611a      	str	r2, [r3, #16]
 80032d0:	4b45      	ldr	r3, [pc, #276]	; (80033e8 <LCD_SetCursor+0x1e4>)
 80032d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032d6:	615a      	str	r2, [r3, #20]
 80032d8:	88bb      	ldrh	r3, [r7, #4]
 80032da:	4a44      	ldr	r2, [pc, #272]	; (80033ec <LCD_SetCursor+0x1e8>)
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	60d3      	str	r3, [r2, #12]
 80032e0:	4b41      	ldr	r3, [pc, #260]	; (80033e8 <LCD_SetCursor+0x1e4>)
 80032e2:	2280      	movs	r2, #128	; 0x80
 80032e4:	615a      	str	r2, [r3, #20]
 80032e6:	4b40      	ldr	r3, [pc, #256]	; (80033e8 <LCD_SetCursor+0x1e4>)
 80032e8:	2280      	movs	r2, #128	; 0x80
 80032ea:	611a      	str	r2, [r3, #16]
 80032ec:	4b3e      	ldr	r3, [pc, #248]	; (80033e8 <LCD_SetCursor+0x1e4>)
 80032ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032f2:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 80032f4:	e248      	b.n	8003788 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 80032f6:	4b3b      	ldr	r3, [pc, #236]	; (80033e4 <LCD_SetCursor+0x1e0>)
 80032f8:	889b      	ldrh	r3, [r3, #4]
 80032fa:	f646 0204 	movw	r2, #26628	; 0x6804
 80032fe:	4293      	cmp	r3, r2
 8003300:	d176      	bne.n	80033f0 <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8003302:	4b38      	ldr	r3, [pc, #224]	; (80033e4 <LCD_SetCursor+0x1e0>)
 8003304:	799b      	ldrb	r3, [r3, #6]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d106      	bne.n	8003318 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 800330a:	4b36      	ldr	r3, [pc, #216]	; (80033e4 <LCD_SetCursor+0x1e0>)
 800330c:	881a      	ldrh	r2, [r3, #0]
 800330e:	88fb      	ldrh	r3, [r7, #6]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8003318:	4b32      	ldr	r3, [pc, #200]	; (80033e4 <LCD_SetCursor+0x1e0>)
 800331a:	895b      	ldrh	r3, [r3, #10]
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff fe9f 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8003322:	4b31      	ldr	r3, [pc, #196]	; (80033e8 <LCD_SetCursor+0x1e4>)
 8003324:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003328:	611a      	str	r2, [r3, #16]
 800332a:	4b2f      	ldr	r3, [pc, #188]	; (80033e8 <LCD_SetCursor+0x1e4>)
 800332c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003330:	615a      	str	r2, [r3, #20]
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	0a1b      	lsrs	r3, r3, #8
 8003336:	b29a      	uxth	r2, r3
 8003338:	4b2c      	ldr	r3, [pc, #176]	; (80033ec <LCD_SetCursor+0x1e8>)
 800333a:	60da      	str	r2, [r3, #12]
 800333c:	4b2a      	ldr	r3, [pc, #168]	; (80033e8 <LCD_SetCursor+0x1e4>)
 800333e:	2280      	movs	r2, #128	; 0x80
 8003340:	615a      	str	r2, [r3, #20]
 8003342:	4b29      	ldr	r3, [pc, #164]	; (80033e8 <LCD_SetCursor+0x1e4>)
 8003344:	2280      	movs	r2, #128	; 0x80
 8003346:	611a      	str	r2, [r3, #16]
 8003348:	4b27      	ldr	r3, [pc, #156]	; (80033e8 <LCD_SetCursor+0x1e4>)
 800334a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800334e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8003350:	4b25      	ldr	r3, [pc, #148]	; (80033e8 <LCD_SetCursor+0x1e4>)
 8003352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003356:	611a      	str	r2, [r3, #16]
 8003358:	4b23      	ldr	r3, [pc, #140]	; (80033e8 <LCD_SetCursor+0x1e4>)
 800335a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800335e:	615a      	str	r2, [r3, #20]
 8003360:	88fb      	ldrh	r3, [r7, #6]
 8003362:	4a22      	ldr	r2, [pc, #136]	; (80033ec <LCD_SetCursor+0x1e8>)
 8003364:	b2db      	uxtb	r3, r3
 8003366:	60d3      	str	r3, [r2, #12]
 8003368:	4b1f      	ldr	r3, [pc, #124]	; (80033e8 <LCD_SetCursor+0x1e4>)
 800336a:	2280      	movs	r2, #128	; 0x80
 800336c:	615a      	str	r2, [r3, #20]
 800336e:	4b1e      	ldr	r3, [pc, #120]	; (80033e8 <LCD_SetCursor+0x1e4>)
 8003370:	2280      	movs	r2, #128	; 0x80
 8003372:	611a      	str	r2, [r3, #16]
 8003374:	4b1c      	ldr	r3, [pc, #112]	; (80033e8 <LCD_SetCursor+0x1e4>)
 8003376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800337a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800337c:	4b19      	ldr	r3, [pc, #100]	; (80033e4 <LCD_SetCursor+0x1e0>)
 800337e:	899b      	ldrh	r3, [r3, #12]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff fe6d 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8003386:	4b18      	ldr	r3, [pc, #96]	; (80033e8 <LCD_SetCursor+0x1e4>)
 8003388:	f44f 7280 	mov.w	r2, #256	; 0x100
 800338c:	611a      	str	r2, [r3, #16]
 800338e:	4b16      	ldr	r3, [pc, #88]	; (80033e8 <LCD_SetCursor+0x1e4>)
 8003390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003394:	615a      	str	r2, [r3, #20]
 8003396:	88bb      	ldrh	r3, [r7, #4]
 8003398:	0a1b      	lsrs	r3, r3, #8
 800339a:	b29a      	uxth	r2, r3
 800339c:	4b13      	ldr	r3, [pc, #76]	; (80033ec <LCD_SetCursor+0x1e8>)
 800339e:	60da      	str	r2, [r3, #12]
 80033a0:	4b11      	ldr	r3, [pc, #68]	; (80033e8 <LCD_SetCursor+0x1e4>)
 80033a2:	2280      	movs	r2, #128	; 0x80
 80033a4:	615a      	str	r2, [r3, #20]
 80033a6:	4b10      	ldr	r3, [pc, #64]	; (80033e8 <LCD_SetCursor+0x1e4>)
 80033a8:	2280      	movs	r2, #128	; 0x80
 80033aa:	611a      	str	r2, [r3, #16]
 80033ac:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <LCD_SetCursor+0x1e4>)
 80033ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033b2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 80033b4:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <LCD_SetCursor+0x1e4>)
 80033b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033ba:	611a      	str	r2, [r3, #16]
 80033bc:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <LCD_SetCursor+0x1e4>)
 80033be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033c2:	615a      	str	r2, [r3, #20]
 80033c4:	88bb      	ldrh	r3, [r7, #4]
 80033c6:	4a09      	ldr	r2, [pc, #36]	; (80033ec <LCD_SetCursor+0x1e8>)
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	60d3      	str	r3, [r2, #12]
 80033cc:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <LCD_SetCursor+0x1e4>)
 80033ce:	2280      	movs	r2, #128	; 0x80
 80033d0:	615a      	str	r2, [r3, #20]
 80033d2:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <LCD_SetCursor+0x1e4>)
 80033d4:	2280      	movs	r2, #128	; 0x80
 80033d6:	611a      	str	r2, [r3, #16]
 80033d8:	4b03      	ldr	r3, [pc, #12]	; (80033e8 <LCD_SetCursor+0x1e4>)
 80033da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033de:	611a      	str	r2, [r3, #16]
}
 80033e0:	e1d2      	b.n	8003788 <LCD_SetCursor+0x584>
 80033e2:	bf00      	nop
 80033e4:	20000a30 	.word	0x20000a30
 80033e8:	40011000 	.word	0x40011000
 80033ec:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 80033f0:	4b99      	ldr	r3, [pc, #612]	; (8003658 <LCD_SetCursor+0x454>)
 80033f2:	889b      	ldrh	r3, [r3, #4]
 80033f4:	f641 1263 	movw	r2, #6499	; 0x1963
 80033f8:	4293      	cmp	r3, r2
 80033fa:	f040 8133 	bne.w	8003664 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 80033fe:	4b96      	ldr	r3, [pc, #600]	; (8003658 <LCD_SetCursor+0x454>)
 8003400:	799b      	ldrb	r3, [r3, #6]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d163      	bne.n	80034ce <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8003406:	4b94      	ldr	r3, [pc, #592]	; (8003658 <LCD_SetCursor+0x454>)
 8003408:	881a      	ldrh	r2, [r3, #0]
 800340a:	88fb      	ldrh	r3, [r7, #6]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8003414:	4b90      	ldr	r3, [pc, #576]	; (8003658 <LCD_SetCursor+0x454>)
 8003416:	895b      	ldrh	r3, [r3, #10]
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff fe21 	bl	8003060 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800341e:	4b8f      	ldr	r3, [pc, #572]	; (800365c <LCD_SetCursor+0x458>)
 8003420:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003424:	611a      	str	r2, [r3, #16]
 8003426:	4b8d      	ldr	r3, [pc, #564]	; (800365c <LCD_SetCursor+0x458>)
 8003428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800342c:	615a      	str	r2, [r3, #20]
 800342e:	4b8c      	ldr	r3, [pc, #560]	; (8003660 <LCD_SetCursor+0x45c>)
 8003430:	2200      	movs	r2, #0
 8003432:	60da      	str	r2, [r3, #12]
 8003434:	4b89      	ldr	r3, [pc, #548]	; (800365c <LCD_SetCursor+0x458>)
 8003436:	2280      	movs	r2, #128	; 0x80
 8003438:	615a      	str	r2, [r3, #20]
 800343a:	4b88      	ldr	r3, [pc, #544]	; (800365c <LCD_SetCursor+0x458>)
 800343c:	2280      	movs	r2, #128	; 0x80
 800343e:	611a      	str	r2, [r3, #16]
 8003440:	4b86      	ldr	r3, [pc, #536]	; (800365c <LCD_SetCursor+0x458>)
 8003442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003446:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8003448:	4b84      	ldr	r3, [pc, #528]	; (800365c <LCD_SetCursor+0x458>)
 800344a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800344e:	611a      	str	r2, [r3, #16]
 8003450:	4b82      	ldr	r3, [pc, #520]	; (800365c <LCD_SetCursor+0x458>)
 8003452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003456:	615a      	str	r2, [r3, #20]
 8003458:	4b81      	ldr	r3, [pc, #516]	; (8003660 <LCD_SetCursor+0x45c>)
 800345a:	2200      	movs	r2, #0
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	4b7f      	ldr	r3, [pc, #508]	; (800365c <LCD_SetCursor+0x458>)
 8003460:	2280      	movs	r2, #128	; 0x80
 8003462:	615a      	str	r2, [r3, #20]
 8003464:	4b7d      	ldr	r3, [pc, #500]	; (800365c <LCD_SetCursor+0x458>)
 8003466:	2280      	movs	r2, #128	; 0x80
 8003468:	611a      	str	r2, [r3, #16]
 800346a:	4b7c      	ldr	r3, [pc, #496]	; (800365c <LCD_SetCursor+0x458>)
 800346c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003470:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8003472:	4b7a      	ldr	r3, [pc, #488]	; (800365c <LCD_SetCursor+0x458>)
 8003474:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003478:	611a      	str	r2, [r3, #16]
 800347a:	4b78      	ldr	r3, [pc, #480]	; (800365c <LCD_SetCursor+0x458>)
 800347c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003480:	615a      	str	r2, [r3, #20]
 8003482:	88fb      	ldrh	r3, [r7, #6]
 8003484:	0a1b      	lsrs	r3, r3, #8
 8003486:	b29a      	uxth	r2, r3
 8003488:	4b75      	ldr	r3, [pc, #468]	; (8003660 <LCD_SetCursor+0x45c>)
 800348a:	60da      	str	r2, [r3, #12]
 800348c:	4b73      	ldr	r3, [pc, #460]	; (800365c <LCD_SetCursor+0x458>)
 800348e:	2280      	movs	r2, #128	; 0x80
 8003490:	615a      	str	r2, [r3, #20]
 8003492:	4b72      	ldr	r3, [pc, #456]	; (800365c <LCD_SetCursor+0x458>)
 8003494:	2280      	movs	r2, #128	; 0x80
 8003496:	611a      	str	r2, [r3, #16]
 8003498:	4b70      	ldr	r3, [pc, #448]	; (800365c <LCD_SetCursor+0x458>)
 800349a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800349e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 80034a0:	4b6e      	ldr	r3, [pc, #440]	; (800365c <LCD_SetCursor+0x458>)
 80034a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034a6:	611a      	str	r2, [r3, #16]
 80034a8:	4b6c      	ldr	r3, [pc, #432]	; (800365c <LCD_SetCursor+0x458>)
 80034aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ae:	615a      	str	r2, [r3, #20]
 80034b0:	88fb      	ldrh	r3, [r7, #6]
 80034b2:	4a6b      	ldr	r2, [pc, #428]	; (8003660 <LCD_SetCursor+0x45c>)
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	60d3      	str	r3, [r2, #12]
 80034b8:	4b68      	ldr	r3, [pc, #416]	; (800365c <LCD_SetCursor+0x458>)
 80034ba:	2280      	movs	r2, #128	; 0x80
 80034bc:	615a      	str	r2, [r3, #20]
 80034be:	4b67      	ldr	r3, [pc, #412]	; (800365c <LCD_SetCursor+0x458>)
 80034c0:	2280      	movs	r2, #128	; 0x80
 80034c2:	611a      	str	r2, [r3, #16]
 80034c4:	4b65      	ldr	r3, [pc, #404]	; (800365c <LCD_SetCursor+0x458>)
 80034c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ca:	611a      	str	r2, [r3, #16]
 80034cc:	e061      	b.n	8003592 <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 80034ce:	4b62      	ldr	r3, [pc, #392]	; (8003658 <LCD_SetCursor+0x454>)
 80034d0:	895b      	ldrh	r3, [r3, #10]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff fdc4 	bl	8003060 <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 80034d8:	4b60      	ldr	r3, [pc, #384]	; (800365c <LCD_SetCursor+0x458>)
 80034da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034de:	611a      	str	r2, [r3, #16]
 80034e0:	4b5e      	ldr	r3, [pc, #376]	; (800365c <LCD_SetCursor+0x458>)
 80034e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034e6:	615a      	str	r2, [r3, #20]
 80034e8:	88fb      	ldrh	r3, [r7, #6]
 80034ea:	0a1b      	lsrs	r3, r3, #8
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	4b5c      	ldr	r3, [pc, #368]	; (8003660 <LCD_SetCursor+0x45c>)
 80034f0:	60da      	str	r2, [r3, #12]
 80034f2:	4b5a      	ldr	r3, [pc, #360]	; (800365c <LCD_SetCursor+0x458>)
 80034f4:	2280      	movs	r2, #128	; 0x80
 80034f6:	615a      	str	r2, [r3, #20]
 80034f8:	4b58      	ldr	r3, [pc, #352]	; (800365c <LCD_SetCursor+0x458>)
 80034fa:	2280      	movs	r2, #128	; 0x80
 80034fc:	611a      	str	r2, [r3, #16]
 80034fe:	4b57      	ldr	r3, [pc, #348]	; (800365c <LCD_SetCursor+0x458>)
 8003500:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003504:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8003506:	4b55      	ldr	r3, [pc, #340]	; (800365c <LCD_SetCursor+0x458>)
 8003508:	f44f 7280 	mov.w	r2, #256	; 0x100
 800350c:	611a      	str	r2, [r3, #16]
 800350e:	4b53      	ldr	r3, [pc, #332]	; (800365c <LCD_SetCursor+0x458>)
 8003510:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003514:	615a      	str	r2, [r3, #20]
 8003516:	88fb      	ldrh	r3, [r7, #6]
 8003518:	4a51      	ldr	r2, [pc, #324]	; (8003660 <LCD_SetCursor+0x45c>)
 800351a:	b2db      	uxtb	r3, r3
 800351c:	60d3      	str	r3, [r2, #12]
 800351e:	4b4f      	ldr	r3, [pc, #316]	; (800365c <LCD_SetCursor+0x458>)
 8003520:	2280      	movs	r2, #128	; 0x80
 8003522:	615a      	str	r2, [r3, #20]
 8003524:	4b4d      	ldr	r3, [pc, #308]	; (800365c <LCD_SetCursor+0x458>)
 8003526:	2280      	movs	r2, #128	; 0x80
 8003528:	611a      	str	r2, [r3, #16]
 800352a:	4b4c      	ldr	r3, [pc, #304]	; (800365c <LCD_SetCursor+0x458>)
 800352c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003530:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8003532:	4b4a      	ldr	r3, [pc, #296]	; (800365c <LCD_SetCursor+0x458>)
 8003534:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003538:	611a      	str	r2, [r3, #16]
 800353a:	4b48      	ldr	r3, [pc, #288]	; (800365c <LCD_SetCursor+0x458>)
 800353c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003540:	615a      	str	r2, [r3, #20]
 8003542:	4b45      	ldr	r3, [pc, #276]	; (8003658 <LCD_SetCursor+0x454>)
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	3b01      	subs	r3, #1
 8003548:	121a      	asrs	r2, r3, #8
 800354a:	4b45      	ldr	r3, [pc, #276]	; (8003660 <LCD_SetCursor+0x45c>)
 800354c:	60da      	str	r2, [r3, #12]
 800354e:	4b43      	ldr	r3, [pc, #268]	; (800365c <LCD_SetCursor+0x458>)
 8003550:	2280      	movs	r2, #128	; 0x80
 8003552:	615a      	str	r2, [r3, #20]
 8003554:	4b41      	ldr	r3, [pc, #260]	; (800365c <LCD_SetCursor+0x458>)
 8003556:	2280      	movs	r2, #128	; 0x80
 8003558:	611a      	str	r2, [r3, #16]
 800355a:	4b40      	ldr	r3, [pc, #256]	; (800365c <LCD_SetCursor+0x458>)
 800355c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003560:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8003562:	4b3e      	ldr	r3, [pc, #248]	; (800365c <LCD_SetCursor+0x458>)
 8003564:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003568:	611a      	str	r2, [r3, #16]
 800356a:	4b3c      	ldr	r3, [pc, #240]	; (800365c <LCD_SetCursor+0x458>)
 800356c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003570:	615a      	str	r2, [r3, #20]
 8003572:	4b39      	ldr	r3, [pc, #228]	; (8003658 <LCD_SetCursor+0x454>)
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	3b01      	subs	r3, #1
 8003578:	4a39      	ldr	r2, [pc, #228]	; (8003660 <LCD_SetCursor+0x45c>)
 800357a:	b2db      	uxtb	r3, r3
 800357c:	60d3      	str	r3, [r2, #12]
 800357e:	4b37      	ldr	r3, [pc, #220]	; (800365c <LCD_SetCursor+0x458>)
 8003580:	2280      	movs	r2, #128	; 0x80
 8003582:	615a      	str	r2, [r3, #20]
 8003584:	4b35      	ldr	r3, [pc, #212]	; (800365c <LCD_SetCursor+0x458>)
 8003586:	2280      	movs	r2, #128	; 0x80
 8003588:	611a      	str	r2, [r3, #16]
 800358a:	4b34      	ldr	r3, [pc, #208]	; (800365c <LCD_SetCursor+0x458>)
 800358c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003590:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8003592:	4b31      	ldr	r3, [pc, #196]	; (8003658 <LCD_SetCursor+0x454>)
 8003594:	899b      	ldrh	r3, [r3, #12]
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff fd62 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 800359c:	4b2f      	ldr	r3, [pc, #188]	; (800365c <LCD_SetCursor+0x458>)
 800359e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035a2:	611a      	str	r2, [r3, #16]
 80035a4:	4b2d      	ldr	r3, [pc, #180]	; (800365c <LCD_SetCursor+0x458>)
 80035a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035aa:	615a      	str	r2, [r3, #20]
 80035ac:	88bb      	ldrh	r3, [r7, #4]
 80035ae:	0a1b      	lsrs	r3, r3, #8
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	4b2b      	ldr	r3, [pc, #172]	; (8003660 <LCD_SetCursor+0x45c>)
 80035b4:	60da      	str	r2, [r3, #12]
 80035b6:	4b29      	ldr	r3, [pc, #164]	; (800365c <LCD_SetCursor+0x458>)
 80035b8:	2280      	movs	r2, #128	; 0x80
 80035ba:	615a      	str	r2, [r3, #20]
 80035bc:	4b27      	ldr	r3, [pc, #156]	; (800365c <LCD_SetCursor+0x458>)
 80035be:	2280      	movs	r2, #128	; 0x80
 80035c0:	611a      	str	r2, [r3, #16]
 80035c2:	4b26      	ldr	r3, [pc, #152]	; (800365c <LCD_SetCursor+0x458>)
 80035c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035c8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 80035ca:	4b24      	ldr	r3, [pc, #144]	; (800365c <LCD_SetCursor+0x458>)
 80035cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035d0:	611a      	str	r2, [r3, #16]
 80035d2:	4b22      	ldr	r3, [pc, #136]	; (800365c <LCD_SetCursor+0x458>)
 80035d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035d8:	615a      	str	r2, [r3, #20]
 80035da:	88bb      	ldrh	r3, [r7, #4]
 80035dc:	4a20      	ldr	r2, [pc, #128]	; (8003660 <LCD_SetCursor+0x45c>)
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	60d3      	str	r3, [r2, #12]
 80035e2:	4b1e      	ldr	r3, [pc, #120]	; (800365c <LCD_SetCursor+0x458>)
 80035e4:	2280      	movs	r2, #128	; 0x80
 80035e6:	615a      	str	r2, [r3, #20]
 80035e8:	4b1c      	ldr	r3, [pc, #112]	; (800365c <LCD_SetCursor+0x458>)
 80035ea:	2280      	movs	r2, #128	; 0x80
 80035ec:	611a      	str	r2, [r3, #16]
 80035ee:	4b1b      	ldr	r3, [pc, #108]	; (800365c <LCD_SetCursor+0x458>)
 80035f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035f4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 80035f6:	4b19      	ldr	r3, [pc, #100]	; (800365c <LCD_SetCursor+0x458>)
 80035f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035fc:	611a      	str	r2, [r3, #16]
 80035fe:	4b17      	ldr	r3, [pc, #92]	; (800365c <LCD_SetCursor+0x458>)
 8003600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003604:	615a      	str	r2, [r3, #20]
 8003606:	4b14      	ldr	r3, [pc, #80]	; (8003658 <LCD_SetCursor+0x454>)
 8003608:	885b      	ldrh	r3, [r3, #2]
 800360a:	3b01      	subs	r3, #1
 800360c:	121a      	asrs	r2, r3, #8
 800360e:	4b14      	ldr	r3, [pc, #80]	; (8003660 <LCD_SetCursor+0x45c>)
 8003610:	60da      	str	r2, [r3, #12]
 8003612:	4b12      	ldr	r3, [pc, #72]	; (800365c <LCD_SetCursor+0x458>)
 8003614:	2280      	movs	r2, #128	; 0x80
 8003616:	615a      	str	r2, [r3, #20]
 8003618:	4b10      	ldr	r3, [pc, #64]	; (800365c <LCD_SetCursor+0x458>)
 800361a:	2280      	movs	r2, #128	; 0x80
 800361c:	611a      	str	r2, [r3, #16]
 800361e:	4b0f      	ldr	r3, [pc, #60]	; (800365c <LCD_SetCursor+0x458>)
 8003620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003624:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8003626:	4b0d      	ldr	r3, [pc, #52]	; (800365c <LCD_SetCursor+0x458>)
 8003628:	f44f 7280 	mov.w	r2, #256	; 0x100
 800362c:	611a      	str	r2, [r3, #16]
 800362e:	4b0b      	ldr	r3, [pc, #44]	; (800365c <LCD_SetCursor+0x458>)
 8003630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003634:	615a      	str	r2, [r3, #20]
 8003636:	4b08      	ldr	r3, [pc, #32]	; (8003658 <LCD_SetCursor+0x454>)
 8003638:	885b      	ldrh	r3, [r3, #2]
 800363a:	3b01      	subs	r3, #1
 800363c:	4a08      	ldr	r2, [pc, #32]	; (8003660 <LCD_SetCursor+0x45c>)
 800363e:	b2db      	uxtb	r3, r3
 8003640:	60d3      	str	r3, [r2, #12]
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <LCD_SetCursor+0x458>)
 8003644:	2280      	movs	r2, #128	; 0x80
 8003646:	615a      	str	r2, [r3, #20]
 8003648:	4b04      	ldr	r3, [pc, #16]	; (800365c <LCD_SetCursor+0x458>)
 800364a:	2280      	movs	r2, #128	; 0x80
 800364c:	611a      	str	r2, [r3, #16]
 800364e:	4b03      	ldr	r3, [pc, #12]	; (800365c <LCD_SetCursor+0x458>)
 8003650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003654:	611a      	str	r2, [r3, #16]
}
 8003656:	e097      	b.n	8003788 <LCD_SetCursor+0x584>
 8003658:	20000a30 	.word	0x20000a30
 800365c:	40011000 	.word	0x40011000
 8003660:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8003664:	4b4a      	ldr	r3, [pc, #296]	; (8003790 <LCD_SetCursor+0x58c>)
 8003666:	889b      	ldrh	r3, [r3, #4]
 8003668:	f245 5210 	movw	r2, #21776	; 0x5510
 800366c:	4293      	cmp	r3, r2
 800366e:	d172      	bne.n	8003756 <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8003670:	4b47      	ldr	r3, [pc, #284]	; (8003790 <LCD_SetCursor+0x58c>)
 8003672:	895b      	ldrh	r3, [r3, #10]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff fcf3 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 800367a:	4b46      	ldr	r3, [pc, #280]	; (8003794 <LCD_SetCursor+0x590>)
 800367c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003680:	611a      	str	r2, [r3, #16]
 8003682:	4b44      	ldr	r3, [pc, #272]	; (8003794 <LCD_SetCursor+0x590>)
 8003684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003688:	615a      	str	r2, [r3, #20]
 800368a:	88fb      	ldrh	r3, [r7, #6]
 800368c:	0a1b      	lsrs	r3, r3, #8
 800368e:	b29a      	uxth	r2, r3
 8003690:	4b41      	ldr	r3, [pc, #260]	; (8003798 <LCD_SetCursor+0x594>)
 8003692:	60da      	str	r2, [r3, #12]
 8003694:	4b3f      	ldr	r3, [pc, #252]	; (8003794 <LCD_SetCursor+0x590>)
 8003696:	2280      	movs	r2, #128	; 0x80
 8003698:	615a      	str	r2, [r3, #20]
 800369a:	4b3e      	ldr	r3, [pc, #248]	; (8003794 <LCD_SetCursor+0x590>)
 800369c:	2280      	movs	r2, #128	; 0x80
 800369e:	611a      	str	r2, [r3, #16]
 80036a0:	4b3c      	ldr	r3, [pc, #240]	; (8003794 <LCD_SetCursor+0x590>)
 80036a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036a6:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 80036a8:	4b39      	ldr	r3, [pc, #228]	; (8003790 <LCD_SetCursor+0x58c>)
 80036aa:	895b      	ldrh	r3, [r3, #10]
 80036ac:	3301      	adds	r3, #1
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff fcd5 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 80036b6:	4b37      	ldr	r3, [pc, #220]	; (8003794 <LCD_SetCursor+0x590>)
 80036b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036bc:	611a      	str	r2, [r3, #16]
 80036be:	4b35      	ldr	r3, [pc, #212]	; (8003794 <LCD_SetCursor+0x590>)
 80036c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036c4:	615a      	str	r2, [r3, #20]
 80036c6:	88fb      	ldrh	r3, [r7, #6]
 80036c8:	4a33      	ldr	r2, [pc, #204]	; (8003798 <LCD_SetCursor+0x594>)
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	60d3      	str	r3, [r2, #12]
 80036ce:	4b31      	ldr	r3, [pc, #196]	; (8003794 <LCD_SetCursor+0x590>)
 80036d0:	2280      	movs	r2, #128	; 0x80
 80036d2:	615a      	str	r2, [r3, #20]
 80036d4:	4b2f      	ldr	r3, [pc, #188]	; (8003794 <LCD_SetCursor+0x590>)
 80036d6:	2280      	movs	r2, #128	; 0x80
 80036d8:	611a      	str	r2, [r3, #16]
 80036da:	4b2e      	ldr	r3, [pc, #184]	; (8003794 <LCD_SetCursor+0x590>)
 80036dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036e0:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80036e2:	4b2b      	ldr	r3, [pc, #172]	; (8003790 <LCD_SetCursor+0x58c>)
 80036e4:	899b      	ldrh	r3, [r3, #12]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff fcba 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 80036ec:	4b29      	ldr	r3, [pc, #164]	; (8003794 <LCD_SetCursor+0x590>)
 80036ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036f2:	611a      	str	r2, [r3, #16]
 80036f4:	4b27      	ldr	r3, [pc, #156]	; (8003794 <LCD_SetCursor+0x590>)
 80036f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036fa:	615a      	str	r2, [r3, #20]
 80036fc:	88bb      	ldrh	r3, [r7, #4]
 80036fe:	0a1b      	lsrs	r3, r3, #8
 8003700:	b29a      	uxth	r2, r3
 8003702:	4b25      	ldr	r3, [pc, #148]	; (8003798 <LCD_SetCursor+0x594>)
 8003704:	60da      	str	r2, [r3, #12]
 8003706:	4b23      	ldr	r3, [pc, #140]	; (8003794 <LCD_SetCursor+0x590>)
 8003708:	2280      	movs	r2, #128	; 0x80
 800370a:	615a      	str	r2, [r3, #20]
 800370c:	4b21      	ldr	r3, [pc, #132]	; (8003794 <LCD_SetCursor+0x590>)
 800370e:	2280      	movs	r2, #128	; 0x80
 8003710:	611a      	str	r2, [r3, #16]
 8003712:	4b20      	ldr	r3, [pc, #128]	; (8003794 <LCD_SetCursor+0x590>)
 8003714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003718:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 800371a:	4b1d      	ldr	r3, [pc, #116]	; (8003790 <LCD_SetCursor+0x58c>)
 800371c:	899b      	ldrh	r3, [r3, #12]
 800371e:	3301      	adds	r3, #1
 8003720:	b29b      	uxth	r3, r3
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff fc9c 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8003728:	4b1a      	ldr	r3, [pc, #104]	; (8003794 <LCD_SetCursor+0x590>)
 800372a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800372e:	611a      	str	r2, [r3, #16]
 8003730:	4b18      	ldr	r3, [pc, #96]	; (8003794 <LCD_SetCursor+0x590>)
 8003732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003736:	615a      	str	r2, [r3, #20]
 8003738:	88bb      	ldrh	r3, [r7, #4]
 800373a:	4a17      	ldr	r2, [pc, #92]	; (8003798 <LCD_SetCursor+0x594>)
 800373c:	b2db      	uxtb	r3, r3
 800373e:	60d3      	str	r3, [r2, #12]
 8003740:	4b14      	ldr	r3, [pc, #80]	; (8003794 <LCD_SetCursor+0x590>)
 8003742:	2280      	movs	r2, #128	; 0x80
 8003744:	615a      	str	r2, [r3, #20]
 8003746:	4b13      	ldr	r3, [pc, #76]	; (8003794 <LCD_SetCursor+0x590>)
 8003748:	2280      	movs	r2, #128	; 0x80
 800374a:	611a      	str	r2, [r3, #16]
 800374c:	4b11      	ldr	r3, [pc, #68]	; (8003794 <LCD_SetCursor+0x590>)
 800374e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003752:	611a      	str	r2, [r3, #16]
}
 8003754:	e018      	b.n	8003788 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8003756:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <LCD_SetCursor+0x58c>)
 8003758:	799b      	ldrb	r3, [r3, #6]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d106      	bne.n	800376c <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 800375e:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <LCD_SetCursor+0x58c>)
 8003760:	881a      	ldrh	r2, [r3, #0]
 8003762:	88fb      	ldrh	r3, [r7, #6]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	b29b      	uxth	r3, r3
 8003768:	3b01      	subs	r3, #1
 800376a:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 800376c:	4b08      	ldr	r3, [pc, #32]	; (8003790 <LCD_SetCursor+0x58c>)
 800376e:	895b      	ldrh	r3, [r3, #10]
 8003770:	88fa      	ldrh	r2, [r7, #6]
 8003772:	4611      	mov	r1, r2
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff fcff 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 800377a:	4b05      	ldr	r3, [pc, #20]	; (8003790 <LCD_SetCursor+0x58c>)
 800377c:	899b      	ldrh	r3, [r3, #12]
 800377e:	88ba      	ldrh	r2, [r7, #4]
 8003780:	4611      	mov	r1, r2
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff fcf8 	bl	8003178 <LCD_WriteReg>
}
 8003788:	bf00      	nop
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	20000a30 	.word	0x20000a30
 8003794:	40011000 	.word	0x40011000
 8003798:	40010c00 	.word	0x40010c00

0800379c <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	4603      	mov	r3, r0
 80037a4:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 80037a6:	2300      	movs	r3, #0
 80037a8:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 80037aa:	2300      	movs	r3, #0
 80037ac:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 80037ae:	4b78      	ldr	r3, [pc, #480]	; (8003990 <LCD_Scan_Dir+0x1f4>)
 80037b0:	799b      	ldrb	r3, [r3, #6]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d10b      	bne.n	80037ce <LCD_Scan_Dir+0x32>
 80037b6:	4b76      	ldr	r3, [pc, #472]	; (8003990 <LCD_Scan_Dir+0x1f4>)
 80037b8:	889b      	ldrh	r3, [r3, #4]
 80037ba:	f646 0204 	movw	r2, #26628	; 0x6804
 80037be:	4293      	cmp	r3, r2
 80037c0:	d005      	beq.n	80037ce <LCD_Scan_Dir+0x32>
 80037c2:	4b73      	ldr	r3, [pc, #460]	; (8003990 <LCD_Scan_Dir+0x1f4>)
 80037c4:	889b      	ldrh	r3, [r3, #4]
 80037c6:	f641 1263 	movw	r2, #6499	; 0x1963
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d109      	bne.n	80037e2 <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 80037ce:	4b70      	ldr	r3, [pc, #448]	; (8003990 <LCD_Scan_Dir+0x1f4>)
 80037d0:	799b      	ldrb	r3, [r3, #6]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d134      	bne.n	8003840 <LCD_Scan_Dir+0xa4>
 80037d6:	4b6e      	ldr	r3, [pc, #440]	; (8003990 <LCD_Scan_Dir+0x1f4>)
 80037d8:	889b      	ldrh	r3, [r3, #4]
 80037da:	f641 1263 	movw	r2, #6499	; 0x1963
 80037de:	4293      	cmp	r3, r2
 80037e0:	d12e      	bne.n	8003840 <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	2b07      	cmp	r3, #7
 80037e6:	d82b      	bhi.n	8003840 <LCD_Scan_Dir+0xa4>
 80037e8:	a201      	add	r2, pc, #4	; (adr r2, 80037f0 <LCD_Scan_Dir+0x54>)
 80037ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ee:	bf00      	nop
 80037f0:	08003811 	.word	0x08003811
 80037f4:	08003817 	.word	0x08003817
 80037f8:	0800381d 	.word	0x0800381d
 80037fc:	08003823 	.word	0x08003823
 8003800:	08003829 	.word	0x08003829
 8003804:	0800382f 	.word	0x0800382f
 8003808:	08003835 	.word	0x08003835
 800380c:	0800383b 	.word	0x0800383b
		{
		case 0:
			dir = 6;
 8003810:	2306      	movs	r3, #6
 8003812:	71fb      	strb	r3, [r7, #7]
			break;
 8003814:	e014      	b.n	8003840 <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 8003816:	2307      	movs	r3, #7
 8003818:	71fb      	strb	r3, [r7, #7]
			break;
 800381a:	e011      	b.n	8003840 <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 800381c:	2304      	movs	r3, #4
 800381e:	71fb      	strb	r3, [r7, #7]
			break;
 8003820:	e00e      	b.n	8003840 <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 8003822:	2305      	movs	r3, #5
 8003824:	71fb      	strb	r3, [r7, #7]
			break;
 8003826:	e00b      	b.n	8003840 <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 8003828:	2301      	movs	r3, #1
 800382a:	71fb      	strb	r3, [r7, #7]
			break;
 800382c:	e008      	b.n	8003840 <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 800382e:	2300      	movs	r3, #0
 8003830:	71fb      	strb	r3, [r7, #7]
			break;
 8003832:	e005      	b.n	8003840 <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 8003834:	2303      	movs	r3, #3
 8003836:	71fb      	strb	r3, [r7, #7]
			break;
 8003838:	e002      	b.n	8003840 <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 800383a:	2302      	movs	r3, #2
 800383c:	71fb      	strb	r3, [r7, #7]
			break;
 800383e:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 8003840:	4b53      	ldr	r3, [pc, #332]	; (8003990 <LCD_Scan_Dir+0x1f4>)
 8003842:	889b      	ldrh	r3, [r3, #4]
 8003844:	f249 3241 	movw	r2, #37697	; 0x9341
 8003848:	4293      	cmp	r3, r2
 800384a:	d018      	beq.n	800387e <LCD_Scan_Dir+0xe2>
 800384c:	4b50      	ldr	r3, [pc, #320]	; (8003990 <LCD_Scan_Dir+0x1f4>)
 800384e:	889b      	ldrh	r3, [r3, #4]
 8003850:	f646 0204 	movw	r2, #26628	; 0x6804
 8003854:	4293      	cmp	r3, r2
 8003856:	d012      	beq.n	800387e <LCD_Scan_Dir+0xe2>
 8003858:	4b4d      	ldr	r3, [pc, #308]	; (8003990 <LCD_Scan_Dir+0x1f4>)
 800385a:	889b      	ldrh	r3, [r3, #4]
 800385c:	f245 3210 	movw	r2, #21264	; 0x5310
 8003860:	4293      	cmp	r3, r2
 8003862:	d00c      	beq.n	800387e <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 8003864:	4b4a      	ldr	r3, [pc, #296]	; (8003990 <LCD_Scan_Dir+0x1f4>)
 8003866:	889b      	ldrh	r3, [r3, #4]
 8003868:	f245 5210 	movw	r2, #21776	; 0x5510
 800386c:	4293      	cmp	r3, r2
 800386e:	d006      	beq.n	800387e <LCD_Scan_Dir+0xe2>
 8003870:	4b47      	ldr	r3, [pc, #284]	; (8003990 <LCD_Scan_Dir+0x1f4>)
 8003872:	889b      	ldrh	r3, [r3, #4]
 8003874:	f641 1263 	movw	r2, #6499	; 0x1963
 8003878:	4293      	cmp	r3, r2
 800387a:	f040 8250 	bne.w	8003d1e <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 800387e:	79fb      	ldrb	r3, [r7, #7]
 8003880:	2b07      	cmp	r3, #7
 8003882:	d836      	bhi.n	80038f2 <LCD_Scan_Dir+0x156>
 8003884:	a201      	add	r2, pc, #4	; (adr r2, 800388c <LCD_Scan_Dir+0xf0>)
 8003886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388a:	bf00      	nop
 800388c:	080038f3 	.word	0x080038f3
 8003890:	080038ad 	.word	0x080038ad
 8003894:	080038b7 	.word	0x080038b7
 8003898:	080038c1 	.word	0x080038c1
 800389c:	080038cb 	.word	0x080038cb
 80038a0:	080038d5 	.word	0x080038d5
 80038a4:	080038df 	.word	0x080038df
 80038a8:	080038e9 	.word	0x080038e9
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 80038ac:	89fb      	ldrh	r3, [r7, #14]
 80038ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b2:	81fb      	strh	r3, [r7, #14]
			break;
 80038b4:	e01d      	b.n	80038f2 <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 80038b6:	89fb      	ldrh	r3, [r7, #14]
 80038b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038bc:	81fb      	strh	r3, [r7, #14]
			break;
 80038be:	e018      	b.n	80038f2 <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 80038c0:	89fb      	ldrh	r3, [r7, #14]
 80038c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80038c6:	81fb      	strh	r3, [r7, #14]
			break;
 80038c8:	e013      	b.n	80038f2 <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 80038ca:	89fb      	ldrh	r3, [r7, #14]
 80038cc:	f043 0320 	orr.w	r3, r3, #32
 80038d0:	81fb      	strh	r3, [r7, #14]
			break;
 80038d2:	e00e      	b.n	80038f2 <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 80038d4:	89fb      	ldrh	r3, [r7, #14]
 80038d6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80038da:	81fb      	strh	r3, [r7, #14]
			break;
 80038dc:	e009      	b.n	80038f2 <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 80038de:	89fb      	ldrh	r3, [r7, #14]
 80038e0:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80038e4:	81fb      	strh	r3, [r7, #14]
			break;
 80038e6:	e004      	b.n	80038f2 <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 80038e8:	89fb      	ldrh	r3, [r7, #14]
 80038ea:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80038ee:	81fb      	strh	r3, [r7, #14]
			break;
 80038f0:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 80038f2:	4b27      	ldr	r3, [pc, #156]	; (8003990 <LCD_Scan_Dir+0x1f4>)
 80038f4:	889b      	ldrh	r3, [r3, #4]
 80038f6:	f245 5210 	movw	r2, #21776	; 0x5510
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d103      	bne.n	8003906 <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 80038fe:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8003902:	81bb      	strh	r3, [r7, #12]
 8003904:	e001      	b.n	800390a <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 8003906:	2336      	movs	r3, #54	; 0x36
 8003908:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 800390a:	4b21      	ldr	r3, [pc, #132]	; (8003990 <LCD_Scan_Dir+0x1f4>)
 800390c:	889b      	ldrh	r3, [r3, #4]
 800390e:	f245 3210 	movw	r2, #21264	; 0x5310
 8003912:	4293      	cmp	r3, r2
 8003914:	d00f      	beq.n	8003936 <LCD_Scan_Dir+0x19a>
 8003916:	4b1e      	ldr	r3, [pc, #120]	; (8003990 <LCD_Scan_Dir+0x1f4>)
 8003918:	889b      	ldrh	r3, [r3, #4]
 800391a:	f245 5210 	movw	r2, #21776	; 0x5510
 800391e:	4293      	cmp	r3, r2
 8003920:	d009      	beq.n	8003936 <LCD_Scan_Dir+0x19a>
 8003922:	4b1b      	ldr	r3, [pc, #108]	; (8003990 <LCD_Scan_Dir+0x1f4>)
 8003924:	889b      	ldrh	r3, [r3, #4]
 8003926:	f641 1263 	movw	r2, #6499	; 0x1963
 800392a:	4293      	cmp	r3, r2
 800392c:	d003      	beq.n	8003936 <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 800392e:	89fb      	ldrh	r3, [r7, #14]
 8003930:	f043 0308 	orr.w	r3, r3, #8
 8003934:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 8003936:	4b16      	ldr	r3, [pc, #88]	; (8003990 <LCD_Scan_Dir+0x1f4>)
 8003938:	889b      	ldrh	r3, [r3, #4]
 800393a:	f646 0204 	movw	r2, #26628	; 0x6804
 800393e:	4293      	cmp	r3, r2
 8003940:	d103      	bne.n	800394a <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 8003942:	89fb      	ldrh	r3, [r7, #14]
 8003944:	f043 0302 	orr.w	r3, r3, #2
 8003948:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 800394a:	89fa      	ldrh	r2, [r7, #14]
 800394c:	89bb      	ldrh	r3, [r7, #12]
 800394e:	4611      	mov	r1, r2
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff fc11 	bl	8003178 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 8003956:	4b0e      	ldr	r3, [pc, #56]	; (8003990 <LCD_Scan_Dir+0x1f4>)
 8003958:	889b      	ldrh	r3, [r3, #4]
 800395a:	f641 1263 	movw	r2, #6499	; 0x1963
 800395e:	4293      	cmp	r3, r2
 8003960:	d028      	beq.n	80039b4 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 8003962:	89fb      	ldrh	r3, [r7, #14]
 8003964:	f003 0320 	and.w	r3, r3, #32
 8003968:	2b00      	cmp	r3, #0
 800396a:	d013      	beq.n	8003994 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 800396c:	4b08      	ldr	r3, [pc, #32]	; (8003990 <LCD_Scan_Dir+0x1f4>)
 800396e:	881a      	ldrh	r2, [r3, #0]
 8003970:	4b07      	ldr	r3, [pc, #28]	; (8003990 <LCD_Scan_Dir+0x1f4>)
 8003972:	885b      	ldrh	r3, [r3, #2]
 8003974:	429a      	cmp	r2, r3
 8003976:	d21d      	bcs.n	80039b4 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8003978:	4b05      	ldr	r3, [pc, #20]	; (8003990 <LCD_Scan_Dir+0x1f4>)
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 800397e:	4b04      	ldr	r3, [pc, #16]	; (8003990 <LCD_Scan_Dir+0x1f4>)
 8003980:	885a      	ldrh	r2, [r3, #2]
 8003982:	4b03      	ldr	r3, [pc, #12]	; (8003990 <LCD_Scan_Dir+0x1f4>)
 8003984:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8003986:	4a02      	ldr	r2, [pc, #8]	; (8003990 <LCD_Scan_Dir+0x1f4>)
 8003988:	897b      	ldrh	r3, [r7, #10]
 800398a:	8053      	strh	r3, [r2, #2]
 800398c:	e012      	b.n	80039b4 <LCD_Scan_Dir+0x218>
 800398e:	bf00      	nop
 8003990:	20000a30 	.word	0x20000a30
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 8003994:	4b7f      	ldr	r3, [pc, #508]	; (8003b94 <LCD_Scan_Dir+0x3f8>)
 8003996:	881a      	ldrh	r2, [r3, #0]
 8003998:	4b7e      	ldr	r3, [pc, #504]	; (8003b94 <LCD_Scan_Dir+0x3f8>)
 800399a:	885b      	ldrh	r3, [r3, #2]
 800399c:	429a      	cmp	r2, r3
 800399e:	d909      	bls.n	80039b4 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 80039a0:	4b7c      	ldr	r3, [pc, #496]	; (8003b94 <LCD_Scan_Dir+0x3f8>)
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 80039a6:	4b7b      	ldr	r3, [pc, #492]	; (8003b94 <LCD_Scan_Dir+0x3f8>)
 80039a8:	885a      	ldrh	r2, [r3, #2]
 80039aa:	4b7a      	ldr	r3, [pc, #488]	; (8003b94 <LCD_Scan_Dir+0x3f8>)
 80039ac:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80039ae:	4a79      	ldr	r2, [pc, #484]	; (8003b94 <LCD_Scan_Dir+0x3f8>)
 80039b0:	897b      	ldrh	r3, [r7, #10]
 80039b2:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 80039b4:	4b77      	ldr	r3, [pc, #476]	; (8003b94 <LCD_Scan_Dir+0x3f8>)
 80039b6:	889b      	ldrh	r3, [r3, #4]
 80039b8:	f245 5210 	movw	r2, #21776	; 0x5510
 80039bc:	4293      	cmp	r3, r2
 80039be:	f040 80ef 	bne.w	8003ba0 <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 80039c2:	4b74      	ldr	r3, [pc, #464]	; (8003b94 <LCD_Scan_Dir+0x3f8>)
 80039c4:	895b      	ldrh	r3, [r3, #10]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff fb4a 	bl	8003060 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80039cc:	4b72      	ldr	r3, [pc, #456]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 80039ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039d2:	611a      	str	r2, [r3, #16]
 80039d4:	4b70      	ldr	r3, [pc, #448]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 80039d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039da:	615a      	str	r2, [r3, #20]
 80039dc:	4b6f      	ldr	r3, [pc, #444]	; (8003b9c <LCD_Scan_Dir+0x400>)
 80039de:	2200      	movs	r2, #0
 80039e0:	60da      	str	r2, [r3, #12]
 80039e2:	4b6d      	ldr	r3, [pc, #436]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 80039e4:	2280      	movs	r2, #128	; 0x80
 80039e6:	615a      	str	r2, [r3, #20]
 80039e8:	4b6b      	ldr	r3, [pc, #428]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 80039ea:	2280      	movs	r2, #128	; 0x80
 80039ec:	611a      	str	r2, [r3, #16]
 80039ee:	4b6a      	ldr	r3, [pc, #424]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 80039f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039f4:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 80039f6:	4b67      	ldr	r3, [pc, #412]	; (8003b94 <LCD_Scan_Dir+0x3f8>)
 80039f8:	895b      	ldrh	r3, [r3, #10]
 80039fa:	3301      	adds	r3, #1
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff fb2e 	bl	8003060 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003a04:	4b64      	ldr	r3, [pc, #400]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003a06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a0a:	611a      	str	r2, [r3, #16]
 8003a0c:	4b62      	ldr	r3, [pc, #392]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a12:	615a      	str	r2, [r3, #20]
 8003a14:	4b61      	ldr	r3, [pc, #388]	; (8003b9c <LCD_Scan_Dir+0x400>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	60da      	str	r2, [r3, #12]
 8003a1a:	4b5f      	ldr	r3, [pc, #380]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003a1c:	2280      	movs	r2, #128	; 0x80
 8003a1e:	615a      	str	r2, [r3, #20]
 8003a20:	4b5d      	ldr	r3, [pc, #372]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003a22:	2280      	movs	r2, #128	; 0x80
 8003a24:	611a      	str	r2, [r3, #16]
 8003a26:	4b5c      	ldr	r3, [pc, #368]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a2c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 8003a2e:	4b59      	ldr	r3, [pc, #356]	; (8003b94 <LCD_Scan_Dir+0x3f8>)
 8003a30:	895b      	ldrh	r3, [r3, #10]
 8003a32:	3302      	adds	r3, #2
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff fb12 	bl	8003060 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8003a3c:	4b56      	ldr	r3, [pc, #344]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003a3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a42:	611a      	str	r2, [r3, #16]
 8003a44:	4b54      	ldr	r3, [pc, #336]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a4a:	615a      	str	r2, [r3, #20]
 8003a4c:	4b51      	ldr	r3, [pc, #324]	; (8003b94 <LCD_Scan_Dir+0x3f8>)
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	3b01      	subs	r3, #1
 8003a52:	121a      	asrs	r2, r3, #8
 8003a54:	4b51      	ldr	r3, [pc, #324]	; (8003b9c <LCD_Scan_Dir+0x400>)
 8003a56:	60da      	str	r2, [r3, #12]
 8003a58:	4b4f      	ldr	r3, [pc, #316]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003a5a:	2280      	movs	r2, #128	; 0x80
 8003a5c:	615a      	str	r2, [r3, #20]
 8003a5e:	4b4e      	ldr	r3, [pc, #312]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003a60:	2280      	movs	r2, #128	; 0x80
 8003a62:	611a      	str	r2, [r3, #16]
 8003a64:	4b4c      	ldr	r3, [pc, #304]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a6a:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8003a6c:	4b49      	ldr	r3, [pc, #292]	; (8003b94 <LCD_Scan_Dir+0x3f8>)
 8003a6e:	895b      	ldrh	r3, [r3, #10]
 8003a70:	3303      	adds	r3, #3
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff faf3 	bl	8003060 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8003a7a:	4b47      	ldr	r3, [pc, #284]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003a7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a80:	611a      	str	r2, [r3, #16]
 8003a82:	4b45      	ldr	r3, [pc, #276]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a88:	615a      	str	r2, [r3, #20]
 8003a8a:	4b42      	ldr	r3, [pc, #264]	; (8003b94 <LCD_Scan_Dir+0x3f8>)
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	4a42      	ldr	r2, [pc, #264]	; (8003b9c <LCD_Scan_Dir+0x400>)
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	60d3      	str	r3, [r2, #12]
 8003a96:	4b40      	ldr	r3, [pc, #256]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003a98:	2280      	movs	r2, #128	; 0x80
 8003a9a:	615a      	str	r2, [r3, #20]
 8003a9c:	4b3e      	ldr	r3, [pc, #248]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003a9e:	2280      	movs	r2, #128	; 0x80
 8003aa0:	611a      	str	r2, [r3, #16]
 8003aa2:	4b3d      	ldr	r3, [pc, #244]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aa8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8003aaa:	4b3a      	ldr	r3, [pc, #232]	; (8003b94 <LCD_Scan_Dir+0x3f8>)
 8003aac:	899b      	ldrh	r3, [r3, #12]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff fad6 	bl	8003060 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003ab4:	4b38      	ldr	r3, [pc, #224]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003ab6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003aba:	611a      	str	r2, [r3, #16]
 8003abc:	4b36      	ldr	r3, [pc, #216]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003abe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ac2:	615a      	str	r2, [r3, #20]
 8003ac4:	4b35      	ldr	r3, [pc, #212]	; (8003b9c <LCD_Scan_Dir+0x400>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	60da      	str	r2, [r3, #12]
 8003aca:	4b33      	ldr	r3, [pc, #204]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003acc:	2280      	movs	r2, #128	; 0x80
 8003ace:	615a      	str	r2, [r3, #20]
 8003ad0:	4b31      	ldr	r3, [pc, #196]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003ad2:	2280      	movs	r2, #128	; 0x80
 8003ad4:	611a      	str	r2, [r3, #16]
 8003ad6:	4b30      	ldr	r3, [pc, #192]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003adc:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 8003ade:	4b2d      	ldr	r3, [pc, #180]	; (8003b94 <LCD_Scan_Dir+0x3f8>)
 8003ae0:	899b      	ldrh	r3, [r3, #12]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff faba 	bl	8003060 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003aec:	4b2a      	ldr	r3, [pc, #168]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003aee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003af2:	611a      	str	r2, [r3, #16]
 8003af4:	4b28      	ldr	r3, [pc, #160]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003afa:	615a      	str	r2, [r3, #20]
 8003afc:	4b27      	ldr	r3, [pc, #156]	; (8003b9c <LCD_Scan_Dir+0x400>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	60da      	str	r2, [r3, #12]
 8003b02:	4b25      	ldr	r3, [pc, #148]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003b04:	2280      	movs	r2, #128	; 0x80
 8003b06:	615a      	str	r2, [r3, #20]
 8003b08:	4b23      	ldr	r3, [pc, #140]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003b0a:	2280      	movs	r2, #128	; 0x80
 8003b0c:	611a      	str	r2, [r3, #16]
 8003b0e:	4b22      	ldr	r3, [pc, #136]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b14:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 8003b16:	4b1f      	ldr	r3, [pc, #124]	; (8003b94 <LCD_Scan_Dir+0x3f8>)
 8003b18:	899b      	ldrh	r3, [r3, #12]
 8003b1a:	3302      	adds	r3, #2
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff fa9e 	bl	8003060 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8003b24:	4b1c      	ldr	r3, [pc, #112]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003b26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b2a:	611a      	str	r2, [r3, #16]
 8003b2c:	4b1a      	ldr	r3, [pc, #104]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b32:	615a      	str	r2, [r3, #20]
 8003b34:	4b17      	ldr	r3, [pc, #92]	; (8003b94 <LCD_Scan_Dir+0x3f8>)
 8003b36:	885b      	ldrh	r3, [r3, #2]
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	121a      	asrs	r2, r3, #8
 8003b3c:	4b17      	ldr	r3, [pc, #92]	; (8003b9c <LCD_Scan_Dir+0x400>)
 8003b3e:	60da      	str	r2, [r3, #12]
 8003b40:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003b42:	2280      	movs	r2, #128	; 0x80
 8003b44:	615a      	str	r2, [r3, #20]
 8003b46:	4b14      	ldr	r3, [pc, #80]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003b48:	2280      	movs	r2, #128	; 0x80
 8003b4a:	611a      	str	r2, [r3, #16]
 8003b4c:	4b12      	ldr	r3, [pc, #72]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b52:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 8003b54:	4b0f      	ldr	r3, [pc, #60]	; (8003b94 <LCD_Scan_Dir+0x3f8>)
 8003b56:	899b      	ldrh	r3, [r3, #12]
 8003b58:	3303      	adds	r3, #3
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff fa7f 	bl	8003060 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8003b62:	4b0d      	ldr	r3, [pc, #52]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003b64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b68:	611a      	str	r2, [r3, #16]
 8003b6a:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003b6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b70:	615a      	str	r2, [r3, #20]
 8003b72:	4b08      	ldr	r3, [pc, #32]	; (8003b94 <LCD_Scan_Dir+0x3f8>)
 8003b74:	885b      	ldrh	r3, [r3, #2]
 8003b76:	3b01      	subs	r3, #1
 8003b78:	4a08      	ldr	r2, [pc, #32]	; (8003b9c <LCD_Scan_Dir+0x400>)
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	60d3      	str	r3, [r2, #12]
 8003b7e:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003b80:	2280      	movs	r2, #128	; 0x80
 8003b82:	615a      	str	r2, [r3, #20]
 8003b84:	4b04      	ldr	r3, [pc, #16]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003b86:	2280      	movs	r2, #128	; 0x80
 8003b88:	611a      	str	r2, [r3, #16]
 8003b8a:	4b03      	ldr	r3, [pc, #12]	; (8003b98 <LCD_Scan_Dir+0x3fc>)
 8003b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b90:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8003b92:	e10a      	b.n	8003daa <LCD_Scan_Dir+0x60e>
 8003b94:	20000a30 	.word	0x20000a30
 8003b98:	40011000 	.word	0x40011000
 8003b9c:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 8003ba0:	4b84      	ldr	r3, [pc, #528]	; (8003db4 <LCD_Scan_Dir+0x618>)
 8003ba2:	895b      	ldrh	r3, [r3, #10]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff fa5b 	bl	8003060 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003baa:	4b83      	ldr	r3, [pc, #524]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003bac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bb0:	611a      	str	r2, [r3, #16]
 8003bb2:	4b81      	ldr	r3, [pc, #516]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bb8:	615a      	str	r2, [r3, #20]
 8003bba:	4b80      	ldr	r3, [pc, #512]	; (8003dbc <LCD_Scan_Dir+0x620>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	60da      	str	r2, [r3, #12]
 8003bc0:	4b7d      	ldr	r3, [pc, #500]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003bc2:	2280      	movs	r2, #128	; 0x80
 8003bc4:	615a      	str	r2, [r3, #20]
 8003bc6:	4b7c      	ldr	r3, [pc, #496]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003bc8:	2280      	movs	r2, #128	; 0x80
 8003bca:	611a      	str	r2, [r3, #16]
 8003bcc:	4b7a      	ldr	r3, [pc, #488]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bd2:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8003bd4:	4b78      	ldr	r3, [pc, #480]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003bd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bda:	611a      	str	r2, [r3, #16]
 8003bdc:	4b76      	ldr	r3, [pc, #472]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003be2:	615a      	str	r2, [r3, #20]
 8003be4:	4b75      	ldr	r3, [pc, #468]	; (8003dbc <LCD_Scan_Dir+0x620>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	60da      	str	r2, [r3, #12]
 8003bea:	4b73      	ldr	r3, [pc, #460]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003bec:	2280      	movs	r2, #128	; 0x80
 8003bee:	615a      	str	r2, [r3, #20]
 8003bf0:	4b71      	ldr	r3, [pc, #452]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003bf2:	2280      	movs	r2, #128	; 0x80
 8003bf4:	611a      	str	r2, [r3, #16]
 8003bf6:	4b70      	ldr	r3, [pc, #448]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bfc:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8003bfe:	4b6e      	ldr	r3, [pc, #440]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003c00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c04:	611a      	str	r2, [r3, #16]
 8003c06:	4b6c      	ldr	r3, [pc, #432]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c0c:	615a      	str	r2, [r3, #20]
 8003c0e:	4b69      	ldr	r3, [pc, #420]	; (8003db4 <LCD_Scan_Dir+0x618>)
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	121a      	asrs	r2, r3, #8
 8003c16:	4b69      	ldr	r3, [pc, #420]	; (8003dbc <LCD_Scan_Dir+0x620>)
 8003c18:	60da      	str	r2, [r3, #12]
 8003c1a:	4b67      	ldr	r3, [pc, #412]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003c1c:	2280      	movs	r2, #128	; 0x80
 8003c1e:	615a      	str	r2, [r3, #20]
 8003c20:	4b65      	ldr	r3, [pc, #404]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003c22:	2280      	movs	r2, #128	; 0x80
 8003c24:	611a      	str	r2, [r3, #16]
 8003c26:	4b64      	ldr	r3, [pc, #400]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003c28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c2c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8003c2e:	4b62      	ldr	r3, [pc, #392]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003c30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c34:	611a      	str	r2, [r3, #16]
 8003c36:	4b60      	ldr	r3, [pc, #384]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c3c:	615a      	str	r2, [r3, #20]
 8003c3e:	4b5d      	ldr	r3, [pc, #372]	; (8003db4 <LCD_Scan_Dir+0x618>)
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	4a5d      	ldr	r2, [pc, #372]	; (8003dbc <LCD_Scan_Dir+0x620>)
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	60d3      	str	r3, [r2, #12]
 8003c4a:	4b5b      	ldr	r3, [pc, #364]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003c4c:	2280      	movs	r2, #128	; 0x80
 8003c4e:	615a      	str	r2, [r3, #20]
 8003c50:	4b59      	ldr	r3, [pc, #356]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003c52:	2280      	movs	r2, #128	; 0x80
 8003c54:	611a      	str	r2, [r3, #16]
 8003c56:	4b58      	ldr	r3, [pc, #352]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c5c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8003c5e:	4b55      	ldr	r3, [pc, #340]	; (8003db4 <LCD_Scan_Dir+0x618>)
 8003c60:	899b      	ldrh	r3, [r3, #12]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff f9fc 	bl	8003060 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003c68:	4b53      	ldr	r3, [pc, #332]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003c6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c6e:	611a      	str	r2, [r3, #16]
 8003c70:	4b51      	ldr	r3, [pc, #324]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003c72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c76:	615a      	str	r2, [r3, #20]
 8003c78:	4b50      	ldr	r3, [pc, #320]	; (8003dbc <LCD_Scan_Dir+0x620>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	60da      	str	r2, [r3, #12]
 8003c7e:	4b4e      	ldr	r3, [pc, #312]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003c80:	2280      	movs	r2, #128	; 0x80
 8003c82:	615a      	str	r2, [r3, #20]
 8003c84:	4b4c      	ldr	r3, [pc, #304]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003c86:	2280      	movs	r2, #128	; 0x80
 8003c88:	611a      	str	r2, [r3, #16]
 8003c8a:	4b4b      	ldr	r3, [pc, #300]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c90:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8003c92:	4b49      	ldr	r3, [pc, #292]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003c94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c98:	611a      	str	r2, [r3, #16]
 8003c9a:	4b47      	ldr	r3, [pc, #284]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ca0:	615a      	str	r2, [r3, #20]
 8003ca2:	4b46      	ldr	r3, [pc, #280]	; (8003dbc <LCD_Scan_Dir+0x620>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	60da      	str	r2, [r3, #12]
 8003ca8:	4b43      	ldr	r3, [pc, #268]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003caa:	2280      	movs	r2, #128	; 0x80
 8003cac:	615a      	str	r2, [r3, #20]
 8003cae:	4b42      	ldr	r3, [pc, #264]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003cb0:	2280      	movs	r2, #128	; 0x80
 8003cb2:	611a      	str	r2, [r3, #16]
 8003cb4:	4b40      	ldr	r3, [pc, #256]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cba:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8003cbc:	4b3e      	ldr	r3, [pc, #248]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003cbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cc2:	611a      	str	r2, [r3, #16]
 8003cc4:	4b3c      	ldr	r3, [pc, #240]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003cc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cca:	615a      	str	r2, [r3, #20]
 8003ccc:	4b39      	ldr	r3, [pc, #228]	; (8003db4 <LCD_Scan_Dir+0x618>)
 8003cce:	885b      	ldrh	r3, [r3, #2]
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	121a      	asrs	r2, r3, #8
 8003cd4:	4b39      	ldr	r3, [pc, #228]	; (8003dbc <LCD_Scan_Dir+0x620>)
 8003cd6:	60da      	str	r2, [r3, #12]
 8003cd8:	4b37      	ldr	r3, [pc, #220]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003cda:	2280      	movs	r2, #128	; 0x80
 8003cdc:	615a      	str	r2, [r3, #20]
 8003cde:	4b36      	ldr	r3, [pc, #216]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003ce0:	2280      	movs	r2, #128	; 0x80
 8003ce2:	611a      	str	r2, [r3, #16]
 8003ce4:	4b34      	ldr	r3, [pc, #208]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cea:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8003cec:	4b32      	ldr	r3, [pc, #200]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003cee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cf2:	611a      	str	r2, [r3, #16]
 8003cf4:	4b30      	ldr	r3, [pc, #192]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cfa:	615a      	str	r2, [r3, #20]
 8003cfc:	4b2d      	ldr	r3, [pc, #180]	; (8003db4 <LCD_Scan_Dir+0x618>)
 8003cfe:	885b      	ldrh	r3, [r3, #2]
 8003d00:	3b01      	subs	r3, #1
 8003d02:	4a2e      	ldr	r2, [pc, #184]	; (8003dbc <LCD_Scan_Dir+0x620>)
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	60d3      	str	r3, [r2, #12]
 8003d08:	4b2b      	ldr	r3, [pc, #172]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003d0a:	2280      	movs	r2, #128	; 0x80
 8003d0c:	615a      	str	r2, [r3, #20]
 8003d0e:	4b2a      	ldr	r3, [pc, #168]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003d10:	2280      	movs	r2, #128	; 0x80
 8003d12:	611a      	str	r2, [r3, #16]
 8003d14:	4b28      	ldr	r3, [pc, #160]	; (8003db8 <LCD_Scan_Dir+0x61c>)
 8003d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d1a:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8003d1c:	e045      	b.n	8003daa <LCD_Scan_Dir+0x60e>
		}
	} else {
		switch (dir) {
 8003d1e:	79fb      	ldrb	r3, [r7, #7]
 8003d20:	2b07      	cmp	r3, #7
 8003d22:	d836      	bhi.n	8003d92 <LCD_Scan_Dir+0x5f6>
 8003d24:	a201      	add	r2, pc, #4	; (adr r2, 8003d2c <LCD_Scan_Dir+0x590>)
 8003d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2a:	bf00      	nop
 8003d2c:	08003d4d 	.word	0x08003d4d
 8003d30:	08003d57 	.word	0x08003d57
 8003d34:	08003d61 	.word	0x08003d61
 8003d38:	08003d93 	.word	0x08003d93
 8003d3c:	08003d6b 	.word	0x08003d6b
 8003d40:	08003d75 	.word	0x08003d75
 8003d44:	08003d7f 	.word	0x08003d7f
 8003d48:	08003d89 	.word	0x08003d89
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 8003d4c:	89fb      	ldrh	r3, [r7, #14]
 8003d4e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003d52:	81fb      	strh	r3, [r7, #14]
			break;
 8003d54:	e01d      	b.n	8003d92 <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 8003d56:	89fb      	ldrh	r3, [r7, #14]
 8003d58:	f043 0310 	orr.w	r3, r3, #16
 8003d5c:	81fb      	strh	r3, [r7, #14]
			break;
 8003d5e:	e018      	b.n	8003d92 <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 8003d60:	89fb      	ldrh	r3, [r7, #14]
 8003d62:	f043 0320 	orr.w	r3, r3, #32
 8003d66:	81fb      	strh	r3, [r7, #14]
			break;
 8003d68:	e013      	b.n	8003d92 <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 8003d6a:	89fb      	ldrh	r3, [r7, #14]
 8003d6c:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003d70:	81fb      	strh	r3, [r7, #14]
			break;
 8003d72:	e00e      	b.n	8003d92 <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 8003d74:	89fb      	ldrh	r3, [r7, #14]
 8003d76:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003d7a:	81fb      	strh	r3, [r7, #14]
			break;
 8003d7c:	e009      	b.n	8003d92 <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 8003d7e:	89fb      	ldrh	r3, [r7, #14]
 8003d80:	f043 0318 	orr.w	r3, r3, #24
 8003d84:	81fb      	strh	r3, [r7, #14]
			break;
 8003d86:	e004      	b.n	8003d92 <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 8003d88:	89fb      	ldrh	r3, [r7, #14]
 8003d8a:	f043 0308 	orr.w	r3, r3, #8
 8003d8e:	81fb      	strh	r3, [r7, #14]
			break;
 8003d90:	bf00      	nop
		}
		dirreg = 0X03;
 8003d92:	2303      	movs	r3, #3
 8003d94:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 8003d96:	89fb      	ldrh	r3, [r7, #14]
 8003d98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d9c:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8003d9e:	89fa      	ldrh	r2, [r7, #14]
 8003da0:	89bb      	ldrh	r3, [r7, #12]
 8003da2:	4611      	mov	r1, r2
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff f9e7 	bl	8003178 <LCD_WriteReg>
	}
}
 8003daa:	bf00      	nop
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	20000a30 	.word	0x20000a30
 8003db8:	40011000 	.word	0x40011000
 8003dbc:	40010c00 	.word	0x40010c00

08003dc0 <LCD_Fast_DrawPoint>:
	LCD_WriteRAM_Prepare();
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
}
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	80fb      	strh	r3, [r7, #6]
 8003dca:	460b      	mov	r3, r1
 8003dcc:	80bb      	strh	r3, [r7, #4]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8003dd2:	4b75      	ldr	r3, [pc, #468]	; (8003fa8 <LCD_Fast_DrawPoint+0x1e8>)
 8003dd4:	889b      	ldrh	r3, [r3, #4]
 8003dd6:	f249 3241 	movw	r2, #37697	; 0x9341
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d005      	beq.n	8003dea <LCD_Fast_DrawPoint+0x2a>
 8003dde:	4b72      	ldr	r3, [pc, #456]	; (8003fa8 <LCD_Fast_DrawPoint+0x1e8>)
 8003de0:	889b      	ldrh	r3, [r3, #4]
 8003de2:	f245 3210 	movw	r2, #21264	; 0x5310
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d164      	bne.n	8003eb4 <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 8003dea:	4b6f      	ldr	r3, [pc, #444]	; (8003fa8 <LCD_Fast_DrawPoint+0x1e8>)
 8003dec:	895b      	ldrh	r3, [r3, #10]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff f936 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8003df4:	4b6d      	ldr	r3, [pc, #436]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003df6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dfa:	611a      	str	r2, [r3, #16]
 8003dfc:	4b6b      	ldr	r3, [pc, #428]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e02:	615a      	str	r2, [r3, #20]
 8003e04:	88fb      	ldrh	r3, [r7, #6]
 8003e06:	0a1b      	lsrs	r3, r3, #8
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	4b69      	ldr	r3, [pc, #420]	; (8003fb0 <LCD_Fast_DrawPoint+0x1f0>)
 8003e0c:	60da      	str	r2, [r3, #12]
 8003e0e:	4b67      	ldr	r3, [pc, #412]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003e10:	2280      	movs	r2, #128	; 0x80
 8003e12:	615a      	str	r2, [r3, #20]
 8003e14:	4b65      	ldr	r3, [pc, #404]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003e16:	2280      	movs	r2, #128	; 0x80
 8003e18:	611a      	str	r2, [r3, #16]
 8003e1a:	4b64      	ldr	r3, [pc, #400]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e20:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8003e22:	4b62      	ldr	r3, [pc, #392]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003e24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e28:	611a      	str	r2, [r3, #16]
 8003e2a:	4b60      	ldr	r3, [pc, #384]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e30:	615a      	str	r2, [r3, #20]
 8003e32:	88fb      	ldrh	r3, [r7, #6]
 8003e34:	4a5e      	ldr	r2, [pc, #376]	; (8003fb0 <LCD_Fast_DrawPoint+0x1f0>)
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	60d3      	str	r3, [r2, #12]
 8003e3a:	4b5c      	ldr	r3, [pc, #368]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003e3c:	2280      	movs	r2, #128	; 0x80
 8003e3e:	615a      	str	r2, [r3, #20]
 8003e40:	4b5a      	ldr	r3, [pc, #360]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003e42:	2280      	movs	r2, #128	; 0x80
 8003e44:	611a      	str	r2, [r3, #16]
 8003e46:	4b59      	ldr	r3, [pc, #356]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e4c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8003e4e:	4b56      	ldr	r3, [pc, #344]	; (8003fa8 <LCD_Fast_DrawPoint+0x1e8>)
 8003e50:	899b      	ldrh	r3, [r3, #12]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff f904 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8003e58:	4b54      	ldr	r3, [pc, #336]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003e5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e5e:	611a      	str	r2, [r3, #16]
 8003e60:	4b52      	ldr	r3, [pc, #328]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e66:	615a      	str	r2, [r3, #20]
 8003e68:	88bb      	ldrh	r3, [r7, #4]
 8003e6a:	0a1b      	lsrs	r3, r3, #8
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	4b50      	ldr	r3, [pc, #320]	; (8003fb0 <LCD_Fast_DrawPoint+0x1f0>)
 8003e70:	60da      	str	r2, [r3, #12]
 8003e72:	4b4e      	ldr	r3, [pc, #312]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003e74:	2280      	movs	r2, #128	; 0x80
 8003e76:	615a      	str	r2, [r3, #20]
 8003e78:	4b4c      	ldr	r3, [pc, #304]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003e7a:	2280      	movs	r2, #128	; 0x80
 8003e7c:	611a      	str	r2, [r3, #16]
 8003e7e:	4b4b      	ldr	r3, [pc, #300]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e84:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8003e86:	4b49      	ldr	r3, [pc, #292]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003e88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e8c:	611a      	str	r2, [r3, #16]
 8003e8e:	4b47      	ldr	r3, [pc, #284]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003e90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e94:	615a      	str	r2, [r3, #20]
 8003e96:	88bb      	ldrh	r3, [r7, #4]
 8003e98:	4a45      	ldr	r2, [pc, #276]	; (8003fb0 <LCD_Fast_DrawPoint+0x1f0>)
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	60d3      	str	r3, [r2, #12]
 8003e9e:	4b43      	ldr	r3, [pc, #268]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003ea0:	2280      	movs	r2, #128	; 0x80
 8003ea2:	615a      	str	r2, [r3, #20]
 8003ea4:	4b41      	ldr	r3, [pc, #260]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003ea6:	2280      	movs	r2, #128	; 0x80
 8003ea8:	611a      	str	r2, [r3, #16]
 8003eaa:	4b40      	ldr	r3, [pc, #256]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eb0:	611a      	str	r2, [r3, #16]
 8003eb2:	e1e6      	b.n	8004282 <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 8003eb4:	4b3c      	ldr	r3, [pc, #240]	; (8003fa8 <LCD_Fast_DrawPoint+0x1e8>)
 8003eb6:	889b      	ldrh	r3, [r3, #4]
 8003eb8:	f245 5210 	movw	r2, #21776	; 0x5510
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d179      	bne.n	8003fb4 <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 8003ec0:	4b39      	ldr	r3, [pc, #228]	; (8003fa8 <LCD_Fast_DrawPoint+0x1e8>)
 8003ec2:	895b      	ldrh	r3, [r3, #10]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff f8cb 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8003eca:	4b38      	ldr	r3, [pc, #224]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003ecc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ed0:	611a      	str	r2, [r3, #16]
 8003ed2:	4b36      	ldr	r3, [pc, #216]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003ed4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ed8:	615a      	str	r2, [r3, #20]
 8003eda:	88fb      	ldrh	r3, [r7, #6]
 8003edc:	0a1b      	lsrs	r3, r3, #8
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	4b33      	ldr	r3, [pc, #204]	; (8003fb0 <LCD_Fast_DrawPoint+0x1f0>)
 8003ee2:	60da      	str	r2, [r3, #12]
 8003ee4:	4b31      	ldr	r3, [pc, #196]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003ee6:	2280      	movs	r2, #128	; 0x80
 8003ee8:	615a      	str	r2, [r3, #20]
 8003eea:	4b30      	ldr	r3, [pc, #192]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003eec:	2280      	movs	r2, #128	; 0x80
 8003eee:	611a      	str	r2, [r3, #16]
 8003ef0:	4b2e      	ldr	r3, [pc, #184]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003ef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ef6:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8003ef8:	4b2b      	ldr	r3, [pc, #172]	; (8003fa8 <LCD_Fast_DrawPoint+0x1e8>)
 8003efa:	895b      	ldrh	r3, [r3, #10]
 8003efc:	3301      	adds	r3, #1
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff f8ad 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 8003f06:	4b29      	ldr	r3, [pc, #164]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003f08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f0c:	611a      	str	r2, [r3, #16]
 8003f0e:	4b27      	ldr	r3, [pc, #156]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f14:	615a      	str	r2, [r3, #20]
 8003f16:	88fb      	ldrh	r3, [r7, #6]
 8003f18:	4a25      	ldr	r2, [pc, #148]	; (8003fb0 <LCD_Fast_DrawPoint+0x1f0>)
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	60d3      	str	r3, [r2, #12]
 8003f1e:	4b23      	ldr	r3, [pc, #140]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003f20:	2280      	movs	r2, #128	; 0x80
 8003f22:	615a      	str	r2, [r3, #20]
 8003f24:	4b21      	ldr	r3, [pc, #132]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003f26:	2280      	movs	r2, #128	; 0x80
 8003f28:	611a      	str	r2, [r3, #16]
 8003f2a:	4b20      	ldr	r3, [pc, #128]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f30:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8003f32:	4b1d      	ldr	r3, [pc, #116]	; (8003fa8 <LCD_Fast_DrawPoint+0x1e8>)
 8003f34:	899b      	ldrh	r3, [r3, #12]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff f892 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8003f3c:	4b1b      	ldr	r3, [pc, #108]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003f3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f42:	611a      	str	r2, [r3, #16]
 8003f44:	4b19      	ldr	r3, [pc, #100]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003f46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f4a:	615a      	str	r2, [r3, #20]
 8003f4c:	88bb      	ldrh	r3, [r7, #4]
 8003f4e:	0a1b      	lsrs	r3, r3, #8
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	4b17      	ldr	r3, [pc, #92]	; (8003fb0 <LCD_Fast_DrawPoint+0x1f0>)
 8003f54:	60da      	str	r2, [r3, #12]
 8003f56:	4b15      	ldr	r3, [pc, #84]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003f58:	2280      	movs	r2, #128	; 0x80
 8003f5a:	615a      	str	r2, [r3, #20]
 8003f5c:	4b13      	ldr	r3, [pc, #76]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003f5e:	2280      	movs	r2, #128	; 0x80
 8003f60:	611a      	str	r2, [r3, #16]
 8003f62:	4b12      	ldr	r3, [pc, #72]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f68:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8003f6a:	4b0f      	ldr	r3, [pc, #60]	; (8003fa8 <LCD_Fast_DrawPoint+0x1e8>)
 8003f6c:	899b      	ldrh	r3, [r3, #12]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff f874 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 8003f78:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003f7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f7e:	611a      	str	r2, [r3, #16]
 8003f80:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f86:	615a      	str	r2, [r3, #20]
 8003f88:	88bb      	ldrh	r3, [r7, #4]
 8003f8a:	4a09      	ldr	r2, [pc, #36]	; (8003fb0 <LCD_Fast_DrawPoint+0x1f0>)
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	60d3      	str	r3, [r2, #12]
 8003f90:	4b06      	ldr	r3, [pc, #24]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003f92:	2280      	movs	r2, #128	; 0x80
 8003f94:	615a      	str	r2, [r3, #20]
 8003f96:	4b05      	ldr	r3, [pc, #20]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003f98:	2280      	movs	r2, #128	; 0x80
 8003f9a:	611a      	str	r2, [r3, #16]
 8003f9c:	4b03      	ldr	r3, [pc, #12]	; (8003fac <LCD_Fast_DrawPoint+0x1ec>)
 8003f9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fa2:	611a      	str	r2, [r3, #16]
 8003fa4:	e16d      	b.n	8004282 <LCD_Fast_DrawPoint+0x4c2>
 8003fa6:	bf00      	nop
 8003fa8:	20000a30 	.word	0x20000a30
 8003fac:	40011000 	.word	0x40011000
 8003fb0:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8003fb4:	4b68      	ldr	r3, [pc, #416]	; (8004158 <LCD_Fast_DrawPoint+0x398>)
 8003fb6:	889b      	ldrh	r3, [r3, #4]
 8003fb8:	f641 1263 	movw	r2, #6499	; 0x1963
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	f040 80d1 	bne.w	8004164 <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 8003fc2:	4b65      	ldr	r3, [pc, #404]	; (8004158 <LCD_Fast_DrawPoint+0x398>)
 8003fc4:	799b      	ldrb	r3, [r3, #6]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 8003fca:	4b63      	ldr	r3, [pc, #396]	; (8004158 <LCD_Fast_DrawPoint+0x398>)
 8003fcc:	881a      	ldrh	r2, [r3, #0]
 8003fce:	88fb      	ldrh	r3, [r7, #6]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8003fd8:	4b5f      	ldr	r3, [pc, #380]	; (8004158 <LCD_Fast_DrawPoint+0x398>)
 8003fda:	895b      	ldrh	r3, [r3, #10]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff f83f 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8003fe2:	4b5e      	ldr	r3, [pc, #376]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 8003fe4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fe8:	611a      	str	r2, [r3, #16]
 8003fea:	4b5c      	ldr	r3, [pc, #368]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 8003fec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ff0:	615a      	str	r2, [r3, #20]
 8003ff2:	88fb      	ldrh	r3, [r7, #6]
 8003ff4:	0a1b      	lsrs	r3, r3, #8
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	4b59      	ldr	r3, [pc, #356]	; (8004160 <LCD_Fast_DrawPoint+0x3a0>)
 8003ffa:	60da      	str	r2, [r3, #12]
 8003ffc:	4b57      	ldr	r3, [pc, #348]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 8003ffe:	2280      	movs	r2, #128	; 0x80
 8004000:	615a      	str	r2, [r3, #20]
 8004002:	4b56      	ldr	r3, [pc, #344]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 8004004:	2280      	movs	r2, #128	; 0x80
 8004006:	611a      	str	r2, [r3, #16]
 8004008:	4b54      	ldr	r3, [pc, #336]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 800400a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800400e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8004010:	4b52      	ldr	r3, [pc, #328]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 8004012:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004016:	611a      	str	r2, [r3, #16]
 8004018:	4b50      	ldr	r3, [pc, #320]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 800401a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800401e:	615a      	str	r2, [r3, #20]
 8004020:	88fb      	ldrh	r3, [r7, #6]
 8004022:	4a4f      	ldr	r2, [pc, #316]	; (8004160 <LCD_Fast_DrawPoint+0x3a0>)
 8004024:	b2db      	uxtb	r3, r3
 8004026:	60d3      	str	r3, [r2, #12]
 8004028:	4b4c      	ldr	r3, [pc, #304]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 800402a:	2280      	movs	r2, #128	; 0x80
 800402c:	615a      	str	r2, [r3, #20]
 800402e:	4b4b      	ldr	r3, [pc, #300]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 8004030:	2280      	movs	r2, #128	; 0x80
 8004032:	611a      	str	r2, [r3, #16]
 8004034:	4b49      	ldr	r3, [pc, #292]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 8004036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800403a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 800403c:	4b47      	ldr	r3, [pc, #284]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 800403e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004042:	611a      	str	r2, [r3, #16]
 8004044:	4b45      	ldr	r3, [pc, #276]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 8004046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800404a:	615a      	str	r2, [r3, #20]
 800404c:	88fb      	ldrh	r3, [r7, #6]
 800404e:	0a1b      	lsrs	r3, r3, #8
 8004050:	b29a      	uxth	r2, r3
 8004052:	4b43      	ldr	r3, [pc, #268]	; (8004160 <LCD_Fast_DrawPoint+0x3a0>)
 8004054:	60da      	str	r2, [r3, #12]
 8004056:	4b41      	ldr	r3, [pc, #260]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 8004058:	2280      	movs	r2, #128	; 0x80
 800405a:	615a      	str	r2, [r3, #20]
 800405c:	4b3f      	ldr	r3, [pc, #252]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 800405e:	2280      	movs	r2, #128	; 0x80
 8004060:	611a      	str	r2, [r3, #16]
 8004062:	4b3e      	ldr	r3, [pc, #248]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 8004064:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004068:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 800406a:	4b3c      	ldr	r3, [pc, #240]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 800406c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004070:	611a      	str	r2, [r3, #16]
 8004072:	4b3a      	ldr	r3, [pc, #232]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 8004074:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004078:	615a      	str	r2, [r3, #20]
 800407a:	88fb      	ldrh	r3, [r7, #6]
 800407c:	4a38      	ldr	r2, [pc, #224]	; (8004160 <LCD_Fast_DrawPoint+0x3a0>)
 800407e:	b2db      	uxtb	r3, r3
 8004080:	60d3      	str	r3, [r2, #12]
 8004082:	4b36      	ldr	r3, [pc, #216]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 8004084:	2280      	movs	r2, #128	; 0x80
 8004086:	615a      	str	r2, [r3, #20]
 8004088:	4b34      	ldr	r3, [pc, #208]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 800408a:	2280      	movs	r2, #128	; 0x80
 800408c:	611a      	str	r2, [r3, #16]
 800408e:	4b33      	ldr	r3, [pc, #204]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 8004090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004094:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8004096:	4b30      	ldr	r3, [pc, #192]	; (8004158 <LCD_Fast_DrawPoint+0x398>)
 8004098:	899b      	ldrh	r3, [r3, #12]
 800409a:	4618      	mov	r0, r3
 800409c:	f7fe ffe0 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80040a0:	4b2e      	ldr	r3, [pc, #184]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 80040a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040a6:	611a      	str	r2, [r3, #16]
 80040a8:	4b2c      	ldr	r3, [pc, #176]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 80040aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040ae:	615a      	str	r2, [r3, #20]
 80040b0:	88bb      	ldrh	r3, [r7, #4]
 80040b2:	0a1b      	lsrs	r3, r3, #8
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	4b2a      	ldr	r3, [pc, #168]	; (8004160 <LCD_Fast_DrawPoint+0x3a0>)
 80040b8:	60da      	str	r2, [r3, #12]
 80040ba:	4b28      	ldr	r3, [pc, #160]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 80040bc:	2280      	movs	r2, #128	; 0x80
 80040be:	615a      	str	r2, [r3, #20]
 80040c0:	4b26      	ldr	r3, [pc, #152]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 80040c2:	2280      	movs	r2, #128	; 0x80
 80040c4:	611a      	str	r2, [r3, #16]
 80040c6:	4b25      	ldr	r3, [pc, #148]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 80040c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040cc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 80040ce:	4b23      	ldr	r3, [pc, #140]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 80040d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040d4:	611a      	str	r2, [r3, #16]
 80040d6:	4b21      	ldr	r3, [pc, #132]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 80040d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040dc:	615a      	str	r2, [r3, #20]
 80040de:	88bb      	ldrh	r3, [r7, #4]
 80040e0:	4a1f      	ldr	r2, [pc, #124]	; (8004160 <LCD_Fast_DrawPoint+0x3a0>)
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	60d3      	str	r3, [r2, #12]
 80040e6:	4b1d      	ldr	r3, [pc, #116]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 80040e8:	2280      	movs	r2, #128	; 0x80
 80040ea:	615a      	str	r2, [r3, #20]
 80040ec:	4b1b      	ldr	r3, [pc, #108]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 80040ee:	2280      	movs	r2, #128	; 0x80
 80040f0:	611a      	str	r2, [r3, #16]
 80040f2:	4b1a      	ldr	r3, [pc, #104]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 80040f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040f8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 80040fa:	4b18      	ldr	r3, [pc, #96]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 80040fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004100:	611a      	str	r2, [r3, #16]
 8004102:	4b16      	ldr	r3, [pc, #88]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 8004104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004108:	615a      	str	r2, [r3, #20]
 800410a:	88bb      	ldrh	r3, [r7, #4]
 800410c:	0a1b      	lsrs	r3, r3, #8
 800410e:	b29a      	uxth	r2, r3
 8004110:	4b13      	ldr	r3, [pc, #76]	; (8004160 <LCD_Fast_DrawPoint+0x3a0>)
 8004112:	60da      	str	r2, [r3, #12]
 8004114:	4b11      	ldr	r3, [pc, #68]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 8004116:	2280      	movs	r2, #128	; 0x80
 8004118:	615a      	str	r2, [r3, #20]
 800411a:	4b10      	ldr	r3, [pc, #64]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 800411c:	2280      	movs	r2, #128	; 0x80
 800411e:	611a      	str	r2, [r3, #16]
 8004120:	4b0e      	ldr	r3, [pc, #56]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 8004122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004126:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8004128:	4b0c      	ldr	r3, [pc, #48]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 800412a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800412e:	611a      	str	r2, [r3, #16]
 8004130:	4b0a      	ldr	r3, [pc, #40]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 8004132:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004136:	615a      	str	r2, [r3, #20]
 8004138:	88bb      	ldrh	r3, [r7, #4]
 800413a:	4a09      	ldr	r2, [pc, #36]	; (8004160 <LCD_Fast_DrawPoint+0x3a0>)
 800413c:	b2db      	uxtb	r3, r3
 800413e:	60d3      	str	r3, [r2, #12]
 8004140:	4b06      	ldr	r3, [pc, #24]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 8004142:	2280      	movs	r2, #128	; 0x80
 8004144:	615a      	str	r2, [r3, #20]
 8004146:	4b05      	ldr	r3, [pc, #20]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 8004148:	2280      	movs	r2, #128	; 0x80
 800414a:	611a      	str	r2, [r3, #16]
 800414c:	4b03      	ldr	r3, [pc, #12]	; (800415c <LCD_Fast_DrawPoint+0x39c>)
 800414e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004152:	611a      	str	r2, [r3, #16]
 8004154:	e095      	b.n	8004282 <LCD_Fast_DrawPoint+0x4c2>
 8004156:	bf00      	nop
 8004158:	20000a30 	.word	0x20000a30
 800415c:	40011000 	.word	0x40011000
 8004160:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 8004164:	4b5e      	ldr	r3, [pc, #376]	; (80042e0 <LCD_Fast_DrawPoint+0x520>)
 8004166:	889b      	ldrh	r3, [r3, #4]
 8004168:	f646 0204 	movw	r2, #26628	; 0x6804
 800416c:	4293      	cmp	r3, r2
 800416e:	d16f      	bne.n	8004250 <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 8004170:	4b5b      	ldr	r3, [pc, #364]	; (80042e0 <LCD_Fast_DrawPoint+0x520>)
 8004172:	799b      	ldrb	r3, [r3, #6]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d106      	bne.n	8004186 <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 8004178:	4b59      	ldr	r3, [pc, #356]	; (80042e0 <LCD_Fast_DrawPoint+0x520>)
 800417a:	881a      	ldrh	r2, [r3, #0]
 800417c:	88fb      	ldrh	r3, [r7, #6]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	b29b      	uxth	r3, r3
 8004182:	3b01      	subs	r3, #1
 8004184:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8004186:	4b56      	ldr	r3, [pc, #344]	; (80042e0 <LCD_Fast_DrawPoint+0x520>)
 8004188:	895b      	ldrh	r3, [r3, #10]
 800418a:	4618      	mov	r0, r3
 800418c:	f7fe ff68 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8004190:	4b54      	ldr	r3, [pc, #336]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 8004192:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004196:	611a      	str	r2, [r3, #16]
 8004198:	4b52      	ldr	r3, [pc, #328]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 800419a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800419e:	615a      	str	r2, [r3, #20]
 80041a0:	88fb      	ldrh	r3, [r7, #6]
 80041a2:	0a1b      	lsrs	r3, r3, #8
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	4b50      	ldr	r3, [pc, #320]	; (80042e8 <LCD_Fast_DrawPoint+0x528>)
 80041a8:	60da      	str	r2, [r3, #12]
 80041aa:	4b4e      	ldr	r3, [pc, #312]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 80041ac:	2280      	movs	r2, #128	; 0x80
 80041ae:	615a      	str	r2, [r3, #20]
 80041b0:	4b4c      	ldr	r3, [pc, #304]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 80041b2:	2280      	movs	r2, #128	; 0x80
 80041b4:	611a      	str	r2, [r3, #16]
 80041b6:	4b4b      	ldr	r3, [pc, #300]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 80041b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041bc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 80041be:	4b49      	ldr	r3, [pc, #292]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 80041c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041c4:	611a      	str	r2, [r3, #16]
 80041c6:	4b47      	ldr	r3, [pc, #284]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 80041c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041cc:	615a      	str	r2, [r3, #20]
 80041ce:	88fb      	ldrh	r3, [r7, #6]
 80041d0:	4a45      	ldr	r2, [pc, #276]	; (80042e8 <LCD_Fast_DrawPoint+0x528>)
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	60d3      	str	r3, [r2, #12]
 80041d6:	4b43      	ldr	r3, [pc, #268]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 80041d8:	2280      	movs	r2, #128	; 0x80
 80041da:	615a      	str	r2, [r3, #20]
 80041dc:	4b41      	ldr	r3, [pc, #260]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 80041de:	2280      	movs	r2, #128	; 0x80
 80041e0:	611a      	str	r2, [r3, #16]
 80041e2:	4b40      	ldr	r3, [pc, #256]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 80041e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041e8:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80041ea:	4b3d      	ldr	r3, [pc, #244]	; (80042e0 <LCD_Fast_DrawPoint+0x520>)
 80041ec:	899b      	ldrh	r3, [r3, #12]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fe ff36 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80041f4:	4b3b      	ldr	r3, [pc, #236]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 80041f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041fa:	611a      	str	r2, [r3, #16]
 80041fc:	4b39      	ldr	r3, [pc, #228]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 80041fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004202:	615a      	str	r2, [r3, #20]
 8004204:	88bb      	ldrh	r3, [r7, #4]
 8004206:	0a1b      	lsrs	r3, r3, #8
 8004208:	b29a      	uxth	r2, r3
 800420a:	4b37      	ldr	r3, [pc, #220]	; (80042e8 <LCD_Fast_DrawPoint+0x528>)
 800420c:	60da      	str	r2, [r3, #12]
 800420e:	4b35      	ldr	r3, [pc, #212]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 8004210:	2280      	movs	r2, #128	; 0x80
 8004212:	615a      	str	r2, [r3, #20]
 8004214:	4b33      	ldr	r3, [pc, #204]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 8004216:	2280      	movs	r2, #128	; 0x80
 8004218:	611a      	str	r2, [r3, #16]
 800421a:	4b32      	ldr	r3, [pc, #200]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 800421c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004220:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8004222:	4b30      	ldr	r3, [pc, #192]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 8004224:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004228:	611a      	str	r2, [r3, #16]
 800422a:	4b2e      	ldr	r3, [pc, #184]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 800422c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004230:	615a      	str	r2, [r3, #20]
 8004232:	88bb      	ldrh	r3, [r7, #4]
 8004234:	4a2c      	ldr	r2, [pc, #176]	; (80042e8 <LCD_Fast_DrawPoint+0x528>)
 8004236:	b2db      	uxtb	r3, r3
 8004238:	60d3      	str	r3, [r2, #12]
 800423a:	4b2a      	ldr	r3, [pc, #168]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 800423c:	2280      	movs	r2, #128	; 0x80
 800423e:	615a      	str	r2, [r3, #20]
 8004240:	4b28      	ldr	r3, [pc, #160]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 8004242:	2280      	movs	r2, #128	; 0x80
 8004244:	611a      	str	r2, [r3, #16]
 8004246:	4b27      	ldr	r3, [pc, #156]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 8004248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800424c:	611a      	str	r2, [r3, #16]
 800424e:	e018      	b.n	8004282 <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 8004250:	4b23      	ldr	r3, [pc, #140]	; (80042e0 <LCD_Fast_DrawPoint+0x520>)
 8004252:	799b      	ldrb	r3, [r3, #6]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d106      	bne.n	8004266 <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8004258:	4b21      	ldr	r3, [pc, #132]	; (80042e0 <LCD_Fast_DrawPoint+0x520>)
 800425a:	881a      	ldrh	r2, [r3, #0]
 800425c:	88fb      	ldrh	r3, [r7, #6]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	b29b      	uxth	r3, r3
 8004262:	3b01      	subs	r3, #1
 8004264:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8004266:	4b1e      	ldr	r3, [pc, #120]	; (80042e0 <LCD_Fast_DrawPoint+0x520>)
 8004268:	895b      	ldrh	r3, [r3, #10]
 800426a:	88fa      	ldrh	r2, [r7, #6]
 800426c:	4611      	mov	r1, r2
 800426e:	4618      	mov	r0, r3
 8004270:	f7fe ff82 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8004274:	4b1a      	ldr	r3, [pc, #104]	; (80042e0 <LCD_Fast_DrawPoint+0x520>)
 8004276:	899b      	ldrh	r3, [r3, #12]
 8004278:	88ba      	ldrh	r2, [r7, #4]
 800427a:	4611      	mov	r1, r2
 800427c:	4618      	mov	r0, r3
 800427e:	f7fe ff7b 	bl	8003178 <LCD_WriteReg>
	}
	LCD_RS_CLR;
 8004282:	4b18      	ldr	r3, [pc, #96]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 8004284:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004288:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 800428a:	4b16      	ldr	r3, [pc, #88]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 800428c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004290:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 8004292:	4b13      	ldr	r3, [pc, #76]	; (80042e0 <LCD_Fast_DrawPoint+0x520>)
 8004294:	891a      	ldrh	r2, [r3, #8]
 8004296:	4b14      	ldr	r3, [pc, #80]	; (80042e8 <LCD_Fast_DrawPoint+0x528>)
 8004298:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 800429a:	4b12      	ldr	r3, [pc, #72]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 800429c:	2280      	movs	r2, #128	; 0x80
 800429e:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80042a0:	4b10      	ldr	r3, [pc, #64]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 80042a2:	2280      	movs	r2, #128	; 0x80
 80042a4:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80042a6:	4b0f      	ldr	r3, [pc, #60]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 80042a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ac:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 80042ae:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 80042b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042b4:	611a      	str	r2, [r3, #16]
 80042b6:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 80042b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042bc:	615a      	str	r2, [r3, #20]
 80042be:	4a0a      	ldr	r2, [pc, #40]	; (80042e8 <LCD_Fast_DrawPoint+0x528>)
 80042c0:	887b      	ldrh	r3, [r7, #2]
 80042c2:	60d3      	str	r3, [r2, #12]
 80042c4:	4b07      	ldr	r3, [pc, #28]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 80042c6:	2280      	movs	r2, #128	; 0x80
 80042c8:	615a      	str	r2, [r3, #20]
 80042ca:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 80042cc:	2280      	movs	r2, #128	; 0x80
 80042ce:	611a      	str	r2, [r3, #16]
 80042d0:	4b04      	ldr	r3, [pc, #16]	; (80042e4 <LCD_Fast_DrawPoint+0x524>)
 80042d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042d6:	611a      	str	r2, [r3, #16]
}
 80042d8:	bf00      	nop
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	20000a30 	.word	0x20000a30
 80042e4:	40011000 	.word	0x40011000
 80042e8:	40010c00 	.word	0x40010c00
 80042ec:	00000000 	.word	0x00000000

080042f0 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 80042f0:	b590      	push	{r4, r7, lr}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	4603      	mov	r3, r0
 80042f8:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 80042fa:	20be      	movs	r0, #190	; 0xbe
 80042fc:	f7fe feb0 	bl	8003060 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8004300:	4b4b      	ldr	r3, [pc, #300]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 8004302:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004306:	611a      	str	r2, [r3, #16]
 8004308:	4b49      	ldr	r3, [pc, #292]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 800430a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800430e:	615a      	str	r2, [r3, #20]
 8004310:	4b48      	ldr	r3, [pc, #288]	; (8004434 <LCD_SSD_BackLightSet+0x144>)
 8004312:	2205      	movs	r2, #5
 8004314:	60da      	str	r2, [r3, #12]
 8004316:	4b46      	ldr	r3, [pc, #280]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 8004318:	2280      	movs	r2, #128	; 0x80
 800431a:	615a      	str	r2, [r3, #20]
 800431c:	4b44      	ldr	r3, [pc, #272]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 800431e:	2280      	movs	r2, #128	; 0x80
 8004320:	611a      	str	r2, [r3, #16]
 8004322:	4b43      	ldr	r3, [pc, #268]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 8004324:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004328:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 800432a:	4b41      	ldr	r3, [pc, #260]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 800432c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004330:	611a      	str	r2, [r3, #16]
 8004332:	4b3f      	ldr	r3, [pc, #252]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 8004334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004338:	615a      	str	r2, [r3, #20]
 800433a:	79fb      	ldrb	r3, [r7, #7]
 800433c:	4618      	mov	r0, r3
 800433e:	f7fc f8cd 	bl	80004dc <__aeabi_i2d>
 8004342:	a339      	add	r3, pc, #228	; (adr r3, 8004428 <LCD_SSD_BackLightSet+0x138>)
 8004344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004348:	f7fc f932 	bl	80005b0 <__aeabi_dmul>
 800434c:	4603      	mov	r3, r0
 800434e:	460c      	mov	r4, r1
 8004350:	461a      	mov	r2, r3
 8004352:	4623      	mov	r3, r4
 8004354:	4c37      	ldr	r4, [pc, #220]	; (8004434 <LCD_SSD_BackLightSet+0x144>)
 8004356:	4610      	mov	r0, r2
 8004358:	4619      	mov	r1, r3
 800435a:	f7fc fc01 	bl	8000b60 <__aeabi_d2uiz>
 800435e:	4603      	mov	r3, r0
 8004360:	60e3      	str	r3, [r4, #12]
 8004362:	4b33      	ldr	r3, [pc, #204]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 8004364:	2280      	movs	r2, #128	; 0x80
 8004366:	615a      	str	r2, [r3, #20]
 8004368:	4b31      	ldr	r3, [pc, #196]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 800436a:	2280      	movs	r2, #128	; 0x80
 800436c:	611a      	str	r2, [r3, #16]
 800436e:	4b30      	ldr	r3, [pc, #192]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 8004370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004374:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8004376:	4b2e      	ldr	r3, [pc, #184]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 8004378:	f44f 7280 	mov.w	r2, #256	; 0x100
 800437c:	611a      	str	r2, [r3, #16]
 800437e:	4b2c      	ldr	r3, [pc, #176]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 8004380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004384:	615a      	str	r2, [r3, #20]
 8004386:	4b2b      	ldr	r3, [pc, #172]	; (8004434 <LCD_SSD_BackLightSet+0x144>)
 8004388:	2201      	movs	r2, #1
 800438a:	60da      	str	r2, [r3, #12]
 800438c:	4b28      	ldr	r3, [pc, #160]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 800438e:	2280      	movs	r2, #128	; 0x80
 8004390:	615a      	str	r2, [r3, #20]
 8004392:	4b27      	ldr	r3, [pc, #156]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 8004394:	2280      	movs	r2, #128	; 0x80
 8004396:	611a      	str	r2, [r3, #16]
 8004398:	4b25      	ldr	r3, [pc, #148]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 800439a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800439e:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 80043a0:	4b23      	ldr	r3, [pc, #140]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 80043a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043a6:	611a      	str	r2, [r3, #16]
 80043a8:	4b21      	ldr	r3, [pc, #132]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 80043aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043ae:	615a      	str	r2, [r3, #20]
 80043b0:	4b20      	ldr	r3, [pc, #128]	; (8004434 <LCD_SSD_BackLightSet+0x144>)
 80043b2:	22ff      	movs	r2, #255	; 0xff
 80043b4:	60da      	str	r2, [r3, #12]
 80043b6:	4b1e      	ldr	r3, [pc, #120]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 80043b8:	2280      	movs	r2, #128	; 0x80
 80043ba:	615a      	str	r2, [r3, #20]
 80043bc:	4b1c      	ldr	r3, [pc, #112]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 80043be:	2280      	movs	r2, #128	; 0x80
 80043c0:	611a      	str	r2, [r3, #16]
 80043c2:	4b1b      	ldr	r3, [pc, #108]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 80043c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043c8:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 80043ca:	4b19      	ldr	r3, [pc, #100]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 80043cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043d0:	611a      	str	r2, [r3, #16]
 80043d2:	4b17      	ldr	r3, [pc, #92]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 80043d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043d8:	615a      	str	r2, [r3, #20]
 80043da:	4b16      	ldr	r3, [pc, #88]	; (8004434 <LCD_SSD_BackLightSet+0x144>)
 80043dc:	2200      	movs	r2, #0
 80043de:	60da      	str	r2, [r3, #12]
 80043e0:	4b13      	ldr	r3, [pc, #76]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 80043e2:	2280      	movs	r2, #128	; 0x80
 80043e4:	615a      	str	r2, [r3, #20]
 80043e6:	4b12      	ldr	r3, [pc, #72]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 80043e8:	2280      	movs	r2, #128	; 0x80
 80043ea:	611a      	str	r2, [r3, #16]
 80043ec:	4b10      	ldr	r3, [pc, #64]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 80043ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043f2:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 80043f4:	4b0e      	ldr	r3, [pc, #56]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 80043f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043fa:	611a      	str	r2, [r3, #16]
 80043fc:	4b0c      	ldr	r3, [pc, #48]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 80043fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004402:	615a      	str	r2, [r3, #20]
 8004404:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <LCD_SSD_BackLightSet+0x144>)
 8004406:	2200      	movs	r2, #0
 8004408:	60da      	str	r2, [r3, #12]
 800440a:	4b09      	ldr	r3, [pc, #36]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 800440c:	2280      	movs	r2, #128	; 0x80
 800440e:	615a      	str	r2, [r3, #20]
 8004410:	4b07      	ldr	r3, [pc, #28]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 8004412:	2280      	movs	r2, #128	; 0x80
 8004414:	611a      	str	r2, [r3, #16]
 8004416:	4b06      	ldr	r3, [pc, #24]	; (8004430 <LCD_SSD_BackLightSet+0x140>)
 8004418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800441c:	611a      	str	r2, [r3, #16]
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	bd90      	pop	{r4, r7, pc}
 8004426:	bf00      	nop
 8004428:	66666666 	.word	0x66666666
 800442c:	40046666 	.word	0x40046666
 8004430:	40011000 	.word	0x40011000
 8004434:	40010c00 	.word	0x40010c00

08004438 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	4603      	mov	r3, r0
 8004440:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8004442:	79fb      	ldrb	r3, [r7, #7]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d177      	bne.n	8004538 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8004448:	4b80      	ldr	r3, [pc, #512]	; (800464c <LCD_Display_Dir+0x214>)
 800444a:	2200      	movs	r2, #0
 800444c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 800444e:	4b7f      	ldr	r3, [pc, #508]	; (800464c <LCD_Display_Dir+0x214>)
 8004450:	22f0      	movs	r2, #240	; 0xf0
 8004452:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8004454:	4b7d      	ldr	r3, [pc, #500]	; (800464c <LCD_Display_Dir+0x214>)
 8004456:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800445a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 800445c:	4b7b      	ldr	r3, [pc, #492]	; (800464c <LCD_Display_Dir+0x214>)
 800445e:	889b      	ldrh	r3, [r3, #4]
 8004460:	f249 3241 	movw	r2, #37697	; 0x9341
 8004464:	4293      	cmp	r3, r2
 8004466:	d00b      	beq.n	8004480 <LCD_Display_Dir+0x48>
 8004468:	4b78      	ldr	r3, [pc, #480]	; (800464c <LCD_Display_Dir+0x214>)
 800446a:	889b      	ldrh	r3, [r3, #4]
 800446c:	f646 0204 	movw	r2, #26628	; 0x6804
 8004470:	4293      	cmp	r3, r2
 8004472:	d005      	beq.n	8004480 <LCD_Display_Dir+0x48>
 8004474:	4b75      	ldr	r3, [pc, #468]	; (800464c <LCD_Display_Dir+0x214>)
 8004476:	889b      	ldrh	r3, [r3, #4]
 8004478:	f245 3210 	movw	r2, #21264	; 0x5310
 800447c:	4293      	cmp	r3, r2
 800447e:	d11e      	bne.n	80044be <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8004480:	4b72      	ldr	r3, [pc, #456]	; (800464c <LCD_Display_Dir+0x214>)
 8004482:	222c      	movs	r2, #44	; 0x2c
 8004484:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8004486:	4b71      	ldr	r3, [pc, #452]	; (800464c <LCD_Display_Dir+0x214>)
 8004488:	222a      	movs	r2, #42	; 0x2a
 800448a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 800448c:	4b6f      	ldr	r3, [pc, #444]	; (800464c <LCD_Display_Dir+0x214>)
 800448e:	222b      	movs	r2, #43	; 0x2b
 8004490:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8004492:	4b6e      	ldr	r3, [pc, #440]	; (800464c <LCD_Display_Dir+0x214>)
 8004494:	889b      	ldrh	r3, [r3, #4]
 8004496:	f646 0204 	movw	r2, #26628	; 0x6804
 800449a:	4293      	cmp	r3, r2
 800449c:	d006      	beq.n	80044ac <LCD_Display_Dir+0x74>
 800449e:	4b6b      	ldr	r3, [pc, #428]	; (800464c <LCD_Display_Dir+0x214>)
 80044a0:	889b      	ldrh	r3, [r3, #4]
 80044a2:	f245 3210 	movw	r2, #21264	; 0x5310
 80044a6:	4293      	cmp	r3, r2
 80044a8:	f040 80c7 	bne.w	800463a <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 80044ac:	4b67      	ldr	r3, [pc, #412]	; (800464c <LCD_Display_Dir+0x214>)
 80044ae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80044b2:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 80044b4:	4b65      	ldr	r3, [pc, #404]	; (800464c <LCD_Display_Dir+0x214>)
 80044b6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80044ba:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 80044bc:	e0bd      	b.n	800463a <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 80044be:	4b63      	ldr	r3, [pc, #396]	; (800464c <LCD_Display_Dir+0x214>)
 80044c0:	889b      	ldrh	r3, [r3, #4]
 80044c2:	f245 5210 	movw	r2, #21776	; 0x5510
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d114      	bne.n	80044f4 <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 80044ca:	4b60      	ldr	r3, [pc, #384]	; (800464c <LCD_Display_Dir+0x214>)
 80044cc:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80044d0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 80044d2:	4b5e      	ldr	r3, [pc, #376]	; (800464c <LCD_Display_Dir+0x214>)
 80044d4:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80044d8:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 80044da:	4b5c      	ldr	r3, [pc, #368]	; (800464c <LCD_Display_Dir+0x214>)
 80044dc:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 80044e0:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 80044e2:	4b5a      	ldr	r3, [pc, #360]	; (800464c <LCD_Display_Dir+0x214>)
 80044e4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80044e8:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 80044ea:	4b58      	ldr	r3, [pc, #352]	; (800464c <LCD_Display_Dir+0x214>)
 80044ec:	f44f 7248 	mov.w	r2, #800	; 0x320
 80044f0:	805a      	strh	r2, [r3, #2]
 80044f2:	e0a3      	b.n	800463c <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 80044f4:	4b55      	ldr	r3, [pc, #340]	; (800464c <LCD_Display_Dir+0x214>)
 80044f6:	889b      	ldrh	r3, [r3, #4]
 80044f8:	f641 1263 	movw	r2, #6499	; 0x1963
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d111      	bne.n	8004524 <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8004500:	4b52      	ldr	r3, [pc, #328]	; (800464c <LCD_Display_Dir+0x214>)
 8004502:	222c      	movs	r2, #44	; 0x2c
 8004504:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 8004506:	4b51      	ldr	r3, [pc, #324]	; (800464c <LCD_Display_Dir+0x214>)
 8004508:	222b      	movs	r2, #43	; 0x2b
 800450a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 800450c:	4b4f      	ldr	r3, [pc, #316]	; (800464c <LCD_Display_Dir+0x214>)
 800450e:	222a      	movs	r2, #42	; 0x2a
 8004510:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8004512:	4b4e      	ldr	r3, [pc, #312]	; (800464c <LCD_Display_Dir+0x214>)
 8004514:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004518:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 800451a:	4b4c      	ldr	r3, [pc, #304]	; (800464c <LCD_Display_Dir+0x214>)
 800451c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004520:	805a      	strh	r2, [r3, #2]
 8004522:	e08b      	b.n	800463c <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8004524:	4b49      	ldr	r3, [pc, #292]	; (800464c <LCD_Display_Dir+0x214>)
 8004526:	2222      	movs	r2, #34	; 0x22
 8004528:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 800452a:	4b48      	ldr	r3, [pc, #288]	; (800464c <LCD_Display_Dir+0x214>)
 800452c:	2220      	movs	r2, #32
 800452e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8004530:	4b46      	ldr	r3, [pc, #280]	; (800464c <LCD_Display_Dir+0x214>)
 8004532:	2221      	movs	r2, #33	; 0x21
 8004534:	819a      	strh	r2, [r3, #12]
 8004536:	e081      	b.n	800463c <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8004538:	4b44      	ldr	r3, [pc, #272]	; (800464c <LCD_Display_Dir+0x214>)
 800453a:	2201      	movs	r2, #1
 800453c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 800453e:	4b43      	ldr	r3, [pc, #268]	; (800464c <LCD_Display_Dir+0x214>)
 8004540:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004544:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8004546:	4b41      	ldr	r3, [pc, #260]	; (800464c <LCD_Display_Dir+0x214>)
 8004548:	22f0      	movs	r2, #240	; 0xf0
 800454a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 800454c:	4b3f      	ldr	r3, [pc, #252]	; (800464c <LCD_Display_Dir+0x214>)
 800454e:	889b      	ldrh	r3, [r3, #4]
 8004550:	f249 3241 	movw	r2, #37697	; 0x9341
 8004554:	4293      	cmp	r3, r2
 8004556:	d005      	beq.n	8004564 <LCD_Display_Dir+0x12c>
 8004558:	4b3c      	ldr	r3, [pc, #240]	; (800464c <LCD_Display_Dir+0x214>)
 800455a:	889b      	ldrh	r3, [r3, #4]
 800455c:	f245 3210 	movw	r2, #21264	; 0x5310
 8004560:	4293      	cmp	r3, r2
 8004562:	d109      	bne.n	8004578 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 8004564:	4b39      	ldr	r3, [pc, #228]	; (800464c <LCD_Display_Dir+0x214>)
 8004566:	222c      	movs	r2, #44	; 0x2c
 8004568:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 800456a:	4b38      	ldr	r3, [pc, #224]	; (800464c <LCD_Display_Dir+0x214>)
 800456c:	222a      	movs	r2, #42	; 0x2a
 800456e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8004570:	4b36      	ldr	r3, [pc, #216]	; (800464c <LCD_Display_Dir+0x214>)
 8004572:	222b      	movs	r2, #43	; 0x2b
 8004574:	819a      	strh	r2, [r3, #12]
 8004576:	e04b      	b.n	8004610 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8004578:	4b34      	ldr	r3, [pc, #208]	; (800464c <LCD_Display_Dir+0x214>)
 800457a:	889b      	ldrh	r3, [r3, #4]
 800457c:	f646 0204 	movw	r2, #26628	; 0x6804
 8004580:	4293      	cmp	r3, r2
 8004582:	d109      	bne.n	8004598 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8004584:	4b31      	ldr	r3, [pc, #196]	; (800464c <LCD_Display_Dir+0x214>)
 8004586:	222c      	movs	r2, #44	; 0x2c
 8004588:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 800458a:	4b30      	ldr	r3, [pc, #192]	; (800464c <LCD_Display_Dir+0x214>)
 800458c:	222b      	movs	r2, #43	; 0x2b
 800458e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8004590:	4b2e      	ldr	r3, [pc, #184]	; (800464c <LCD_Display_Dir+0x214>)
 8004592:	222a      	movs	r2, #42	; 0x2a
 8004594:	819a      	strh	r2, [r3, #12]
 8004596:	e03b      	b.n	8004610 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8004598:	4b2c      	ldr	r3, [pc, #176]	; (800464c <LCD_Display_Dir+0x214>)
 800459a:	889b      	ldrh	r3, [r3, #4]
 800459c:	f245 5210 	movw	r2, #21776	; 0x5510
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d114      	bne.n	80045ce <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 80045a4:	4b29      	ldr	r3, [pc, #164]	; (800464c <LCD_Display_Dir+0x214>)
 80045a6:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80045aa:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 80045ac:	4b27      	ldr	r3, [pc, #156]	; (800464c <LCD_Display_Dir+0x214>)
 80045ae:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80045b2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 80045b4:	4b25      	ldr	r3, [pc, #148]	; (800464c <LCD_Display_Dir+0x214>)
 80045b6:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 80045ba:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 80045bc:	4b23      	ldr	r3, [pc, #140]	; (800464c <LCD_Display_Dir+0x214>)
 80045be:	f44f 7248 	mov.w	r2, #800	; 0x320
 80045c2:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 80045c4:	4b21      	ldr	r3, [pc, #132]	; (800464c <LCD_Display_Dir+0x214>)
 80045c6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80045ca:	805a      	strh	r2, [r3, #2]
 80045cc:	e020      	b.n	8004610 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 80045ce:	4b1f      	ldr	r3, [pc, #124]	; (800464c <LCD_Display_Dir+0x214>)
 80045d0:	889b      	ldrh	r3, [r3, #4]
 80045d2:	f641 1263 	movw	r2, #6499	; 0x1963
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d111      	bne.n	80045fe <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 80045da:	4b1c      	ldr	r3, [pc, #112]	; (800464c <LCD_Display_Dir+0x214>)
 80045dc:	222c      	movs	r2, #44	; 0x2c
 80045de:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 80045e0:	4b1a      	ldr	r3, [pc, #104]	; (800464c <LCD_Display_Dir+0x214>)
 80045e2:	222a      	movs	r2, #42	; 0x2a
 80045e4:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 80045e6:	4b19      	ldr	r3, [pc, #100]	; (800464c <LCD_Display_Dir+0x214>)
 80045e8:	222b      	movs	r2, #43	; 0x2b
 80045ea:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 80045ec:	4b17      	ldr	r3, [pc, #92]	; (800464c <LCD_Display_Dir+0x214>)
 80045ee:	f44f 7248 	mov.w	r2, #800	; 0x320
 80045f2:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 80045f4:	4b15      	ldr	r3, [pc, #84]	; (800464c <LCD_Display_Dir+0x214>)
 80045f6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80045fa:	805a      	strh	r2, [r3, #2]
 80045fc:	e008      	b.n	8004610 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 80045fe:	4b13      	ldr	r3, [pc, #76]	; (800464c <LCD_Display_Dir+0x214>)
 8004600:	2222      	movs	r2, #34	; 0x22
 8004602:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8004604:	4b11      	ldr	r3, [pc, #68]	; (800464c <LCD_Display_Dir+0x214>)
 8004606:	2221      	movs	r2, #33	; 0x21
 8004608:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 800460a:	4b10      	ldr	r3, [pc, #64]	; (800464c <LCD_Display_Dir+0x214>)
 800460c:	2220      	movs	r2, #32
 800460e:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8004610:	4b0e      	ldr	r3, [pc, #56]	; (800464c <LCD_Display_Dir+0x214>)
 8004612:	889b      	ldrh	r3, [r3, #4]
 8004614:	f646 0204 	movw	r2, #26628	; 0x6804
 8004618:	4293      	cmp	r3, r2
 800461a:	d005      	beq.n	8004628 <LCD_Display_Dir+0x1f0>
 800461c:	4b0b      	ldr	r3, [pc, #44]	; (800464c <LCD_Display_Dir+0x214>)
 800461e:	889b      	ldrh	r3, [r3, #4]
 8004620:	f245 3210 	movw	r2, #21264	; 0x5310
 8004624:	4293      	cmp	r3, r2
 8004626:	d109      	bne.n	800463c <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8004628:	4b08      	ldr	r3, [pc, #32]	; (800464c <LCD_Display_Dir+0x214>)
 800462a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800462e:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8004630:	4b06      	ldr	r3, [pc, #24]	; (800464c <LCD_Display_Dir+0x214>)
 8004632:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004636:	805a      	strh	r2, [r3, #2]
 8004638:	e000      	b.n	800463c <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 800463a:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 800463c:	2000      	movs	r0, #0
 800463e:	f7ff f8ad 	bl	800379c <LCD_Scan_Dir>
}
 8004642:	bf00      	nop
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	20000a30 	.word	0x20000a30

08004650 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8004656:	4b90      	ldr	r3, [pc, #576]	; (8004898 <LCD_Init+0x248>)
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	4a8f      	ldr	r2, [pc, #572]	; (8004898 <LCD_Init+0x248>)
 800465c:	f043 0308 	orr.w	r3, r3, #8
 8004660:	6193      	str	r3, [r2, #24]
 8004662:	4b8d      	ldr	r3, [pc, #564]	; (8004898 <LCD_Init+0x248>)
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	f003 0308 	and.w	r3, r3, #8
 800466a:	607b      	str	r3, [r7, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 800466e:	4b8a      	ldr	r3, [pc, #552]	; (8004898 <LCD_Init+0x248>)
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	4a89      	ldr	r2, [pc, #548]	; (8004898 <LCD_Init+0x248>)
 8004674:	f043 0310 	orr.w	r3, r3, #16
 8004678:	6193      	str	r3, [r2, #24]
 800467a:	4b87      	ldr	r3, [pc, #540]	; (8004898 <LCD_Init+0x248>)
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	f003 0310 	and.w	r3, r3, #16
 8004682:	603b      	str	r3, [r7, #0]
 8004684:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8004686:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800468a:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 800468c:	2301      	movs	r3, #1
 800468e:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8004690:	2301      	movs	r3, #1
 8004692:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8004694:	2303      	movs	r3, #3
 8004696:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8004698:	f107 0308 	add.w	r3, r7, #8
 800469c:	4619      	mov	r1, r3
 800469e:	487f      	ldr	r0, [pc, #508]	; (800489c <LCD_Init+0x24c>)
 80046a0:	f7fc ff2a 	bl	80014f8 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 80046a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046a8:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 80046aa:	f107 0308 	add.w	r3, r7, #8
 80046ae:	4619      	mov	r1, r3
 80046b0:	487b      	ldr	r0, [pc, #492]	; (80048a0 <LCD_Init+0x250>)
 80046b2:	f7fc ff21 	bl	80014f8 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 80046b6:	2032      	movs	r0, #50	; 0x32
 80046b8:	f7fc fdee 	bl	8001298 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 80046bc:	2101      	movs	r1, #1
 80046be:	2000      	movs	r0, #0
 80046c0:	f7fe fd5a 	bl	8003178 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 80046c4:	2032      	movs	r0, #50	; 0x32
 80046c6:	f7fc fde7 	bl	8001298 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 80046ca:	2000      	movs	r0, #0
 80046cc:	f7fe fd7e 	bl	80031cc <LCD_ReadReg>
 80046d0:	4603      	mov	r3, r0
 80046d2:	461a      	mov	r2, r3
 80046d4:	4b73      	ldr	r3, [pc, #460]	; (80048a4 <LCD_Init+0x254>)
 80046d6:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 80046d8:	4b72      	ldr	r3, [pc, #456]	; (80048a4 <LCD_Init+0x254>)
 80046da:	889b      	ldrh	r3, [r3, #4]
 80046dc:	2bfe      	cmp	r3, #254	; 0xfe
 80046de:	d90b      	bls.n	80046f8 <LCD_Init+0xa8>
 80046e0:	4b70      	ldr	r3, [pc, #448]	; (80048a4 <LCD_Init+0x254>)
 80046e2:	889b      	ldrh	r3, [r3, #4]
 80046e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d005      	beq.n	80046f8 <LCD_Init+0xa8>
 80046ec:	4b6d      	ldr	r3, [pc, #436]	; (80048a4 <LCD_Init+0x254>)
 80046ee:	889b      	ldrh	r3, [r3, #4]
 80046f0:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 80046f4:	f040 80c8 	bne.w	8004888 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 80046f8:	20d3      	movs	r0, #211	; 0xd3
 80046fa:	f7fe fcb1 	bl	8003060 <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 80046fe:	f7fe fcf7 	bl	80030f0 <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 8004702:	f7fe fcf5 	bl	80030f0 <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 8004706:	f7fe fcf3 	bl	80030f0 <LCD_RD_DATA>
 800470a:	4603      	mov	r3, r0
 800470c:	461a      	mov	r2, r3
 800470e:	4b65      	ldr	r3, [pc, #404]	; (80048a4 <LCD_Init+0x254>)
 8004710:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 8004712:	4b64      	ldr	r3, [pc, #400]	; (80048a4 <LCD_Init+0x254>)
 8004714:	889b      	ldrh	r3, [r3, #4]
 8004716:	021b      	lsls	r3, r3, #8
 8004718:	b29a      	uxth	r2, r3
 800471a:	4b62      	ldr	r3, [pc, #392]	; (80048a4 <LCD_Init+0x254>)
 800471c:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 800471e:	f7fe fce7 	bl	80030f0 <LCD_RD_DATA>
 8004722:	4603      	mov	r3, r0
 8004724:	461a      	mov	r2, r3
 8004726:	4b5f      	ldr	r3, [pc, #380]	; (80048a4 <LCD_Init+0x254>)
 8004728:	889b      	ldrh	r3, [r3, #4]
 800472a:	4313      	orrs	r3, r2
 800472c:	b29a      	uxth	r2, r3
 800472e:	4b5d      	ldr	r3, [pc, #372]	; (80048a4 <LCD_Init+0x254>)
 8004730:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 8004732:	4b5c      	ldr	r3, [pc, #368]	; (80048a4 <LCD_Init+0x254>)
 8004734:	889b      	ldrh	r3, [r3, #4]
 8004736:	f249 3241 	movw	r2, #37697	; 0x9341
 800473a:	4293      	cmp	r3, r2
 800473c:	f000 80a4 	beq.w	8004888 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8004740:	20bf      	movs	r0, #191	; 0xbf
 8004742:	f7fe fc8d 	bl	8003060 <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 8004746:	f7fe fcd3 	bl	80030f0 <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 800474a:	f7fe fcd1 	bl	80030f0 <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 800474e:	f7fe fccf 	bl	80030f0 <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 8004752:	f7fe fccd 	bl	80030f0 <LCD_RD_DATA>
 8004756:	4603      	mov	r3, r0
 8004758:	461a      	mov	r2, r3
 800475a:	4b52      	ldr	r3, [pc, #328]	; (80048a4 <LCD_Init+0x254>)
 800475c:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 800475e:	4b51      	ldr	r3, [pc, #324]	; (80048a4 <LCD_Init+0x254>)
 8004760:	889b      	ldrh	r3, [r3, #4]
 8004762:	021b      	lsls	r3, r3, #8
 8004764:	b29a      	uxth	r2, r3
 8004766:	4b4f      	ldr	r3, [pc, #316]	; (80048a4 <LCD_Init+0x254>)
 8004768:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 800476a:	f7fe fcc1 	bl	80030f0 <LCD_RD_DATA>
 800476e:	4603      	mov	r3, r0
 8004770:	461a      	mov	r2, r3
 8004772:	4b4c      	ldr	r3, [pc, #304]	; (80048a4 <LCD_Init+0x254>)
 8004774:	889b      	ldrh	r3, [r3, #4]
 8004776:	4313      	orrs	r3, r2
 8004778:	b29a      	uxth	r2, r3
 800477a:	4b4a      	ldr	r3, [pc, #296]	; (80048a4 <LCD_Init+0x254>)
 800477c:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 800477e:	4b49      	ldr	r3, [pc, #292]	; (80048a4 <LCD_Init+0x254>)
 8004780:	889b      	ldrh	r3, [r3, #4]
 8004782:	f646 0204 	movw	r2, #26628	; 0x6804
 8004786:	4293      	cmp	r3, r2
 8004788:	d07e      	beq.n	8004888 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 800478a:	20d4      	movs	r0, #212	; 0xd4
 800478c:	f7fe fc68 	bl	8003060 <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 8004790:	f7fe fcae 	bl	80030f0 <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 8004794:	f7fe fcac 	bl	80030f0 <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 8004798:	f7fe fcaa 	bl	80030f0 <LCD_RD_DATA>
 800479c:	4603      	mov	r3, r0
 800479e:	461a      	mov	r2, r3
 80047a0:	4b40      	ldr	r3, [pc, #256]	; (80048a4 <LCD_Init+0x254>)
 80047a2:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 80047a4:	4b3f      	ldr	r3, [pc, #252]	; (80048a4 <LCD_Init+0x254>)
 80047a6:	889b      	ldrh	r3, [r3, #4]
 80047a8:	021b      	lsls	r3, r3, #8
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	4b3d      	ldr	r3, [pc, #244]	; (80048a4 <LCD_Init+0x254>)
 80047ae:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 80047b0:	f7fe fc9e 	bl	80030f0 <LCD_RD_DATA>
 80047b4:	4603      	mov	r3, r0
 80047b6:	461a      	mov	r2, r3
 80047b8:	4b3a      	ldr	r3, [pc, #232]	; (80048a4 <LCD_Init+0x254>)
 80047ba:	889b      	ldrh	r3, [r3, #4]
 80047bc:	4313      	orrs	r3, r2
 80047be:	b29a      	uxth	r2, r3
 80047c0:	4b38      	ldr	r3, [pc, #224]	; (80048a4 <LCD_Init+0x254>)
 80047c2:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 80047c4:	4b37      	ldr	r3, [pc, #220]	; (80048a4 <LCD_Init+0x254>)
 80047c6:	889b      	ldrh	r3, [r3, #4]
 80047c8:	f245 3210 	movw	r2, #21264	; 0x5310
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d05b      	beq.n	8004888 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 80047d0:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 80047d4:	f7fe fc44 	bl	8003060 <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 80047d8:	f7fe fc8a 	bl	80030f0 <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 80047dc:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 80047e0:	f7fe fc3e 	bl	8003060 <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 80047e4:	f7fe fc84 	bl	80030f0 <LCD_RD_DATA>
 80047e8:	4603      	mov	r3, r0
 80047ea:	461a      	mov	r2, r3
 80047ec:	4b2d      	ldr	r3, [pc, #180]	; (80048a4 <LCD_Init+0x254>)
 80047ee:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 80047f0:	4b2c      	ldr	r3, [pc, #176]	; (80048a4 <LCD_Init+0x254>)
 80047f2:	889b      	ldrh	r3, [r3, #4]
 80047f4:	021b      	lsls	r3, r3, #8
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	4b2a      	ldr	r3, [pc, #168]	; (80048a4 <LCD_Init+0x254>)
 80047fa:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 80047fc:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8004800:	f7fe fc2e 	bl	8003060 <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 8004804:	f7fe fc74 	bl	80030f0 <LCD_RD_DATA>
 8004808:	4603      	mov	r3, r0
 800480a:	461a      	mov	r2, r3
 800480c:	4b25      	ldr	r3, [pc, #148]	; (80048a4 <LCD_Init+0x254>)
 800480e:	889b      	ldrh	r3, [r3, #4]
 8004810:	4313      	orrs	r3, r2
 8004812:	b29a      	uxth	r2, r3
 8004814:	4b23      	ldr	r3, [pc, #140]	; (80048a4 <LCD_Init+0x254>)
 8004816:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8004818:	4b22      	ldr	r3, [pc, #136]	; (80048a4 <LCD_Init+0x254>)
 800481a:	889b      	ldrh	r3, [r3, #4]
 800481c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004820:	d103      	bne.n	800482a <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8004822:	4b20      	ldr	r3, [pc, #128]	; (80048a4 <LCD_Init+0x254>)
 8004824:	f245 5210 	movw	r2, #21776	; 0x5510
 8004828:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 800482a:	4b1e      	ldr	r3, [pc, #120]	; (80048a4 <LCD_Init+0x254>)
 800482c:	889b      	ldrh	r3, [r3, #4]
 800482e:	f245 5210 	movw	r2, #21776	; 0x5510
 8004832:	4293      	cmp	r3, r2
 8004834:	d028      	beq.n	8004888 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 8004836:	20a1      	movs	r0, #161	; 0xa1
 8004838:	f7fe fc12 	bl	8003060 <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 800483c:	f7fe fc58 	bl	80030f0 <LCD_RD_DATA>
 8004840:	4603      	mov	r3, r0
 8004842:	461a      	mov	r2, r3
 8004844:	4b17      	ldr	r3, [pc, #92]	; (80048a4 <LCD_Init+0x254>)
 8004846:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8004848:	f7fe fc52 	bl	80030f0 <LCD_RD_DATA>
 800484c:	4603      	mov	r3, r0
 800484e:	461a      	mov	r2, r3
 8004850:	4b14      	ldr	r3, [pc, #80]	; (80048a4 <LCD_Init+0x254>)
 8004852:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 8004854:	4b13      	ldr	r3, [pc, #76]	; (80048a4 <LCD_Init+0x254>)
 8004856:	889b      	ldrh	r3, [r3, #4]
 8004858:	021b      	lsls	r3, r3, #8
 800485a:	b29a      	uxth	r2, r3
 800485c:	4b11      	ldr	r3, [pc, #68]	; (80048a4 <LCD_Init+0x254>)
 800485e:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8004860:	f7fe fc46 	bl	80030f0 <LCD_RD_DATA>
 8004864:	4603      	mov	r3, r0
 8004866:	461a      	mov	r2, r3
 8004868:	4b0e      	ldr	r3, [pc, #56]	; (80048a4 <LCD_Init+0x254>)
 800486a:	889b      	ldrh	r3, [r3, #4]
 800486c:	4313      	orrs	r3, r2
 800486e:	b29a      	uxth	r2, r3
 8004870:	4b0c      	ldr	r3, [pc, #48]	; (80048a4 <LCD_Init+0x254>)
 8004872:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 8004874:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <LCD_Init+0x254>)
 8004876:	889b      	ldrh	r3, [r3, #4]
 8004878:	f245 7261 	movw	r2, #22369	; 0x5761
 800487c:	4293      	cmp	r3, r2
 800487e:	d103      	bne.n	8004888 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8004880:	4b08      	ldr	r3, [pc, #32]	; (80048a4 <LCD_Init+0x254>)
 8004882:	f641 1263 	movw	r2, #6499	; 0x1963
 8004886:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 8004888:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <LCD_Init+0x254>)
 800488a:	889b      	ldrh	r3, [r3, #4]
 800488c:	f249 3241 	movw	r2, #37697	; 0x9341
 8004890:	4293      	cmp	r3, r2
 8004892:	f040 811f 	bne.w	8004ad4 <LCD_Init+0x484>
 8004896:	e007      	b.n	80048a8 <LCD_Init+0x258>
 8004898:	40021000 	.word	0x40021000
 800489c:	40011000 	.word	0x40011000
 80048a0:	40010c00 	.word	0x40010c00
 80048a4:	20000a30 	.word	0x20000a30
			{
		LCD_WR_REG(0xCF);
 80048a8:	20cf      	movs	r0, #207	; 0xcf
 80048aa:	f7fe fbd9 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80048ae:	2000      	movs	r0, #0
 80048b0:	f7fe fbfa 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 80048b4:	20c1      	movs	r0, #193	; 0xc1
 80048b6:	f7fe fbf7 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 80048ba:	2030      	movs	r0, #48	; 0x30
 80048bc:	f7fe fbf4 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 80048c0:	20ed      	movs	r0, #237	; 0xed
 80048c2:	f7fe fbcd 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 80048c6:	2064      	movs	r0, #100	; 0x64
 80048c8:	f7fe fbee 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80048cc:	2003      	movs	r0, #3
 80048ce:	f7fe fbeb 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 80048d2:	2012      	movs	r0, #18
 80048d4:	f7fe fbe8 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 80048d8:	2081      	movs	r0, #129	; 0x81
 80048da:	f7fe fbe5 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 80048de:	20e8      	movs	r0, #232	; 0xe8
 80048e0:	f7fe fbbe 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 80048e4:	2085      	movs	r0, #133	; 0x85
 80048e6:	f7fe fbdf 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80048ea:	2010      	movs	r0, #16
 80048ec:	f7fe fbdc 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 80048f0:	207a      	movs	r0, #122	; 0x7a
 80048f2:	f7fe fbd9 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 80048f6:	20cb      	movs	r0, #203	; 0xcb
 80048f8:	f7fe fbb2 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 80048fc:	2039      	movs	r0, #57	; 0x39
 80048fe:	f7fe fbd3 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8004902:	202c      	movs	r0, #44	; 0x2c
 8004904:	f7fe fbd0 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004908:	2000      	movs	r0, #0
 800490a:	f7fe fbcd 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 800490e:	2034      	movs	r0, #52	; 0x34
 8004910:	f7fe fbca 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8004914:	2002      	movs	r0, #2
 8004916:	f7fe fbc7 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 800491a:	20f7      	movs	r0, #247	; 0xf7
 800491c:	f7fe fba0 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8004920:	2020      	movs	r0, #32
 8004922:	f7fe fbc1 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 8004926:	20ea      	movs	r0, #234	; 0xea
 8004928:	f7fe fb9a 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800492c:	2000      	movs	r0, #0
 800492e:	f7fe fbbb 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004932:	2000      	movs	r0, #0
 8004934:	f7fe fbb8 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8004938:	20c0      	movs	r0, #192	; 0xc0
 800493a:	f7fe fb91 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 800493e:	201b      	movs	r0, #27
 8004940:	f7fe fbb2 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 8004944:	20c1      	movs	r0, #193	; 0xc1
 8004946:	f7fe fb8b 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 800494a:	2001      	movs	r0, #1
 800494c:	f7fe fbac 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8004950:	20c5      	movs	r0, #197	; 0xc5
 8004952:	f7fe fb85 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 8004956:	2030      	movs	r0, #48	; 0x30
 8004958:	f7fe fba6 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 800495c:	2030      	movs	r0, #48	; 0x30
 800495e:	f7fe fba3 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 8004962:	20c7      	movs	r0, #199	; 0xc7
 8004964:	f7fe fb7c 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8004968:	20b7      	movs	r0, #183	; 0xb7
 800496a:	f7fe fb9d 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 800496e:	2036      	movs	r0, #54	; 0x36
 8004970:	f7fe fb76 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 8004974:	2048      	movs	r0, #72	; 0x48
 8004976:	f7fe fb97 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 800497a:	203a      	movs	r0, #58	; 0x3a
 800497c:	f7fe fb70 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8004980:	2055      	movs	r0, #85	; 0x55
 8004982:	f7fe fb91 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 8004986:	20b1      	movs	r0, #177	; 0xb1
 8004988:	f7fe fb6a 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800498c:	2000      	movs	r0, #0
 800498e:	f7fe fb8b 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 8004992:	201a      	movs	r0, #26
 8004994:	f7fe fb88 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 8004998:	20b6      	movs	r0, #182	; 0xb6
 800499a:	f7fe fb61 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 800499e:	200a      	movs	r0, #10
 80049a0:	f7fe fb82 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80049a4:	20a2      	movs	r0, #162	; 0xa2
 80049a6:	f7fe fb7f 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 80049aa:	20f2      	movs	r0, #242	; 0xf2
 80049ac:	f7fe fb58 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80049b0:	2000      	movs	r0, #0
 80049b2:	f7fe fb79 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 80049b6:	2026      	movs	r0, #38	; 0x26
 80049b8:	f7fe fb52 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80049bc:	2001      	movs	r0, #1
 80049be:	f7fe fb73 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 80049c2:	20e0      	movs	r0, #224	; 0xe0
 80049c4:	f7fe fb4c 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 80049c8:	200f      	movs	r0, #15
 80049ca:	f7fe fb6d 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 80049ce:	202a      	movs	r0, #42	; 0x2a
 80049d0:	f7fe fb6a 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 80049d4:	2028      	movs	r0, #40	; 0x28
 80049d6:	f7fe fb67 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80049da:	2008      	movs	r0, #8
 80049dc:	f7fe fb64 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 80049e0:	200e      	movs	r0, #14
 80049e2:	f7fe fb61 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80049e6:	2008      	movs	r0, #8
 80049e8:	f7fe fb5e 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 80049ec:	2054      	movs	r0, #84	; 0x54
 80049ee:	f7fe fb5b 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 80049f2:	20a9      	movs	r0, #169	; 0xa9
 80049f4:	f7fe fb58 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 80049f8:	2043      	movs	r0, #67	; 0x43
 80049fa:	f7fe fb55 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 80049fe:	200a      	movs	r0, #10
 8004a00:	f7fe fb52 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8004a04:	200f      	movs	r0, #15
 8004a06:	f7fe fb4f 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	f7fe fb4c 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a10:	2000      	movs	r0, #0
 8004a12:	f7fe fb49 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a16:	2000      	movs	r0, #0
 8004a18:	f7fe fb46 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	f7fe fb43 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 8004a22:	20e1      	movs	r0, #225	; 0xe1
 8004a24:	f7fe fb1c 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004a28:	2000      	movs	r0, #0
 8004a2a:	f7fe fb3d 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 8004a2e:	2015      	movs	r0, #21
 8004a30:	f7fe fb3a 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8004a34:	2017      	movs	r0, #23
 8004a36:	f7fe fb37 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 8004a3a:	2007      	movs	r0, #7
 8004a3c:	f7fe fb34 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8004a40:	2011      	movs	r0, #17
 8004a42:	f7fe fb31 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 8004a46:	2006      	movs	r0, #6
 8004a48:	f7fe fb2e 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 8004a4c:	202b      	movs	r0, #43	; 0x2b
 8004a4e:	f7fe fb2b 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8004a52:	2056      	movs	r0, #86	; 0x56
 8004a54:	f7fe fb28 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8004a58:	203c      	movs	r0, #60	; 0x3c
 8004a5a:	f7fe fb25 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8004a5e:	2005      	movs	r0, #5
 8004a60:	f7fe fb22 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8004a64:	2010      	movs	r0, #16
 8004a66:	f7fe fb1f 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8004a6a:	200f      	movs	r0, #15
 8004a6c:	f7fe fb1c 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8004a70:	203f      	movs	r0, #63	; 0x3f
 8004a72:	f7fe fb19 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8004a76:	203f      	movs	r0, #63	; 0x3f
 8004a78:	f7fe fb16 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8004a7c:	200f      	movs	r0, #15
 8004a7e:	f7fe fb13 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 8004a82:	202b      	movs	r0, #43	; 0x2b
 8004a84:	f7fe faec 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004a88:	2000      	movs	r0, #0
 8004a8a:	f7fe fb0d 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a8e:	2000      	movs	r0, #0
 8004a90:	f7fe fb0a 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8004a94:	2001      	movs	r0, #1
 8004a96:	f7fe fb07 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 8004a9a:	203f      	movs	r0, #63	; 0x3f
 8004a9c:	f7fe fb04 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 8004aa0:	202a      	movs	r0, #42	; 0x2a
 8004aa2:	f7fe fadd 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	f7fe fafe 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004aac:	2000      	movs	r0, #0
 8004aae:	f7fe fafb 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	f7fe faf8 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 8004ab8:	20ef      	movs	r0, #239	; 0xef
 8004aba:	f7fe faf5 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 8004abe:	2011      	movs	r0, #17
 8004ac0:	f7fe face 	bl	8003060 <LCD_WR_REG>
		HAL_Delay(120);
 8004ac4:	2078      	movs	r0, #120	; 0x78
 8004ac6:	f7fc fbe7 	bl	8001298 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 8004aca:	2029      	movs	r0, #41	; 0x29
 8004acc:	f7fe fac8 	bl	8003060 <LCD_WR_REG>
 8004ad0:	f003 bcd8 	b.w	8008484 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 8004ad4:	4b58      	ldr	r3, [pc, #352]	; (8004c38 <LCD_Init+0x5e8>)
 8004ad6:	889b      	ldrh	r3, [r3, #4]
 8004ad8:	f646 0204 	movw	r2, #26628	; 0x6804
 8004adc:	4293      	cmp	r3, r2
 8004ade:	f040 80ad 	bne.w	8004c3c <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 8004ae2:	2011      	movs	r0, #17
 8004ae4:	f7fe fabc 	bl	8003060 <LCD_WR_REG>
		HAL_Delay(20);
 8004ae8:	2014      	movs	r0, #20
 8004aea:	f7fc fbd5 	bl	8001298 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8004aee:	20d0      	movs	r0, #208	; 0xd0
 8004af0:	f7fe fab6 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 8004af4:	2007      	movs	r0, #7
 8004af6:	f7fe fad7 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 8004afa:	2042      	movs	r0, #66	; 0x42
 8004afc:	f7fe fad4 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8004b00:	201d      	movs	r0, #29
 8004b02:	f7fe fad1 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 8004b06:	20d1      	movs	r0, #209	; 0xd1
 8004b08:	f7fe faaa 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	f7fe facb 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 8004b12:	201a      	movs	r0, #26
 8004b14:	f7fe fac8 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8004b18:	2009      	movs	r0, #9
 8004b1a:	f7fe fac5 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8004b1e:	20d2      	movs	r0, #210	; 0xd2
 8004b20:	f7fe fa9e 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8004b24:	2001      	movs	r0, #1
 8004b26:	f7fe fabf 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 8004b2a:	2022      	movs	r0, #34	; 0x22
 8004b2c:	f7fe fabc 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8004b30:	20c0      	movs	r0, #192	; 0xc0
 8004b32:	f7fe fa95 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 8004b36:	2010      	movs	r0, #16
 8004b38:	f7fe fab6 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 8004b3c:	203b      	movs	r0, #59	; 0x3b
 8004b3e:	f7fe fab3 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8004b42:	2000      	movs	r0, #0
 8004b44:	f7fe fab0 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8004b48:	2002      	movs	r0, #2
 8004b4a:	f7fe faad 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 8004b4e:	2011      	movs	r0, #17
 8004b50:	f7fe faaa 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 8004b54:	20c5      	movs	r0, #197	; 0xc5
 8004b56:	f7fe fa83 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 8004b5a:	2003      	movs	r0, #3
 8004b5c:	f7fe faa4 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8004b60:	20c8      	movs	r0, #200	; 0xc8
 8004b62:	f7fe fa7d 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8004b66:	2000      	movs	r0, #0
 8004b68:	f7fe fa9e 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8004b6c:	2025      	movs	r0, #37	; 0x25
 8004b6e:	f7fe fa9b 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 8004b72:	2021      	movs	r0, #33	; 0x21
 8004b74:	f7fe fa98 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8004b78:	2005      	movs	r0, #5
 8004b7a:	f7fe fa95 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8004b7e:	2000      	movs	r0, #0
 8004b80:	f7fe fa92 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 8004b84:	200a      	movs	r0, #10
 8004b86:	f7fe fa8f 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 8004b8a:	2065      	movs	r0, #101	; 0x65
 8004b8c:	f7fe fa8c 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8004b90:	2025      	movs	r0, #37	; 0x25
 8004b92:	f7fe fa89 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 8004b96:	2077      	movs	r0, #119	; 0x77
 8004b98:	f7fe fa86 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 8004b9c:	2050      	movs	r0, #80	; 0x50
 8004b9e:	f7fe fa83 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 8004ba2:	200f      	movs	r0, #15
 8004ba4:	f7fe fa80 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8004ba8:	2000      	movs	r0, #0
 8004baa:	f7fe fa7d 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 8004bae:	20f8      	movs	r0, #248	; 0xf8
 8004bb0:	f7fe fa56 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8004bb4:	2001      	movs	r0, #1
 8004bb6:	f7fe fa77 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 8004bba:	20fe      	movs	r0, #254	; 0xfe
 8004bbc:	f7fe fa50 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	f7fe fa71 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8004bc6:	2002      	movs	r0, #2
 8004bc8:	f7fe fa6e 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 8004bcc:	2020      	movs	r0, #32
 8004bce:	f7fe fa47 	bl	8003060 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 8004bd2:	2036      	movs	r0, #54	; 0x36
 8004bd4:	f7fe fa44 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8004bd8:	2008      	movs	r0, #8
 8004bda:	f7fe fa65 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 8004bde:	203a      	movs	r0, #58	; 0x3a
 8004be0:	f7fe fa3e 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 8004be4:	2055      	movs	r0, #85	; 0x55
 8004be6:	f7fe fa5f 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 8004bea:	202b      	movs	r0, #43	; 0x2b
 8004bec:	f7fe fa38 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	f7fe fa59 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8004bf6:	2000      	movs	r0, #0
 8004bf8:	f7fe fa56 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8004bfc:	2001      	movs	r0, #1
 8004bfe:	f7fe fa53 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 8004c02:	203f      	movs	r0, #63	; 0x3f
 8004c04:	f7fe fa50 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8004c08:	202a      	movs	r0, #42	; 0x2a
 8004c0a:	f7fe fa29 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8004c0e:	2000      	movs	r0, #0
 8004c10:	f7fe fa4a 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8004c14:	2000      	movs	r0, #0
 8004c16:	f7fe fa47 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8004c1a:	2001      	movs	r0, #1
 8004c1c:	f7fe fa44 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8004c20:	20df      	movs	r0, #223	; 0xdf
 8004c22:	f7fe fa41 	bl	80030a8 <LCD_WR_DATAX>
		HAL_Delay(120);
 8004c26:	2078      	movs	r0, #120	; 0x78
 8004c28:	f7fc fb36 	bl	8001298 <HAL_Delay>
		LCD_WR_REG(0X29);
 8004c2c:	2029      	movs	r0, #41	; 0x29
 8004c2e:	f7fe fa17 	bl	8003060 <LCD_WR_REG>
 8004c32:	f003 bc27 	b.w	8008484 <LCD_Init+0x3e34>
 8004c36:	bf00      	nop
 8004c38:	20000a30 	.word	0x20000a30
	} else if (lcddev.id == 0x5310) {
 8004c3c:	4b03      	ldr	r3, [pc, #12]	; (8004c4c <LCD_Init+0x5fc>)
 8004c3e:	889b      	ldrh	r3, [r3, #4]
 8004c40:	f245 3210 	movw	r2, #21264	; 0x5310
 8004c44:	4293      	cmp	r3, r2
 8004c46:	f040 877c 	bne.w	8005b42 <LCD_Init+0x14f2>
 8004c4a:	e001      	b.n	8004c50 <LCD_Init+0x600>
 8004c4c:	20000a30 	.word	0x20000a30
		LCD_WR_REG(0xED);
 8004c50:	20ed      	movs	r0, #237	; 0xed
 8004c52:	f7fe fa05 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8004c56:	2001      	movs	r0, #1
 8004c58:	f7fe fa26 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 8004c5c:	20fe      	movs	r0, #254	; 0xfe
 8004c5e:	f7fe fa23 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 8004c62:	20ee      	movs	r0, #238	; 0xee
 8004c64:	f7fe f9fc 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8004c68:	20de      	movs	r0, #222	; 0xde
 8004c6a:	f7fe fa1d 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8004c6e:	2021      	movs	r0, #33	; 0x21
 8004c70:	f7fe fa1a 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 8004c74:	20f1      	movs	r0, #241	; 0xf1
 8004c76:	f7fe f9f3 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8004c7a:	2001      	movs	r0, #1
 8004c7c:	f7fe fa14 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 8004c80:	20df      	movs	r0, #223	; 0xdf
 8004c82:	f7fe f9ed 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 8004c86:	2010      	movs	r0, #16
 8004c88:	f7fe fa0e 	bl	80030a8 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 8004c8c:	20c4      	movs	r0, #196	; 0xc4
 8004c8e:	f7fe f9e7 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 8004c92:	208f      	movs	r0, #143	; 0x8f
 8004c94:	f7fe fa08 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8004c98:	20c6      	movs	r0, #198	; 0xc6
 8004c9a:	f7fe f9e1 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	f7fe fa02 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8004ca4:	20e2      	movs	r0, #226	; 0xe2
 8004ca6:	f7fe f9ff 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8004caa:	20e2      	movs	r0, #226	; 0xe2
 8004cac:	f7fe f9fc 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8004cb0:	20e2      	movs	r0, #226	; 0xe2
 8004cb2:	f7fe f9f9 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 8004cb6:	20bf      	movs	r0, #191	; 0xbf
 8004cb8:	f7fe f9d2 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8004cbc:	20aa      	movs	r0, #170	; 0xaa
 8004cbe:	f7fe f9f3 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 8004cc2:	20b0      	movs	r0, #176	; 0xb0
 8004cc4:	f7fe f9cc 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 8004cc8:	200d      	movs	r0, #13
 8004cca:	f7fe f9ed 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cce:	2000      	movs	r0, #0
 8004cd0:	f7fe f9ea 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 8004cd4:	200d      	movs	r0, #13
 8004cd6:	f7fe f9e7 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cda:	2000      	movs	r0, #0
 8004cdc:	f7fe f9e4 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8004ce0:	2011      	movs	r0, #17
 8004ce2:	f7fe f9e1 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	f7fe f9de 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 8004cec:	2019      	movs	r0, #25
 8004cee:	f7fe f9db 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	f7fe f9d8 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8004cf8:	2021      	movs	r0, #33	; 0x21
 8004cfa:	f7fe f9d5 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cfe:	2000      	movs	r0, #0
 8004d00:	f7fe f9d2 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 8004d04:	202d      	movs	r0, #45	; 0x2d
 8004d06:	f7fe f9cf 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	f7fe f9cc 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8004d10:	203d      	movs	r0, #61	; 0x3d
 8004d12:	f7fe f9c9 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d16:	2000      	movs	r0, #0
 8004d18:	f7fe f9c6 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8004d1c:	205d      	movs	r0, #93	; 0x5d
 8004d1e:	f7fe f9c3 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d22:	2000      	movs	r0, #0
 8004d24:	f7fe f9c0 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8004d28:	205d      	movs	r0, #93	; 0x5d
 8004d2a:	f7fe f9bd 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d2e:	2000      	movs	r0, #0
 8004d30:	f7fe f9ba 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 8004d34:	20b1      	movs	r0, #177	; 0xb1
 8004d36:	f7fe f993 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 8004d3a:	2080      	movs	r0, #128	; 0x80
 8004d3c:	f7fe f9b4 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d40:	2000      	movs	r0, #0
 8004d42:	f7fe f9b1 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8004d46:	208b      	movs	r0, #139	; 0x8b
 8004d48:	f7fe f9ae 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	f7fe f9ab 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8004d52:	2096      	movs	r0, #150	; 0x96
 8004d54:	f7fe f9a8 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d58:	2000      	movs	r0, #0
 8004d5a:	f7fe f9a5 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 8004d5e:	20b2      	movs	r0, #178	; 0xb2
 8004d60:	f7fe f97e 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004d64:	2000      	movs	r0, #0
 8004d66:	f7fe f99f 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	f7fe f99c 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8004d70:	2002      	movs	r0, #2
 8004d72:	f7fe f999 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d76:	2000      	movs	r0, #0
 8004d78:	f7fe f996 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8004d7c:	2003      	movs	r0, #3
 8004d7e:	f7fe f993 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d82:	2000      	movs	r0, #0
 8004d84:	f7fe f990 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 8004d88:	20b3      	movs	r0, #179	; 0xb3
 8004d8a:	f7fe f969 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004d8e:	2000      	movs	r0, #0
 8004d90:	f7fe f98a 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d94:	2000      	movs	r0, #0
 8004d96:	f7fe f987 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	f7fe f984 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004da0:	2000      	movs	r0, #0
 8004da2:	f7fe f981 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004da6:	2000      	movs	r0, #0
 8004da8:	f7fe f97e 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dac:	2000      	movs	r0, #0
 8004dae:	f7fe f97b 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004db2:	2000      	movs	r0, #0
 8004db4:	f7fe f978 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004db8:	2000      	movs	r0, #0
 8004dba:	f7fe f975 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	f7fe f972 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	f7fe f96f 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dca:	2000      	movs	r0, #0
 8004dcc:	f7fe f96c 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	f7fe f969 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	f7fe f966 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ddc:	2000      	movs	r0, #0
 8004dde:	f7fe f963 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004de2:	2000      	movs	r0, #0
 8004de4:	f7fe f960 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004de8:	2000      	movs	r0, #0
 8004dea:	f7fe f95d 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dee:	2000      	movs	r0, #0
 8004df0:	f7fe f95a 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004df4:	2000      	movs	r0, #0
 8004df6:	f7fe f957 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	f7fe f954 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e00:	2000      	movs	r0, #0
 8004e02:	f7fe f951 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e06:	2000      	movs	r0, #0
 8004e08:	f7fe f94e 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e0c:	2000      	movs	r0, #0
 8004e0e:	f7fe f94b 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e12:	2000      	movs	r0, #0
 8004e14:	f7fe f948 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e18:	2000      	movs	r0, #0
 8004e1a:	f7fe f945 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 8004e1e:	20b4      	movs	r0, #180	; 0xb4
 8004e20:	f7fe f91e 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 8004e24:	208b      	movs	r0, #139	; 0x8b
 8004e26:	f7fe f93f 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e2a:	2000      	movs	r0, #0
 8004e2c:	f7fe f93c 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8004e30:	2096      	movs	r0, #150	; 0x96
 8004e32:	f7fe f939 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e36:	2000      	movs	r0, #0
 8004e38:	f7fe f936 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 8004e3c:	20a1      	movs	r0, #161	; 0xa1
 8004e3e:	f7fe f933 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e42:	2000      	movs	r0, #0
 8004e44:	f7fe f930 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8004e48:	20b5      	movs	r0, #181	; 0xb5
 8004e4a:	f7fe f909 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 8004e4e:	2002      	movs	r0, #2
 8004e50:	f7fe f92a 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e54:	2000      	movs	r0, #0
 8004e56:	f7fe f927 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8004e5a:	2003      	movs	r0, #3
 8004e5c:	f7fe f924 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e60:	2000      	movs	r0, #0
 8004e62:	f7fe f921 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8004e66:	2004      	movs	r0, #4
 8004e68:	f7fe f91e 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	f7fe f91b 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 8004e72:	20b6      	movs	r0, #182	; 0xb6
 8004e74:	f7fe f8f4 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004e78:	2000      	movs	r0, #0
 8004e7a:	f7fe f915 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e7e:	2000      	movs	r0, #0
 8004e80:	f7fe f912 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 8004e84:	20b7      	movs	r0, #183	; 0xb7
 8004e86:	f7fe f8eb 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	f7fe f90c 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e90:	2000      	movs	r0, #0
 8004e92:	f7fe f909 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8004e96:	203f      	movs	r0, #63	; 0x3f
 8004e98:	f7fe f906 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	f7fe f903 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 8004ea2:	205e      	movs	r0, #94	; 0x5e
 8004ea4:	f7fe f900 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	f7fe f8fd 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8004eae:	2064      	movs	r0, #100	; 0x64
 8004eb0:	f7fe f8fa 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	f7fe f8f7 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 8004eba:	208c      	movs	r0, #140	; 0x8c
 8004ebc:	f7fe f8f4 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	f7fe f8f1 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 8004ec6:	20ac      	movs	r0, #172	; 0xac
 8004ec8:	f7fe f8ee 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ecc:	2000      	movs	r0, #0
 8004ece:	f7fe f8eb 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8004ed2:	20dc      	movs	r0, #220	; 0xdc
 8004ed4:	f7fe f8e8 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ed8:	2000      	movs	r0, #0
 8004eda:	f7fe f8e5 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 8004ede:	2070      	movs	r0, #112	; 0x70
 8004ee0:	f7fe f8e2 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	f7fe f8df 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 8004eea:	2090      	movs	r0, #144	; 0x90
 8004eec:	f7fe f8dc 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	f7fe f8d9 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 8004ef6:	20eb      	movs	r0, #235	; 0xeb
 8004ef8:	f7fe f8d6 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004efc:	2000      	movs	r0, #0
 8004efe:	f7fe f8d3 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8004f02:	20dc      	movs	r0, #220	; 0xdc
 8004f04:	f7fe f8d0 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f08:	2000      	movs	r0, #0
 8004f0a:	f7fe f8cd 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 8004f0e:	20b8      	movs	r0, #184	; 0xb8
 8004f10:	f7fe f8a6 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004f14:	2000      	movs	r0, #0
 8004f16:	f7fe f8c7 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	f7fe f8c4 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f20:	2000      	movs	r0, #0
 8004f22:	f7fe f8c1 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f26:	2000      	movs	r0, #0
 8004f28:	f7fe f8be 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	f7fe f8bb 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f32:	2000      	movs	r0, #0
 8004f34:	f7fe f8b8 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f38:	2000      	movs	r0, #0
 8004f3a:	f7fe f8b5 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f3e:	2000      	movs	r0, #0
 8004f40:	f7fe f8b2 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 8004f44:	20ba      	movs	r0, #186	; 0xba
 8004f46:	f7fe f88b 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 8004f4a:	2024      	movs	r0, #36	; 0x24
 8004f4c:	f7fe f8ac 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f50:	2000      	movs	r0, #0
 8004f52:	f7fe f8a9 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f56:	2000      	movs	r0, #0
 8004f58:	f7fe f8a6 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	f7fe f8a3 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 8004f62:	20c1      	movs	r0, #193	; 0xc1
 8004f64:	f7fe f87c 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8004f68:	2020      	movs	r0, #32
 8004f6a:	f7fe f89d 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f6e:	2000      	movs	r0, #0
 8004f70:	f7fe f89a 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8004f74:	2054      	movs	r0, #84	; 0x54
 8004f76:	f7fe f897 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	f7fe f894 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8004f80:	20ff      	movs	r0, #255	; 0xff
 8004f82:	f7fe f891 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f86:	2000      	movs	r0, #0
 8004f88:	f7fe f88e 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 8004f8c:	20c2      	movs	r0, #194	; 0xc2
 8004f8e:	f7fe f867 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8004f92:	200a      	movs	r0, #10
 8004f94:	f7fe f888 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f98:	2000      	movs	r0, #0
 8004f9a:	f7fe f885 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8004f9e:	2004      	movs	r0, #4
 8004fa0:	f7fe f882 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	f7fe f87f 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 8004faa:	20c3      	movs	r0, #195	; 0xc3
 8004fac:	f7fe f858 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8004fb0:	203c      	movs	r0, #60	; 0x3c
 8004fb2:	f7fe f879 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fb6:	2000      	movs	r0, #0
 8004fb8:	f7fe f876 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 8004fbc:	203a      	movs	r0, #58	; 0x3a
 8004fbe:	f7fe f873 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	f7fe f870 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8004fc8:	2039      	movs	r0, #57	; 0x39
 8004fca:	f7fe f86d 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fce:	2000      	movs	r0, #0
 8004fd0:	f7fe f86a 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 8004fd4:	2037      	movs	r0, #55	; 0x37
 8004fd6:	f7fe f867 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fda:	2000      	movs	r0, #0
 8004fdc:	f7fe f864 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8004fe0:	203c      	movs	r0, #60	; 0x3c
 8004fe2:	f7fe f861 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	f7fe f85e 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8004fec:	2036      	movs	r0, #54	; 0x36
 8004fee:	f7fe f85b 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	f7fe f858 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8004ff8:	2032      	movs	r0, #50	; 0x32
 8004ffa:	f7fe f855 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ffe:	2000      	movs	r0, #0
 8005000:	f7fe f852 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8005004:	202f      	movs	r0, #47	; 0x2f
 8005006:	f7fe f84f 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800500a:	2000      	movs	r0, #0
 800500c:	f7fe f84c 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8005010:	202c      	movs	r0, #44	; 0x2c
 8005012:	f7fe f849 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005016:	2000      	movs	r0, #0
 8005018:	f7fe f846 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 800501c:	2029      	movs	r0, #41	; 0x29
 800501e:	f7fe f843 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005022:	2000      	movs	r0, #0
 8005024:	f7fe f840 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8005028:	2026      	movs	r0, #38	; 0x26
 800502a:	f7fe f83d 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800502e:	2000      	movs	r0, #0
 8005030:	f7fe f83a 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8005034:	2024      	movs	r0, #36	; 0x24
 8005036:	f7fe f837 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800503a:	2000      	movs	r0, #0
 800503c:	f7fe f834 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8005040:	2024      	movs	r0, #36	; 0x24
 8005042:	f7fe f831 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005046:	2000      	movs	r0, #0
 8005048:	f7fe f82e 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 800504c:	2023      	movs	r0, #35	; 0x23
 800504e:	f7fe f82b 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005052:	2000      	movs	r0, #0
 8005054:	f7fe f828 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8005058:	203c      	movs	r0, #60	; 0x3c
 800505a:	f7fe f825 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800505e:	2000      	movs	r0, #0
 8005060:	f7fe f822 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8005064:	2036      	movs	r0, #54	; 0x36
 8005066:	f7fe f81f 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800506a:	2000      	movs	r0, #0
 800506c:	f7fe f81c 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8005070:	2032      	movs	r0, #50	; 0x32
 8005072:	f7fe f819 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005076:	2000      	movs	r0, #0
 8005078:	f7fe f816 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 800507c:	202f      	movs	r0, #47	; 0x2f
 800507e:	f7fe f813 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005082:	2000      	movs	r0, #0
 8005084:	f7fe f810 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8005088:	202c      	movs	r0, #44	; 0x2c
 800508a:	f7fe f80d 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800508e:	2000      	movs	r0, #0
 8005090:	f7fe f80a 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8005094:	2029      	movs	r0, #41	; 0x29
 8005096:	f7fe f807 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800509a:	2000      	movs	r0, #0
 800509c:	f7fe f804 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 80050a0:	2026      	movs	r0, #38	; 0x26
 80050a2:	f7fe f801 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050a6:	2000      	movs	r0, #0
 80050a8:	f7fd fffe 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80050ac:	2024      	movs	r0, #36	; 0x24
 80050ae:	f7fd fffb 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050b2:	2000      	movs	r0, #0
 80050b4:	f7fd fff8 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80050b8:	2024      	movs	r0, #36	; 0x24
 80050ba:	f7fd fff5 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050be:	2000      	movs	r0, #0
 80050c0:	f7fd fff2 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80050c4:	2023      	movs	r0, #35	; 0x23
 80050c6:	f7fd ffef 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050ca:	2000      	movs	r0, #0
 80050cc:	f7fd ffec 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 80050d0:	20c4      	movs	r0, #196	; 0xc4
 80050d2:	f7fd ffc5 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 80050d6:	2062      	movs	r0, #98	; 0x62
 80050d8:	f7fd ffe6 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050dc:	2000      	movs	r0, #0
 80050de:	f7fd ffe3 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 80050e2:	2005      	movs	r0, #5
 80050e4:	f7fd ffe0 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050e8:	2000      	movs	r0, #0
 80050ea:	f7fd ffdd 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 80050ee:	2084      	movs	r0, #132	; 0x84
 80050f0:	f7fd ffda 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050f4:	2000      	movs	r0, #0
 80050f6:	f7fd ffd7 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 80050fa:	20f0      	movs	r0, #240	; 0xf0
 80050fc:	f7fd ffd4 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005100:	2000      	movs	r0, #0
 8005102:	f7fd ffd1 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8005106:	2018      	movs	r0, #24
 8005108:	f7fd ffce 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800510c:	2000      	movs	r0, #0
 800510e:	f7fd ffcb 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 8005112:	20a4      	movs	r0, #164	; 0xa4
 8005114:	f7fd ffc8 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005118:	2000      	movs	r0, #0
 800511a:	f7fd ffc5 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 800511e:	2018      	movs	r0, #24
 8005120:	f7fd ffc2 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005124:	2000      	movs	r0, #0
 8005126:	f7fd ffbf 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 800512a:	2050      	movs	r0, #80	; 0x50
 800512c:	f7fd ffbc 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005130:	2000      	movs	r0, #0
 8005132:	f7fd ffb9 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 8005136:	200c      	movs	r0, #12
 8005138:	f7fd ffb6 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800513c:	2000      	movs	r0, #0
 800513e:	f7fd ffb3 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8005142:	2017      	movs	r0, #23
 8005144:	f7fd ffb0 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005148:	2000      	movs	r0, #0
 800514a:	f7fd ffad 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 800514e:	2095      	movs	r0, #149	; 0x95
 8005150:	f7fd ffaa 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005154:	2000      	movs	r0, #0
 8005156:	f7fd ffa7 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 800515a:	20f3      	movs	r0, #243	; 0xf3
 800515c:	f7fd ffa4 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005160:	2000      	movs	r0, #0
 8005162:	f7fd ffa1 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 8005166:	20e6      	movs	r0, #230	; 0xe6
 8005168:	f7fd ff9e 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800516c:	2000      	movs	r0, #0
 800516e:	f7fd ff9b 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 8005172:	20c5      	movs	r0, #197	; 0xc5
 8005174:	f7fd ff74 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8005178:	2032      	movs	r0, #50	; 0x32
 800517a:	f7fd ff95 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800517e:	2000      	movs	r0, #0
 8005180:	f7fd ff92 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8005184:	2044      	movs	r0, #68	; 0x44
 8005186:	f7fd ff8f 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800518a:	2000      	movs	r0, #0
 800518c:	f7fd ff8c 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8005190:	2065      	movs	r0, #101	; 0x65
 8005192:	f7fd ff89 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005196:	2000      	movs	r0, #0
 8005198:	f7fd ff86 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 800519c:	2076      	movs	r0, #118	; 0x76
 800519e:	f7fd ff83 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051a2:	2000      	movs	r0, #0
 80051a4:	f7fd ff80 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80051a8:	2088      	movs	r0, #136	; 0x88
 80051aa:	f7fd ff7d 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051ae:	2000      	movs	r0, #0
 80051b0:	f7fd ff7a 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 80051b4:	20c6      	movs	r0, #198	; 0xc6
 80051b6:	f7fd ff53 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 80051ba:	2020      	movs	r0, #32
 80051bc:	f7fd ff74 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051c0:	2000      	movs	r0, #0
 80051c2:	f7fd ff71 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 80051c6:	2017      	movs	r0, #23
 80051c8:	f7fd ff6e 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051cc:	2000      	movs	r0, #0
 80051ce:	f7fd ff6b 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80051d2:	2001      	movs	r0, #1
 80051d4:	f7fd ff68 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051d8:	2000      	movs	r0, #0
 80051da:	f7fd ff65 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 80051de:	20c7      	movs	r0, #199	; 0xc7
 80051e0:	f7fd ff3e 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80051e4:	2000      	movs	r0, #0
 80051e6:	f7fd ff5f 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051ea:	2000      	movs	r0, #0
 80051ec:	f7fd ff5c 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051f0:	2000      	movs	r0, #0
 80051f2:	f7fd ff59 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051f6:	2000      	movs	r0, #0
 80051f8:	f7fd ff56 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 80051fc:	20c8      	movs	r0, #200	; 0xc8
 80051fe:	f7fd ff2f 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005202:	2000      	movs	r0, #0
 8005204:	f7fd ff50 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005208:	2000      	movs	r0, #0
 800520a:	f7fd ff4d 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800520e:	2000      	movs	r0, #0
 8005210:	f7fd ff4a 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005214:	2000      	movs	r0, #0
 8005216:	f7fd ff47 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 800521a:	20c9      	movs	r0, #201	; 0xc9
 800521c:	f7fd ff20 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005220:	2000      	movs	r0, #0
 8005222:	f7fd ff41 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005226:	2000      	movs	r0, #0
 8005228:	f7fd ff3e 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800522c:	2000      	movs	r0, #0
 800522e:	f7fd ff3b 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005232:	2000      	movs	r0, #0
 8005234:	f7fd ff38 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005238:	2000      	movs	r0, #0
 800523a:	f7fd ff35 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800523e:	2000      	movs	r0, #0
 8005240:	f7fd ff32 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005244:	2000      	movs	r0, #0
 8005246:	f7fd ff2f 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800524a:	2000      	movs	r0, #0
 800524c:	f7fd ff2c 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005250:	2000      	movs	r0, #0
 8005252:	f7fd ff29 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005256:	2000      	movs	r0, #0
 8005258:	f7fd ff26 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800525c:	2000      	movs	r0, #0
 800525e:	f7fd ff23 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005262:	2000      	movs	r0, #0
 8005264:	f7fd ff20 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005268:	2000      	movs	r0, #0
 800526a:	f7fd ff1d 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800526e:	2000      	movs	r0, #0
 8005270:	f7fd ff1a 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005274:	2000      	movs	r0, #0
 8005276:	f7fd ff17 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800527a:	2000      	movs	r0, #0
 800527c:	f7fd ff14 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8005280:	20e0      	movs	r0, #224	; 0xe0
 8005282:	f7fd feed 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8005286:	2016      	movs	r0, #22
 8005288:	f7fd ff0e 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800528c:	2000      	movs	r0, #0
 800528e:	f7fd ff0b 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8005292:	201c      	movs	r0, #28
 8005294:	f7fd ff08 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005298:	2000      	movs	r0, #0
 800529a:	f7fd ff05 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 800529e:	2021      	movs	r0, #33	; 0x21
 80052a0:	f7fd ff02 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052a4:	2000      	movs	r0, #0
 80052a6:	f7fd feff 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80052aa:	2036      	movs	r0, #54	; 0x36
 80052ac:	f7fd fefc 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052b0:	2000      	movs	r0, #0
 80052b2:	f7fd fef9 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 80052b6:	2046      	movs	r0, #70	; 0x46
 80052b8:	f7fd fef6 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052bc:	2000      	movs	r0, #0
 80052be:	f7fd fef3 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 80052c2:	2052      	movs	r0, #82	; 0x52
 80052c4:	f7fd fef0 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052c8:	2000      	movs	r0, #0
 80052ca:	f7fd feed 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 80052ce:	2064      	movs	r0, #100	; 0x64
 80052d0:	f7fd feea 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052d4:	2000      	movs	r0, #0
 80052d6:	f7fd fee7 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 80052da:	207a      	movs	r0, #122	; 0x7a
 80052dc:	f7fd fee4 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052e0:	2000      	movs	r0, #0
 80052e2:	f7fd fee1 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 80052e6:	208b      	movs	r0, #139	; 0x8b
 80052e8:	f7fd fede 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052ec:	2000      	movs	r0, #0
 80052ee:	f7fd fedb 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80052f2:	2099      	movs	r0, #153	; 0x99
 80052f4:	f7fd fed8 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052f8:	2000      	movs	r0, #0
 80052fa:	f7fd fed5 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 80052fe:	20a8      	movs	r0, #168	; 0xa8
 8005300:	f7fd fed2 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005304:	2000      	movs	r0, #0
 8005306:	f7fd fecf 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 800530a:	20b9      	movs	r0, #185	; 0xb9
 800530c:	f7fd fecc 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005310:	2000      	movs	r0, #0
 8005312:	f7fd fec9 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8005316:	20c4      	movs	r0, #196	; 0xc4
 8005318:	f7fd fec6 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800531c:	2000      	movs	r0, #0
 800531e:	f7fd fec3 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8005322:	20ca      	movs	r0, #202	; 0xca
 8005324:	f7fd fec0 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005328:	2000      	movs	r0, #0
 800532a:	f7fd febd 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 800532e:	20d2      	movs	r0, #210	; 0xd2
 8005330:	f7fd feba 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005334:	2000      	movs	r0, #0
 8005336:	f7fd feb7 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 800533a:	20d9      	movs	r0, #217	; 0xd9
 800533c:	f7fd feb4 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005340:	2000      	movs	r0, #0
 8005342:	f7fd feb1 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8005346:	20e0      	movs	r0, #224	; 0xe0
 8005348:	f7fd feae 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800534c:	2000      	movs	r0, #0
 800534e:	f7fd feab 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8005352:	20f3      	movs	r0, #243	; 0xf3
 8005354:	f7fd fea8 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005358:	2000      	movs	r0, #0
 800535a:	f7fd fea5 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 800535e:	20e1      	movs	r0, #225	; 0xe1
 8005360:	f7fd fe7e 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8005364:	2016      	movs	r0, #22
 8005366:	f7fd fe9f 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800536a:	2000      	movs	r0, #0
 800536c:	f7fd fe9c 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8005370:	201c      	movs	r0, #28
 8005372:	f7fd fe99 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005376:	2000      	movs	r0, #0
 8005378:	f7fd fe96 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 800537c:	2022      	movs	r0, #34	; 0x22
 800537e:	f7fd fe93 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005382:	2000      	movs	r0, #0
 8005384:	f7fd fe90 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8005388:	2036      	movs	r0, #54	; 0x36
 800538a:	f7fd fe8d 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800538e:	2000      	movs	r0, #0
 8005390:	f7fd fe8a 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8005394:	2045      	movs	r0, #69	; 0x45
 8005396:	f7fd fe87 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800539a:	2000      	movs	r0, #0
 800539c:	f7fd fe84 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 80053a0:	2052      	movs	r0, #82	; 0x52
 80053a2:	f7fd fe81 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053a6:	2000      	movs	r0, #0
 80053a8:	f7fd fe7e 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 80053ac:	2064      	movs	r0, #100	; 0x64
 80053ae:	f7fd fe7b 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053b2:	2000      	movs	r0, #0
 80053b4:	f7fd fe78 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 80053b8:	207a      	movs	r0, #122	; 0x7a
 80053ba:	f7fd fe75 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053be:	2000      	movs	r0, #0
 80053c0:	f7fd fe72 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 80053c4:	208b      	movs	r0, #139	; 0x8b
 80053c6:	f7fd fe6f 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053ca:	2000      	movs	r0, #0
 80053cc:	f7fd fe6c 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80053d0:	2099      	movs	r0, #153	; 0x99
 80053d2:	f7fd fe69 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053d6:	2000      	movs	r0, #0
 80053d8:	f7fd fe66 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 80053dc:	20a8      	movs	r0, #168	; 0xa8
 80053de:	f7fd fe63 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053e2:	2000      	movs	r0, #0
 80053e4:	f7fd fe60 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 80053e8:	20b9      	movs	r0, #185	; 0xb9
 80053ea:	f7fd fe5d 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053ee:	2000      	movs	r0, #0
 80053f0:	f7fd fe5a 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80053f4:	20c4      	movs	r0, #196	; 0xc4
 80053f6:	f7fd fe57 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053fa:	2000      	movs	r0, #0
 80053fc:	f7fd fe54 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8005400:	20ca      	movs	r0, #202	; 0xca
 8005402:	f7fd fe51 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005406:	2000      	movs	r0, #0
 8005408:	f7fd fe4e 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 800540c:	20d2      	movs	r0, #210	; 0xd2
 800540e:	f7fd fe4b 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005412:	2000      	movs	r0, #0
 8005414:	f7fd fe48 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8005418:	20d8      	movs	r0, #216	; 0xd8
 800541a:	f7fd fe45 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800541e:	2000      	movs	r0, #0
 8005420:	f7fd fe42 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8005424:	20e0      	movs	r0, #224	; 0xe0
 8005426:	f7fd fe3f 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800542a:	2000      	movs	r0, #0
 800542c:	f7fd fe3c 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8005430:	20f3      	movs	r0, #243	; 0xf3
 8005432:	f7fd fe39 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005436:	2000      	movs	r0, #0
 8005438:	f7fd fe36 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 800543c:	20e2      	movs	r0, #226	; 0xe2
 800543e:	f7fd fe0f 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8005442:	2005      	movs	r0, #5
 8005444:	f7fd fe30 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005448:	2000      	movs	r0, #0
 800544a:	f7fd fe2d 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 800544e:	200b      	movs	r0, #11
 8005450:	f7fd fe2a 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005454:	2000      	movs	r0, #0
 8005456:	f7fd fe27 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 800545a:	201b      	movs	r0, #27
 800545c:	f7fd fe24 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005460:	2000      	movs	r0, #0
 8005462:	f7fd fe21 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8005466:	2034      	movs	r0, #52	; 0x34
 8005468:	f7fd fe1e 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800546c:	2000      	movs	r0, #0
 800546e:	f7fd fe1b 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8005472:	2044      	movs	r0, #68	; 0x44
 8005474:	f7fd fe18 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005478:	2000      	movs	r0, #0
 800547a:	f7fd fe15 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 800547e:	204f      	movs	r0, #79	; 0x4f
 8005480:	f7fd fe12 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005484:	2000      	movs	r0, #0
 8005486:	f7fd fe0f 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 800548a:	2061      	movs	r0, #97	; 0x61
 800548c:	f7fd fe0c 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005490:	2000      	movs	r0, #0
 8005492:	f7fd fe09 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8005496:	2079      	movs	r0, #121	; 0x79
 8005498:	f7fd fe06 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800549c:	2000      	movs	r0, #0
 800549e:	f7fd fe03 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80054a2:	2088      	movs	r0, #136	; 0x88
 80054a4:	f7fd fe00 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054a8:	2000      	movs	r0, #0
 80054aa:	f7fd fdfd 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 80054ae:	2097      	movs	r0, #151	; 0x97
 80054b0:	f7fd fdfa 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054b4:	2000      	movs	r0, #0
 80054b6:	f7fd fdf7 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 80054ba:	20a6      	movs	r0, #166	; 0xa6
 80054bc:	f7fd fdf4 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054c0:	2000      	movs	r0, #0
 80054c2:	f7fd fdf1 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 80054c6:	20b7      	movs	r0, #183	; 0xb7
 80054c8:	f7fd fdee 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054cc:	2000      	movs	r0, #0
 80054ce:	f7fd fdeb 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 80054d2:	20c2      	movs	r0, #194	; 0xc2
 80054d4:	f7fd fde8 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054d8:	2000      	movs	r0, #0
 80054da:	f7fd fde5 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 80054de:	20c7      	movs	r0, #199	; 0xc7
 80054e0:	f7fd fde2 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054e4:	2000      	movs	r0, #0
 80054e6:	f7fd fddf 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 80054ea:	20d1      	movs	r0, #209	; 0xd1
 80054ec:	f7fd fddc 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054f0:	2000      	movs	r0, #0
 80054f2:	f7fd fdd9 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 80054f6:	20d6      	movs	r0, #214	; 0xd6
 80054f8:	f7fd fdd6 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80054fc:	2000      	movs	r0, #0
 80054fe:	f7fd fdd3 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8005502:	20dd      	movs	r0, #221	; 0xdd
 8005504:	f7fd fdd0 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005508:	2000      	movs	r0, #0
 800550a:	f7fd fdcd 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 800550e:	20f3      	movs	r0, #243	; 0xf3
 8005510:	f7fd fdca 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005514:	2000      	movs	r0, #0
 8005516:	f7fd fdc7 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 800551a:	20e3      	movs	r0, #227	; 0xe3
 800551c:	f7fd fda0 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8005520:	2005      	movs	r0, #5
 8005522:	f7fd fdc1 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005526:	2000      	movs	r0, #0
 8005528:	f7fd fdbe 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 800552c:	200a      	movs	r0, #10
 800552e:	f7fd fdbb 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005532:	2000      	movs	r0, #0
 8005534:	f7fd fdb8 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8005538:	201c      	movs	r0, #28
 800553a:	f7fd fdb5 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800553e:	2000      	movs	r0, #0
 8005540:	f7fd fdb2 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8005544:	2033      	movs	r0, #51	; 0x33
 8005546:	f7fd fdaf 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800554a:	2000      	movs	r0, #0
 800554c:	f7fd fdac 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8005550:	2044      	movs	r0, #68	; 0x44
 8005552:	f7fd fda9 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005556:	2000      	movs	r0, #0
 8005558:	f7fd fda6 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 800555c:	2050      	movs	r0, #80	; 0x50
 800555e:	f7fd fda3 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005562:	2000      	movs	r0, #0
 8005564:	f7fd fda0 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8005568:	2062      	movs	r0, #98	; 0x62
 800556a:	f7fd fd9d 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800556e:	2000      	movs	r0, #0
 8005570:	f7fd fd9a 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 8005574:	2078      	movs	r0, #120	; 0x78
 8005576:	f7fd fd97 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800557a:	2000      	movs	r0, #0
 800557c:	f7fd fd94 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8005580:	2088      	movs	r0, #136	; 0x88
 8005582:	f7fd fd91 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005586:	2000      	movs	r0, #0
 8005588:	f7fd fd8e 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 800558c:	2097      	movs	r0, #151	; 0x97
 800558e:	f7fd fd8b 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005592:	2000      	movs	r0, #0
 8005594:	f7fd fd88 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8005598:	20a6      	movs	r0, #166	; 0xa6
 800559a:	f7fd fd85 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800559e:	2000      	movs	r0, #0
 80055a0:	f7fd fd82 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 80055a4:	20b7      	movs	r0, #183	; 0xb7
 80055a6:	f7fd fd7f 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055aa:	2000      	movs	r0, #0
 80055ac:	f7fd fd7c 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 80055b0:	20c2      	movs	r0, #194	; 0xc2
 80055b2:	f7fd fd79 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055b6:	2000      	movs	r0, #0
 80055b8:	f7fd fd76 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 80055bc:	20c7      	movs	r0, #199	; 0xc7
 80055be:	f7fd fd73 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055c2:	2000      	movs	r0, #0
 80055c4:	f7fd fd70 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 80055c8:	20d1      	movs	r0, #209	; 0xd1
 80055ca:	f7fd fd6d 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055ce:	2000      	movs	r0, #0
 80055d0:	f7fd fd6a 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 80055d4:	20d5      	movs	r0, #213	; 0xd5
 80055d6:	f7fd fd67 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055da:	2000      	movs	r0, #0
 80055dc:	f7fd fd64 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80055e0:	20dd      	movs	r0, #221	; 0xdd
 80055e2:	f7fd fd61 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055e6:	2000      	movs	r0, #0
 80055e8:	f7fd fd5e 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80055ec:	20f3      	movs	r0, #243	; 0xf3
 80055ee:	f7fd fd5b 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80055f2:	2000      	movs	r0, #0
 80055f4:	f7fd fd58 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 80055f8:	20e4      	movs	r0, #228	; 0xe4
 80055fa:	f7fd fd31 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80055fe:	2001      	movs	r0, #1
 8005600:	f7fd fd52 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005604:	2000      	movs	r0, #0
 8005606:	f7fd fd4f 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 800560a:	2001      	movs	r0, #1
 800560c:	f7fd fd4c 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005610:	2000      	movs	r0, #0
 8005612:	f7fd fd49 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8005616:	2002      	movs	r0, #2
 8005618:	f7fd fd46 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800561c:	2000      	movs	r0, #0
 800561e:	f7fd fd43 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8005622:	202a      	movs	r0, #42	; 0x2a
 8005624:	f7fd fd40 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005628:	2000      	movs	r0, #0
 800562a:	f7fd fd3d 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 800562e:	203c      	movs	r0, #60	; 0x3c
 8005630:	f7fd fd3a 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005634:	2000      	movs	r0, #0
 8005636:	f7fd fd37 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 800563a:	204b      	movs	r0, #75	; 0x4b
 800563c:	f7fd fd34 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005640:	2000      	movs	r0, #0
 8005642:	f7fd fd31 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8005646:	205d      	movs	r0, #93	; 0x5d
 8005648:	f7fd fd2e 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800564c:	2000      	movs	r0, #0
 800564e:	f7fd fd2b 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8005652:	2074      	movs	r0, #116	; 0x74
 8005654:	f7fd fd28 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005658:	2000      	movs	r0, #0
 800565a:	f7fd fd25 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 800565e:	2084      	movs	r0, #132	; 0x84
 8005660:	f7fd fd22 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005664:	2000      	movs	r0, #0
 8005666:	f7fd fd1f 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 800566a:	2093      	movs	r0, #147	; 0x93
 800566c:	f7fd fd1c 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005670:	2000      	movs	r0, #0
 8005672:	f7fd fd19 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8005676:	20a2      	movs	r0, #162	; 0xa2
 8005678:	f7fd fd16 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800567c:	2000      	movs	r0, #0
 800567e:	f7fd fd13 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8005682:	20b3      	movs	r0, #179	; 0xb3
 8005684:	f7fd fd10 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005688:	2000      	movs	r0, #0
 800568a:	f7fd fd0d 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 800568e:	20be      	movs	r0, #190	; 0xbe
 8005690:	f7fd fd0a 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005694:	2000      	movs	r0, #0
 8005696:	f7fd fd07 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 800569a:	20c4      	movs	r0, #196	; 0xc4
 800569c:	f7fd fd04 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056a0:	2000      	movs	r0, #0
 80056a2:	f7fd fd01 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 80056a6:	20cd      	movs	r0, #205	; 0xcd
 80056a8:	f7fd fcfe 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056ac:	2000      	movs	r0, #0
 80056ae:	f7fd fcfb 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 80056b2:	20d3      	movs	r0, #211	; 0xd3
 80056b4:	f7fd fcf8 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056b8:	2000      	movs	r0, #0
 80056ba:	f7fd fcf5 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80056be:	20dd      	movs	r0, #221	; 0xdd
 80056c0:	f7fd fcf2 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056c4:	2000      	movs	r0, #0
 80056c6:	f7fd fcef 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80056ca:	20f3      	movs	r0, #243	; 0xf3
 80056cc:	f7fd fcec 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056d0:	2000      	movs	r0, #0
 80056d2:	f7fd fce9 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 80056d6:	20e5      	movs	r0, #229	; 0xe5
 80056d8:	f7fd fcc2 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80056dc:	2000      	movs	r0, #0
 80056de:	f7fd fce3 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056e2:	2000      	movs	r0, #0
 80056e4:	f7fd fce0 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056e8:	2000      	movs	r0, #0
 80056ea:	f7fd fcdd 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056ee:	2000      	movs	r0, #0
 80056f0:	f7fd fcda 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80056f4:	2002      	movs	r0, #2
 80056f6:	f7fd fcd7 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80056fa:	2000      	movs	r0, #0
 80056fc:	f7fd fcd4 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8005700:	2029      	movs	r0, #41	; 0x29
 8005702:	f7fd fcd1 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005706:	2000      	movs	r0, #0
 8005708:	f7fd fcce 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 800570c:	203c      	movs	r0, #60	; 0x3c
 800570e:	f7fd fccb 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005712:	2000      	movs	r0, #0
 8005714:	f7fd fcc8 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8005718:	204b      	movs	r0, #75	; 0x4b
 800571a:	f7fd fcc5 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800571e:	2000      	movs	r0, #0
 8005720:	f7fd fcc2 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8005724:	205d      	movs	r0, #93	; 0x5d
 8005726:	f7fd fcbf 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800572a:	2000      	movs	r0, #0
 800572c:	f7fd fcbc 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8005730:	2074      	movs	r0, #116	; 0x74
 8005732:	f7fd fcb9 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005736:	2000      	movs	r0, #0
 8005738:	f7fd fcb6 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 800573c:	2084      	movs	r0, #132	; 0x84
 800573e:	f7fd fcb3 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005742:	2000      	movs	r0, #0
 8005744:	f7fd fcb0 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8005748:	2093      	movs	r0, #147	; 0x93
 800574a:	f7fd fcad 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800574e:	2000      	movs	r0, #0
 8005750:	f7fd fcaa 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8005754:	20a2      	movs	r0, #162	; 0xa2
 8005756:	f7fd fca7 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800575a:	2000      	movs	r0, #0
 800575c:	f7fd fca4 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8005760:	20b3      	movs	r0, #179	; 0xb3
 8005762:	f7fd fca1 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005766:	2000      	movs	r0, #0
 8005768:	f7fd fc9e 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 800576c:	20be      	movs	r0, #190	; 0xbe
 800576e:	f7fd fc9b 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005772:	2000      	movs	r0, #0
 8005774:	f7fd fc98 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8005778:	20c4      	movs	r0, #196	; 0xc4
 800577a:	f7fd fc95 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800577e:	2000      	movs	r0, #0
 8005780:	f7fd fc92 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8005784:	20cd      	movs	r0, #205	; 0xcd
 8005786:	f7fd fc8f 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800578a:	2000      	movs	r0, #0
 800578c:	f7fd fc8c 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8005790:	20d3      	movs	r0, #211	; 0xd3
 8005792:	f7fd fc89 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005796:	2000      	movs	r0, #0
 8005798:	f7fd fc86 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800579c:	20dc      	movs	r0, #220	; 0xdc
 800579e:	f7fd fc83 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057a2:	2000      	movs	r0, #0
 80057a4:	f7fd fc80 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80057a8:	20f3      	movs	r0, #243	; 0xf3
 80057aa:	f7fd fc7d 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057ae:	2000      	movs	r0, #0
 80057b0:	f7fd fc7a 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 80057b4:	20e6      	movs	r0, #230	; 0xe6
 80057b6:	f7fd fc53 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 80057ba:	2011      	movs	r0, #17
 80057bc:	f7fd fc74 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057c0:	2000      	movs	r0, #0
 80057c2:	f7fd fc71 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80057c6:	2034      	movs	r0, #52	; 0x34
 80057c8:	f7fd fc6e 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057cc:	2000      	movs	r0, #0
 80057ce:	f7fd fc6b 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80057d2:	2056      	movs	r0, #86	; 0x56
 80057d4:	f7fd fc68 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057d8:	2000      	movs	r0, #0
 80057da:	f7fd fc65 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80057de:	2076      	movs	r0, #118	; 0x76
 80057e0:	f7fd fc62 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057e4:	2000      	movs	r0, #0
 80057e6:	f7fd fc5f 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80057ea:	2077      	movs	r0, #119	; 0x77
 80057ec:	f7fd fc5c 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057f0:	2000      	movs	r0, #0
 80057f2:	f7fd fc59 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80057f6:	2066      	movs	r0, #102	; 0x66
 80057f8:	f7fd fc56 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80057fc:	2000      	movs	r0, #0
 80057fe:	f7fd fc53 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8005802:	2088      	movs	r0, #136	; 0x88
 8005804:	f7fd fc50 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005808:	2000      	movs	r0, #0
 800580a:	f7fd fc4d 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800580e:	2099      	movs	r0, #153	; 0x99
 8005810:	f7fd fc4a 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005814:	2000      	movs	r0, #0
 8005816:	f7fd fc47 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 800581a:	20bb      	movs	r0, #187	; 0xbb
 800581c:	f7fd fc44 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005820:	2000      	movs	r0, #0
 8005822:	f7fd fc41 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8005826:	2099      	movs	r0, #153	; 0x99
 8005828:	f7fd fc3e 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800582c:	2000      	movs	r0, #0
 800582e:	f7fd fc3b 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8005832:	2066      	movs	r0, #102	; 0x66
 8005834:	f7fd fc38 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005838:	2000      	movs	r0, #0
 800583a:	f7fd fc35 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800583e:	2055      	movs	r0, #85	; 0x55
 8005840:	f7fd fc32 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005844:	2000      	movs	r0, #0
 8005846:	f7fd fc2f 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800584a:	2055      	movs	r0, #85	; 0x55
 800584c:	f7fd fc2c 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005850:	2000      	movs	r0, #0
 8005852:	f7fd fc29 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8005856:	2045      	movs	r0, #69	; 0x45
 8005858:	f7fd fc26 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800585c:	2000      	movs	r0, #0
 800585e:	f7fd fc23 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8005862:	2043      	movs	r0, #67	; 0x43
 8005864:	f7fd fc20 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005868:	2000      	movs	r0, #0
 800586a:	f7fd fc1d 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800586e:	2044      	movs	r0, #68	; 0x44
 8005870:	f7fd fc1a 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005874:	2000      	movs	r0, #0
 8005876:	f7fd fc17 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 800587a:	20e7      	movs	r0, #231	; 0xe7
 800587c:	f7fd fbf0 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8005880:	2032      	movs	r0, #50	; 0x32
 8005882:	f7fd fc11 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005886:	2000      	movs	r0, #0
 8005888:	f7fd fc0e 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800588c:	2055      	movs	r0, #85	; 0x55
 800588e:	f7fd fc0b 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005892:	2000      	movs	r0, #0
 8005894:	f7fd fc08 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8005898:	2076      	movs	r0, #118	; 0x76
 800589a:	f7fd fc05 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800589e:	2000      	movs	r0, #0
 80058a0:	f7fd fc02 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80058a4:	2066      	movs	r0, #102	; 0x66
 80058a6:	f7fd fbff 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058aa:	2000      	movs	r0, #0
 80058ac:	f7fd fbfc 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80058b0:	2067      	movs	r0, #103	; 0x67
 80058b2:	f7fd fbf9 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058b6:	2000      	movs	r0, #0
 80058b8:	f7fd fbf6 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80058bc:	2067      	movs	r0, #103	; 0x67
 80058be:	f7fd fbf3 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058c2:	2000      	movs	r0, #0
 80058c4:	f7fd fbf0 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 80058c8:	2087      	movs	r0, #135	; 0x87
 80058ca:	f7fd fbed 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058ce:	2000      	movs	r0, #0
 80058d0:	f7fd fbea 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80058d4:	2099      	movs	r0, #153	; 0x99
 80058d6:	f7fd fbe7 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058da:	2000      	movs	r0, #0
 80058dc:	f7fd fbe4 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80058e0:	20bb      	movs	r0, #187	; 0xbb
 80058e2:	f7fd fbe1 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058e6:	2000      	movs	r0, #0
 80058e8:	f7fd fbde 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80058ec:	2099      	movs	r0, #153	; 0x99
 80058ee:	f7fd fbdb 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058f2:	2000      	movs	r0, #0
 80058f4:	f7fd fbd8 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80058f8:	2077      	movs	r0, #119	; 0x77
 80058fa:	f7fd fbd5 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80058fe:	2000      	movs	r0, #0
 8005900:	f7fd fbd2 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8005904:	2044      	movs	r0, #68	; 0x44
 8005906:	f7fd fbcf 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800590a:	2000      	movs	r0, #0
 800590c:	f7fd fbcc 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8005910:	2056      	movs	r0, #86	; 0x56
 8005912:	f7fd fbc9 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005916:	2000      	movs	r0, #0
 8005918:	f7fd fbc6 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 800591c:	2023      	movs	r0, #35	; 0x23
 800591e:	f7fd fbc3 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005922:	2000      	movs	r0, #0
 8005924:	f7fd fbc0 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8005928:	2033      	movs	r0, #51	; 0x33
 800592a:	f7fd fbbd 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800592e:	2000      	movs	r0, #0
 8005930:	f7fd fbba 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8005934:	2045      	movs	r0, #69	; 0x45
 8005936:	f7fd fbb7 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800593a:	2000      	movs	r0, #0
 800593c:	f7fd fbb4 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8005940:	20e8      	movs	r0, #232	; 0xe8
 8005942:	f7fd fb8d 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005946:	2000      	movs	r0, #0
 8005948:	f7fd fbae 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800594c:	2000      	movs	r0, #0
 800594e:	f7fd fbab 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8005952:	2099      	movs	r0, #153	; 0x99
 8005954:	f7fd fba8 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005958:	2000      	movs	r0, #0
 800595a:	f7fd fba5 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 800595e:	2087      	movs	r0, #135	; 0x87
 8005960:	f7fd fba2 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005964:	2000      	movs	r0, #0
 8005966:	f7fd fb9f 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800596a:	2088      	movs	r0, #136	; 0x88
 800596c:	f7fd fb9c 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005970:	2000      	movs	r0, #0
 8005972:	f7fd fb99 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8005976:	2077      	movs	r0, #119	; 0x77
 8005978:	f7fd fb96 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800597c:	2000      	movs	r0, #0
 800597e:	f7fd fb93 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8005982:	2066      	movs	r0, #102	; 0x66
 8005984:	f7fd fb90 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005988:	2000      	movs	r0, #0
 800598a:	f7fd fb8d 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800598e:	2088      	movs	r0, #136	; 0x88
 8005990:	f7fd fb8a 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005994:	2000      	movs	r0, #0
 8005996:	f7fd fb87 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 800599a:	20aa      	movs	r0, #170	; 0xaa
 800599c:	f7fd fb84 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059a0:	2000      	movs	r0, #0
 80059a2:	f7fd fb81 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80059a6:	20bb      	movs	r0, #187	; 0xbb
 80059a8:	f7fd fb7e 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059ac:	2000      	movs	r0, #0
 80059ae:	f7fd fb7b 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80059b2:	2099      	movs	r0, #153	; 0x99
 80059b4:	f7fd fb78 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059b8:	2000      	movs	r0, #0
 80059ba:	f7fd fb75 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80059be:	2066      	movs	r0, #102	; 0x66
 80059c0:	f7fd fb72 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059c4:	2000      	movs	r0, #0
 80059c6:	f7fd fb6f 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80059ca:	2055      	movs	r0, #85	; 0x55
 80059cc:	f7fd fb6c 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059d0:	2000      	movs	r0, #0
 80059d2:	f7fd fb69 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80059d6:	2055      	movs	r0, #85	; 0x55
 80059d8:	f7fd fb66 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059dc:	2000      	movs	r0, #0
 80059de:	f7fd fb63 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80059e2:	2044      	movs	r0, #68	; 0x44
 80059e4:	f7fd fb60 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059e8:	2000      	movs	r0, #0
 80059ea:	f7fd fb5d 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80059ee:	2044      	movs	r0, #68	; 0x44
 80059f0:	f7fd fb5a 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80059f4:	2000      	movs	r0, #0
 80059f6:	f7fd fb57 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80059fa:	2055      	movs	r0, #85	; 0x55
 80059fc:	f7fd fb54 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a00:	2000      	movs	r0, #0
 8005a02:	f7fd fb51 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 8005a06:	20e9      	movs	r0, #233	; 0xe9
 8005a08:	f7fd fb2a 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8005a0c:	20aa      	movs	r0, #170	; 0xaa
 8005a0e:	f7fd fb4b 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a12:	2000      	movs	r0, #0
 8005a14:	f7fd fb48 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a18:	2000      	movs	r0, #0
 8005a1a:	f7fd fb45 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a1e:	2000      	movs	r0, #0
 8005a20:	f7fd fb42 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 8005a24:	2000      	movs	r0, #0
 8005a26:	f7fd fb1b 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8005a2a:	20aa      	movs	r0, #170	; 0xaa
 8005a2c:	f7fd fb3c 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8005a30:	20cf      	movs	r0, #207	; 0xcf
 8005a32:	f7fd fb15 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005a36:	2000      	movs	r0, #0
 8005a38:	f7fd fb36 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	f7fd fb33 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a42:	2000      	movs	r0, #0
 8005a44:	f7fd fb30 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a48:	2000      	movs	r0, #0
 8005a4a:	f7fd fb2d 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a4e:	2000      	movs	r0, #0
 8005a50:	f7fd fb2a 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a54:	2000      	movs	r0, #0
 8005a56:	f7fd fb27 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	f7fd fb24 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a60:	2000      	movs	r0, #0
 8005a62:	f7fd fb21 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a66:	2000      	movs	r0, #0
 8005a68:	f7fd fb1e 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	f7fd fb1b 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a72:	2000      	movs	r0, #0
 8005a74:	f7fd fb18 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a78:	2000      	movs	r0, #0
 8005a7a:	f7fd fb15 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a7e:	2000      	movs	r0, #0
 8005a80:	f7fd fb12 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a84:	2000      	movs	r0, #0
 8005a86:	f7fd fb0f 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	f7fd fb0c 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a90:	2000      	movs	r0, #0
 8005a92:	f7fd fb09 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005a96:	2000      	movs	r0, #0
 8005a98:	f7fd fb06 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 8005a9c:	20f0      	movs	r0, #240	; 0xf0
 8005a9e:	f7fd fadf 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005aa2:	2000      	movs	r0, #0
 8005aa4:	f7fd fb00 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8005aa8:	2050      	movs	r0, #80	; 0x50
 8005aaa:	f7fd fafd 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005aae:	2000      	movs	r0, #0
 8005ab0:	f7fd fafa 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	f7fd faf7 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005aba:	2000      	movs	r0, #0
 8005abc:	f7fd faf4 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 8005ac0:	20f3      	movs	r0, #243	; 0xf3
 8005ac2:	f7fd facd 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005ac6:	2000      	movs	r0, #0
 8005ac8:	f7fd faee 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 8005acc:	20f9      	movs	r0, #249	; 0xf9
 8005ace:	f7fd fac7 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 8005ad2:	2006      	movs	r0, #6
 8005ad4:	f7fd fae8 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8005ad8:	2010      	movs	r0, #16
 8005ada:	f7fd fae5 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8005ade:	2029      	movs	r0, #41	; 0x29
 8005ae0:	f7fd fae2 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	f7fd fadf 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 8005aea:	203a      	movs	r0, #58	; 0x3a
 8005aec:	f7fd fab8 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8005af0:	2055      	movs	r0, #85	; 0x55
 8005af2:	f7fd fad9 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 8005af6:	2011      	movs	r0, #17
 8005af8:	f7fd fab2 	bl	8003060 <LCD_WR_REG>
		HAL_Delay(100);
 8005afc:	2064      	movs	r0, #100	; 0x64
 8005afe:	f7fb fbcb 	bl	8001298 <HAL_Delay>
		LCD_WR_REG(0x29);
 8005b02:	2029      	movs	r0, #41	; 0x29
 8005b04:	f7fd faac 	bl	8003060 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8005b08:	2035      	movs	r0, #53	; 0x35
 8005b0a:	f7fd faa9 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005b0e:	2000      	movs	r0, #0
 8005b10:	f7fd faca 	bl	80030a8 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 8005b14:	2051      	movs	r0, #81	; 0x51
 8005b16:	f7fd faa3 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 8005b1a:	20ff      	movs	r0, #255	; 0xff
 8005b1c:	f7fd fac4 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8005b20:	2053      	movs	r0, #83	; 0x53
 8005b22:	f7fd fa9d 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 8005b26:	202c      	movs	r0, #44	; 0x2c
 8005b28:	f7fd fabe 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 8005b2c:	2055      	movs	r0, #85	; 0x55
 8005b2e:	f7fd fa97 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 8005b32:	2082      	movs	r0, #130	; 0x82
 8005b34:	f7fd fab8 	bl	80030a8 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8005b38:	202c      	movs	r0, #44	; 0x2c
 8005b3a:	f7fd fa91 	bl	8003060 <LCD_WR_REG>
 8005b3e:	f002 bca1 	b.w	8008484 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 8005b42:	4b04      	ldr	r3, [pc, #16]	; (8005b54 <LCD_Init+0x1504>)
 8005b44:	889b      	ldrh	r3, [r3, #4]
 8005b46:	f245 5210 	movw	r2, #21776	; 0x5510
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	f040 8782 	bne.w	8006a54 <LCD_Init+0x2404>
 8005b50:	e002      	b.n	8005b58 <LCD_Init+0x1508>
 8005b52:	bf00      	nop
 8005b54:	20000a30 	.word	0x20000a30
		LCD_WriteReg(0xF000, 0x55);
 8005b58:	2155      	movs	r1, #85	; 0x55
 8005b5a:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8005b5e:	f7fd fb0b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8005b62:	21aa      	movs	r1, #170	; 0xaa
 8005b64:	f24f 0001 	movw	r0, #61441	; 0xf001
 8005b68:	f7fd fb06 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8005b6c:	2152      	movs	r1, #82	; 0x52
 8005b6e:	f24f 0002 	movw	r0, #61442	; 0xf002
 8005b72:	f7fd fb01 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8005b76:	2108      	movs	r1, #8
 8005b78:	f24f 0003 	movw	r0, #61443	; 0xf003
 8005b7c:	f7fd fafc 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 8005b80:	2101      	movs	r1, #1
 8005b82:	f24f 0004 	movw	r0, #61444	; 0xf004
 8005b86:	f7fd faf7 	bl	8003178 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 8005b8a:	210d      	movs	r1, #13
 8005b8c:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8005b90:	f7fd faf2 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 8005b94:	210d      	movs	r1, #13
 8005b96:	f24b 0001 	movw	r0, #45057	; 0xb001
 8005b9a:	f7fd faed 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 8005b9e:	210d      	movs	r1, #13
 8005ba0:	f24b 0002 	movw	r0, #45058	; 0xb002
 8005ba4:	f7fd fae8 	bl	8003178 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 8005ba8:	2134      	movs	r1, #52	; 0x34
 8005baa:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8005bae:	f7fd fae3 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 8005bb2:	2134      	movs	r1, #52	; 0x34
 8005bb4:	f24b 6001 	movw	r0, #46593	; 0xb601
 8005bb8:	f7fd fade 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 8005bbc:	2134      	movs	r1, #52	; 0x34
 8005bbe:	f24b 6002 	movw	r0, #46594	; 0xb602
 8005bc2:	f7fd fad9 	bl	8003178 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 8005bc6:	210d      	movs	r1, #13
 8005bc8:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8005bcc:	f7fd fad4 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 8005bd0:	210d      	movs	r1, #13
 8005bd2:	f24b 1001 	movw	r0, #45313	; 0xb101
 8005bd6:	f7fd facf 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 8005bda:	210d      	movs	r1, #13
 8005bdc:	f24b 1002 	movw	r0, #45314	; 0xb102
 8005be0:	f7fd faca 	bl	8003178 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 8005be4:	2134      	movs	r1, #52	; 0x34
 8005be6:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8005bea:	f7fd fac5 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 8005bee:	2134      	movs	r1, #52	; 0x34
 8005bf0:	f24b 7001 	movw	r0, #46849	; 0xb701
 8005bf4:	f7fd fac0 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8005bf8:	2134      	movs	r1, #52	; 0x34
 8005bfa:	f24b 7002 	movw	r0, #46850	; 0xb702
 8005bfe:	f7fd fabb 	bl	8003178 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 8005c02:	2100      	movs	r1, #0
 8005c04:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8005c08:	f7fd fab6 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	f24b 2001 	movw	r0, #45569	; 0xb201
 8005c12:	f7fd fab1 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 8005c16:	2100      	movs	r1, #0
 8005c18:	f24b 2002 	movw	r0, #45570	; 0xb202
 8005c1c:	f7fd faac 	bl	8003178 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8005c20:	2124      	movs	r1, #36	; 0x24
 8005c22:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8005c26:	f7fd faa7 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 8005c2a:	2124      	movs	r1, #36	; 0x24
 8005c2c:	f64b 0001 	movw	r0, #47105	; 0xb801
 8005c30:	f7fd faa2 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 8005c34:	2124      	movs	r1, #36	; 0x24
 8005c36:	f64b 0002 	movw	r0, #47106	; 0xb802
 8005c3a:	f7fd fa9d 	bl	8003178 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 8005c3e:	2101      	movs	r1, #1
 8005c40:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8005c44:	f7fd fa98 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8005c48:	210f      	movs	r1, #15
 8005c4a:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8005c4e:	f7fd fa93 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 8005c52:	210f      	movs	r1, #15
 8005c54:	f24b 3001 	movw	r0, #45825	; 0xb301
 8005c58:	f7fd fa8e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 8005c5c:	210f      	movs	r1, #15
 8005c5e:	f24b 3002 	movw	r0, #45826	; 0xb302
 8005c62:	f7fd fa89 	bl	8003178 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 8005c66:	2134      	movs	r1, #52	; 0x34
 8005c68:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8005c6c:	f7fd fa84 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8005c70:	2134      	movs	r1, #52	; 0x34
 8005c72:	f64b 1001 	movw	r0, #47361	; 0xb901
 8005c76:	f7fd fa7f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 8005c7a:	2134      	movs	r1, #52	; 0x34
 8005c7c:	f64b 1002 	movw	r0, #47362	; 0xb902
 8005c80:	f7fd fa7a 	bl	8003178 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 8005c84:	2108      	movs	r1, #8
 8005c86:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8005c8a:	f7fd fa75 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 8005c8e:	2108      	movs	r1, #8
 8005c90:	f24b 5001 	movw	r0, #46337	; 0xb501
 8005c94:	f7fd fa70 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 8005c98:	2108      	movs	r1, #8
 8005c9a:	f24b 5002 	movw	r0, #46338	; 0xb502
 8005c9e:	f7fd fa6b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 8005ca2:	2103      	movs	r1, #3
 8005ca4:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8005ca8:	f7fd fa66 	bl	8003178 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 8005cac:	2124      	movs	r1, #36	; 0x24
 8005cae:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8005cb2:	f7fd fa61 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 8005cb6:	2124      	movs	r1, #36	; 0x24
 8005cb8:	f64b 2001 	movw	r0, #47617	; 0xba01
 8005cbc:	f7fd fa5c 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 8005cc0:	2124      	movs	r1, #36	; 0x24
 8005cc2:	f64b 2002 	movw	r0, #47618	; 0xba02
 8005cc6:	f7fd fa57 	bl	8003178 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 8005cca:	2100      	movs	r1, #0
 8005ccc:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8005cd0:	f7fd fa52 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 8005cd4:	2178      	movs	r1, #120	; 0x78
 8005cd6:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8005cda:	f7fd fa4d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8005cde:	2100      	movs	r1, #0
 8005ce0:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8005ce4:	f7fd fa48 	bl	8003178 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8005ce8:	2100      	movs	r1, #0
 8005cea:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8005cee:	f7fd fa43 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 8005cf2:	2178      	movs	r1, #120	; 0x78
 8005cf4:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8005cf8:	f7fd fa3e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8005d02:	f7fd fa39 	bl	8003178 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 8005d06:	2100      	movs	r1, #0
 8005d08:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8005d0c:	f7fd fa34 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8005d10:	2164      	movs	r1, #100	; 0x64
 8005d12:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8005d16:	f7fd fa2f 	bl	8003178 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8005d20:	f7fd fa2a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 8005d24:	2133      	movs	r1, #51	; 0x33
 8005d26:	f24d 1001 	movw	r0, #53505	; 0xd101
 8005d2a:	f7fd fa25 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 8005d2e:	2100      	movs	r1, #0
 8005d30:	f24d 1002 	movw	r0, #53506	; 0xd102
 8005d34:	f7fd fa20 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8005d38:	2134      	movs	r1, #52	; 0x34
 8005d3a:	f24d 1003 	movw	r0, #53507	; 0xd103
 8005d3e:	f7fd fa1b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 8005d42:	2100      	movs	r1, #0
 8005d44:	f24d 1004 	movw	r0, #53508	; 0xd104
 8005d48:	f7fd fa16 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 8005d4c:	213a      	movs	r1, #58	; 0x3a
 8005d4e:	f24d 1005 	movw	r0, #53509	; 0xd105
 8005d52:	f7fd fa11 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 8005d56:	2100      	movs	r1, #0
 8005d58:	f24d 1006 	movw	r0, #53510	; 0xd106
 8005d5c:	f7fd fa0c 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8005d60:	214a      	movs	r1, #74	; 0x4a
 8005d62:	f24d 1007 	movw	r0, #53511	; 0xd107
 8005d66:	f7fd fa07 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	f24d 1008 	movw	r0, #53512	; 0xd108
 8005d70:	f7fd fa02 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 8005d74:	215c      	movs	r1, #92	; 0x5c
 8005d76:	f24d 1009 	movw	r0, #53513	; 0xd109
 8005d7a:	f7fd f9fd 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 8005d7e:	2100      	movs	r1, #0
 8005d80:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8005d84:	f7fd f9f8 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 8005d88:	2181      	movs	r1, #129	; 0x81
 8005d8a:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8005d8e:	f7fd f9f3 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 8005d92:	2100      	movs	r1, #0
 8005d94:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8005d98:	f7fd f9ee 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 8005d9c:	21a6      	movs	r1, #166	; 0xa6
 8005d9e:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8005da2:	f7fd f9e9 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 8005da6:	2100      	movs	r1, #0
 8005da8:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8005dac:	f7fd f9e4 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 8005db0:	21e5      	movs	r1, #229	; 0xe5
 8005db2:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8005db6:	f7fd f9df 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 8005dba:	2101      	movs	r1, #1
 8005dbc:	f24d 1010 	movw	r0, #53520	; 0xd110
 8005dc0:	f7fd f9da 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 8005dc4:	2113      	movs	r1, #19
 8005dc6:	f24d 1011 	movw	r0, #53521	; 0xd111
 8005dca:	f7fd f9d5 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 8005dce:	2101      	movs	r1, #1
 8005dd0:	f24d 1012 	movw	r0, #53522	; 0xd112
 8005dd4:	f7fd f9d0 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8005dd8:	2154      	movs	r1, #84	; 0x54
 8005dda:	f24d 1013 	movw	r0, #53523	; 0xd113
 8005dde:	f7fd f9cb 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 8005de2:	2101      	movs	r1, #1
 8005de4:	f24d 1014 	movw	r0, #53524	; 0xd114
 8005de8:	f7fd f9c6 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 8005dec:	2182      	movs	r1, #130	; 0x82
 8005dee:	f24d 1015 	movw	r0, #53525	; 0xd115
 8005df2:	f7fd f9c1 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 8005df6:	2101      	movs	r1, #1
 8005df8:	f24d 1016 	movw	r0, #53526	; 0xd116
 8005dfc:	f7fd f9bc 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8005e00:	21ca      	movs	r1, #202	; 0xca
 8005e02:	f24d 1017 	movw	r0, #53527	; 0xd117
 8005e06:	f7fd f9b7 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 8005e0a:	2102      	movs	r1, #2
 8005e0c:	f24d 1018 	movw	r0, #53528	; 0xd118
 8005e10:	f7fd f9b2 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 8005e14:	2100      	movs	r1, #0
 8005e16:	f24d 1019 	movw	r0, #53529	; 0xd119
 8005e1a:	f7fd f9ad 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 8005e1e:	2102      	movs	r1, #2
 8005e20:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8005e24:	f7fd f9a8 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8005e28:	2101      	movs	r1, #1
 8005e2a:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8005e2e:	f7fd f9a3 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 8005e32:	2102      	movs	r1, #2
 8005e34:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8005e38:	f7fd f99e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 8005e3c:	2134      	movs	r1, #52	; 0x34
 8005e3e:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8005e42:	f7fd f999 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 8005e46:	2102      	movs	r1, #2
 8005e48:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8005e4c:	f7fd f994 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8005e50:	2167      	movs	r1, #103	; 0x67
 8005e52:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8005e56:	f7fd f98f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 8005e5a:	2102      	movs	r1, #2
 8005e5c:	f24d 1020 	movw	r0, #53536	; 0xd120
 8005e60:	f7fd f98a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 8005e64:	2184      	movs	r1, #132	; 0x84
 8005e66:	f24d 1021 	movw	r0, #53537	; 0xd121
 8005e6a:	f7fd f985 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 8005e6e:	2102      	movs	r1, #2
 8005e70:	f24d 1022 	movw	r0, #53538	; 0xd122
 8005e74:	f7fd f980 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 8005e78:	21a4      	movs	r1, #164	; 0xa4
 8005e7a:	f24d 1023 	movw	r0, #53539	; 0xd123
 8005e7e:	f7fd f97b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 8005e82:	2102      	movs	r1, #2
 8005e84:	f24d 1024 	movw	r0, #53540	; 0xd124
 8005e88:	f7fd f976 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 8005e8c:	21b7      	movs	r1, #183	; 0xb7
 8005e8e:	f24d 1025 	movw	r0, #53541	; 0xd125
 8005e92:	f7fd f971 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 8005e96:	2102      	movs	r1, #2
 8005e98:	f24d 1026 	movw	r0, #53542	; 0xd126
 8005e9c:	f7fd f96c 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 8005ea0:	21cf      	movs	r1, #207	; 0xcf
 8005ea2:	f24d 1027 	movw	r0, #53543	; 0xd127
 8005ea6:	f7fd f967 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 8005eaa:	2102      	movs	r1, #2
 8005eac:	f24d 1028 	movw	r0, #53544	; 0xd128
 8005eb0:	f7fd f962 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 8005eb4:	21de      	movs	r1, #222	; 0xde
 8005eb6:	f24d 1029 	movw	r0, #53545	; 0xd129
 8005eba:	f7fd f95d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 8005ebe:	2102      	movs	r1, #2
 8005ec0:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8005ec4:	f7fd f958 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 8005ec8:	21f2      	movs	r1, #242	; 0xf2
 8005eca:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8005ece:	f7fd f953 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 8005ed2:	2102      	movs	r1, #2
 8005ed4:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8005ed8:	f7fd f94e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 8005edc:	21fe      	movs	r1, #254	; 0xfe
 8005ede:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8005ee2:	f7fd f949 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 8005ee6:	2103      	movs	r1, #3
 8005ee8:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8005eec:	f7fd f944 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8005ef0:	2110      	movs	r1, #16
 8005ef2:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8005ef6:	f7fd f93f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 8005efa:	2103      	movs	r1, #3
 8005efc:	f24d 1030 	movw	r0, #53552	; 0xd130
 8005f00:	f7fd f93a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 8005f04:	2133      	movs	r1, #51	; 0x33
 8005f06:	f24d 1031 	movw	r0, #53553	; 0xd131
 8005f0a:	f7fd f935 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 8005f0e:	2103      	movs	r1, #3
 8005f10:	f24d 1032 	movw	r0, #53554	; 0xd132
 8005f14:	f7fd f930 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8005f18:	216d      	movs	r1, #109	; 0x6d
 8005f1a:	f24d 1033 	movw	r0, #53555	; 0xd133
 8005f1e:	f7fd f92b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 8005f22:	2100      	movs	r1, #0
 8005f24:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8005f28:	f7fd f926 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 8005f2c:	2133      	movs	r1, #51	; 0x33
 8005f2e:	f24d 2001 	movw	r0, #53761	; 0xd201
 8005f32:	f7fd f921 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 8005f36:	2100      	movs	r1, #0
 8005f38:	f24d 2002 	movw	r0, #53762	; 0xd202
 8005f3c:	f7fd f91c 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8005f40:	2134      	movs	r1, #52	; 0x34
 8005f42:	f24d 2003 	movw	r0, #53763	; 0xd203
 8005f46:	f7fd f917 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	f24d 2004 	movw	r0, #53764	; 0xd204
 8005f50:	f7fd f912 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 8005f54:	213a      	movs	r1, #58	; 0x3a
 8005f56:	f24d 2005 	movw	r0, #53765	; 0xd205
 8005f5a:	f7fd f90d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 8005f5e:	2100      	movs	r1, #0
 8005f60:	f24d 2006 	movw	r0, #53766	; 0xd206
 8005f64:	f7fd f908 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8005f68:	214a      	movs	r1, #74	; 0x4a
 8005f6a:	f24d 2007 	movw	r0, #53767	; 0xd207
 8005f6e:	f7fd f903 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 8005f72:	2100      	movs	r1, #0
 8005f74:	f24d 2008 	movw	r0, #53768	; 0xd208
 8005f78:	f7fd f8fe 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 8005f7c:	215c      	movs	r1, #92	; 0x5c
 8005f7e:	f24d 2009 	movw	r0, #53769	; 0xd209
 8005f82:	f7fd f8f9 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 8005f86:	2100      	movs	r1, #0
 8005f88:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8005f8c:	f7fd f8f4 	bl	8003178 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8005f90:	2181      	movs	r1, #129	; 0x81
 8005f92:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8005f96:	f7fd f8ef 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8005fa0:	f7fd f8ea 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 8005fa4:	21a6      	movs	r1, #166	; 0xa6
 8005fa6:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8005faa:	f7fd f8e5 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 8005fae:	2100      	movs	r1, #0
 8005fb0:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8005fb4:	f7fd f8e0 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8005fb8:	21e5      	movs	r1, #229	; 0xe5
 8005fba:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8005fbe:	f7fd f8db 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	f24d 2010 	movw	r0, #53776	; 0xd210
 8005fc8:	f7fd f8d6 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 8005fcc:	2113      	movs	r1, #19
 8005fce:	f24d 2011 	movw	r0, #53777	; 0xd211
 8005fd2:	f7fd f8d1 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	f24d 2012 	movw	r0, #53778	; 0xd212
 8005fdc:	f7fd f8cc 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8005fe0:	2154      	movs	r1, #84	; 0x54
 8005fe2:	f24d 2013 	movw	r0, #53779	; 0xd213
 8005fe6:	f7fd f8c7 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 8005fea:	2101      	movs	r1, #1
 8005fec:	f24d 2014 	movw	r0, #53780	; 0xd214
 8005ff0:	f7fd f8c2 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 8005ff4:	2182      	movs	r1, #130	; 0x82
 8005ff6:	f24d 2015 	movw	r0, #53781	; 0xd215
 8005ffa:	f7fd f8bd 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 8005ffe:	2101      	movs	r1, #1
 8006000:	f24d 2016 	movw	r0, #53782	; 0xd216
 8006004:	f7fd f8b8 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8006008:	21ca      	movs	r1, #202	; 0xca
 800600a:	f24d 2017 	movw	r0, #53783	; 0xd217
 800600e:	f7fd f8b3 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 8006012:	2102      	movs	r1, #2
 8006014:	f24d 2018 	movw	r0, #53784	; 0xd218
 8006018:	f7fd f8ae 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 800601c:	2100      	movs	r1, #0
 800601e:	f24d 2019 	movw	r0, #53785	; 0xd219
 8006022:	f7fd f8a9 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 8006026:	2102      	movs	r1, #2
 8006028:	f24d 201a 	movw	r0, #53786	; 0xd21a
 800602c:	f7fd f8a4 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8006030:	2101      	movs	r1, #1
 8006032:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8006036:	f7fd f89f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 800603a:	2102      	movs	r1, #2
 800603c:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8006040:	f7fd f89a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 8006044:	2134      	movs	r1, #52	; 0x34
 8006046:	f24d 201d 	movw	r0, #53789	; 0xd21d
 800604a:	f7fd f895 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 800604e:	2102      	movs	r1, #2
 8006050:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8006054:	f7fd f890 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8006058:	2167      	movs	r1, #103	; 0x67
 800605a:	f24d 201f 	movw	r0, #53791	; 0xd21f
 800605e:	f7fd f88b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 8006062:	2102      	movs	r1, #2
 8006064:	f24d 2020 	movw	r0, #53792	; 0xd220
 8006068:	f7fd f886 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 800606c:	2184      	movs	r1, #132	; 0x84
 800606e:	f24d 2021 	movw	r0, #53793	; 0xd221
 8006072:	f7fd f881 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 8006076:	2102      	movs	r1, #2
 8006078:	f24d 2022 	movw	r0, #53794	; 0xd222
 800607c:	f7fd f87c 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8006080:	21a4      	movs	r1, #164	; 0xa4
 8006082:	f24d 2023 	movw	r0, #53795	; 0xd223
 8006086:	f7fd f877 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 800608a:	2102      	movs	r1, #2
 800608c:	f24d 2024 	movw	r0, #53796	; 0xd224
 8006090:	f7fd f872 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 8006094:	21b7      	movs	r1, #183	; 0xb7
 8006096:	f24d 2025 	movw	r0, #53797	; 0xd225
 800609a:	f7fd f86d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 800609e:	2102      	movs	r1, #2
 80060a0:	f24d 2026 	movw	r0, #53798	; 0xd226
 80060a4:	f7fd f868 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 80060a8:	21cf      	movs	r1, #207	; 0xcf
 80060aa:	f24d 2027 	movw	r0, #53799	; 0xd227
 80060ae:	f7fd f863 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 80060b2:	2102      	movs	r1, #2
 80060b4:	f24d 2028 	movw	r0, #53800	; 0xd228
 80060b8:	f7fd f85e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 80060bc:	21de      	movs	r1, #222	; 0xde
 80060be:	f24d 2029 	movw	r0, #53801	; 0xd229
 80060c2:	f7fd f859 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 80060c6:	2102      	movs	r1, #2
 80060c8:	f24d 202a 	movw	r0, #53802	; 0xd22a
 80060cc:	f7fd f854 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 80060d0:	21f2      	movs	r1, #242	; 0xf2
 80060d2:	f24d 202b 	movw	r0, #53803	; 0xd22b
 80060d6:	f7fd f84f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 80060da:	2102      	movs	r1, #2
 80060dc:	f24d 202c 	movw	r0, #53804	; 0xd22c
 80060e0:	f7fd f84a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 80060e4:	21fe      	movs	r1, #254	; 0xfe
 80060e6:	f24d 202d 	movw	r0, #53805	; 0xd22d
 80060ea:	f7fd f845 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 80060ee:	2103      	movs	r1, #3
 80060f0:	f24d 202e 	movw	r0, #53806	; 0xd22e
 80060f4:	f7fd f840 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 80060f8:	2110      	movs	r1, #16
 80060fa:	f24d 202f 	movw	r0, #53807	; 0xd22f
 80060fe:	f7fd f83b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 8006102:	2103      	movs	r1, #3
 8006104:	f24d 2030 	movw	r0, #53808	; 0xd230
 8006108:	f7fd f836 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 800610c:	2133      	movs	r1, #51	; 0x33
 800610e:	f24d 2031 	movw	r0, #53809	; 0xd231
 8006112:	f7fd f831 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 8006116:	2103      	movs	r1, #3
 8006118:	f24d 2032 	movw	r0, #53810	; 0xd232
 800611c:	f7fd f82c 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8006120:	216d      	movs	r1, #109	; 0x6d
 8006122:	f24d 2033 	movw	r0, #53811	; 0xd233
 8006126:	f7fd f827 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 800612a:	2100      	movs	r1, #0
 800612c:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8006130:	f7fd f822 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 8006134:	2133      	movs	r1, #51	; 0x33
 8006136:	f24d 3001 	movw	r0, #54017	; 0xd301
 800613a:	f7fd f81d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 800613e:	2100      	movs	r1, #0
 8006140:	f24d 3002 	movw	r0, #54018	; 0xd302
 8006144:	f7fd f818 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8006148:	2134      	movs	r1, #52	; 0x34
 800614a:	f24d 3003 	movw	r0, #54019	; 0xd303
 800614e:	f7fd f813 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 8006152:	2100      	movs	r1, #0
 8006154:	f24d 3004 	movw	r0, #54020	; 0xd304
 8006158:	f7fd f80e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 800615c:	213a      	movs	r1, #58	; 0x3a
 800615e:	f24d 3005 	movw	r0, #54021	; 0xd305
 8006162:	f7fd f809 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 8006166:	2100      	movs	r1, #0
 8006168:	f24d 3006 	movw	r0, #54022	; 0xd306
 800616c:	f7fd f804 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8006170:	214a      	movs	r1, #74	; 0x4a
 8006172:	f24d 3007 	movw	r0, #54023	; 0xd307
 8006176:	f7fc ffff 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 800617a:	2100      	movs	r1, #0
 800617c:	f24d 3008 	movw	r0, #54024	; 0xd308
 8006180:	f7fc fffa 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 8006184:	215c      	movs	r1, #92	; 0x5c
 8006186:	f24d 3009 	movw	r0, #54025	; 0xd309
 800618a:	f7fc fff5 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 800618e:	2100      	movs	r1, #0
 8006190:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8006194:	f7fc fff0 	bl	8003178 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8006198:	2181      	movs	r1, #129	; 0x81
 800619a:	f24d 300b 	movw	r0, #54027	; 0xd30b
 800619e:	f7fc ffeb 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 80061a2:	2100      	movs	r1, #0
 80061a4:	f24d 300c 	movw	r0, #54028	; 0xd30c
 80061a8:	f7fc ffe6 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 80061ac:	21a6      	movs	r1, #166	; 0xa6
 80061ae:	f24d 300d 	movw	r0, #54029	; 0xd30d
 80061b2:	f7fc ffe1 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 80061b6:	2100      	movs	r1, #0
 80061b8:	f24d 300e 	movw	r0, #54030	; 0xd30e
 80061bc:	f7fc ffdc 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 80061c0:	21e5      	movs	r1, #229	; 0xe5
 80061c2:	f24d 300f 	movw	r0, #54031	; 0xd30f
 80061c6:	f7fc ffd7 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 80061ca:	2101      	movs	r1, #1
 80061cc:	f24d 3010 	movw	r0, #54032	; 0xd310
 80061d0:	f7fc ffd2 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 80061d4:	2113      	movs	r1, #19
 80061d6:	f24d 3011 	movw	r0, #54033	; 0xd311
 80061da:	f7fc ffcd 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 80061de:	2101      	movs	r1, #1
 80061e0:	f24d 3012 	movw	r0, #54034	; 0xd312
 80061e4:	f7fc ffc8 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 80061e8:	2154      	movs	r1, #84	; 0x54
 80061ea:	f24d 3013 	movw	r0, #54035	; 0xd313
 80061ee:	f7fc ffc3 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 80061f2:	2101      	movs	r1, #1
 80061f4:	f24d 3014 	movw	r0, #54036	; 0xd314
 80061f8:	f7fc ffbe 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 80061fc:	2182      	movs	r1, #130	; 0x82
 80061fe:	f24d 3015 	movw	r0, #54037	; 0xd315
 8006202:	f7fc ffb9 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 8006206:	2101      	movs	r1, #1
 8006208:	f24d 3016 	movw	r0, #54038	; 0xd316
 800620c:	f7fc ffb4 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8006210:	21ca      	movs	r1, #202	; 0xca
 8006212:	f24d 3017 	movw	r0, #54039	; 0xd317
 8006216:	f7fc ffaf 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 800621a:	2102      	movs	r1, #2
 800621c:	f24d 3018 	movw	r0, #54040	; 0xd318
 8006220:	f7fc ffaa 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8006224:	2100      	movs	r1, #0
 8006226:	f24d 3019 	movw	r0, #54041	; 0xd319
 800622a:	f7fc ffa5 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 800622e:	2102      	movs	r1, #2
 8006230:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8006234:	f7fc ffa0 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8006238:	2101      	movs	r1, #1
 800623a:	f24d 301b 	movw	r0, #54043	; 0xd31b
 800623e:	f7fc ff9b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8006242:	2102      	movs	r1, #2
 8006244:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8006248:	f7fc ff96 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 800624c:	2134      	movs	r1, #52	; 0x34
 800624e:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8006252:	f7fc ff91 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8006256:	2102      	movs	r1, #2
 8006258:	f24d 301e 	movw	r0, #54046	; 0xd31e
 800625c:	f7fc ff8c 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8006260:	2167      	movs	r1, #103	; 0x67
 8006262:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8006266:	f7fc ff87 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 800626a:	2102      	movs	r1, #2
 800626c:	f24d 3020 	movw	r0, #54048	; 0xd320
 8006270:	f7fc ff82 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8006274:	2184      	movs	r1, #132	; 0x84
 8006276:	f24d 3021 	movw	r0, #54049	; 0xd321
 800627a:	f7fc ff7d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 800627e:	2102      	movs	r1, #2
 8006280:	f24d 3022 	movw	r0, #54050	; 0xd322
 8006284:	f7fc ff78 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8006288:	21a4      	movs	r1, #164	; 0xa4
 800628a:	f24d 3023 	movw	r0, #54051	; 0xd323
 800628e:	f7fc ff73 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8006292:	2102      	movs	r1, #2
 8006294:	f24d 3024 	movw	r0, #54052	; 0xd324
 8006298:	f7fc ff6e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 800629c:	21b7      	movs	r1, #183	; 0xb7
 800629e:	f24d 3025 	movw	r0, #54053	; 0xd325
 80062a2:	f7fc ff69 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 80062a6:	2102      	movs	r1, #2
 80062a8:	f24d 3026 	movw	r0, #54054	; 0xd326
 80062ac:	f7fc ff64 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 80062b0:	21cf      	movs	r1, #207	; 0xcf
 80062b2:	f24d 3027 	movw	r0, #54055	; 0xd327
 80062b6:	f7fc ff5f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 80062ba:	2102      	movs	r1, #2
 80062bc:	f24d 3028 	movw	r0, #54056	; 0xd328
 80062c0:	f7fc ff5a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 80062c4:	21de      	movs	r1, #222	; 0xde
 80062c6:	f24d 3029 	movw	r0, #54057	; 0xd329
 80062ca:	f7fc ff55 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 80062ce:	2102      	movs	r1, #2
 80062d0:	f24d 302a 	movw	r0, #54058	; 0xd32a
 80062d4:	f7fc ff50 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 80062d8:	21f2      	movs	r1, #242	; 0xf2
 80062da:	f24d 302b 	movw	r0, #54059	; 0xd32b
 80062de:	f7fc ff4b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 80062e2:	2102      	movs	r1, #2
 80062e4:	f24d 302c 	movw	r0, #54060	; 0xd32c
 80062e8:	f7fc ff46 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 80062ec:	21fe      	movs	r1, #254	; 0xfe
 80062ee:	f24d 302d 	movw	r0, #54061	; 0xd32d
 80062f2:	f7fc ff41 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 80062f6:	2103      	movs	r1, #3
 80062f8:	f24d 302e 	movw	r0, #54062	; 0xd32e
 80062fc:	f7fc ff3c 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8006300:	2110      	movs	r1, #16
 8006302:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8006306:	f7fc ff37 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 800630a:	2103      	movs	r1, #3
 800630c:	f24d 3030 	movw	r0, #54064	; 0xd330
 8006310:	f7fc ff32 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8006314:	2133      	movs	r1, #51	; 0x33
 8006316:	f24d 3031 	movw	r0, #54065	; 0xd331
 800631a:	f7fc ff2d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 800631e:	2103      	movs	r1, #3
 8006320:	f24d 3032 	movw	r0, #54066	; 0xd332
 8006324:	f7fc ff28 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8006328:	216d      	movs	r1, #109	; 0x6d
 800632a:	f24d 3033 	movw	r0, #54067	; 0xd333
 800632e:	f7fc ff23 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8006332:	2100      	movs	r1, #0
 8006334:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8006338:	f7fc ff1e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 800633c:	2133      	movs	r1, #51	; 0x33
 800633e:	f24d 4001 	movw	r0, #54273	; 0xd401
 8006342:	f7fc ff19 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8006346:	2100      	movs	r1, #0
 8006348:	f24d 4002 	movw	r0, #54274	; 0xd402
 800634c:	f7fc ff14 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8006350:	2134      	movs	r1, #52	; 0x34
 8006352:	f24d 4003 	movw	r0, #54275	; 0xd403
 8006356:	f7fc ff0f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 800635a:	2100      	movs	r1, #0
 800635c:	f24d 4004 	movw	r0, #54276	; 0xd404
 8006360:	f7fc ff0a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8006364:	213a      	movs	r1, #58	; 0x3a
 8006366:	f24d 4005 	movw	r0, #54277	; 0xd405
 800636a:	f7fc ff05 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 800636e:	2100      	movs	r1, #0
 8006370:	f24d 4006 	movw	r0, #54278	; 0xd406
 8006374:	f7fc ff00 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8006378:	214a      	movs	r1, #74	; 0x4a
 800637a:	f24d 4007 	movw	r0, #54279	; 0xd407
 800637e:	f7fc fefb 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8006382:	2100      	movs	r1, #0
 8006384:	f24d 4008 	movw	r0, #54280	; 0xd408
 8006388:	f7fc fef6 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 800638c:	215c      	movs	r1, #92	; 0x5c
 800638e:	f24d 4009 	movw	r0, #54281	; 0xd409
 8006392:	f7fc fef1 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8006396:	2100      	movs	r1, #0
 8006398:	f24d 400a 	movw	r0, #54282	; 0xd40a
 800639c:	f7fc feec 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 80063a0:	2181      	movs	r1, #129	; 0x81
 80063a2:	f24d 400b 	movw	r0, #54283	; 0xd40b
 80063a6:	f7fc fee7 	bl	8003178 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 80063aa:	2100      	movs	r1, #0
 80063ac:	f24d 400c 	movw	r0, #54284	; 0xd40c
 80063b0:	f7fc fee2 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 80063b4:	21a6      	movs	r1, #166	; 0xa6
 80063b6:	f24d 400d 	movw	r0, #54285	; 0xd40d
 80063ba:	f7fc fedd 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 80063be:	2100      	movs	r1, #0
 80063c0:	f24d 400e 	movw	r0, #54286	; 0xd40e
 80063c4:	f7fc fed8 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 80063c8:	21e5      	movs	r1, #229	; 0xe5
 80063ca:	f24d 400f 	movw	r0, #54287	; 0xd40f
 80063ce:	f7fc fed3 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 80063d2:	2101      	movs	r1, #1
 80063d4:	f24d 4010 	movw	r0, #54288	; 0xd410
 80063d8:	f7fc fece 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 80063dc:	2113      	movs	r1, #19
 80063de:	f24d 4011 	movw	r0, #54289	; 0xd411
 80063e2:	f7fc fec9 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 80063e6:	2101      	movs	r1, #1
 80063e8:	f24d 4012 	movw	r0, #54290	; 0xd412
 80063ec:	f7fc fec4 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 80063f0:	2154      	movs	r1, #84	; 0x54
 80063f2:	f24d 4013 	movw	r0, #54291	; 0xd413
 80063f6:	f7fc febf 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 80063fa:	2101      	movs	r1, #1
 80063fc:	f24d 4014 	movw	r0, #54292	; 0xd414
 8006400:	f7fc feba 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8006404:	2182      	movs	r1, #130	; 0x82
 8006406:	f24d 4015 	movw	r0, #54293	; 0xd415
 800640a:	f7fc feb5 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 800640e:	2101      	movs	r1, #1
 8006410:	f24d 4016 	movw	r0, #54294	; 0xd416
 8006414:	f7fc feb0 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8006418:	21ca      	movs	r1, #202	; 0xca
 800641a:	f24d 4017 	movw	r0, #54295	; 0xd417
 800641e:	f7fc feab 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8006422:	2102      	movs	r1, #2
 8006424:	f24d 4018 	movw	r0, #54296	; 0xd418
 8006428:	f7fc fea6 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 800642c:	2100      	movs	r1, #0
 800642e:	f24d 4019 	movw	r0, #54297	; 0xd419
 8006432:	f7fc fea1 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8006436:	2102      	movs	r1, #2
 8006438:	f24d 401a 	movw	r0, #54298	; 0xd41a
 800643c:	f7fc fe9c 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8006440:	2101      	movs	r1, #1
 8006442:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8006446:	f7fc fe97 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 800644a:	2102      	movs	r1, #2
 800644c:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8006450:	f7fc fe92 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8006454:	2134      	movs	r1, #52	; 0x34
 8006456:	f24d 401d 	movw	r0, #54301	; 0xd41d
 800645a:	f7fc fe8d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 800645e:	2102      	movs	r1, #2
 8006460:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8006464:	f7fc fe88 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8006468:	2167      	movs	r1, #103	; 0x67
 800646a:	f24d 401f 	movw	r0, #54303	; 0xd41f
 800646e:	f7fc fe83 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8006472:	2102      	movs	r1, #2
 8006474:	f24d 4020 	movw	r0, #54304	; 0xd420
 8006478:	f7fc fe7e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 800647c:	2184      	movs	r1, #132	; 0x84
 800647e:	f24d 4021 	movw	r0, #54305	; 0xd421
 8006482:	f7fc fe79 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8006486:	2102      	movs	r1, #2
 8006488:	f24d 4022 	movw	r0, #54306	; 0xd422
 800648c:	f7fc fe74 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8006490:	21a4      	movs	r1, #164	; 0xa4
 8006492:	f24d 4023 	movw	r0, #54307	; 0xd423
 8006496:	f7fc fe6f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 800649a:	2102      	movs	r1, #2
 800649c:	f24d 4024 	movw	r0, #54308	; 0xd424
 80064a0:	f7fc fe6a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 80064a4:	21b7      	movs	r1, #183	; 0xb7
 80064a6:	f24d 4025 	movw	r0, #54309	; 0xd425
 80064aa:	f7fc fe65 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 80064ae:	2102      	movs	r1, #2
 80064b0:	f24d 4026 	movw	r0, #54310	; 0xd426
 80064b4:	f7fc fe60 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 80064b8:	21cf      	movs	r1, #207	; 0xcf
 80064ba:	f24d 4027 	movw	r0, #54311	; 0xd427
 80064be:	f7fc fe5b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 80064c2:	2102      	movs	r1, #2
 80064c4:	f24d 4028 	movw	r0, #54312	; 0xd428
 80064c8:	f7fc fe56 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 80064cc:	21de      	movs	r1, #222	; 0xde
 80064ce:	f24d 4029 	movw	r0, #54313	; 0xd429
 80064d2:	f7fc fe51 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 80064d6:	2102      	movs	r1, #2
 80064d8:	f24d 402a 	movw	r0, #54314	; 0xd42a
 80064dc:	f7fc fe4c 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 80064e0:	21f2      	movs	r1, #242	; 0xf2
 80064e2:	f24d 402b 	movw	r0, #54315	; 0xd42b
 80064e6:	f7fc fe47 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 80064ea:	2102      	movs	r1, #2
 80064ec:	f24d 402c 	movw	r0, #54316	; 0xd42c
 80064f0:	f7fc fe42 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 80064f4:	21fe      	movs	r1, #254	; 0xfe
 80064f6:	f24d 402d 	movw	r0, #54317	; 0xd42d
 80064fa:	f7fc fe3d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 80064fe:	2103      	movs	r1, #3
 8006500:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8006504:	f7fc fe38 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8006508:	2110      	movs	r1, #16
 800650a:	f24d 402f 	movw	r0, #54319	; 0xd42f
 800650e:	f7fc fe33 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8006512:	2103      	movs	r1, #3
 8006514:	f24d 4030 	movw	r0, #54320	; 0xd430
 8006518:	f7fc fe2e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 800651c:	2133      	movs	r1, #51	; 0x33
 800651e:	f24d 4031 	movw	r0, #54321	; 0xd431
 8006522:	f7fc fe29 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8006526:	2103      	movs	r1, #3
 8006528:	f24d 4032 	movw	r0, #54322	; 0xd432
 800652c:	f7fc fe24 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8006530:	216d      	movs	r1, #109	; 0x6d
 8006532:	f24d 4033 	movw	r0, #54323	; 0xd433
 8006536:	f7fc fe1f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 800653a:	2100      	movs	r1, #0
 800653c:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8006540:	f7fc fe1a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8006544:	2133      	movs	r1, #51	; 0x33
 8006546:	f24d 5001 	movw	r0, #54529	; 0xd501
 800654a:	f7fc fe15 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 800654e:	2100      	movs	r1, #0
 8006550:	f24d 5002 	movw	r0, #54530	; 0xd502
 8006554:	f7fc fe10 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8006558:	2134      	movs	r1, #52	; 0x34
 800655a:	f24d 5003 	movw	r0, #54531	; 0xd503
 800655e:	f7fc fe0b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 8006562:	2100      	movs	r1, #0
 8006564:	f24d 5004 	movw	r0, #54532	; 0xd504
 8006568:	f7fc fe06 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 800656c:	213a      	movs	r1, #58	; 0x3a
 800656e:	f24d 5005 	movw	r0, #54533	; 0xd505
 8006572:	f7fc fe01 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 8006576:	2100      	movs	r1, #0
 8006578:	f24d 5006 	movw	r0, #54534	; 0xd506
 800657c:	f7fc fdfc 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8006580:	214a      	movs	r1, #74	; 0x4a
 8006582:	f24d 5007 	movw	r0, #54535	; 0xd507
 8006586:	f7fc fdf7 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 800658a:	2100      	movs	r1, #0
 800658c:	f24d 5008 	movw	r0, #54536	; 0xd508
 8006590:	f7fc fdf2 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 8006594:	215c      	movs	r1, #92	; 0x5c
 8006596:	f24d 5009 	movw	r0, #54537	; 0xd509
 800659a:	f7fc fded 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 800659e:	2100      	movs	r1, #0
 80065a0:	f24d 500a 	movw	r0, #54538	; 0xd50a
 80065a4:	f7fc fde8 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 80065a8:	2181      	movs	r1, #129	; 0x81
 80065aa:	f24d 500b 	movw	r0, #54539	; 0xd50b
 80065ae:	f7fc fde3 	bl	8003178 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 80065b2:	2100      	movs	r1, #0
 80065b4:	f24d 500c 	movw	r0, #54540	; 0xd50c
 80065b8:	f7fc fdde 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 80065bc:	21a6      	movs	r1, #166	; 0xa6
 80065be:	f24d 500d 	movw	r0, #54541	; 0xd50d
 80065c2:	f7fc fdd9 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 80065c6:	2100      	movs	r1, #0
 80065c8:	f24d 500e 	movw	r0, #54542	; 0xd50e
 80065cc:	f7fc fdd4 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 80065d0:	21e5      	movs	r1, #229	; 0xe5
 80065d2:	f24d 500f 	movw	r0, #54543	; 0xd50f
 80065d6:	f7fc fdcf 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 80065da:	2101      	movs	r1, #1
 80065dc:	f24d 5010 	movw	r0, #54544	; 0xd510
 80065e0:	f7fc fdca 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 80065e4:	2113      	movs	r1, #19
 80065e6:	f24d 5011 	movw	r0, #54545	; 0xd511
 80065ea:	f7fc fdc5 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 80065ee:	2101      	movs	r1, #1
 80065f0:	f24d 5012 	movw	r0, #54546	; 0xd512
 80065f4:	f7fc fdc0 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 80065f8:	2154      	movs	r1, #84	; 0x54
 80065fa:	f24d 5013 	movw	r0, #54547	; 0xd513
 80065fe:	f7fc fdbb 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8006602:	2101      	movs	r1, #1
 8006604:	f24d 5014 	movw	r0, #54548	; 0xd514
 8006608:	f7fc fdb6 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 800660c:	2182      	movs	r1, #130	; 0x82
 800660e:	f24d 5015 	movw	r0, #54549	; 0xd515
 8006612:	f7fc fdb1 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8006616:	2101      	movs	r1, #1
 8006618:	f24d 5016 	movw	r0, #54550	; 0xd516
 800661c:	f7fc fdac 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8006620:	21ca      	movs	r1, #202	; 0xca
 8006622:	f24d 5017 	movw	r0, #54551	; 0xd517
 8006626:	f7fc fda7 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 800662a:	2102      	movs	r1, #2
 800662c:	f24d 5018 	movw	r0, #54552	; 0xd518
 8006630:	f7fc fda2 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8006634:	2100      	movs	r1, #0
 8006636:	f24d 5019 	movw	r0, #54553	; 0xd519
 800663a:	f7fc fd9d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 800663e:	2102      	movs	r1, #2
 8006640:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8006644:	f7fc fd98 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8006648:	2101      	movs	r1, #1
 800664a:	f24d 501b 	movw	r0, #54555	; 0xd51b
 800664e:	f7fc fd93 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8006652:	2102      	movs	r1, #2
 8006654:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8006658:	f7fc fd8e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 800665c:	2134      	movs	r1, #52	; 0x34
 800665e:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8006662:	f7fc fd89 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8006666:	2102      	movs	r1, #2
 8006668:	f24d 501e 	movw	r0, #54558	; 0xd51e
 800666c:	f7fc fd84 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8006670:	2167      	movs	r1, #103	; 0x67
 8006672:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8006676:	f7fc fd7f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 800667a:	2102      	movs	r1, #2
 800667c:	f24d 5020 	movw	r0, #54560	; 0xd520
 8006680:	f7fc fd7a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8006684:	2184      	movs	r1, #132	; 0x84
 8006686:	f24d 5021 	movw	r0, #54561	; 0xd521
 800668a:	f7fc fd75 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 800668e:	2102      	movs	r1, #2
 8006690:	f24d 5022 	movw	r0, #54562	; 0xd522
 8006694:	f7fc fd70 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8006698:	21a4      	movs	r1, #164	; 0xa4
 800669a:	f24d 5023 	movw	r0, #54563	; 0xd523
 800669e:	f7fc fd6b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 80066a2:	2102      	movs	r1, #2
 80066a4:	f24d 5024 	movw	r0, #54564	; 0xd524
 80066a8:	f7fc fd66 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 80066ac:	21b7      	movs	r1, #183	; 0xb7
 80066ae:	f24d 5025 	movw	r0, #54565	; 0xd525
 80066b2:	f7fc fd61 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 80066b6:	2102      	movs	r1, #2
 80066b8:	f24d 5026 	movw	r0, #54566	; 0xd526
 80066bc:	f7fc fd5c 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 80066c0:	21cf      	movs	r1, #207	; 0xcf
 80066c2:	f24d 5027 	movw	r0, #54567	; 0xd527
 80066c6:	f7fc fd57 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 80066ca:	2102      	movs	r1, #2
 80066cc:	f24d 5028 	movw	r0, #54568	; 0xd528
 80066d0:	f7fc fd52 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 80066d4:	21de      	movs	r1, #222	; 0xde
 80066d6:	f24d 5029 	movw	r0, #54569	; 0xd529
 80066da:	f7fc fd4d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 80066de:	2102      	movs	r1, #2
 80066e0:	f24d 502a 	movw	r0, #54570	; 0xd52a
 80066e4:	f7fc fd48 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 80066e8:	21f2      	movs	r1, #242	; 0xf2
 80066ea:	f24d 502b 	movw	r0, #54571	; 0xd52b
 80066ee:	f7fc fd43 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 80066f2:	2102      	movs	r1, #2
 80066f4:	f24d 502c 	movw	r0, #54572	; 0xd52c
 80066f8:	f7fc fd3e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 80066fc:	21fe      	movs	r1, #254	; 0xfe
 80066fe:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8006702:	f7fc fd39 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 8006706:	2103      	movs	r1, #3
 8006708:	f24d 502e 	movw	r0, #54574	; 0xd52e
 800670c:	f7fc fd34 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8006710:	2110      	movs	r1, #16
 8006712:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8006716:	f7fc fd2f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 800671a:	2103      	movs	r1, #3
 800671c:	f24d 5030 	movw	r0, #54576	; 0xd530
 8006720:	f7fc fd2a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 8006724:	2133      	movs	r1, #51	; 0x33
 8006726:	f24d 5031 	movw	r0, #54577	; 0xd531
 800672a:	f7fc fd25 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 800672e:	2103      	movs	r1, #3
 8006730:	f24d 5032 	movw	r0, #54578	; 0xd532
 8006734:	f7fc fd20 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8006738:	216d      	movs	r1, #109	; 0x6d
 800673a:	f24d 5033 	movw	r0, #54579	; 0xd533
 800673e:	f7fc fd1b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 8006742:	2100      	movs	r1, #0
 8006744:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8006748:	f7fc fd16 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 800674c:	2133      	movs	r1, #51	; 0x33
 800674e:	f24d 6001 	movw	r0, #54785	; 0xd601
 8006752:	f7fc fd11 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 8006756:	2100      	movs	r1, #0
 8006758:	f24d 6002 	movw	r0, #54786	; 0xd602
 800675c:	f7fc fd0c 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8006760:	2134      	movs	r1, #52	; 0x34
 8006762:	f24d 6003 	movw	r0, #54787	; 0xd603
 8006766:	f7fc fd07 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 800676a:	2100      	movs	r1, #0
 800676c:	f24d 6004 	movw	r0, #54788	; 0xd604
 8006770:	f7fc fd02 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 8006774:	213a      	movs	r1, #58	; 0x3a
 8006776:	f24d 6005 	movw	r0, #54789	; 0xd605
 800677a:	f7fc fcfd 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 800677e:	2100      	movs	r1, #0
 8006780:	f24d 6006 	movw	r0, #54790	; 0xd606
 8006784:	f7fc fcf8 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 8006788:	214a      	movs	r1, #74	; 0x4a
 800678a:	f24d 6007 	movw	r0, #54791	; 0xd607
 800678e:	f7fc fcf3 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 8006792:	2100      	movs	r1, #0
 8006794:	f24d 6008 	movw	r0, #54792	; 0xd608
 8006798:	f7fc fcee 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 800679c:	215c      	movs	r1, #92	; 0x5c
 800679e:	f24d 6009 	movw	r0, #54793	; 0xd609
 80067a2:	f7fc fce9 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 80067a6:	2100      	movs	r1, #0
 80067a8:	f24d 600a 	movw	r0, #54794	; 0xd60a
 80067ac:	f7fc fce4 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 80067b0:	2181      	movs	r1, #129	; 0x81
 80067b2:	f24d 600b 	movw	r0, #54795	; 0xd60b
 80067b6:	f7fc fcdf 	bl	8003178 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 80067ba:	2100      	movs	r1, #0
 80067bc:	f24d 600c 	movw	r0, #54796	; 0xd60c
 80067c0:	f7fc fcda 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 80067c4:	21a6      	movs	r1, #166	; 0xa6
 80067c6:	f24d 600d 	movw	r0, #54797	; 0xd60d
 80067ca:	f7fc fcd5 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 80067ce:	2100      	movs	r1, #0
 80067d0:	f24d 600e 	movw	r0, #54798	; 0xd60e
 80067d4:	f7fc fcd0 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 80067d8:	21e5      	movs	r1, #229	; 0xe5
 80067da:	f24d 600f 	movw	r0, #54799	; 0xd60f
 80067de:	f7fc fccb 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 80067e2:	2101      	movs	r1, #1
 80067e4:	f24d 6010 	movw	r0, #54800	; 0xd610
 80067e8:	f7fc fcc6 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 80067ec:	2113      	movs	r1, #19
 80067ee:	f24d 6011 	movw	r0, #54801	; 0xd611
 80067f2:	f7fc fcc1 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 80067f6:	2101      	movs	r1, #1
 80067f8:	f24d 6012 	movw	r0, #54802	; 0xd612
 80067fc:	f7fc fcbc 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8006800:	2154      	movs	r1, #84	; 0x54
 8006802:	f24d 6013 	movw	r0, #54803	; 0xd613
 8006806:	f7fc fcb7 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 800680a:	2101      	movs	r1, #1
 800680c:	f24d 6014 	movw	r0, #54804	; 0xd614
 8006810:	f7fc fcb2 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 8006814:	2182      	movs	r1, #130	; 0x82
 8006816:	f24d 6015 	movw	r0, #54805	; 0xd615
 800681a:	f7fc fcad 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 800681e:	2101      	movs	r1, #1
 8006820:	f24d 6016 	movw	r0, #54806	; 0xd616
 8006824:	f7fc fca8 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8006828:	21ca      	movs	r1, #202	; 0xca
 800682a:	f24d 6017 	movw	r0, #54807	; 0xd617
 800682e:	f7fc fca3 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 8006832:	2102      	movs	r1, #2
 8006834:	f24d 6018 	movw	r0, #54808	; 0xd618
 8006838:	f7fc fc9e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 800683c:	2100      	movs	r1, #0
 800683e:	f24d 6019 	movw	r0, #54809	; 0xd619
 8006842:	f7fc fc99 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 8006846:	2102      	movs	r1, #2
 8006848:	f24d 601a 	movw	r0, #54810	; 0xd61a
 800684c:	f7fc fc94 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8006850:	2101      	movs	r1, #1
 8006852:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8006856:	f7fc fc8f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 800685a:	2102      	movs	r1, #2
 800685c:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8006860:	f7fc fc8a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 8006864:	2134      	movs	r1, #52	; 0x34
 8006866:	f24d 601d 	movw	r0, #54813	; 0xd61d
 800686a:	f7fc fc85 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 800686e:	2102      	movs	r1, #2
 8006870:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8006874:	f7fc fc80 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8006878:	2167      	movs	r1, #103	; 0x67
 800687a:	f24d 601f 	movw	r0, #54815	; 0xd61f
 800687e:	f7fc fc7b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 8006882:	2102      	movs	r1, #2
 8006884:	f24d 6020 	movw	r0, #54816	; 0xd620
 8006888:	f7fc fc76 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 800688c:	2184      	movs	r1, #132	; 0x84
 800688e:	f24d 6021 	movw	r0, #54817	; 0xd621
 8006892:	f7fc fc71 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 8006896:	2102      	movs	r1, #2
 8006898:	f24d 6022 	movw	r0, #54818	; 0xd622
 800689c:	f7fc fc6c 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 80068a0:	21a4      	movs	r1, #164	; 0xa4
 80068a2:	f24d 6023 	movw	r0, #54819	; 0xd623
 80068a6:	f7fc fc67 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 80068aa:	2102      	movs	r1, #2
 80068ac:	f24d 6024 	movw	r0, #54820	; 0xd624
 80068b0:	f7fc fc62 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 80068b4:	21b7      	movs	r1, #183	; 0xb7
 80068b6:	f24d 6025 	movw	r0, #54821	; 0xd625
 80068ba:	f7fc fc5d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 80068be:	2102      	movs	r1, #2
 80068c0:	f24d 6026 	movw	r0, #54822	; 0xd626
 80068c4:	f7fc fc58 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 80068c8:	21cf      	movs	r1, #207	; 0xcf
 80068ca:	f24d 6027 	movw	r0, #54823	; 0xd627
 80068ce:	f7fc fc53 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 80068d2:	2102      	movs	r1, #2
 80068d4:	f24d 6028 	movw	r0, #54824	; 0xd628
 80068d8:	f7fc fc4e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 80068dc:	21de      	movs	r1, #222	; 0xde
 80068de:	f24d 6029 	movw	r0, #54825	; 0xd629
 80068e2:	f7fc fc49 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 80068e6:	2102      	movs	r1, #2
 80068e8:	f24d 602a 	movw	r0, #54826	; 0xd62a
 80068ec:	f7fc fc44 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 80068f0:	21f2      	movs	r1, #242	; 0xf2
 80068f2:	f24d 602b 	movw	r0, #54827	; 0xd62b
 80068f6:	f7fc fc3f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 80068fa:	2102      	movs	r1, #2
 80068fc:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8006900:	f7fc fc3a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 8006904:	21fe      	movs	r1, #254	; 0xfe
 8006906:	f24d 602d 	movw	r0, #54829	; 0xd62d
 800690a:	f7fc fc35 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 800690e:	2103      	movs	r1, #3
 8006910:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8006914:	f7fc fc30 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8006918:	2110      	movs	r1, #16
 800691a:	f24d 602f 	movw	r0, #54831	; 0xd62f
 800691e:	f7fc fc2b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 8006922:	2103      	movs	r1, #3
 8006924:	f24d 6030 	movw	r0, #54832	; 0xd630
 8006928:	f7fc fc26 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 800692c:	2133      	movs	r1, #51	; 0x33
 800692e:	f24d 6031 	movw	r0, #54833	; 0xd631
 8006932:	f7fc fc21 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 8006936:	2103      	movs	r1, #3
 8006938:	f24d 6032 	movw	r0, #54834	; 0xd632
 800693c:	f7fc fc1c 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8006940:	216d      	movs	r1, #109	; 0x6d
 8006942:	f24d 6033 	movw	r0, #54835	; 0xd633
 8006946:	f7fc fc17 	bl	8003178 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 800694a:	2155      	movs	r1, #85	; 0x55
 800694c:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8006950:	f7fc fc12 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8006954:	21aa      	movs	r1, #170	; 0xaa
 8006956:	f24f 0001 	movw	r0, #61441	; 0xf001
 800695a:	f7fc fc0d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 800695e:	2152      	movs	r1, #82	; 0x52
 8006960:	f24f 0002 	movw	r0, #61442	; 0xf002
 8006964:	f7fc fc08 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8006968:	2108      	movs	r1, #8
 800696a:	f24f 0003 	movw	r0, #61443	; 0xf003
 800696e:	f7fc fc03 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 8006972:	2100      	movs	r1, #0
 8006974:	f24f 0004 	movw	r0, #61444	; 0xf004
 8006978:	f7fc fbfe 	bl	8003178 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 800697c:	21cc      	movs	r1, #204	; 0xcc
 800697e:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8006982:	f7fc fbf9 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8006986:	2100      	movs	r1, #0
 8006988:	f24b 1001 	movw	r0, #45313	; 0xb101
 800698c:	f7fc fbf4 	bl	8003178 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 8006990:	2105      	movs	r1, #5
 8006992:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8006996:	f7fc fbef 	bl	8003178 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 800699a:	2170      	movs	r1, #112	; 0x70
 800699c:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80069a0:	f7fc fbea 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 80069a4:	2170      	movs	r1, #112	; 0x70
 80069a6:	f24b 7001 	movw	r0, #46849	; 0xb701
 80069aa:	f7fc fbe5 	bl	8003178 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 80069ae:	2101      	movs	r1, #1
 80069b0:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80069b4:	f7fc fbe0 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 80069b8:	2103      	movs	r1, #3
 80069ba:	f64b 0001 	movw	r0, #47105	; 0xb801
 80069be:	f7fc fbdb 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 80069c2:	2103      	movs	r1, #3
 80069c4:	f64b 0002 	movw	r0, #47106	; 0xb802
 80069c8:	f7fc fbd6 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 80069cc:	2103      	movs	r1, #3
 80069ce:	f64b 0003 	movw	r0, #47107	; 0xb803
 80069d2:	f7fc fbd1 	bl	8003178 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 80069d6:	2102      	movs	r1, #2
 80069d8:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80069dc:	f7fc fbcc 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 80069e0:	2100      	movs	r1, #0
 80069e2:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80069e6:	f7fc fbc7 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 80069ea:	2100      	movs	r1, #0
 80069ec:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80069f0:	f7fc fbc2 	bl	8003178 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 80069f4:	21d0      	movs	r1, #208	; 0xd0
 80069f6:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 80069fa:	f7fc fbbd 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 80069fe:	2102      	movs	r1, #2
 8006a00:	f64c 1001 	movw	r0, #51457	; 0xc901
 8006a04:	f7fc fbb8 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8006a08:	2150      	movs	r1, #80	; 0x50
 8006a0a:	f64c 1002 	movw	r0, #51458	; 0xc902
 8006a0e:	f7fc fbb3 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 8006a12:	2150      	movs	r1, #80	; 0x50
 8006a14:	f64c 1003 	movw	r0, #51459	; 0xc903
 8006a18:	f7fc fbae 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 8006a1c:	2150      	movs	r1, #80	; 0x50
 8006a1e:	f64c 1004 	movw	r0, #51460	; 0xc904
 8006a22:	f7fc fba9 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 8006a26:	2100      	movs	r1, #0
 8006a28:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8006a2c:	f7fc fba4 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8006a30:	2155      	movs	r1, #85	; 0x55
 8006a32:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8006a36:	f7fc fb9f 	bl	8003178 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8006a3a:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8006a3e:	f7fc fb0f 	bl	8003060 <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 8006a42:	2001      	movs	r0, #1
 8006a44:	f7fa fc28 	bl	8001298 <HAL_Delay>
		LCD_WR_REG(0x2900);
 8006a48:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8006a4c:	f7fc fb08 	bl	8003060 <LCD_WR_REG>
 8006a50:	f001 bd18 	b.w	8008484 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 8006a54:	4bec      	ldr	r3, [pc, #944]	; (8006e08 <LCD_Init+0x27b8>)
 8006a56:	889b      	ldrh	r3, [r3, #4]
 8006a58:	f249 3225 	movw	r2, #37669	; 0x9325
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	f040 80d7 	bne.w	8006c10 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 8006a62:	f647 01f0 	movw	r1, #30960	; 0x78f0
 8006a66:	20e5      	movs	r0, #229	; 0xe5
 8006a68:	f7fc fb86 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 8006a6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a70:	2001      	movs	r0, #1
 8006a72:	f7fc fb81 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8006a76:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006a7a:	2002      	movs	r0, #2
 8006a7c:	f7fc fb7c 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8006a80:	f241 0130 	movw	r1, #4144	; 0x1030
 8006a84:	2003      	movs	r0, #3
 8006a86:	f7fc fb77 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	2004      	movs	r0, #4
 8006a8e:	f7fc fb73 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8006a92:	f240 2102 	movw	r1, #514	; 0x202
 8006a96:	2008      	movs	r0, #8
 8006a98:	f7fc fb6e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	2009      	movs	r0, #9
 8006aa0:	f7fc fb6a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	200a      	movs	r0, #10
 8006aa8:	f7fc fb66 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8006aac:	2100      	movs	r1, #0
 8006aae:	200c      	movs	r0, #12
 8006ab0:	f7fc fb62 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	200d      	movs	r0, #13
 8006ab8:	f7fc fb5e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8006abc:	2100      	movs	r1, #0
 8006abe:	200f      	movs	r0, #15
 8006ac0:	f7fc fb5a 	bl	8003178 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	2010      	movs	r0, #16
 8006ac8:	f7fc fb56 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8006acc:	2107      	movs	r1, #7
 8006ace:	2011      	movs	r0, #17
 8006ad0:	f7fc fb52 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	2012      	movs	r0, #18
 8006ad8:	f7fc fb4e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8006adc:	2100      	movs	r1, #0
 8006ade:	2013      	movs	r0, #19
 8006ae0:	f7fc fb4a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	2007      	movs	r0, #7
 8006ae8:	f7fc fb46 	bl	8003178 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 8006aec:	f241 6190 	movw	r1, #5776	; 0x1690
 8006af0:	2010      	movs	r0, #16
 8006af2:	f7fc fb41 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8006af6:	f240 2127 	movw	r1, #551	; 0x227
 8006afa:	2011      	movs	r0, #17
 8006afc:	f7fc fb3c 	bl	8003178 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8006b00:	219d      	movs	r1, #157	; 0x9d
 8006b02:	2012      	movs	r0, #18
 8006b04:	f7fc fb38 	bl	8003178 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8006b08:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8006b0c:	2013      	movs	r0, #19
 8006b0e:	f7fc fb33 	bl	8003178 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 8006b12:	2125      	movs	r1, #37	; 0x25
 8006b14:	2029      	movs	r0, #41	; 0x29
 8006b16:	f7fc fb2f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 8006b1a:	210d      	movs	r1, #13
 8006b1c:	202b      	movs	r0, #43	; 0x2b
 8006b1e:	f7fc fb2b 	bl	8003178 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 8006b22:	2107      	movs	r1, #7
 8006b24:	2030      	movs	r0, #48	; 0x30
 8006b26:	f7fc fb27 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 8006b2a:	f240 3103 	movw	r1, #771	; 0x303
 8006b2e:	2031      	movs	r0, #49	; 0x31
 8006b30:	f7fc fb22 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 8006b34:	2103      	movs	r1, #3
 8006b36:	2032      	movs	r0, #50	; 0x32
 8006b38:	f7fc fb1e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 8006b3c:	f240 2106 	movw	r1, #518	; 0x206
 8006b40:	2035      	movs	r0, #53	; 0x35
 8006b42:	f7fc fb19 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 8006b46:	2108      	movs	r1, #8
 8006b48:	2036      	movs	r0, #54	; 0x36
 8006b4a:	f7fc fb15 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 8006b4e:	f240 4106 	movw	r1, #1030	; 0x406
 8006b52:	2037      	movs	r0, #55	; 0x37
 8006b54:	f7fc fb10 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8006b58:	f44f 7141 	mov.w	r1, #772	; 0x304
 8006b5c:	2038      	movs	r0, #56	; 0x38
 8006b5e:	f7fc fb0b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 8006b62:	2107      	movs	r1, #7
 8006b64:	2039      	movs	r0, #57	; 0x39
 8006b66:	f7fc fb07 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 8006b6a:	f240 6102 	movw	r1, #1538	; 0x602
 8006b6e:	203c      	movs	r0, #60	; 0x3c
 8006b70:	f7fc fb02 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 8006b74:	2108      	movs	r1, #8
 8006b76:	203d      	movs	r0, #61	; 0x3d
 8006b78:	f7fc fafe 	bl	8003178 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	2050      	movs	r0, #80	; 0x50
 8006b80:	f7fc fafa 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8006b84:	21ef      	movs	r1, #239	; 0xef
 8006b86:	2051      	movs	r0, #81	; 0x51
 8006b88:	f7fc faf6 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	2052      	movs	r0, #82	; 0x52
 8006b90:	f7fc faf2 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8006b94:	f240 113f 	movw	r1, #319	; 0x13f
 8006b98:	2053      	movs	r0, #83	; 0x53
 8006b9a:	f7fc faed 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 8006b9e:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8006ba2:	2060      	movs	r0, #96	; 0x60
 8006ba4:	f7fc fae8 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8006ba8:	2101      	movs	r1, #1
 8006baa:	2061      	movs	r0, #97	; 0x61
 8006bac:	f7fc fae4 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	206a      	movs	r0, #106	; 0x6a
 8006bb4:	f7fc fae0 	bl	8003178 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 8006bb8:	2100      	movs	r1, #0
 8006bba:	2080      	movs	r0, #128	; 0x80
 8006bbc:	f7fc fadc 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	2081      	movs	r0, #129	; 0x81
 8006bc4:	f7fc fad8 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8006bc8:	2100      	movs	r1, #0
 8006bca:	2082      	movs	r0, #130	; 0x82
 8006bcc:	f7fc fad4 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	2083      	movs	r0, #131	; 0x83
 8006bd4:	f7fc fad0 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8006bd8:	2100      	movs	r1, #0
 8006bda:	2084      	movs	r0, #132	; 0x84
 8006bdc:	f7fc facc 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8006be0:	2100      	movs	r1, #0
 8006be2:	2085      	movs	r0, #133	; 0x85
 8006be4:	f7fc fac8 	bl	8003178 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8006be8:	2110      	movs	r1, #16
 8006bea:	2090      	movs	r0, #144	; 0x90
 8006bec:	f7fc fac4 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8006bf0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006bf4:	2092      	movs	r0, #146	; 0x92
 8006bf6:	f7fc fabf 	bl	8003178 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 8006bfa:	f240 1133 	movw	r1, #307	; 0x133
 8006bfe:	2007      	movs	r0, #7
 8006c00:	f7fc faba 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 8006c04:	2122      	movs	r1, #34	; 0x22
 8006c06:	2000      	movs	r0, #0
 8006c08:	f7fc fab6 	bl	8003178 <LCD_WriteReg>
 8006c0c:	f001 bc3a 	b.w	8008484 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8006c10:	4b7d      	ldr	r3, [pc, #500]	; (8006e08 <LCD_Init+0x27b8>)
 8006c12:	889b      	ldrh	r3, [r3, #4]
 8006c14:	f249 3228 	movw	r2, #37672	; 0x9328
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	f040 80f7 	bne.w	8006e0c <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 8006c1e:	f241 018f 	movw	r1, #4239	; 0x108f
 8006c22:	20ec      	movs	r0, #236	; 0xec
 8006c24:	f7fc faa8 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8006c28:	f241 2134 	movw	r1, #4660	; 0x1234
 8006c2c:	20ef      	movs	r0, #239	; 0xef
 8006c2e:	f7fc faa3 	bl	8003178 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 8006c32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c36:	2001      	movs	r0, #1
 8006c38:	f7fc fa9e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 8006c3c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006c40:	2002      	movs	r0, #2
 8006c42:	f7fc fa99 	bl	8003178 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 8006c46:	f241 0130 	movw	r1, #4144	; 0x1030
 8006c4a:	2003      	movs	r0, #3
 8006c4c:	f7fc fa94 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8006c50:	2100      	movs	r1, #0
 8006c52:	2004      	movs	r0, #4
 8006c54:	f7fc fa90 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8006c58:	f240 2102 	movw	r1, #514	; 0x202
 8006c5c:	2008      	movs	r0, #8
 8006c5e:	f7fc fa8b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8006c62:	2100      	movs	r1, #0
 8006c64:	2009      	movs	r0, #9
 8006c66:	f7fc fa87 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	200a      	movs	r0, #10
 8006c6e:	f7fc fa83 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 8006c72:	2101      	movs	r1, #1
 8006c74:	200c      	movs	r0, #12
 8006c76:	f7fc fa7f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	200d      	movs	r0, #13
 8006c7e:	f7fc fa7b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 8006c82:	2100      	movs	r1, #0
 8006c84:	200f      	movs	r0, #15
 8006c86:	f7fc fa77 	bl	8003178 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	2010      	movs	r0, #16
 8006c8e:	f7fc fa73 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8006c92:	2107      	movs	r1, #7
 8006c94:	2011      	movs	r0, #17
 8006c96:	f7fc fa6f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	2012      	movs	r0, #18
 8006c9e:	f7fc fa6b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	2013      	movs	r0, #19
 8006ca6:	f7fc fa67 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 8006caa:	2101      	movs	r1, #1
 8006cac:	2007      	movs	r0, #7
 8006cae:	f7fc fa63 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(50);
 8006cb2:	2032      	movs	r0, #50	; 0x32
 8006cb4:	f7fa faf0 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 8006cb8:	f241 4190 	movw	r1, #5264	; 0x1490
 8006cbc:	2010      	movs	r0, #16
 8006cbe:	f7fc fa5b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8006cc2:	f240 2127 	movw	r1, #551	; 0x227
 8006cc6:	2011      	movs	r0, #17
 8006cc8:	f7fc fa56 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(50);
 8006ccc:	2032      	movs	r0, #50	; 0x32
 8006cce:	f7fa fae3 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 8006cd2:	218a      	movs	r1, #138	; 0x8a
 8006cd4:	2012      	movs	r0, #18
 8006cd6:	f7fc fa4f 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(50);
 8006cda:	2032      	movs	r0, #50	; 0x32
 8006cdc:	f7fa fadc 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 8006ce0:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8006ce4:	2013      	movs	r0, #19
 8006ce6:	f7fc fa47 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 8006cea:	2106      	movs	r1, #6
 8006cec:	2029      	movs	r0, #41	; 0x29
 8006cee:	f7fc fa43 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 8006cf2:	210d      	movs	r1, #13
 8006cf4:	202b      	movs	r0, #43	; 0x2b
 8006cf6:	f7fc fa3f 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(50);
 8006cfa:	2032      	movs	r0, #50	; 0x32
 8006cfc:	f7fa facc 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8006d00:	2100      	movs	r1, #0
 8006d02:	2020      	movs	r0, #32
 8006d04:	f7fc fa38 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8006d08:	2100      	movs	r1, #0
 8006d0a:	2021      	movs	r0, #33	; 0x21
 8006d0c:	f7fc fa34 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(50);
 8006d10:	2032      	movs	r0, #50	; 0x32
 8006d12:	f7fa fac1 	bl	8001298 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 8006d16:	2100      	movs	r1, #0
 8006d18:	2030      	movs	r0, #48	; 0x30
 8006d1a:	f7fc fa2d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 8006d1e:	f240 6104 	movw	r1, #1540	; 0x604
 8006d22:	2031      	movs	r0, #49	; 0x31
 8006d24:	f7fc fa28 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8006d28:	f240 3105 	movw	r1, #773	; 0x305
 8006d2c:	2032      	movs	r0, #50	; 0x32
 8006d2e:	f7fc fa23 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 8006d32:	2100      	movs	r1, #0
 8006d34:	2035      	movs	r0, #53	; 0x35
 8006d36:	f7fc fa1f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 8006d3a:	f640 4109 	movw	r1, #3081	; 0xc09
 8006d3e:	2036      	movs	r0, #54	; 0x36
 8006d40:	f7fc fa1a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 8006d44:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006d48:	2037      	movs	r0, #55	; 0x37
 8006d4a:	f7fc fa15 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 8006d4e:	f240 3101 	movw	r1, #769	; 0x301
 8006d52:	2038      	movs	r0, #56	; 0x38
 8006d54:	f7fc fa10 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8006d58:	f240 7107 	movw	r1, #1799	; 0x707
 8006d5c:	2039      	movs	r0, #57	; 0x39
 8006d5e:	f7fc fa0b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 8006d62:	2100      	movs	r1, #0
 8006d64:	203c      	movs	r0, #60	; 0x3c
 8006d66:	f7fc fa07 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 8006d6a:	f640 210a 	movw	r1, #2570	; 0xa0a
 8006d6e:	203d      	movs	r0, #61	; 0x3d
 8006d70:	f7fc fa02 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(50);
 8006d74:	2032      	movs	r0, #50	; 0x32
 8006d76:	f7fa fa8f 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	2050      	movs	r0, #80	; 0x50
 8006d7e:	f7fc f9fb 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 8006d82:	21ef      	movs	r1, #239	; 0xef
 8006d84:	2051      	movs	r0, #81	; 0x51
 8006d86:	f7fc f9f7 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	2052      	movs	r0, #82	; 0x52
 8006d8e:	f7fc f9f3 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 8006d92:	f240 113f 	movw	r1, #319	; 0x13f
 8006d96:	2053      	movs	r0, #83	; 0x53
 8006d98:	f7fc f9ee 	bl	8003178 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 8006d9c:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8006da0:	2060      	movs	r0, #96	; 0x60
 8006da2:	f7fc f9e9 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8006da6:	2101      	movs	r1, #1
 8006da8:	2061      	movs	r0, #97	; 0x61
 8006daa:	f7fc f9e5 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8006dae:	2100      	movs	r1, #0
 8006db0:	206a      	movs	r0, #106	; 0x6a
 8006db2:	f7fc f9e1 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8006db6:	2100      	movs	r1, #0
 8006db8:	2080      	movs	r0, #128	; 0x80
 8006dba:	f7fc f9dd 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	2081      	movs	r0, #129	; 0x81
 8006dc2:	f7fc f9d9 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	2082      	movs	r0, #130	; 0x82
 8006dca:	f7fc f9d5 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8006dce:	2100      	movs	r1, #0
 8006dd0:	2083      	movs	r0, #131	; 0x83
 8006dd2:	f7fc f9d1 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	2084      	movs	r0, #132	; 0x84
 8006dda:	f7fc f9cd 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8006dde:	2100      	movs	r1, #0
 8006de0:	2085      	movs	r0, #133	; 0x85
 8006de2:	f7fc f9c9 	bl	8003178 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 8006de6:	2110      	movs	r1, #16
 8006de8:	2090      	movs	r0, #144	; 0x90
 8006dea:	f7fc f9c5 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8006dee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006df2:	2092      	movs	r0, #146	; 0x92
 8006df4:	f7fc f9c0 	bl	8003178 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8006df8:	f240 1133 	movw	r1, #307	; 0x133
 8006dfc:	2007      	movs	r0, #7
 8006dfe:	f7fc f9bb 	bl	8003178 <LCD_WriteReg>
 8006e02:	f001 bb3f 	b.w	8008484 <LCD_Init+0x3e34>
 8006e06:	bf00      	nop
 8006e08:	20000a30 	.word	0x20000a30
	} else if (lcddev.id == 0x9320) //测试OK.
 8006e0c:	4bce      	ldr	r3, [pc, #824]	; (8007148 <LCD_Init+0x2af8>)
 8006e0e:	889b      	ldrh	r3, [r3, #4]
 8006e10:	f249 3220 	movw	r2, #37664	; 0x9320
 8006e14:	4293      	cmp	r3, r2
 8006e16:	f040 80ad 	bne.w	8006f74 <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	f7fc f9ab 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 8006e22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e26:	2001      	movs	r0, #1
 8006e28:	f7fc f9a6 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 8006e2c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006e30:	2002      	movs	r0, #2
 8006e32:	f7fc f9a1 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 8006e36:	f241 0130 	movw	r1, #4144	; 0x1030
 8006e3a:	2003      	movs	r0, #3
 8006e3c:	f7fc f99c 	bl	8003178 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8006e40:	2100      	movs	r1, #0
 8006e42:	2004      	movs	r0, #4
 8006e44:	f7fc f998 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 8006e48:	f240 2102 	movw	r1, #514	; 0x202
 8006e4c:	2008      	movs	r0, #8
 8006e4e:	f7fc f993 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 8006e52:	2100      	movs	r1, #0
 8006e54:	2009      	movs	r0, #9
 8006e56:	f7fc f98f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	200a      	movs	r0, #10
 8006e5e:	f7fc f98b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 8006e62:	2101      	movs	r1, #1
 8006e64:	200c      	movs	r0, #12
 8006e66:	f7fc f987 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	200d      	movs	r0, #13
 8006e6e:	f7fc f983 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 8006e72:	2100      	movs	r1, #0
 8006e74:	200f      	movs	r0, #15
 8006e76:	f7fc f97f 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(50);
 8006e7a:	2032      	movs	r0, #50	; 0x32
 8006e7c:	f7fa fa0c 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 8006e80:	f240 1101 	movw	r1, #257	; 0x101
 8006e84:	2007      	movs	r0, #7
 8006e86:	f7fc f977 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(50);
 8006e8a:	2032      	movs	r0, #50	; 0x32
 8006e8c:	f7fa fa04 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 8006e90:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8006e94:	2010      	movs	r0, #16
 8006e96:	f7fc f96f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 8006e9a:	2107      	movs	r1, #7
 8006e9c:	2011      	movs	r0, #17
 8006e9e:	f7fc f96b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 8006ea2:	f44f 7188 	mov.w	r1, #272	; 0x110
 8006ea6:	2012      	movs	r0, #18
 8006ea8:	f7fc f966 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 8006eac:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8006eb0:	2013      	movs	r0, #19
 8006eb2:	f7fc f961 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	2029      	movs	r0, #41	; 0x29
 8006eba:	f7fc f95d 	bl	8003178 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 8006ebe:	f244 0110 	movw	r1, #16400	; 0x4010
 8006ec2:	202b      	movs	r0, #43	; 0x2b
 8006ec4:	f7fc f958 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 8006ec8:	2100      	movs	r1, #0
 8006eca:	2050      	movs	r0, #80	; 0x50
 8006ecc:	f7fc f954 	bl	8003178 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 8006ed0:	21ef      	movs	r1, #239	; 0xef
 8006ed2:	2051      	movs	r0, #81	; 0x51
 8006ed4:	f7fc f950 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8006ed8:	2100      	movs	r1, #0
 8006eda:	2052      	movs	r0, #82	; 0x52
 8006edc:	f7fc f94c 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 8006ee0:	f240 113f 	movw	r1, #319	; 0x13f
 8006ee4:	2053      	movs	r0, #83	; 0x53
 8006ee6:	f7fc f947 	bl	8003178 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 8006eea:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006eee:	2060      	movs	r0, #96	; 0x60
 8006ef0:	f7fc f942 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	2061      	movs	r0, #97	; 0x61
 8006ef8:	f7fc f93e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 8006efc:	2100      	movs	r1, #0
 8006efe:	206a      	movs	r0, #106	; 0x6a
 8006f00:	f7fc f93a 	bl	8003178 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 8006f04:	2100      	movs	r1, #0
 8006f06:	2080      	movs	r0, #128	; 0x80
 8006f08:	f7fc f936 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	2081      	movs	r0, #129	; 0x81
 8006f10:	f7fc f932 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 8006f14:	2100      	movs	r1, #0
 8006f16:	2082      	movs	r0, #130	; 0x82
 8006f18:	f7fc f92e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 8006f1c:	2100      	movs	r1, #0
 8006f1e:	2083      	movs	r0, #131	; 0x83
 8006f20:	f7fc f92a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 8006f24:	2100      	movs	r1, #0
 8006f26:	2084      	movs	r0, #132	; 0x84
 8006f28:	f7fc f926 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	2085      	movs	r0, #133	; 0x85
 8006f30:	f7fc f922 	bl	8003178 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 8006f34:	2110      	movs	r1, #16
 8006f36:	2090      	movs	r0, #144	; 0x90
 8006f38:	f7fc f91e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	2092      	movs	r0, #146	; 0x92
 8006f40:	f7fc f91a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 8006f44:	2101      	movs	r1, #1
 8006f46:	2093      	movs	r0, #147	; 0x93
 8006f48:	f7fc f916 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 8006f4c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8006f50:	2095      	movs	r0, #149	; 0x95
 8006f52:	f7fc f911 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 8006f56:	2100      	movs	r1, #0
 8006f58:	2097      	movs	r0, #151	; 0x97
 8006f5a:	f7fc f90d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 8006f5e:	2100      	movs	r1, #0
 8006f60:	2098      	movs	r0, #152	; 0x98
 8006f62:	f7fc f909 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 8006f66:	f240 1173 	movw	r1, #371	; 0x173
 8006f6a:	2007      	movs	r0, #7
 8006f6c:	f7fc f904 	bl	8003178 <LCD_WriteReg>
 8006f70:	f001 ba88 	b.w	8008484 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 8006f74:	4b74      	ldr	r3, [pc, #464]	; (8007148 <LCD_Init+0x2af8>)
 8006f76:	889b      	ldrh	r3, [r3, #4]
 8006f78:	f249 3231 	movw	r2, #37681	; 0x9331
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	f040 80e5 	bne.w	800714c <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 8006f82:	f241 0114 	movw	r1, #4116	; 0x1014
 8006f86:	20e7      	movs	r0, #231	; 0xe7
 8006f88:	f7fc f8f6 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8006f8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f90:	2001      	movs	r0, #1
 8006f92:	f7fc f8f1 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8006f96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f9a:	2002      	movs	r0, #2
 8006f9c:	f7fc f8ec 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8006fa0:	f241 0138 	movw	r1, #4152	; 0x1038
 8006fa4:	2003      	movs	r0, #3
 8006fa6:	f7fc f8e7 	bl	8003178 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8006faa:	f240 2102 	movw	r1, #514	; 0x202
 8006fae:	2008      	movs	r0, #8
 8006fb0:	f7fc f8e2 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	2009      	movs	r0, #9
 8006fb8:	f7fc f8de 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	200a      	movs	r0, #10
 8006fc0:	f7fc f8da 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	200c      	movs	r0, #12
 8006fc8:	f7fc f8d6 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8006fcc:	2100      	movs	r1, #0
 8006fce:	200d      	movs	r0, #13
 8006fd0:	f7fc f8d2 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	200f      	movs	r0, #15
 8006fd8:	f7fc f8ce 	bl	8003178 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8006fdc:	2100      	movs	r1, #0
 8006fde:	2010      	movs	r0, #16
 8006fe0:	f7fc f8ca 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8006fe4:	2107      	movs	r1, #7
 8006fe6:	2011      	movs	r0, #17
 8006fe8:	f7fc f8c6 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8006fec:	2100      	movs	r1, #0
 8006fee:	2012      	movs	r0, #18
 8006ff0:	f7fc f8c2 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	2013      	movs	r0, #19
 8006ff8:	f7fc f8be 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8006ffc:	20c8      	movs	r0, #200	; 0xc8
 8006ffe:	f7fa f94b 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8007002:	f241 6190 	movw	r1, #5776	; 0x1690
 8007006:	2010      	movs	r0, #16
 8007008:	f7fc f8b6 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 800700c:	f240 2127 	movw	r1, #551	; 0x227
 8007010:	2011      	movs	r0, #17
 8007012:	f7fc f8b1 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8007016:	2032      	movs	r0, #50	; 0x32
 8007018:	f7fa f93e 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 800701c:	210c      	movs	r1, #12
 800701e:	2012      	movs	r0, #18
 8007020:	f7fc f8aa 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8007024:	2032      	movs	r0, #50	; 0x32
 8007026:	f7fa f937 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 800702a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800702e:	2013      	movs	r0, #19
 8007030:	f7fc f8a2 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8007034:	2111      	movs	r1, #17
 8007036:	2029      	movs	r0, #41	; 0x29
 8007038:	f7fc f89e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 800703c:	210b      	movs	r1, #11
 800703e:	202b      	movs	r0, #43	; 0x2b
 8007040:	f7fc f89a 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8007044:	2032      	movs	r0, #50	; 0x32
 8007046:	f7fa f927 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 800704a:	2100      	movs	r1, #0
 800704c:	2020      	movs	r0, #32
 800704e:	f7fc f893 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8007052:	f240 113f 	movw	r1, #319	; 0x13f
 8007056:	2021      	movs	r0, #33	; 0x21
 8007058:	f7fc f88e 	bl	8003178 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 800705c:	2100      	movs	r1, #0
 800705e:	2030      	movs	r0, #48	; 0x30
 8007060:	f7fc f88a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8007064:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007068:	2031      	movs	r0, #49	; 0x31
 800706a:	f7fc f885 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 800706e:	2100      	movs	r1, #0
 8007070:	2032      	movs	r0, #50	; 0x32
 8007072:	f7fc f881 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8007076:	f44f 7101 	mov.w	r1, #516	; 0x204
 800707a:	2035      	movs	r0, #53	; 0x35
 800707c:	f7fc f87c 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8007080:	f241 610a 	movw	r1, #5642	; 0x160a
 8007084:	2036      	movs	r0, #54	; 0x36
 8007086:	f7fc f877 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 800708a:	f240 7107 	movw	r1, #1799	; 0x707
 800708e:	2037      	movs	r0, #55	; 0x37
 8007090:	f7fc f872 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8007094:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007098:	2038      	movs	r0, #56	; 0x38
 800709a:	f7fc f86d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 800709e:	f240 7107 	movw	r1, #1799	; 0x707
 80070a2:	2039      	movs	r0, #57	; 0x39
 80070a4:	f7fc f868 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 80070a8:	f240 4102 	movw	r1, #1026	; 0x402
 80070ac:	203c      	movs	r0, #60	; 0x3c
 80070ae:	f7fc f863 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 80070b2:	f640 410f 	movw	r1, #3087	; 0xc0f
 80070b6:	203d      	movs	r0, #61	; 0x3d
 80070b8:	f7fc f85e 	bl	8003178 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 80070bc:	2100      	movs	r1, #0
 80070be:	2050      	movs	r0, #80	; 0x50
 80070c0:	f7fc f85a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 80070c4:	21ef      	movs	r1, #239	; 0xef
 80070c6:	2051      	movs	r0, #81	; 0x51
 80070c8:	f7fc f856 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 80070cc:	2100      	movs	r1, #0
 80070ce:	2052      	movs	r0, #82	; 0x52
 80070d0:	f7fc f852 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 80070d4:	f240 113f 	movw	r1, #319	; 0x13f
 80070d8:	2053      	movs	r0, #83	; 0x53
 80070da:	f7fc f84d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 80070de:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80070e2:	2060      	movs	r0, #96	; 0x60
 80070e4:	f7fc f848 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 80070e8:	2101      	movs	r1, #1
 80070ea:	2061      	movs	r0, #97	; 0x61
 80070ec:	f7fc f844 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 80070f0:	2100      	movs	r1, #0
 80070f2:	206a      	movs	r0, #106	; 0x6a
 80070f4:	f7fc f840 	bl	8003178 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 80070f8:	2100      	movs	r1, #0
 80070fa:	2080      	movs	r0, #128	; 0x80
 80070fc:	f7fc f83c 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8007100:	2100      	movs	r1, #0
 8007102:	2081      	movs	r0, #129	; 0x81
 8007104:	f7fc f838 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8007108:	2100      	movs	r1, #0
 800710a:	2082      	movs	r0, #130	; 0x82
 800710c:	f7fc f834 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8007110:	2100      	movs	r1, #0
 8007112:	2083      	movs	r0, #131	; 0x83
 8007114:	f7fc f830 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8007118:	2100      	movs	r1, #0
 800711a:	2084      	movs	r0, #132	; 0x84
 800711c:	f7fc f82c 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8007120:	2100      	movs	r1, #0
 8007122:	2085      	movs	r0, #133	; 0x85
 8007124:	f7fc f828 	bl	8003178 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8007128:	2110      	movs	r1, #16
 800712a:	2090      	movs	r0, #144	; 0x90
 800712c:	f7fc f824 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8007130:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007134:	2092      	movs	r0, #146	; 0x92
 8007136:	f7fc f81f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 800713a:	f240 1133 	movw	r1, #307	; 0x133
 800713e:	2007      	movs	r0, #7
 8007140:	f7fc f81a 	bl	8003178 <LCD_WriteReg>
 8007144:	f001 b99e 	b.w	8008484 <LCD_Init+0x3e34>
 8007148:	20000a30 	.word	0x20000a30
	} else if (lcddev.id == 0x5408) {
 800714c:	4be2      	ldr	r3, [pc, #904]	; (80074d8 <LCD_Init+0x2e88>)
 800714e:	889b      	ldrh	r3, [r3, #4]
 8007150:	f245 4208 	movw	r2, #21512	; 0x5408
 8007154:	4293      	cmp	r3, r2
 8007156:	f040 80a3 	bne.w	80072a0 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 800715a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800715e:	2001      	movs	r0, #1
 8007160:	f7fc f80a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 8007164:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8007168:	2002      	movs	r0, #2
 800716a:	f7fc f805 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 800716e:	f241 0130 	movw	r1, #4144	; 0x1030
 8007172:	2003      	movs	r0, #3
 8007174:	f7fc f800 	bl	8003178 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8007178:	2100      	movs	r1, #0
 800717a:	2004      	movs	r0, #4
 800717c:	f7fb fffc 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8007180:	f240 2107 	movw	r1, #519	; 0x207
 8007184:	2008      	movs	r0, #8
 8007186:	f7fb fff7 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 800718a:	2100      	movs	r1, #0
 800718c:	2009      	movs	r0, #9
 800718e:	f7fb fff3 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 8007192:	2100      	movs	r1, #0
 8007194:	200a      	movs	r0, #10
 8007196:	f7fb ffef 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 800719a:	2100      	movs	r1, #0
 800719c:	200c      	movs	r0, #12
 800719e:	f7fb ffeb 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 80071a2:	2100      	movs	r1, #0
 80071a4:	200d      	movs	r0, #13
 80071a6:	f7fb ffe7 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 80071aa:	2100      	movs	r1, #0
 80071ac:	200f      	movs	r0, #15
 80071ae:	f7fb ffe3 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(20);
 80071b2:	2014      	movs	r0, #20
 80071b4:	f7fa f870 	bl	8001298 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 80071b8:	f241 61b0 	movw	r1, #5808	; 0x16b0
 80071bc:	2010      	movs	r0, #16
 80071be:	f7fb ffdb 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 80071c2:	2101      	movs	r1, #1
 80071c4:	2011      	movs	r0, #17
 80071c6:	f7fb ffd7 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 80071ca:	2101      	movs	r1, #1
 80071cc:	2017      	movs	r0, #23
 80071ce:	f7fb ffd3 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 80071d2:	f44f 719c 	mov.w	r1, #312	; 0x138
 80071d6:	2012      	movs	r0, #18
 80071d8:	f7fb ffce 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 80071dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80071e0:	2013      	movs	r0, #19
 80071e2:	f7fb ffc9 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 80071e6:	2109      	movs	r1, #9
 80071e8:	2029      	movs	r0, #41	; 0x29
 80071ea:	f7fb ffc5 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 80071ee:	2109      	movs	r1, #9
 80071f0:	202a      	movs	r0, #42	; 0x2a
 80071f2:	f7fb ffc1 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 80071f6:	2100      	movs	r1, #0
 80071f8:	20a4      	movs	r0, #164	; 0xa4
 80071fa:	f7fb ffbd 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 80071fe:	2100      	movs	r1, #0
 8007200:	2050      	movs	r0, #80	; 0x50
 8007202:	f7fb ffb9 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 8007206:	21ef      	movs	r1, #239	; 0xef
 8007208:	2051      	movs	r0, #81	; 0x51
 800720a:	f7fb ffb5 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 800720e:	2100      	movs	r1, #0
 8007210:	2052      	movs	r0, #82	; 0x52
 8007212:	f7fb ffb1 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8007216:	f240 113f 	movw	r1, #319	; 0x13f
 800721a:	2053      	movs	r0, #83	; 0x53
 800721c:	f7fb ffac 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8007220:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8007224:	2060      	movs	r0, #96	; 0x60
 8007226:	f7fb ffa7 	bl	8003178 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 800722a:	2101      	movs	r1, #1
 800722c:	2061      	movs	r0, #97	; 0x61
 800722e:	f7fb ffa3 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8007232:	2100      	movs	r1, #0
 8007234:	206a      	movs	r0, #106	; 0x6a
 8007236:	f7fb ff9f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 800723a:	2100      	movs	r1, #0
 800723c:	2080      	movs	r0, #128	; 0x80
 800723e:	f7fb ff9b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8007242:	2100      	movs	r1, #0
 8007244:	2081      	movs	r0, #129	; 0x81
 8007246:	f7fb ff97 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 800724a:	2100      	movs	r1, #0
 800724c:	2082      	movs	r0, #130	; 0x82
 800724e:	f7fb ff93 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8007252:	2100      	movs	r1, #0
 8007254:	2083      	movs	r0, #131	; 0x83
 8007256:	f7fb ff8f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 800725a:	2100      	movs	r1, #0
 800725c:	2084      	movs	r0, #132	; 0x84
 800725e:	f7fb ff8b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8007262:	2100      	movs	r1, #0
 8007264:	2085      	movs	r0, #133	; 0x85
 8007266:	f7fb ff87 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 800726a:	2113      	movs	r1, #19
 800726c:	2090      	movs	r0, #144	; 0x90
 800726e:	f7fb ff83 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8007272:	2100      	movs	r1, #0
 8007274:	2092      	movs	r0, #146	; 0x92
 8007276:	f7fb ff7f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 800727a:	2103      	movs	r1, #3
 800727c:	2093      	movs	r0, #147	; 0x93
 800727e:	f7fb ff7b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8007282:	f44f 7188 	mov.w	r1, #272	; 0x110
 8007286:	2095      	movs	r0, #149	; 0x95
 8007288:	f7fb ff76 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 800728c:	f240 1173 	movw	r1, #371	; 0x173
 8007290:	2007      	movs	r0, #7
 8007292:	f7fb ff71 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(50);
 8007296:	2032      	movs	r0, #50	; 0x32
 8007298:	f7f9 fffe 	bl	8001298 <HAL_Delay>
 800729c:	f001 b8f2 	b.w	8008484 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 80072a0:	4b8d      	ldr	r3, [pc, #564]	; (80074d8 <LCD_Init+0x2e88>)
 80072a2:	889b      	ldrh	r3, [r3, #4]
 80072a4:	f241 5205 	movw	r2, #5381	; 0x1505
 80072a8:	4293      	cmp	r3, r2
 80072aa:	f040 8117 	bne.w	80074dc <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 80072ae:	2100      	movs	r1, #0
 80072b0:	2007      	movs	r0, #7
 80072b2:	f7fb ff61 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(50);
 80072b6:	2032      	movs	r0, #50	; 0x32
 80072b8:	f7f9 ffee 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 80072bc:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80072c0:	2012      	movs	r0, #18
 80072c2:	f7fb ff59 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 80072c6:	2101      	movs	r1, #1
 80072c8:	20a4      	movs	r0, #164	; 0xa4
 80072ca:	f7fb ff55 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 80072ce:	210f      	movs	r1, #15
 80072d0:	2008      	movs	r0, #8
 80072d2:	f7fb ff51 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 80072d6:	2108      	movs	r1, #8
 80072d8:	200a      	movs	r0, #10
 80072da:	f7fb ff4d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 80072de:	2108      	movs	r1, #8
 80072e0:	200d      	movs	r0, #13
 80072e2:	f7fb ff49 	bl	8003178 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 80072e6:	f240 7107 	movw	r1, #1799	; 0x707
 80072ea:	2030      	movs	r0, #48	; 0x30
 80072ec:	f7fb ff44 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 80072f0:	2107      	movs	r1, #7
 80072f2:	2031      	movs	r0, #49	; 0x31
 80072f4:	f7fb ff40 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 80072f8:	f240 6103 	movw	r1, #1539	; 0x603
 80072fc:	2032      	movs	r0, #50	; 0x32
 80072fe:	f7fb ff3b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8007302:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8007306:	2033      	movs	r0, #51	; 0x33
 8007308:	f7fb ff36 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 800730c:	f240 2102 	movw	r1, #514	; 0x202
 8007310:	2034      	movs	r0, #52	; 0x34
 8007312:	f7fb ff31 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8007316:	2102      	movs	r1, #2
 8007318:	2035      	movs	r0, #53	; 0x35
 800731a:	f7fb ff2d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 800731e:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8007322:	2036      	movs	r0, #54	; 0x36
 8007324:	f7fb ff28 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8007328:	f240 7107 	movw	r1, #1799	; 0x707
 800732c:	2037      	movs	r0, #55	; 0x37
 800732e:	f7fb ff23 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8007332:	2100      	movs	r1, #0
 8007334:	2038      	movs	r0, #56	; 0x38
 8007336:	f7fb ff1f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 800733a:	2100      	movs	r1, #0
 800733c:	2039      	movs	r0, #57	; 0x39
 800733e:	f7fb ff1b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8007342:	f240 7107 	movw	r1, #1799	; 0x707
 8007346:	203a      	movs	r0, #58	; 0x3a
 8007348:	f7fb ff16 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 800734c:	2100      	movs	r1, #0
 800734e:	203b      	movs	r0, #59	; 0x3b
 8007350:	f7fb ff12 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8007354:	2107      	movs	r1, #7
 8007356:	203c      	movs	r0, #60	; 0x3c
 8007358:	f7fb ff0e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 800735c:	2100      	movs	r1, #0
 800735e:	203d      	movs	r0, #61	; 0x3d
 8007360:	f7fb ff0a 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(50);
 8007364:	2032      	movs	r0, #50	; 0x32
 8007366:	f7f9 ff97 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 800736a:	2101      	movs	r1, #1
 800736c:	2007      	movs	r0, #7
 800736e:	f7fb ff03 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8007372:	2101      	movs	r1, #1
 8007374:	2017      	movs	r0, #23
 8007376:	f7fb feff 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(50);
 800737a:	2032      	movs	r0, #50	; 0x32
 800737c:	f7f9 ff8c 	bl	8001298 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8007380:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8007384:	2010      	movs	r0, #16
 8007386:	f7fb fef7 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 800738a:	f240 2117 	movw	r1, #535	; 0x217
 800738e:	2011      	movs	r0, #17
 8007390:	f7fb fef2 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8007394:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8007398:	2012      	movs	r0, #18
 800739a:	f7fb feed 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 800739e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80073a2:	2013      	movs	r0, #19
 80073a4:	f7fb fee8 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 80073a8:	2100      	movs	r1, #0
 80073aa:	202a      	movs	r0, #42	; 0x2a
 80073ac:	f7fb fee4 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 80073b0:	210a      	movs	r1, #10
 80073b2:	2029      	movs	r0, #41	; 0x29
 80073b4:	f7fb fee0 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 80073b8:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80073bc:	2012      	movs	r0, #18
 80073be:	f7fb fedb 	bl	8003178 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 80073c2:	2100      	movs	r1, #0
 80073c4:	2050      	movs	r0, #80	; 0x50
 80073c6:	f7fb fed7 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 80073ca:	21ef      	movs	r1, #239	; 0xef
 80073cc:	2051      	movs	r0, #81	; 0x51
 80073ce:	f7fb fed3 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80073d2:	2100      	movs	r1, #0
 80073d4:	2052      	movs	r0, #82	; 0x52
 80073d6:	f7fb fecf 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80073da:	f240 113f 	movw	r1, #319	; 0x13f
 80073de:	2053      	movs	r0, #83	; 0x53
 80073e0:	f7fb feca 	bl	8003178 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 80073e4:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80073e8:	2060      	movs	r0, #96	; 0x60
 80073ea:	f7fb fec5 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80073ee:	2101      	movs	r1, #1
 80073f0:	2061      	movs	r0, #97	; 0x61
 80073f2:	f7fb fec1 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80073f6:	2100      	movs	r1, #0
 80073f8:	206a      	movs	r0, #106	; 0x6a
 80073fa:	f7fb febd 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 80073fe:	2100      	movs	r1, #0
 8007400:	2080      	movs	r0, #128	; 0x80
 8007402:	f7fb feb9 	bl	8003178 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8007406:	2100      	movs	r1, #0
 8007408:	2081      	movs	r0, #129	; 0x81
 800740a:	f7fb feb5 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 800740e:	2100      	movs	r1, #0
 8007410:	2082      	movs	r0, #130	; 0x82
 8007412:	f7fb feb1 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8007416:	2100      	movs	r1, #0
 8007418:	2083      	movs	r0, #131	; 0x83
 800741a:	f7fb fead 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 800741e:	2100      	movs	r1, #0
 8007420:	2084      	movs	r0, #132	; 0x84
 8007422:	f7fb fea9 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8007426:	2100      	movs	r1, #0
 8007428:	2085      	movs	r0, #133	; 0x85
 800742a:	f7fb fea5 	bl	8003178 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 800742e:	2113      	movs	r1, #19
 8007430:	2090      	movs	r0, #144	; 0x90
 8007432:	f7fb fea1 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8007436:	f44f 7140 	mov.w	r1, #768	; 0x300
 800743a:	2092      	movs	r0, #146	; 0x92
 800743c:	f7fb fe9c 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8007440:	2105      	movs	r1, #5
 8007442:	2093      	movs	r0, #147	; 0x93
 8007444:	f7fb fe98 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8007448:	2100      	movs	r1, #0
 800744a:	2095      	movs	r0, #149	; 0x95
 800744c:	f7fb fe94 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8007450:	2100      	movs	r1, #0
 8007452:	2097      	movs	r0, #151	; 0x97
 8007454:	f7fb fe90 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8007458:	2100      	movs	r1, #0
 800745a:	2098      	movs	r0, #152	; 0x98
 800745c:	f7fb fe8c 	bl	8003178 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8007460:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007464:	2001      	movs	r0, #1
 8007466:	f7fb fe87 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 800746a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800746e:	2002      	movs	r0, #2
 8007470:	f7fb fe82 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8007474:	f241 0138 	movw	r1, #4152	; 0x1038
 8007478:	2003      	movs	r0, #3
 800747a:	f7fb fe7d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 800747e:	2100      	movs	r1, #0
 8007480:	2004      	movs	r0, #4
 8007482:	f7fb fe79 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8007486:	2100      	movs	r1, #0
 8007488:	200c      	movs	r0, #12
 800748a:	f7fb fe75 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 800748e:	2100      	movs	r1, #0
 8007490:	200f      	movs	r0, #15
 8007492:	f7fb fe71 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8007496:	2100      	movs	r1, #0
 8007498:	2020      	movs	r0, #32
 800749a:	f7fb fe6d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 800749e:	2100      	movs	r1, #0
 80074a0:	2021      	movs	r0, #33	; 0x21
 80074a2:	f7fb fe69 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 80074a6:	2121      	movs	r1, #33	; 0x21
 80074a8:	2007      	movs	r0, #7
 80074aa:	f7fb fe65 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(20);
 80074ae:	2014      	movs	r0, #20
 80074b0:	f7f9 fef2 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 80074b4:	2161      	movs	r1, #97	; 0x61
 80074b6:	2007      	movs	r0, #7
 80074b8:	f7fb fe5e 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(20);
 80074bc:	2014      	movs	r0, #20
 80074be:	f7f9 feeb 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 80074c2:	f240 1173 	movw	r1, #371	; 0x173
 80074c6:	2007      	movs	r0, #7
 80074c8:	f7fb fe56 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(20);
 80074cc:	2014      	movs	r0, #20
 80074ce:	f7f9 fee3 	bl	8001298 <HAL_Delay>
 80074d2:	f000 bfd7 	b.w	8008484 <LCD_Init+0x3e34>
 80074d6:	bf00      	nop
 80074d8:	20000a30 	.word	0x20000a30
	} else if (lcddev.id == 0xB505) {
 80074dc:	4bf0      	ldr	r3, [pc, #960]	; (80078a0 <LCD_Init+0x3250>)
 80074de:	889b      	ldrh	r3, [r3, #4]
 80074e0:	f24b 5205 	movw	r2, #46341	; 0xb505
 80074e4:	4293      	cmp	r3, r2
 80074e6:	f040 8103 	bne.w	80076f0 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 80074ea:	2100      	movs	r1, #0
 80074ec:	2000      	movs	r0, #0
 80074ee:	f7fb fe43 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80074f2:	2100      	movs	r1, #0
 80074f4:	2000      	movs	r0, #0
 80074f6:	f7fb fe3f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80074fa:	2100      	movs	r1, #0
 80074fc:	2000      	movs	r0, #0
 80074fe:	f7fb fe3b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8007502:	2100      	movs	r1, #0
 8007504:	2000      	movs	r0, #0
 8007506:	f7fb fe37 	bl	8003178 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 800750a:	2101      	movs	r1, #1
 800750c:	20a4      	movs	r0, #164	; 0xa4
 800750e:	f7fb fe33 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(20);
 8007512:	2014      	movs	r0, #20
 8007514:	f7f9 fec0 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8007518:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800751c:	2060      	movs	r0, #96	; 0x60
 800751e:	f7fb fe2b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8007522:	f240 2102 	movw	r1, #514	; 0x202
 8007526:	2008      	movs	r0, #8
 8007528:	f7fb fe26 	bl	8003178 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 800752c:	f44f 7105 	mov.w	r1, #532	; 0x214
 8007530:	2030      	movs	r0, #48	; 0x30
 8007532:	f7fb fe21 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8007536:	f243 7115 	movw	r1, #14101	; 0x3715
 800753a:	2031      	movs	r0, #49	; 0x31
 800753c:	f7fb fe1c 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8007540:	f240 6104 	movw	r1, #1540	; 0x604
 8007544:	2032      	movs	r0, #50	; 0x32
 8007546:	f7fb fe17 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 800754a:	f640 6116 	movw	r1, #3606	; 0xe16
 800754e:	2033      	movs	r0, #51	; 0x33
 8007550:	f7fb fe12 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8007554:	f242 2111 	movw	r1, #8721	; 0x2211
 8007558:	2034      	movs	r0, #52	; 0x34
 800755a:	f7fb fe0d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 800755e:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8007562:	2035      	movs	r0, #53	; 0x35
 8007564:	f7fb fe08 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8007568:	f248 5107 	movw	r1, #34055	; 0x8507
 800756c:	2036      	movs	r0, #54	; 0x36
 800756e:	f7fb fe03 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 8007572:	f241 4107 	movw	r1, #5127	; 0x1407
 8007576:	2037      	movs	r0, #55	; 0x37
 8007578:	f7fb fdfe 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 800757c:	f241 4103 	movw	r1, #5123	; 0x1403
 8007580:	2038      	movs	r0, #56	; 0x38
 8007582:	f7fb fdf9 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8007586:	2120      	movs	r1, #32
 8007588:	2039      	movs	r0, #57	; 0x39
 800758a:	f7fb fdf5 	bl	8003178 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 800758e:	211a      	movs	r1, #26
 8007590:	2090      	movs	r0, #144	; 0x90
 8007592:	f7fb fdf1 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8007596:	2100      	movs	r1, #0
 8007598:	2010      	movs	r0, #16
 800759a:	f7fb fded 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 800759e:	2107      	movs	r1, #7
 80075a0:	2011      	movs	r0, #17
 80075a2:	f7fb fde9 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80075a6:	2100      	movs	r1, #0
 80075a8:	2012      	movs	r0, #18
 80075aa:	f7fb fde5 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80075ae:	2100      	movs	r1, #0
 80075b0:	2013      	movs	r0, #19
 80075b2:	f7fb fde1 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(20);
 80075b6:	2014      	movs	r0, #20
 80075b8:	f7f9 fe6e 	bl	8001298 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 80075bc:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 80075c0:	2010      	movs	r0, #16
 80075c2:	f7fb fdd9 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 80075c6:	f240 1137 	movw	r1, #311	; 0x137
 80075ca:	2011      	movs	r0, #17
 80075cc:	f7fb fdd4 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(20);
 80075d0:	2014      	movs	r0, #20
 80075d2:	f7f9 fe61 	bl	8001298 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 80075d6:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80075da:	2012      	movs	r0, #18
 80075dc:	f7fb fdcc 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(20);
 80075e0:	2014      	movs	r0, #20
 80075e2:	f7f9 fe59 	bl	8001298 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 80075e6:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80075ea:	2013      	movs	r0, #19
 80075ec:	f7fb fdc4 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 80075f0:	2180      	movs	r1, #128	; 0x80
 80075f2:	202a      	movs	r0, #42	; 0x2a
 80075f4:	f7fb fdc0 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 80075f8:	2148      	movs	r1, #72	; 0x48
 80075fa:	2029      	movs	r0, #41	; 0x29
 80075fc:	f7fb fdbc 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(20);
 8007600:	2014      	movs	r0, #20
 8007602:	f7f9 fe49 	bl	8001298 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8007606:	f44f 7180 	mov.w	r1, #256	; 0x100
 800760a:	2001      	movs	r0, #1
 800760c:	f7fb fdb4 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8007610:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8007614:	2002      	movs	r0, #2
 8007616:	f7fb fdaf 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 800761a:	f241 0138 	movw	r1, #4152	; 0x1038
 800761e:	2003      	movs	r0, #3
 8007620:	f7fb fdaa 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8007624:	f240 2102 	movw	r1, #514	; 0x202
 8007628:	2008      	movs	r0, #8
 800762a:	f7fb fda5 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 800762e:	2100      	movs	r1, #0
 8007630:	200a      	movs	r0, #10
 8007632:	f7fb fda1 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8007636:	2100      	movs	r1, #0
 8007638:	200c      	movs	r0, #12
 800763a:	f7fb fd9d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 800763e:	2100      	movs	r1, #0
 8007640:	200d      	movs	r0, #13
 8007642:	f7fb fd99 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8007646:	2130      	movs	r1, #48	; 0x30
 8007648:	200e      	movs	r0, #14
 800764a:	f7fb fd95 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 800764e:	2100      	movs	r1, #0
 8007650:	2050      	movs	r0, #80	; 0x50
 8007652:	f7fb fd91 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8007656:	21ef      	movs	r1, #239	; 0xef
 8007658:	2051      	movs	r0, #81	; 0x51
 800765a:	f7fb fd8d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800765e:	2100      	movs	r1, #0
 8007660:	2052      	movs	r0, #82	; 0x52
 8007662:	f7fb fd89 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8007666:	f240 113f 	movw	r1, #319	; 0x13f
 800766a:	2053      	movs	r0, #83	; 0x53
 800766c:	f7fb fd84 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8007670:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8007674:	2060      	movs	r0, #96	; 0x60
 8007676:	f7fb fd7f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 800767a:	2101      	movs	r1, #1
 800767c:	2061      	movs	r0, #97	; 0x61
 800767e:	f7fb fd7b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8007682:	2100      	movs	r1, #0
 8007684:	206a      	movs	r0, #106	; 0x6a
 8007686:	f7fb fd77 	bl	8003178 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 800768a:	2111      	movs	r1, #17
 800768c:	2090      	movs	r0, #144	; 0x90
 800768e:	f7fb fd73 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8007692:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007696:	2092      	movs	r0, #146	; 0x92
 8007698:	f7fb fd6e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 800769c:	f240 4102 	movw	r1, #1026	; 0x402
 80076a0:	2093      	movs	r0, #147	; 0x93
 80076a2:	f7fb fd69 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 80076a6:	2102      	movs	r1, #2
 80076a8:	2094      	movs	r0, #148	; 0x94
 80076aa:	f7fb fd65 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(20);
 80076ae:	2014      	movs	r0, #20
 80076b0:	f7f9 fdf2 	bl	8001298 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 80076b4:	2101      	movs	r1, #1
 80076b6:	2007      	movs	r0, #7
 80076b8:	f7fb fd5e 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(20);
 80076bc:	2014      	movs	r0, #20
 80076be:	f7f9 fdeb 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 80076c2:	2161      	movs	r1, #97	; 0x61
 80076c4:	2007      	movs	r0, #7
 80076c6:	f7fb fd57 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 80076ca:	f240 1173 	movw	r1, #371	; 0x173
 80076ce:	2007      	movs	r0, #7
 80076d0:	f7fb fd52 	bl	8003178 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 80076d4:	2100      	movs	r1, #0
 80076d6:	2020      	movs	r0, #32
 80076d8:	f7fb fd4e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 80076dc:	2100      	movs	r1, #0
 80076de:	2021      	movs	r0, #33	; 0x21
 80076e0:	f7fb fd4a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 80076e4:	2122      	movs	r1, #34	; 0x22
 80076e6:	2000      	movs	r0, #0
 80076e8:	f7fb fd46 	bl	8003178 <LCD_WriteReg>
 80076ec:	f000 beca 	b.w	8008484 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 80076f0:	4b6b      	ldr	r3, [pc, #428]	; (80078a0 <LCD_Init+0x3250>)
 80076f2:	889b      	ldrh	r3, [r3, #4]
 80076f4:	f24c 5205 	movw	r2, #50437	; 0xc505
 80076f8:	4293      	cmp	r3, r2
 80076fa:	f040 80d3 	bne.w	80078a4 <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 80076fe:	2100      	movs	r1, #0
 8007700:	2000      	movs	r0, #0
 8007702:	f7fb fd39 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8007706:	2100      	movs	r1, #0
 8007708:	2000      	movs	r0, #0
 800770a:	f7fb fd35 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(20);
 800770e:	2014      	movs	r0, #20
 8007710:	f7f9 fdc2 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 8007714:	2100      	movs	r1, #0
 8007716:	2000      	movs	r0, #0
 8007718:	f7fb fd2e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800771c:	2100      	movs	r1, #0
 800771e:	2000      	movs	r0, #0
 8007720:	f7fb fd2a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8007724:	2100      	movs	r1, #0
 8007726:	2000      	movs	r0, #0
 8007728:	f7fb fd26 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800772c:	2100      	movs	r1, #0
 800772e:	2000      	movs	r0, #0
 8007730:	f7fb fd22 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 8007734:	2101      	movs	r1, #1
 8007736:	20a4      	movs	r0, #164	; 0xa4
 8007738:	f7fb fd1e 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(20);
 800773c:	2014      	movs	r0, #20
 800773e:	f7f9 fdab 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8007742:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8007746:	2060      	movs	r0, #96	; 0x60
 8007748:	f7fb fd16 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 800774c:	f640 0106 	movw	r1, #2054	; 0x806
 8007750:	2008      	movs	r0, #8
 8007752:	f7fb fd11 	bl	8003178 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 8007756:	f240 7103 	movw	r1, #1795	; 0x703
 800775a:	2030      	movs	r0, #48	; 0x30
 800775c:	f7fb fd0c 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8007760:	2101      	movs	r1, #1
 8007762:	2031      	movs	r0, #49	; 0x31
 8007764:	f7fb fd08 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8007768:	2104      	movs	r1, #4
 800776a:	2032      	movs	r0, #50	; 0x32
 800776c:	f7fb fd04 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8007770:	f44f 7181 	mov.w	r1, #258	; 0x102
 8007774:	2033      	movs	r0, #51	; 0x33
 8007776:	f7fb fcff 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 800777a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800777e:	2034      	movs	r0, #52	; 0x34
 8007780:	f7fb fcfa 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 8007784:	f240 1103 	movw	r1, #259	; 0x103
 8007788:	2035      	movs	r0, #53	; 0x35
 800778a:	f7fb fcf5 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 800778e:	211f      	movs	r1, #31
 8007790:	2036      	movs	r0, #54	; 0x36
 8007792:	f7fb fcf1 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 8007796:	f240 7103 	movw	r1, #1795	; 0x703
 800779a:	2037      	movs	r0, #55	; 0x37
 800779c:	f7fb fcec 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 80077a0:	2101      	movs	r1, #1
 80077a2:	2038      	movs	r0, #56	; 0x38
 80077a4:	f7fb fce8 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 80077a8:	2104      	movs	r1, #4
 80077aa:	2039      	movs	r0, #57	; 0x39
 80077ac:	f7fb fce4 	bl	8003178 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 80077b0:	2115      	movs	r1, #21
 80077b2:	2090      	movs	r0, #144	; 0x90
 80077b4:	f7fb fce0 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 80077b8:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80077bc:	2010      	movs	r0, #16
 80077be:	f7fb fcdb 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 80077c2:	f240 2147 	movw	r1, #583	; 0x247
 80077c6:	2011      	movs	r0, #17
 80077c8:	f7fb fcd6 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 80077cc:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80077d0:	2012      	movs	r0, #18
 80077d2:	f7fb fcd1 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 80077d6:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 80077da:	2013      	movs	r0, #19
 80077dc:	f7fb fccc 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(120);
 80077e0:	2078      	movs	r0, #120	; 0x78
 80077e2:	f7f9 fd59 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 80077e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80077ea:	2001      	movs	r0, #1
 80077ec:	f7fb fcc4 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 80077f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80077f4:	2002      	movs	r0, #2
 80077f6:	f7fb fcbf 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 80077fa:	f241 0130 	movw	r1, #4144	; 0x1030
 80077fe:	2003      	movs	r0, #3
 8007800:	f7fb fcba 	bl	8003178 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8007804:	2108      	movs	r1, #8
 8007806:	200a      	movs	r0, #10
 8007808:	f7fb fcb6 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800780c:	2100      	movs	r1, #0
 800780e:	200c      	movs	r0, #12
 8007810:	f7fb fcb2 	bl	8003178 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8007814:	2120      	movs	r1, #32
 8007816:	200e      	movs	r0, #14
 8007818:	f7fb fcae 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 800781c:	2100      	movs	r1, #0
 800781e:	200f      	movs	r0, #15
 8007820:	f7fb fcaa 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8007824:	2100      	movs	r1, #0
 8007826:	2020      	movs	r0, #32
 8007828:	f7fb fca6 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 800782c:	2100      	movs	r1, #0
 800782e:	2021      	movs	r0, #33	; 0x21
 8007830:	f7fb fca2 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 8007834:	213d      	movs	r1, #61	; 0x3d
 8007836:	202a      	movs	r0, #42	; 0x2a
 8007838:	f7fb fc9e 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(20);
 800783c:	2014      	movs	r0, #20
 800783e:	f7f9 fd2b 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8007842:	212d      	movs	r1, #45	; 0x2d
 8007844:	2029      	movs	r0, #41	; 0x29
 8007846:	f7fb fc97 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 800784a:	2100      	movs	r1, #0
 800784c:	2050      	movs	r0, #80	; 0x50
 800784e:	f7fb fc93 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8007852:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 8007856:	2051      	movs	r0, #81	; 0x51
 8007858:	f7fb fc8e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800785c:	2100      	movs	r1, #0
 800785e:	2052      	movs	r0, #82	; 0x52
 8007860:	f7fb fc8a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8007864:	f240 113f 	movw	r1, #319	; 0x13f
 8007868:	2053      	movs	r0, #83	; 0x53
 800786a:	f7fb fc85 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 800786e:	2100      	movs	r1, #0
 8007870:	2061      	movs	r0, #97	; 0x61
 8007872:	f7fb fc81 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8007876:	2100      	movs	r1, #0
 8007878:	206a      	movs	r0, #106	; 0x6a
 800787a:	f7fb fc7d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 800787e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8007882:	2092      	movs	r0, #146	; 0x92
 8007884:	f7fb fc78 	bl	8003178 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 8007888:	2105      	movs	r1, #5
 800788a:	2093      	movs	r0, #147	; 0x93
 800788c:	f7fb fc74 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8007890:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007894:	2007      	movs	r0, #7
 8007896:	f7fb fc6f 	bl	8003178 <LCD_WriteReg>
 800789a:	f000 bdf3 	b.w	8008484 <LCD_Init+0x3e34>
 800789e:	bf00      	nop
 80078a0:	20000a30 	.word	0x20000a30
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 80078a4:	4bc2      	ldr	r3, [pc, #776]	; (8007bb0 <LCD_Init+0x3560>)
 80078a6:	889b      	ldrh	r3, [r3, #4]
 80078a8:	f648 1289 	movw	r2, #35209	; 0x8989
 80078ac:	4293      	cmp	r3, r2
 80078ae:	f040 80bc 	bne.w	8007a2a <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 80078b2:	2101      	movs	r1, #1
 80078b4:	2000      	movs	r0, #0
 80078b6:	f7fb fc5f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 80078ba:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 80078be:	2003      	movs	r0, #3
 80078c0:	f7fb fc5a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80078c4:	2100      	movs	r1, #0
 80078c6:	200c      	movs	r0, #12
 80078c8:	f7fb fc56 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 80078cc:	f640 010c 	movw	r1, #2060	; 0x80c
 80078d0:	200d      	movs	r0, #13
 80078d2:	f7fb fc51 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 80078d6:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 80078da:	200e      	movs	r0, #14
 80078dc:	f7fb fc4c 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 80078e0:	21b0      	movs	r1, #176	; 0xb0
 80078e2:	201e      	movs	r0, #30
 80078e4:	f7fb fc48 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 80078e8:	f642 313f 	movw	r1, #11071	; 0x2b3f
 80078ec:	2001      	movs	r0, #1
 80078ee:	f7fb fc43 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 80078f2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80078f6:	2002      	movs	r0, #2
 80078f8:	f7fb fc3e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 80078fc:	2100      	movs	r1, #0
 80078fe:	2010      	movs	r0, #16
 8007900:	f7fb fc3a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 8007904:	f246 0178 	movw	r1, #24696	; 0x6078
 8007908:	2011      	movs	r0, #17
 800790a:	f7fb fc35 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 800790e:	2100      	movs	r1, #0
 8007910:	2005      	movs	r0, #5
 8007912:	f7fb fc31 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 8007916:	2100      	movs	r1, #0
 8007918:	2006      	movs	r0, #6
 800791a:	f7fb fc2d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 800791e:	f64e 711c 	movw	r1, #61212	; 0xef1c
 8007922:	2016      	movs	r0, #22
 8007924:	f7fb fc28 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8007928:	2103      	movs	r1, #3
 800792a:	2017      	movs	r0, #23
 800792c:	f7fb fc24 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8007930:	f240 2133 	movw	r1, #563	; 0x233
 8007934:	2007      	movs	r0, #7
 8007936:	f7fb fc1f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 800793a:	2100      	movs	r1, #0
 800793c:	200b      	movs	r0, #11
 800793e:	f7fb fc1b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 8007942:	2100      	movs	r1, #0
 8007944:	200f      	movs	r0, #15
 8007946:	f7fb fc17 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 800794a:	2100      	movs	r1, #0
 800794c:	2041      	movs	r0, #65	; 0x41
 800794e:	f7fb fc13 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 8007952:	2100      	movs	r1, #0
 8007954:	2042      	movs	r0, #66	; 0x42
 8007956:	f7fb fc0f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 800795a:	2100      	movs	r1, #0
 800795c:	2048      	movs	r0, #72	; 0x48
 800795e:	f7fb fc0b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 8007962:	f240 113f 	movw	r1, #319	; 0x13f
 8007966:	2049      	movs	r0, #73	; 0x49
 8007968:	f7fb fc06 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 800796c:	2100      	movs	r1, #0
 800796e:	204a      	movs	r0, #74	; 0x4a
 8007970:	f7fb fc02 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 8007974:	2100      	movs	r1, #0
 8007976:	204b      	movs	r0, #75	; 0x4b
 8007978:	f7fb fbfe 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 800797c:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8007980:	2044      	movs	r0, #68	; 0x44
 8007982:	f7fb fbf9 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 8007986:	2100      	movs	r1, #0
 8007988:	2045      	movs	r0, #69	; 0x45
 800798a:	f7fb fbf5 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 800798e:	f240 113f 	movw	r1, #319	; 0x13f
 8007992:	2046      	movs	r0, #70	; 0x46
 8007994:	f7fb fbf0 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 8007998:	f240 7107 	movw	r1, #1799	; 0x707
 800799c:	2030      	movs	r0, #48	; 0x30
 800799e:	f7fb fbeb 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 80079a2:	f44f 7101 	mov.w	r1, #516	; 0x204
 80079a6:	2031      	movs	r0, #49	; 0x31
 80079a8:	f7fb fbe6 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 80079ac:	f44f 7101 	mov.w	r1, #516	; 0x204
 80079b0:	2032      	movs	r0, #50	; 0x32
 80079b2:	f7fb fbe1 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 80079b6:	f240 5102 	movw	r1, #1282	; 0x502
 80079ba:	2033      	movs	r0, #51	; 0x33
 80079bc:	f7fb fbdc 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 80079c0:	f240 5107 	movw	r1, #1287	; 0x507
 80079c4:	2034      	movs	r0, #52	; 0x34
 80079c6:	f7fb fbd7 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80079ca:	f44f 7101 	mov.w	r1, #516	; 0x204
 80079ce:	2035      	movs	r0, #53	; 0x35
 80079d0:	f7fb fbd2 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 80079d4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80079d8:	2036      	movs	r0, #54	; 0x36
 80079da:	f7fb fbcd 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 80079de:	f240 5102 	movw	r1, #1282	; 0x502
 80079e2:	2037      	movs	r0, #55	; 0x37
 80079e4:	f7fb fbc8 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 80079e8:	f240 3102 	movw	r1, #770	; 0x302
 80079ec:	203a      	movs	r0, #58	; 0x3a
 80079ee:	f7fb fbc3 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 80079f2:	f240 3102 	movw	r1, #770	; 0x302
 80079f6:	203b      	movs	r0, #59	; 0x3b
 80079f8:	f7fb fbbe 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 80079fc:	2100      	movs	r1, #0
 80079fe:	2023      	movs	r0, #35	; 0x23
 8007a00:	f7fb fbba 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 8007a04:	2100      	movs	r1, #0
 8007a06:	2024      	movs	r0, #36	; 0x24
 8007a08:	f7fb fbb6 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 8007a0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a10:	2025      	movs	r0, #37	; 0x25
 8007a12:	f7fb fbb1 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 8007a16:	2100      	movs	r1, #0
 8007a18:	204f      	movs	r0, #79	; 0x4f
 8007a1a:	f7fb fbad 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 8007a1e:	2100      	movs	r1, #0
 8007a20:	204e      	movs	r0, #78	; 0x4e
 8007a22:	f7fb fba9 	bl	8003178 <LCD_WriteReg>
 8007a26:	f000 bd2d 	b.w	8008484 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 8007a2a:	4b61      	ldr	r3, [pc, #388]	; (8007bb0 <LCD_Init+0x3560>)
 8007a2c:	889b      	ldrh	r3, [r3, #4]
 8007a2e:	f244 5231 	movw	r2, #17713	; 0x4531
 8007a32:	4293      	cmp	r3, r2
 8007a34:	f040 80be 	bne.w	8007bb4 <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8007a38:	2101      	movs	r1, #1
 8007a3a:	2000      	movs	r0, #0
 8007a3c:	f7fb fb9c 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(10);
 8007a40:	200a      	movs	r0, #10
 8007a42:	f7f9 fc29 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 8007a46:	f241 6128 	movw	r1, #5672	; 0x1628
 8007a4a:	2010      	movs	r0, #16
 8007a4c:	f7fb fb94 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8007a50:	210e      	movs	r1, #14
 8007a52:	2012      	movs	r0, #18
 8007a54:	f7fb fb90 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8007a58:	f640 2139 	movw	r1, #2617	; 0xa39
 8007a5c:	2013      	movs	r0, #19
 8007a5e:	f7fb fb8b 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(10);
 8007a62:	200a      	movs	r0, #10
 8007a64:	f7f9 fc18 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8007a68:	2140      	movs	r1, #64	; 0x40
 8007a6a:	2011      	movs	r0, #17
 8007a6c:	f7fb fb84 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8007a70:	2150      	movs	r1, #80	; 0x50
 8007a72:	2015      	movs	r0, #21
 8007a74:	f7fb fb80 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(10);
 8007a78:	200a      	movs	r0, #10
 8007a7a:	f7f9 fc0d 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 8007a7e:	211e      	movs	r1, #30
 8007a80:	2012      	movs	r0, #18
 8007a82:	f7fb fb79 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(10);
 8007a86:	200a      	movs	r0, #10
 8007a88:	f7f9 fc06 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 8007a8c:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8007a90:	2010      	movs	r0, #16
 8007a92:	f7fb fb71 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 8007a96:	f642 2139 	movw	r1, #10809	; 0x2a39
 8007a9a:	2013      	movs	r0, #19
 8007a9c:	f7fb fb6c 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(10);
 8007aa0:	200a      	movs	r0, #10
 8007aa2:	f7f9 fbf9 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 8007aa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007aaa:	2001      	movs	r0, #1
 8007aac:	f7fb fb64 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8007ab0:	f44f 7140 	mov.w	r1, #768	; 0x300
 8007ab4:	2002      	movs	r0, #2
 8007ab6:	f7fb fb5f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 8007aba:	f241 0138 	movw	r1, #4152	; 0x1038
 8007abe:	2003      	movs	r0, #3
 8007ac0:	f7fb fb5a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 8007ac4:	f240 2102 	movw	r1, #514	; 0x202
 8007ac8:	2008      	movs	r0, #8
 8007aca:	f7fb fb55 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8007ace:	2108      	movs	r1, #8
 8007ad0:	200a      	movs	r0, #10
 8007ad2:	f7fb fb51 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	2030      	movs	r0, #48	; 0x30
 8007ada:	f7fb fb4d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8007ade:	f240 4102 	movw	r1, #1026	; 0x402
 8007ae2:	2031      	movs	r0, #49	; 0x31
 8007ae4:	f7fb fb48 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8007ae8:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007aec:	2032      	movs	r0, #50	; 0x32
 8007aee:	f7fb fb43 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 8007af2:	f240 5103 	movw	r1, #1283	; 0x503
 8007af6:	2033      	movs	r0, #51	; 0x33
 8007af8:	f7fb fb3e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 8007afc:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007b00:	2034      	movs	r0, #52	; 0x34
 8007b02:	f7fb fb39 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 8007b06:	f240 3101 	movw	r1, #769	; 0x301
 8007b0a:	2035      	movs	r0, #53	; 0x35
 8007b0c:	f7fb fb34 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8007b10:	f240 7107 	movw	r1, #1799	; 0x707
 8007b14:	2036      	movs	r0, #54	; 0x36
 8007b16:	f7fb fb2f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8007b1a:	f240 3105 	movw	r1, #773	; 0x305
 8007b1e:	2037      	movs	r0, #55	; 0x37
 8007b20:	f7fb fb2a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 8007b24:	f44f 7102 	mov.w	r1, #520	; 0x208
 8007b28:	2038      	movs	r0, #56	; 0x38
 8007b2a:	f7fb fb25 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 8007b2e:	f640 710b 	movw	r1, #3851	; 0xf0b
 8007b32:	2039      	movs	r0, #57	; 0x39
 8007b34:	f7fb fb20 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8007b38:	2102      	movs	r1, #2
 8007b3a:	2041      	movs	r0, #65	; 0x41
 8007b3c:	f7fb fb1c 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8007b40:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8007b44:	2060      	movs	r0, #96	; 0x60
 8007b46:	f7fb fb17 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8007b4a:	2101      	movs	r1, #1
 8007b4c:	2061      	movs	r0, #97	; 0x61
 8007b4e:	f7fb fb13 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 8007b52:	f44f 7104 	mov.w	r1, #528	; 0x210
 8007b56:	2090      	movs	r0, #144	; 0x90
 8007b58:	f7fb fb0e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 8007b5c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8007b60:	2092      	movs	r0, #146	; 0x92
 8007b62:	f7fb fb09 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 8007b66:	2104      	movs	r1, #4
 8007b68:	2093      	movs	r0, #147	; 0x93
 8007b6a:	f7fb fb05 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 8007b6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b72:	20a0      	movs	r0, #160	; 0xa0
 8007b74:	f7fb fb00 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8007b78:	2101      	movs	r1, #1
 8007b7a:	2007      	movs	r0, #7
 8007b7c:	f7fb fafc 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8007b80:	2121      	movs	r1, #33	; 0x21
 8007b82:	2007      	movs	r0, #7
 8007b84:	f7fb faf8 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8007b88:	2123      	movs	r1, #35	; 0x23
 8007b8a:	2007      	movs	r0, #7
 8007b8c:	f7fb faf4 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8007b90:	2133      	movs	r1, #51	; 0x33
 8007b92:	2007      	movs	r0, #7
 8007b94:	f7fb faf0 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8007b98:	f240 1133 	movw	r1, #307	; 0x133
 8007b9c:	2007      	movs	r0, #7
 8007b9e:	f7fb faeb 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	20a0      	movs	r0, #160	; 0xa0
 8007ba6:	f7fb fae7 	bl	8003178 <LCD_WriteReg>
 8007baa:	f000 bc6b 	b.w	8008484 <LCD_Init+0x3e34>
 8007bae:	bf00      	nop
 8007bb0:	20000a30 	.word	0x20000a30
	} else if (lcddev.id == 0x4535) {
 8007bb4:	4b5b      	ldr	r3, [pc, #364]	; (8007d24 <LCD_Init+0x36d4>)
 8007bb6:	889b      	ldrh	r3, [r3, #4]
 8007bb8:	f244 5235 	movw	r2, #17717	; 0x4535
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	f040 80b3 	bne.w	8007d28 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 8007bc2:	2130      	movs	r1, #48	; 0x30
 8007bc4:	2015      	movs	r0, #21
 8007bc6:	f7fb fad7 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 8007bca:	2110      	movs	r1, #16
 8007bcc:	209a      	movs	r0, #154	; 0x9a
 8007bce:	f7fb fad3 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 8007bd2:	2120      	movs	r1, #32
 8007bd4:	2011      	movs	r0, #17
 8007bd6:	f7fb facf 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 8007bda:	f243 4128 	movw	r1, #13352	; 0x3428
 8007bde:	2010      	movs	r0, #16
 8007be0:	f7fb faca 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 8007be4:	2102      	movs	r1, #2
 8007be6:	2012      	movs	r0, #18
 8007be8:	f7fb fac6 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 8007bec:	f241 0138 	movw	r1, #4152	; 0x1038
 8007bf0:	2013      	movs	r0, #19
 8007bf2:	f7fb fac1 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(40);
 8007bf6:	2028      	movs	r0, #40	; 0x28
 8007bf8:	f7f9 fb4e 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 8007bfc:	2112      	movs	r1, #18
 8007bfe:	2012      	movs	r0, #18
 8007c00:	f7fb faba 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(40);
 8007c04:	2028      	movs	r0, #40	; 0x28
 8007c06:	f7f9 fb47 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 8007c0a:	f243 4120 	movw	r1, #13344	; 0x3420
 8007c0e:	2010      	movs	r0, #16
 8007c10:	f7fb fab2 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 8007c14:	f243 0138 	movw	r1, #12344	; 0x3038
 8007c18:	2013      	movs	r0, #19
 8007c1a:	f7fb faad 	bl	8003178 <LCD_WriteReg>
		HAL_Delay(70);
 8007c1e:	2046      	movs	r0, #70	; 0x46
 8007c20:	f7f9 fb3a 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 8007c24:	2100      	movs	r1, #0
 8007c26:	2030      	movs	r0, #48	; 0x30
 8007c28:	f7fb faa6 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8007c2c:	f240 4102 	movw	r1, #1026	; 0x402
 8007c30:	2031      	movs	r0, #49	; 0x31
 8007c32:	f7fb faa1 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 8007c36:	f240 3107 	movw	r1, #775	; 0x307
 8007c3a:	2032      	movs	r0, #50	; 0x32
 8007c3c:	f7fb fa9c 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8007c40:	f44f 7141 	mov.w	r1, #772	; 0x304
 8007c44:	2033      	movs	r0, #51	; 0x33
 8007c46:	f7fb fa97 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 8007c4a:	2104      	movs	r1, #4
 8007c4c:	2034      	movs	r0, #52	; 0x34
 8007c4e:	f7fb fa93 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 8007c52:	f240 4101 	movw	r1, #1025	; 0x401
 8007c56:	2035      	movs	r0, #53	; 0x35
 8007c58:	f7fb fa8e 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8007c5c:	f240 7107 	movw	r1, #1799	; 0x707
 8007c60:	2036      	movs	r0, #54	; 0x36
 8007c62:	f7fb fa89 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8007c66:	f240 3105 	movw	r1, #773	; 0x305
 8007c6a:	2037      	movs	r0, #55	; 0x37
 8007c6c:	f7fb fa84 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8007c70:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8007c74:	2038      	movs	r0, #56	; 0x38
 8007c76:	f7fb fa7f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 8007c7a:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8007c7e:	2039      	movs	r0, #57	; 0x39
 8007c80:	f7fb fa7a 	bl	8003178 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 8007c84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007c88:	2001      	movs	r0, #1
 8007c8a:	f7fb fa75 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8007c8e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8007c92:	2002      	movs	r0, #2
 8007c94:	f7fb fa70 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 8007c98:	f241 0130 	movw	r1, #4144	; 0x1030
 8007c9c:	2003      	movs	r0, #3
 8007c9e:	f7fb fa6b 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 8007ca2:	f640 0108 	movw	r1, #2056	; 0x808
 8007ca6:	2008      	movs	r0, #8
 8007ca8:	f7fb fa66 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8007cac:	2108      	movs	r1, #8
 8007cae:	200a      	movs	r0, #10
 8007cb0:	f7fb fa62 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8007cb4:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8007cb8:	2060      	movs	r0, #96	; 0x60
 8007cba:	f7fb fa5d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8007cbe:	2101      	movs	r1, #1
 8007cc0:	2061      	movs	r0, #97	; 0x61
 8007cc2:	f7fb fa59 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 8007cc6:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8007cca:	2090      	movs	r0, #144	; 0x90
 8007ccc:	f7fb fa54 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 8007cd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007cd4:	2092      	movs	r0, #146	; 0x92
 8007cd6:	f7fb fa4f 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 8007cda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007cde:	2093      	movs	r0, #147	; 0x93
 8007ce0:	f7fb fa4a 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 8007ce4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8007ce8:	20a0      	movs	r0, #160	; 0xa0
 8007cea:	f7fb fa45 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 8007cee:	2110      	movs	r1, #16
 8007cf0:	20a3      	movs	r0, #163	; 0xa3
 8007cf2:	f7fb fa41 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	2007      	movs	r0, #7
 8007cfa:	f7fb fa3d 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8007cfe:	2121      	movs	r1, #33	; 0x21
 8007d00:	2007      	movs	r0, #7
 8007d02:	f7fb fa39 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8007d06:	2123      	movs	r1, #35	; 0x23
 8007d08:	2007      	movs	r0, #7
 8007d0a:	f7fb fa35 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8007d0e:	2133      	movs	r1, #51	; 0x33
 8007d10:	2007      	movs	r0, #7
 8007d12:	f7fb fa31 	bl	8003178 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8007d16:	f240 1133 	movw	r1, #307	; 0x133
 8007d1a:	2007      	movs	r0, #7
 8007d1c:	f7fb fa2c 	bl	8003178 <LCD_WriteReg>
 8007d20:	e3b0      	b.n	8008484 <LCD_Init+0x3e34>
 8007d22:	bf00      	nop
 8007d24:	20000a30 	.word	0x20000a30
	} else if (lcddev.id == 0X1963) {
 8007d28:	4ba8      	ldr	r3, [pc, #672]	; (8007fcc <LCD_Init+0x397c>)
 8007d2a:	889b      	ldrh	r3, [r3, #4]
 8007d2c:	f641 1263 	movw	r2, #6499	; 0x1963
 8007d30:	4293      	cmp	r3, r2
 8007d32:	f040 83a7 	bne.w	8008484 <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8007d36:	20e2      	movs	r0, #226	; 0xe2
 8007d38:	f7fb f992 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 8007d3c:	4ba4      	ldr	r3, [pc, #656]	; (8007fd0 <LCD_Init+0x3980>)
 8007d3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d42:	611a      	str	r2, [r3, #16]
 8007d44:	4ba2      	ldr	r3, [pc, #648]	; (8007fd0 <LCD_Init+0x3980>)
 8007d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d4a:	615a      	str	r2, [r3, #20]
 8007d4c:	4ba1      	ldr	r3, [pc, #644]	; (8007fd4 <LCD_Init+0x3984>)
 8007d4e:	221d      	movs	r2, #29
 8007d50:	60da      	str	r2, [r3, #12]
 8007d52:	4b9f      	ldr	r3, [pc, #636]	; (8007fd0 <LCD_Init+0x3980>)
 8007d54:	2280      	movs	r2, #128	; 0x80
 8007d56:	615a      	str	r2, [r3, #20]
 8007d58:	4b9d      	ldr	r3, [pc, #628]	; (8007fd0 <LCD_Init+0x3980>)
 8007d5a:	2280      	movs	r2, #128	; 0x80
 8007d5c:	611a      	str	r2, [r3, #16]
 8007d5e:	4b9c      	ldr	r3, [pc, #624]	; (8007fd0 <LCD_Init+0x3980>)
 8007d60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d64:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8007d66:	4b9a      	ldr	r3, [pc, #616]	; (8007fd0 <LCD_Init+0x3980>)
 8007d68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d6c:	611a      	str	r2, [r3, #16]
 8007d6e:	4b98      	ldr	r3, [pc, #608]	; (8007fd0 <LCD_Init+0x3980>)
 8007d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d74:	615a      	str	r2, [r3, #20]
 8007d76:	4b97      	ldr	r3, [pc, #604]	; (8007fd4 <LCD_Init+0x3984>)
 8007d78:	2202      	movs	r2, #2
 8007d7a:	60da      	str	r2, [r3, #12]
 8007d7c:	4b94      	ldr	r3, [pc, #592]	; (8007fd0 <LCD_Init+0x3980>)
 8007d7e:	2280      	movs	r2, #128	; 0x80
 8007d80:	615a      	str	r2, [r3, #20]
 8007d82:	4b93      	ldr	r3, [pc, #588]	; (8007fd0 <LCD_Init+0x3980>)
 8007d84:	2280      	movs	r2, #128	; 0x80
 8007d86:	611a      	str	r2, [r3, #16]
 8007d88:	4b91      	ldr	r3, [pc, #580]	; (8007fd0 <LCD_Init+0x3980>)
 8007d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d8e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 8007d90:	4b8f      	ldr	r3, [pc, #572]	; (8007fd0 <LCD_Init+0x3980>)
 8007d92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d96:	611a      	str	r2, [r3, #16]
 8007d98:	4b8d      	ldr	r3, [pc, #564]	; (8007fd0 <LCD_Init+0x3980>)
 8007d9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d9e:	615a      	str	r2, [r3, #20]
 8007da0:	4b8c      	ldr	r3, [pc, #560]	; (8007fd4 <LCD_Init+0x3984>)
 8007da2:	2204      	movs	r2, #4
 8007da4:	60da      	str	r2, [r3, #12]
 8007da6:	4b8a      	ldr	r3, [pc, #552]	; (8007fd0 <LCD_Init+0x3980>)
 8007da8:	2280      	movs	r2, #128	; 0x80
 8007daa:	615a      	str	r2, [r3, #20]
 8007dac:	4b88      	ldr	r3, [pc, #544]	; (8007fd0 <LCD_Init+0x3980>)
 8007dae:	2280      	movs	r2, #128	; 0x80
 8007db0:	611a      	str	r2, [r3, #16]
 8007db2:	4b87      	ldr	r3, [pc, #540]	; (8007fd0 <LCD_Init+0x3980>)
 8007db4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007db8:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 8007dba:	2001      	movs	r0, #1
 8007dbc:	f7f9 fa6c 	bl	8001298 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8007dc0:	20e0      	movs	r0, #224	; 0xe0
 8007dc2:	f7fb f94d 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8007dc6:	4b82      	ldr	r3, [pc, #520]	; (8007fd0 <LCD_Init+0x3980>)
 8007dc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007dcc:	611a      	str	r2, [r3, #16]
 8007dce:	4b80      	ldr	r3, [pc, #512]	; (8007fd0 <LCD_Init+0x3980>)
 8007dd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dd4:	615a      	str	r2, [r3, #20]
 8007dd6:	4b7f      	ldr	r3, [pc, #508]	; (8007fd4 <LCD_Init+0x3984>)
 8007dd8:	2201      	movs	r2, #1
 8007dda:	60da      	str	r2, [r3, #12]
 8007ddc:	4b7c      	ldr	r3, [pc, #496]	; (8007fd0 <LCD_Init+0x3980>)
 8007dde:	2280      	movs	r2, #128	; 0x80
 8007de0:	615a      	str	r2, [r3, #20]
 8007de2:	4b7b      	ldr	r3, [pc, #492]	; (8007fd0 <LCD_Init+0x3980>)
 8007de4:	2280      	movs	r2, #128	; 0x80
 8007de6:	611a      	str	r2, [r3, #16]
 8007de8:	4b79      	ldr	r3, [pc, #484]	; (8007fd0 <LCD_Init+0x3980>)
 8007dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dee:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8007df0:	200a      	movs	r0, #10
 8007df2:	f7f9 fa51 	bl	8001298 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8007df6:	20e0      	movs	r0, #224	; 0xe0
 8007df8:	f7fb f932 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 8007dfc:	4b74      	ldr	r3, [pc, #464]	; (8007fd0 <LCD_Init+0x3980>)
 8007dfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e02:	611a      	str	r2, [r3, #16]
 8007e04:	4b72      	ldr	r3, [pc, #456]	; (8007fd0 <LCD_Init+0x3980>)
 8007e06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e0a:	615a      	str	r2, [r3, #20]
 8007e0c:	4b71      	ldr	r3, [pc, #452]	; (8007fd4 <LCD_Init+0x3984>)
 8007e0e:	2203      	movs	r2, #3
 8007e10:	60da      	str	r2, [r3, #12]
 8007e12:	4b6f      	ldr	r3, [pc, #444]	; (8007fd0 <LCD_Init+0x3980>)
 8007e14:	2280      	movs	r2, #128	; 0x80
 8007e16:	615a      	str	r2, [r3, #20]
 8007e18:	4b6d      	ldr	r3, [pc, #436]	; (8007fd0 <LCD_Init+0x3980>)
 8007e1a:	2280      	movs	r2, #128	; 0x80
 8007e1c:	611a      	str	r2, [r3, #16]
 8007e1e:	4b6c      	ldr	r3, [pc, #432]	; (8007fd0 <LCD_Init+0x3980>)
 8007e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e24:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 8007e26:	200c      	movs	r0, #12
 8007e28:	f7f9 fa36 	bl	8001298 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8007e2c:	2001      	movs	r0, #1
 8007e2e:	f7fb f917 	bl	8003060 <LCD_WR_REG>
		HAL_Delay(10);
 8007e32:	200a      	movs	r0, #10
 8007e34:	f7f9 fa30 	bl	8001298 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8007e38:	20e6      	movs	r0, #230	; 0xe6
 8007e3a:	f7fb f911 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8007e3e:	4b64      	ldr	r3, [pc, #400]	; (8007fd0 <LCD_Init+0x3980>)
 8007e40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e44:	611a      	str	r2, [r3, #16]
 8007e46:	4b62      	ldr	r3, [pc, #392]	; (8007fd0 <LCD_Init+0x3980>)
 8007e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e4c:	615a      	str	r2, [r3, #20]
 8007e4e:	4b61      	ldr	r3, [pc, #388]	; (8007fd4 <LCD_Init+0x3984>)
 8007e50:	222f      	movs	r2, #47	; 0x2f
 8007e52:	60da      	str	r2, [r3, #12]
 8007e54:	4b5e      	ldr	r3, [pc, #376]	; (8007fd0 <LCD_Init+0x3980>)
 8007e56:	2280      	movs	r2, #128	; 0x80
 8007e58:	615a      	str	r2, [r3, #20]
 8007e5a:	4b5d      	ldr	r3, [pc, #372]	; (8007fd0 <LCD_Init+0x3980>)
 8007e5c:	2280      	movs	r2, #128	; 0x80
 8007e5e:	611a      	str	r2, [r3, #16]
 8007e60:	4b5b      	ldr	r3, [pc, #364]	; (8007fd0 <LCD_Init+0x3980>)
 8007e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e66:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8007e68:	4b59      	ldr	r3, [pc, #356]	; (8007fd0 <LCD_Init+0x3980>)
 8007e6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e6e:	611a      	str	r2, [r3, #16]
 8007e70:	4b57      	ldr	r3, [pc, #348]	; (8007fd0 <LCD_Init+0x3980>)
 8007e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e76:	615a      	str	r2, [r3, #20]
 8007e78:	4b56      	ldr	r3, [pc, #344]	; (8007fd4 <LCD_Init+0x3984>)
 8007e7a:	22ff      	movs	r2, #255	; 0xff
 8007e7c:	60da      	str	r2, [r3, #12]
 8007e7e:	4b54      	ldr	r3, [pc, #336]	; (8007fd0 <LCD_Init+0x3980>)
 8007e80:	2280      	movs	r2, #128	; 0x80
 8007e82:	615a      	str	r2, [r3, #20]
 8007e84:	4b52      	ldr	r3, [pc, #328]	; (8007fd0 <LCD_Init+0x3980>)
 8007e86:	2280      	movs	r2, #128	; 0x80
 8007e88:	611a      	str	r2, [r3, #16]
 8007e8a:	4b51      	ldr	r3, [pc, #324]	; (8007fd0 <LCD_Init+0x3980>)
 8007e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e90:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8007e92:	4b4f      	ldr	r3, [pc, #316]	; (8007fd0 <LCD_Init+0x3980>)
 8007e94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e98:	611a      	str	r2, [r3, #16]
 8007e9a:	4b4d      	ldr	r3, [pc, #308]	; (8007fd0 <LCD_Init+0x3980>)
 8007e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ea0:	615a      	str	r2, [r3, #20]
 8007ea2:	4b4c      	ldr	r3, [pc, #304]	; (8007fd4 <LCD_Init+0x3984>)
 8007ea4:	22ff      	movs	r2, #255	; 0xff
 8007ea6:	60da      	str	r2, [r3, #12]
 8007ea8:	4b49      	ldr	r3, [pc, #292]	; (8007fd0 <LCD_Init+0x3980>)
 8007eaa:	2280      	movs	r2, #128	; 0x80
 8007eac:	615a      	str	r2, [r3, #20]
 8007eae:	4b48      	ldr	r3, [pc, #288]	; (8007fd0 <LCD_Init+0x3980>)
 8007eb0:	2280      	movs	r2, #128	; 0x80
 8007eb2:	611a      	str	r2, [r3, #16]
 8007eb4:	4b46      	ldr	r3, [pc, #280]	; (8007fd0 <LCD_Init+0x3980>)
 8007eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007eba:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 8007ebc:	20b0      	movs	r0, #176	; 0xb0
 8007ebe:	f7fb f8cf 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8007ec2:	4b43      	ldr	r3, [pc, #268]	; (8007fd0 <LCD_Init+0x3980>)
 8007ec4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ec8:	611a      	str	r2, [r3, #16]
 8007eca:	4b41      	ldr	r3, [pc, #260]	; (8007fd0 <LCD_Init+0x3980>)
 8007ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ed0:	615a      	str	r2, [r3, #20]
 8007ed2:	4b40      	ldr	r3, [pc, #256]	; (8007fd4 <LCD_Init+0x3984>)
 8007ed4:	2220      	movs	r2, #32
 8007ed6:	60da      	str	r2, [r3, #12]
 8007ed8:	4b3d      	ldr	r3, [pc, #244]	; (8007fd0 <LCD_Init+0x3980>)
 8007eda:	2280      	movs	r2, #128	; 0x80
 8007edc:	615a      	str	r2, [r3, #20]
 8007ede:	4b3c      	ldr	r3, [pc, #240]	; (8007fd0 <LCD_Init+0x3980>)
 8007ee0:	2280      	movs	r2, #128	; 0x80
 8007ee2:	611a      	str	r2, [r3, #16]
 8007ee4:	4b3a      	ldr	r3, [pc, #232]	; (8007fd0 <LCD_Init+0x3980>)
 8007ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007eea:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 8007eec:	4b38      	ldr	r3, [pc, #224]	; (8007fd0 <LCD_Init+0x3980>)
 8007eee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ef2:	611a      	str	r2, [r3, #16]
 8007ef4:	4b36      	ldr	r3, [pc, #216]	; (8007fd0 <LCD_Init+0x3980>)
 8007ef6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007efa:	615a      	str	r2, [r3, #20]
 8007efc:	4b35      	ldr	r3, [pc, #212]	; (8007fd4 <LCD_Init+0x3984>)
 8007efe:	2200      	movs	r2, #0
 8007f00:	60da      	str	r2, [r3, #12]
 8007f02:	4b33      	ldr	r3, [pc, #204]	; (8007fd0 <LCD_Init+0x3980>)
 8007f04:	2280      	movs	r2, #128	; 0x80
 8007f06:	615a      	str	r2, [r3, #20]
 8007f08:	4b31      	ldr	r3, [pc, #196]	; (8007fd0 <LCD_Init+0x3980>)
 8007f0a:	2280      	movs	r2, #128	; 0x80
 8007f0c:	611a      	str	r2, [r3, #16]
 8007f0e:	4b30      	ldr	r3, [pc, #192]	; (8007fd0 <LCD_Init+0x3980>)
 8007f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f14:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 8007f16:	4b2e      	ldr	r3, [pc, #184]	; (8007fd0 <LCD_Init+0x3980>)
 8007f18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f1c:	611a      	str	r2, [r3, #16]
 8007f1e:	4b2c      	ldr	r3, [pc, #176]	; (8007fd0 <LCD_Init+0x3980>)
 8007f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f24:	615a      	str	r2, [r3, #20]
 8007f26:	4b2b      	ldr	r3, [pc, #172]	; (8007fd4 <LCD_Init+0x3984>)
 8007f28:	2203      	movs	r2, #3
 8007f2a:	60da      	str	r2, [r3, #12]
 8007f2c:	4b28      	ldr	r3, [pc, #160]	; (8007fd0 <LCD_Init+0x3980>)
 8007f2e:	2280      	movs	r2, #128	; 0x80
 8007f30:	615a      	str	r2, [r3, #20]
 8007f32:	4b27      	ldr	r3, [pc, #156]	; (8007fd0 <LCD_Init+0x3980>)
 8007f34:	2280      	movs	r2, #128	; 0x80
 8007f36:	611a      	str	r2, [r3, #16]
 8007f38:	4b25      	ldr	r3, [pc, #148]	; (8007fd0 <LCD_Init+0x3980>)
 8007f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f3e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8007f40:	4b23      	ldr	r3, [pc, #140]	; (8007fd0 <LCD_Init+0x3980>)
 8007f42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f46:	611a      	str	r2, [r3, #16]
 8007f48:	4b21      	ldr	r3, [pc, #132]	; (8007fd0 <LCD_Init+0x3980>)
 8007f4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f4e:	615a      	str	r2, [r3, #20]
 8007f50:	4b20      	ldr	r3, [pc, #128]	; (8007fd4 <LCD_Init+0x3984>)
 8007f52:	f240 321f 	movw	r2, #799	; 0x31f
 8007f56:	60da      	str	r2, [r3, #12]
 8007f58:	4b1d      	ldr	r3, [pc, #116]	; (8007fd0 <LCD_Init+0x3980>)
 8007f5a:	2280      	movs	r2, #128	; 0x80
 8007f5c:	615a      	str	r2, [r3, #20]
 8007f5e:	4b1c      	ldr	r3, [pc, #112]	; (8007fd0 <LCD_Init+0x3980>)
 8007f60:	2280      	movs	r2, #128	; 0x80
 8007f62:	611a      	str	r2, [r3, #16]
 8007f64:	4b1a      	ldr	r3, [pc, #104]	; (8007fd0 <LCD_Init+0x3980>)
 8007f66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f6a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 8007f6c:	4b18      	ldr	r3, [pc, #96]	; (8007fd0 <LCD_Init+0x3980>)
 8007f6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f72:	611a      	str	r2, [r3, #16]
 8007f74:	4b16      	ldr	r3, [pc, #88]	; (8007fd0 <LCD_Init+0x3980>)
 8007f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f7a:	615a      	str	r2, [r3, #20]
 8007f7c:	4b15      	ldr	r3, [pc, #84]	; (8007fd4 <LCD_Init+0x3984>)
 8007f7e:	2201      	movs	r2, #1
 8007f80:	60da      	str	r2, [r3, #12]
 8007f82:	4b13      	ldr	r3, [pc, #76]	; (8007fd0 <LCD_Init+0x3980>)
 8007f84:	2280      	movs	r2, #128	; 0x80
 8007f86:	615a      	str	r2, [r3, #20]
 8007f88:	4b11      	ldr	r3, [pc, #68]	; (8007fd0 <LCD_Init+0x3980>)
 8007f8a:	2280      	movs	r2, #128	; 0x80
 8007f8c:	611a      	str	r2, [r3, #16]
 8007f8e:	4b10      	ldr	r3, [pc, #64]	; (8007fd0 <LCD_Init+0x3980>)
 8007f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f94:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8007f96:	4b0e      	ldr	r3, [pc, #56]	; (8007fd0 <LCD_Init+0x3980>)
 8007f98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f9c:	611a      	str	r2, [r3, #16]
 8007f9e:	4b0c      	ldr	r3, [pc, #48]	; (8007fd0 <LCD_Init+0x3980>)
 8007fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fa4:	615a      	str	r2, [r3, #20]
 8007fa6:	4b0b      	ldr	r3, [pc, #44]	; (8007fd4 <LCD_Init+0x3984>)
 8007fa8:	f240 12df 	movw	r2, #479	; 0x1df
 8007fac:	60da      	str	r2, [r3, #12]
 8007fae:	4b08      	ldr	r3, [pc, #32]	; (8007fd0 <LCD_Init+0x3980>)
 8007fb0:	2280      	movs	r2, #128	; 0x80
 8007fb2:	615a      	str	r2, [r3, #20]
 8007fb4:	4b06      	ldr	r3, [pc, #24]	; (8007fd0 <LCD_Init+0x3980>)
 8007fb6:	2280      	movs	r2, #128	; 0x80
 8007fb8:	611a      	str	r2, [r3, #16]
 8007fba:	4b05      	ldr	r3, [pc, #20]	; (8007fd0 <LCD_Init+0x3980>)
 8007fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fc0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 8007fc2:	4b03      	ldr	r3, [pc, #12]	; (8007fd0 <LCD_Init+0x3980>)
 8007fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fc8:	e006      	b.n	8007fd8 <LCD_Init+0x3988>
 8007fca:	bf00      	nop
 8007fcc:	20000a30 	.word	0x20000a30
 8007fd0:	40011000 	.word	0x40011000
 8007fd4:	40010c00 	.word	0x40010c00
 8007fd8:	611a      	str	r2, [r3, #16]
 8007fda:	4ba3      	ldr	r3, [pc, #652]	; (8008268 <LCD_Init+0x3c18>)
 8007fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fe0:	615a      	str	r2, [r3, #20]
 8007fe2:	4ba2      	ldr	r3, [pc, #648]	; (800826c <LCD_Init+0x3c1c>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	60da      	str	r2, [r3, #12]
 8007fe8:	4b9f      	ldr	r3, [pc, #636]	; (8008268 <LCD_Init+0x3c18>)
 8007fea:	2280      	movs	r2, #128	; 0x80
 8007fec:	615a      	str	r2, [r3, #20]
 8007fee:	4b9e      	ldr	r3, [pc, #632]	; (8008268 <LCD_Init+0x3c18>)
 8007ff0:	2280      	movs	r2, #128	; 0x80
 8007ff2:	611a      	str	r2, [r3, #16]
 8007ff4:	4b9c      	ldr	r3, [pc, #624]	; (8008268 <LCD_Init+0x3c18>)
 8007ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ffa:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 8007ffc:	20b4      	movs	r0, #180	; 0xb4
 8007ffe:	f7fb f82f 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8008002:	4b99      	ldr	r3, [pc, #612]	; (8008268 <LCD_Init+0x3c18>)
 8008004:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008008:	611a      	str	r2, [r3, #16]
 800800a:	4b97      	ldr	r3, [pc, #604]	; (8008268 <LCD_Init+0x3c18>)
 800800c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008010:	615a      	str	r2, [r3, #20]
 8008012:	4b96      	ldr	r3, [pc, #600]	; (800826c <LCD_Init+0x3c1c>)
 8008014:	2204      	movs	r2, #4
 8008016:	60da      	str	r2, [r3, #12]
 8008018:	4b93      	ldr	r3, [pc, #588]	; (8008268 <LCD_Init+0x3c18>)
 800801a:	2280      	movs	r2, #128	; 0x80
 800801c:	615a      	str	r2, [r3, #20]
 800801e:	4b92      	ldr	r3, [pc, #584]	; (8008268 <LCD_Init+0x3c18>)
 8008020:	2280      	movs	r2, #128	; 0x80
 8008022:	611a      	str	r2, [r3, #16]
 8008024:	4b90      	ldr	r3, [pc, #576]	; (8008268 <LCD_Init+0x3c18>)
 8008026:	f44f 7200 	mov.w	r2, #512	; 0x200
 800802a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 800802c:	4b8e      	ldr	r3, [pc, #568]	; (8008268 <LCD_Init+0x3c18>)
 800802e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008032:	611a      	str	r2, [r3, #16]
 8008034:	4b8c      	ldr	r3, [pc, #560]	; (8008268 <LCD_Init+0x3c18>)
 8008036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800803a:	615a      	str	r2, [r3, #20]
 800803c:	4b8b      	ldr	r3, [pc, #556]	; (800826c <LCD_Init+0x3c1c>)
 800803e:	f240 421f 	movw	r2, #1055	; 0x41f
 8008042:	60da      	str	r2, [r3, #12]
 8008044:	4b88      	ldr	r3, [pc, #544]	; (8008268 <LCD_Init+0x3c18>)
 8008046:	2280      	movs	r2, #128	; 0x80
 8008048:	615a      	str	r2, [r3, #20]
 800804a:	4b87      	ldr	r3, [pc, #540]	; (8008268 <LCD_Init+0x3c18>)
 800804c:	2280      	movs	r2, #128	; 0x80
 800804e:	611a      	str	r2, [r3, #16]
 8008050:	4b85      	ldr	r3, [pc, #532]	; (8008268 <LCD_Init+0x3c18>)
 8008052:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008056:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8008058:	4b83      	ldr	r3, [pc, #524]	; (8008268 <LCD_Init+0x3c18>)
 800805a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800805e:	611a      	str	r2, [r3, #16]
 8008060:	4b81      	ldr	r3, [pc, #516]	; (8008268 <LCD_Init+0x3c18>)
 8008062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008066:	615a      	str	r2, [r3, #20]
 8008068:	4b80      	ldr	r3, [pc, #512]	; (800826c <LCD_Init+0x3c1c>)
 800806a:	2200      	movs	r2, #0
 800806c:	60da      	str	r2, [r3, #12]
 800806e:	4b7e      	ldr	r3, [pc, #504]	; (8008268 <LCD_Init+0x3c18>)
 8008070:	2280      	movs	r2, #128	; 0x80
 8008072:	615a      	str	r2, [r3, #20]
 8008074:	4b7c      	ldr	r3, [pc, #496]	; (8008268 <LCD_Init+0x3c18>)
 8008076:	2280      	movs	r2, #128	; 0x80
 8008078:	611a      	str	r2, [r3, #16]
 800807a:	4b7b      	ldr	r3, [pc, #492]	; (8008268 <LCD_Init+0x3c18>)
 800807c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008080:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 8008082:	4b79      	ldr	r3, [pc, #484]	; (8008268 <LCD_Init+0x3c18>)
 8008084:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008088:	611a      	str	r2, [r3, #16]
 800808a:	4b77      	ldr	r3, [pc, #476]	; (8008268 <LCD_Init+0x3c18>)
 800808c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008090:	615a      	str	r2, [r3, #20]
 8008092:	4b76      	ldr	r3, [pc, #472]	; (800826c <LCD_Init+0x3c1c>)
 8008094:	222e      	movs	r2, #46	; 0x2e
 8008096:	60da      	str	r2, [r3, #12]
 8008098:	4b73      	ldr	r3, [pc, #460]	; (8008268 <LCD_Init+0x3c18>)
 800809a:	2280      	movs	r2, #128	; 0x80
 800809c:	615a      	str	r2, [r3, #20]
 800809e:	4b72      	ldr	r3, [pc, #456]	; (8008268 <LCD_Init+0x3c18>)
 80080a0:	2280      	movs	r2, #128	; 0x80
 80080a2:	611a      	str	r2, [r3, #16]
 80080a4:	4b70      	ldr	r3, [pc, #448]	; (8008268 <LCD_Init+0x3c18>)
 80080a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080aa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 80080ac:	4b6e      	ldr	r3, [pc, #440]	; (8008268 <LCD_Init+0x3c18>)
 80080ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080b2:	611a      	str	r2, [r3, #16]
 80080b4:	4b6c      	ldr	r3, [pc, #432]	; (8008268 <LCD_Init+0x3c18>)
 80080b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080ba:	615a      	str	r2, [r3, #20]
 80080bc:	4b6b      	ldr	r3, [pc, #428]	; (800826c <LCD_Init+0x3c1c>)
 80080be:	2200      	movs	r2, #0
 80080c0:	60da      	str	r2, [r3, #12]
 80080c2:	4b69      	ldr	r3, [pc, #420]	; (8008268 <LCD_Init+0x3c18>)
 80080c4:	2280      	movs	r2, #128	; 0x80
 80080c6:	615a      	str	r2, [r3, #20]
 80080c8:	4b67      	ldr	r3, [pc, #412]	; (8008268 <LCD_Init+0x3c18>)
 80080ca:	2280      	movs	r2, #128	; 0x80
 80080cc:	611a      	str	r2, [r3, #16]
 80080ce:	4b66      	ldr	r3, [pc, #408]	; (8008268 <LCD_Init+0x3c18>)
 80080d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080d4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80080d6:	4b64      	ldr	r3, [pc, #400]	; (8008268 <LCD_Init+0x3c18>)
 80080d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080dc:	611a      	str	r2, [r3, #16]
 80080de:	4b62      	ldr	r3, [pc, #392]	; (8008268 <LCD_Init+0x3c18>)
 80080e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080e4:	615a      	str	r2, [r3, #20]
 80080e6:	4b61      	ldr	r3, [pc, #388]	; (800826c <LCD_Init+0x3c1c>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	60da      	str	r2, [r3, #12]
 80080ec:	4b5e      	ldr	r3, [pc, #376]	; (8008268 <LCD_Init+0x3c18>)
 80080ee:	2280      	movs	r2, #128	; 0x80
 80080f0:	615a      	str	r2, [r3, #20]
 80080f2:	4b5d      	ldr	r3, [pc, #372]	; (8008268 <LCD_Init+0x3c18>)
 80080f4:	2280      	movs	r2, #128	; 0x80
 80080f6:	611a      	str	r2, [r3, #16]
 80080f8:	4b5b      	ldr	r3, [pc, #364]	; (8008268 <LCD_Init+0x3c18>)
 80080fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080fe:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8008100:	4b59      	ldr	r3, [pc, #356]	; (8008268 <LCD_Init+0x3c18>)
 8008102:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008106:	611a      	str	r2, [r3, #16]
 8008108:	4b57      	ldr	r3, [pc, #348]	; (8008268 <LCD_Init+0x3c18>)
 800810a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800810e:	615a      	str	r2, [r3, #20]
 8008110:	4b56      	ldr	r3, [pc, #344]	; (800826c <LCD_Init+0x3c1c>)
 8008112:	2200      	movs	r2, #0
 8008114:	60da      	str	r2, [r3, #12]
 8008116:	4b54      	ldr	r3, [pc, #336]	; (8008268 <LCD_Init+0x3c18>)
 8008118:	2280      	movs	r2, #128	; 0x80
 800811a:	615a      	str	r2, [r3, #20]
 800811c:	4b52      	ldr	r3, [pc, #328]	; (8008268 <LCD_Init+0x3c18>)
 800811e:	2280      	movs	r2, #128	; 0x80
 8008120:	611a      	str	r2, [r3, #16]
 8008122:	4b51      	ldr	r3, [pc, #324]	; (8008268 <LCD_Init+0x3c18>)
 8008124:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008128:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 800812a:	4b4f      	ldr	r3, [pc, #316]	; (8008268 <LCD_Init+0x3c18>)
 800812c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008130:	611a      	str	r2, [r3, #16]
 8008132:	4b4d      	ldr	r3, [pc, #308]	; (8008268 <LCD_Init+0x3c18>)
 8008134:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008138:	615a      	str	r2, [r3, #20]
 800813a:	4b4c      	ldr	r3, [pc, #304]	; (800826c <LCD_Init+0x3c1c>)
 800813c:	2200      	movs	r2, #0
 800813e:	60da      	str	r2, [r3, #12]
 8008140:	4b49      	ldr	r3, [pc, #292]	; (8008268 <LCD_Init+0x3c18>)
 8008142:	2280      	movs	r2, #128	; 0x80
 8008144:	615a      	str	r2, [r3, #20]
 8008146:	4b48      	ldr	r3, [pc, #288]	; (8008268 <LCD_Init+0x3c18>)
 8008148:	2280      	movs	r2, #128	; 0x80
 800814a:	611a      	str	r2, [r3, #16]
 800814c:	4b46      	ldr	r3, [pc, #280]	; (8008268 <LCD_Init+0x3c18>)
 800814e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008152:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 8008154:	20b6      	movs	r0, #182	; 0xb6
 8008156:	f7fa ff83 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 800815a:	4b43      	ldr	r3, [pc, #268]	; (8008268 <LCD_Init+0x3c18>)
 800815c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008160:	611a      	str	r2, [r3, #16]
 8008162:	4b41      	ldr	r3, [pc, #260]	; (8008268 <LCD_Init+0x3c18>)
 8008164:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008168:	615a      	str	r2, [r3, #20]
 800816a:	4b40      	ldr	r3, [pc, #256]	; (800826c <LCD_Init+0x3c1c>)
 800816c:	2202      	movs	r2, #2
 800816e:	60da      	str	r2, [r3, #12]
 8008170:	4b3d      	ldr	r3, [pc, #244]	; (8008268 <LCD_Init+0x3c18>)
 8008172:	2280      	movs	r2, #128	; 0x80
 8008174:	615a      	str	r2, [r3, #20]
 8008176:	4b3c      	ldr	r3, [pc, #240]	; (8008268 <LCD_Init+0x3c18>)
 8008178:	2280      	movs	r2, #128	; 0x80
 800817a:	611a      	str	r2, [r3, #16]
 800817c:	4b3a      	ldr	r3, [pc, #232]	; (8008268 <LCD_Init+0x3c18>)
 800817e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008182:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 8008184:	4b38      	ldr	r3, [pc, #224]	; (8008268 <LCD_Init+0x3c18>)
 8008186:	f44f 7280 	mov.w	r2, #256	; 0x100
 800818a:	611a      	str	r2, [r3, #16]
 800818c:	4b36      	ldr	r3, [pc, #216]	; (8008268 <LCD_Init+0x3c18>)
 800818e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008192:	615a      	str	r2, [r3, #20]
 8008194:	4b35      	ldr	r3, [pc, #212]	; (800826c <LCD_Init+0x3c1c>)
 8008196:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800819a:	60da      	str	r2, [r3, #12]
 800819c:	4b32      	ldr	r3, [pc, #200]	; (8008268 <LCD_Init+0x3c18>)
 800819e:	2280      	movs	r2, #128	; 0x80
 80081a0:	615a      	str	r2, [r3, #20]
 80081a2:	4b31      	ldr	r3, [pc, #196]	; (8008268 <LCD_Init+0x3c18>)
 80081a4:	2280      	movs	r2, #128	; 0x80
 80081a6:	611a      	str	r2, [r3, #16]
 80081a8:	4b2f      	ldr	r3, [pc, #188]	; (8008268 <LCD_Init+0x3c18>)
 80081aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081ae:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 80081b0:	4b2d      	ldr	r3, [pc, #180]	; (8008268 <LCD_Init+0x3c18>)
 80081b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081b6:	611a      	str	r2, [r3, #16]
 80081b8:	4b2b      	ldr	r3, [pc, #172]	; (8008268 <LCD_Init+0x3c18>)
 80081ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081be:	615a      	str	r2, [r3, #20]
 80081c0:	4b2a      	ldr	r3, [pc, #168]	; (800826c <LCD_Init+0x3c1c>)
 80081c2:	2200      	movs	r2, #0
 80081c4:	60da      	str	r2, [r3, #12]
 80081c6:	4b28      	ldr	r3, [pc, #160]	; (8008268 <LCD_Init+0x3c18>)
 80081c8:	2280      	movs	r2, #128	; 0x80
 80081ca:	615a      	str	r2, [r3, #20]
 80081cc:	4b26      	ldr	r3, [pc, #152]	; (8008268 <LCD_Init+0x3c18>)
 80081ce:	2280      	movs	r2, #128	; 0x80
 80081d0:	611a      	str	r2, [r3, #16]
 80081d2:	4b25      	ldr	r3, [pc, #148]	; (8008268 <LCD_Init+0x3c18>)
 80081d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081d8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 80081da:	4b23      	ldr	r3, [pc, #140]	; (8008268 <LCD_Init+0x3c18>)
 80081dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081e0:	611a      	str	r2, [r3, #16]
 80081e2:	4b21      	ldr	r3, [pc, #132]	; (8008268 <LCD_Init+0x3c18>)
 80081e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081e8:	615a      	str	r2, [r3, #20]
 80081ea:	4b20      	ldr	r3, [pc, #128]	; (800826c <LCD_Init+0x3c1c>)
 80081ec:	2217      	movs	r2, #23
 80081ee:	60da      	str	r2, [r3, #12]
 80081f0:	4b1d      	ldr	r3, [pc, #116]	; (8008268 <LCD_Init+0x3c18>)
 80081f2:	2280      	movs	r2, #128	; 0x80
 80081f4:	615a      	str	r2, [r3, #20]
 80081f6:	4b1c      	ldr	r3, [pc, #112]	; (8008268 <LCD_Init+0x3c18>)
 80081f8:	2280      	movs	r2, #128	; 0x80
 80081fa:	611a      	str	r2, [r3, #16]
 80081fc:	4b1a      	ldr	r3, [pc, #104]	; (8008268 <LCD_Init+0x3c18>)
 80081fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008202:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8008204:	4b18      	ldr	r3, [pc, #96]	; (8008268 <LCD_Init+0x3c18>)
 8008206:	f44f 7280 	mov.w	r2, #256	; 0x100
 800820a:	611a      	str	r2, [r3, #16]
 800820c:	4b16      	ldr	r3, [pc, #88]	; (8008268 <LCD_Init+0x3c18>)
 800820e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008212:	615a      	str	r2, [r3, #20]
 8008214:	4b15      	ldr	r3, [pc, #84]	; (800826c <LCD_Init+0x3c1c>)
 8008216:	2215      	movs	r2, #21
 8008218:	60da      	str	r2, [r3, #12]
 800821a:	4b13      	ldr	r3, [pc, #76]	; (8008268 <LCD_Init+0x3c18>)
 800821c:	2280      	movs	r2, #128	; 0x80
 800821e:	615a      	str	r2, [r3, #20]
 8008220:	4b11      	ldr	r3, [pc, #68]	; (8008268 <LCD_Init+0x3c18>)
 8008222:	2280      	movs	r2, #128	; 0x80
 8008224:	611a      	str	r2, [r3, #16]
 8008226:	4b10      	ldr	r3, [pc, #64]	; (8008268 <LCD_Init+0x3c18>)
 8008228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800822c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 800822e:	4b0e      	ldr	r3, [pc, #56]	; (8008268 <LCD_Init+0x3c18>)
 8008230:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008234:	611a      	str	r2, [r3, #16]
 8008236:	4b0c      	ldr	r3, [pc, #48]	; (8008268 <LCD_Init+0x3c18>)
 8008238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800823c:	615a      	str	r2, [r3, #20]
 800823e:	4b0b      	ldr	r3, [pc, #44]	; (800826c <LCD_Init+0x3c1c>)
 8008240:	2200      	movs	r2, #0
 8008242:	60da      	str	r2, [r3, #12]
 8008244:	4b08      	ldr	r3, [pc, #32]	; (8008268 <LCD_Init+0x3c18>)
 8008246:	2280      	movs	r2, #128	; 0x80
 8008248:	615a      	str	r2, [r3, #20]
 800824a:	4b07      	ldr	r3, [pc, #28]	; (8008268 <LCD_Init+0x3c18>)
 800824c:	2280      	movs	r2, #128	; 0x80
 800824e:	611a      	str	r2, [r3, #16]
 8008250:	4b05      	ldr	r3, [pc, #20]	; (8008268 <LCD_Init+0x3c18>)
 8008252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008256:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8008258:	4b03      	ldr	r3, [pc, #12]	; (8008268 <LCD_Init+0x3c18>)
 800825a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800825e:	611a      	str	r2, [r3, #16]
 8008260:	4b01      	ldr	r3, [pc, #4]	; (8008268 <LCD_Init+0x3c18>)
 8008262:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008266:	e003      	b.n	8008270 <LCD_Init+0x3c20>
 8008268:	40011000 	.word	0x40011000
 800826c:	40010c00 	.word	0x40010c00
 8008270:	615a      	str	r2, [r3, #20]
 8008272:	4b8b      	ldr	r3, [pc, #556]	; (80084a0 <LCD_Init+0x3e50>)
 8008274:	2200      	movs	r2, #0
 8008276:	60da      	str	r2, [r3, #12]
 8008278:	4b8a      	ldr	r3, [pc, #552]	; (80084a4 <LCD_Init+0x3e54>)
 800827a:	2280      	movs	r2, #128	; 0x80
 800827c:	615a      	str	r2, [r3, #20]
 800827e:	4b89      	ldr	r3, [pc, #548]	; (80084a4 <LCD_Init+0x3e54>)
 8008280:	2280      	movs	r2, #128	; 0x80
 8008282:	611a      	str	r2, [r3, #16]
 8008284:	4b87      	ldr	r3, [pc, #540]	; (80084a4 <LCD_Init+0x3e54>)
 8008286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800828a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 800828c:	20f0      	movs	r0, #240	; 0xf0
 800828e:	f7fa fee7 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8008292:	4b84      	ldr	r3, [pc, #528]	; (80084a4 <LCD_Init+0x3e54>)
 8008294:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008298:	611a      	str	r2, [r3, #16]
 800829a:	4b82      	ldr	r3, [pc, #520]	; (80084a4 <LCD_Init+0x3e54>)
 800829c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082a0:	615a      	str	r2, [r3, #20]
 80082a2:	4b7f      	ldr	r3, [pc, #508]	; (80084a0 <LCD_Init+0x3e50>)
 80082a4:	2203      	movs	r2, #3
 80082a6:	60da      	str	r2, [r3, #12]
 80082a8:	4b7e      	ldr	r3, [pc, #504]	; (80084a4 <LCD_Init+0x3e54>)
 80082aa:	2280      	movs	r2, #128	; 0x80
 80082ac:	615a      	str	r2, [r3, #20]
 80082ae:	4b7d      	ldr	r3, [pc, #500]	; (80084a4 <LCD_Init+0x3e54>)
 80082b0:	2280      	movs	r2, #128	; 0x80
 80082b2:	611a      	str	r2, [r3, #16]
 80082b4:	4b7b      	ldr	r3, [pc, #492]	; (80084a4 <LCD_Init+0x3e54>)
 80082b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082ba:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 80082bc:	2029      	movs	r0, #41	; 0x29
 80082be:	f7fa fecf 	bl	8003060 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 80082c2:	20d0      	movs	r0, #208	; 0xd0
 80082c4:	f7fa fecc 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 80082c8:	4b76      	ldr	r3, [pc, #472]	; (80084a4 <LCD_Init+0x3e54>)
 80082ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082ce:	611a      	str	r2, [r3, #16]
 80082d0:	4b74      	ldr	r3, [pc, #464]	; (80084a4 <LCD_Init+0x3e54>)
 80082d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082d6:	615a      	str	r2, [r3, #20]
 80082d8:	4b71      	ldr	r3, [pc, #452]	; (80084a0 <LCD_Init+0x3e50>)
 80082da:	2200      	movs	r2, #0
 80082dc:	60da      	str	r2, [r3, #12]
 80082de:	4b71      	ldr	r3, [pc, #452]	; (80084a4 <LCD_Init+0x3e54>)
 80082e0:	2280      	movs	r2, #128	; 0x80
 80082e2:	615a      	str	r2, [r3, #20]
 80082e4:	4b6f      	ldr	r3, [pc, #444]	; (80084a4 <LCD_Init+0x3e54>)
 80082e6:	2280      	movs	r2, #128	; 0x80
 80082e8:	611a      	str	r2, [r3, #16]
 80082ea:	4b6e      	ldr	r3, [pc, #440]	; (80084a4 <LCD_Init+0x3e54>)
 80082ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082f0:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 80082f2:	20be      	movs	r0, #190	; 0xbe
 80082f4:	f7fa feb4 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 80082f8:	4b6a      	ldr	r3, [pc, #424]	; (80084a4 <LCD_Init+0x3e54>)
 80082fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082fe:	611a      	str	r2, [r3, #16]
 8008300:	4b68      	ldr	r3, [pc, #416]	; (80084a4 <LCD_Init+0x3e54>)
 8008302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008306:	615a      	str	r2, [r3, #20]
 8008308:	4b65      	ldr	r3, [pc, #404]	; (80084a0 <LCD_Init+0x3e50>)
 800830a:	2205      	movs	r2, #5
 800830c:	60da      	str	r2, [r3, #12]
 800830e:	4b65      	ldr	r3, [pc, #404]	; (80084a4 <LCD_Init+0x3e54>)
 8008310:	2280      	movs	r2, #128	; 0x80
 8008312:	615a      	str	r2, [r3, #20]
 8008314:	4b63      	ldr	r3, [pc, #396]	; (80084a4 <LCD_Init+0x3e54>)
 8008316:	2280      	movs	r2, #128	; 0x80
 8008318:	611a      	str	r2, [r3, #16]
 800831a:	4b62      	ldr	r3, [pc, #392]	; (80084a4 <LCD_Init+0x3e54>)
 800831c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008320:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8008322:	4b60      	ldr	r3, [pc, #384]	; (80084a4 <LCD_Init+0x3e54>)
 8008324:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008328:	611a      	str	r2, [r3, #16]
 800832a:	4b5e      	ldr	r3, [pc, #376]	; (80084a4 <LCD_Init+0x3e54>)
 800832c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008330:	615a      	str	r2, [r3, #20]
 8008332:	4b5b      	ldr	r3, [pc, #364]	; (80084a0 <LCD_Init+0x3e50>)
 8008334:	22fe      	movs	r2, #254	; 0xfe
 8008336:	60da      	str	r2, [r3, #12]
 8008338:	4b5a      	ldr	r3, [pc, #360]	; (80084a4 <LCD_Init+0x3e54>)
 800833a:	2280      	movs	r2, #128	; 0x80
 800833c:	615a      	str	r2, [r3, #20]
 800833e:	4b59      	ldr	r3, [pc, #356]	; (80084a4 <LCD_Init+0x3e54>)
 8008340:	2280      	movs	r2, #128	; 0x80
 8008342:	611a      	str	r2, [r3, #16]
 8008344:	4b57      	ldr	r3, [pc, #348]	; (80084a4 <LCD_Init+0x3e54>)
 8008346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800834a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 800834c:	4b55      	ldr	r3, [pc, #340]	; (80084a4 <LCD_Init+0x3e54>)
 800834e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008352:	611a      	str	r2, [r3, #16]
 8008354:	4b53      	ldr	r3, [pc, #332]	; (80084a4 <LCD_Init+0x3e54>)
 8008356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800835a:	615a      	str	r2, [r3, #20]
 800835c:	4b50      	ldr	r3, [pc, #320]	; (80084a0 <LCD_Init+0x3e50>)
 800835e:	2201      	movs	r2, #1
 8008360:	60da      	str	r2, [r3, #12]
 8008362:	4b50      	ldr	r3, [pc, #320]	; (80084a4 <LCD_Init+0x3e54>)
 8008364:	2280      	movs	r2, #128	; 0x80
 8008366:	615a      	str	r2, [r3, #20]
 8008368:	4b4e      	ldr	r3, [pc, #312]	; (80084a4 <LCD_Init+0x3e54>)
 800836a:	2280      	movs	r2, #128	; 0x80
 800836c:	611a      	str	r2, [r3, #16]
 800836e:	4b4d      	ldr	r3, [pc, #308]	; (80084a4 <LCD_Init+0x3e54>)
 8008370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008374:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8008376:	4b4b      	ldr	r3, [pc, #300]	; (80084a4 <LCD_Init+0x3e54>)
 8008378:	f44f 7280 	mov.w	r2, #256	; 0x100
 800837c:	611a      	str	r2, [r3, #16]
 800837e:	4b49      	ldr	r3, [pc, #292]	; (80084a4 <LCD_Init+0x3e54>)
 8008380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008384:	615a      	str	r2, [r3, #20]
 8008386:	4b46      	ldr	r3, [pc, #280]	; (80084a0 <LCD_Init+0x3e50>)
 8008388:	2200      	movs	r2, #0
 800838a:	60da      	str	r2, [r3, #12]
 800838c:	4b45      	ldr	r3, [pc, #276]	; (80084a4 <LCD_Init+0x3e54>)
 800838e:	2280      	movs	r2, #128	; 0x80
 8008390:	615a      	str	r2, [r3, #20]
 8008392:	4b44      	ldr	r3, [pc, #272]	; (80084a4 <LCD_Init+0x3e54>)
 8008394:	2280      	movs	r2, #128	; 0x80
 8008396:	611a      	str	r2, [r3, #16]
 8008398:	4b42      	ldr	r3, [pc, #264]	; (80084a4 <LCD_Init+0x3e54>)
 800839a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800839e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 80083a0:	4b40      	ldr	r3, [pc, #256]	; (80084a4 <LCD_Init+0x3e54>)
 80083a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083a6:	611a      	str	r2, [r3, #16]
 80083a8:	4b3e      	ldr	r3, [pc, #248]	; (80084a4 <LCD_Init+0x3e54>)
 80083aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083ae:	615a      	str	r2, [r3, #20]
 80083b0:	4b3b      	ldr	r3, [pc, #236]	; (80084a0 <LCD_Init+0x3e50>)
 80083b2:	2200      	movs	r2, #0
 80083b4:	60da      	str	r2, [r3, #12]
 80083b6:	4b3b      	ldr	r3, [pc, #236]	; (80084a4 <LCD_Init+0x3e54>)
 80083b8:	2280      	movs	r2, #128	; 0x80
 80083ba:	615a      	str	r2, [r3, #20]
 80083bc:	4b39      	ldr	r3, [pc, #228]	; (80084a4 <LCD_Init+0x3e54>)
 80083be:	2280      	movs	r2, #128	; 0x80
 80083c0:	611a      	str	r2, [r3, #16]
 80083c2:	4b38      	ldr	r3, [pc, #224]	; (80084a4 <LCD_Init+0x3e54>)
 80083c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083c8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 80083ca:	4b36      	ldr	r3, [pc, #216]	; (80084a4 <LCD_Init+0x3e54>)
 80083cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80083d0:	611a      	str	r2, [r3, #16]
 80083d2:	4b34      	ldr	r3, [pc, #208]	; (80084a4 <LCD_Init+0x3e54>)
 80083d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083d8:	615a      	str	r2, [r3, #20]
 80083da:	4b31      	ldr	r3, [pc, #196]	; (80084a0 <LCD_Init+0x3e50>)
 80083dc:	2200      	movs	r2, #0
 80083de:	60da      	str	r2, [r3, #12]
 80083e0:	4b30      	ldr	r3, [pc, #192]	; (80084a4 <LCD_Init+0x3e54>)
 80083e2:	2280      	movs	r2, #128	; 0x80
 80083e4:	615a      	str	r2, [r3, #20]
 80083e6:	4b2f      	ldr	r3, [pc, #188]	; (80084a4 <LCD_Init+0x3e54>)
 80083e8:	2280      	movs	r2, #128	; 0x80
 80083ea:	611a      	str	r2, [r3, #16]
 80083ec:	4b2d      	ldr	r3, [pc, #180]	; (80084a4 <LCD_Init+0x3e54>)
 80083ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083f2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 80083f4:	20b8      	movs	r0, #184	; 0xb8
 80083f6:	f7fa fe33 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 80083fa:	4b2a      	ldr	r3, [pc, #168]	; (80084a4 <LCD_Init+0x3e54>)
 80083fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008400:	611a      	str	r2, [r3, #16]
 8008402:	4b28      	ldr	r3, [pc, #160]	; (80084a4 <LCD_Init+0x3e54>)
 8008404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008408:	615a      	str	r2, [r3, #20]
 800840a:	4b25      	ldr	r3, [pc, #148]	; (80084a0 <LCD_Init+0x3e50>)
 800840c:	2203      	movs	r2, #3
 800840e:	60da      	str	r2, [r3, #12]
 8008410:	4b24      	ldr	r3, [pc, #144]	; (80084a4 <LCD_Init+0x3e54>)
 8008412:	2280      	movs	r2, #128	; 0x80
 8008414:	615a      	str	r2, [r3, #20]
 8008416:	4b23      	ldr	r3, [pc, #140]	; (80084a4 <LCD_Init+0x3e54>)
 8008418:	2280      	movs	r2, #128	; 0x80
 800841a:	611a      	str	r2, [r3, #16]
 800841c:	4b21      	ldr	r3, [pc, #132]	; (80084a4 <LCD_Init+0x3e54>)
 800841e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008422:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8008424:	4b1f      	ldr	r3, [pc, #124]	; (80084a4 <LCD_Init+0x3e54>)
 8008426:	f44f 7280 	mov.w	r2, #256	; 0x100
 800842a:	611a      	str	r2, [r3, #16]
 800842c:	4b1d      	ldr	r3, [pc, #116]	; (80084a4 <LCD_Init+0x3e54>)
 800842e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008432:	615a      	str	r2, [r3, #20]
 8008434:	4b1a      	ldr	r3, [pc, #104]	; (80084a0 <LCD_Init+0x3e50>)
 8008436:	2201      	movs	r2, #1
 8008438:	60da      	str	r2, [r3, #12]
 800843a:	4b1a      	ldr	r3, [pc, #104]	; (80084a4 <LCD_Init+0x3e54>)
 800843c:	2280      	movs	r2, #128	; 0x80
 800843e:	615a      	str	r2, [r3, #20]
 8008440:	4b18      	ldr	r3, [pc, #96]	; (80084a4 <LCD_Init+0x3e54>)
 8008442:	2280      	movs	r2, #128	; 0x80
 8008444:	611a      	str	r2, [r3, #16]
 8008446:	4b17      	ldr	r3, [pc, #92]	; (80084a4 <LCD_Init+0x3e54>)
 8008448:	f44f 7200 	mov.w	r2, #512	; 0x200
 800844c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 800844e:	20ba      	movs	r0, #186	; 0xba
 8008450:	f7fa fe06 	bl	8003060 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8008454:	4b13      	ldr	r3, [pc, #76]	; (80084a4 <LCD_Init+0x3e54>)
 8008456:	f44f 7280 	mov.w	r2, #256	; 0x100
 800845a:	611a      	str	r2, [r3, #16]
 800845c:	4b11      	ldr	r3, [pc, #68]	; (80084a4 <LCD_Init+0x3e54>)
 800845e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008462:	615a      	str	r2, [r3, #20]
 8008464:	4b0e      	ldr	r3, [pc, #56]	; (80084a0 <LCD_Init+0x3e50>)
 8008466:	2201      	movs	r2, #1
 8008468:	60da      	str	r2, [r3, #12]
 800846a:	4b0e      	ldr	r3, [pc, #56]	; (80084a4 <LCD_Init+0x3e54>)
 800846c:	2280      	movs	r2, #128	; 0x80
 800846e:	615a      	str	r2, [r3, #20]
 8008470:	4b0c      	ldr	r3, [pc, #48]	; (80084a4 <LCD_Init+0x3e54>)
 8008472:	2280      	movs	r2, #128	; 0x80
 8008474:	611a      	str	r2, [r3, #16]
 8008476:	4b0b      	ldr	r3, [pc, #44]	; (80084a4 <LCD_Init+0x3e54>)
 8008478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800847c:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 800847e:	2064      	movs	r0, #100	; 0x64
 8008480:	f7fb ff36 	bl	80042f0 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8008484:	2000      	movs	r0, #0
 8008486:	f7fb ffd7 	bl	8004438 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 800848a:	4b07      	ldr	r3, [pc, #28]	; (80084a8 <LCD_Init+0x3e58>)
 800848c:	2201      	movs	r2, #1
 800848e:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8008490:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008494:	f000 f80a 	bl	80084ac <LCD_Clear>
}
 8008498:	bf00      	nop
 800849a:	3718      	adds	r7, #24
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	40010c00 	.word	0x40010c00
 80084a4:	40011000 	.word	0x40011000
 80084a8:	422201a8 	.word	0x422201a8

080084ac <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	4603      	mov	r3, r0
 80084b4:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 80084b6:	2300      	movs	r3, #0
 80084b8:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 80084ba:	4b2a      	ldr	r3, [pc, #168]	; (8008564 <LCD_Clear+0xb8>)
 80084bc:	881b      	ldrh	r3, [r3, #0]
 80084be:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 80084c0:	4b28      	ldr	r3, [pc, #160]	; (8008564 <LCD_Clear+0xb8>)
 80084c2:	885b      	ldrh	r3, [r3, #2]
 80084c4:	461a      	mov	r2, r3
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	fb02 f303 	mul.w	r3, r2, r3
 80084cc:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 80084ce:	4b25      	ldr	r3, [pc, #148]	; (8008564 <LCD_Clear+0xb8>)
 80084d0:	889b      	ldrh	r3, [r3, #4]
 80084d2:	f646 0204 	movw	r2, #26628	; 0x6804
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d11a      	bne.n	8008510 <LCD_Clear+0x64>
 80084da:	4b22      	ldr	r3, [pc, #136]	; (8008564 <LCD_Clear+0xb8>)
 80084dc:	799b      	ldrb	r3, [r3, #6]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d116      	bne.n	8008510 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 80084e2:	4b20      	ldr	r3, [pc, #128]	; (8008564 <LCD_Clear+0xb8>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 80084e8:	4b1e      	ldr	r3, [pc, #120]	; (8008564 <LCD_Clear+0xb8>)
 80084ea:	222a      	movs	r2, #42	; 0x2a
 80084ec:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 80084ee:	4b1d      	ldr	r3, [pc, #116]	; (8008564 <LCD_Clear+0xb8>)
 80084f0:	222b      	movs	r2, #43	; 0x2b
 80084f2:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 80084f4:	2100      	movs	r1, #0
 80084f6:	2000      	movs	r0, #0
 80084f8:	f7fa fe84 	bl	8003204 <LCD_SetCursor>
		lcddev.dir = 1;
 80084fc:	4b19      	ldr	r3, [pc, #100]	; (8008564 <LCD_Clear+0xb8>)
 80084fe:	2201      	movs	r2, #1
 8008500:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8008502:	4b18      	ldr	r3, [pc, #96]	; (8008564 <LCD_Clear+0xb8>)
 8008504:	222b      	movs	r2, #43	; 0x2b
 8008506:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8008508:	4b16      	ldr	r3, [pc, #88]	; (8008564 <LCD_Clear+0xb8>)
 800850a:	222a      	movs	r2, #42	; 0x2a
 800850c:	819a      	strh	r2, [r3, #12]
 800850e:	e003      	b.n	8008518 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8008510:	2100      	movs	r1, #0
 8008512:	2000      	movs	r0, #0
 8008514:	f7fa fe76 	bl	8003204 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8008518:	f7fa fe68 	bl	80031ec <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 800851c:	2300      	movs	r3, #0
 800851e:	60fb      	str	r3, [r7, #12]
 8008520:	e017      	b.n	8008552 <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8008522:	4b11      	ldr	r3, [pc, #68]	; (8008568 <LCD_Clear+0xbc>)
 8008524:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008528:	611a      	str	r2, [r3, #16]
 800852a:	4b0f      	ldr	r3, [pc, #60]	; (8008568 <LCD_Clear+0xbc>)
 800852c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008530:	615a      	str	r2, [r3, #20]
 8008532:	4a0e      	ldr	r2, [pc, #56]	; (800856c <LCD_Clear+0xc0>)
 8008534:	88fb      	ldrh	r3, [r7, #6]
 8008536:	60d3      	str	r3, [r2, #12]
 8008538:	4b0b      	ldr	r3, [pc, #44]	; (8008568 <LCD_Clear+0xbc>)
 800853a:	2280      	movs	r2, #128	; 0x80
 800853c:	615a      	str	r2, [r3, #20]
 800853e:	4b0a      	ldr	r3, [pc, #40]	; (8008568 <LCD_Clear+0xbc>)
 8008540:	2280      	movs	r2, #128	; 0x80
 8008542:	611a      	str	r2, [r3, #16]
 8008544:	4b08      	ldr	r3, [pc, #32]	; (8008568 <LCD_Clear+0xbc>)
 8008546:	f44f 7200 	mov.w	r2, #512	; 0x200
 800854a:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	3301      	adds	r3, #1
 8008550:	60fb      	str	r3, [r7, #12]
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	429a      	cmp	r2, r3
 8008558:	d3e3      	bcc.n	8008522 <LCD_Clear+0x76>
}
 800855a:	bf00      	nop
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	20000a30 	.word	0x20000a30
 8008568:	40011000 	.word	0x40011000
 800856c:	40010c00 	.word	0x40010c00

08008570 <LCD_Fill>:
// Fill the area with color
// :(xend-xsta+1)*(yend-ysta+1)
void LCD_Fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey,
		uint16_t color) {
 8008570:	b590      	push	{r4, r7, lr}
 8008572:	b087      	sub	sp, #28
 8008574:	af02      	add	r7, sp, #8
 8008576:	4604      	mov	r4, r0
 8008578:	4608      	mov	r0, r1
 800857a:	4611      	mov	r1, r2
 800857c:	461a      	mov	r2, r3
 800857e:	4623      	mov	r3, r4
 8008580:	80fb      	strh	r3, [r7, #6]
 8008582:	4603      	mov	r3, r0
 8008584:	80bb      	strh	r3, [r7, #4]
 8008586:	460b      	mov	r3, r1
 8008588:	807b      	strh	r3, [r7, #2]
 800858a:	4613      	mov	r3, r2
 800858c:	803b      	strh	r3, [r7, #0]
	uint16_t i, j;
	uint16_t xlen = 0;
 800858e:	2300      	movs	r3, #0
 8008590:	817b      	strh	r3, [r7, #10]
	uint16_t temp;
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1))	//6804横屏的时候特殊处理
 8008592:	4b3a      	ldr	r3, [pc, #232]	; (800867c <LCD_Fill+0x10c>)
 8008594:	889b      	ldrh	r3, [r3, #4]
 8008596:	f646 0204 	movw	r2, #26628	; 0x6804
 800859a:	4293      	cmp	r3, r2
 800859c:	d133      	bne.n	8008606 <LCD_Fill+0x96>
 800859e:	4b37      	ldr	r3, [pc, #220]	; (800867c <LCD_Fill+0x10c>)
 80085a0:	799b      	ldrb	r3, [r3, #6]
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d12f      	bne.n	8008606 <LCD_Fill+0x96>
			{
		temp = sx;
 80085a6:	88fb      	ldrh	r3, [r7, #6]
 80085a8:	813b      	strh	r3, [r7, #8]
		sx = sy;
 80085aa:	88bb      	ldrh	r3, [r7, #4]
 80085ac:	80fb      	strh	r3, [r7, #6]
		sy = lcddev.width - ex - 1;
 80085ae:	4b33      	ldr	r3, [pc, #204]	; (800867c <LCD_Fill+0x10c>)
 80085b0:	881a      	ldrh	r2, [r3, #0]
 80085b2:	887b      	ldrh	r3, [r7, #2]
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	3b01      	subs	r3, #1
 80085ba:	80bb      	strh	r3, [r7, #4]
		ex = ey;
 80085bc:	883b      	ldrh	r3, [r7, #0]
 80085be:	807b      	strh	r3, [r7, #2]
		ey = lcddev.width - temp - 1;
 80085c0:	4b2e      	ldr	r3, [pc, #184]	; (800867c <LCD_Fill+0x10c>)
 80085c2:	881a      	ldrh	r2, [r3, #0]
 80085c4:	893b      	ldrh	r3, [r7, #8]
 80085c6:	1ad3      	subs	r3, r2, r3
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	3b01      	subs	r3, #1
 80085cc:	803b      	strh	r3, [r7, #0]
		lcddev.dir = 0;
 80085ce:	4b2b      	ldr	r3, [pc, #172]	; (800867c <LCD_Fill+0x10c>)
 80085d0:	2200      	movs	r2, #0
 80085d2:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 80085d4:	4b29      	ldr	r3, [pc, #164]	; (800867c <LCD_Fill+0x10c>)
 80085d6:	222a      	movs	r2, #42	; 0x2a
 80085d8:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 80085da:	4b28      	ldr	r3, [pc, #160]	; (800867c <LCD_Fill+0x10c>)
 80085dc:	222b      	movs	r2, #43	; 0x2b
 80085de:	819a      	strh	r2, [r3, #12]
		LCD_Fill(sx, sy, ex, ey, color);
 80085e0:	883c      	ldrh	r4, [r7, #0]
 80085e2:	887a      	ldrh	r2, [r7, #2]
 80085e4:	88b9      	ldrh	r1, [r7, #4]
 80085e6:	88f8      	ldrh	r0, [r7, #6]
 80085e8:	8c3b      	ldrh	r3, [r7, #32]
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	4623      	mov	r3, r4
 80085ee:	f7ff ffbf 	bl	8008570 <LCD_Fill>
		lcddev.dir = 1;
 80085f2:	4b22      	ldr	r3, [pc, #136]	; (800867c <LCD_Fill+0x10c>)
 80085f4:	2201      	movs	r2, #1
 80085f6:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 80085f8:	4b20      	ldr	r3, [pc, #128]	; (800867c <LCD_Fill+0x10c>)
 80085fa:	222b      	movs	r2, #43	; 0x2b
 80085fc:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 80085fe:	4b1f      	ldr	r3, [pc, #124]	; (800867c <LCD_Fill+0x10c>)
 8008600:	222a      	movs	r2, #42	; 0x2a
 8008602:	819a      	strh	r2, [r3, #12]
 8008604:	e036      	b.n	8008674 <LCD_Fill+0x104>
	} else {
		xlen = ex - sx + 1;
 8008606:	887a      	ldrh	r2, [r7, #2]
 8008608:	88fb      	ldrh	r3, [r7, #6]
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	b29b      	uxth	r3, r3
 800860e:	3301      	adds	r3, #1
 8008610:	817b      	strh	r3, [r7, #10]
		for (i = sy; i <= ey; i++) {
 8008612:	88bb      	ldrh	r3, [r7, #4]
 8008614:	81fb      	strh	r3, [r7, #14]
 8008616:	e029      	b.n	800866c <LCD_Fill+0xfc>
			LCD_SetCursor(sx, i);      				//设置光标位置
 8008618:	89fa      	ldrh	r2, [r7, #14]
 800861a:	88fb      	ldrh	r3, [r7, #6]
 800861c:	4611      	mov	r1, r2
 800861e:	4618      	mov	r0, r3
 8008620:	f7fa fdf0 	bl	8003204 <LCD_SetCursor>
			LCD_WriteRAM_Prepare();     			//开始写入GRAM	  
 8008624:	f7fa fde2 	bl	80031ec <LCD_WriteRAM_Prepare>
			for (j = 0; j < xlen; j++)
 8008628:	2300      	movs	r3, #0
 800862a:	81bb      	strh	r3, [r7, #12]
 800862c:	e017      	b.n	800865e <LCD_Fill+0xee>
				LCD_WR_DATA(color);	//设置光标位置
 800862e:	4b14      	ldr	r3, [pc, #80]	; (8008680 <LCD_Fill+0x110>)
 8008630:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008634:	611a      	str	r2, [r3, #16]
 8008636:	4b12      	ldr	r3, [pc, #72]	; (8008680 <LCD_Fill+0x110>)
 8008638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800863c:	615a      	str	r2, [r3, #20]
 800863e:	4a11      	ldr	r2, [pc, #68]	; (8008684 <LCD_Fill+0x114>)
 8008640:	8c3b      	ldrh	r3, [r7, #32]
 8008642:	60d3      	str	r3, [r2, #12]
 8008644:	4b0e      	ldr	r3, [pc, #56]	; (8008680 <LCD_Fill+0x110>)
 8008646:	2280      	movs	r2, #128	; 0x80
 8008648:	615a      	str	r2, [r3, #20]
 800864a:	4b0d      	ldr	r3, [pc, #52]	; (8008680 <LCD_Fill+0x110>)
 800864c:	2280      	movs	r2, #128	; 0x80
 800864e:	611a      	str	r2, [r3, #16]
 8008650:	4b0b      	ldr	r3, [pc, #44]	; (8008680 <LCD_Fill+0x110>)
 8008652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008656:	611a      	str	r2, [r3, #16]
			for (j = 0; j < xlen; j++)
 8008658:	89bb      	ldrh	r3, [r7, #12]
 800865a:	3301      	adds	r3, #1
 800865c:	81bb      	strh	r3, [r7, #12]
 800865e:	89ba      	ldrh	r2, [r7, #12]
 8008660:	897b      	ldrh	r3, [r7, #10]
 8008662:	429a      	cmp	r2, r3
 8008664:	d3e3      	bcc.n	800862e <LCD_Fill+0xbe>
		for (i = sy; i <= ey; i++) {
 8008666:	89fb      	ldrh	r3, [r7, #14]
 8008668:	3301      	adds	r3, #1
 800866a:	81fb      	strh	r3, [r7, #14]
 800866c:	89fa      	ldrh	r2, [r7, #14]
 800866e:	883b      	ldrh	r3, [r7, #0]
 8008670:	429a      	cmp	r2, r3
 8008672:	d9d1      	bls.n	8008618 <LCD_Fill+0xa8>
		}
	}
}
 8008674:	bf00      	nop
 8008676:	3714      	adds	r7, #20
 8008678:	46bd      	mov	sp, r7
 800867a:	bd90      	pop	{r4, r7, pc}
 800867c:	20000a30 	.word	0x20000a30
 8008680:	40011000 	.word	0x40011000
 8008684:	40010c00 	.word	0x40010c00

08008688 <LCD_Color_Fill>:
// Fill the area with color
//(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)
void LCD_Color_Fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey,
		uint16_t *color) {
 8008688:	b590      	push	{r4, r7, lr}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	4604      	mov	r4, r0
 8008690:	4608      	mov	r0, r1
 8008692:	4611      	mov	r1, r2
 8008694:	461a      	mov	r2, r3
 8008696:	4623      	mov	r3, r4
 8008698:	80fb      	strh	r3, [r7, #6]
 800869a:	4603      	mov	r3, r0
 800869c:	80bb      	strh	r3, [r7, #4]
 800869e:	460b      	mov	r3, r1
 80086a0:	807b      	strh	r3, [r7, #2]
 80086a2:	4613      	mov	r3, r2
 80086a4:	803b      	strh	r3, [r7, #0]
	uint16_t height, width;
	uint16_t i, j;
	width = ex - sx + 1; 			//得到填充的宽度
 80086a6:	887a      	ldrh	r2, [r7, #2]
 80086a8:	88fb      	ldrh	r3, [r7, #6]
 80086aa:	1ad3      	subs	r3, r2, r3
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	3301      	adds	r3, #1
 80086b0:	817b      	strh	r3, [r7, #10]
	height = ey - sy + 1;			//高度
 80086b2:	883a      	ldrh	r2, [r7, #0]
 80086b4:	88bb      	ldrh	r3, [r7, #4]
 80086b6:	1ad3      	subs	r3, r2, r3
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	3301      	adds	r3, #1
 80086bc:	813b      	strh	r3, [r7, #8]
	for (i = 0; i < height; i++) {
 80086be:	2300      	movs	r3, #0
 80086c0:	81fb      	strh	r3, [r7, #14]
 80086c2:	e035      	b.n	8008730 <LCD_Color_Fill+0xa8>
		LCD_SetCursor(sx, sy + i);   	//设置光标位置
 80086c4:	88ba      	ldrh	r2, [r7, #4]
 80086c6:	89fb      	ldrh	r3, [r7, #14]
 80086c8:	4413      	add	r3, r2
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	88fb      	ldrh	r3, [r7, #6]
 80086ce:	4611      	mov	r1, r2
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7fa fd97 	bl	8003204 <LCD_SetCursor>
		LCD_WriteRAM_Prepare();     //开始写入GRAM
 80086d6:	f7fa fd89 	bl	80031ec <LCD_WriteRAM_Prepare>
		for (j = 0; j < width; j++)
 80086da:	2300      	movs	r3, #0
 80086dc:	81bb      	strh	r3, [r7, #12]
 80086de:	e020      	b.n	8008722 <LCD_Color_Fill+0x9a>
			LCD_WR_DATA(color[i * width + j]);     //写入数据
 80086e0:	4b17      	ldr	r3, [pc, #92]	; (8008740 <LCD_Color_Fill+0xb8>)
 80086e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086e6:	611a      	str	r2, [r3, #16]
 80086e8:	4b15      	ldr	r3, [pc, #84]	; (8008740 <LCD_Color_Fill+0xb8>)
 80086ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086ee:	615a      	str	r2, [r3, #20]
 80086f0:	89fb      	ldrh	r3, [r7, #14]
 80086f2:	897a      	ldrh	r2, [r7, #10]
 80086f4:	fb02 f203 	mul.w	r2, r2, r3
 80086f8:	89bb      	ldrh	r3, [r7, #12]
 80086fa:	4413      	add	r3, r2
 80086fc:	005b      	lsls	r3, r3, #1
 80086fe:	6a3a      	ldr	r2, [r7, #32]
 8008700:	4413      	add	r3, r2
 8008702:	881a      	ldrh	r2, [r3, #0]
 8008704:	4b0f      	ldr	r3, [pc, #60]	; (8008744 <LCD_Color_Fill+0xbc>)
 8008706:	60da      	str	r2, [r3, #12]
 8008708:	4b0d      	ldr	r3, [pc, #52]	; (8008740 <LCD_Color_Fill+0xb8>)
 800870a:	2280      	movs	r2, #128	; 0x80
 800870c:	615a      	str	r2, [r3, #20]
 800870e:	4b0c      	ldr	r3, [pc, #48]	; (8008740 <LCD_Color_Fill+0xb8>)
 8008710:	2280      	movs	r2, #128	; 0x80
 8008712:	611a      	str	r2, [r3, #16]
 8008714:	4b0a      	ldr	r3, [pc, #40]	; (8008740 <LCD_Color_Fill+0xb8>)
 8008716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800871a:	611a      	str	r2, [r3, #16]
		for (j = 0; j < width; j++)
 800871c:	89bb      	ldrh	r3, [r7, #12]
 800871e:	3301      	adds	r3, #1
 8008720:	81bb      	strh	r3, [r7, #12]
 8008722:	89ba      	ldrh	r2, [r7, #12]
 8008724:	897b      	ldrh	r3, [r7, #10]
 8008726:	429a      	cmp	r2, r3
 8008728:	d3da      	bcc.n	80086e0 <LCD_Color_Fill+0x58>
	for (i = 0; i < height; i++) {
 800872a:	89fb      	ldrh	r3, [r7, #14]
 800872c:	3301      	adds	r3, #1
 800872e:	81fb      	strh	r3, [r7, #14]
 8008730:	89fa      	ldrh	r2, [r7, #14]
 8008732:	893b      	ldrh	r3, [r7, #8]
 8008734:	429a      	cmp	r2, r3
 8008736:	d3c5      	bcc.n	80086c4 <LCD_Color_Fill+0x3c>
	}
}
 8008738:	bf00      	nop
 800873a:	3714      	adds	r7, #20
 800873c:	46bd      	mov	sp, r7
 800873e:	bd90      	pop	{r4, r7, pc}
 8008740:	40011000 	.word	0x40011000
 8008744:	40010c00 	.word	0x40010c00

08008748 <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 8008748:	b590      	push	{r4, r7, lr}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
 800874e:	4604      	mov	r4, r0
 8008750:	4608      	mov	r0, r1
 8008752:	4611      	mov	r1, r2
 8008754:	461a      	mov	r2, r3
 8008756:	4623      	mov	r3, r4
 8008758:	80fb      	strh	r3, [r7, #6]
 800875a:	4603      	mov	r3, r0
 800875c:	80bb      	strh	r3, [r7, #4]
 800875e:	460b      	mov	r3, r1
 8008760:	70fb      	strb	r3, [r7, #3]
 8008762:	4613      	mov	r3, r2
 8008764:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 8008766:	88bb      	ldrh	r3, [r7, #4]
 8008768:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 800876a:	78bb      	ldrb	r3, [r7, #2]
 800876c:	08db      	lsrs	r3, r3, #3
 800876e:	b2db      	uxtb	r3, r3
 8008770:	461a      	mov	r2, r3
 8008772:	78bb      	ldrb	r3, [r7, #2]
 8008774:	f003 0307 	and.w	r3, r3, #7
 8008778:	b2db      	uxtb	r3, r3
 800877a:	2b00      	cmp	r3, #0
 800877c:	bf14      	ite	ne
 800877e:	2301      	movne	r3, #1
 8008780:	2300      	moveq	r3, #0
 8008782:	b2db      	uxtb	r3, r3
 8008784:	4413      	add	r3, r2
 8008786:	b2db      	uxtb	r3, r3
 8008788:	78ba      	ldrb	r2, [r7, #2]
 800878a:	0852      	lsrs	r2, r2, #1
 800878c:	b2d2      	uxtb	r2, r2
 800878e:	fb02 f303 	mul.w	r3, r2, r3
 8008792:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8008794:	78fb      	ldrb	r3, [r7, #3]
 8008796:	3b20      	subs	r3, #32
 8008798:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 800879a:	2300      	movs	r3, #0
 800879c:	737b      	strb	r3, [r7, #13]
 800879e:	e069      	b.n	8008874 <LCD_ShowChar+0x12c>
		if (size == 12)
 80087a0:	78bb      	ldrb	r3, [r7, #2]
 80087a2:	2b0c      	cmp	r3, #12
 80087a4:	d10b      	bne.n	80087be <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 80087a6:	78fa      	ldrb	r2, [r7, #3]
 80087a8:	7b79      	ldrb	r1, [r7, #13]
 80087aa:	4838      	ldr	r0, [pc, #224]	; (800888c <LCD_ShowChar+0x144>)
 80087ac:	4613      	mov	r3, r2
 80087ae:	005b      	lsls	r3, r3, #1
 80087b0:	4413      	add	r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4403      	add	r3, r0
 80087b6:	440b      	add	r3, r1
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	73fb      	strb	r3, [r7, #15]
 80087bc:	e019      	b.n	80087f2 <LCD_ShowChar+0xaa>
		else if (size == 16)
 80087be:	78bb      	ldrb	r3, [r7, #2]
 80087c0:	2b10      	cmp	r3, #16
 80087c2:	d108      	bne.n	80087d6 <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 80087c4:	78fa      	ldrb	r2, [r7, #3]
 80087c6:	7b7b      	ldrb	r3, [r7, #13]
 80087c8:	4931      	ldr	r1, [pc, #196]	; (8008890 <LCD_ShowChar+0x148>)
 80087ca:	0112      	lsls	r2, r2, #4
 80087cc:	440a      	add	r2, r1
 80087ce:	4413      	add	r3, r2
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	73fb      	strb	r3, [r7, #15]
 80087d4:	e00d      	b.n	80087f2 <LCD_ShowChar+0xaa>
		else if (size == 24)
 80087d6:	78bb      	ldrb	r3, [r7, #2]
 80087d8:	2b18      	cmp	r3, #24
 80087da:	d150      	bne.n	800887e <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 80087dc:	78fa      	ldrb	r2, [r7, #3]
 80087de:	7b79      	ldrb	r1, [r7, #13]
 80087e0:	482c      	ldr	r0, [pc, #176]	; (8008894 <LCD_ShowChar+0x14c>)
 80087e2:	4613      	mov	r3, r2
 80087e4:	00db      	lsls	r3, r3, #3
 80087e6:	4413      	add	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	4403      	add	r3, r0
 80087ec:	440b      	add	r3, r1
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 80087f2:	2300      	movs	r3, #0
 80087f4:	73bb      	strb	r3, [r7, #14]
 80087f6:	e035      	b.n	8008864 <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 80087f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	da07      	bge.n	8008810 <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8008800:	4b25      	ldr	r3, [pc, #148]	; (8008898 <LCD_ShowChar+0x150>)
 8008802:	881a      	ldrh	r2, [r3, #0]
 8008804:	88b9      	ldrh	r1, [r7, #4]
 8008806:	88fb      	ldrh	r3, [r7, #6]
 8008808:	4618      	mov	r0, r3
 800880a:	f7fb fad9 	bl	8003dc0 <LCD_Fast_DrawPoint>
 800880e:	e00a      	b.n	8008826 <LCD_ShowChar+0xde>
			else if (mode == 0)
 8008810:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d106      	bne.n	8008826 <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 8008818:	4b20      	ldr	r3, [pc, #128]	; (800889c <LCD_ShowChar+0x154>)
 800881a:	881a      	ldrh	r2, [r3, #0]
 800881c:	88b9      	ldrh	r1, [r7, #4]
 800881e:	88fb      	ldrh	r3, [r7, #6]
 8008820:	4618      	mov	r0, r3
 8008822:	f7fb facd 	bl	8003dc0 <LCD_Fast_DrawPoint>
			temp <<= 1;
 8008826:	7bfb      	ldrb	r3, [r7, #15]
 8008828:	005b      	lsls	r3, r3, #1
 800882a:	73fb      	strb	r3, [r7, #15]
			y++;
 800882c:	88bb      	ldrh	r3, [r7, #4]
 800882e:	3301      	adds	r3, #1
 8008830:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 8008832:	4b1b      	ldr	r3, [pc, #108]	; (80088a0 <LCD_ShowChar+0x158>)
 8008834:	885b      	ldrh	r3, [r3, #2]
 8008836:	88ba      	ldrh	r2, [r7, #4]
 8008838:	429a      	cmp	r2, r3
 800883a:	d222      	bcs.n	8008882 <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 800883c:	88ba      	ldrh	r2, [r7, #4]
 800883e:	897b      	ldrh	r3, [r7, #10]
 8008840:	1ad2      	subs	r2, r2, r3
 8008842:	78bb      	ldrb	r3, [r7, #2]
 8008844:	429a      	cmp	r2, r3
 8008846:	d10a      	bne.n	800885e <LCD_ShowChar+0x116>
				y = y0;
 8008848:	897b      	ldrh	r3, [r7, #10]
 800884a:	80bb      	strh	r3, [r7, #4]
				x++;
 800884c:	88fb      	ldrh	r3, [r7, #6]
 800884e:	3301      	adds	r3, #1
 8008850:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 8008852:	4b13      	ldr	r3, [pc, #76]	; (80088a0 <LCD_ShowChar+0x158>)
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	88fa      	ldrh	r2, [r7, #6]
 8008858:	429a      	cmp	r2, r3
 800885a:	d307      	bcc.n	800886c <LCD_ShowChar+0x124>
					return;	//超区域了
 800885c:	e012      	b.n	8008884 <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 800885e:	7bbb      	ldrb	r3, [r7, #14]
 8008860:	3301      	adds	r3, #1
 8008862:	73bb      	strb	r3, [r7, #14]
 8008864:	7bbb      	ldrb	r3, [r7, #14]
 8008866:	2b07      	cmp	r3, #7
 8008868:	d9c6      	bls.n	80087f8 <LCD_ShowChar+0xb0>
 800886a:	e000      	b.n	800886e <LCD_ShowChar+0x126>
				break;
 800886c:	bf00      	nop
	for (t = 0; t < csize; t++) {
 800886e:	7b7b      	ldrb	r3, [r7, #13]
 8008870:	3301      	adds	r3, #1
 8008872:	737b      	strb	r3, [r7, #13]
 8008874:	7b7a      	ldrb	r2, [r7, #13]
 8008876:	7a7b      	ldrb	r3, [r7, #9]
 8008878:	429a      	cmp	r2, r3
 800887a:	d391      	bcc.n	80087a0 <LCD_ShowChar+0x58>
 800887c:	e002      	b.n	8008884 <LCD_ShowChar+0x13c>
			return;								//没有的字库
 800887e:	bf00      	nop
 8008880:	e000      	b.n	8008884 <LCD_ShowChar+0x13c>
				return;		//超区域了
 8008882:	bf00      	nop
			}
		}
	}
}
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	bd90      	pop	{r4, r7, pc}
 800888a:	bf00      	nop
 800888c:	0800c980 	.word	0x0800c980
 8008890:	0800cdf4 	.word	0x0800cdf4
 8008894:	0800d3e4 	.word	0x0800d3e4
 8008898:	200009d2 	.word	0x200009d2
 800889c:	20000006 	.word	0x20000006
 80088a0:	20000a30 	.word	0x20000a30

080088a4 <LCD_Pow>:
//m^n函数
//返回值:m^n次方.
uint32_t LCD_Pow(uint8_t m, uint8_t n) {
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	4603      	mov	r3, r0
 80088ac:	460a      	mov	r2, r1
 80088ae:	71fb      	strb	r3, [r7, #7]
 80088b0:	4613      	mov	r3, r2
 80088b2:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 80088b4:	2301      	movs	r3, #1
 80088b6:	60fb      	str	r3, [r7, #12]
	while (n--)
 80088b8:	e004      	b.n	80088c4 <LCD_Pow+0x20>
		result *= m;
 80088ba:	79fa      	ldrb	r2, [r7, #7]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	fb02 f303 	mul.w	r3, r2, r3
 80088c2:	60fb      	str	r3, [r7, #12]
	while (n--)
 80088c4:	79bb      	ldrb	r3, [r7, #6]
 80088c6:	1e5a      	subs	r2, r3, #1
 80088c8:	71ba      	strb	r2, [r7, #6]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1f5      	bne.n	80088ba <LCD_Pow+0x16>
	return result;
 80088ce:	68fb      	ldr	r3, [r7, #12]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3714      	adds	r7, #20
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bc80      	pop	{r7}
 80088d8:	4770      	bx	lr
	...

080088dc <LCD_ShowNum>:
// Display number without the leading zeros
// x,y: starting coordinate
// len: number of digits
// size: font size 12/16/24
void LCD_ShowNum(uint16_t x, uint16_t y, uint32_t num, uint8_t len,
		uint8_t size) {
 80088dc:	b590      	push	{r4, r7, lr}
 80088de:	b089      	sub	sp, #36	; 0x24
 80088e0:	af02      	add	r7, sp, #8
 80088e2:	60ba      	str	r2, [r7, #8]
 80088e4:	461a      	mov	r2, r3
 80088e6:	4603      	mov	r3, r0
 80088e8:	81fb      	strh	r3, [r7, #14]
 80088ea:	460b      	mov	r3, r1
 80088ec:	81bb      	strh	r3, [r7, #12]
 80088ee:	4613      	mov	r3, r2
 80088f0:	71fb      	strb	r3, [r7, #7]
	uint8_t t, temp;
	uint8_t enshow = 0;
 80088f2:	2300      	movs	r3, #0
 80088f4:	75bb      	strb	r3, [r7, #22]
	for (t = 0; t < len; t++) {
 80088f6:	2300      	movs	r3, #0
 80088f8:	75fb      	strb	r3, [r7, #23]
 80088fa:	e057      	b.n	80089ac <LCD_ShowNum+0xd0>
		temp = (num / LCD_Pow(10, len - t - 1)) % 10;
 80088fc:	79fa      	ldrb	r2, [r7, #7]
 80088fe:	7dfb      	ldrb	r3, [r7, #23]
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	b2db      	uxtb	r3, r3
 8008904:	3b01      	subs	r3, #1
 8008906:	b2db      	uxtb	r3, r3
 8008908:	4619      	mov	r1, r3
 800890a:	200a      	movs	r0, #10
 800890c:	f7ff ffca 	bl	80088a4 <LCD_Pow>
 8008910:	4602      	mov	r2, r0
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	fbb3 f1f2 	udiv	r1, r3, r2
 8008918:	4b28      	ldr	r3, [pc, #160]	; (80089bc <LCD_ShowNum+0xe0>)
 800891a:	fba3 2301 	umull	r2, r3, r3, r1
 800891e:	08da      	lsrs	r2, r3, #3
 8008920:	4613      	mov	r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	4413      	add	r3, r2
 8008926:	005b      	lsls	r3, r3, #1
 8008928:	1aca      	subs	r2, r1, r3
 800892a:	4613      	mov	r3, r2
 800892c:	757b      	strb	r3, [r7, #21]
		if (enshow == 0 && t < (len - 1)) {
 800892e:	7dbb      	ldrb	r3, [r7, #22]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d120      	bne.n	8008976 <LCD_ShowNum+0x9a>
 8008934:	7dfa      	ldrb	r2, [r7, #23]
 8008936:	79fb      	ldrb	r3, [r7, #7]
 8008938:	3b01      	subs	r3, #1
 800893a:	429a      	cmp	r2, r3
 800893c:	da1b      	bge.n	8008976 <LCD_ShowNum+0x9a>
			if (temp == 0) {
 800893e:	7d7b      	ldrb	r3, [r7, #21]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d116      	bne.n	8008972 <LCD_ShowNum+0x96>
				LCD_ShowChar(x + (size / 2) * t, y, ' ', size, 0);
 8008944:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008948:	085b      	lsrs	r3, r3, #1
 800894a:	b2db      	uxtb	r3, r3
 800894c:	b29b      	uxth	r3, r3
 800894e:	7dfa      	ldrb	r2, [r7, #23]
 8008950:	b292      	uxth	r2, r2
 8008952:	fb02 f303 	mul.w	r3, r2, r3
 8008956:	b29a      	uxth	r2, r3
 8008958:	89fb      	ldrh	r3, [r7, #14]
 800895a:	4413      	add	r3, r2
 800895c:	b298      	uxth	r0, r3
 800895e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8008962:	89b9      	ldrh	r1, [r7, #12]
 8008964:	2300      	movs	r3, #0
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	4613      	mov	r3, r2
 800896a:	2220      	movs	r2, #32
 800896c:	f7ff feec 	bl	8008748 <LCD_ShowChar>
				continue;
 8008970:	e019      	b.n	80089a6 <LCD_ShowNum+0xca>
			} else
				enshow = 1;
 8008972:	2301      	movs	r3, #1
 8008974:	75bb      	strb	r3, [r7, #22]

		}
		LCD_ShowChar(x + (size / 2) * t, y, temp + '0', size, 0);
 8008976:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800897a:	085b      	lsrs	r3, r3, #1
 800897c:	b2db      	uxtb	r3, r3
 800897e:	b29b      	uxth	r3, r3
 8008980:	7dfa      	ldrb	r2, [r7, #23]
 8008982:	b292      	uxth	r2, r2
 8008984:	fb02 f303 	mul.w	r3, r2, r3
 8008988:	b29a      	uxth	r2, r3
 800898a:	89fb      	ldrh	r3, [r7, #14]
 800898c:	4413      	add	r3, r2
 800898e:	b298      	uxth	r0, r3
 8008990:	7d7b      	ldrb	r3, [r7, #21]
 8008992:	3330      	adds	r3, #48	; 0x30
 8008994:	b2da      	uxtb	r2, r3
 8008996:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 800899a:	89b9      	ldrh	r1, [r7, #12]
 800899c:	2300      	movs	r3, #0
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	4623      	mov	r3, r4
 80089a2:	f7ff fed1 	bl	8008748 <LCD_ShowChar>
	for (t = 0; t < len; t++) {
 80089a6:	7dfb      	ldrb	r3, [r7, #23]
 80089a8:	3301      	adds	r3, #1
 80089aa:	75fb      	strb	r3, [r7, #23]
 80089ac:	7dfa      	ldrb	r2, [r7, #23]
 80089ae:	79fb      	ldrb	r3, [r7, #7]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d3a3      	bcc.n	80088fc <LCD_ShowNum+0x20>
	}
}
 80089b4:	bf00      	nop
 80089b6:	371c      	adds	r7, #28
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd90      	pop	{r4, r7, pc}
 80089bc:	cccccccd 	.word	0xcccccccd

080089c0 <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 80089c0:	b590      	push	{r4, r7, lr}
 80089c2:	b087      	sub	sp, #28
 80089c4:	af02      	add	r7, sp, #8
 80089c6:	4604      	mov	r4, r0
 80089c8:	4608      	mov	r0, r1
 80089ca:	4611      	mov	r1, r2
 80089cc:	461a      	mov	r2, r3
 80089ce:	4623      	mov	r3, r4
 80089d0:	80fb      	strh	r3, [r7, #6]
 80089d2:	4603      	mov	r3, r0
 80089d4:	80bb      	strh	r3, [r7, #4]
 80089d6:	460b      	mov	r3, r1
 80089d8:	807b      	strh	r3, [r7, #2]
 80089da:	4613      	mov	r3, r2
 80089dc:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 80089de:	88fb      	ldrh	r3, [r7, #6]
 80089e0:	73fb      	strb	r3, [r7, #15]
	width += x;
 80089e2:	887a      	ldrh	r2, [r7, #2]
 80089e4:	88fb      	ldrh	r3, [r7, #6]
 80089e6:	4413      	add	r3, r2
 80089e8:	807b      	strh	r3, [r7, #2]
	height += y;
 80089ea:	883a      	ldrh	r2, [r7, #0]
 80089ec:	88bb      	ldrh	r3, [r7, #4]
 80089ee:	4413      	add	r3, r2
 80089f0:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 80089f2:	e025      	b.n	8008a40 <LCD_ShowString+0x80>
	{
		if (x >= width) {
 80089f4:	88fa      	ldrh	r2, [r7, #6]
 80089f6:	887b      	ldrh	r3, [r7, #2]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d307      	bcc.n	8008a0c <LCD_ShowString+0x4c>
			x = x0;
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
 80089fe:	80fb      	strh	r3, [r7, #6]
			y += size;
 8008a00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a04:	b29a      	uxth	r2, r3
 8008a06:	88bb      	ldrh	r3, [r7, #4]
 8008a08:	4413      	add	r3, r2
 8008a0a:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 8008a0c:	88ba      	ldrh	r2, [r7, #4]
 8008a0e:	883b      	ldrh	r3, [r7, #0]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d21e      	bcs.n	8008a52 <LCD_ShowString+0x92>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 8008a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a16:	781a      	ldrb	r2, [r3, #0]
 8008a18:	f897 4020 	ldrb.w	r4, [r7, #32]
 8008a1c:	88b9      	ldrh	r1, [r7, #4]
 8008a1e:	88f8      	ldrh	r0, [r7, #6]
 8008a20:	2300      	movs	r3, #0
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	4623      	mov	r3, r4
 8008a26:	f7ff fe8f 	bl	8008748 <LCD_ShowChar>
		x += size / 2;
 8008a2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a2e:	085b      	lsrs	r3, r3, #1
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	b29a      	uxth	r2, r3
 8008a34:	88fb      	ldrh	r3, [r7, #6]
 8008a36:	4413      	add	r3, r2
 8008a38:	80fb      	strh	r3, [r7, #6]
		p++;
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	2b7e      	cmp	r3, #126	; 0x7e
 8008a46:	d805      	bhi.n	8008a54 <LCD_ShowString+0x94>
 8008a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	2b1f      	cmp	r3, #31
 8008a4e:	d8d1      	bhi.n	80089f4 <LCD_ShowString+0x34>
	}
}
 8008a50:	e000      	b.n	8008a54 <LCD_ShowString+0x94>
			break;	//退出
 8008a52:	bf00      	nop
}
 8008a54:	bf00      	nop
 8008a56:	3714      	adds	r7, #20
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd90      	pop	{r4, r7, pc}

08008a5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008a60:	f7f8 fbb8 	bl	80011d4 <HAL_Init>


  /* USER CODE BEGIN Init */
	LCD_Init();
 8008a64:	f7fb fdf4 	bl	8004650 <LCD_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008a68:	f000 f826 	bl	8008ab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008a6c:	f7fa fa56 	bl	8002f1c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8008a70:	f000 f9d4 	bl	8008e1c <MX_USART1_UART_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8008a74:	2200      	movs	r2, #0
 8008a76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008a7a:	480d      	ldr	r0, [pc, #52]	; (8008ab0 <main+0x54>)
 8008a7c:	f7f8 febd 	bl	80017fa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8008a80:	2200      	movs	r2, #0
 8008a82:	2104      	movs	r1, #4
 8008a84:	480b      	ldr	r0, [pc, #44]	; (8008ab4 <main+0x58>)
 8008a86:	f7f8 feb8 	bl	80017fa <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8008a8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008a8e:	f7f8 fc03 	bl	8001298 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8008a92:	2201      	movs	r2, #1
 8008a94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008a98:	4805      	ldr	r0, [pc, #20]	; (8008ab0 <main+0x54>)
 8008a9a:	f7f8 feae 	bl	80017fa <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	2104      	movs	r1, #4
 8008aa2:	4804      	ldr	r0, [pc, #16]	; (8008ab4 <main+0x58>)
 8008aa4:	f7f8 fea9 	bl	80017fa <HAL_GPIO_WritePin>
  /* USER CODE BEGIN 2 */
  // 开启场景
  Demo4_Routine();
 8008aa8:	f001 fbac 	bl	800a204 <Demo4_Routine>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 8008aac:	e7fe      	b.n	8008aac <main+0x50>
 8008aae:	bf00      	nop
 8008ab0:	40010800 	.word	0x40010800
 8008ab4:	40011400 	.word	0x40011400

08008ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b090      	sub	sp, #64	; 0x40
 8008abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008abe:	f107 0318 	add.w	r3, r7, #24
 8008ac2:	2228      	movs	r2, #40	; 0x28
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f001 fe82 	bl	800a7d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008acc:	1d3b      	adds	r3, r7, #4
 8008ace:	2200      	movs	r2, #0
 8008ad0:	601a      	str	r2, [r3, #0]
 8008ad2:	605a      	str	r2, [r3, #4]
 8008ad4:	609a      	str	r2, [r3, #8]
 8008ad6:	60da      	str	r2, [r3, #12]
 8008ad8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008ada:	2302      	movs	r3, #2
 8008adc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008ade:	2301      	movs	r3, #1
 8008ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008ae2:	2310      	movs	r3, #16
 8008ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008aea:	f107 0318 	add.w	r3, r7, #24
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7f8 fecc 	bl	800188c <HAL_RCC_OscConfig>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d001      	beq.n	8008afe <SystemClock_Config+0x46>
  {
    Error_Handler();
 8008afa:	f000 f861 	bl	8008bc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008afe:	230f      	movs	r3, #15
 8008b00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8008b02:	2300      	movs	r3, #0
 8008b04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008b06:	2300      	movs	r3, #0
 8008b08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8008b12:	1d3b      	adds	r3, r7, #4
 8008b14:	2100      	movs	r1, #0
 8008b16:	4618      	mov	r0, r3
 8008b18:	f7f9 f938 	bl	8001d8c <HAL_RCC_ClockConfig>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d001      	beq.n	8008b26 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8008b22:	f000 f84d 	bl	8008bc0 <Error_Handler>
  }
}
 8008b26:	bf00      	nop
 8008b28:	3740      	adds	r7, #64	; 0x40
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
	...

08008b30 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	4603      	mov	r3, r0
 8008b38:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8008b3a:	88fb      	ldrh	r3, [r7, #6]
 8008b3c:	2b20      	cmp	r3, #32
 8008b3e:	d005      	beq.n	8008b4c <HAL_GPIO_EXTI_Callback+0x1c>
 8008b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b44:	d00e      	beq.n	8008b64 <HAL_GPIO_EXTI_Callback+0x34>
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d018      	beq.n	8008b7c <HAL_GPIO_EXTI_Callback+0x4c>
				HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
				HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
			}
			break;
		default:
			break;
 8008b4a:	e02d      	b.n	8008ba8 <HAL_GPIO_EXTI_Callback+0x78>
			if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET)
 8008b4c:	2120      	movs	r1, #32
 8008b4e:	4818      	ldr	r0, [pc, #96]	; (8008bb0 <HAL_GPIO_EXTI_Callback+0x80>)
 8008b50:	f7f8 fe3c 	bl	80017cc <HAL_GPIO_ReadPin>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d121      	bne.n	8008b9e <HAL_GPIO_EXTI_Callback+0x6e>
				Engine_KeyPressed = -1;
 8008b5a:	4b16      	ldr	r3, [pc, #88]	; (8008bb4 <HAL_GPIO_EXTI_Callback+0x84>)
 8008b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b60:	601a      	str	r2, [r3, #0]
			break;
 8008b62:	e01c      	b.n	8008b9e <HAL_GPIO_EXTI_Callback+0x6e>
			if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET)
 8008b64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008b68:	4813      	ldr	r0, [pc, #76]	; (8008bb8 <HAL_GPIO_EXTI_Callback+0x88>)
 8008b6a:	f7f8 fe2f 	bl	80017cc <HAL_GPIO_ReadPin>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d116      	bne.n	8008ba2 <HAL_GPIO_EXTI_Callback+0x72>
				Engine_KeyPressed = 1;
 8008b74:	4b0f      	ldr	r3, [pc, #60]	; (8008bb4 <HAL_GPIO_EXTI_Callback+0x84>)
 8008b76:	2201      	movs	r2, #1
 8008b78:	601a      	str	r2, [r3, #0]
			break;
 8008b7a:	e012      	b.n	8008ba2 <HAL_GPIO_EXTI_Callback+0x72>
			if (HAL_GPIO_ReadPin(KEY_WK_GPIO_Port, KEY_WK_Pin) == GPIO_PIN_SET)
 8008b7c:	2101      	movs	r1, #1
 8008b7e:	480e      	ldr	r0, [pc, #56]	; (8008bb8 <HAL_GPIO_EXTI_Callback+0x88>)
 8008b80:	f7f8 fe24 	bl	80017cc <HAL_GPIO_ReadPin>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d10d      	bne.n	8008ba6 <HAL_GPIO_EXTI_Callback+0x76>
				HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8008b8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008b8e:	480a      	ldr	r0, [pc, #40]	; (8008bb8 <HAL_GPIO_EXTI_Callback+0x88>)
 8008b90:	f7f8 fe4b 	bl	800182a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8008b94:	2104      	movs	r1, #4
 8008b96:	4809      	ldr	r0, [pc, #36]	; (8008bbc <HAL_GPIO_EXTI_Callback+0x8c>)
 8008b98:	f7f8 fe47 	bl	800182a <HAL_GPIO_TogglePin>
			break;
 8008b9c:	e003      	b.n	8008ba6 <HAL_GPIO_EXTI_Callback+0x76>
			break;
 8008b9e:	bf00      	nop
 8008ba0:	e002      	b.n	8008ba8 <HAL_GPIO_EXTI_Callback+0x78>
			break;
 8008ba2:	bf00      	nop
 8008ba4:	e000      	b.n	8008ba8 <HAL_GPIO_EXTI_Callback+0x78>
			break;
 8008ba6:	bf00      	nop
	}
}
 8008ba8:	bf00      	nop
 8008baa:	3708      	adds	r7, #8
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	40011000 	.word	0x40011000
 8008bb4:	200009f0 	.word	0x200009f0
 8008bb8:	40010800 	.word	0x40010800
 8008bbc:	40011400 	.word	0x40011400

08008bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	printlnf("error");
 8008bc4:	4802      	ldr	r0, [pc, #8]	; (8008bd0 <Error_Handler+0x10>)
 8008bc6:	f000 f823 	bl	8008c10 <printlnf>
	/* User can add his own implementation to report the HAL error return state */
  /* USER CODE END Error_Handler_Debug */
}
 8008bca:	bf00      	nop
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	0800c910 	.word	0x0800c910

08008bd4 <println>:
#include <stdarg.h>

char __msg[50];

void println(const char* str)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
	sprintf(__msg, "%s\n", str);
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	4909      	ldr	r1, [pc, #36]	; (8008c04 <println+0x30>)
 8008be0:	4809      	ldr	r0, [pc, #36]	; (8008c08 <println+0x34>)
 8008be2:	f002 fb11 	bl	800b208 <siprintf>
	HAL_UART_Transmit(&huart1, (unsigned char*)__msg, strlen(__msg), 0xffff);
 8008be6:	4808      	ldr	r0, [pc, #32]	; (8008c08 <println+0x34>)
 8008be8:	f7f7 fb1e 	bl	8000228 <strlen>
 8008bec:	4603      	mov	r3, r0
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008bf4:	4904      	ldr	r1, [pc, #16]	; (8008c08 <println+0x34>)
 8008bf6:	4805      	ldr	r0, [pc, #20]	; (8008c0c <println+0x38>)
 8008bf8:	f7f9 fab1 	bl	800215e <HAL_UART_Transmit>
}
 8008bfc:	bf00      	nop
 8008bfe:	3708      	adds	r7, #8
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	0800c918 	.word	0x0800c918
 8008c08:	20000a40 	.word	0x20000a40
 8008c0c:	20000a74 	.word	0x20000a74

08008c10 <printlnf>:

void printlnf(const char* fmt, ...)
{
 8008c10:	b40f      	push	{r0, r1, r2, r3}
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b082      	sub	sp, #8
 8008c16:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, fmt);
 8008c18:	f107 0314 	add.w	r3, r7, #20
 8008c1c:	607b      	str	r3, [r7, #4]
	vsprintf(__msg, fmt, args);
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	6939      	ldr	r1, [r7, #16]
 8008c22:	4806      	ldr	r0, [pc, #24]	; (8008c3c <printlnf+0x2c>)
 8008c24:	f002 fb26 	bl	800b274 <vsiprintf>
	va_end(args);

	println(__msg);
 8008c28:	4804      	ldr	r0, [pc, #16]	; (8008c3c <printlnf+0x2c>)
 8008c2a:	f7ff ffd3 	bl	8008bd4 <println>
}
 8008c2e:	bf00      	nop
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c38:	b004      	add	sp, #16
 8008c3a:	4770      	bx	lr
 8008c3c:	20000a40 	.word	0x20000a40

08008c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008c46:	4b16      	ldr	r3, [pc, #88]	; (8008ca0 <HAL_MspInit+0x60>)
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	4a15      	ldr	r2, [pc, #84]	; (8008ca0 <HAL_MspInit+0x60>)
 8008c4c:	f043 0301 	orr.w	r3, r3, #1
 8008c50:	6193      	str	r3, [r2, #24]
 8008c52:	4b13      	ldr	r3, [pc, #76]	; (8008ca0 <HAL_MspInit+0x60>)
 8008c54:	699b      	ldr	r3, [r3, #24]
 8008c56:	f003 0301 	and.w	r3, r3, #1
 8008c5a:	60bb      	str	r3, [r7, #8]
 8008c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008c5e:	4b10      	ldr	r3, [pc, #64]	; (8008ca0 <HAL_MspInit+0x60>)
 8008c60:	69db      	ldr	r3, [r3, #28]
 8008c62:	4a0f      	ldr	r2, [pc, #60]	; (8008ca0 <HAL_MspInit+0x60>)
 8008c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c68:	61d3      	str	r3, [r2, #28]
 8008c6a:	4b0d      	ldr	r3, [pc, #52]	; (8008ca0 <HAL_MspInit+0x60>)
 8008c6c:	69db      	ldr	r3, [r3, #28]
 8008c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c72:	607b      	str	r3, [r7, #4]
 8008c74:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8008c76:	2005      	movs	r0, #5
 8008c78:	f7f8 fbfc 	bl	8001474 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008c7c:	4b09      	ldr	r3, [pc, #36]	; (8008ca4 <HAL_MspInit+0x64>)
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	60fb      	str	r3, [r7, #12]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008c88:	60fb      	str	r3, [r7, #12]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008c90:	60fb      	str	r3, [r7, #12]
 8008c92:	4a04      	ldr	r2, [pc, #16]	; (8008ca4 <HAL_MspInit+0x64>)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008c98:	bf00      	nop
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	40021000 	.word	0x40021000
 8008ca4:	40010000 	.word	0x40010000

08008ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008cac:	bf00      	nop
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bc80      	pop	{r7}
 8008cb2:	4770      	bx	lr

08008cb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008cb8:	e7fe      	b.n	8008cb8 <HardFault_Handler+0x4>

08008cba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008cba:	b480      	push	{r7}
 8008cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008cbe:	e7fe      	b.n	8008cbe <MemManage_Handler+0x4>

08008cc0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008cc4:	e7fe      	b.n	8008cc4 <BusFault_Handler+0x4>

08008cc6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008cc6:	b480      	push	{r7}
 8008cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008cca:	e7fe      	b.n	8008cca <UsageFault_Handler+0x4>

08008ccc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008cd0:	bf00      	nop
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bc80      	pop	{r7}
 8008cd6:	4770      	bx	lr

08008cd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008cdc:	bf00      	nop
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bc80      	pop	{r7}
 8008ce2:	4770      	bx	lr

08008ce4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008ce8:	bf00      	nop
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bc80      	pop	{r7}
 8008cee:	4770      	bx	lr

08008cf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008cf4:	f7f8 fab4 	bl	8001260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008cf8:	bf00      	nop
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8008d00:	2001      	movs	r0, #1
 8008d02:	f7f8 fdab 	bl	800185c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8008d06:	bf00      	nop
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8008d0e:	2020      	movs	r0, #32
 8008d10:	f7f8 fda4 	bl	800185c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8008d14:	bf00      	nop
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8008d1c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008d20:	f7f8 fd9c 	bl	800185c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008d24:	bf00      	nop
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008d32:	f001 fcff 	bl	800a734 <__errno>
 8008d36:	4602      	mov	r2, r0
 8008d38:	2316      	movs	r3, #22
 8008d3a:	6013      	str	r3, [r2, #0]
	return -1;
 8008d3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <_exit>:

void _exit (int status)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008d50:	f04f 31ff 	mov.w	r1, #4294967295
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f7ff ffe7 	bl	8008d28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8008d5a:	e7fe      	b.n	8008d5a <_exit+0x12>

08008d5c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008d64:	4b11      	ldr	r3, [pc, #68]	; (8008dac <_sbrk+0x50>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d102      	bne.n	8008d72 <_sbrk+0x16>
		heap_end = &end;
 8008d6c:	4b0f      	ldr	r3, [pc, #60]	; (8008dac <_sbrk+0x50>)
 8008d6e:	4a10      	ldr	r2, [pc, #64]	; (8008db0 <_sbrk+0x54>)
 8008d70:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008d72:	4b0e      	ldr	r3, [pc, #56]	; (8008dac <_sbrk+0x50>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008d78:	4b0c      	ldr	r3, [pc, #48]	; (8008dac <_sbrk+0x50>)
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4413      	add	r3, r2
 8008d80:	466a      	mov	r2, sp
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d907      	bls.n	8008d96 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008d86:	f001 fcd5 	bl	800a734 <__errno>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	230c      	movs	r3, #12
 8008d8e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008d90:	f04f 33ff 	mov.w	r3, #4294967295
 8008d94:	e006      	b.n	8008da4 <_sbrk+0x48>
	}

	heap_end += incr;
 8008d96:	4b05      	ldr	r3, [pc, #20]	; (8008dac <_sbrk+0x50>)
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	4a03      	ldr	r2, [pc, #12]	; (8008dac <_sbrk+0x50>)
 8008da0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008da2:	68fb      	ldr	r3, [r7, #12]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	200009d4 	.word	0x200009d4
 8008db0:	20000ac0 	.word	0x20000ac0

08008db4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008db4:	b480      	push	{r7}
 8008db6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8008db8:	4b15      	ldr	r3, [pc, #84]	; (8008e10 <SystemInit+0x5c>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a14      	ldr	r2, [pc, #80]	; (8008e10 <SystemInit+0x5c>)
 8008dbe:	f043 0301 	orr.w	r3, r3, #1
 8008dc2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8008dc4:	4b12      	ldr	r3, [pc, #72]	; (8008e10 <SystemInit+0x5c>)
 8008dc6:	685a      	ldr	r2, [r3, #4]
 8008dc8:	4911      	ldr	r1, [pc, #68]	; (8008e10 <SystemInit+0x5c>)
 8008dca:	4b12      	ldr	r3, [pc, #72]	; (8008e14 <SystemInit+0x60>)
 8008dcc:	4013      	ands	r3, r2
 8008dce:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8008dd0:	4b0f      	ldr	r3, [pc, #60]	; (8008e10 <SystemInit+0x5c>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a0e      	ldr	r2, [pc, #56]	; (8008e10 <SystemInit+0x5c>)
 8008dd6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8008dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dde:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008de0:	4b0b      	ldr	r3, [pc, #44]	; (8008e10 <SystemInit+0x5c>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a0a      	ldr	r2, [pc, #40]	; (8008e10 <SystemInit+0x5c>)
 8008de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008dea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8008dec:	4b08      	ldr	r3, [pc, #32]	; (8008e10 <SystemInit+0x5c>)
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	4a07      	ldr	r2, [pc, #28]	; (8008e10 <SystemInit+0x5c>)
 8008df2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8008df6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8008df8:	4b05      	ldr	r3, [pc, #20]	; (8008e10 <SystemInit+0x5c>)
 8008dfa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8008dfe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8008e00:	4b05      	ldr	r3, [pc, #20]	; (8008e18 <SystemInit+0x64>)
 8008e02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008e06:	609a      	str	r2, [r3, #8]
#endif 
}
 8008e08:	bf00      	nop
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bc80      	pop	{r7}
 8008e0e:	4770      	bx	lr
 8008e10:	40021000 	.word	0x40021000
 8008e14:	f8ff0000 	.word	0xf8ff0000
 8008e18:	e000ed00 	.word	0xe000ed00

08008e1c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8008e20:	4b11      	ldr	r3, [pc, #68]	; (8008e68 <MX_USART1_UART_Init+0x4c>)
 8008e22:	4a12      	ldr	r2, [pc, #72]	; (8008e6c <MX_USART1_UART_Init+0x50>)
 8008e24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008e26:	4b10      	ldr	r3, [pc, #64]	; (8008e68 <MX_USART1_UART_Init+0x4c>)
 8008e28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008e2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008e2e:	4b0e      	ldr	r3, [pc, #56]	; (8008e68 <MX_USART1_UART_Init+0x4c>)
 8008e30:	2200      	movs	r2, #0
 8008e32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008e34:	4b0c      	ldr	r3, [pc, #48]	; (8008e68 <MX_USART1_UART_Init+0x4c>)
 8008e36:	2200      	movs	r2, #0
 8008e38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008e3a:	4b0b      	ldr	r3, [pc, #44]	; (8008e68 <MX_USART1_UART_Init+0x4c>)
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008e40:	4b09      	ldr	r3, [pc, #36]	; (8008e68 <MX_USART1_UART_Init+0x4c>)
 8008e42:	220c      	movs	r2, #12
 8008e44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008e46:	4b08      	ldr	r3, [pc, #32]	; (8008e68 <MX_USART1_UART_Init+0x4c>)
 8008e48:	2200      	movs	r2, #0
 8008e4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008e4c:	4b06      	ldr	r3, [pc, #24]	; (8008e68 <MX_USART1_UART_Init+0x4c>)
 8008e4e:	2200      	movs	r2, #0
 8008e50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008e52:	4805      	ldr	r0, [pc, #20]	; (8008e68 <MX_USART1_UART_Init+0x4c>)
 8008e54:	f7f9 f936 	bl	80020c4 <HAL_UART_Init>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d001      	beq.n	8008e62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008e5e:	f7ff feaf 	bl	8008bc0 <Error_Handler>
  }

}
 8008e62:	bf00      	nop
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	20000a74 	.word	0x20000a74
 8008e6c:	40013800 	.word	0x40013800

08008e70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b088      	sub	sp, #32
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e78:	f107 0310 	add.w	r3, r7, #16
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	601a      	str	r2, [r3, #0]
 8008e80:	605a      	str	r2, [r3, #4]
 8008e82:	609a      	str	r2, [r3, #8]
 8008e84:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a1c      	ldr	r2, [pc, #112]	; (8008efc <HAL_UART_MspInit+0x8c>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d131      	bne.n	8008ef4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008e90:	4b1b      	ldr	r3, [pc, #108]	; (8008f00 <HAL_UART_MspInit+0x90>)
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	4a1a      	ldr	r2, [pc, #104]	; (8008f00 <HAL_UART_MspInit+0x90>)
 8008e96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e9a:	6193      	str	r3, [r2, #24]
 8008e9c:	4b18      	ldr	r3, [pc, #96]	; (8008f00 <HAL_UART_MspInit+0x90>)
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ea4:	60fb      	str	r3, [r7, #12]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ea8:	4b15      	ldr	r3, [pc, #84]	; (8008f00 <HAL_UART_MspInit+0x90>)
 8008eaa:	699b      	ldr	r3, [r3, #24]
 8008eac:	4a14      	ldr	r2, [pc, #80]	; (8008f00 <HAL_UART_MspInit+0x90>)
 8008eae:	f043 0304 	orr.w	r3, r3, #4
 8008eb2:	6193      	str	r3, [r2, #24]
 8008eb4:	4b12      	ldr	r3, [pc, #72]	; (8008f00 <HAL_UART_MspInit+0x90>)
 8008eb6:	699b      	ldr	r3, [r3, #24]
 8008eb8:	f003 0304 	and.w	r3, r3, #4
 8008ebc:	60bb      	str	r3, [r7, #8]
 8008ebe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ec4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ec6:	2302      	movs	r3, #2
 8008ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008eca:	2303      	movs	r3, #3
 8008ecc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ece:	f107 0310 	add.w	r3, r7, #16
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	480b      	ldr	r0, [pc, #44]	; (8008f04 <HAL_UART_MspInit+0x94>)
 8008ed6:	f7f8 fb0f 	bl	80014f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ede:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ee8:	f107 0310 	add.w	r3, r7, #16
 8008eec:	4619      	mov	r1, r3
 8008eee:	4805      	ldr	r0, [pc, #20]	; (8008f04 <HAL_UART_MspInit+0x94>)
 8008ef0:	f7f8 fb02 	bl	80014f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8008ef4:	bf00      	nop
 8008ef6:	3720      	adds	r7, #32
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	40013800 	.word	0x40013800
 8008f00:	40021000 	.word	0x40021000
 8008f04:	40010800 	.word	0x40010800

08008f08 <BasicBullet_Init>:
	float speed_x, float speed_y,
	uint16_t collider,
	uint16_t width, uint16_t height,
	Color* img,
	bool is_enemy
){
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b08e      	sub	sp, #56	; 0x38
 8008f0c:	af08      	add	r7, sp, #32
 8008f0e:	60b9      	str	r1, [r7, #8]
 8008f10:	4611      	mov	r1, r2
 8008f12:	461a      	mov	r2, r3
 8008f14:	4603      	mov	r3, r0
 8008f16:	81fb      	strh	r3, [r7, #14]
 8008f18:	460b      	mov	r3, r1
 8008f1a:	81bb      	strh	r3, [r7, #12]
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	80fb      	strh	r3, [r7, #6]
	BasicBullet_GameObject_Bullet* self = malloc(sizeof(BasicBullet_GameObject_Bullet));
 8008f20:	2028      	movs	r0, #40	; 0x28
 8008f22:	f001 fc45 	bl	800a7b0 <malloc>
 8008f26:	4603      	mov	r3, r0
 8008f28:	617b      	str	r3, [r7, #20]
	GameObject_Bullet_Init(
 8008f2a:	6978      	ldr	r0, [r7, #20]
 8008f2c:	89ba      	ldrh	r2, [r7, #12]
 8008f2e:	89f9      	ldrh	r1, [r7, #14]
 8008f30:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008f34:	9307      	str	r3, [sp, #28]
 8008f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f38:	9306      	str	r3, [sp, #24]
 8008f3a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008f3c:	9305      	str	r3, [sp, #20]
 8008f3e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008f40:	9304      	str	r3, [sp, #16]
 8008f42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008f44:	9303      	str	r3, [sp, #12]
 8008f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f48:	9302      	str	r3, [sp, #8]
 8008f4a:	6a3b      	ldr	r3, [r7, #32]
 8008f4c:	9301      	str	r3, [sp, #4]
 8008f4e:	88fb      	ldrh	r3, [r7, #6]
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	4613      	mov	r3, r2
 8008f54:	68ba      	ldr	r2, [r7, #8]
 8008f56:	f7f9 fe9a 	bl	8002c8e <GameObject_Bullet_Init>
		&self->base, ttl, damage, pos_x, pos_y, speed_x, speed_y,
		collider, width, height, img, is_enemy
	);
	return self;
 8008f5a:	697b      	ldr	r3, [r7, #20]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3718      	adds	r7, #24
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <BasicBullet_OnCreate>:

void BasicBullet_OnCreate(BasicBullet_GameObject_Bullet* self)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
	GameObject_Bullet_OnCreate(&self->base);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7f9 feb9 	bl	8002ce6 <GameObject_Bullet_OnCreate>
}
 8008f74:	bf00      	nop
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <BasicBullet_OnUpdate>:

void BasicBullet_OnUpdate(BasicBullet_GameObject_Bullet* self)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
	GameObject_Bullet_OnUpdate(&self->base);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7f9 feb9 	bl	8002cfe <GameObject_Bullet_OnUpdate>
}
 8008f8c:	bf00      	nop
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <BasicBullet_OnDestroy>:

void BasicBullet_OnDestroy(BasicBullet_GameObject_Bullet* self)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
	free(self);
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f001 fc0f 	bl	800a7c0 <free>
}
 8008fa2:	bf00      	nop
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <BasicBullet_OnRender>:

void BasicBullet_OnRender(BasicBullet_GameObject_Bullet* self, Color** screen)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b082      	sub	sp, #8
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	6039      	str	r1, [r7, #0]
	GameObject_Bullet_OnRender(&self->base, screen);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6839      	ldr	r1, [r7, #0]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7f9 feba 	bl	8002d32 <GameObject_Bullet_OnRender>
}
 8008fbe:	bf00      	nop
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
	...

08008fc8 <Catadioptric_Init>:
};

Catadioptric_GameObject_Bullet* Catadioptric_Init(
	uint16_t pos_x, uint16_t pos_y,
	float speed_x, float speed_y
){
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b08e      	sub	sp, #56	; 0x38
 8008fcc:	af08      	add	r7, sp, #32
 8008fce:	60ba      	str	r2, [r7, #8]
 8008fd0:	607b      	str	r3, [r7, #4]
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	81fb      	strh	r3, [r7, #14]
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	81bb      	strh	r3, [r7, #12]
	Catadioptric_GameObject_Bullet* self = malloc(sizeof(Catadioptric_GameObject_Bullet));
 8008fda:	2028      	movs	r0, #40	; 0x28
 8008fdc:	f001 fbe8 	bl	800a7b0 <malloc>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	617b      	str	r3, [r7, #20]
	GameObject_Bullet_Init(
 8008fe4:	6978      	ldr	r0, [r7, #20]
 8008fe6:	89fa      	ldrh	r2, [r7, #14]
 8008fe8:	2301      	movs	r3, #1
 8008fea:	9307      	str	r3, [sp, #28]
 8008fec:	4b0b      	ldr	r3, [pc, #44]	; (800901c <Catadioptric_Init+0x54>)
 8008fee:	9306      	str	r3, [sp, #24]
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	9305      	str	r3, [sp, #20]
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	9304      	str	r3, [sp, #16]
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	9303      	str	r3, [sp, #12]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	9302      	str	r3, [sp, #8]
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	9301      	str	r3, [sp, #4]
 8009004:	89bb      	ldrh	r3, [r7, #12]
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	4613      	mov	r3, r2
 800900a:	2205      	movs	r2, #5
 800900c:	211e      	movs	r1, #30
 800900e:	f7f9 fe3e 	bl	8002c8e <GameObject_Bullet_Init>
		&self->base, 30, 5, pos_x, pos_y, speed_x, speed_y,
		1, 2, 2, Img_Catadioptric, true
	);
	return self;
 8009012:	697b      	ldr	r3, [r7, #20]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3718      	adds	r7, #24
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	2000000c 	.word	0x2000000c

08009020 <Catadioptric_OnCreate>:

void Catadioptric_OnCreate(Catadioptric_GameObject_Bullet* self)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
	GameObject_Bullet_OnCreate(&self->base);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4618      	mov	r0, r3
 800902c:	f7f9 fe5b 	bl	8002ce6 <GameObject_Bullet_OnCreate>
}
 8009030:	bf00      	nop
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <Catadioptric_OnUpdate>:

void Catadioptric_OnUpdate(Catadioptric_GameObject_Bullet* self)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
	if (self->base.base.pos_x < 0 || self->base.base.pos_x > __WIDTH - 1)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	f04f 0100 	mov.w	r1, #0
 8009048:	4618      	mov	r0, r3
 800904a:	f7f8 f855 	bl	80010f8 <__aeabi_fcmplt>
 800904e:	4603      	mov	r3, r0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d108      	bne.n	8009066 <Catadioptric_OnUpdate+0x2e>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	4916      	ldr	r1, [pc, #88]	; (80090b4 <Catadioptric_OnUpdate+0x7c>)
 800905a:	4618      	mov	r0, r3
 800905c:	f7f8 f86a 	bl	8001134 <__aeabi_fcmpgt>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d005      	beq.n	8009072 <Catadioptric_OnUpdate+0x3a>
		self->base.base.speed_x = - self->base.base.speed_x;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	601a      	str	r2, [r3, #0]
	if (self->base.base.pos_y < 0 || self->base.base.pos_y > __HEIGHT - 1)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	f04f 0100 	mov.w	r1, #0
 800907a:	4618      	mov	r0, r3
 800907c:	f7f8 f83c 	bl	80010f8 <__aeabi_fcmplt>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d108      	bne.n	8009098 <Catadioptric_OnUpdate+0x60>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	490b      	ldr	r1, [pc, #44]	; (80090b8 <Catadioptric_OnUpdate+0x80>)
 800908c:	4618      	mov	r0, r3
 800908e:	f7f8 f851 	bl	8001134 <__aeabi_fcmpgt>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d005      	beq.n	80090a4 <Catadioptric_OnUpdate+0x6c>
		self->base.base.speed_y = - self->base.base.speed_y;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	605a      	str	r2, [r3, #4]

	GameObject_Bullet_OnUpdate(&self->base);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7f9 fe29 	bl	8002cfe <GameObject_Bullet_OnUpdate>
}
 80090ac:	bf00      	nop
 80090ae:	3708      	adds	r7, #8
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}
 80090b4:	42960000 	.word	0x42960000
 80090b8:	42be0000 	.word	0x42be0000

080090bc <Catadioptric_OnDestroy>:

void Catadioptric_OnDestroy(Catadioptric_GameObject_Bullet* self)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
	free(self);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f001 fb7b 	bl	800a7c0 <free>
}
 80090ca:	bf00      	nop
 80090cc:	3708      	adds	r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <Catadioptric_OnRender>:

void Catadioptric_OnRender(Catadioptric_GameObject_Bullet* self, Color** screen)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b082      	sub	sp, #8
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	6039      	str	r1, [r7, #0]
	GameObject_Bullet_OnRender(&self->base, screen);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6839      	ldr	r1, [r7, #0]
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7f9 fe26 	bl	8002d32 <GameObject_Bullet_OnRender>
}
 80090e6:	bf00      	nop
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
	...

080090f0 <Demo2_Init>:
void Demo2_Init(
	Demo2_GameObject_Enemy* self,
	unsigned life,
	uint16_t pos_x, uint16_t pos_y, 
	uint16_t collider
){
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b088      	sub	sp, #32
 80090f4:	af04      	add	r7, sp, #16
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	4611      	mov	r1, r2
 80090fc:	461a      	mov	r2, r3
 80090fe:	460b      	mov	r3, r1
 8009100:	80fb      	strh	r3, [r7, #6]
 8009102:	4613      	mov	r3, r2
 8009104:	80bb      	strh	r3, [r7, #4]
	GameObject_Enemy_Init(
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	88b9      	ldrh	r1, [r7, #4]
 800910a:	88fa      	ldrh	r2, [r7, #6]
 800910c:	4b07      	ldr	r3, [pc, #28]	; (800912c <Demo2_Init+0x3c>)
 800910e:	9303      	str	r3, [sp, #12]
 8009110:	2304      	movs	r3, #4
 8009112:	9302      	str	r3, [sp, #8]
 8009114:	2304      	movs	r3, #4
 8009116:	9301      	str	r3, [sp, #4]
 8009118:	8b3b      	ldrh	r3, [r7, #24]
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	460b      	mov	r3, r1
 800911e:	68b9      	ldr	r1, [r7, #8]
 8009120:	f7f9 fe15 	bl	8002d4e <GameObject_Enemy_Init>
		pos_x, pos_y,
		collider,
		4, 4,
		Img_RedBlock_4x4
	);
}
 8009124:	bf00      	nop
 8009126:	3710      	adds	r7, #16
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	20000014 	.word	0x20000014

08009130 <Demo2_OnCreate>:

void Demo2_OnCreate(Demo2_GameObject_Enemy* self)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
	println("Demo2 create");
 8009138:	4805      	ldr	r0, [pc, #20]	; (8009150 <Demo2_OnCreate+0x20>)
 800913a:	f7ff fd4b 	bl	8008bd4 <println>
	GameObject_Enemy_OnCreate(&self->base);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4618      	mov	r0, r3
 8009142:	f7f9 fe23 	bl	8002d8c <GameObject_Enemy_OnCreate>
}
 8009146:	bf00      	nop
 8009148:	3708      	adds	r7, #8
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	0800c91c 	.word	0x0800c91c

08009154 <Demo2_OnUpdate>:

void Demo2_OnUpdate(Demo2_GameObject_Enemy* self)
{
 8009154:	b590      	push	{r4, r7, lr}
 8009156:	b08d      	sub	sp, #52	; 0x34
 8009158:	af08      	add	r7, sp, #32
 800915a:	6078      	str	r0, [r7, #4]
	if (!(GetTime()%20))
 800915c:	f001 fa7a 	bl	800a654 <GetTime>
 8009160:	4601      	mov	r1, r0
 8009162:	4b23      	ldr	r3, [pc, #140]	; (80091f0 <Demo2_OnUpdate+0x9c>)
 8009164:	fb83 2301 	smull	r2, r3, r3, r1
 8009168:	10da      	asrs	r2, r3, #3
 800916a:	17cb      	asrs	r3, r1, #31
 800916c:	1ad2      	subs	r2, r2, r3
 800916e:	4613      	mov	r3, r2
 8009170:	009b      	lsls	r3, r3, #2
 8009172:	4413      	add	r3, r2
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	1aca      	subs	r2, r1, r3
 8009178:	2a00      	cmp	r2, #0
 800917a:	d131      	bne.n	80091e0 <Demo2_OnUpdate+0x8c>
	{
		BasicBullet_GameObject_Bullet* bullet;
		GameEvent* e;
		bullet = BasicBullet_Init(50, 5, self->base.base.pos_x, self->base.base.pos_y, 0, 1.5, 1, 2, 2, Img_RedBlock_4x4, true);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	4618      	mov	r0, r3
 8009182:	f7f8 f807 	bl	8001194 <__aeabi_f2uiz>
 8009186:	4603      	mov	r3, r0
 8009188:	b29c      	uxth	r4, r3
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	4618      	mov	r0, r3
 8009190:	f7f8 f800 	bl	8001194 <__aeabi_f2uiz>
 8009194:	4603      	mov	r3, r0
 8009196:	b29a      	uxth	r2, r3
 8009198:	2301      	movs	r3, #1
 800919a:	9306      	str	r3, [sp, #24]
 800919c:	4b15      	ldr	r3, [pc, #84]	; (80091f4 <Demo2_OnUpdate+0xa0>)
 800919e:	9305      	str	r3, [sp, #20]
 80091a0:	2302      	movs	r3, #2
 80091a2:	9304      	str	r3, [sp, #16]
 80091a4:	2302      	movs	r3, #2
 80091a6:	9303      	str	r3, [sp, #12]
 80091a8:	2301      	movs	r3, #1
 80091aa:	9302      	str	r3, [sp, #8]
 80091ac:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80091b0:	9301      	str	r3, [sp, #4]
 80091b2:	f04f 0300 	mov.w	r3, #0
 80091b6:	9300      	str	r3, [sp, #0]
 80091b8:	4613      	mov	r3, r2
 80091ba:	4622      	mov	r2, r4
 80091bc:	2105      	movs	r1, #5
 80091be:	2032      	movs	r0, #50	; 0x32
 80091c0:	f7ff fea2 	bl	8008f08 <BasicBullet_Init>
 80091c4:	60f8      	str	r0, [r7, #12]
		e = RegistGameEvent(bullet, BasicBullet_OnCreate, BasicBullet_OnUpdate, BasicBullet_OnDestroy, BasicBullet_OnRender);
 80091c6:	4b0c      	ldr	r3, [pc, #48]	; (80091f8 <Demo2_OnUpdate+0xa4>)
 80091c8:	9300      	str	r3, [sp, #0]
 80091ca:	4b0c      	ldr	r3, [pc, #48]	; (80091fc <Demo2_OnUpdate+0xa8>)
 80091cc:	4a0c      	ldr	r2, [pc, #48]	; (8009200 <Demo2_OnUpdate+0xac>)
 80091ce:	490d      	ldr	r1, [pc, #52]	; (8009204 <Demo2_OnUpdate+0xb0>)
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f7f9 fcb1 	bl	8002b38 <RegistGameEvent>
 80091d6:	60b8      	str	r0, [r7, #8]
		Push(&Engine_BulletEvents, e);
 80091d8:	68b9      	ldr	r1, [r7, #8]
 80091da:	480b      	ldr	r0, [pc, #44]	; (8009208 <Demo2_OnUpdate+0xb4>)
 80091dc:	f001 f86a 	bl	800a2b4 <Push>
	}

	GameObject_Enemy_OnUpdate(&self->base);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7f9 fdde 	bl	8002da4 <GameObject_Enemy_OnUpdate>
}
 80091e8:	bf00      	nop
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd90      	pop	{r4, r7, pc}
 80091f0:	66666667 	.word	0x66666667
 80091f4:	20000014 	.word	0x20000014
 80091f8:	08008fab 	.word	0x08008fab
 80091fc:	08008f95 	.word	0x08008f95
 8009200:	08008f7d 	.word	0x08008f7d
 8009204:	08008f65 	.word	0x08008f65
 8009208:	20000a24 	.word	0x20000a24

0800920c <Demo2_OnDestroy>:

void Demo2_OnDestroy(Demo2_GameObject_Enemy* self)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
	free(self);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f001 fad3 	bl	800a7c0 <free>
}
 800921a:	bf00      	nop
 800921c:	3708      	adds	r7, #8
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <Demo2_OnRender>:

void Demo2_OnRender(Demo2_GameObject_Enemy* self, Color** screen)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b082      	sub	sp, #8
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
 800922a:	6039      	str	r1, [r7, #0]
	GameObject_Enemy_OnRender(&self->base, screen);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6839      	ldr	r1, [r7, #0]
 8009230:	4618      	mov	r0, r3
 8009232:	f7f9 fdca 	bl	8002dca <GameObject_Enemy_OnRender>
}
 8009236:	bf00      	nop
 8009238:	3708      	adds	r7, #8
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
	...

08009240 <__Flandre_Normal>:
#include "Random.h"

#define Flandre_MAX_LIFE 40000

void __Flandre_Normal(Flandre_GameObject_Enemy* self)
{
 8009240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009242:	b08d      	sub	sp, #52	; 0x34
 8009244:	af08      	add	r7, sp, #32
 8009246:	6078      	str	r0, [r7, #4]
	if (!(GetTime()%8))
 8009248:	f001 fa04 	bl	800a654 <GetTime>
 800924c:	4603      	mov	r3, r0
 800924e:	f003 0307 	and.w	r3, r3, #7
 8009252:	2b00      	cmp	r3, #0
 8009254:	d15f      	bne.n	8009316 <__Flandre_Normal+0xd6>
	{
		BasicBullet_GameObject_Bullet* bullet;
		GameEvent* e;
		bullet = BasicBullet_Init(
			100, 12, self->base.base.pos_x, self->base.base.pos_x,
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	689b      	ldr	r3, [r3, #8]
		bullet = BasicBullet_Init(
 800925a:	4618      	mov	r0, r3
 800925c:	f7f7 ff9a 	bl	8001194 <__aeabi_f2uiz>
 8009260:	4603      	mov	r3, r0
 8009262:	b29c      	uxth	r4, r3
			100, 12, self->base.base.pos_x, self->base.base.pos_x,
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	689b      	ldr	r3, [r3, #8]
		bullet = BasicBullet_Init(
 8009268:	4618      	mov	r0, r3
 800926a:	f7f7 ff93 	bl	8001194 <__aeabi_f2uiz>
 800926e:	4603      	mov	r3, r0
 8009270:	b29d      	uxth	r5, r3
			((float)os_rand())/__UINT32_MAX__* 4.5f - 0.75f, ((float)os_rand())/__UINT32_MAX__*4.5f - 0.75f,
 8009272:	f001 f869 	bl	800a348 <os_rand>
 8009276:	4603      	mov	r3, r0
 8009278:	4618      	mov	r0, r3
 800927a:	f7f7 fd47 	bl	8000d0c <__aeabi_ui2f>
 800927e:	4603      	mov	r3, r0
 8009280:	f04f 419f 	mov.w	r1, #1333788672	; 0x4f800000
 8009284:	4618      	mov	r0, r3
 8009286:	f7f7 fe4d 	bl	8000f24 <__aeabi_fdiv>
 800928a:	4603      	mov	r3, r0
 800928c:	4924      	ldr	r1, [pc, #144]	; (8009320 <__Flandre_Normal+0xe0>)
 800928e:	4618      	mov	r0, r3
 8009290:	f7f7 fd94 	bl	8000dbc <__aeabi_fmul>
 8009294:	4603      	mov	r3, r0
		bullet = BasicBullet_Init(
 8009296:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 800929a:	4618      	mov	r0, r3
 800929c:	f7f7 fc84 	bl	8000ba8 <__aeabi_fsub>
 80092a0:	4603      	mov	r3, r0
 80092a2:	461e      	mov	r6, r3
			((float)os_rand())/__UINT32_MAX__* 4.5f - 0.75f, ((float)os_rand())/__UINT32_MAX__*4.5f - 0.75f,
 80092a4:	f001 f850 	bl	800a348 <os_rand>
 80092a8:	4603      	mov	r3, r0
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7f7 fd2e 	bl	8000d0c <__aeabi_ui2f>
 80092b0:	4603      	mov	r3, r0
 80092b2:	f04f 419f 	mov.w	r1, #1333788672	; 0x4f800000
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7f7 fe34 	bl	8000f24 <__aeabi_fdiv>
 80092bc:	4603      	mov	r3, r0
 80092be:	4918      	ldr	r1, [pc, #96]	; (8009320 <__Flandre_Normal+0xe0>)
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7f7 fd7b 	bl	8000dbc <__aeabi_fmul>
 80092c6:	4603      	mov	r3, r0
		bullet = BasicBullet_Init(
 80092c8:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7f7 fc6b 	bl	8000ba8 <__aeabi_fsub>
 80092d2:	4603      	mov	r3, r0
 80092d4:	461a      	mov	r2, r3
 80092d6:	2301      	movs	r3, #1
 80092d8:	9306      	str	r3, [sp, #24]
 80092da:	4b12      	ldr	r3, [pc, #72]	; (8009324 <__Flandre_Normal+0xe4>)
 80092dc:	9305      	str	r3, [sp, #20]
 80092de:	230a      	movs	r3, #10
 80092e0:	9304      	str	r3, [sp, #16]
 80092e2:	230a      	movs	r3, #10
 80092e4:	9303      	str	r3, [sp, #12]
 80092e6:	2305      	movs	r3, #5
 80092e8:	9302      	str	r3, [sp, #8]
 80092ea:	9201      	str	r2, [sp, #4]
 80092ec:	9600      	str	r6, [sp, #0]
 80092ee:	462b      	mov	r3, r5
 80092f0:	4622      	mov	r2, r4
 80092f2:	210c      	movs	r1, #12
 80092f4:	2064      	movs	r0, #100	; 0x64
 80092f6:	f7ff fe07 	bl	8008f08 <BasicBullet_Init>
 80092fa:	60f8      	str	r0, [r7, #12]
			5, 10, 10, Img_BigBullet, true
		);
		e = RegistGameEvent(
 80092fc:	4b0a      	ldr	r3, [pc, #40]	; (8009328 <__Flandre_Normal+0xe8>)
 80092fe:	9300      	str	r3, [sp, #0]
 8009300:	4b0a      	ldr	r3, [pc, #40]	; (800932c <__Flandre_Normal+0xec>)
 8009302:	4a0b      	ldr	r2, [pc, #44]	; (8009330 <__Flandre_Normal+0xf0>)
 8009304:	490b      	ldr	r1, [pc, #44]	; (8009334 <__Flandre_Normal+0xf4>)
 8009306:	68f8      	ldr	r0, [r7, #12]
 8009308:	f7f9 fc16 	bl	8002b38 <RegistGameEvent>
 800930c:	60b8      	str	r0, [r7, #8]
			bullet, BasicBullet_OnCreate, BasicBullet_OnUpdate,
			BasicBullet_OnDestroy, BasicBullet_OnRender
		);
		Push(&Engine_BulletEvents, e);
 800930e:	68b9      	ldr	r1, [r7, #8]
 8009310:	4809      	ldr	r0, [pc, #36]	; (8009338 <__Flandre_Normal+0xf8>)
 8009312:	f000 ffcf 	bl	800a2b4 <Push>
	}
}
 8009316:	bf00      	nop
 8009318:	3714      	adds	r7, #20
 800931a:	46bd      	mov	sp, r7
 800931c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800931e:	bf00      	nop
 8009320:	40900000 	.word	0x40900000
 8009324:	200003a8 	.word	0x200003a8
 8009328:	08008fab 	.word	0x08008fab
 800932c:	08008f95 	.word	0x08008f95
 8009330:	08008f7d 	.word	0x08008f7d
 8009334:	08008f65 	.word	0x08008f65
 8009338:	20000a24 	.word	0x20000a24

0800933c <__Flandre_Leavatain>:

void __Flandre_Leavatain(Flandre_GameObject_Enemy* self)
{
 800933c:	b590      	push	{r4, r7, lr}
 800933e:	b08f      	sub	sp, #60	; 0x3c
 8009340:	af08      	add	r7, sp, #32
 8009342:	6078      	str	r0, [r7, #4]
	BasicBullet_GameObject_Bullet* bullet;
	GameEvent* e;

	// move left
	if (self->skill_param == 0)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009348:	2b00      	cmp	r3, #0
 800934a:	d11b      	bne.n	8009384 <__Flandre_Leavatain+0x48>
	{
		self->base.base.speed_x = -0.6f;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a72      	ldr	r2, [pc, #456]	; (8009518 <__Flandre_Leavatain+0x1dc>)
 8009350:	601a      	str	r2, [r3, #0]

		if (self->base.base.pos_x < 0)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	f04f 0100 	mov.w	r1, #0
 800935a:	4618      	mov	r0, r3
 800935c:	f7f7 fecc 	bl	80010f8 <__aeabi_fcmplt>
 8009360:	4603      	mov	r3, r0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00a      	beq.n	800937c <__Flandre_Leavatain+0x40>
		{
			self->base.base.pos_x = 0;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f04f 0200 	mov.w	r2, #0
 800936c:	609a      	str	r2, [r3, #8]
			self->skill_param = 1;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2201      	movs	r2, #1
 8009372:	62da      	str	r2, [r3, #44]	; 0x2c
			self->aim = __WIDTH/2 + __WIDTH/4;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2239      	movs	r2, #57	; 0x39
 8009378:	869a      	strh	r2, [r3, #52]	; 0x34
		self->base.base.speed_x = -0.75f;

		if (self->base.base.pos_x <= self->aim)
			self->skill_param = 0;
	}
}
 800937a:	e0c9      	b.n	8009510 <__Flandre_Leavatain+0x1d4>
			__Flandre_Normal(self);
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f7ff ff5f 	bl	8009240 <__Flandre_Normal>
}
 8009382:	e0c5      	b.n	8009510 <__Flandre_Leavatain+0x1d4>
	else if (self->skill_param == 1)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009388:	2b01      	cmp	r3, #1
 800938a:	d150      	bne.n	800942e <__Flandre_Leavatain+0xf2>
		for (uint16_t i = self->base.base.pos_y; i <= __HEIGHT; i += 4)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	4618      	mov	r0, r3
 8009392:	f7f7 feff 	bl	8001194 <__aeabi_f2uiz>
 8009396:	4603      	mov	r3, r0
 8009398:	82fb      	strh	r3, [r7, #22]
 800939a:	e02d      	b.n	80093f8 <__Flandre_Leavatain+0xbc>
				1, 8, self->base.base.pos_x, i, 0, 0, 2, 4, 4, Img_Leavatain, true
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	689b      	ldr	r3, [r3, #8]
			bullet = BasicBullet_Init(
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7f7 fef7 	bl	8001194 <__aeabi_f2uiz>
 80093a6:	4603      	mov	r3, r0
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	8af9      	ldrh	r1, [r7, #22]
 80093ac:	2301      	movs	r3, #1
 80093ae:	9306      	str	r3, [sp, #24]
 80093b0:	4b5a      	ldr	r3, [pc, #360]	; (800951c <__Flandre_Leavatain+0x1e0>)
 80093b2:	9305      	str	r3, [sp, #20]
 80093b4:	2304      	movs	r3, #4
 80093b6:	9304      	str	r3, [sp, #16]
 80093b8:	2304      	movs	r3, #4
 80093ba:	9303      	str	r3, [sp, #12]
 80093bc:	2302      	movs	r3, #2
 80093be:	9302      	str	r3, [sp, #8]
 80093c0:	f04f 0300 	mov.w	r3, #0
 80093c4:	9301      	str	r3, [sp, #4]
 80093c6:	f04f 0300 	mov.w	r3, #0
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	460b      	mov	r3, r1
 80093ce:	2108      	movs	r1, #8
 80093d0:	2001      	movs	r0, #1
 80093d2:	f7ff fd99 	bl	8008f08 <BasicBullet_Init>
 80093d6:	6138      	str	r0, [r7, #16]
			e = RegistGameEvent(
 80093d8:	4b51      	ldr	r3, [pc, #324]	; (8009520 <__Flandre_Leavatain+0x1e4>)
 80093da:	9300      	str	r3, [sp, #0]
 80093dc:	4b51      	ldr	r3, [pc, #324]	; (8009524 <__Flandre_Leavatain+0x1e8>)
 80093de:	4a52      	ldr	r2, [pc, #328]	; (8009528 <__Flandre_Leavatain+0x1ec>)
 80093e0:	4952      	ldr	r1, [pc, #328]	; (800952c <__Flandre_Leavatain+0x1f0>)
 80093e2:	6938      	ldr	r0, [r7, #16]
 80093e4:	f7f9 fba8 	bl	8002b38 <RegistGameEvent>
 80093e8:	60f8      	str	r0, [r7, #12]
			Push(&Engine_BulletEvents, e);
 80093ea:	68f9      	ldr	r1, [r7, #12]
 80093ec:	4850      	ldr	r0, [pc, #320]	; (8009530 <__Flandre_Leavatain+0x1f4>)
 80093ee:	f000 ff61 	bl	800a2b4 <Push>
		for (uint16_t i = self->base.base.pos_y; i <= __HEIGHT; i += 4)
 80093f2:	8afb      	ldrh	r3, [r7, #22]
 80093f4:	3304      	adds	r3, #4
 80093f6:	82fb      	strh	r3, [r7, #22]
 80093f8:	8afb      	ldrh	r3, [r7, #22]
 80093fa:	2b60      	cmp	r3, #96	; 0x60
 80093fc:	d9ce      	bls.n	800939c <__Flandre_Leavatain+0x60>
		self->base.base.speed_x = 0.75f;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8009404:	601a      	str	r2, [r3, #0]
		if (self->base.base.pos_x >= self->aim)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	689c      	ldr	r4, [r3, #8]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800940e:	4618      	mov	r0, r3
 8009410:	f7f7 fc80 	bl	8000d14 <__aeabi_i2f>
 8009414:	4603      	mov	r3, r0
 8009416:	4619      	mov	r1, r3
 8009418:	4620      	mov	r0, r4
 800941a:	f7f7 fe81 	bl	8001120 <__aeabi_fcmpge>
 800941e:	4603      	mov	r3, r0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d100      	bne.n	8009426 <__Flandre_Leavatain+0xea>
}
 8009424:	e074      	b.n	8009510 <__Flandre_Leavatain+0x1d4>
			self->skill_param = 2;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2202      	movs	r2, #2
 800942a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800942c:	e070      	b.n	8009510 <__Flandre_Leavatain+0x1d4>
	else if (self->skill_param == 2)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009432:	2b02      	cmp	r3, #2
 8009434:	d119      	bne.n	800946a <__Flandre_Leavatain+0x12e>
		self->base.base.speed_x = 0.6f;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a3e      	ldr	r2, [pc, #248]	; (8009534 <__Flandre_Leavatain+0x1f8>)
 800943a:	601a      	str	r2, [r3, #0]
		if (self->base.base.pos_x >= __WIDTH)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	493d      	ldr	r1, [pc, #244]	; (8009538 <__Flandre_Leavatain+0x1fc>)
 8009442:	4618      	mov	r0, r3
 8009444:	f7f7 fe6c 	bl	8001120 <__aeabi_fcmpge>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d009      	beq.n	8009462 <__Flandre_Leavatain+0x126>
			self->base.base.pos_x = __WIDTH - 1;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a3a      	ldr	r2, [pc, #232]	; (800953c <__Flandre_Leavatain+0x200>)
 8009452:	609a      	str	r2, [r3, #8]
			self->skill_param = 3;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2203      	movs	r2, #3
 8009458:	62da      	str	r2, [r3, #44]	; 0x2c
			self->aim = __WIDTH/4;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2213      	movs	r2, #19
 800945e:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8009460:	e056      	b.n	8009510 <__Flandre_Leavatain+0x1d4>
			__Flandre_Normal(self);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7ff feec 	bl	8009240 <__Flandre_Normal>
}
 8009468:	e052      	b.n	8009510 <__Flandre_Leavatain+0x1d4>
	else if (self->skill_param == 3)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946e:	2b03      	cmp	r3, #3
 8009470:	d14e      	bne.n	8009510 <__Flandre_Leavatain+0x1d4>
		for (uint16_t i = self->base.base.pos_y; i <= __HEIGHT; i += 4)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	4618      	mov	r0, r3
 8009478:	f7f7 fe8c 	bl	8001194 <__aeabi_f2uiz>
 800947c:	4603      	mov	r3, r0
 800947e:	82bb      	strh	r3, [r7, #20]
 8009480:	e02d      	b.n	80094de <__Flandre_Leavatain+0x1a2>
				1, 8, self->base.base.pos_x, i, 0, 0, 2, 4, 4, Img_Leavatain_R, true
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	689b      	ldr	r3, [r3, #8]
			bullet = BasicBullet_Init(
 8009486:	4618      	mov	r0, r3
 8009488:	f7f7 fe84 	bl	8001194 <__aeabi_f2uiz>
 800948c:	4603      	mov	r3, r0
 800948e:	b29a      	uxth	r2, r3
 8009490:	8ab9      	ldrh	r1, [r7, #20]
 8009492:	2301      	movs	r3, #1
 8009494:	9306      	str	r3, [sp, #24]
 8009496:	4b2a      	ldr	r3, [pc, #168]	; (8009540 <__Flandre_Leavatain+0x204>)
 8009498:	9305      	str	r3, [sp, #20]
 800949a:	2304      	movs	r3, #4
 800949c:	9304      	str	r3, [sp, #16]
 800949e:	2304      	movs	r3, #4
 80094a0:	9303      	str	r3, [sp, #12]
 80094a2:	2302      	movs	r3, #2
 80094a4:	9302      	str	r3, [sp, #8]
 80094a6:	f04f 0300 	mov.w	r3, #0
 80094aa:	9301      	str	r3, [sp, #4]
 80094ac:	f04f 0300 	mov.w	r3, #0
 80094b0:	9300      	str	r3, [sp, #0]
 80094b2:	460b      	mov	r3, r1
 80094b4:	2108      	movs	r1, #8
 80094b6:	2001      	movs	r0, #1
 80094b8:	f7ff fd26 	bl	8008f08 <BasicBullet_Init>
 80094bc:	6138      	str	r0, [r7, #16]
			e = RegistGameEvent(
 80094be:	4b18      	ldr	r3, [pc, #96]	; (8009520 <__Flandre_Leavatain+0x1e4>)
 80094c0:	9300      	str	r3, [sp, #0]
 80094c2:	4b18      	ldr	r3, [pc, #96]	; (8009524 <__Flandre_Leavatain+0x1e8>)
 80094c4:	4a18      	ldr	r2, [pc, #96]	; (8009528 <__Flandre_Leavatain+0x1ec>)
 80094c6:	4919      	ldr	r1, [pc, #100]	; (800952c <__Flandre_Leavatain+0x1f0>)
 80094c8:	6938      	ldr	r0, [r7, #16]
 80094ca:	f7f9 fb35 	bl	8002b38 <RegistGameEvent>
 80094ce:	60f8      	str	r0, [r7, #12]
			Push(&Engine_BulletEvents, e);
 80094d0:	68f9      	ldr	r1, [r7, #12]
 80094d2:	4817      	ldr	r0, [pc, #92]	; (8009530 <__Flandre_Leavatain+0x1f4>)
 80094d4:	f000 feee 	bl	800a2b4 <Push>
		for (uint16_t i = self->base.base.pos_y; i <= __HEIGHT; i += 4)
 80094d8:	8abb      	ldrh	r3, [r7, #20]
 80094da:	3304      	adds	r3, #4
 80094dc:	82bb      	strh	r3, [r7, #20]
 80094de:	8abb      	ldrh	r3, [r7, #20]
 80094e0:	2b60      	cmp	r3, #96	; 0x60
 80094e2:	d9ce      	bls.n	8009482 <__Flandre_Leavatain+0x146>
		self->base.base.speed_x = -0.75f;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a17      	ldr	r2, [pc, #92]	; (8009544 <__Flandre_Leavatain+0x208>)
 80094e8:	601a      	str	r2, [r3, #0]
		if (self->base.base.pos_x <= self->aim)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	689c      	ldr	r4, [r3, #8]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7f7 fc0e 	bl	8000d14 <__aeabi_i2f>
 80094f8:	4603      	mov	r3, r0
 80094fa:	4619      	mov	r1, r3
 80094fc:	4620      	mov	r0, r4
 80094fe:	f7f7 fe05 	bl	800110c <__aeabi_fcmple>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d100      	bne.n	800950a <__Flandre_Leavatain+0x1ce>
}
 8009508:	e002      	b.n	8009510 <__Flandre_Leavatain+0x1d4>
			self->skill_param = 0;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009510:	bf00      	nop
 8009512:	371c      	adds	r7, #28
 8009514:	46bd      	mov	sp, r7
 8009516:	bd90      	pop	{r4, r7, pc}
 8009518:	bf19999a 	.word	0xbf19999a
 800951c:	20000354 	.word	0x20000354
 8009520:	08008fab 	.word	0x08008fab
 8009524:	08008f95 	.word	0x08008f95
 8009528:	08008f7d 	.word	0x08008f7d
 800952c:	08008f65 	.word	0x08008f65
 8009530:	20000a24 	.word	0x20000a24
 8009534:	3f19999a 	.word	0x3f19999a
 8009538:	42980000 	.word	0x42980000
 800953c:	42960000 	.word	0x42960000
 8009540:	20000374 	.word	0x20000374
 8009544:	bf400000 	.word	0xbf400000

08009548 <__Flandre_KagomeKagome>:

void __Flandre_KagomeKagome(Flandre_GameObject_Enemy* self)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b08e      	sub	sp, #56	; 0x38
 800954c:	af08      	add	r7, sp, #32
 800954e:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint16_t i_max;
	BasicBullet_GameObject_Bullet* bullet;
	GameEvent* e;

	if (self->skill_param >= __WIDTH + __HEIGHT - 2)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009554:	2ba9      	cmp	r3, #169	; 0xa9
 8009556:	dd02      	ble.n	800955e <__Flandre_KagomeKagome+0x16>
	{
		self->skill_param = 0;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if (self->skill_param <= __WIDTH - 1)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009562:	2b4b      	cmp	r3, #75	; 0x4b
 8009564:	dc05      	bgt.n	8009572 <__Flandre_KagomeKagome+0x2a>
	{
		i = 0;
 8009566:	2300      	movs	r3, #0
 8009568:	82fb      	strh	r3, [r7, #22]
		i_max = self->skill_param;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800956e:	82bb      	strh	r3, [r7, #20]
 8009570:	e04e      	b.n	8009610 <__Flandre_KagomeKagome+0xc8>
	}
	else if (self->skill_param <= __HEIGHT - 1)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009576:	2b5f      	cmp	r3, #95	; 0x5f
 8009578:	dc04      	bgt.n	8009584 <__Flandre_KagomeKagome+0x3c>
	{
		i = 0;
 800957a:	2300      	movs	r3, #0
 800957c:	82fb      	strh	r3, [r7, #22]
		i_max = __WIDTH - 1;
 800957e:	234b      	movs	r3, #75	; 0x4b
 8009580:	82bb      	strh	r3, [r7, #20]
 8009582:	e045      	b.n	8009610 <__Flandre_KagomeKagome+0xc8>
	}
	else
	{
		i = self->skill_param - __HEIGHT + 1;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009588:	b29b      	uxth	r3, r3
 800958a:	3b5f      	subs	r3, #95	; 0x5f
 800958c:	82fb      	strh	r3, [r7, #22]
		i_max = __WIDTH - 1;
 800958e:	234b      	movs	r3, #75	; 0x4b
 8009590:	82bb      	strh	r3, [r7, #20]
	}
	
	for (; i <= i_max; i += 1)
 8009592:	e03d      	b.n	8009610 <__Flandre_KagomeKagome+0xc8>
	{
		if (!(i%19))
 8009594:	8afa      	ldrh	r2, [r7, #22]
 8009596:	4b25      	ldr	r3, [pc, #148]	; (800962c <__Flandre_KagomeKagome+0xe4>)
 8009598:	fba3 1302 	umull	r1, r3, r3, r2
 800959c:	1ad1      	subs	r1, r2, r3
 800959e:	0849      	lsrs	r1, r1, #1
 80095a0:	440b      	add	r3, r1
 80095a2:	0919      	lsrs	r1, r3, #4
 80095a4:	460b      	mov	r3, r1
 80095a6:	00db      	lsls	r3, r3, #3
 80095a8:	440b      	add	r3, r1
 80095aa:	005b      	lsls	r3, r3, #1
 80095ac:	440b      	add	r3, r1
 80095ae:	1ad3      	subs	r3, r2, r3
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d129      	bne.n	800960a <__Flandre_KagomeKagome+0xc2>
		{
			bullet = BasicBullet_Init(
				10, 10, i, self->skill_param - i,
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			bullet = BasicBullet_Init(
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	8afb      	ldrh	r3, [r7, #22]
 80095be:	1ad3      	subs	r3, r2, r3
 80095c0:	b299      	uxth	r1, r3
 80095c2:	8afa      	ldrh	r2, [r7, #22]
 80095c4:	2301      	movs	r3, #1
 80095c6:	9306      	str	r3, [sp, #24]
 80095c8:	4b19      	ldr	r3, [pc, #100]	; (8009630 <__Flandre_KagomeKagome+0xe8>)
 80095ca:	9305      	str	r3, [sp, #20]
 80095cc:	2303      	movs	r3, #3
 80095ce:	9304      	str	r3, [sp, #16]
 80095d0:	2303      	movs	r3, #3
 80095d2:	9303      	str	r3, [sp, #12]
 80095d4:	2301      	movs	r3, #1
 80095d6:	9302      	str	r3, [sp, #8]
 80095d8:	f04f 0300 	mov.w	r3, #0
 80095dc:	9301      	str	r3, [sp, #4]
 80095de:	f04f 0300 	mov.w	r3, #0
 80095e2:	9300      	str	r3, [sp, #0]
 80095e4:	460b      	mov	r3, r1
 80095e6:	210a      	movs	r1, #10
 80095e8:	200a      	movs	r0, #10
 80095ea:	f7ff fc8d 	bl	8008f08 <BasicBullet_Init>
 80095ee:	6138      	str	r0, [r7, #16]
				0, 0, 1, 3, 3, Img_KagomeKagome, true
			);
			e = RegistGameEvent(
 80095f0:	4b10      	ldr	r3, [pc, #64]	; (8009634 <__Flandre_KagomeKagome+0xec>)
 80095f2:	9300      	str	r3, [sp, #0]
 80095f4:	4b10      	ldr	r3, [pc, #64]	; (8009638 <__Flandre_KagomeKagome+0xf0>)
 80095f6:	4a11      	ldr	r2, [pc, #68]	; (800963c <__Flandre_KagomeKagome+0xf4>)
 80095f8:	4911      	ldr	r1, [pc, #68]	; (8009640 <__Flandre_KagomeKagome+0xf8>)
 80095fa:	6938      	ldr	r0, [r7, #16]
 80095fc:	f7f9 fa9c 	bl	8002b38 <RegistGameEvent>
 8009600:	60f8      	str	r0, [r7, #12]
				bullet, BasicBullet_OnCreate, BasicBullet_OnUpdate,
				BasicBullet_OnDestroy, BasicBullet_OnRender
			);
			Push(&Engine_BulletEvents, e);
 8009602:	68f9      	ldr	r1, [r7, #12]
 8009604:	480f      	ldr	r0, [pc, #60]	; (8009644 <__Flandre_KagomeKagome+0xfc>)
 8009606:	f000 fe55 	bl	800a2b4 <Push>
	for (; i <= i_max; i += 1)
 800960a:	8afb      	ldrh	r3, [r7, #22]
 800960c:	3301      	adds	r3, #1
 800960e:	82fb      	strh	r3, [r7, #22]
 8009610:	8afa      	ldrh	r2, [r7, #22]
 8009612:	8abb      	ldrh	r3, [r7, #20]
 8009614:	429a      	cmp	r2, r3
 8009616:	d9bd      	bls.n	8009594 <__Flandre_KagomeKagome+0x4c>
		}
	}

	self->skill_param += 4;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961c:	1d1a      	adds	r2, r3, #4
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009622:	bf00      	nop
 8009624:	3718      	adds	r7, #24
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	af286bcb 	.word	0xaf286bcb
 8009630:	20000394 	.word	0x20000394
 8009634:	08008fab 	.word	0x08008fab
 8009638:	08008f95 	.word	0x08008f95
 800963c:	08008f7d 	.word	0x08008f7d
 8009640:	08008f65 	.word	0x08008f65
 8009644:	20000a24 	.word	0x20000a24

08009648 <__Flandre_StarbowBreak>:

void __Flandre_StarbowBreak(Flandre_GameObject_Enemy* self)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
	
}
 8009650:	bf00      	nop
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	bc80      	pop	{r7}
 8009658:	4770      	bx	lr
	...

0800965c <__Flandre_Catadioptric>:

void __Flandre_Catadioptric(Flandre_GameObject_Enemy* self)
{
 800965c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800965e:	b087      	sub	sp, #28
 8009660:	af02      	add	r7, sp, #8
 8009662:	6078      	str	r0, [r7, #4]
	Catadioptric_GameObject_Bullet* bullet;
	GameEvent* e;
	bullet = Catadioptric_Init(
		self->base.base.pos_x, self->base.base.pos_x,
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	689b      	ldr	r3, [r3, #8]
	bullet = Catadioptric_Init(
 8009668:	4618      	mov	r0, r3
 800966a:	f7f7 fd93 	bl	8001194 <__aeabi_f2uiz>
 800966e:	4603      	mov	r3, r0
 8009670:	b29c      	uxth	r4, r3
		self->base.base.pos_x, self->base.base.pos_x,
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	689b      	ldr	r3, [r3, #8]
	bullet = Catadioptric_Init(
 8009676:	4618      	mov	r0, r3
 8009678:	f7f7 fd8c 	bl	8001194 <__aeabi_f2uiz>
 800967c:	4603      	mov	r3, r0
 800967e:	b29d      	uxth	r5, r3
		((float)os_rand())/__UINT32_MAX__*8 - 2.0f, ((float)os_rand())/__UINT32_MAX__*8 - 2.0f
 8009680:	f000 fe62 	bl	800a348 <os_rand>
 8009684:	4603      	mov	r3, r0
 8009686:	4618      	mov	r0, r3
 8009688:	f7f7 fb40 	bl	8000d0c <__aeabi_ui2f>
 800968c:	4603      	mov	r3, r0
 800968e:	f04f 419f 	mov.w	r1, #1333788672	; 0x4f800000
 8009692:	4618      	mov	r0, r3
 8009694:	f7f7 fc46 	bl	8000f24 <__aeabi_fdiv>
 8009698:	4603      	mov	r3, r0
 800969a:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800969e:	4618      	mov	r0, r3
 80096a0:	f7f7 fb8c 	bl	8000dbc <__aeabi_fmul>
 80096a4:	4603      	mov	r3, r0
	bullet = Catadioptric_Init(
 80096a6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7f7 fa7c 	bl	8000ba8 <__aeabi_fsub>
 80096b0:	4603      	mov	r3, r0
 80096b2:	461e      	mov	r6, r3
		((float)os_rand())/__UINT32_MAX__*8 - 2.0f, ((float)os_rand())/__UINT32_MAX__*8 - 2.0f
 80096b4:	f000 fe48 	bl	800a348 <os_rand>
 80096b8:	4603      	mov	r3, r0
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7f7 fb26 	bl	8000d0c <__aeabi_ui2f>
 80096c0:	4603      	mov	r3, r0
 80096c2:	f04f 419f 	mov.w	r1, #1333788672	; 0x4f800000
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7f7 fc2c 	bl	8000f24 <__aeabi_fdiv>
 80096cc:	4603      	mov	r3, r0
 80096ce:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7f7 fb72 	bl	8000dbc <__aeabi_fmul>
 80096d8:	4603      	mov	r3, r0
	bullet = Catadioptric_Init(
 80096da:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80096de:	4618      	mov	r0, r3
 80096e0:	f7f7 fa62 	bl	8000ba8 <__aeabi_fsub>
 80096e4:	4603      	mov	r3, r0
 80096e6:	4632      	mov	r2, r6
 80096e8:	4629      	mov	r1, r5
 80096ea:	4620      	mov	r0, r4
 80096ec:	f7ff fc6c 	bl	8008fc8 <Catadioptric_Init>
 80096f0:	60f8      	str	r0, [r7, #12]
	);
	e = RegistGameEvent(
 80096f2:	4b08      	ldr	r3, [pc, #32]	; (8009714 <__Flandre_Catadioptric+0xb8>)
 80096f4:	9300      	str	r3, [sp, #0]
 80096f6:	4b08      	ldr	r3, [pc, #32]	; (8009718 <__Flandre_Catadioptric+0xbc>)
 80096f8:	4a08      	ldr	r2, [pc, #32]	; (800971c <__Flandre_Catadioptric+0xc0>)
 80096fa:	4909      	ldr	r1, [pc, #36]	; (8009720 <__Flandre_Catadioptric+0xc4>)
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	f7f9 fa1b 	bl	8002b38 <RegistGameEvent>
 8009702:	60b8      	str	r0, [r7, #8]
		bullet, Catadioptric_OnCreate, Catadioptric_OnUpdate,
		Catadioptric_OnDestroy, Catadioptric_OnRender
	);
	Push(&Engine_BulletEvents, e);
 8009704:	68b9      	ldr	r1, [r7, #8]
 8009706:	4807      	ldr	r0, [pc, #28]	; (8009724 <__Flandre_Catadioptric+0xc8>)
 8009708:	f000 fdd4 	bl	800a2b4 <Push>
}
 800970c:	bf00      	nop
 800970e:	3714      	adds	r7, #20
 8009710:	46bd      	mov	sp, r7
 8009712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009714:	080090d3 	.word	0x080090d3
 8009718:	080090bd 	.word	0x080090bd
 800971c:	08009039 	.word	0x08009039
 8009720:	08009021 	.word	0x08009021
 8009724:	20000a24 	.word	0x20000a24

08009728 <Flandre_Init>:

Flandre_GameObject_Enemy* Flandre_Init()
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b086      	sub	sp, #24
 800972c:	af04      	add	r7, sp, #16
	Flandre_GameObject_Enemy* self = malloc(sizeof(Flandre_GameObject_Enemy));
 800972e:	2038      	movs	r0, #56	; 0x38
 8009730:	f001 f83e 	bl	800a7b0 <malloc>
 8009734:	4603      	mov	r3, r0
 8009736:	607b      	str	r3, [r7, #4]
	GameObject_Enemy_Init(
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	4b0f      	ldr	r3, [pc, #60]	; (8009778 <Flandre_Init+0x50>)
 800973c:	9303      	str	r3, [sp, #12]
 800973e:	2314      	movs	r3, #20
 8009740:	9302      	str	r3, [sp, #8]
 8009742:	2314      	movs	r3, #20
 8009744:	9301      	str	r3, [sp, #4]
 8009746:	230a      	movs	r3, #10
 8009748:	9300      	str	r3, [sp, #0]
 800974a:	2319      	movs	r3, #25
 800974c:	2226      	movs	r2, #38	; 0x26
 800974e:	f649 4140 	movw	r1, #40000	; 0x9c40
 8009752:	f7f9 fafc 	bl	8002d4e <GameObject_Enemy_Init>
		&self->base, Flandre_MAX_LIFE,
		__WIDTH/2, 25,
		10, 20, 20, Img_Flandre
	);
	self->create_time = GetTime();
 8009756:	f000 ff7d 	bl	800a654 <GetTime>
 800975a:	4602      	mov	r2, r0
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	625a      	str	r2, [r3, #36]	; 0x24
	self->skill_param = 0;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	62da      	str	r2, [r3, #44]	; 0x2c
	self->skill = 0;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	629a      	str	r2, [r3, #40]	; 0x28
	return self;
 800976c:	687b      	ldr	r3, [r7, #4]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3708      	adds	r7, #8
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	20000034 	.word	0x20000034

0800977c <Flandre_OnCreate>:

void Flandre_OnCreate(Flandre_GameObject_Enemy* self)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
	GameObject_Enemy_OnCreate(&self->base);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4618      	mov	r0, r3
 8009788:	f7f9 fb00 	bl	8002d8c <GameObject_Enemy_OnCreate>
}
 800978c:	bf00      	nop
 800978e:	3708      	adds	r7, #8
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <Flandre_OnUpdate>:

void Flandre_OnUpdate(Flandre_GameObject_Enemy* self)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
	if (self->base.life > 30000)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a1b      	ldr	r3, [r3, #32]
 80097a0:	f247 5230 	movw	r2, #30000	; 0x7530
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d903      	bls.n	80097b0 <Flandre_OnUpdate+0x1c>
	{
		self->skill = 0;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	629a      	str	r2, [r3, #40]	; 0x28
 80097ae:	e035      	b.n	800981c <Flandre_OnUpdate+0x88>
	}
	else if (self->base.life > 20000)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6a1b      	ldr	r3, [r3, #32]
 80097b4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d90a      	bls.n	80097d2 <Flandre_OnUpdate+0x3e>
	{
		if (self->skill != 1)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d02b      	beq.n	800981c <Flandre_OnUpdate+0x88>
		{
			self->skill = 1;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	629a      	str	r2, [r3, #40]	; 0x28
			self->skill_param = 0;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80097d0:	e024      	b.n	800981c <Flandre_OnUpdate+0x88>
		}
	}
	else if (self->base.life > 10000)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a1b      	ldr	r3, [r3, #32]
 80097d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80097da:	4293      	cmp	r3, r2
 80097dc:	d914      	bls.n	8009808 <Flandre_OnUpdate+0x74>
	{
		if (self->skill != 2)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d01a      	beq.n	800981c <Flandre_OnUpdate+0x88>
		{
			self->skill = 2;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2202      	movs	r2, #2
 80097ea:	629a      	str	r2, [r3, #40]	; 0x28
			self->skill_param = 0;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	62da      	str	r2, [r3, #44]	; 0x2c
			self->base.base.pos_x = __WIDTH/2;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4a24      	ldr	r2, [pc, #144]	; (8009888 <Flandre_OnUpdate+0xf4>)
 80097f6:	609a      	str	r2, [r3, #8]
			self->base.base.pos_y = 25;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a24      	ldr	r2, [pc, #144]	; (800988c <Flandre_OnUpdate+0xf8>)
 80097fc:	60da      	str	r2, [r3, #12]
			self->base.base.speed_x = 0;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f04f 0200 	mov.w	r2, #0
 8009804:	601a      	str	r2, [r3, #0]
 8009806:	e009      	b.n	800981c <Flandre_OnUpdate+0x88>
		}
	}
	else
	{
		if (self->skill != 4)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800980c:	2b04      	cmp	r3, #4
 800980e:	d005      	beq.n	800981c <Flandre_OnUpdate+0x88>
		{
			self->skill = 4;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2204      	movs	r2, #4
 8009814:	629a      	str	r2, [r3, #40]	; 0x28
			self->skill_param = 0;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	
	switch (self->skill)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009820:	2b04      	cmp	r3, #4
 8009822:	d827      	bhi.n	8009874 <Flandre_OnUpdate+0xe0>
 8009824:	a201      	add	r2, pc, #4	; (adr r2, 800982c <Flandre_OnUpdate+0x98>)
 8009826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982a:	bf00      	nop
 800982c:	08009841 	.word	0x08009841
 8009830:	0800984f 	.word	0x0800984f
 8009834:	08009857 	.word	0x08009857
 8009838:	08009865 	.word	0x08009865
 800983c:	0800986d 	.word	0x0800986d
	{
	case 0:
		self->skill_param = 0;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	62da      	str	r2, [r3, #44]	; 0x2c
		__Flandre_Normal(self);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f7ff fcfa 	bl	8009240 <__Flandre_Normal>
		break;
 800984c:	e013      	b.n	8009876 <Flandre_OnUpdate+0xe2>
	case 1:
		__Flandre_Leavatain(self);
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f7ff fd74 	bl	800933c <__Flandre_Leavatain>
		break;
 8009854:	e00f      	b.n	8009876 <Flandre_OnUpdate+0xe2>
	case 2:
		__Flandre_Normal(self);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7ff fcf2 	bl	8009240 <__Flandre_Normal>
		__Flandre_KagomeKagome(self);
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f7ff fe73 	bl	8009548 <__Flandre_KagomeKagome>
		break;
 8009862:	e008      	b.n	8009876 <Flandre_OnUpdate+0xe2>
	case 3:
		__Flandre_StarbowBreak(self);
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f7ff feef 	bl	8009648 <__Flandre_StarbowBreak>
		break;
 800986a:	e004      	b.n	8009876 <Flandre_OnUpdate+0xe2>
	case 4:
		__Flandre_Catadioptric(self);
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f7ff fef5 	bl	800965c <__Flandre_Catadioptric>
		break;
 8009872:	e000      	b.n	8009876 <Flandre_OnUpdate+0xe2>
	default:
		break;
 8009874:	bf00      	nop
	}
	GameObject_Enemy_OnUpdate(&self->base);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4618      	mov	r0, r3
 800987a:	f7f9 fa93 	bl	8002da4 <GameObject_Enemy_OnUpdate>
}
 800987e:	bf00      	nop
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	42180000 	.word	0x42180000
 800988c:	41c80000 	.word	0x41c80000

08009890 <Flandre_OnDestroy>:

void Flandre_OnDestroy(Flandre_GameObject_Enemy* self)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
	Game_ChapterPassed = true;
 8009898:	4b04      	ldr	r3, [pc, #16]	; (80098ac <Flandre_OnDestroy+0x1c>)
 800989a:	2201      	movs	r2, #1
 800989c:	701a      	strb	r2, [r3, #0]
	free(self);
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 ff8e 	bl	800a7c0 <free>
}
 80098a4:	bf00      	nop
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	20000a20 	.word	0x20000a20

080098b0 <Flandre_OnRender>:

void Flandre_OnRender(Flandre_GameObject_Enemy* self, Color** screen)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
	GameObject_Enemy_OnRender(&self->base, screen);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6839      	ldr	r1, [r7, #0]
 80098be:	4618      	mov	r0, r3
 80098c0:	f7f9 fa83 	bl	8002dca <GameObject_Enemy_OnRender>
}
 80098c4:	bf00      	nop
 80098c6:	3708      	adds	r7, #8
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <Goast_Init>:
};

Goast_GameObject_Enemy* Goast_Init(
	uint16_t pos_x, uint16_t pos_y,
	bool move_dir
){
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b088      	sub	sp, #32
 80098d0:	af04      	add	r7, sp, #16
 80098d2:	4603      	mov	r3, r0
 80098d4:	80fb      	strh	r3, [r7, #6]
 80098d6:	460b      	mov	r3, r1
 80098d8:	80bb      	strh	r3, [r7, #4]
 80098da:	4613      	mov	r3, r2
 80098dc:	70fb      	strb	r3, [r7, #3]
	Goast_GameObject_Enemy* self = malloc(sizeof(Goast_GameObject_Enemy));
 80098de:	202c      	movs	r0, #44	; 0x2c
 80098e0:	f000 ff66 	bl	800a7b0 <malloc>
 80098e4:	4603      	mov	r3, r0
 80098e6:	60fb      	str	r3, [r7, #12]
	GameObject_Enemy_Init(&self->base, 1, pos_x, pos_y, 2, 4, 4, Img_Goast);
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	88b9      	ldrh	r1, [r7, #4]
 80098ec:	88fa      	ldrh	r2, [r7, #6]
 80098ee:	4b0c      	ldr	r3, [pc, #48]	; (8009920 <Goast_Init+0x54>)
 80098f0:	9303      	str	r3, [sp, #12]
 80098f2:	2304      	movs	r3, #4
 80098f4:	9302      	str	r3, [sp, #8]
 80098f6:	2304      	movs	r3, #4
 80098f8:	9301      	str	r3, [sp, #4]
 80098fa:	2302      	movs	r3, #2
 80098fc:	9300      	str	r3, [sp, #0]
 80098fe:	460b      	mov	r3, r1
 8009900:	2101      	movs	r1, #1
 8009902:	f7f9 fa24 	bl	8002d4e <GameObject_Enemy_Init>
	self->create_time = GetTime();
 8009906:	f000 fea5 	bl	800a654 <GetTime>
 800990a:	4602      	mov	r2, r0
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	625a      	str	r2, [r3, #36]	; 0x24
	self->move_dir = move_dir;
 8009910:	78fa      	ldrb	r2, [r7, #3]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	629a      	str	r2, [r3, #40]	; 0x28
	return self;
 8009916:	68fb      	ldr	r3, [r7, #12]
}
 8009918:	4618      	mov	r0, r3
 800991a:	3710      	adds	r7, #16
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}
 8009920:	20000470 	.word	0x20000470

08009924 <Goast_OnCreate>:

void Goast_OnCreate(Goast_GameObject_Enemy* self)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
	GameObject_Enemy_OnCreate(&self->base);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4618      	mov	r0, r3
 8009930:	f7f9 fa2c 	bl	8002d8c <GameObject_Enemy_OnCreate>
}
 8009934:	bf00      	nop
 8009936:	3708      	adds	r7, #8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <Goast_OnUpdate>:

void Goast_OnUpdate(Goast_GameObject_Enemy* self)
{
 800993c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800993e:	b08f      	sub	sp, #60	; 0x3c
 8009940:	af08      	add	r7, sp, #32
 8009942:	6078      	str	r0, [r7, #4]
	if (!(GetTime()-self->create_time)%10)
 8009944:	f000 fe86 	bl	800a654 <GetTime>
 8009948:	4602      	mov	r2, r0
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994e:	429a      	cmp	r2, r3
 8009950:	d151      	bne.n	80099f6 <Goast_OnUpdate+0xba>
	{
		float gx = ((GameObject*)Engine_SelfEvent->game_object)->pos_x;
 8009952:	4b76      	ldr	r3, [pc, #472]	; (8009b2c <Goast_OnUpdate+0x1f0>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	617b      	str	r3, [r7, #20]
		float gy = ((GameObject*)Engine_SelfEvent->game_object)->pos_y;
 800995c:	4b73      	ldr	r3, [pc, #460]	; (8009b2c <Goast_OnUpdate+0x1f0>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	613b      	str	r3, [r7, #16]
		
		BasicBullet_GameObject_Bullet* bullet = BasicBullet_Init(
			35, 10, self->base.base.pos_x, self->base.base.pos_y,
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	689b      	ldr	r3, [r3, #8]
		BasicBullet_GameObject_Bullet* bullet = BasicBullet_Init(
 800996a:	4618      	mov	r0, r3
 800996c:	f7f7 fc12 	bl	8001194 <__aeabi_f2uiz>
 8009970:	4603      	mov	r3, r0
 8009972:	b29c      	uxth	r4, r3
			35, 10, self->base.base.pos_x, self->base.base.pos_y,
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	68db      	ldr	r3, [r3, #12]
		BasicBullet_GameObject_Bullet* bullet = BasicBullet_Init(
 8009978:	4618      	mov	r0, r3
 800997a:	f7f7 fc0b 	bl	8001194 <__aeabi_f2uiz>
 800997e:	4603      	mov	r3, r0
 8009980:	b29d      	uxth	r5, r3
			(gx - self->base.base.pos_x) * 0.05f,
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	4619      	mov	r1, r3
 8009988:	6978      	ldr	r0, [r7, #20]
 800998a:	f7f7 f90d 	bl	8000ba8 <__aeabi_fsub>
 800998e:	4603      	mov	r3, r0
		BasicBullet_GameObject_Bullet* bullet = BasicBullet_Init(
 8009990:	4967      	ldr	r1, [pc, #412]	; (8009b30 <Goast_OnUpdate+0x1f4>)
 8009992:	4618      	mov	r0, r3
 8009994:	f7f7 fa12 	bl	8000dbc <__aeabi_fmul>
 8009998:	4603      	mov	r3, r0
 800999a:	461e      	mov	r6, r3
			(gy - self->base.base.pos_y) * 0.05f,
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	4619      	mov	r1, r3
 80099a2:	6938      	ldr	r0, [r7, #16]
 80099a4:	f7f7 f900 	bl	8000ba8 <__aeabi_fsub>
 80099a8:	4603      	mov	r3, r0
		BasicBullet_GameObject_Bullet* bullet = BasicBullet_Init(
 80099aa:	4961      	ldr	r1, [pc, #388]	; (8009b30 <Goast_OnUpdate+0x1f4>)
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7f7 fa05 	bl	8000dbc <__aeabi_fmul>
 80099b2:	4603      	mov	r3, r0
 80099b4:	461a      	mov	r2, r3
 80099b6:	2301      	movs	r3, #1
 80099b8:	9306      	str	r3, [sp, #24]
 80099ba:	4b5e      	ldr	r3, [pc, #376]	; (8009b34 <Goast_OnUpdate+0x1f8>)
 80099bc:	9305      	str	r3, [sp, #20]
 80099be:	2302      	movs	r3, #2
 80099c0:	9304      	str	r3, [sp, #16]
 80099c2:	2302      	movs	r3, #2
 80099c4:	9303      	str	r3, [sp, #12]
 80099c6:	2301      	movs	r3, #1
 80099c8:	9302      	str	r3, [sp, #8]
 80099ca:	9201      	str	r2, [sp, #4]
 80099cc:	9600      	str	r6, [sp, #0]
 80099ce:	462b      	mov	r3, r5
 80099d0:	4622      	mov	r2, r4
 80099d2:	210a      	movs	r1, #10
 80099d4:	2023      	movs	r0, #35	; 0x23
 80099d6:	f7ff fa97 	bl	8008f08 <BasicBullet_Init>
 80099da:	60f8      	str	r0, [r7, #12]
			1, 2, 2, Goast_Img_Bullet, true
		);
		GameEvent* e = RegistGameEvent(
 80099dc:	4b56      	ldr	r3, [pc, #344]	; (8009b38 <Goast_OnUpdate+0x1fc>)
 80099de:	9300      	str	r3, [sp, #0]
 80099e0:	4b56      	ldr	r3, [pc, #344]	; (8009b3c <Goast_OnUpdate+0x200>)
 80099e2:	4a57      	ldr	r2, [pc, #348]	; (8009b40 <Goast_OnUpdate+0x204>)
 80099e4:	4957      	ldr	r1, [pc, #348]	; (8009b44 <Goast_OnUpdate+0x208>)
 80099e6:	68f8      	ldr	r0, [r7, #12]
 80099e8:	f7f9 f8a6 	bl	8002b38 <RegistGameEvent>
 80099ec:	60b8      	str	r0, [r7, #8]
			bullet, BasicBullet_OnCreate, BasicBullet_OnUpdate,
			BasicBullet_OnDestroy, BasicBullet_OnRender
		);
		Push(&Engine_BulletEvents, e);
 80099ee:	68b9      	ldr	r1, [r7, #8]
 80099f0:	4855      	ldr	r0, [pc, #340]	; (8009b48 <Goast_OnUpdate+0x20c>)
 80099f2:	f000 fc5f 	bl	800a2b4 <Push>
	}

	if (!self->move_dir)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d142      	bne.n	8009a84 <Goast_OnUpdate+0x148>
	{
		self->base.base.speed_x = - ((GetTime() - self->create_time)%16) * 0.2f;
 80099fe:	f000 fe29 	bl	800a654 <GetTime>
 8009a02:	4602      	mov	r2, r0
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	425a      	negs	r2, r3
 8009a0c:	f003 030f 	and.w	r3, r3, #15
 8009a10:	f002 020f 	and.w	r2, r2, #15
 8009a14:	bf58      	it	pl
 8009a16:	4253      	negpl	r3, r2
 8009a18:	425b      	negs	r3, r3
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7f7 f97a 	bl	8000d14 <__aeabi_i2f>
 8009a20:	4603      	mov	r3, r0
 8009a22:	494a      	ldr	r1, [pc, #296]	; (8009b4c <Goast_OnUpdate+0x210>)
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7f7 f9c9 	bl	8000dbc <__aeabi_fmul>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	601a      	str	r2, [r3, #0]
		self->base.base.speed_y = ((GetTime() - self->create_time) % 3) * 0.2f;
 8009a32:	f000 fe0f 	bl	800a654 <GetTime>
 8009a36:	4602      	mov	r2, r0
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3c:	1ad2      	subs	r2, r2, r3
 8009a3e:	4b44      	ldr	r3, [pc, #272]	; (8009b50 <Goast_OnUpdate+0x214>)
 8009a40:	fb83 3102 	smull	r3, r1, r3, r2
 8009a44:	17d3      	asrs	r3, r2, #31
 8009a46:	1ac9      	subs	r1, r1, r3
 8009a48:	460b      	mov	r3, r1
 8009a4a:	005b      	lsls	r3, r3, #1
 8009a4c:	440b      	add	r3, r1
 8009a4e:	1ad1      	subs	r1, r2, r3
 8009a50:	4608      	mov	r0, r1
 8009a52:	f7f7 f95f 	bl	8000d14 <__aeabi_i2f>
 8009a56:	4603      	mov	r3, r0
 8009a58:	493c      	ldr	r1, [pc, #240]	; (8009b4c <Goast_OnUpdate+0x210>)
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7f7 f9ae 	bl	8000dbc <__aeabi_fmul>
 8009a60:	4603      	mov	r3, r0
 8009a62:	461a      	mov	r2, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	605a      	str	r2, [r3, #4]
		if (self->base.base.pos_x < 0)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	f04f 0100 	mov.w	r1, #0
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7f7 fb41 	bl	80010f8 <__aeabi_fcmplt>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d043      	beq.n	8009b04 <Goast_OnUpdate+0x1c8>
			self->move_dir = 1;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	629a      	str	r2, [r3, #40]	; 0x28
 8009a82:	e03f      	b.n	8009b04 <Goast_OnUpdate+0x1c8>
	}
	else
	{
		self->base.base.speed_x = ((GetTime() - self->create_time) % 16) * 0.2f;
 8009a84:	f000 fde6 	bl	800a654 <GetTime>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8e:	1ad3      	subs	r3, r2, r3
 8009a90:	425a      	negs	r2, r3
 8009a92:	f003 030f 	and.w	r3, r3, #15
 8009a96:	f002 020f 	and.w	r2, r2, #15
 8009a9a:	bf58      	it	pl
 8009a9c:	4253      	negpl	r3, r2
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7f7 f938 	bl	8000d14 <__aeabi_i2f>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	4929      	ldr	r1, [pc, #164]	; (8009b4c <Goast_OnUpdate+0x210>)
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7f7 f987 	bl	8000dbc <__aeabi_fmul>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	601a      	str	r2, [r3, #0]
		self->base.base.speed_y = ((GetTime() - self->create_time)%3) * 0.2f;
 8009ab6:	f000 fdcd 	bl	800a654 <GetTime>
 8009aba:	4602      	mov	r2, r0
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac0:	1ad2      	subs	r2, r2, r3
 8009ac2:	4b23      	ldr	r3, [pc, #140]	; (8009b50 <Goast_OnUpdate+0x214>)
 8009ac4:	fb83 3102 	smull	r3, r1, r3, r2
 8009ac8:	17d3      	asrs	r3, r2, #31
 8009aca:	1ac9      	subs	r1, r1, r3
 8009acc:	460b      	mov	r3, r1
 8009ace:	005b      	lsls	r3, r3, #1
 8009ad0:	440b      	add	r3, r1
 8009ad2:	1ad1      	subs	r1, r2, r3
 8009ad4:	4608      	mov	r0, r1
 8009ad6:	f7f7 f91d 	bl	8000d14 <__aeabi_i2f>
 8009ada:	4603      	mov	r3, r0
 8009adc:	491b      	ldr	r1, [pc, #108]	; (8009b4c <Goast_OnUpdate+0x210>)
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7f7 f96c 	bl	8000dbc <__aeabi_fmul>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	605a      	str	r2, [r3, #4]
		if (self->base.base.pos_x >= __WIDTH)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	4918      	ldr	r1, [pc, #96]	; (8009b54 <Goast_OnUpdate+0x218>)
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7f7 fb14 	bl	8001120 <__aeabi_fcmpge>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d002      	beq.n	8009b04 <Goast_OnUpdate+0x1c8>
			self->move_dir = 0;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	629a      	str	r2, [r3, #40]	; 0x28
	}

	if (self->base.base.pos_y > __HEIGHT)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	4913      	ldr	r1, [pc, #76]	; (8009b58 <Goast_OnUpdate+0x21c>)
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7f7 fb12 	bl	8001134 <__aeabi_fcmpgt>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d002      	beq.n	8009b1c <Goast_OnUpdate+0x1e0>
		self->base.base.__to_destroy = true;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	775a      	strb	r2, [r3, #29]

	GameObject_Enemy_OnUpdate(&self->base);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7f9 f940 	bl	8002da4 <GameObject_Enemy_OnUpdate>
}
 8009b24:	bf00      	nop
 8009b26:	371c      	adds	r7, #28
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b2c:	20000a04 	.word	0x20000a04
 8009b30:	3d4ccccd 	.word	0x3d4ccccd
 8009b34:	20000490 	.word	0x20000490
 8009b38:	08008fab 	.word	0x08008fab
 8009b3c:	08008f95 	.word	0x08008f95
 8009b40:	08008f7d 	.word	0x08008f7d
 8009b44:	08008f65 	.word	0x08008f65
 8009b48:	20000a24 	.word	0x20000a24
 8009b4c:	3e4ccccd 	.word	0x3e4ccccd
 8009b50:	55555556 	.word	0x55555556
 8009b54:	42980000 	.word	0x42980000
 8009b58:	42c00000 	.word	0x42c00000

08009b5c <Goast_OnDestroy>:

void Goast_OnDestroy(Goast_GameObject_Enemy* self)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
	free(self);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 fe2b 	bl	800a7c0 <free>
}
 8009b6a:	bf00      	nop
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <Goast_OnRender>:

void Goast_OnRender(Goast_GameObject_Enemy* self, Color** screen)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b082      	sub	sp, #8
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
 8009b7a:	6039      	str	r1, [r7, #0]
	GameObject_Enemy_OnRender(&self->base, screen);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7f9 f922 	bl	8002dca <GameObject_Enemy_OnRender>
}
 8009b86:	bf00      	nop
 8009b88:	3708      	adds	r7, #8
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
	...

08009b90 <Remo_Init>:
#include "Img_Moliza.h"

void Remo_Init(
	Remo_GameObject_Self* self,
	uint16_t pos_x, uint16_t pos_y
){
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b086      	sub	sp, #24
 8009b94:	af04      	add	r7, sp, #16
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	460b      	mov	r3, r1
 8009b9a:	807b      	strh	r3, [r7, #2]
 8009b9c:	4613      	mov	r3, r2
 8009b9e:	803b      	strh	r3, [r7, #0]
	GameObject_Self_Init(
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	8839      	ldrh	r1, [r7, #0]
 8009ba4:	887a      	ldrh	r2, [r7, #2]
 8009ba6:	4b09      	ldr	r3, [pc, #36]	; (8009bcc <Remo_Init+0x3c>)
 8009ba8:	9303      	str	r3, [sp, #12]
 8009baa:	2314      	movs	r3, #20
 8009bac:	9302      	str	r3, [sp, #8]
 8009bae:	2314      	movs	r3, #20
 8009bb0:	9301      	str	r3, [sp, #4]
 8009bb2:	2302      	movs	r3, #2
 8009bb4:	9300      	str	r3, [sp, #0]
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	2164      	movs	r1, #100	; 0x64
 8009bba:	f7f9 f914 	bl	8002de6 <GameObject_Self_Init>
		pos_x, pos_y,
		2,
		20, 20,
		Img_Moliza
	);
	self->fire_rank = 1;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009bc4:	bf00      	nop
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	20000498 	.word	0x20000498

08009bd0 <Remo_OnCreate>:

void Remo_OnCreate(Remo_GameObject_Self* self)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
	GameObject_Self_OnCreate(&self->base);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7f9 f922 	bl	8002e24 <GameObject_Self_OnCreate>
}
 8009be0:	bf00      	nop
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <Remo_OnUpdate>:

void Remo_OnUpdate(Remo_GameObject_Self* self)
{
 8009be8:	b590      	push	{r4, r7, lr}
 8009bea:	b087      	sub	sp, #28
 8009bec:	af02      	add	r7, sp, #8
 8009bee:	6078      	str	r0, [r7, #4]
	RoyalCoin_GameObject_Bullet* bullet;
	GameEvent* e;

	if (Game_KillCount > 4 && self->fire_rank <= 4)
 8009bf0:	4ba7      	ldr	r3, [pc, #668]	; (8009e90 <Remo_OnUpdate+0x2a8>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2b04      	cmp	r3, #4
 8009bf6:	d90d      	bls.n	8009c14 <Remo_OnUpdate+0x2c>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfc:	2b04      	cmp	r3, #4
 8009bfe:	d809      	bhi.n	8009c14 <Remo_OnUpdate+0x2c>
	{
		self->fire_rank++;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c04:	1c5a      	adds	r2, r3, #1
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	625a      	str	r2, [r3, #36]	; 0x24
		Game_KillCount -= 20;
 8009c0a:	4ba1      	ldr	r3, [pc, #644]	; (8009e90 <Remo_OnUpdate+0x2a8>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	3b14      	subs	r3, #20
 8009c10:	4a9f      	ldr	r2, [pc, #636]	; (8009e90 <Remo_OnUpdate+0x2a8>)
 8009c12:	6013      	str	r3, [r2, #0]
	}
	// Recover
	if (!(GetTime()%13) && self->base.life < SELF_LIFE_MAX)
 8009c14:	f000 fd1e 	bl	800a654 <GetTime>
 8009c18:	4601      	mov	r1, r0
 8009c1a:	4b9e      	ldr	r3, [pc, #632]	; (8009e94 <Remo_OnUpdate+0x2ac>)
 8009c1c:	fb83 2301 	smull	r2, r3, r3, r1
 8009c20:	109a      	asrs	r2, r3, #2
 8009c22:	17cb      	asrs	r3, r1, #31
 8009c24:	1ad2      	subs	r2, r2, r3
 8009c26:	4613      	mov	r3, r2
 8009c28:	005b      	lsls	r3, r3, #1
 8009c2a:	4413      	add	r3, r2
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	4413      	add	r3, r2
 8009c30:	1aca      	subs	r2, r1, r3
 8009c32:	2a00      	cmp	r2, #0
 8009c34:	d108      	bne.n	8009c48 <Remo_OnUpdate+0x60>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a1b      	ldr	r3, [r3, #32]
 8009c3a:	2b63      	cmp	r3, #99	; 0x63
 8009c3c:	d804      	bhi.n	8009c48 <Remo_OnUpdate+0x60>
		self->base.life++;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a1b      	ldr	r3, [r3, #32]
 8009c42:	1c5a      	adds	r2, r3, #1
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	621a      	str	r2, [r3, #32]
	// fire
	if (!(GetTime()%2))
 8009c48:	f000 fd04 	bl	800a654 <GetTime>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	f003 0301 	and.w	r3, r3, #1
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f040 8168 	bne.w	8009f28 <Remo_OnUpdate+0x340>
	{
		if (self->fire_rank == 1 || self->fire_rank == 4) // basic
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d003      	beq.n	8009c68 <Remo_OnUpdate+0x80>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c64:	2b04      	cmp	r3, #4
 8009c66:	d127      	bne.n	8009cb8 <Remo_OnUpdate+0xd0>
		{
			bullet = malloc(sizeof(RoyalCoin_GameObject_Bullet));
 8009c68:	2028      	movs	r0, #40	; 0x28
 8009c6a:	f000 fda1 	bl	800a7b0 <malloc>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	60fb      	str	r3, [r7, #12]
			RoyalCoin_Init(bullet, self->base.base.pos_x, self->base.base.pos_y, 0.0f, -4.5f);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7f7 fa8c 	bl	8001194 <__aeabi_f2uiz>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	b29c      	uxth	r4, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7f7 fa85 	bl	8001194 <__aeabi_f2uiz>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	4b82      	ldr	r3, [pc, #520]	; (8009e98 <Remo_OnUpdate+0x2b0>)
 8009c90:	9300      	str	r3, [sp, #0]
 8009c92:	f04f 0300 	mov.w	r3, #0
 8009c96:	4621      	mov	r1, r4
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	f000 f97f 	bl	8009f9c <RoyalCoin_Init>
			e = RegistGameEvent(
 8009c9e:	4b7f      	ldr	r3, [pc, #508]	; (8009e9c <Remo_OnUpdate+0x2b4>)
 8009ca0:	9300      	str	r3, [sp, #0]
 8009ca2:	4b7f      	ldr	r3, [pc, #508]	; (8009ea0 <Remo_OnUpdate+0x2b8>)
 8009ca4:	4a7f      	ldr	r2, [pc, #508]	; (8009ea4 <Remo_OnUpdate+0x2bc>)
 8009ca6:	4980      	ldr	r1, [pc, #512]	; (8009ea8 <Remo_OnUpdate+0x2c0>)
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f7f8 ff45 	bl	8002b38 <RegistGameEvent>
 8009cae:	60b8      	str	r0, [r7, #8]
				bullet,
				RoyalCoin_OnCreate, RoyalCoin_OnUpdate,
				RoyalCoin_OnDestroy, RoyalCoin_OnRender
			);
			Push(&Engine_BulletEvents, e);
 8009cb0:	68b9      	ldr	r1, [r7, #8]
 8009cb2:	487e      	ldr	r0, [pc, #504]	; (8009eac <Remo_OnUpdate+0x2c4>)
 8009cb4:	f000 fafe 	bl	800a2b4 <Push>
		}
		if (self->fire_rank >= 2) // Double bullets
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	f240 8133 	bls.w	8009f28 <Remo_OnUpdate+0x340>
		{
			bullet = malloc(sizeof(RoyalCoin_GameObject_Bullet));
 8009cc2:	2028      	movs	r0, #40	; 0x28
 8009cc4:	f000 fd74 	bl	800a7b0 <malloc>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	60fb      	str	r3, [r7, #12]
			RoyalCoin_Init(bullet, self->base.base.pos_x - 2, self->base.base.pos_y, 0.0f, -4.5f);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7f6 ff67 	bl	8000ba8 <__aeabi_fsub>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7f7 fa59 	bl	8001194 <__aeabi_f2uiz>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	b29c      	uxth	r4, r3
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7f7 fa52 	bl	8001194 <__aeabi_f2uiz>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	b29a      	uxth	r2, r3
 8009cf4:	4b68      	ldr	r3, [pc, #416]	; (8009e98 <Remo_OnUpdate+0x2b0>)
 8009cf6:	9300      	str	r3, [sp, #0]
 8009cf8:	f04f 0300 	mov.w	r3, #0
 8009cfc:	4621      	mov	r1, r4
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f000 f94c 	bl	8009f9c <RoyalCoin_Init>
			e = RegistGameEvent(
 8009d04:	4b65      	ldr	r3, [pc, #404]	; (8009e9c <Remo_OnUpdate+0x2b4>)
 8009d06:	9300      	str	r3, [sp, #0]
 8009d08:	4b65      	ldr	r3, [pc, #404]	; (8009ea0 <Remo_OnUpdate+0x2b8>)
 8009d0a:	4a66      	ldr	r2, [pc, #408]	; (8009ea4 <Remo_OnUpdate+0x2bc>)
 8009d0c:	4966      	ldr	r1, [pc, #408]	; (8009ea8 <Remo_OnUpdate+0x2c0>)
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	f7f8 ff12 	bl	8002b38 <RegistGameEvent>
 8009d14:	60b8      	str	r0, [r7, #8]
				bullet,
				RoyalCoin_OnCreate, RoyalCoin_OnUpdate,
				RoyalCoin_OnDestroy, RoyalCoin_OnRender
			);
			Push(&Engine_BulletEvents, e);
 8009d16:	68b9      	ldr	r1, [r7, #8]
 8009d18:	4864      	ldr	r0, [pc, #400]	; (8009eac <Remo_OnUpdate+0x2c4>)
 8009d1a:	f000 facb 	bl	800a2b4 <Push>

			bullet = malloc(sizeof(RoyalCoin_GameObject_Bullet));
 8009d1e:	2028      	movs	r0, #40	; 0x28
 8009d20:	f000 fd46 	bl	800a7b0 <malloc>
 8009d24:	4603      	mov	r3, r0
 8009d26:	60fb      	str	r3, [r7, #12]
			RoyalCoin_Init(bullet, self->base.base.pos_x + 2, self->base.base.pos_y, 0.0f, -4.5f);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7f6 ff3b 	bl	8000bac <__addsf3>
 8009d36:	4603      	mov	r3, r0
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7f7 fa2b 	bl	8001194 <__aeabi_f2uiz>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	b29c      	uxth	r4, r3
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7f7 fa24 	bl	8001194 <__aeabi_f2uiz>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	b29a      	uxth	r2, r3
 8009d50:	4b51      	ldr	r3, [pc, #324]	; (8009e98 <Remo_OnUpdate+0x2b0>)
 8009d52:	9300      	str	r3, [sp, #0]
 8009d54:	f04f 0300 	mov.w	r3, #0
 8009d58:	4621      	mov	r1, r4
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	f000 f91e 	bl	8009f9c <RoyalCoin_Init>
			e = RegistGameEvent(
 8009d60:	4b4e      	ldr	r3, [pc, #312]	; (8009e9c <Remo_OnUpdate+0x2b4>)
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	4b4e      	ldr	r3, [pc, #312]	; (8009ea0 <Remo_OnUpdate+0x2b8>)
 8009d66:	4a4f      	ldr	r2, [pc, #316]	; (8009ea4 <Remo_OnUpdate+0x2bc>)
 8009d68:	494f      	ldr	r1, [pc, #316]	; (8009ea8 <Remo_OnUpdate+0x2c0>)
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f7f8 fee4 	bl	8002b38 <RegistGameEvent>
 8009d70:	60b8      	str	r0, [r7, #8]
				bullet,
				RoyalCoin_OnCreate, RoyalCoin_OnUpdate,
				RoyalCoin_OnDestroy, RoyalCoin_OnRender
			);
			Push(&Engine_BulletEvents, e);
 8009d72:	68b9      	ldr	r1, [r7, #8]
 8009d74:	484d      	ldr	r0, [pc, #308]	; (8009eac <Remo_OnUpdate+0x2c4>)
 8009d76:	f000 fa9d 	bl	800a2b4 <Push>

			if (self->fire_rank >= 3) // Side bullets
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	d959      	bls.n	8009e36 <Remo_OnUpdate+0x24e>
			{
				bullet = malloc(sizeof(RoyalCoin_GameObject_Bullet));
 8009d82:	2028      	movs	r0, #40	; 0x28
 8009d84:	f000 fd14 	bl	800a7b0 <malloc>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	60fb      	str	r3, [r7, #12]
				RoyalCoin_Init(bullet, self->base.base.pos_x - 2, self->base.base.pos_y, -1.6f, -4.1f);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7f6 ff07 	bl	8000ba8 <__aeabi_fsub>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f7f7 f9f9 	bl	8001194 <__aeabi_f2uiz>
 8009da2:	4603      	mov	r3, r0
 8009da4:	b29c      	uxth	r4, r3
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7f7 f9f2 	bl	8001194 <__aeabi_f2uiz>
 8009db0:	4603      	mov	r3, r0
 8009db2:	b29a      	uxth	r2, r3
 8009db4:	4b3e      	ldr	r3, [pc, #248]	; (8009eb0 <Remo_OnUpdate+0x2c8>)
 8009db6:	9300      	str	r3, [sp, #0]
 8009db8:	4b3e      	ldr	r3, [pc, #248]	; (8009eb4 <Remo_OnUpdate+0x2cc>)
 8009dba:	4621      	mov	r1, r4
 8009dbc:	68f8      	ldr	r0, [r7, #12]
 8009dbe:	f000 f8ed 	bl	8009f9c <RoyalCoin_Init>
				e = RegistGameEvent(
 8009dc2:	4b36      	ldr	r3, [pc, #216]	; (8009e9c <Remo_OnUpdate+0x2b4>)
 8009dc4:	9300      	str	r3, [sp, #0]
 8009dc6:	4b36      	ldr	r3, [pc, #216]	; (8009ea0 <Remo_OnUpdate+0x2b8>)
 8009dc8:	4a36      	ldr	r2, [pc, #216]	; (8009ea4 <Remo_OnUpdate+0x2bc>)
 8009dca:	4937      	ldr	r1, [pc, #220]	; (8009ea8 <Remo_OnUpdate+0x2c0>)
 8009dcc:	68f8      	ldr	r0, [r7, #12]
 8009dce:	f7f8 feb3 	bl	8002b38 <RegistGameEvent>
 8009dd2:	60b8      	str	r0, [r7, #8]
					bullet,
					RoyalCoin_OnCreate, RoyalCoin_OnUpdate,
					RoyalCoin_OnDestroy, RoyalCoin_OnRender
				);
				Push(&Engine_BulletEvents, e);
 8009dd4:	68b9      	ldr	r1, [r7, #8]
 8009dd6:	4835      	ldr	r0, [pc, #212]	; (8009eac <Remo_OnUpdate+0x2c4>)
 8009dd8:	f000 fa6c 	bl	800a2b4 <Push>

				bullet = malloc(sizeof(RoyalCoin_GameObject_Bullet));
 8009ddc:	2028      	movs	r0, #40	; 0x28
 8009dde:	f000 fce7 	bl	800a7b0 <malloc>
 8009de2:	4603      	mov	r3, r0
 8009de4:	60fb      	str	r3, [r7, #12]
				RoyalCoin_Init(bullet, self->base.base.pos_x + 2, self->base.base.pos_y, 1.6f, -4.1f);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7f6 fedc 	bl	8000bac <__addsf3>
 8009df4:	4603      	mov	r3, r0
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7f7 f9cc 	bl	8001194 <__aeabi_f2uiz>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	b29c      	uxth	r4, r3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	4618      	mov	r0, r3
 8009e06:	f7f7 f9c5 	bl	8001194 <__aeabi_f2uiz>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	b29a      	uxth	r2, r3
 8009e0e:	4b28      	ldr	r3, [pc, #160]	; (8009eb0 <Remo_OnUpdate+0x2c8>)
 8009e10:	9300      	str	r3, [sp, #0]
 8009e12:	4b29      	ldr	r3, [pc, #164]	; (8009eb8 <Remo_OnUpdate+0x2d0>)
 8009e14:	4621      	mov	r1, r4
 8009e16:	68f8      	ldr	r0, [r7, #12]
 8009e18:	f000 f8c0 	bl	8009f9c <RoyalCoin_Init>
				e = RegistGameEvent(
 8009e1c:	4b1f      	ldr	r3, [pc, #124]	; (8009e9c <Remo_OnUpdate+0x2b4>)
 8009e1e:	9300      	str	r3, [sp, #0]
 8009e20:	4b1f      	ldr	r3, [pc, #124]	; (8009ea0 <Remo_OnUpdate+0x2b8>)
 8009e22:	4a20      	ldr	r2, [pc, #128]	; (8009ea4 <Remo_OnUpdate+0x2bc>)
 8009e24:	4920      	ldr	r1, [pc, #128]	; (8009ea8 <Remo_OnUpdate+0x2c0>)
 8009e26:	68f8      	ldr	r0, [r7, #12]
 8009e28:	f7f8 fe86 	bl	8002b38 <RegistGameEvent>
 8009e2c:	60b8      	str	r0, [r7, #8]
					bullet,
					RoyalCoin_OnCreate, RoyalCoin_OnUpdate,
					RoyalCoin_OnDestroy, RoyalCoin_OnRender
				);
				Push(&Engine_BulletEvents, e);
 8009e2e:	68b9      	ldr	r1, [r7, #8]
 8009e30:	481e      	ldr	r0, [pc, #120]	; (8009eac <Remo_OnUpdate+0x2c4>)
 8009e32:	f000 fa3f 	bl	800a2b4 <Push>
			}

			if (self->fire_rank == 4) // Full side
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3a:	2b04      	cmp	r3, #4
 8009e3c:	d174      	bne.n	8009f28 <Remo_OnUpdate+0x340>
			{
				bullet = malloc(sizeof(RoyalCoin_GameObject_Bullet));
 8009e3e:	2028      	movs	r0, #40	; 0x28
 8009e40:	f000 fcb6 	bl	800a7b0 <malloc>
 8009e44:	4603      	mov	r3, r0
 8009e46:	60fb      	str	r3, [r7, #12]
				RoyalCoin_Init(bullet, self->base.base.pos_x - 3, self->base.base.pos_y, -2.0f, -3.5f);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	491b      	ldr	r1, [pc, #108]	; (8009ebc <Remo_OnUpdate+0x2d4>)
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7f6 feaa 	bl	8000ba8 <__aeabi_fsub>
 8009e54:	4603      	mov	r3, r0
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7f7 f99c 	bl	8001194 <__aeabi_f2uiz>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	b29c      	uxth	r4, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7f7 f995 	bl	8001194 <__aeabi_f2uiz>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	b29a      	uxth	r2, r3
 8009e6e:	4b14      	ldr	r3, [pc, #80]	; (8009ec0 <Remo_OnUpdate+0x2d8>)
 8009e70:	9300      	str	r3, [sp, #0]
 8009e72:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8009e76:	4621      	mov	r1, r4
 8009e78:	68f8      	ldr	r0, [r7, #12]
 8009e7a:	f000 f88f 	bl	8009f9c <RoyalCoin_Init>
				e = RegistGameEvent(
 8009e7e:	4b07      	ldr	r3, [pc, #28]	; (8009e9c <Remo_OnUpdate+0x2b4>)
 8009e80:	9300      	str	r3, [sp, #0]
 8009e82:	4b07      	ldr	r3, [pc, #28]	; (8009ea0 <Remo_OnUpdate+0x2b8>)
 8009e84:	4a07      	ldr	r2, [pc, #28]	; (8009ea4 <Remo_OnUpdate+0x2bc>)
 8009e86:	4908      	ldr	r1, [pc, #32]	; (8009ea8 <Remo_OnUpdate+0x2c0>)
 8009e88:	68f8      	ldr	r0, [r7, #12]
 8009e8a:	f7f8 fe55 	bl	8002b38 <RegistGameEvent>
 8009e8e:	e019      	b.n	8009ec4 <Remo_OnUpdate+0x2dc>
 8009e90:	200009ec 	.word	0x200009ec
 8009e94:	4ec4ec4f 	.word	0x4ec4ec4f
 8009e98:	c0900000 	.word	0xc0900000
 8009e9c:	0800a02f 	.word	0x0800a02f
 8009ea0:	0800a019 	.word	0x0800a019
 8009ea4:	0800a001 	.word	0x0800a001
 8009ea8:	08009fe9 	.word	0x08009fe9
 8009eac:	20000a24 	.word	0x20000a24
 8009eb0:	c0833333 	.word	0xc0833333
 8009eb4:	bfcccccd 	.word	0xbfcccccd
 8009eb8:	3fcccccd 	.word	0x3fcccccd
 8009ebc:	40400000 	.word	0x40400000
 8009ec0:	c0600000 	.word	0xc0600000
 8009ec4:	60b8      	str	r0, [r7, #8]
					bullet,
					RoyalCoin_OnCreate, RoyalCoin_OnUpdate,
					RoyalCoin_OnDestroy, RoyalCoin_OnRender
				);
				Push(&Engine_BulletEvents, e);
 8009ec6:	68b9      	ldr	r1, [r7, #8]
 8009ec8:	481b      	ldr	r0, [pc, #108]	; (8009f38 <Remo_OnUpdate+0x350>)
 8009eca:	f000 f9f3 	bl	800a2b4 <Push>

				bullet = malloc(sizeof(RoyalCoin_GameObject_Bullet));
 8009ece:	2028      	movs	r0, #40	; 0x28
 8009ed0:	f000 fc6e 	bl	800a7b0 <malloc>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	60fb      	str	r3, [r7, #12]
				RoyalCoin_Init(bullet, self->base.base.pos_x + 3, self->base.base.pos_y, 2.0f, -3.5f);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	4917      	ldr	r1, [pc, #92]	; (8009f3c <Remo_OnUpdate+0x354>)
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7f6 fe64 	bl	8000bac <__addsf3>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7f7 f954 	bl	8001194 <__aeabi_f2uiz>
 8009eec:	4603      	mov	r3, r0
 8009eee:	b29c      	uxth	r4, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7f7 f94d 	bl	8001194 <__aeabi_f2uiz>
 8009efa:	4603      	mov	r3, r0
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	4b10      	ldr	r3, [pc, #64]	; (8009f40 <Remo_OnUpdate+0x358>)
 8009f00:	9300      	str	r3, [sp, #0]
 8009f02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009f06:	4621      	mov	r1, r4
 8009f08:	68f8      	ldr	r0, [r7, #12]
 8009f0a:	f000 f847 	bl	8009f9c <RoyalCoin_Init>
				e = RegistGameEvent(
 8009f0e:	4b0d      	ldr	r3, [pc, #52]	; (8009f44 <Remo_OnUpdate+0x35c>)
 8009f10:	9300      	str	r3, [sp, #0]
 8009f12:	4b0d      	ldr	r3, [pc, #52]	; (8009f48 <Remo_OnUpdate+0x360>)
 8009f14:	4a0d      	ldr	r2, [pc, #52]	; (8009f4c <Remo_OnUpdate+0x364>)
 8009f16:	490e      	ldr	r1, [pc, #56]	; (8009f50 <Remo_OnUpdate+0x368>)
 8009f18:	68f8      	ldr	r0, [r7, #12]
 8009f1a:	f7f8 fe0d 	bl	8002b38 <RegistGameEvent>
 8009f1e:	60b8      	str	r0, [r7, #8]
					bullet,
					RoyalCoin_OnCreate, RoyalCoin_OnUpdate,
					RoyalCoin_OnDestroy, RoyalCoin_OnRender
				);
				Push(&Engine_BulletEvents, e);
 8009f20:	68b9      	ldr	r1, [r7, #8]
 8009f22:	4805      	ldr	r0, [pc, #20]	; (8009f38 <Remo_OnUpdate+0x350>)
 8009f24:	f000 f9c6 	bl	800a2b4 <Push>
			}
		}
	}	

	GameObject_Self_OnUpdate(&self->base);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7f8 ff86 	bl	8002e3c <GameObject_Self_OnUpdate>
}
 8009f30:	bf00      	nop
 8009f32:	3714      	adds	r7, #20
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd90      	pop	{r4, r7, pc}
 8009f38:	20000a24 	.word	0x20000a24
 8009f3c:	40400000 	.word	0x40400000
 8009f40:	c0600000 	.word	0xc0600000
 8009f44:	0800a02f 	.word	0x0800a02f
 8009f48:	0800a019 	.word	0x0800a019
 8009f4c:	0800a001 	.word	0x0800a001
 8009f50:	08009fe9 	.word	0x08009fe9

08009f54 <Remo_OnDestroy>:

void Remo_OnDestroy(Remo_GameObject_Self* self)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
	if (!Game_Life)
 8009f5c:	4b07      	ldr	r3, [pc, #28]	; (8009f7c <Remo_OnDestroy+0x28>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d103      	bne.n	8009f6c <Remo_OnDestroy+0x18>
	{
		free(self);
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 fc2b 	bl	800a7c0 <free>
	}
	else
	{
		self->fire_rank = 1;
	}
}
 8009f6a:	e002      	b.n	8009f72 <Remo_OnDestroy+0x1e>
		self->fire_rank = 1;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009f72:	bf00      	nop
 8009f74:	3708      	adds	r7, #8
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	200009f4 	.word	0x200009f4

08009f80 <Remo_OnRender>:

void Remo_OnRender(Remo_GameObject_Self* self, Color** screen)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
	GameObject_Self_OnRender(&self->base, screen);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6839      	ldr	r1, [r7, #0]
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7f8 ffb6 	bl	8002f00 <GameObject_Self_OnRender>
}
 8009f94:	bf00      	nop
 8009f96:	3708      	adds	r7, #8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <RoyalCoin_Init>:

void RoyalCoin_Init(
	RoyalCoin_GameObject_Bullet* self,
	uint16_t pos_x, uint16_t pos_y,
	float speed_x, float speed_y
){
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b08c      	sub	sp, #48	; 0x30
 8009fa0:	af08      	add	r7, sp, #32
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	607b      	str	r3, [r7, #4]
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	817b      	strh	r3, [r7, #10]
 8009faa:	4613      	mov	r3, r2
 8009fac:	813b      	strh	r3, [r7, #8]
	GameObject_Bullet_Init(
 8009fae:	68f8      	ldr	r0, [r7, #12]
 8009fb0:	897a      	ldrh	r2, [r7, #10]
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	9307      	str	r3, [sp, #28]
 8009fb6:	4b0b      	ldr	r3, [pc, #44]	; (8009fe4 <RoyalCoin_Init+0x48>)
 8009fb8:	9306      	str	r3, [sp, #24]
 8009fba:	2302      	movs	r3, #2
 8009fbc:	9305      	str	r3, [sp, #20]
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	9304      	str	r3, [sp, #16]
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	9303      	str	r3, [sp, #12]
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	9302      	str	r3, [sp, #8]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	9301      	str	r3, [sp, #4]
 8009fce:	893b      	ldrh	r3, [r7, #8]
 8009fd0:	9300      	str	r3, [sp, #0]
 8009fd2:	4613      	mov	r3, r2
 8009fd4:	224b      	movs	r2, #75	; 0x4b
 8009fd6:	2116      	movs	r1, #22
 8009fd8:	f7f8 fe59 	bl	8002c8e <GameObject_Bullet_Init>
		1,
		1, 2,
		Img_RoyalCoin,
		false
	);
}
 8009fdc:	bf00      	nop
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	200007b8 	.word	0x200007b8

08009fe8 <RoyalCoin_OnCreate>:

void RoyalCoin_OnCreate(RoyalCoin_GameObject_Bullet* self)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
	GameObject_Bullet_OnCreate(&self->base);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7f8 fe77 	bl	8002ce6 <GameObject_Bullet_OnCreate>
}
 8009ff8:	bf00      	nop
 8009ffa:	3708      	adds	r7, #8
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <RoyalCoin_OnUpdate>:

void RoyalCoin_OnUpdate(RoyalCoin_GameObject_Bullet* self)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b082      	sub	sp, #8
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
	GameObject_Bullet_OnUpdate(&self->base);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7f8 fe77 	bl	8002cfe <GameObject_Bullet_OnUpdate>
}
 800a010:	bf00      	nop
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <RoyalCoin_OnDestroy>:

void RoyalCoin_OnDestroy(RoyalCoin_GameObject_Bullet* self)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
	free(self);
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 fbcd 	bl	800a7c0 <free>
}
 800a026:	bf00      	nop
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <RoyalCoin_OnRender>:

void RoyalCoin_OnRender(RoyalCoin_GameObject_Bullet* self, Color** screen)
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b082      	sub	sp, #8
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
 800a036:	6039      	str	r1, [r7, #0]
	GameObject_Bullet_OnRender(&self->base, screen);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6839      	ldr	r1, [r7, #0]
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7f8 fe78 	bl	8002d32 <GameObject_Bullet_OnRender>
}
 800a042:	bf00      	nop
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
	...

0800a04c <Demo4_OnLoop_1>:
#include <stdio.h>
#include <string.h>


void Demo4_OnLoop_1()
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b08a      	sub	sp, #40	; 0x28
 800a050:	af02      	add	r7, sp, #8
	static int x[] = {10, 50,  20, 60};
	static int y[] = {10, 10,  20, 20};
	static int index = 0;
	if (!(GetTime() % 20) && GetTime() <= 80)
 800a052:	f000 faff 	bl	800a654 <GetTime>
 800a056:	4601      	mov	r1, r0
 800a058:	4b58      	ldr	r3, [pc, #352]	; (800a1bc <Demo4_OnLoop_1+0x170>)
 800a05a:	fb83 2301 	smull	r2, r3, r3, r1
 800a05e:	10da      	asrs	r2, r3, #3
 800a060:	17cb      	asrs	r3, r1, #31
 800a062:	1ad2      	subs	r2, r2, r3
 800a064:	4613      	mov	r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	4413      	add	r3, r2
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	1aca      	subs	r2, r1, r3
 800a06e:	2a00      	cmp	r2, #0
 800a070:	d133      	bne.n	800a0da <Demo4_OnLoop_1+0x8e>
 800a072:	f000 faef 	bl	800a654 <GetTime>
 800a076:	4603      	mov	r3, r0
 800a078:	2b50      	cmp	r3, #80	; 0x50
 800a07a:	dc2e      	bgt.n	800a0da <Demo4_OnLoop_1+0x8e>
	{
		GameEvent* event;
		Demo2_GameObject_Enemy* enemy = malloc(sizeof(Demo2_GameObject_Enemy));
 800a07c:	2024      	movs	r0, #36	; 0x24
 800a07e:	f000 fb97 	bl	800a7b0 <malloc>
 800a082:	4603      	mov	r3, r0
 800a084:	61fb      	str	r3, [r7, #28]
		printlnf("enemy pointer: %d", enemy);
 800a086:	69f9      	ldr	r1, [r7, #28]
 800a088:	484d      	ldr	r0, [pc, #308]	; (800a1c0 <Demo4_OnLoop_1+0x174>)
 800a08a:	f7fe fdc1 	bl	8008c10 <printlnf>
		Demo2_Init(
			enemy, 20,
			x[index], y[index],
 800a08e:	4b4d      	ldr	r3, [pc, #308]	; (800a1c4 <Demo4_OnLoop_1+0x178>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a4d      	ldr	r2, [pc, #308]	; (800a1c8 <Demo4_OnLoop_1+0x17c>)
 800a094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		Demo2_Init(
 800a098:	b299      	uxth	r1, r3
			x[index], y[index],
 800a09a:	4b4a      	ldr	r3, [pc, #296]	; (800a1c4 <Demo4_OnLoop_1+0x178>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a4b      	ldr	r2, [pc, #300]	; (800a1cc <Demo4_OnLoop_1+0x180>)
 800a0a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		Demo2_Init(
 800a0a4:	b29a      	uxth	r2, r3
 800a0a6:	2302      	movs	r3, #2
 800a0a8:	9300      	str	r3, [sp, #0]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	460a      	mov	r2, r1
 800a0ae:	2114      	movs	r1, #20
 800a0b0:	69f8      	ldr	r0, [r7, #28]
 800a0b2:	f7ff f81d 	bl	80090f0 <Demo2_Init>
			2
		);
		index++;
 800a0b6:	4b43      	ldr	r3, [pc, #268]	; (800a1c4 <Demo4_OnLoop_1+0x178>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	4a41      	ldr	r2, [pc, #260]	; (800a1c4 <Demo4_OnLoop_1+0x178>)
 800a0be:	6013      	str	r3, [r2, #0]
		event = RegistGameEvent(
 800a0c0:	4b43      	ldr	r3, [pc, #268]	; (800a1d0 <Demo4_OnLoop_1+0x184>)
 800a0c2:	9300      	str	r3, [sp, #0]
 800a0c4:	4b43      	ldr	r3, [pc, #268]	; (800a1d4 <Demo4_OnLoop_1+0x188>)
 800a0c6:	4a44      	ldr	r2, [pc, #272]	; (800a1d8 <Demo4_OnLoop_1+0x18c>)
 800a0c8:	4944      	ldr	r1, [pc, #272]	; (800a1dc <Demo4_OnLoop_1+0x190>)
 800a0ca:	69f8      	ldr	r0, [r7, #28]
 800a0cc:	f7f8 fd34 	bl	8002b38 <RegistGameEvent>
 800a0d0:	61b8      	str	r0, [r7, #24]
			enemy,
			Demo2_OnCreate, Demo2_OnUpdate,
			Demo2_OnDestroy, Demo2_OnRender
		);
		Push(&Engine_EnemyEvents, event);
 800a0d2:	69b9      	ldr	r1, [r7, #24]
 800a0d4:	4842      	ldr	r0, [pc, #264]	; (800a1e0 <Demo4_OnLoop_1+0x194>)
 800a0d6:	f000 f8ed 	bl	800a2b4 <Push>
	}

	if (GetTime() > 200 && !(GetTime()%20) && GetTime() < 600)
 800a0da:	f000 fabb 	bl	800a654 <GetTime>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2bc8      	cmp	r3, #200	; 0xc8
 800a0e2:	dd28      	ble.n	800a136 <Demo4_OnLoop_1+0xea>
 800a0e4:	f000 fab6 	bl	800a654 <GetTime>
 800a0e8:	4601      	mov	r1, r0
 800a0ea:	4b34      	ldr	r3, [pc, #208]	; (800a1bc <Demo4_OnLoop_1+0x170>)
 800a0ec:	fb83 2301 	smull	r2, r3, r3, r1
 800a0f0:	10da      	asrs	r2, r3, #3
 800a0f2:	17cb      	asrs	r3, r1, #31
 800a0f4:	1ad2      	subs	r2, r2, r3
 800a0f6:	4613      	mov	r3, r2
 800a0f8:	009b      	lsls	r3, r3, #2
 800a0fa:	4413      	add	r3, r2
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	1aca      	subs	r2, r1, r3
 800a100:	2a00      	cmp	r2, #0
 800a102:	d118      	bne.n	800a136 <Demo4_OnLoop_1+0xea>
 800a104:	f000 faa6 	bl	800a654 <GetTime>
 800a108:	4603      	mov	r3, r0
 800a10a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a10e:	da12      	bge.n	800a136 <Demo4_OnLoop_1+0xea>
	{
		Goast_GameObject_Enemy* goast = Goast_Init(60, 10, 0);
 800a110:	2200      	movs	r2, #0
 800a112:	210a      	movs	r1, #10
 800a114:	203c      	movs	r0, #60	; 0x3c
 800a116:	f7ff fbd9 	bl	80098cc <Goast_Init>
 800a11a:	6178      	str	r0, [r7, #20]
		GameEvent* event = RegistGameEvent(
 800a11c:	4b31      	ldr	r3, [pc, #196]	; (800a1e4 <Demo4_OnLoop_1+0x198>)
 800a11e:	9300      	str	r3, [sp, #0]
 800a120:	4b31      	ldr	r3, [pc, #196]	; (800a1e8 <Demo4_OnLoop_1+0x19c>)
 800a122:	4a32      	ldr	r2, [pc, #200]	; (800a1ec <Demo4_OnLoop_1+0x1a0>)
 800a124:	4932      	ldr	r1, [pc, #200]	; (800a1f0 <Demo4_OnLoop_1+0x1a4>)
 800a126:	6978      	ldr	r0, [r7, #20]
 800a128:	f7f8 fd06 	bl	8002b38 <RegistGameEvent>
 800a12c:	6138      	str	r0, [r7, #16]
			goast,
			Goast_OnCreate, Goast_OnUpdate,
			Goast_OnDestroy, Goast_OnRender
		);
		Push(&Engine_EnemyEvents, event);
 800a12e:	6939      	ldr	r1, [r7, #16]
 800a130:	482b      	ldr	r0, [pc, #172]	; (800a1e0 <Demo4_OnLoop_1+0x194>)
 800a132:	f000 f8bf 	bl	800a2b4 <Push>
	}
	if (GetTime() > 400 && !(GetTime()%20))
 800a136:	f000 fa8d 	bl	800a654 <GetTime>
 800a13a:	4603      	mov	r3, r0
 800a13c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800a140:	dd22      	ble.n	800a188 <Demo4_OnLoop_1+0x13c>
 800a142:	f000 fa87 	bl	800a654 <GetTime>
 800a146:	4601      	mov	r1, r0
 800a148:	4b1c      	ldr	r3, [pc, #112]	; (800a1bc <Demo4_OnLoop_1+0x170>)
 800a14a:	fb83 2301 	smull	r2, r3, r3, r1
 800a14e:	10da      	asrs	r2, r3, #3
 800a150:	17cb      	asrs	r3, r1, #31
 800a152:	1ad2      	subs	r2, r2, r3
 800a154:	4613      	mov	r3, r2
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	4413      	add	r3, r2
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	1aca      	subs	r2, r1, r3
 800a15e:	2a00      	cmp	r2, #0
 800a160:	d112      	bne.n	800a188 <Demo4_OnLoop_1+0x13c>
		{
			Goast_GameObject_Enemy* goast = Goast_Init(10, 10, 1);
 800a162:	2201      	movs	r2, #1
 800a164:	210a      	movs	r1, #10
 800a166:	200a      	movs	r0, #10
 800a168:	f7ff fbb0 	bl	80098cc <Goast_Init>
 800a16c:	60f8      	str	r0, [r7, #12]
			GameEvent* event = RegistGameEvent(
 800a16e:	4b1d      	ldr	r3, [pc, #116]	; (800a1e4 <Demo4_OnLoop_1+0x198>)
 800a170:	9300      	str	r3, [sp, #0]
 800a172:	4b1d      	ldr	r3, [pc, #116]	; (800a1e8 <Demo4_OnLoop_1+0x19c>)
 800a174:	4a1d      	ldr	r2, [pc, #116]	; (800a1ec <Demo4_OnLoop_1+0x1a0>)
 800a176:	491e      	ldr	r1, [pc, #120]	; (800a1f0 <Demo4_OnLoop_1+0x1a4>)
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f7f8 fcdd 	bl	8002b38 <RegistGameEvent>
 800a17e:	60b8      	str	r0, [r7, #8]
				goast,
				Goast_OnCreate, Goast_OnUpdate,
				Goast_OnDestroy, Goast_OnRender
			);
			Push(&Engine_EnemyEvents, event);
 800a180:	68b9      	ldr	r1, [r7, #8]
 800a182:	4817      	ldr	r0, [pc, #92]	; (800a1e0 <Demo4_OnLoop_1+0x194>)
 800a184:	f000 f896 	bl	800a2b4 <Push>
		}
	
	if (GetTime() == 600)
 800a188:	f000 fa64 	bl	800a654 <GetTime>
 800a18c:	4603      	mov	r3, r0
 800a18e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800a192:	d10f      	bne.n	800a1b4 <Demo4_OnLoop_1+0x168>
	{
		GameEvent* event;
		Flandre_GameObject_Enemy* flandre = Flandre_Init();
 800a194:	f7ff fac8 	bl	8009728 <Flandre_Init>
 800a198:	6078      	str	r0, [r7, #4]
		event = RegistGameEvent(
 800a19a:	4b16      	ldr	r3, [pc, #88]	; (800a1f4 <Demo4_OnLoop_1+0x1a8>)
 800a19c:	9300      	str	r3, [sp, #0]
 800a19e:	4b16      	ldr	r3, [pc, #88]	; (800a1f8 <Demo4_OnLoop_1+0x1ac>)
 800a1a0:	4a16      	ldr	r2, [pc, #88]	; (800a1fc <Demo4_OnLoop_1+0x1b0>)
 800a1a2:	4917      	ldr	r1, [pc, #92]	; (800a200 <Demo4_OnLoop_1+0x1b4>)
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f7f8 fcc7 	bl	8002b38 <RegistGameEvent>
 800a1aa:	6038      	str	r0, [r7, #0]
			flandre,
			Flandre_OnCreate, Flandre_OnUpdate,
			Flandre_OnDestroy, Flandre_OnRender
		);
		Push(&Engine_EnemyEvents, event);
 800a1ac:	6839      	ldr	r1, [r7, #0]
 800a1ae:	480c      	ldr	r0, [pc, #48]	; (800a1e0 <Demo4_OnLoop_1+0x194>)
 800a1b0:	f000 f880 	bl	800a2b4 <Push>
			Goast_OnCreate, Goast_OnUpdate,
			Goast_OnDestroy, Goast_OnRender
		);
		Push(&Engine_EnemyEvents, event);
	}*/
}
 800a1b4:	bf00      	nop
 800a1b6:	3720      	adds	r7, #32
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	66666667 	.word	0x66666667
 800a1c0:	0800c92c 	.word	0x0800c92c
 800a1c4:	200009d8 	.word	0x200009d8
 800a1c8:	200007bc 	.word	0x200007bc
 800a1cc:	200007cc 	.word	0x200007cc
 800a1d0:	08009223 	.word	0x08009223
 800a1d4:	0800920d 	.word	0x0800920d
 800a1d8:	08009155 	.word	0x08009155
 800a1dc:	08009131 	.word	0x08009131
 800a1e0:	20000a0c 	.word	0x20000a0c
 800a1e4:	08009b73 	.word	0x08009b73
 800a1e8:	08009b5d 	.word	0x08009b5d
 800a1ec:	0800993d 	.word	0x0800993d
 800a1f0:	08009925 	.word	0x08009925
 800a1f4:	080098b1 	.word	0x080098b1
 800a1f8:	08009891 	.word	0x08009891
 800a1fc:	08009795 	.word	0x08009795
 800a200:	0800977d 	.word	0x0800977d

0800a204 <Demo4_Routine>:

void Demo4_Routine(){
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af02      	add	r7, sp, #8

	GameEngineInit();
 800a20a:	f7f8 facd 	bl	80027a8 <GameEngineInit>

	// regester demo 1
	Remo_GameObject_Self* remo = malloc(sizeof(Remo_GameObject_Self));
 800a20e:	2028      	movs	r0, #40	; 0x28
 800a210:	f000 face 	bl	800a7b0 <malloc>
 800a214:	4603      	mov	r3, r0
 800a216:	607b      	str	r3, [r7, #4]
	Remo_Init(remo, 38, 85);
 800a218:	2255      	movs	r2, #85	; 0x55
 800a21a:	2126      	movs	r1, #38	; 0x26
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f7ff fcb7 	bl	8009b90 <Remo_Init>
	GameEvent* event = RegistGameEvent(
 800a222:	4b1b      	ldr	r3, [pc, #108]	; (800a290 <Demo4_Routine+0x8c>)
 800a224:	9300      	str	r3, [sp, #0]
 800a226:	4b1b      	ldr	r3, [pc, #108]	; (800a294 <Demo4_Routine+0x90>)
 800a228:	4a1b      	ldr	r2, [pc, #108]	; (800a298 <Demo4_Routine+0x94>)
 800a22a:	491c      	ldr	r1, [pc, #112]	; (800a29c <Demo4_Routine+0x98>)
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f7f8 fc83 	bl	8002b38 <RegistGameEvent>
 800a232:	6038      	str	r0, [r7, #0]
		remo, Remo_OnCreate, Remo_OnUpdate, Remo_OnDestroy, Remo_OnRender
	);

	Engine_SelfEvent = event;
 800a234:	4a1a      	ldr	r2, [pc, #104]	; (800a2a0 <Demo4_Routine+0x9c>)
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	6013      	str	r3, [r2, #0]

	GameEngineLoop(Demo4_OnLoop_1);
 800a23a:	481a      	ldr	r0, [pc, #104]	; (800a2a4 <Demo4_Routine+0xa0>)
 800a23c:	f7f8 fb18 	bl	8002870 <GameEngineLoop>

	LCD_Clear(GRAY);
 800a240:	f248 4030 	movw	r0, #33840	; 0x8430
 800a244:	f7fe f932 	bl	80084ac <LCD_Clear>
	BACK_COLOR = GRAY;
 800a248:	4b17      	ldr	r3, [pc, #92]	; (800a2a8 <Demo4_Routine+0xa4>)
 800a24a:	f248 4230 	movw	r2, #33840	; 0x8430
 800a24e:	801a      	strh	r2, [r3, #0]
	//LCD_DrawRectangle(30, 40, 230, 64);
	//LCD_Color_Fill(30, 40, 230, 64,WHITE);
	LCD_ShowString(30, 80, 200, 24, 24, (uint8_t*) "Congratulations ^_^");
 800a250:	4b16      	ldr	r3, [pc, #88]	; (800a2ac <Demo4_Routine+0xa8>)
 800a252:	9301      	str	r3, [sp, #4]
 800a254:	2318      	movs	r3, #24
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	2318      	movs	r3, #24
 800a25a:	22c8      	movs	r2, #200	; 0xc8
 800a25c:	2150      	movs	r1, #80	; 0x50
 800a25e:	201e      	movs	r0, #30
 800a260:	f7fe fbae 	bl	80089c0 <LCD_ShowString>

	LCD_Color_Fill(20, 110, 220, 112,BLACK);
 800a264:	2300      	movs	r3, #0
 800a266:	9300      	str	r3, [sp, #0]
 800a268:	2370      	movs	r3, #112	; 0x70
 800a26a:	22dc      	movs	r2, #220	; 0xdc
 800a26c:	216e      	movs	r1, #110	; 0x6e
 800a26e:	2014      	movs	r0, #20
 800a270:	f7fe fa0a 	bl	8008688 <LCD_Color_Fill>

	LCD_ShowString(80, 130, 140, 24, 14, (uint8_t*) "You Win!");
 800a274:	4b0e      	ldr	r3, [pc, #56]	; (800a2b0 <Demo4_Routine+0xac>)
 800a276:	9301      	str	r3, [sp, #4]
 800a278:	230e      	movs	r3, #14
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	2318      	movs	r3, #24
 800a27e:	228c      	movs	r2, #140	; 0x8c
 800a280:	2182      	movs	r1, #130	; 0x82
 800a282:	2050      	movs	r0, #80	; 0x50
 800a284:	f7fe fb9c 	bl	80089c0 <LCD_ShowString>
}
 800a288:	bf00      	nop
 800a28a:	3708      	adds	r7, #8
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	08009f81 	.word	0x08009f81
 800a294:	08009f55 	.word	0x08009f55
 800a298:	08009be9 	.word	0x08009be9
 800a29c:	08009bd1 	.word	0x08009bd1
 800a2a0:	20000a04 	.word	0x20000a04
 800a2a4:	0800a04d 	.word	0x0800a04d
 800a2a8:	20000006 	.word	0x20000006
 800a2ac:	0800c940 	.word	0x0800c940
 800a2b0:	0800c954 	.word	0x0800c954

0800a2b4 <Push>:
#include "LinkedList.h"

Node* Push(LinkedList *linked_list, void *object)
{
 800a2b4:	b590      	push	{r4, r7, lr}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
	Node *temp = linked_list->tail;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	60fb      	str	r3, [r7, #12]
	linked_list->tail->next = malloc(sizeof(Node));
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	685c      	ldr	r4, [r3, #4]
 800a2c8:	200c      	movs	r0, #12
 800a2ca:	f000 fa71 	bl	800a7b0 <malloc>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	60a3      	str	r3, [r4, #8]
	linked_list->tail = linked_list->tail->next;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	689a      	ldr	r2, [r3, #8]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	605a      	str	r2, [r3, #4]
	linked_list->tail->object = object;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	683a      	ldr	r2, [r7, #0]
 800a2e2:	601a      	str	r2, [r3, #0]
	linked_list->tail->prev = temp;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	68fa      	ldr	r2, [r7, #12]
 800a2ea:	605a      	str	r2, [r3, #4]
	linked_list->tail->next = NULL;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	609a      	str	r2, [r3, #8]
	
	return linked_list->tail;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	685b      	ldr	r3, [r3, #4]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3714      	adds	r7, #20
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd90      	pop	{r4, r7, pc}

0800a300 <RemoveNode>:

void RemoveNode(LinkedList *linked_list, Node *node)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
	if (!node->next)
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	689b      	ldr	r3, [r3, #8]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d108      	bne.n	800a324 <RemoveNode+0x24>
	{
		node->prev->next = NULL;
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	609a      	str	r2, [r3, #8]
		linked_list->tail = node->prev;
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	685a      	ldr	r2, [r3, #4]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	605a      	str	r2, [r3, #4]
 800a322:	e009      	b.n	800a338 <RemoveNode+0x38>
	}
	else
	{
		node->next->prev = node->prev;
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	683a      	ldr	r2, [r7, #0]
 800a32a:	6852      	ldr	r2, [r2, #4]
 800a32c:	605a      	str	r2, [r3, #4]
		node->prev->next = node->next;
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	683a      	ldr	r2, [r7, #0]
 800a334:	6892      	ldr	r2, [r2, #8]
 800a336:	609a      	str	r2, [r3, #8]
	}
	free(node);
 800a338:	6838      	ldr	r0, [r7, #0]
 800a33a:	f000 fa41 	bl	800a7c0 <free>
 800a33e:	bf00      	nop
 800a340:	3708      	adds	r7, #8
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
	...

0800a348 <os_rand>:
{
    Srandx =seek;
}

unsigned os_rand (void)
{
 800a348:	b480      	push	{r7}
 800a34a:	af00      	add	r7, sp, #0
    Srandx = Srandx *SrandK +SrandB ;
 800a34c:	4b08      	ldr	r3, [pc, #32]	; (800a370 <os_rand+0x28>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a08      	ldr	r2, [pc, #32]	; (800a374 <os_rand+0x2c>)
 800a352:	6812      	ldr	r2, [r2, #0]
 800a354:	fb02 f203 	mul.w	r2, r2, r3
 800a358:	4b07      	ldr	r3, [pc, #28]	; (800a378 <os_rand+0x30>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4413      	add	r3, r2
 800a35e:	4a04      	ldr	r2, [pc, #16]	; (800a370 <os_rand+0x28>)
 800a360:	6013      	str	r3, [r2, #0]
    return (Srandx>>1);
 800a362:	4b03      	ldr	r3, [pc, #12]	; (800a370 <os_rand+0x28>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	085b      	lsrs	r3, r3, #1
}
 800a368:	4618      	mov	r0, r3
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bc80      	pop	{r7}
 800a36e:	4770      	bx	lr
 800a370:	20000ab4 	.word	0x20000ab4
 800a374:	200007dc 	.word	0x200007dc
 800a378:	200007e0 	.word	0x200007e0

0800a37c <Render_Img>:
}

Color **__last_screen = NULL;

void Render_Img(float pos_x, float pos_y, uint16_t width, uint16_t height, Color* img, Color** screen)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b08e      	sub	sp, #56	; 0x38
 800a380:	af00      	add	r7, sp, #0
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	4611      	mov	r1, r2
 800a388:	461a      	mov	r2, r3
 800a38a:	460b      	mov	r3, r1
 800a38c:	80fb      	strh	r3, [r7, #6]
 800a38e:	4613      	mov	r3, r2
 800a390:	80bb      	strh	r3, [r7, #4]
	int sx, sy, ex, ey;
	uint16_t rsx, rsy, rex, rey;
	int i, j;
	Color c;

	sx = (int)pos_x - (width + 1) / 2;
 800a392:	68f8      	ldr	r0, [r7, #12]
 800a394:	f7f6 fed8 	bl	8001148 <__aeabi_f2iz>
 800a398:	4601      	mov	r1, r0
 800a39a:	88fb      	ldrh	r3, [r7, #6]
 800a39c:	3301      	adds	r3, #1
 800a39e:	0fda      	lsrs	r2, r3, #31
 800a3a0:	4413      	add	r3, r2
 800a3a2:	105b      	asrs	r3, r3, #1
 800a3a4:	425b      	negs	r3, r3
 800a3a6:	440b      	add	r3, r1
 800a3a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	sy = (int)pos_y - (height + 1) / 2;
 800a3aa:	68b8      	ldr	r0, [r7, #8]
 800a3ac:	f7f6 fecc 	bl	8001148 <__aeabi_f2iz>
 800a3b0:	4601      	mov	r1, r0
 800a3b2:	88bb      	ldrh	r3, [r7, #4]
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	0fda      	lsrs	r2, r3, #31
 800a3b8:	4413      	add	r3, r2
 800a3ba:	105b      	asrs	r3, r3, #1
 800a3bc:	425b      	negs	r3, r3
 800a3be:	440b      	add	r3, r1
 800a3c0:	62bb      	str	r3, [r7, #40]	; 0x28
	ex = (int)pos_x + width / 2;
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	f7f6 fec0 	bl	8001148 <__aeabi_f2iz>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	88fb      	ldrh	r3, [r7, #6]
 800a3cc:	085b      	lsrs	r3, r3, #1
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	4413      	add	r3, r2
 800a3d2:	627b      	str	r3, [r7, #36]	; 0x24
	ey = (int)pos_y + height / 2;
 800a3d4:	68b8      	ldr	r0, [r7, #8]
 800a3d6:	f7f6 feb7 	bl	8001148 <__aeabi_f2iz>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	88bb      	ldrh	r3, [r7, #4]
 800a3de:	085b      	lsrs	r3, r3, #1
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	4413      	add	r3, r2
 800a3e4:	623b      	str	r3, [r7, #32]

	rsx = (uint16_t)MIN(MAX(sx, 0), __WIDTH);
 800a3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e8:	2b4b      	cmp	r3, #75	; 0x4b
 800a3ea:	dc07      	bgt.n	800a3fc <Render_Img+0x80>
 800a3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	dd02      	ble.n	800a3f8 <Render_Img+0x7c>
 800a3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	e002      	b.n	800a3fe <Render_Img+0x82>
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	e000      	b.n	800a3fe <Render_Img+0x82>
 800a3fc:	234c      	movs	r3, #76	; 0x4c
 800a3fe:	83fb      	strh	r3, [r7, #30]
	rsy = (uint16_t)MIN(MAX(sy, 0), __HEIGHT);
 800a400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a402:	2b5f      	cmp	r3, #95	; 0x5f
 800a404:	dc07      	bgt.n	800a416 <Render_Img+0x9a>
 800a406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a408:	2b00      	cmp	r3, #0
 800a40a:	dd02      	ble.n	800a412 <Render_Img+0x96>
 800a40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40e:	b29b      	uxth	r3, r3
 800a410:	e002      	b.n	800a418 <Render_Img+0x9c>
 800a412:	2300      	movs	r3, #0
 800a414:	e000      	b.n	800a418 <Render_Img+0x9c>
 800a416:	2360      	movs	r3, #96	; 0x60
 800a418:	83bb      	strh	r3, [r7, #28]
	rex = (uint16_t)MAX(MIN(ex, __WIDTH), 0);
 800a41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	dd07      	ble.n	800a430 <Render_Img+0xb4>
 800a420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a422:	2b4b      	cmp	r3, #75	; 0x4b
 800a424:	dc02      	bgt.n	800a42c <Render_Img+0xb0>
 800a426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a428:	b29b      	uxth	r3, r3
 800a42a:	e002      	b.n	800a432 <Render_Img+0xb6>
 800a42c:	234c      	movs	r3, #76	; 0x4c
 800a42e:	e000      	b.n	800a432 <Render_Img+0xb6>
 800a430:	2300      	movs	r3, #0
 800a432:	837b      	strh	r3, [r7, #26]
	rey = (uint16_t)MAX(MIN(ey, __HEIGHT), 0);
 800a434:	6a3b      	ldr	r3, [r7, #32]
 800a436:	2b00      	cmp	r3, #0
 800a438:	dd07      	ble.n	800a44a <Render_Img+0xce>
 800a43a:	6a3b      	ldr	r3, [r7, #32]
 800a43c:	2b5f      	cmp	r3, #95	; 0x5f
 800a43e:	dc02      	bgt.n	800a446 <Render_Img+0xca>
 800a440:	6a3b      	ldr	r3, [r7, #32]
 800a442:	b29b      	uxth	r3, r3
 800a444:	e002      	b.n	800a44c <Render_Img+0xd0>
 800a446:	2360      	movs	r3, #96	; 0x60
 800a448:	e000      	b.n	800a44c <Render_Img+0xd0>
 800a44a:	2300      	movs	r3, #0
 800a44c:	833b      	strh	r3, [r7, #24]

	for (i = 0; i < rey - rsy; i++)
 800a44e:	2300      	movs	r3, #0
 800a450:	637b      	str	r3, [r7, #52]	; 0x34
 800a452:	e02c      	b.n	800a4ae <Render_Img+0x132>
		for (j = 0; j < rex - rsx; j++)
 800a454:	2300      	movs	r3, #0
 800a456:	633b      	str	r3, [r7, #48]	; 0x30
 800a458:	e020      	b.n	800a49c <Render_Img+0x120>
		{
			c = img[i * (rex - rsx) + j];
 800a45a:	8b7a      	ldrh	r2, [r7, #26]
 800a45c:	8bfb      	ldrh	r3, [r7, #30]
 800a45e:	1ad3      	subs	r3, r2, r3
 800a460:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a462:	fb02 f203 	mul.w	r2, r2, r3
 800a466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a468:	4413      	add	r3, r2
 800a46a:	005b      	lsls	r3, r3, #1
 800a46c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a46e:	4413      	add	r3, r2
 800a470:	881b      	ldrh	r3, [r3, #0]
 800a472:	82fb      	strh	r3, [r7, #22]
			if (c != TRANSPARENT)
 800a474:	8afb      	ldrh	r3, [r7, #22]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d00d      	beq.n	800a496 <Render_Img+0x11a>
			{
				screen[i + rsy][j + rsx] = c;
 800a47a:	8bba      	ldrh	r2, [r7, #28]
 800a47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a47e:	4413      	add	r3, r2
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a484:	4413      	add	r3, r2
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	8bf9      	ldrh	r1, [r7, #30]
 800a48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48c:	440b      	add	r3, r1
 800a48e:	005b      	lsls	r3, r3, #1
 800a490:	4413      	add	r3, r2
 800a492:	8afa      	ldrh	r2, [r7, #22]
 800a494:	801a      	strh	r2, [r3, #0]
		for (j = 0; j < rex - rsx; j++)
 800a496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a498:	3301      	adds	r3, #1
 800a49a:	633b      	str	r3, [r7, #48]	; 0x30
 800a49c:	8b7a      	ldrh	r2, [r7, #26]
 800a49e:	8bfb      	ldrh	r3, [r7, #30]
 800a4a0:	1ad3      	subs	r3, r2, r3
 800a4a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	dbd8      	blt.n	800a45a <Render_Img+0xde>
	for (i = 0; i < rey - rsy; i++)
 800a4a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	637b      	str	r3, [r7, #52]	; 0x34
 800a4ae:	8b3a      	ldrh	r2, [r7, #24]
 800a4b0:	8bbb      	ldrh	r3, [r7, #28]
 800a4b2:	1ad3      	subs	r3, r2, r3
 800a4b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	dbcc      	blt.n	800a454 <Render_Img+0xd8>
			}
		}
}
 800a4ba:	bf00      	nop
 800a4bc:	3738      	adds	r7, #56	; 0x38
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <Render>:

void inline Render(GameObject* game_object, Color** screen)
{
 800a4c2:	b5b0      	push	{r4, r5, r7, lr}
 800a4c4:	b084      	sub	sp, #16
 800a4c6:	af02      	add	r7, sp, #8
 800a4c8:	6078      	str	r0, [r7, #4]
 800a4ca:	6039      	str	r1, [r7, #0]
	Render_Img(
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6898      	ldr	r0, [r3, #8]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	68d9      	ldr	r1, [r3, #12]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	8a5c      	ldrh	r4, [r3, #18]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	8a9d      	ldrh	r5, [r3, #20]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	699b      	ldr	r3, [r3, #24]
 800a4e0:	683a      	ldr	r2, [r7, #0]
 800a4e2:	9201      	str	r2, [sp, #4]
 800a4e4:	9300      	str	r3, [sp, #0]
 800a4e6:	462b      	mov	r3, r5
 800a4e8:	4622      	mov	r2, r4
 800a4ea:	f7ff ff47 	bl	800a37c <Render_Img>
		game_object->pos_x, game_object->pos_y,
		game_object->width, game_object->height,
		game_object->img, screen
	);
}
 800a4ee:	bf00      	nop
 800a4f0:	3708      	adds	r7, #8
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bdb0      	pop	{r4, r5, r7, pc}

0800a4f6 <InitScreen>:

Color** InitScreen(Color** screen)
{
 800a4f6:	b590      	push	{r4, r7, lr}
 800a4f8:	b085      	sub	sp, #20
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
	uint16_t i, j;

	if(!screen)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d118      	bne.n	800a536 <InitScreen+0x40>
	{
		screen = calloc(sizeof(Color*), __HEIGHT);
 800a504:	2160      	movs	r1, #96	; 0x60
 800a506:	2004      	movs	r0, #4
 800a508:	f000 f90c 	bl	800a724 <calloc>
 800a50c:	4603      	mov	r3, r0
 800a50e:	607b      	str	r3, [r7, #4]

		for (i = 0; i < __HEIGHT; i++)
 800a510:	2300      	movs	r3, #0
 800a512:	81fb      	strh	r3, [r7, #14]
 800a514:	e00c      	b.n	800a530 <InitScreen+0x3a>
		screen[i] = calloc(sizeof(Color), __WIDTH);
 800a516:	89fb      	ldrh	r3, [r7, #14]
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	18d4      	adds	r4, r2, r3
 800a51e:	214c      	movs	r1, #76	; 0x4c
 800a520:	2002      	movs	r0, #2
 800a522:	f000 f8ff 	bl	800a724 <calloc>
 800a526:	4603      	mov	r3, r0
 800a528:	6023      	str	r3, [r4, #0]
		for (i = 0; i < __HEIGHT; i++)
 800a52a:	89fb      	ldrh	r3, [r7, #14]
 800a52c:	3301      	adds	r3, #1
 800a52e:	81fb      	strh	r3, [r7, #14]
 800a530:	89fb      	ldrh	r3, [r7, #14]
 800a532:	2b5f      	cmp	r3, #95	; 0x5f
 800a534:	d9ef      	bls.n	800a516 <InitScreen+0x20>
	}

	for (i = 0; i < __HEIGHT; i++)
 800a536:	2300      	movs	r3, #0
 800a538:	81fb      	strh	r3, [r7, #14]
 800a53a:	e015      	b.n	800a568 <InitScreen+0x72>
		for (j = 0; j < __WIDTH; j++)
 800a53c:	2300      	movs	r3, #0
 800a53e:	81bb      	strh	r3, [r7, #12]
 800a540:	e00c      	b.n	800a55c <InitScreen+0x66>
			screen[i][j] = TRANSPARENT;
 800a542:	89fb      	ldrh	r3, [r7, #14]
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	4413      	add	r3, r2
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	89bb      	ldrh	r3, [r7, #12]
 800a54e:	005b      	lsls	r3, r3, #1
 800a550:	4413      	add	r3, r2
 800a552:	2200      	movs	r2, #0
 800a554:	801a      	strh	r2, [r3, #0]
		for (j = 0; j < __WIDTH; j++)
 800a556:	89bb      	ldrh	r3, [r7, #12]
 800a558:	3301      	adds	r3, #1
 800a55a:	81bb      	strh	r3, [r7, #12]
 800a55c:	89bb      	ldrh	r3, [r7, #12]
 800a55e:	2b4b      	cmp	r3, #75	; 0x4b
 800a560:	d9ef      	bls.n	800a542 <InitScreen+0x4c>
	for (i = 0; i < __HEIGHT; i++)
 800a562:	89fb      	ldrh	r3, [r7, #14]
 800a564:	3301      	adds	r3, #1
 800a566:	81fb      	strh	r3, [r7, #14]
 800a568:	89fb      	ldrh	r3, [r7, #14]
 800a56a:	2b5f      	cmp	r3, #95	; 0x5f
 800a56c:	d9e6      	bls.n	800a53c <InitScreen+0x46>

	return screen;
 800a56e:	687b      	ldr	r3, [r7, #4]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3714      	adds	r7, #20
 800a574:	46bd      	mov	sp, r7
 800a576:	bd90      	pop	{r4, r7, pc}

0800a578 <Flush>:


Color** Flush(Color **screen)
{
 800a578:	b590      	push	{r4, r7, lr}
 800a57a:	b089      	sub	sp, #36	; 0x24
 800a57c:	af02      	add	r7, sp, #8
 800a57e:	6078      	str	r0, [r7, #4]
	uint16_t i, j;
	uint16_t sx, sy, ex, ey;
	Color **temp;
	// init
	if (!__last_screen)
 800a580:	4b32      	ldr	r3, [pc, #200]	; (800a64c <Flush+0xd4>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d10d      	bne.n	800a5a4 <Flush+0x2c>
	{
		LCD_Clear(BLACK);
 800a588:	2000      	movs	r0, #0
 800a58a:	f7fd ff8f 	bl	80084ac <LCD_Clear>
		__last_screen = InitScreen(__last_screen);
 800a58e:	4b2f      	ldr	r3, [pc, #188]	; (800a64c <Flush+0xd4>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4618      	mov	r0, r3
 800a594:	f7ff ffaf 	bl	800a4f6 <InitScreen>
 800a598:	4602      	mov	r2, r0
 800a59a:	4b2c      	ldr	r3, [pc, #176]	; (800a64c <Flush+0xd4>)
 800a59c:	601a      	str	r2, [r3, #0]
		println("Render init finished");
 800a59e:	482c      	ldr	r0, [pc, #176]	; (800a650 <Flush+0xd8>)
 800a5a0:	f7fe fb18 	bl	8008bd4 <println>
	}
	// flush
	for (i = 0; i < __HEIGHT; i++)
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	82fb      	strh	r3, [r7, #22]
 800a5a8:	e041      	b.n	800a62e <Flush+0xb6>
		for (j = 0; j < __WIDTH; j++)
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	82bb      	strh	r3, [r7, #20]
 800a5ae:	e038      	b.n	800a622 <Flush+0xaa>
		{
			if (screen[i][j] != __last_screen[i][j])
 800a5b0:	8afb      	ldrh	r3, [r7, #22]
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	8abb      	ldrh	r3, [r7, #20]
 800a5bc:	005b      	lsls	r3, r3, #1
 800a5be:	4413      	add	r3, r2
 800a5c0:	881a      	ldrh	r2, [r3, #0]
 800a5c2:	4b22      	ldr	r3, [pc, #136]	; (800a64c <Flush+0xd4>)
 800a5c4:	6819      	ldr	r1, [r3, #0]
 800a5c6:	8afb      	ldrh	r3, [r7, #22]
 800a5c8:	009b      	lsls	r3, r3, #2
 800a5ca:	440b      	add	r3, r1
 800a5cc:	6819      	ldr	r1, [r3, #0]
 800a5ce:	8abb      	ldrh	r3, [r7, #20]
 800a5d0:	005b      	lsls	r3, r3, #1
 800a5d2:	440b      	add	r3, r1
 800a5d4:	881b      	ldrh	r3, [r3, #0]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d020      	beq.n	800a61c <Flush+0xa4>
			{
				sx = j * __SCALE;
 800a5da:	8abb      	ldrh	r3, [r7, #20]
 800a5dc:	461a      	mov	r2, r3
 800a5de:	0052      	lsls	r2, r2, #1
 800a5e0:	4413      	add	r3, r2
 800a5e2:	81fb      	strh	r3, [r7, #14]
				sy = i * __SCALE;
 800a5e4:	8afb      	ldrh	r3, [r7, #22]
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	0052      	lsls	r2, r2, #1
 800a5ea:	4413      	add	r3, r2
 800a5ec:	81bb      	strh	r3, [r7, #12]
				ex = sx + __SCALE;
 800a5ee:	89fb      	ldrh	r3, [r7, #14]
 800a5f0:	3303      	adds	r3, #3
 800a5f2:	817b      	strh	r3, [r7, #10]
				ey = sy + __SCALE;
 800a5f4:	89bb      	ldrh	r3, [r7, #12]
 800a5f6:	3303      	adds	r3, #3
 800a5f8:	813b      	strh	r3, [r7, #8]
				LCD_Fill(sx, sy, ex, ey, screen[i][j]);
 800a5fa:	8afb      	ldrh	r3, [r7, #22]
 800a5fc:	009b      	lsls	r3, r3, #2
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	4413      	add	r3, r2
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	8abb      	ldrh	r3, [r7, #20]
 800a606:	005b      	lsls	r3, r3, #1
 800a608:	4413      	add	r3, r2
 800a60a:	881b      	ldrh	r3, [r3, #0]
 800a60c:	893c      	ldrh	r4, [r7, #8]
 800a60e:	897a      	ldrh	r2, [r7, #10]
 800a610:	89b9      	ldrh	r1, [r7, #12]
 800a612:	89f8      	ldrh	r0, [r7, #14]
 800a614:	9300      	str	r3, [sp, #0]
 800a616:	4623      	mov	r3, r4
 800a618:	f7fd ffaa 	bl	8008570 <LCD_Fill>
		for (j = 0; j < __WIDTH; j++)
 800a61c:	8abb      	ldrh	r3, [r7, #20]
 800a61e:	3301      	adds	r3, #1
 800a620:	82bb      	strh	r3, [r7, #20]
 800a622:	8abb      	ldrh	r3, [r7, #20]
 800a624:	2b4b      	cmp	r3, #75	; 0x4b
 800a626:	d9c3      	bls.n	800a5b0 <Flush+0x38>
	for (i = 0; i < __HEIGHT; i++)
 800a628:	8afb      	ldrh	r3, [r7, #22]
 800a62a:	3301      	adds	r3, #1
 800a62c:	82fb      	strh	r3, [r7, #22]
 800a62e:	8afb      	ldrh	r3, [r7, #22]
 800a630:	2b5f      	cmp	r3, #95	; 0x5f
 800a632:	d9ba      	bls.n	800a5aa <Flush+0x32>
			}
		}
	// cache
	temp = __last_screen;
 800a634:	4b05      	ldr	r3, [pc, #20]	; (800a64c <Flush+0xd4>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	613b      	str	r3, [r7, #16]
	__last_screen = screen;
 800a63a:	4a04      	ldr	r2, [pc, #16]	; (800a64c <Flush+0xd4>)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6013      	str	r3, [r2, #0]
	
	return temp;
 800a640:	693b      	ldr	r3, [r7, #16]
}
 800a642:	4618      	mov	r0, r3
 800a644:	371c      	adds	r7, #28
 800a646:	46bd      	mov	sp, r7
 800a648:	bd90      	pop	{r4, r7, pc}
 800a64a:	bf00      	nop
 800a64c:	200009dc 	.word	0x200009dc
 800a650:	0800c968 	.word	0x0800c968

0800a654 <GetTime>:
#include "Time.h"

int __Time_Last_Update;

int GetTime()
{
 800a654:	b480      	push	{r7}
 800a656:	af00      	add	r7, sp, #0
	return __Time_Last_Update + 1;
 800a658:	4b03      	ldr	r3, [pc, #12]	; (800a668 <GetTime+0x14>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	3301      	adds	r3, #1
}
 800a65e:	4618      	mov	r0, r3
 800a660:	46bd      	mov	sp, r7
 800a662:	bc80      	pop	{r7}
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	20000ab8 	.word	0x20000ab8

0800a66c <Time_OnStart>:

void Time_OnStart()
{
 800a66c:	b480      	push	{r7}
 800a66e:	af00      	add	r7, sp, #0
	__Time_Last_Update = 0;
 800a670:	4b03      	ldr	r3, [pc, #12]	; (800a680 <Time_OnStart+0x14>)
 800a672:	2200      	movs	r2, #0
 800a674:	601a      	str	r2, [r3, #0]
}
 800a676:	bf00      	nop
 800a678:	46bd      	mov	sp, r7
 800a67a:	bc80      	pop	{r7}
 800a67c:	4770      	bx	lr
 800a67e:	bf00      	nop
 800a680:	20000ab8 	.word	0x20000ab8

0800a684 <Time_OnUpdate>:

void Time_OnUpdate()
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
	float temp = GetTime();
 800a68a:	f7ff ffe3 	bl	800a654 <GetTime>
 800a68e:	4603      	mov	r3, r0
 800a690:	4618      	mov	r0, r3
 800a692:	f7f6 fb3f 	bl	8000d14 <__aeabi_i2f>
 800a696:	4603      	mov	r3, r0
 800a698:	607b      	str	r3, [r7, #4]
	delta_time = temp - __Time_Last_Update;
 800a69a:	4b0d      	ldr	r3, [pc, #52]	; (800a6d0 <Time_OnUpdate+0x4c>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7f6 fb38 	bl	8000d14 <__aeabi_i2f>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f7f6 fa7d 	bl	8000ba8 <__aeabi_fsub>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f7f6 fd49 	bl	8001148 <__aeabi_f2iz>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	4b06      	ldr	r3, [pc, #24]	; (800a6d4 <Time_OnUpdate+0x50>)
 800a6ba:	601a      	str	r2, [r3, #0]
	__Time_Last_Update = temp;
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f7f6 fd43 	bl	8001148 <__aeabi_f2iz>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	4b02      	ldr	r3, [pc, #8]	; (800a6d0 <Time_OnUpdate+0x4c>)
 800a6c6:	601a      	str	r2, [r3, #0]
}
 800a6c8:	bf00      	nop
 800a6ca:	3708      	adds	r7, #8
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	20000ab8 	.word	0x20000ab8
 800a6d4:	20000a18 	.word	0x20000a18

0800a6d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800a6d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800a6da:	e003      	b.n	800a6e4 <LoopCopyDataInit>

0800a6dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800a6dc:	4b0b      	ldr	r3, [pc, #44]	; (800a70c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800a6de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800a6e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800a6e2:	3104      	adds	r1, #4

0800a6e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800a6e4:	480a      	ldr	r0, [pc, #40]	; (800a710 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800a6e6:	4b0b      	ldr	r3, [pc, #44]	; (800a714 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800a6e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800a6ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800a6ec:	d3f6      	bcc.n	800a6dc <CopyDataInit>
  ldr r2, =_sbss
 800a6ee:	4a0a      	ldr	r2, [pc, #40]	; (800a718 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800a6f0:	e002      	b.n	800a6f8 <LoopFillZerobss>

0800a6f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800a6f2:	2300      	movs	r3, #0
  str r3, [r2], #4
 800a6f4:	f842 3b04 	str.w	r3, [r2], #4

0800a6f8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800a6f8:	4b08      	ldr	r3, [pc, #32]	; (800a71c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800a6fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 800a6fc:	d3f9      	bcc.n	800a6f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800a6fe:	f7fe fb59 	bl	8008db4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a702:	f000 f831 	bl	800a768 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800a706:	f7fe f9a9 	bl	8008a5c <main>
  bx lr
 800a70a:	4770      	bx	lr
  ldr r3, =_sidata
 800a70c:	0800e3c0 	.word	0x0800e3c0
  ldr r0, =_sdata
 800a710:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800a714:	200009b4 	.word	0x200009b4
  ldr r2, =_sbss
 800a718:	200009b4 	.word	0x200009b4
  ldr r3, = _ebss
 800a71c:	20000ac0 	.word	0x20000ac0

0800a720 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800a720:	e7fe      	b.n	800a720 <ADC1_2_IRQHandler>
	...

0800a724 <calloc>:
 800a724:	4b02      	ldr	r3, [pc, #8]	; (800a730 <calloc+0xc>)
 800a726:	460a      	mov	r2, r1
 800a728:	4601      	mov	r1, r0
 800a72a:	6818      	ldr	r0, [r3, #0]
 800a72c:	f000 b858 	b.w	800a7e0 <_calloc_r>
 800a730:	200007e4 	.word	0x200007e4

0800a734 <__errno>:
 800a734:	4b01      	ldr	r3, [pc, #4]	; (800a73c <__errno+0x8>)
 800a736:	6818      	ldr	r0, [r3, #0]
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	200007e4 	.word	0x200007e4

0800a740 <exit>:
 800a740:	b508      	push	{r3, lr}
 800a742:	4b07      	ldr	r3, [pc, #28]	; (800a760 <exit+0x20>)
 800a744:	4604      	mov	r4, r0
 800a746:	b113      	cbz	r3, 800a74e <exit+0xe>
 800a748:	2100      	movs	r1, #0
 800a74a:	f3af 8000 	nop.w
 800a74e:	4b05      	ldr	r3, [pc, #20]	; (800a764 <exit+0x24>)
 800a750:	6818      	ldr	r0, [r3, #0]
 800a752:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a754:	b103      	cbz	r3, 800a758 <exit+0x18>
 800a756:	4798      	blx	r3
 800a758:	4620      	mov	r0, r4
 800a75a:	f7fe faf5 	bl	8008d48 <_exit>
 800a75e:	bf00      	nop
 800a760:	00000000 	.word	0x00000000
 800a764:	0800e158 	.word	0x0800e158

0800a768 <__libc_init_array>:
 800a768:	b570      	push	{r4, r5, r6, lr}
 800a76a:	2500      	movs	r5, #0
 800a76c:	4e0c      	ldr	r6, [pc, #48]	; (800a7a0 <__libc_init_array+0x38>)
 800a76e:	4c0d      	ldr	r4, [pc, #52]	; (800a7a4 <__libc_init_array+0x3c>)
 800a770:	1ba4      	subs	r4, r4, r6
 800a772:	10a4      	asrs	r4, r4, #2
 800a774:	42a5      	cmp	r5, r4
 800a776:	d109      	bne.n	800a78c <__libc_init_array+0x24>
 800a778:	f002 f888 	bl	800c88c <_init>
 800a77c:	2500      	movs	r5, #0
 800a77e:	4e0a      	ldr	r6, [pc, #40]	; (800a7a8 <__libc_init_array+0x40>)
 800a780:	4c0a      	ldr	r4, [pc, #40]	; (800a7ac <__libc_init_array+0x44>)
 800a782:	1ba4      	subs	r4, r4, r6
 800a784:	10a4      	asrs	r4, r4, #2
 800a786:	42a5      	cmp	r5, r4
 800a788:	d105      	bne.n	800a796 <__libc_init_array+0x2e>
 800a78a:	bd70      	pop	{r4, r5, r6, pc}
 800a78c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a790:	4798      	blx	r3
 800a792:	3501      	adds	r5, #1
 800a794:	e7ee      	b.n	800a774 <__libc_init_array+0xc>
 800a796:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a79a:	4798      	blx	r3
 800a79c:	3501      	adds	r5, #1
 800a79e:	e7f2      	b.n	800a786 <__libc_init_array+0x1e>
 800a7a0:	0800e3b8 	.word	0x0800e3b8
 800a7a4:	0800e3b8 	.word	0x0800e3b8
 800a7a8:	0800e3b8 	.word	0x0800e3b8
 800a7ac:	0800e3bc 	.word	0x0800e3bc

0800a7b0 <malloc>:
 800a7b0:	4b02      	ldr	r3, [pc, #8]	; (800a7bc <malloc+0xc>)
 800a7b2:	4601      	mov	r1, r0
 800a7b4:	6818      	ldr	r0, [r3, #0]
 800a7b6:	f000 b86d 	b.w	800a894 <_malloc_r>
 800a7ba:	bf00      	nop
 800a7bc:	200007e4 	.word	0x200007e4

0800a7c0 <free>:
 800a7c0:	4b02      	ldr	r3, [pc, #8]	; (800a7cc <free+0xc>)
 800a7c2:	4601      	mov	r1, r0
 800a7c4:	6818      	ldr	r0, [r3, #0]
 800a7c6:	f000 b819 	b.w	800a7fc <_free_r>
 800a7ca:	bf00      	nop
 800a7cc:	200007e4 	.word	0x200007e4

0800a7d0 <memset>:
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	4402      	add	r2, r0
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d100      	bne.n	800a7da <memset+0xa>
 800a7d8:	4770      	bx	lr
 800a7da:	f803 1b01 	strb.w	r1, [r3], #1
 800a7de:	e7f9      	b.n	800a7d4 <memset+0x4>

0800a7e0 <_calloc_r>:
 800a7e0:	b538      	push	{r3, r4, r5, lr}
 800a7e2:	fb02 f401 	mul.w	r4, r2, r1
 800a7e6:	4621      	mov	r1, r4
 800a7e8:	f000 f854 	bl	800a894 <_malloc_r>
 800a7ec:	4605      	mov	r5, r0
 800a7ee:	b118      	cbz	r0, 800a7f8 <_calloc_r+0x18>
 800a7f0:	4622      	mov	r2, r4
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	f7ff ffec 	bl	800a7d0 <memset>
 800a7f8:	4628      	mov	r0, r5
 800a7fa:	bd38      	pop	{r3, r4, r5, pc}

0800a7fc <_free_r>:
 800a7fc:	b538      	push	{r3, r4, r5, lr}
 800a7fe:	4605      	mov	r5, r0
 800a800:	2900      	cmp	r1, #0
 800a802:	d043      	beq.n	800a88c <_free_r+0x90>
 800a804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a808:	1f0c      	subs	r4, r1, #4
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	bfb8      	it	lt
 800a80e:	18e4      	addlt	r4, r4, r3
 800a810:	f001 fba5 	bl	800bf5e <__malloc_lock>
 800a814:	4a1e      	ldr	r2, [pc, #120]	; (800a890 <_free_r+0x94>)
 800a816:	6813      	ldr	r3, [r2, #0]
 800a818:	4610      	mov	r0, r2
 800a81a:	b933      	cbnz	r3, 800a82a <_free_r+0x2e>
 800a81c:	6063      	str	r3, [r4, #4]
 800a81e:	6014      	str	r4, [r2, #0]
 800a820:	4628      	mov	r0, r5
 800a822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a826:	f001 bb9b 	b.w	800bf60 <__malloc_unlock>
 800a82a:	42a3      	cmp	r3, r4
 800a82c:	d90b      	bls.n	800a846 <_free_r+0x4a>
 800a82e:	6821      	ldr	r1, [r4, #0]
 800a830:	1862      	adds	r2, r4, r1
 800a832:	4293      	cmp	r3, r2
 800a834:	bf01      	itttt	eq
 800a836:	681a      	ldreq	r2, [r3, #0]
 800a838:	685b      	ldreq	r3, [r3, #4]
 800a83a:	1852      	addeq	r2, r2, r1
 800a83c:	6022      	streq	r2, [r4, #0]
 800a83e:	6063      	str	r3, [r4, #4]
 800a840:	6004      	str	r4, [r0, #0]
 800a842:	e7ed      	b.n	800a820 <_free_r+0x24>
 800a844:	4613      	mov	r3, r2
 800a846:	685a      	ldr	r2, [r3, #4]
 800a848:	b10a      	cbz	r2, 800a84e <_free_r+0x52>
 800a84a:	42a2      	cmp	r2, r4
 800a84c:	d9fa      	bls.n	800a844 <_free_r+0x48>
 800a84e:	6819      	ldr	r1, [r3, #0]
 800a850:	1858      	adds	r0, r3, r1
 800a852:	42a0      	cmp	r0, r4
 800a854:	d10b      	bne.n	800a86e <_free_r+0x72>
 800a856:	6820      	ldr	r0, [r4, #0]
 800a858:	4401      	add	r1, r0
 800a85a:	1858      	adds	r0, r3, r1
 800a85c:	4282      	cmp	r2, r0
 800a85e:	6019      	str	r1, [r3, #0]
 800a860:	d1de      	bne.n	800a820 <_free_r+0x24>
 800a862:	6810      	ldr	r0, [r2, #0]
 800a864:	6852      	ldr	r2, [r2, #4]
 800a866:	4401      	add	r1, r0
 800a868:	6019      	str	r1, [r3, #0]
 800a86a:	605a      	str	r2, [r3, #4]
 800a86c:	e7d8      	b.n	800a820 <_free_r+0x24>
 800a86e:	d902      	bls.n	800a876 <_free_r+0x7a>
 800a870:	230c      	movs	r3, #12
 800a872:	602b      	str	r3, [r5, #0]
 800a874:	e7d4      	b.n	800a820 <_free_r+0x24>
 800a876:	6820      	ldr	r0, [r4, #0]
 800a878:	1821      	adds	r1, r4, r0
 800a87a:	428a      	cmp	r2, r1
 800a87c:	bf01      	itttt	eq
 800a87e:	6811      	ldreq	r1, [r2, #0]
 800a880:	6852      	ldreq	r2, [r2, #4]
 800a882:	1809      	addeq	r1, r1, r0
 800a884:	6021      	streq	r1, [r4, #0]
 800a886:	6062      	str	r2, [r4, #4]
 800a888:	605c      	str	r4, [r3, #4]
 800a88a:	e7c9      	b.n	800a820 <_free_r+0x24>
 800a88c:	bd38      	pop	{r3, r4, r5, pc}
 800a88e:	bf00      	nop
 800a890:	200009e0 	.word	0x200009e0

0800a894 <_malloc_r>:
 800a894:	b570      	push	{r4, r5, r6, lr}
 800a896:	1ccd      	adds	r5, r1, #3
 800a898:	f025 0503 	bic.w	r5, r5, #3
 800a89c:	3508      	adds	r5, #8
 800a89e:	2d0c      	cmp	r5, #12
 800a8a0:	bf38      	it	cc
 800a8a2:	250c      	movcc	r5, #12
 800a8a4:	2d00      	cmp	r5, #0
 800a8a6:	4606      	mov	r6, r0
 800a8a8:	db01      	blt.n	800a8ae <_malloc_r+0x1a>
 800a8aa:	42a9      	cmp	r1, r5
 800a8ac:	d903      	bls.n	800a8b6 <_malloc_r+0x22>
 800a8ae:	230c      	movs	r3, #12
 800a8b0:	6033      	str	r3, [r6, #0]
 800a8b2:	2000      	movs	r0, #0
 800a8b4:	bd70      	pop	{r4, r5, r6, pc}
 800a8b6:	f001 fb52 	bl	800bf5e <__malloc_lock>
 800a8ba:	4a21      	ldr	r2, [pc, #132]	; (800a940 <_malloc_r+0xac>)
 800a8bc:	6814      	ldr	r4, [r2, #0]
 800a8be:	4621      	mov	r1, r4
 800a8c0:	b991      	cbnz	r1, 800a8e8 <_malloc_r+0x54>
 800a8c2:	4c20      	ldr	r4, [pc, #128]	; (800a944 <_malloc_r+0xb0>)
 800a8c4:	6823      	ldr	r3, [r4, #0]
 800a8c6:	b91b      	cbnz	r3, 800a8d0 <_malloc_r+0x3c>
 800a8c8:	4630      	mov	r0, r6
 800a8ca:	f000 fc8d 	bl	800b1e8 <_sbrk_r>
 800a8ce:	6020      	str	r0, [r4, #0]
 800a8d0:	4629      	mov	r1, r5
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	f000 fc88 	bl	800b1e8 <_sbrk_r>
 800a8d8:	1c43      	adds	r3, r0, #1
 800a8da:	d124      	bne.n	800a926 <_malloc_r+0x92>
 800a8dc:	230c      	movs	r3, #12
 800a8de:	4630      	mov	r0, r6
 800a8e0:	6033      	str	r3, [r6, #0]
 800a8e2:	f001 fb3d 	bl	800bf60 <__malloc_unlock>
 800a8e6:	e7e4      	b.n	800a8b2 <_malloc_r+0x1e>
 800a8e8:	680b      	ldr	r3, [r1, #0]
 800a8ea:	1b5b      	subs	r3, r3, r5
 800a8ec:	d418      	bmi.n	800a920 <_malloc_r+0x8c>
 800a8ee:	2b0b      	cmp	r3, #11
 800a8f0:	d90f      	bls.n	800a912 <_malloc_r+0x7e>
 800a8f2:	600b      	str	r3, [r1, #0]
 800a8f4:	18cc      	adds	r4, r1, r3
 800a8f6:	50cd      	str	r5, [r1, r3]
 800a8f8:	4630      	mov	r0, r6
 800a8fa:	f001 fb31 	bl	800bf60 <__malloc_unlock>
 800a8fe:	f104 000b 	add.w	r0, r4, #11
 800a902:	1d23      	adds	r3, r4, #4
 800a904:	f020 0007 	bic.w	r0, r0, #7
 800a908:	1ac3      	subs	r3, r0, r3
 800a90a:	d0d3      	beq.n	800a8b4 <_malloc_r+0x20>
 800a90c:	425a      	negs	r2, r3
 800a90e:	50e2      	str	r2, [r4, r3]
 800a910:	e7d0      	b.n	800a8b4 <_malloc_r+0x20>
 800a912:	684b      	ldr	r3, [r1, #4]
 800a914:	428c      	cmp	r4, r1
 800a916:	bf16      	itet	ne
 800a918:	6063      	strne	r3, [r4, #4]
 800a91a:	6013      	streq	r3, [r2, #0]
 800a91c:	460c      	movne	r4, r1
 800a91e:	e7eb      	b.n	800a8f8 <_malloc_r+0x64>
 800a920:	460c      	mov	r4, r1
 800a922:	6849      	ldr	r1, [r1, #4]
 800a924:	e7cc      	b.n	800a8c0 <_malloc_r+0x2c>
 800a926:	1cc4      	adds	r4, r0, #3
 800a928:	f024 0403 	bic.w	r4, r4, #3
 800a92c:	42a0      	cmp	r0, r4
 800a92e:	d005      	beq.n	800a93c <_malloc_r+0xa8>
 800a930:	1a21      	subs	r1, r4, r0
 800a932:	4630      	mov	r0, r6
 800a934:	f000 fc58 	bl	800b1e8 <_sbrk_r>
 800a938:	3001      	adds	r0, #1
 800a93a:	d0cf      	beq.n	800a8dc <_malloc_r+0x48>
 800a93c:	6025      	str	r5, [r4, #0]
 800a93e:	e7db      	b.n	800a8f8 <_malloc_r+0x64>
 800a940:	200009e0 	.word	0x200009e0
 800a944:	200009e4 	.word	0x200009e4

0800a948 <__cvt>:
 800a948:	2b00      	cmp	r3, #0
 800a94a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a94e:	461e      	mov	r6, r3
 800a950:	bfbb      	ittet	lt
 800a952:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800a956:	461e      	movlt	r6, r3
 800a958:	2300      	movge	r3, #0
 800a95a:	232d      	movlt	r3, #45	; 0x2d
 800a95c:	b088      	sub	sp, #32
 800a95e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a960:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800a964:	f027 0720 	bic.w	r7, r7, #32
 800a968:	2f46      	cmp	r7, #70	; 0x46
 800a96a:	4614      	mov	r4, r2
 800a96c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a96e:	700b      	strb	r3, [r1, #0]
 800a970:	d004      	beq.n	800a97c <__cvt+0x34>
 800a972:	2f45      	cmp	r7, #69	; 0x45
 800a974:	d100      	bne.n	800a978 <__cvt+0x30>
 800a976:	3501      	adds	r5, #1
 800a978:	2302      	movs	r3, #2
 800a97a:	e000      	b.n	800a97e <__cvt+0x36>
 800a97c:	2303      	movs	r3, #3
 800a97e:	aa07      	add	r2, sp, #28
 800a980:	9204      	str	r2, [sp, #16]
 800a982:	aa06      	add	r2, sp, #24
 800a984:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a988:	e9cd 3500 	strd	r3, r5, [sp]
 800a98c:	4622      	mov	r2, r4
 800a98e:	4633      	mov	r3, r6
 800a990:	f000 fd0a 	bl	800b3a8 <_dtoa_r>
 800a994:	2f47      	cmp	r7, #71	; 0x47
 800a996:	4680      	mov	r8, r0
 800a998:	d102      	bne.n	800a9a0 <__cvt+0x58>
 800a99a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a99c:	07db      	lsls	r3, r3, #31
 800a99e:	d526      	bpl.n	800a9ee <__cvt+0xa6>
 800a9a0:	2f46      	cmp	r7, #70	; 0x46
 800a9a2:	eb08 0905 	add.w	r9, r8, r5
 800a9a6:	d111      	bne.n	800a9cc <__cvt+0x84>
 800a9a8:	f898 3000 	ldrb.w	r3, [r8]
 800a9ac:	2b30      	cmp	r3, #48	; 0x30
 800a9ae:	d10a      	bne.n	800a9c6 <__cvt+0x7e>
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	4631      	mov	r1, r6
 800a9b8:	f7f6 f862 	bl	8000a80 <__aeabi_dcmpeq>
 800a9bc:	b918      	cbnz	r0, 800a9c6 <__cvt+0x7e>
 800a9be:	f1c5 0501 	rsb	r5, r5, #1
 800a9c2:	f8ca 5000 	str.w	r5, [sl]
 800a9c6:	f8da 3000 	ldr.w	r3, [sl]
 800a9ca:	4499      	add	r9, r3
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	4631      	mov	r1, r6
 800a9d4:	f7f6 f854 	bl	8000a80 <__aeabi_dcmpeq>
 800a9d8:	b938      	cbnz	r0, 800a9ea <__cvt+0xa2>
 800a9da:	2230      	movs	r2, #48	; 0x30
 800a9dc:	9b07      	ldr	r3, [sp, #28]
 800a9de:	454b      	cmp	r3, r9
 800a9e0:	d205      	bcs.n	800a9ee <__cvt+0xa6>
 800a9e2:	1c59      	adds	r1, r3, #1
 800a9e4:	9107      	str	r1, [sp, #28]
 800a9e6:	701a      	strb	r2, [r3, #0]
 800a9e8:	e7f8      	b.n	800a9dc <__cvt+0x94>
 800a9ea:	f8cd 901c 	str.w	r9, [sp, #28]
 800a9ee:	4640      	mov	r0, r8
 800a9f0:	9b07      	ldr	r3, [sp, #28]
 800a9f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a9f4:	eba3 0308 	sub.w	r3, r3, r8
 800a9f8:	6013      	str	r3, [r2, #0]
 800a9fa:	b008      	add	sp, #32
 800a9fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800aa00 <__exponent>:
 800aa00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa02:	2900      	cmp	r1, #0
 800aa04:	bfb4      	ite	lt
 800aa06:	232d      	movlt	r3, #45	; 0x2d
 800aa08:	232b      	movge	r3, #43	; 0x2b
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	bfb8      	it	lt
 800aa0e:	4249      	neglt	r1, r1
 800aa10:	2909      	cmp	r1, #9
 800aa12:	f804 2b02 	strb.w	r2, [r4], #2
 800aa16:	7043      	strb	r3, [r0, #1]
 800aa18:	dd21      	ble.n	800aa5e <__exponent+0x5e>
 800aa1a:	f10d 0307 	add.w	r3, sp, #7
 800aa1e:	461f      	mov	r7, r3
 800aa20:	260a      	movs	r6, #10
 800aa22:	fb91 f5f6 	sdiv	r5, r1, r6
 800aa26:	fb06 1115 	mls	r1, r6, r5, r1
 800aa2a:	2d09      	cmp	r5, #9
 800aa2c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800aa30:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aa34:	f103 32ff 	add.w	r2, r3, #4294967295
 800aa38:	4629      	mov	r1, r5
 800aa3a:	dc09      	bgt.n	800aa50 <__exponent+0x50>
 800aa3c:	3130      	adds	r1, #48	; 0x30
 800aa3e:	3b02      	subs	r3, #2
 800aa40:	f802 1c01 	strb.w	r1, [r2, #-1]
 800aa44:	42bb      	cmp	r3, r7
 800aa46:	4622      	mov	r2, r4
 800aa48:	d304      	bcc.n	800aa54 <__exponent+0x54>
 800aa4a:	1a10      	subs	r0, r2, r0
 800aa4c:	b003      	add	sp, #12
 800aa4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa50:	4613      	mov	r3, r2
 800aa52:	e7e6      	b.n	800aa22 <__exponent+0x22>
 800aa54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa58:	f804 2b01 	strb.w	r2, [r4], #1
 800aa5c:	e7f2      	b.n	800aa44 <__exponent+0x44>
 800aa5e:	2330      	movs	r3, #48	; 0x30
 800aa60:	4419      	add	r1, r3
 800aa62:	7083      	strb	r3, [r0, #2]
 800aa64:	1d02      	adds	r2, r0, #4
 800aa66:	70c1      	strb	r1, [r0, #3]
 800aa68:	e7ef      	b.n	800aa4a <__exponent+0x4a>
	...

0800aa6c <_printf_float>:
 800aa6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa70:	b091      	sub	sp, #68	; 0x44
 800aa72:	460c      	mov	r4, r1
 800aa74:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800aa76:	4693      	mov	fp, r2
 800aa78:	461e      	mov	r6, r3
 800aa7a:	4605      	mov	r5, r0
 800aa7c:	f001 fa48 	bl	800bf10 <_localeconv_r>
 800aa80:	6803      	ldr	r3, [r0, #0]
 800aa82:	4618      	mov	r0, r3
 800aa84:	9309      	str	r3, [sp, #36]	; 0x24
 800aa86:	f7f5 fbcf 	bl	8000228 <strlen>
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	930e      	str	r3, [sp, #56]	; 0x38
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	900a      	str	r0, [sp, #40]	; 0x28
 800aa92:	3307      	adds	r3, #7
 800aa94:	f023 0307 	bic.w	r3, r3, #7
 800aa98:	f103 0208 	add.w	r2, r3, #8
 800aa9c:	f894 8018 	ldrb.w	r8, [r4, #24]
 800aaa0:	f8d4 a000 	ldr.w	sl, [r4]
 800aaa4:	603a      	str	r2, [r7, #0]
 800aaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaaa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800aaae:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800aab2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aab6:	930b      	str	r3, [sp, #44]	; 0x2c
 800aab8:	f04f 32ff 	mov.w	r2, #4294967295
 800aabc:	4ba6      	ldr	r3, [pc, #664]	; (800ad58 <_printf_float+0x2ec>)
 800aabe:	4638      	mov	r0, r7
 800aac0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aac2:	f7f6 f80f 	bl	8000ae4 <__aeabi_dcmpun>
 800aac6:	bb68      	cbnz	r0, 800ab24 <_printf_float+0xb8>
 800aac8:	f04f 32ff 	mov.w	r2, #4294967295
 800aacc:	4ba2      	ldr	r3, [pc, #648]	; (800ad58 <_printf_float+0x2ec>)
 800aace:	4638      	mov	r0, r7
 800aad0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aad2:	f7f5 ffe9 	bl	8000aa8 <__aeabi_dcmple>
 800aad6:	bb28      	cbnz	r0, 800ab24 <_printf_float+0xb8>
 800aad8:	2200      	movs	r2, #0
 800aada:	2300      	movs	r3, #0
 800aadc:	4638      	mov	r0, r7
 800aade:	4649      	mov	r1, r9
 800aae0:	f7f5 ffd8 	bl	8000a94 <__aeabi_dcmplt>
 800aae4:	b110      	cbz	r0, 800aaec <_printf_float+0x80>
 800aae6:	232d      	movs	r3, #45	; 0x2d
 800aae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aaec:	4f9b      	ldr	r7, [pc, #620]	; (800ad5c <_printf_float+0x2f0>)
 800aaee:	4b9c      	ldr	r3, [pc, #624]	; (800ad60 <_printf_float+0x2f4>)
 800aaf0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aaf4:	bf98      	it	ls
 800aaf6:	461f      	movls	r7, r3
 800aaf8:	2303      	movs	r3, #3
 800aafa:	f04f 0900 	mov.w	r9, #0
 800aafe:	6123      	str	r3, [r4, #16]
 800ab00:	f02a 0304 	bic.w	r3, sl, #4
 800ab04:	6023      	str	r3, [r4, #0]
 800ab06:	9600      	str	r6, [sp, #0]
 800ab08:	465b      	mov	r3, fp
 800ab0a:	aa0f      	add	r2, sp, #60	; 0x3c
 800ab0c:	4621      	mov	r1, r4
 800ab0e:	4628      	mov	r0, r5
 800ab10:	f000 f9e2 	bl	800aed8 <_printf_common>
 800ab14:	3001      	adds	r0, #1
 800ab16:	f040 8090 	bne.w	800ac3a <_printf_float+0x1ce>
 800ab1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab1e:	b011      	add	sp, #68	; 0x44
 800ab20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab24:	463a      	mov	r2, r7
 800ab26:	464b      	mov	r3, r9
 800ab28:	4638      	mov	r0, r7
 800ab2a:	4649      	mov	r1, r9
 800ab2c:	f7f5 ffda 	bl	8000ae4 <__aeabi_dcmpun>
 800ab30:	b110      	cbz	r0, 800ab38 <_printf_float+0xcc>
 800ab32:	4f8c      	ldr	r7, [pc, #560]	; (800ad64 <_printf_float+0x2f8>)
 800ab34:	4b8c      	ldr	r3, [pc, #560]	; (800ad68 <_printf_float+0x2fc>)
 800ab36:	e7db      	b.n	800aaf0 <_printf_float+0x84>
 800ab38:	6863      	ldr	r3, [r4, #4]
 800ab3a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800ab3e:	1c59      	adds	r1, r3, #1
 800ab40:	a80d      	add	r0, sp, #52	; 0x34
 800ab42:	a90e      	add	r1, sp, #56	; 0x38
 800ab44:	d140      	bne.n	800abc8 <_printf_float+0x15c>
 800ab46:	2306      	movs	r3, #6
 800ab48:	6063      	str	r3, [r4, #4]
 800ab4a:	f04f 0c00 	mov.w	ip, #0
 800ab4e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800ab52:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800ab56:	6863      	ldr	r3, [r4, #4]
 800ab58:	6022      	str	r2, [r4, #0]
 800ab5a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800ab5e:	9300      	str	r3, [sp, #0]
 800ab60:	463a      	mov	r2, r7
 800ab62:	464b      	mov	r3, r9
 800ab64:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800ab68:	4628      	mov	r0, r5
 800ab6a:	f7ff feed 	bl	800a948 <__cvt>
 800ab6e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800ab72:	2b47      	cmp	r3, #71	; 0x47
 800ab74:	4607      	mov	r7, r0
 800ab76:	d109      	bne.n	800ab8c <_printf_float+0x120>
 800ab78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab7a:	1cd8      	adds	r0, r3, #3
 800ab7c:	db02      	blt.n	800ab84 <_printf_float+0x118>
 800ab7e:	6862      	ldr	r2, [r4, #4]
 800ab80:	4293      	cmp	r3, r2
 800ab82:	dd47      	ble.n	800ac14 <_printf_float+0x1a8>
 800ab84:	f1a8 0802 	sub.w	r8, r8, #2
 800ab88:	fa5f f888 	uxtb.w	r8, r8
 800ab8c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800ab90:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ab92:	d824      	bhi.n	800abde <_printf_float+0x172>
 800ab94:	3901      	subs	r1, #1
 800ab96:	4642      	mov	r2, r8
 800ab98:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ab9c:	910d      	str	r1, [sp, #52]	; 0x34
 800ab9e:	f7ff ff2f 	bl	800aa00 <__exponent>
 800aba2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aba4:	4681      	mov	r9, r0
 800aba6:	1813      	adds	r3, r2, r0
 800aba8:	2a01      	cmp	r2, #1
 800abaa:	6123      	str	r3, [r4, #16]
 800abac:	dc02      	bgt.n	800abb4 <_printf_float+0x148>
 800abae:	6822      	ldr	r2, [r4, #0]
 800abb0:	07d1      	lsls	r1, r2, #31
 800abb2:	d501      	bpl.n	800abb8 <_printf_float+0x14c>
 800abb4:	3301      	adds	r3, #1
 800abb6:	6123      	str	r3, [r4, #16]
 800abb8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d0a2      	beq.n	800ab06 <_printf_float+0x9a>
 800abc0:	232d      	movs	r3, #45	; 0x2d
 800abc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abc6:	e79e      	b.n	800ab06 <_printf_float+0x9a>
 800abc8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800abcc:	f000 816e 	beq.w	800aeac <_printf_float+0x440>
 800abd0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800abd4:	d1b9      	bne.n	800ab4a <_printf_float+0xde>
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d1b7      	bne.n	800ab4a <_printf_float+0xde>
 800abda:	2301      	movs	r3, #1
 800abdc:	e7b4      	b.n	800ab48 <_printf_float+0xdc>
 800abde:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800abe2:	d119      	bne.n	800ac18 <_printf_float+0x1ac>
 800abe4:	2900      	cmp	r1, #0
 800abe6:	6863      	ldr	r3, [r4, #4]
 800abe8:	dd0c      	ble.n	800ac04 <_printf_float+0x198>
 800abea:	6121      	str	r1, [r4, #16]
 800abec:	b913      	cbnz	r3, 800abf4 <_printf_float+0x188>
 800abee:	6822      	ldr	r2, [r4, #0]
 800abf0:	07d2      	lsls	r2, r2, #31
 800abf2:	d502      	bpl.n	800abfa <_printf_float+0x18e>
 800abf4:	3301      	adds	r3, #1
 800abf6:	440b      	add	r3, r1
 800abf8:	6123      	str	r3, [r4, #16]
 800abfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abfc:	f04f 0900 	mov.w	r9, #0
 800ac00:	65a3      	str	r3, [r4, #88]	; 0x58
 800ac02:	e7d9      	b.n	800abb8 <_printf_float+0x14c>
 800ac04:	b913      	cbnz	r3, 800ac0c <_printf_float+0x1a0>
 800ac06:	6822      	ldr	r2, [r4, #0]
 800ac08:	07d0      	lsls	r0, r2, #31
 800ac0a:	d501      	bpl.n	800ac10 <_printf_float+0x1a4>
 800ac0c:	3302      	adds	r3, #2
 800ac0e:	e7f3      	b.n	800abf8 <_printf_float+0x18c>
 800ac10:	2301      	movs	r3, #1
 800ac12:	e7f1      	b.n	800abf8 <_printf_float+0x18c>
 800ac14:	f04f 0867 	mov.w	r8, #103	; 0x67
 800ac18:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	db05      	blt.n	800ac2c <_printf_float+0x1c0>
 800ac20:	6822      	ldr	r2, [r4, #0]
 800ac22:	6123      	str	r3, [r4, #16]
 800ac24:	07d1      	lsls	r1, r2, #31
 800ac26:	d5e8      	bpl.n	800abfa <_printf_float+0x18e>
 800ac28:	3301      	adds	r3, #1
 800ac2a:	e7e5      	b.n	800abf8 <_printf_float+0x18c>
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	bfcc      	ite	gt
 800ac30:	2301      	movgt	r3, #1
 800ac32:	f1c3 0302 	rsble	r3, r3, #2
 800ac36:	4413      	add	r3, r2
 800ac38:	e7de      	b.n	800abf8 <_printf_float+0x18c>
 800ac3a:	6823      	ldr	r3, [r4, #0]
 800ac3c:	055a      	lsls	r2, r3, #21
 800ac3e:	d407      	bmi.n	800ac50 <_printf_float+0x1e4>
 800ac40:	6923      	ldr	r3, [r4, #16]
 800ac42:	463a      	mov	r2, r7
 800ac44:	4659      	mov	r1, fp
 800ac46:	4628      	mov	r0, r5
 800ac48:	47b0      	blx	r6
 800ac4a:	3001      	adds	r0, #1
 800ac4c:	d129      	bne.n	800aca2 <_printf_float+0x236>
 800ac4e:	e764      	b.n	800ab1a <_printf_float+0xae>
 800ac50:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800ac54:	f240 80d7 	bls.w	800ae06 <_printf_float+0x39a>
 800ac58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	2300      	movs	r3, #0
 800ac60:	f7f5 ff0e 	bl	8000a80 <__aeabi_dcmpeq>
 800ac64:	b388      	cbz	r0, 800acca <_printf_float+0x25e>
 800ac66:	2301      	movs	r3, #1
 800ac68:	4a40      	ldr	r2, [pc, #256]	; (800ad6c <_printf_float+0x300>)
 800ac6a:	4659      	mov	r1, fp
 800ac6c:	4628      	mov	r0, r5
 800ac6e:	47b0      	blx	r6
 800ac70:	3001      	adds	r0, #1
 800ac72:	f43f af52 	beq.w	800ab1a <_printf_float+0xae>
 800ac76:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	db02      	blt.n	800ac84 <_printf_float+0x218>
 800ac7e:	6823      	ldr	r3, [r4, #0]
 800ac80:	07d8      	lsls	r0, r3, #31
 800ac82:	d50e      	bpl.n	800aca2 <_printf_float+0x236>
 800ac84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac88:	4659      	mov	r1, fp
 800ac8a:	4628      	mov	r0, r5
 800ac8c:	47b0      	blx	r6
 800ac8e:	3001      	adds	r0, #1
 800ac90:	f43f af43 	beq.w	800ab1a <_printf_float+0xae>
 800ac94:	2700      	movs	r7, #0
 800ac96:	f104 081a 	add.w	r8, r4, #26
 800ac9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac9c:	3b01      	subs	r3, #1
 800ac9e:	42bb      	cmp	r3, r7
 800aca0:	dc09      	bgt.n	800acb6 <_printf_float+0x24a>
 800aca2:	6823      	ldr	r3, [r4, #0]
 800aca4:	079f      	lsls	r7, r3, #30
 800aca6:	f100 80fd 	bmi.w	800aea4 <_printf_float+0x438>
 800acaa:	68e0      	ldr	r0, [r4, #12]
 800acac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acae:	4298      	cmp	r0, r3
 800acb0:	bfb8      	it	lt
 800acb2:	4618      	movlt	r0, r3
 800acb4:	e733      	b.n	800ab1e <_printf_float+0xb2>
 800acb6:	2301      	movs	r3, #1
 800acb8:	4642      	mov	r2, r8
 800acba:	4659      	mov	r1, fp
 800acbc:	4628      	mov	r0, r5
 800acbe:	47b0      	blx	r6
 800acc0:	3001      	adds	r0, #1
 800acc2:	f43f af2a 	beq.w	800ab1a <_printf_float+0xae>
 800acc6:	3701      	adds	r7, #1
 800acc8:	e7e7      	b.n	800ac9a <_printf_float+0x22e>
 800acca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800accc:	2b00      	cmp	r3, #0
 800acce:	dc2b      	bgt.n	800ad28 <_printf_float+0x2bc>
 800acd0:	2301      	movs	r3, #1
 800acd2:	4a26      	ldr	r2, [pc, #152]	; (800ad6c <_printf_float+0x300>)
 800acd4:	4659      	mov	r1, fp
 800acd6:	4628      	mov	r0, r5
 800acd8:	47b0      	blx	r6
 800acda:	3001      	adds	r0, #1
 800acdc:	f43f af1d 	beq.w	800ab1a <_printf_float+0xae>
 800ace0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ace2:	b923      	cbnz	r3, 800acee <_printf_float+0x282>
 800ace4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ace6:	b913      	cbnz	r3, 800acee <_printf_float+0x282>
 800ace8:	6823      	ldr	r3, [r4, #0]
 800acea:	07d9      	lsls	r1, r3, #31
 800acec:	d5d9      	bpl.n	800aca2 <_printf_float+0x236>
 800acee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800acf2:	4659      	mov	r1, fp
 800acf4:	4628      	mov	r0, r5
 800acf6:	47b0      	blx	r6
 800acf8:	3001      	adds	r0, #1
 800acfa:	f43f af0e 	beq.w	800ab1a <_printf_float+0xae>
 800acfe:	f04f 0800 	mov.w	r8, #0
 800ad02:	f104 091a 	add.w	r9, r4, #26
 800ad06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad08:	425b      	negs	r3, r3
 800ad0a:	4543      	cmp	r3, r8
 800ad0c:	dc01      	bgt.n	800ad12 <_printf_float+0x2a6>
 800ad0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad10:	e797      	b.n	800ac42 <_printf_float+0x1d6>
 800ad12:	2301      	movs	r3, #1
 800ad14:	464a      	mov	r2, r9
 800ad16:	4659      	mov	r1, fp
 800ad18:	4628      	mov	r0, r5
 800ad1a:	47b0      	blx	r6
 800ad1c:	3001      	adds	r0, #1
 800ad1e:	f43f aefc 	beq.w	800ab1a <_printf_float+0xae>
 800ad22:	f108 0801 	add.w	r8, r8, #1
 800ad26:	e7ee      	b.n	800ad06 <_printf_float+0x29a>
 800ad28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	bfa8      	it	ge
 800ad30:	461a      	movge	r2, r3
 800ad32:	2a00      	cmp	r2, #0
 800ad34:	4690      	mov	r8, r2
 800ad36:	dd07      	ble.n	800ad48 <_printf_float+0x2dc>
 800ad38:	4613      	mov	r3, r2
 800ad3a:	4659      	mov	r1, fp
 800ad3c:	463a      	mov	r2, r7
 800ad3e:	4628      	mov	r0, r5
 800ad40:	47b0      	blx	r6
 800ad42:	3001      	adds	r0, #1
 800ad44:	f43f aee9 	beq.w	800ab1a <_printf_float+0xae>
 800ad48:	f104 031a 	add.w	r3, r4, #26
 800ad4c:	f04f 0a00 	mov.w	sl, #0
 800ad50:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800ad54:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad56:	e015      	b.n	800ad84 <_printf_float+0x318>
 800ad58:	7fefffff 	.word	0x7fefffff
 800ad5c:	0800e160 	.word	0x0800e160
 800ad60:	0800e15c 	.word	0x0800e15c
 800ad64:	0800e168 	.word	0x0800e168
 800ad68:	0800e164 	.word	0x0800e164
 800ad6c:	0800e16c 	.word	0x0800e16c
 800ad70:	2301      	movs	r3, #1
 800ad72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad74:	4659      	mov	r1, fp
 800ad76:	4628      	mov	r0, r5
 800ad78:	47b0      	blx	r6
 800ad7a:	3001      	adds	r0, #1
 800ad7c:	f43f aecd 	beq.w	800ab1a <_printf_float+0xae>
 800ad80:	f10a 0a01 	add.w	sl, sl, #1
 800ad84:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800ad88:	eba9 0308 	sub.w	r3, r9, r8
 800ad8c:	4553      	cmp	r3, sl
 800ad8e:	dcef      	bgt.n	800ad70 <_printf_float+0x304>
 800ad90:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ad94:	429a      	cmp	r2, r3
 800ad96:	444f      	add	r7, r9
 800ad98:	db14      	blt.n	800adc4 <_printf_float+0x358>
 800ad9a:	6823      	ldr	r3, [r4, #0]
 800ad9c:	07da      	lsls	r2, r3, #31
 800ad9e:	d411      	bmi.n	800adc4 <_printf_float+0x358>
 800ada0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ada2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ada4:	eba3 0209 	sub.w	r2, r3, r9
 800ada8:	eba3 0901 	sub.w	r9, r3, r1
 800adac:	4591      	cmp	r9, r2
 800adae:	bfa8      	it	ge
 800adb0:	4691      	movge	r9, r2
 800adb2:	f1b9 0f00 	cmp.w	r9, #0
 800adb6:	dc0d      	bgt.n	800add4 <_printf_float+0x368>
 800adb8:	2700      	movs	r7, #0
 800adba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800adbe:	f104 081a 	add.w	r8, r4, #26
 800adc2:	e018      	b.n	800adf6 <_printf_float+0x38a>
 800adc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800adc8:	4659      	mov	r1, fp
 800adca:	4628      	mov	r0, r5
 800adcc:	47b0      	blx	r6
 800adce:	3001      	adds	r0, #1
 800add0:	d1e6      	bne.n	800ada0 <_printf_float+0x334>
 800add2:	e6a2      	b.n	800ab1a <_printf_float+0xae>
 800add4:	464b      	mov	r3, r9
 800add6:	463a      	mov	r2, r7
 800add8:	4659      	mov	r1, fp
 800adda:	4628      	mov	r0, r5
 800addc:	47b0      	blx	r6
 800adde:	3001      	adds	r0, #1
 800ade0:	d1ea      	bne.n	800adb8 <_printf_float+0x34c>
 800ade2:	e69a      	b.n	800ab1a <_printf_float+0xae>
 800ade4:	2301      	movs	r3, #1
 800ade6:	4642      	mov	r2, r8
 800ade8:	4659      	mov	r1, fp
 800adea:	4628      	mov	r0, r5
 800adec:	47b0      	blx	r6
 800adee:	3001      	adds	r0, #1
 800adf0:	f43f ae93 	beq.w	800ab1a <_printf_float+0xae>
 800adf4:	3701      	adds	r7, #1
 800adf6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800adfa:	1a9b      	subs	r3, r3, r2
 800adfc:	eba3 0309 	sub.w	r3, r3, r9
 800ae00:	42bb      	cmp	r3, r7
 800ae02:	dcef      	bgt.n	800ade4 <_printf_float+0x378>
 800ae04:	e74d      	b.n	800aca2 <_printf_float+0x236>
 800ae06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae08:	2a01      	cmp	r2, #1
 800ae0a:	dc01      	bgt.n	800ae10 <_printf_float+0x3a4>
 800ae0c:	07db      	lsls	r3, r3, #31
 800ae0e:	d538      	bpl.n	800ae82 <_printf_float+0x416>
 800ae10:	2301      	movs	r3, #1
 800ae12:	463a      	mov	r2, r7
 800ae14:	4659      	mov	r1, fp
 800ae16:	4628      	mov	r0, r5
 800ae18:	47b0      	blx	r6
 800ae1a:	3001      	adds	r0, #1
 800ae1c:	f43f ae7d 	beq.w	800ab1a <_printf_float+0xae>
 800ae20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae24:	4659      	mov	r1, fp
 800ae26:	4628      	mov	r0, r5
 800ae28:	47b0      	blx	r6
 800ae2a:	3001      	adds	r0, #1
 800ae2c:	f107 0701 	add.w	r7, r7, #1
 800ae30:	f43f ae73 	beq.w	800ab1a <_printf_float+0xae>
 800ae34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f103 38ff 	add.w	r8, r3, #4294967295
 800ae40:	2300      	movs	r3, #0
 800ae42:	f7f5 fe1d 	bl	8000a80 <__aeabi_dcmpeq>
 800ae46:	b9c0      	cbnz	r0, 800ae7a <_printf_float+0x40e>
 800ae48:	4643      	mov	r3, r8
 800ae4a:	463a      	mov	r2, r7
 800ae4c:	4659      	mov	r1, fp
 800ae4e:	4628      	mov	r0, r5
 800ae50:	47b0      	blx	r6
 800ae52:	3001      	adds	r0, #1
 800ae54:	d10d      	bne.n	800ae72 <_printf_float+0x406>
 800ae56:	e660      	b.n	800ab1a <_printf_float+0xae>
 800ae58:	2301      	movs	r3, #1
 800ae5a:	4642      	mov	r2, r8
 800ae5c:	4659      	mov	r1, fp
 800ae5e:	4628      	mov	r0, r5
 800ae60:	47b0      	blx	r6
 800ae62:	3001      	adds	r0, #1
 800ae64:	f43f ae59 	beq.w	800ab1a <_printf_float+0xae>
 800ae68:	3701      	adds	r7, #1
 800ae6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae6c:	3b01      	subs	r3, #1
 800ae6e:	42bb      	cmp	r3, r7
 800ae70:	dcf2      	bgt.n	800ae58 <_printf_float+0x3ec>
 800ae72:	464b      	mov	r3, r9
 800ae74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ae78:	e6e4      	b.n	800ac44 <_printf_float+0x1d8>
 800ae7a:	2700      	movs	r7, #0
 800ae7c:	f104 081a 	add.w	r8, r4, #26
 800ae80:	e7f3      	b.n	800ae6a <_printf_float+0x3fe>
 800ae82:	2301      	movs	r3, #1
 800ae84:	e7e1      	b.n	800ae4a <_printf_float+0x3de>
 800ae86:	2301      	movs	r3, #1
 800ae88:	4642      	mov	r2, r8
 800ae8a:	4659      	mov	r1, fp
 800ae8c:	4628      	mov	r0, r5
 800ae8e:	47b0      	blx	r6
 800ae90:	3001      	adds	r0, #1
 800ae92:	f43f ae42 	beq.w	800ab1a <_printf_float+0xae>
 800ae96:	3701      	adds	r7, #1
 800ae98:	68e3      	ldr	r3, [r4, #12]
 800ae9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ae9c:	1a9b      	subs	r3, r3, r2
 800ae9e:	42bb      	cmp	r3, r7
 800aea0:	dcf1      	bgt.n	800ae86 <_printf_float+0x41a>
 800aea2:	e702      	b.n	800acaa <_printf_float+0x23e>
 800aea4:	2700      	movs	r7, #0
 800aea6:	f104 0819 	add.w	r8, r4, #25
 800aeaa:	e7f5      	b.n	800ae98 <_printf_float+0x42c>
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	f43f ae94 	beq.w	800abda <_printf_float+0x16e>
 800aeb2:	f04f 0c00 	mov.w	ip, #0
 800aeb6:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800aeba:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800aebe:	6022      	str	r2, [r4, #0]
 800aec0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800aec4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800aec8:	9300      	str	r3, [sp, #0]
 800aeca:	463a      	mov	r2, r7
 800aecc:	464b      	mov	r3, r9
 800aece:	4628      	mov	r0, r5
 800aed0:	f7ff fd3a 	bl	800a948 <__cvt>
 800aed4:	4607      	mov	r7, r0
 800aed6:	e64f      	b.n	800ab78 <_printf_float+0x10c>

0800aed8 <_printf_common>:
 800aed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aedc:	4691      	mov	r9, r2
 800aede:	461f      	mov	r7, r3
 800aee0:	688a      	ldr	r2, [r1, #8]
 800aee2:	690b      	ldr	r3, [r1, #16]
 800aee4:	4606      	mov	r6, r0
 800aee6:	4293      	cmp	r3, r2
 800aee8:	bfb8      	it	lt
 800aeea:	4613      	movlt	r3, r2
 800aeec:	f8c9 3000 	str.w	r3, [r9]
 800aef0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aef4:	460c      	mov	r4, r1
 800aef6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aefa:	b112      	cbz	r2, 800af02 <_printf_common+0x2a>
 800aefc:	3301      	adds	r3, #1
 800aefe:	f8c9 3000 	str.w	r3, [r9]
 800af02:	6823      	ldr	r3, [r4, #0]
 800af04:	0699      	lsls	r1, r3, #26
 800af06:	bf42      	ittt	mi
 800af08:	f8d9 3000 	ldrmi.w	r3, [r9]
 800af0c:	3302      	addmi	r3, #2
 800af0e:	f8c9 3000 	strmi.w	r3, [r9]
 800af12:	6825      	ldr	r5, [r4, #0]
 800af14:	f015 0506 	ands.w	r5, r5, #6
 800af18:	d107      	bne.n	800af2a <_printf_common+0x52>
 800af1a:	f104 0a19 	add.w	sl, r4, #25
 800af1e:	68e3      	ldr	r3, [r4, #12]
 800af20:	f8d9 2000 	ldr.w	r2, [r9]
 800af24:	1a9b      	subs	r3, r3, r2
 800af26:	42ab      	cmp	r3, r5
 800af28:	dc29      	bgt.n	800af7e <_printf_common+0xa6>
 800af2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800af2e:	6822      	ldr	r2, [r4, #0]
 800af30:	3300      	adds	r3, #0
 800af32:	bf18      	it	ne
 800af34:	2301      	movne	r3, #1
 800af36:	0692      	lsls	r2, r2, #26
 800af38:	d42e      	bmi.n	800af98 <_printf_common+0xc0>
 800af3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af3e:	4639      	mov	r1, r7
 800af40:	4630      	mov	r0, r6
 800af42:	47c0      	blx	r8
 800af44:	3001      	adds	r0, #1
 800af46:	d021      	beq.n	800af8c <_printf_common+0xb4>
 800af48:	6823      	ldr	r3, [r4, #0]
 800af4a:	68e5      	ldr	r5, [r4, #12]
 800af4c:	f003 0306 	and.w	r3, r3, #6
 800af50:	2b04      	cmp	r3, #4
 800af52:	bf18      	it	ne
 800af54:	2500      	movne	r5, #0
 800af56:	f8d9 2000 	ldr.w	r2, [r9]
 800af5a:	f04f 0900 	mov.w	r9, #0
 800af5e:	bf08      	it	eq
 800af60:	1aad      	subeq	r5, r5, r2
 800af62:	68a3      	ldr	r3, [r4, #8]
 800af64:	6922      	ldr	r2, [r4, #16]
 800af66:	bf08      	it	eq
 800af68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af6c:	4293      	cmp	r3, r2
 800af6e:	bfc4      	itt	gt
 800af70:	1a9b      	subgt	r3, r3, r2
 800af72:	18ed      	addgt	r5, r5, r3
 800af74:	341a      	adds	r4, #26
 800af76:	454d      	cmp	r5, r9
 800af78:	d11a      	bne.n	800afb0 <_printf_common+0xd8>
 800af7a:	2000      	movs	r0, #0
 800af7c:	e008      	b.n	800af90 <_printf_common+0xb8>
 800af7e:	2301      	movs	r3, #1
 800af80:	4652      	mov	r2, sl
 800af82:	4639      	mov	r1, r7
 800af84:	4630      	mov	r0, r6
 800af86:	47c0      	blx	r8
 800af88:	3001      	adds	r0, #1
 800af8a:	d103      	bne.n	800af94 <_printf_common+0xbc>
 800af8c:	f04f 30ff 	mov.w	r0, #4294967295
 800af90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af94:	3501      	adds	r5, #1
 800af96:	e7c2      	b.n	800af1e <_printf_common+0x46>
 800af98:	2030      	movs	r0, #48	; 0x30
 800af9a:	18e1      	adds	r1, r4, r3
 800af9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800afa0:	1c5a      	adds	r2, r3, #1
 800afa2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800afa6:	4422      	add	r2, r4
 800afa8:	3302      	adds	r3, #2
 800afaa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800afae:	e7c4      	b.n	800af3a <_printf_common+0x62>
 800afb0:	2301      	movs	r3, #1
 800afb2:	4622      	mov	r2, r4
 800afb4:	4639      	mov	r1, r7
 800afb6:	4630      	mov	r0, r6
 800afb8:	47c0      	blx	r8
 800afba:	3001      	adds	r0, #1
 800afbc:	d0e6      	beq.n	800af8c <_printf_common+0xb4>
 800afbe:	f109 0901 	add.w	r9, r9, #1
 800afc2:	e7d8      	b.n	800af76 <_printf_common+0x9e>

0800afc4 <_printf_i>:
 800afc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800afc8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800afcc:	460c      	mov	r4, r1
 800afce:	7e09      	ldrb	r1, [r1, #24]
 800afd0:	b085      	sub	sp, #20
 800afd2:	296e      	cmp	r1, #110	; 0x6e
 800afd4:	4617      	mov	r7, r2
 800afd6:	4606      	mov	r6, r0
 800afd8:	4698      	mov	r8, r3
 800afda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800afdc:	f000 80b3 	beq.w	800b146 <_printf_i+0x182>
 800afe0:	d822      	bhi.n	800b028 <_printf_i+0x64>
 800afe2:	2963      	cmp	r1, #99	; 0x63
 800afe4:	d036      	beq.n	800b054 <_printf_i+0x90>
 800afe6:	d80a      	bhi.n	800affe <_printf_i+0x3a>
 800afe8:	2900      	cmp	r1, #0
 800afea:	f000 80b9 	beq.w	800b160 <_printf_i+0x19c>
 800afee:	2958      	cmp	r1, #88	; 0x58
 800aff0:	f000 8083 	beq.w	800b0fa <_printf_i+0x136>
 800aff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aff8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800affc:	e032      	b.n	800b064 <_printf_i+0xa0>
 800affe:	2964      	cmp	r1, #100	; 0x64
 800b000:	d001      	beq.n	800b006 <_printf_i+0x42>
 800b002:	2969      	cmp	r1, #105	; 0x69
 800b004:	d1f6      	bne.n	800aff4 <_printf_i+0x30>
 800b006:	6820      	ldr	r0, [r4, #0]
 800b008:	6813      	ldr	r3, [r2, #0]
 800b00a:	0605      	lsls	r5, r0, #24
 800b00c:	f103 0104 	add.w	r1, r3, #4
 800b010:	d52a      	bpl.n	800b068 <_printf_i+0xa4>
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	6011      	str	r1, [r2, #0]
 800b016:	2b00      	cmp	r3, #0
 800b018:	da03      	bge.n	800b022 <_printf_i+0x5e>
 800b01a:	222d      	movs	r2, #45	; 0x2d
 800b01c:	425b      	negs	r3, r3
 800b01e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b022:	486f      	ldr	r0, [pc, #444]	; (800b1e0 <_printf_i+0x21c>)
 800b024:	220a      	movs	r2, #10
 800b026:	e039      	b.n	800b09c <_printf_i+0xd8>
 800b028:	2973      	cmp	r1, #115	; 0x73
 800b02a:	f000 809d 	beq.w	800b168 <_printf_i+0x1a4>
 800b02e:	d808      	bhi.n	800b042 <_printf_i+0x7e>
 800b030:	296f      	cmp	r1, #111	; 0x6f
 800b032:	d020      	beq.n	800b076 <_printf_i+0xb2>
 800b034:	2970      	cmp	r1, #112	; 0x70
 800b036:	d1dd      	bne.n	800aff4 <_printf_i+0x30>
 800b038:	6823      	ldr	r3, [r4, #0]
 800b03a:	f043 0320 	orr.w	r3, r3, #32
 800b03e:	6023      	str	r3, [r4, #0]
 800b040:	e003      	b.n	800b04a <_printf_i+0x86>
 800b042:	2975      	cmp	r1, #117	; 0x75
 800b044:	d017      	beq.n	800b076 <_printf_i+0xb2>
 800b046:	2978      	cmp	r1, #120	; 0x78
 800b048:	d1d4      	bne.n	800aff4 <_printf_i+0x30>
 800b04a:	2378      	movs	r3, #120	; 0x78
 800b04c:	4865      	ldr	r0, [pc, #404]	; (800b1e4 <_printf_i+0x220>)
 800b04e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b052:	e055      	b.n	800b100 <_printf_i+0x13c>
 800b054:	6813      	ldr	r3, [r2, #0]
 800b056:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b05a:	1d19      	adds	r1, r3, #4
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	6011      	str	r1, [r2, #0]
 800b060:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b064:	2301      	movs	r3, #1
 800b066:	e08c      	b.n	800b182 <_printf_i+0x1be>
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b06e:	6011      	str	r1, [r2, #0]
 800b070:	bf18      	it	ne
 800b072:	b21b      	sxthne	r3, r3
 800b074:	e7cf      	b.n	800b016 <_printf_i+0x52>
 800b076:	6813      	ldr	r3, [r2, #0]
 800b078:	6825      	ldr	r5, [r4, #0]
 800b07a:	1d18      	adds	r0, r3, #4
 800b07c:	6010      	str	r0, [r2, #0]
 800b07e:	0628      	lsls	r0, r5, #24
 800b080:	d501      	bpl.n	800b086 <_printf_i+0xc2>
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	e002      	b.n	800b08c <_printf_i+0xc8>
 800b086:	0668      	lsls	r0, r5, #25
 800b088:	d5fb      	bpl.n	800b082 <_printf_i+0xbe>
 800b08a:	881b      	ldrh	r3, [r3, #0]
 800b08c:	296f      	cmp	r1, #111	; 0x6f
 800b08e:	bf14      	ite	ne
 800b090:	220a      	movne	r2, #10
 800b092:	2208      	moveq	r2, #8
 800b094:	4852      	ldr	r0, [pc, #328]	; (800b1e0 <_printf_i+0x21c>)
 800b096:	2100      	movs	r1, #0
 800b098:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b09c:	6865      	ldr	r5, [r4, #4]
 800b09e:	2d00      	cmp	r5, #0
 800b0a0:	60a5      	str	r5, [r4, #8]
 800b0a2:	f2c0 8095 	blt.w	800b1d0 <_printf_i+0x20c>
 800b0a6:	6821      	ldr	r1, [r4, #0]
 800b0a8:	f021 0104 	bic.w	r1, r1, #4
 800b0ac:	6021      	str	r1, [r4, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d13d      	bne.n	800b12e <_printf_i+0x16a>
 800b0b2:	2d00      	cmp	r5, #0
 800b0b4:	f040 808e 	bne.w	800b1d4 <_printf_i+0x210>
 800b0b8:	4665      	mov	r5, ip
 800b0ba:	2a08      	cmp	r2, #8
 800b0bc:	d10b      	bne.n	800b0d6 <_printf_i+0x112>
 800b0be:	6823      	ldr	r3, [r4, #0]
 800b0c0:	07db      	lsls	r3, r3, #31
 800b0c2:	d508      	bpl.n	800b0d6 <_printf_i+0x112>
 800b0c4:	6923      	ldr	r3, [r4, #16]
 800b0c6:	6862      	ldr	r2, [r4, #4]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	bfde      	ittt	le
 800b0cc:	2330      	movle	r3, #48	; 0x30
 800b0ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b0d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b0d6:	ebac 0305 	sub.w	r3, ip, r5
 800b0da:	6123      	str	r3, [r4, #16]
 800b0dc:	f8cd 8000 	str.w	r8, [sp]
 800b0e0:	463b      	mov	r3, r7
 800b0e2:	aa03      	add	r2, sp, #12
 800b0e4:	4621      	mov	r1, r4
 800b0e6:	4630      	mov	r0, r6
 800b0e8:	f7ff fef6 	bl	800aed8 <_printf_common>
 800b0ec:	3001      	adds	r0, #1
 800b0ee:	d14d      	bne.n	800b18c <_printf_i+0x1c8>
 800b0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0f4:	b005      	add	sp, #20
 800b0f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0fa:	4839      	ldr	r0, [pc, #228]	; (800b1e0 <_printf_i+0x21c>)
 800b0fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b100:	6813      	ldr	r3, [r2, #0]
 800b102:	6821      	ldr	r1, [r4, #0]
 800b104:	1d1d      	adds	r5, r3, #4
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	6015      	str	r5, [r2, #0]
 800b10a:	060a      	lsls	r2, r1, #24
 800b10c:	d50b      	bpl.n	800b126 <_printf_i+0x162>
 800b10e:	07ca      	lsls	r2, r1, #31
 800b110:	bf44      	itt	mi
 800b112:	f041 0120 	orrmi.w	r1, r1, #32
 800b116:	6021      	strmi	r1, [r4, #0]
 800b118:	b91b      	cbnz	r3, 800b122 <_printf_i+0x15e>
 800b11a:	6822      	ldr	r2, [r4, #0]
 800b11c:	f022 0220 	bic.w	r2, r2, #32
 800b120:	6022      	str	r2, [r4, #0]
 800b122:	2210      	movs	r2, #16
 800b124:	e7b7      	b.n	800b096 <_printf_i+0xd2>
 800b126:	064d      	lsls	r5, r1, #25
 800b128:	bf48      	it	mi
 800b12a:	b29b      	uxthmi	r3, r3
 800b12c:	e7ef      	b.n	800b10e <_printf_i+0x14a>
 800b12e:	4665      	mov	r5, ip
 800b130:	fbb3 f1f2 	udiv	r1, r3, r2
 800b134:	fb02 3311 	mls	r3, r2, r1, r3
 800b138:	5cc3      	ldrb	r3, [r0, r3]
 800b13a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b13e:	460b      	mov	r3, r1
 800b140:	2900      	cmp	r1, #0
 800b142:	d1f5      	bne.n	800b130 <_printf_i+0x16c>
 800b144:	e7b9      	b.n	800b0ba <_printf_i+0xf6>
 800b146:	6813      	ldr	r3, [r2, #0]
 800b148:	6825      	ldr	r5, [r4, #0]
 800b14a:	1d18      	adds	r0, r3, #4
 800b14c:	6961      	ldr	r1, [r4, #20]
 800b14e:	6010      	str	r0, [r2, #0]
 800b150:	0628      	lsls	r0, r5, #24
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	d501      	bpl.n	800b15a <_printf_i+0x196>
 800b156:	6019      	str	r1, [r3, #0]
 800b158:	e002      	b.n	800b160 <_printf_i+0x19c>
 800b15a:	066a      	lsls	r2, r5, #25
 800b15c:	d5fb      	bpl.n	800b156 <_printf_i+0x192>
 800b15e:	8019      	strh	r1, [r3, #0]
 800b160:	2300      	movs	r3, #0
 800b162:	4665      	mov	r5, ip
 800b164:	6123      	str	r3, [r4, #16]
 800b166:	e7b9      	b.n	800b0dc <_printf_i+0x118>
 800b168:	6813      	ldr	r3, [r2, #0]
 800b16a:	1d19      	adds	r1, r3, #4
 800b16c:	6011      	str	r1, [r2, #0]
 800b16e:	681d      	ldr	r5, [r3, #0]
 800b170:	6862      	ldr	r2, [r4, #4]
 800b172:	2100      	movs	r1, #0
 800b174:	4628      	mov	r0, r5
 800b176:	f000 fed9 	bl	800bf2c <memchr>
 800b17a:	b108      	cbz	r0, 800b180 <_printf_i+0x1bc>
 800b17c:	1b40      	subs	r0, r0, r5
 800b17e:	6060      	str	r0, [r4, #4]
 800b180:	6863      	ldr	r3, [r4, #4]
 800b182:	6123      	str	r3, [r4, #16]
 800b184:	2300      	movs	r3, #0
 800b186:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b18a:	e7a7      	b.n	800b0dc <_printf_i+0x118>
 800b18c:	6923      	ldr	r3, [r4, #16]
 800b18e:	462a      	mov	r2, r5
 800b190:	4639      	mov	r1, r7
 800b192:	4630      	mov	r0, r6
 800b194:	47c0      	blx	r8
 800b196:	3001      	adds	r0, #1
 800b198:	d0aa      	beq.n	800b0f0 <_printf_i+0x12c>
 800b19a:	6823      	ldr	r3, [r4, #0]
 800b19c:	079b      	lsls	r3, r3, #30
 800b19e:	d413      	bmi.n	800b1c8 <_printf_i+0x204>
 800b1a0:	68e0      	ldr	r0, [r4, #12]
 800b1a2:	9b03      	ldr	r3, [sp, #12]
 800b1a4:	4298      	cmp	r0, r3
 800b1a6:	bfb8      	it	lt
 800b1a8:	4618      	movlt	r0, r3
 800b1aa:	e7a3      	b.n	800b0f4 <_printf_i+0x130>
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	464a      	mov	r2, r9
 800b1b0:	4639      	mov	r1, r7
 800b1b2:	4630      	mov	r0, r6
 800b1b4:	47c0      	blx	r8
 800b1b6:	3001      	adds	r0, #1
 800b1b8:	d09a      	beq.n	800b0f0 <_printf_i+0x12c>
 800b1ba:	3501      	adds	r5, #1
 800b1bc:	68e3      	ldr	r3, [r4, #12]
 800b1be:	9a03      	ldr	r2, [sp, #12]
 800b1c0:	1a9b      	subs	r3, r3, r2
 800b1c2:	42ab      	cmp	r3, r5
 800b1c4:	dcf2      	bgt.n	800b1ac <_printf_i+0x1e8>
 800b1c6:	e7eb      	b.n	800b1a0 <_printf_i+0x1dc>
 800b1c8:	2500      	movs	r5, #0
 800b1ca:	f104 0919 	add.w	r9, r4, #25
 800b1ce:	e7f5      	b.n	800b1bc <_printf_i+0x1f8>
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d1ac      	bne.n	800b12e <_printf_i+0x16a>
 800b1d4:	7803      	ldrb	r3, [r0, #0]
 800b1d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1de:	e76c      	b.n	800b0ba <_printf_i+0xf6>
 800b1e0:	0800e16e 	.word	0x0800e16e
 800b1e4:	0800e17f 	.word	0x0800e17f

0800b1e8 <_sbrk_r>:
 800b1e8:	b538      	push	{r3, r4, r5, lr}
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	4c05      	ldr	r4, [pc, #20]	; (800b204 <_sbrk_r+0x1c>)
 800b1ee:	4605      	mov	r5, r0
 800b1f0:	4608      	mov	r0, r1
 800b1f2:	6023      	str	r3, [r4, #0]
 800b1f4:	f7fd fdb2 	bl	8008d5c <_sbrk>
 800b1f8:	1c43      	adds	r3, r0, #1
 800b1fa:	d102      	bne.n	800b202 <_sbrk_r+0x1a>
 800b1fc:	6823      	ldr	r3, [r4, #0]
 800b1fe:	b103      	cbz	r3, 800b202 <_sbrk_r+0x1a>
 800b200:	602b      	str	r3, [r5, #0]
 800b202:	bd38      	pop	{r3, r4, r5, pc}
 800b204:	20000abc 	.word	0x20000abc

0800b208 <siprintf>:
 800b208:	b40e      	push	{r1, r2, r3}
 800b20a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b20e:	b500      	push	{lr}
 800b210:	b09c      	sub	sp, #112	; 0x70
 800b212:	ab1d      	add	r3, sp, #116	; 0x74
 800b214:	9002      	str	r0, [sp, #8]
 800b216:	9006      	str	r0, [sp, #24]
 800b218:	9107      	str	r1, [sp, #28]
 800b21a:	9104      	str	r1, [sp, #16]
 800b21c:	4808      	ldr	r0, [pc, #32]	; (800b240 <siprintf+0x38>)
 800b21e:	4909      	ldr	r1, [pc, #36]	; (800b244 <siprintf+0x3c>)
 800b220:	f853 2b04 	ldr.w	r2, [r3], #4
 800b224:	9105      	str	r1, [sp, #20]
 800b226:	6800      	ldr	r0, [r0, #0]
 800b228:	a902      	add	r1, sp, #8
 800b22a:	9301      	str	r3, [sp, #4]
 800b22c:	f001 f9d0 	bl	800c5d0 <_svfiprintf_r>
 800b230:	2200      	movs	r2, #0
 800b232:	9b02      	ldr	r3, [sp, #8]
 800b234:	701a      	strb	r2, [r3, #0]
 800b236:	b01c      	add	sp, #112	; 0x70
 800b238:	f85d eb04 	ldr.w	lr, [sp], #4
 800b23c:	b003      	add	sp, #12
 800b23e:	4770      	bx	lr
 800b240:	200007e4 	.word	0x200007e4
 800b244:	ffff0208 	.word	0xffff0208

0800b248 <_vsiprintf_r>:
 800b248:	b500      	push	{lr}
 800b24a:	b09b      	sub	sp, #108	; 0x6c
 800b24c:	9100      	str	r1, [sp, #0]
 800b24e:	9104      	str	r1, [sp, #16]
 800b250:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b254:	9105      	str	r1, [sp, #20]
 800b256:	9102      	str	r1, [sp, #8]
 800b258:	4905      	ldr	r1, [pc, #20]	; (800b270 <_vsiprintf_r+0x28>)
 800b25a:	9103      	str	r1, [sp, #12]
 800b25c:	4669      	mov	r1, sp
 800b25e:	f001 f9b7 	bl	800c5d0 <_svfiprintf_r>
 800b262:	2200      	movs	r2, #0
 800b264:	9b00      	ldr	r3, [sp, #0]
 800b266:	701a      	strb	r2, [r3, #0]
 800b268:	b01b      	add	sp, #108	; 0x6c
 800b26a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b26e:	bf00      	nop
 800b270:	ffff0208 	.word	0xffff0208

0800b274 <vsiprintf>:
 800b274:	4613      	mov	r3, r2
 800b276:	460a      	mov	r2, r1
 800b278:	4601      	mov	r1, r0
 800b27a:	4802      	ldr	r0, [pc, #8]	; (800b284 <vsiprintf+0x10>)
 800b27c:	6800      	ldr	r0, [r0, #0]
 800b27e:	f7ff bfe3 	b.w	800b248 <_vsiprintf_r>
 800b282:	bf00      	nop
 800b284:	200007e4 	.word	0x200007e4

0800b288 <quorem>:
 800b288:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b28c:	6903      	ldr	r3, [r0, #16]
 800b28e:	690c      	ldr	r4, [r1, #16]
 800b290:	4680      	mov	r8, r0
 800b292:	42a3      	cmp	r3, r4
 800b294:	f2c0 8084 	blt.w	800b3a0 <quorem+0x118>
 800b298:	3c01      	subs	r4, #1
 800b29a:	f101 0714 	add.w	r7, r1, #20
 800b29e:	f100 0614 	add.w	r6, r0, #20
 800b2a2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b2a6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b2aa:	3501      	adds	r5, #1
 800b2ac:	fbb0 f5f5 	udiv	r5, r0, r5
 800b2b0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b2b4:	eb06 030c 	add.w	r3, r6, ip
 800b2b8:	eb07 090c 	add.w	r9, r7, ip
 800b2bc:	9301      	str	r3, [sp, #4]
 800b2be:	b39d      	cbz	r5, 800b328 <quorem+0xa0>
 800b2c0:	f04f 0a00 	mov.w	sl, #0
 800b2c4:	4638      	mov	r0, r7
 800b2c6:	46b6      	mov	lr, r6
 800b2c8:	46d3      	mov	fp, sl
 800b2ca:	f850 2b04 	ldr.w	r2, [r0], #4
 800b2ce:	b293      	uxth	r3, r2
 800b2d0:	fb05 a303 	mla	r3, r5, r3, sl
 800b2d4:	0c12      	lsrs	r2, r2, #16
 800b2d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b2da:	fb05 a202 	mla	r2, r5, r2, sl
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	ebab 0303 	sub.w	r3, fp, r3
 800b2e4:	f8de b000 	ldr.w	fp, [lr]
 800b2e8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b2ec:	fa1f fb8b 	uxth.w	fp, fp
 800b2f0:	445b      	add	r3, fp
 800b2f2:	fa1f fb82 	uxth.w	fp, r2
 800b2f6:	f8de 2000 	ldr.w	r2, [lr]
 800b2fa:	4581      	cmp	r9, r0
 800b2fc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b300:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b304:	b29b      	uxth	r3, r3
 800b306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b30a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b30e:	f84e 3b04 	str.w	r3, [lr], #4
 800b312:	d2da      	bcs.n	800b2ca <quorem+0x42>
 800b314:	f856 300c 	ldr.w	r3, [r6, ip]
 800b318:	b933      	cbnz	r3, 800b328 <quorem+0xa0>
 800b31a:	9b01      	ldr	r3, [sp, #4]
 800b31c:	3b04      	subs	r3, #4
 800b31e:	429e      	cmp	r6, r3
 800b320:	461a      	mov	r2, r3
 800b322:	d331      	bcc.n	800b388 <quorem+0x100>
 800b324:	f8c8 4010 	str.w	r4, [r8, #16]
 800b328:	4640      	mov	r0, r8
 800b32a:	f001 f82f 	bl	800c38c <__mcmp>
 800b32e:	2800      	cmp	r0, #0
 800b330:	db26      	blt.n	800b380 <quorem+0xf8>
 800b332:	4630      	mov	r0, r6
 800b334:	f04f 0c00 	mov.w	ip, #0
 800b338:	3501      	adds	r5, #1
 800b33a:	f857 1b04 	ldr.w	r1, [r7], #4
 800b33e:	f8d0 e000 	ldr.w	lr, [r0]
 800b342:	b28b      	uxth	r3, r1
 800b344:	ebac 0303 	sub.w	r3, ip, r3
 800b348:	fa1f f28e 	uxth.w	r2, lr
 800b34c:	4413      	add	r3, r2
 800b34e:	0c0a      	lsrs	r2, r1, #16
 800b350:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b354:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b358:	b29b      	uxth	r3, r3
 800b35a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b35e:	45b9      	cmp	r9, r7
 800b360:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b364:	f840 3b04 	str.w	r3, [r0], #4
 800b368:	d2e7      	bcs.n	800b33a <quorem+0xb2>
 800b36a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b36e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b372:	b92a      	cbnz	r2, 800b380 <quorem+0xf8>
 800b374:	3b04      	subs	r3, #4
 800b376:	429e      	cmp	r6, r3
 800b378:	461a      	mov	r2, r3
 800b37a:	d30b      	bcc.n	800b394 <quorem+0x10c>
 800b37c:	f8c8 4010 	str.w	r4, [r8, #16]
 800b380:	4628      	mov	r0, r5
 800b382:	b003      	add	sp, #12
 800b384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b388:	6812      	ldr	r2, [r2, #0]
 800b38a:	3b04      	subs	r3, #4
 800b38c:	2a00      	cmp	r2, #0
 800b38e:	d1c9      	bne.n	800b324 <quorem+0x9c>
 800b390:	3c01      	subs	r4, #1
 800b392:	e7c4      	b.n	800b31e <quorem+0x96>
 800b394:	6812      	ldr	r2, [r2, #0]
 800b396:	3b04      	subs	r3, #4
 800b398:	2a00      	cmp	r2, #0
 800b39a:	d1ef      	bne.n	800b37c <quorem+0xf4>
 800b39c:	3c01      	subs	r4, #1
 800b39e:	e7ea      	b.n	800b376 <quorem+0xee>
 800b3a0:	2000      	movs	r0, #0
 800b3a2:	e7ee      	b.n	800b382 <quorem+0xfa>
 800b3a4:	0000      	movs	r0, r0
	...

0800b3a8 <_dtoa_r>:
 800b3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ac:	4616      	mov	r6, r2
 800b3ae:	461f      	mov	r7, r3
 800b3b0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b3b2:	b095      	sub	sp, #84	; 0x54
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800b3ba:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b3be:	b93d      	cbnz	r5, 800b3d0 <_dtoa_r+0x28>
 800b3c0:	2010      	movs	r0, #16
 800b3c2:	f7ff f9f5 	bl	800a7b0 <malloc>
 800b3c6:	6260      	str	r0, [r4, #36]	; 0x24
 800b3c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b3cc:	6005      	str	r5, [r0, #0]
 800b3ce:	60c5      	str	r5, [r0, #12]
 800b3d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3d2:	6819      	ldr	r1, [r3, #0]
 800b3d4:	b151      	cbz	r1, 800b3ec <_dtoa_r+0x44>
 800b3d6:	685a      	ldr	r2, [r3, #4]
 800b3d8:	2301      	movs	r3, #1
 800b3da:	4093      	lsls	r3, r2
 800b3dc:	604a      	str	r2, [r1, #4]
 800b3de:	608b      	str	r3, [r1, #8]
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	f000 fdf2 	bl	800bfca <_Bfree>
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3ea:	601a      	str	r2, [r3, #0]
 800b3ec:	1e3b      	subs	r3, r7, #0
 800b3ee:	bfaf      	iteee	ge
 800b3f0:	2300      	movge	r3, #0
 800b3f2:	2201      	movlt	r2, #1
 800b3f4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b3f8:	9303      	strlt	r3, [sp, #12]
 800b3fa:	bfac      	ite	ge
 800b3fc:	f8c8 3000 	strge.w	r3, [r8]
 800b400:	f8c8 2000 	strlt.w	r2, [r8]
 800b404:	4bae      	ldr	r3, [pc, #696]	; (800b6c0 <_dtoa_r+0x318>)
 800b406:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b40a:	ea33 0308 	bics.w	r3, r3, r8
 800b40e:	d11b      	bne.n	800b448 <_dtoa_r+0xa0>
 800b410:	f242 730f 	movw	r3, #9999	; 0x270f
 800b414:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b416:	6013      	str	r3, [r2, #0]
 800b418:	9b02      	ldr	r3, [sp, #8]
 800b41a:	b923      	cbnz	r3, 800b426 <_dtoa_r+0x7e>
 800b41c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b420:	2800      	cmp	r0, #0
 800b422:	f000 8545 	beq.w	800beb0 <_dtoa_r+0xb08>
 800b426:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b428:	b953      	cbnz	r3, 800b440 <_dtoa_r+0x98>
 800b42a:	4ba6      	ldr	r3, [pc, #664]	; (800b6c4 <_dtoa_r+0x31c>)
 800b42c:	e021      	b.n	800b472 <_dtoa_r+0xca>
 800b42e:	4ba6      	ldr	r3, [pc, #664]	; (800b6c8 <_dtoa_r+0x320>)
 800b430:	9306      	str	r3, [sp, #24]
 800b432:	3308      	adds	r3, #8
 800b434:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b436:	6013      	str	r3, [r2, #0]
 800b438:	9806      	ldr	r0, [sp, #24]
 800b43a:	b015      	add	sp, #84	; 0x54
 800b43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b440:	4ba0      	ldr	r3, [pc, #640]	; (800b6c4 <_dtoa_r+0x31c>)
 800b442:	9306      	str	r3, [sp, #24]
 800b444:	3303      	adds	r3, #3
 800b446:	e7f5      	b.n	800b434 <_dtoa_r+0x8c>
 800b448:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b44c:	2200      	movs	r2, #0
 800b44e:	2300      	movs	r3, #0
 800b450:	4630      	mov	r0, r6
 800b452:	4639      	mov	r1, r7
 800b454:	f7f5 fb14 	bl	8000a80 <__aeabi_dcmpeq>
 800b458:	4682      	mov	sl, r0
 800b45a:	b160      	cbz	r0, 800b476 <_dtoa_r+0xce>
 800b45c:	2301      	movs	r3, #1
 800b45e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b460:	6013      	str	r3, [r2, #0]
 800b462:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b464:	2b00      	cmp	r3, #0
 800b466:	f000 8520 	beq.w	800beaa <_dtoa_r+0xb02>
 800b46a:	4b98      	ldr	r3, [pc, #608]	; (800b6cc <_dtoa_r+0x324>)
 800b46c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b46e:	6013      	str	r3, [r2, #0]
 800b470:	3b01      	subs	r3, #1
 800b472:	9306      	str	r3, [sp, #24]
 800b474:	e7e0      	b.n	800b438 <_dtoa_r+0x90>
 800b476:	ab12      	add	r3, sp, #72	; 0x48
 800b478:	9301      	str	r3, [sp, #4]
 800b47a:	ab13      	add	r3, sp, #76	; 0x4c
 800b47c:	9300      	str	r3, [sp, #0]
 800b47e:	4632      	mov	r2, r6
 800b480:	463b      	mov	r3, r7
 800b482:	4620      	mov	r0, r4
 800b484:	f000 fffa 	bl	800c47c <__d2b>
 800b488:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b48c:	4683      	mov	fp, r0
 800b48e:	2d00      	cmp	r5, #0
 800b490:	d07d      	beq.n	800b58e <_dtoa_r+0x1e6>
 800b492:	46b0      	mov	r8, r6
 800b494:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b498:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800b49c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800b4a0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b4a4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	4b89      	ldr	r3, [pc, #548]	; (800b6d0 <_dtoa_r+0x328>)
 800b4ac:	4640      	mov	r0, r8
 800b4ae:	4649      	mov	r1, r9
 800b4b0:	f7f4 fec6 	bl	8000240 <__aeabi_dsub>
 800b4b4:	a37c      	add	r3, pc, #496	; (adr r3, 800b6a8 <_dtoa_r+0x300>)
 800b4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ba:	f7f5 f879 	bl	80005b0 <__aeabi_dmul>
 800b4be:	a37c      	add	r3, pc, #496	; (adr r3, 800b6b0 <_dtoa_r+0x308>)
 800b4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c4:	f7f4 febe 	bl	8000244 <__adddf3>
 800b4c8:	4606      	mov	r6, r0
 800b4ca:	4628      	mov	r0, r5
 800b4cc:	460f      	mov	r7, r1
 800b4ce:	f7f5 f805 	bl	80004dc <__aeabi_i2d>
 800b4d2:	a379      	add	r3, pc, #484	; (adr r3, 800b6b8 <_dtoa_r+0x310>)
 800b4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d8:	f7f5 f86a 	bl	80005b0 <__aeabi_dmul>
 800b4dc:	4602      	mov	r2, r0
 800b4de:	460b      	mov	r3, r1
 800b4e0:	4630      	mov	r0, r6
 800b4e2:	4639      	mov	r1, r7
 800b4e4:	f7f4 feae 	bl	8000244 <__adddf3>
 800b4e8:	4606      	mov	r6, r0
 800b4ea:	460f      	mov	r7, r1
 800b4ec:	f7f5 fb10 	bl	8000b10 <__aeabi_d2iz>
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	4682      	mov	sl, r0
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	4630      	mov	r0, r6
 800b4f8:	4639      	mov	r1, r7
 800b4fa:	f7f5 facb 	bl	8000a94 <__aeabi_dcmplt>
 800b4fe:	b148      	cbz	r0, 800b514 <_dtoa_r+0x16c>
 800b500:	4650      	mov	r0, sl
 800b502:	f7f4 ffeb 	bl	80004dc <__aeabi_i2d>
 800b506:	4632      	mov	r2, r6
 800b508:	463b      	mov	r3, r7
 800b50a:	f7f5 fab9 	bl	8000a80 <__aeabi_dcmpeq>
 800b50e:	b908      	cbnz	r0, 800b514 <_dtoa_r+0x16c>
 800b510:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b514:	f1ba 0f16 	cmp.w	sl, #22
 800b518:	d85a      	bhi.n	800b5d0 <_dtoa_r+0x228>
 800b51a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b51e:	496d      	ldr	r1, [pc, #436]	; (800b6d4 <_dtoa_r+0x32c>)
 800b520:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b524:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b528:	f7f5 fad2 	bl	8000ad0 <__aeabi_dcmpgt>
 800b52c:	2800      	cmp	r0, #0
 800b52e:	d051      	beq.n	800b5d4 <_dtoa_r+0x22c>
 800b530:	2300      	movs	r3, #0
 800b532:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b536:	930d      	str	r3, [sp, #52]	; 0x34
 800b538:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b53a:	1b5d      	subs	r5, r3, r5
 800b53c:	1e6b      	subs	r3, r5, #1
 800b53e:	9307      	str	r3, [sp, #28]
 800b540:	bf43      	ittte	mi
 800b542:	2300      	movmi	r3, #0
 800b544:	f1c5 0901 	rsbmi	r9, r5, #1
 800b548:	9307      	strmi	r3, [sp, #28]
 800b54a:	f04f 0900 	movpl.w	r9, #0
 800b54e:	f1ba 0f00 	cmp.w	sl, #0
 800b552:	db41      	blt.n	800b5d8 <_dtoa_r+0x230>
 800b554:	9b07      	ldr	r3, [sp, #28]
 800b556:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800b55a:	4453      	add	r3, sl
 800b55c:	9307      	str	r3, [sp, #28]
 800b55e:	2300      	movs	r3, #0
 800b560:	9308      	str	r3, [sp, #32]
 800b562:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b564:	2b09      	cmp	r3, #9
 800b566:	f200 808f 	bhi.w	800b688 <_dtoa_r+0x2e0>
 800b56a:	2b05      	cmp	r3, #5
 800b56c:	bfc4      	itt	gt
 800b56e:	3b04      	subgt	r3, #4
 800b570:	931e      	strgt	r3, [sp, #120]	; 0x78
 800b572:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b574:	bfc8      	it	gt
 800b576:	2500      	movgt	r5, #0
 800b578:	f1a3 0302 	sub.w	r3, r3, #2
 800b57c:	bfd8      	it	le
 800b57e:	2501      	movle	r5, #1
 800b580:	2b03      	cmp	r3, #3
 800b582:	f200 808d 	bhi.w	800b6a0 <_dtoa_r+0x2f8>
 800b586:	e8df f003 	tbb	[pc, r3]
 800b58a:	7d7b      	.short	0x7d7b
 800b58c:	6f2f      	.short	0x6f2f
 800b58e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b592:	441d      	add	r5, r3
 800b594:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b598:	2820      	cmp	r0, #32
 800b59a:	dd13      	ble.n	800b5c4 <_dtoa_r+0x21c>
 800b59c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b5a0:	9b02      	ldr	r3, [sp, #8]
 800b5a2:	fa08 f800 	lsl.w	r8, r8, r0
 800b5a6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b5aa:	fa23 f000 	lsr.w	r0, r3, r0
 800b5ae:	ea48 0000 	orr.w	r0, r8, r0
 800b5b2:	f7f4 ff83 	bl	80004bc <__aeabi_ui2d>
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	4680      	mov	r8, r0
 800b5ba:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800b5be:	3d01      	subs	r5, #1
 800b5c0:	9310      	str	r3, [sp, #64]	; 0x40
 800b5c2:	e771      	b.n	800b4a8 <_dtoa_r+0x100>
 800b5c4:	9b02      	ldr	r3, [sp, #8]
 800b5c6:	f1c0 0020 	rsb	r0, r0, #32
 800b5ca:	fa03 f000 	lsl.w	r0, r3, r0
 800b5ce:	e7f0      	b.n	800b5b2 <_dtoa_r+0x20a>
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	e7b0      	b.n	800b536 <_dtoa_r+0x18e>
 800b5d4:	900d      	str	r0, [sp, #52]	; 0x34
 800b5d6:	e7af      	b.n	800b538 <_dtoa_r+0x190>
 800b5d8:	f1ca 0300 	rsb	r3, sl, #0
 800b5dc:	9308      	str	r3, [sp, #32]
 800b5de:	2300      	movs	r3, #0
 800b5e0:	eba9 090a 	sub.w	r9, r9, sl
 800b5e4:	930c      	str	r3, [sp, #48]	; 0x30
 800b5e6:	e7bc      	b.n	800b562 <_dtoa_r+0x1ba>
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	9309      	str	r3, [sp, #36]	; 0x24
 800b5ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	dd74      	ble.n	800b6dc <_dtoa_r+0x334>
 800b5f2:	4698      	mov	r8, r3
 800b5f4:	9304      	str	r3, [sp, #16]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b5fa:	6072      	str	r2, [r6, #4]
 800b5fc:	2204      	movs	r2, #4
 800b5fe:	f102 0014 	add.w	r0, r2, #20
 800b602:	4298      	cmp	r0, r3
 800b604:	6871      	ldr	r1, [r6, #4]
 800b606:	d96e      	bls.n	800b6e6 <_dtoa_r+0x33e>
 800b608:	4620      	mov	r0, r4
 800b60a:	f000 fcaa 	bl	800bf62 <_Balloc>
 800b60e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b610:	6030      	str	r0, [r6, #0]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f1b8 0f0e 	cmp.w	r8, #14
 800b618:	9306      	str	r3, [sp, #24]
 800b61a:	f200 80ed 	bhi.w	800b7f8 <_dtoa_r+0x450>
 800b61e:	2d00      	cmp	r5, #0
 800b620:	f000 80ea 	beq.w	800b7f8 <_dtoa_r+0x450>
 800b624:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b628:	f1ba 0f00 	cmp.w	sl, #0
 800b62c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b630:	dd77      	ble.n	800b722 <_dtoa_r+0x37a>
 800b632:	4a28      	ldr	r2, [pc, #160]	; (800b6d4 <_dtoa_r+0x32c>)
 800b634:	f00a 030f 	and.w	r3, sl, #15
 800b638:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b63c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b640:	06f0      	lsls	r0, r6, #27
 800b642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b646:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b64a:	d568      	bpl.n	800b71e <_dtoa_r+0x376>
 800b64c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b650:	4b21      	ldr	r3, [pc, #132]	; (800b6d8 <_dtoa_r+0x330>)
 800b652:	2503      	movs	r5, #3
 800b654:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b658:	f7f5 f8d4 	bl	8000804 <__aeabi_ddiv>
 800b65c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b660:	f006 060f 	and.w	r6, r6, #15
 800b664:	4f1c      	ldr	r7, [pc, #112]	; (800b6d8 <_dtoa_r+0x330>)
 800b666:	e04f      	b.n	800b708 <_dtoa_r+0x360>
 800b668:	2301      	movs	r3, #1
 800b66a:	9309      	str	r3, [sp, #36]	; 0x24
 800b66c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b66e:	4453      	add	r3, sl
 800b670:	f103 0801 	add.w	r8, r3, #1
 800b674:	9304      	str	r3, [sp, #16]
 800b676:	4643      	mov	r3, r8
 800b678:	2b01      	cmp	r3, #1
 800b67a:	bfb8      	it	lt
 800b67c:	2301      	movlt	r3, #1
 800b67e:	e7ba      	b.n	800b5f6 <_dtoa_r+0x24e>
 800b680:	2300      	movs	r3, #0
 800b682:	e7b2      	b.n	800b5ea <_dtoa_r+0x242>
 800b684:	2300      	movs	r3, #0
 800b686:	e7f0      	b.n	800b66a <_dtoa_r+0x2c2>
 800b688:	2501      	movs	r5, #1
 800b68a:	2300      	movs	r3, #0
 800b68c:	9509      	str	r5, [sp, #36]	; 0x24
 800b68e:	931e      	str	r3, [sp, #120]	; 0x78
 800b690:	f04f 33ff 	mov.w	r3, #4294967295
 800b694:	2200      	movs	r2, #0
 800b696:	9304      	str	r3, [sp, #16]
 800b698:	4698      	mov	r8, r3
 800b69a:	2312      	movs	r3, #18
 800b69c:	921f      	str	r2, [sp, #124]	; 0x7c
 800b69e:	e7aa      	b.n	800b5f6 <_dtoa_r+0x24e>
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	9309      	str	r3, [sp, #36]	; 0x24
 800b6a4:	e7f4      	b.n	800b690 <_dtoa_r+0x2e8>
 800b6a6:	bf00      	nop
 800b6a8:	636f4361 	.word	0x636f4361
 800b6ac:	3fd287a7 	.word	0x3fd287a7
 800b6b0:	8b60c8b3 	.word	0x8b60c8b3
 800b6b4:	3fc68a28 	.word	0x3fc68a28
 800b6b8:	509f79fb 	.word	0x509f79fb
 800b6bc:	3fd34413 	.word	0x3fd34413
 800b6c0:	7ff00000 	.word	0x7ff00000
 800b6c4:	0800e199 	.word	0x0800e199
 800b6c8:	0800e190 	.word	0x0800e190
 800b6cc:	0800e16d 	.word	0x0800e16d
 800b6d0:	3ff80000 	.word	0x3ff80000
 800b6d4:	0800e1c8 	.word	0x0800e1c8
 800b6d8:	0800e1a0 	.word	0x0800e1a0
 800b6dc:	2301      	movs	r3, #1
 800b6de:	9304      	str	r3, [sp, #16]
 800b6e0:	4698      	mov	r8, r3
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	e7da      	b.n	800b69c <_dtoa_r+0x2f4>
 800b6e6:	3101      	adds	r1, #1
 800b6e8:	6071      	str	r1, [r6, #4]
 800b6ea:	0052      	lsls	r2, r2, #1
 800b6ec:	e787      	b.n	800b5fe <_dtoa_r+0x256>
 800b6ee:	07f1      	lsls	r1, r6, #31
 800b6f0:	d508      	bpl.n	800b704 <_dtoa_r+0x35c>
 800b6f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b6f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6fa:	f7f4 ff59 	bl	80005b0 <__aeabi_dmul>
 800b6fe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b702:	3501      	adds	r5, #1
 800b704:	1076      	asrs	r6, r6, #1
 800b706:	3708      	adds	r7, #8
 800b708:	2e00      	cmp	r6, #0
 800b70a:	d1f0      	bne.n	800b6ee <_dtoa_r+0x346>
 800b70c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b710:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b714:	f7f5 f876 	bl	8000804 <__aeabi_ddiv>
 800b718:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b71c:	e01b      	b.n	800b756 <_dtoa_r+0x3ae>
 800b71e:	2502      	movs	r5, #2
 800b720:	e7a0      	b.n	800b664 <_dtoa_r+0x2bc>
 800b722:	f000 80a4 	beq.w	800b86e <_dtoa_r+0x4c6>
 800b726:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b72a:	f1ca 0600 	rsb	r6, sl, #0
 800b72e:	4ba0      	ldr	r3, [pc, #640]	; (800b9b0 <_dtoa_r+0x608>)
 800b730:	f006 020f 	and.w	r2, r6, #15
 800b734:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73c:	f7f4 ff38 	bl	80005b0 <__aeabi_dmul>
 800b740:	2502      	movs	r5, #2
 800b742:	2300      	movs	r3, #0
 800b744:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b748:	4f9a      	ldr	r7, [pc, #616]	; (800b9b4 <_dtoa_r+0x60c>)
 800b74a:	1136      	asrs	r6, r6, #4
 800b74c:	2e00      	cmp	r6, #0
 800b74e:	f040 8083 	bne.w	800b858 <_dtoa_r+0x4b0>
 800b752:	2b00      	cmp	r3, #0
 800b754:	d1e0      	bne.n	800b718 <_dtoa_r+0x370>
 800b756:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b758:	2b00      	cmp	r3, #0
 800b75a:	f000 808a 	beq.w	800b872 <_dtoa_r+0x4ca>
 800b75e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b762:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b766:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b76a:	2200      	movs	r2, #0
 800b76c:	4b92      	ldr	r3, [pc, #584]	; (800b9b8 <_dtoa_r+0x610>)
 800b76e:	f7f5 f991 	bl	8000a94 <__aeabi_dcmplt>
 800b772:	2800      	cmp	r0, #0
 800b774:	d07d      	beq.n	800b872 <_dtoa_r+0x4ca>
 800b776:	f1b8 0f00 	cmp.w	r8, #0
 800b77a:	d07a      	beq.n	800b872 <_dtoa_r+0x4ca>
 800b77c:	9b04      	ldr	r3, [sp, #16]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	dd36      	ble.n	800b7f0 <_dtoa_r+0x448>
 800b782:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b786:	2200      	movs	r2, #0
 800b788:	4b8c      	ldr	r3, [pc, #560]	; (800b9bc <_dtoa_r+0x614>)
 800b78a:	f7f4 ff11 	bl	80005b0 <__aeabi_dmul>
 800b78e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b792:	9e04      	ldr	r6, [sp, #16]
 800b794:	f10a 37ff 	add.w	r7, sl, #4294967295
 800b798:	3501      	adds	r5, #1
 800b79a:	4628      	mov	r0, r5
 800b79c:	f7f4 fe9e 	bl	80004dc <__aeabi_i2d>
 800b7a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b7a4:	f7f4 ff04 	bl	80005b0 <__aeabi_dmul>
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	4b85      	ldr	r3, [pc, #532]	; (800b9c0 <_dtoa_r+0x618>)
 800b7ac:	f7f4 fd4a 	bl	8000244 <__adddf3>
 800b7b0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800b7b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b7b8:	950b      	str	r5, [sp, #44]	; 0x2c
 800b7ba:	2e00      	cmp	r6, #0
 800b7bc:	d15c      	bne.n	800b878 <_dtoa_r+0x4d0>
 800b7be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	4b7f      	ldr	r3, [pc, #508]	; (800b9c4 <_dtoa_r+0x61c>)
 800b7c6:	f7f4 fd3b 	bl	8000240 <__aeabi_dsub>
 800b7ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7cc:	462b      	mov	r3, r5
 800b7ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7d2:	f7f5 f97d 	bl	8000ad0 <__aeabi_dcmpgt>
 800b7d6:	2800      	cmp	r0, #0
 800b7d8:	f040 8281 	bne.w	800bcde <_dtoa_r+0x936>
 800b7dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7e2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b7e6:	f7f5 f955 	bl	8000a94 <__aeabi_dcmplt>
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	f040 8275 	bne.w	800bcda <_dtoa_r+0x932>
 800b7f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b7f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b7f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	f2c0 814b 	blt.w	800ba96 <_dtoa_r+0x6ee>
 800b800:	f1ba 0f0e 	cmp.w	sl, #14
 800b804:	f300 8147 	bgt.w	800ba96 <_dtoa_r+0x6ee>
 800b808:	4b69      	ldr	r3, [pc, #420]	; (800b9b0 <_dtoa_r+0x608>)
 800b80a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b812:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b816:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b818:	2b00      	cmp	r3, #0
 800b81a:	f280 80d7 	bge.w	800b9cc <_dtoa_r+0x624>
 800b81e:	f1b8 0f00 	cmp.w	r8, #0
 800b822:	f300 80d3 	bgt.w	800b9cc <_dtoa_r+0x624>
 800b826:	f040 8257 	bne.w	800bcd8 <_dtoa_r+0x930>
 800b82a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b82e:	2200      	movs	r2, #0
 800b830:	4b64      	ldr	r3, [pc, #400]	; (800b9c4 <_dtoa_r+0x61c>)
 800b832:	f7f4 febd 	bl	80005b0 <__aeabi_dmul>
 800b836:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b83a:	f7f5 f93f 	bl	8000abc <__aeabi_dcmpge>
 800b83e:	4646      	mov	r6, r8
 800b840:	4647      	mov	r7, r8
 800b842:	2800      	cmp	r0, #0
 800b844:	f040 822d 	bne.w	800bca2 <_dtoa_r+0x8fa>
 800b848:	9b06      	ldr	r3, [sp, #24]
 800b84a:	9a06      	ldr	r2, [sp, #24]
 800b84c:	1c5d      	adds	r5, r3, #1
 800b84e:	2331      	movs	r3, #49	; 0x31
 800b850:	f10a 0a01 	add.w	sl, sl, #1
 800b854:	7013      	strb	r3, [r2, #0]
 800b856:	e228      	b.n	800bcaa <_dtoa_r+0x902>
 800b858:	07f2      	lsls	r2, r6, #31
 800b85a:	d505      	bpl.n	800b868 <_dtoa_r+0x4c0>
 800b85c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b860:	f7f4 fea6 	bl	80005b0 <__aeabi_dmul>
 800b864:	2301      	movs	r3, #1
 800b866:	3501      	adds	r5, #1
 800b868:	1076      	asrs	r6, r6, #1
 800b86a:	3708      	adds	r7, #8
 800b86c:	e76e      	b.n	800b74c <_dtoa_r+0x3a4>
 800b86e:	2502      	movs	r5, #2
 800b870:	e771      	b.n	800b756 <_dtoa_r+0x3ae>
 800b872:	4657      	mov	r7, sl
 800b874:	4646      	mov	r6, r8
 800b876:	e790      	b.n	800b79a <_dtoa_r+0x3f2>
 800b878:	4b4d      	ldr	r3, [pc, #308]	; (800b9b0 <_dtoa_r+0x608>)
 800b87a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b87e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b884:	2b00      	cmp	r3, #0
 800b886:	d048      	beq.n	800b91a <_dtoa_r+0x572>
 800b888:	4602      	mov	r2, r0
 800b88a:	460b      	mov	r3, r1
 800b88c:	2000      	movs	r0, #0
 800b88e:	494e      	ldr	r1, [pc, #312]	; (800b9c8 <_dtoa_r+0x620>)
 800b890:	f7f4 ffb8 	bl	8000804 <__aeabi_ddiv>
 800b894:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b898:	f7f4 fcd2 	bl	8000240 <__aeabi_dsub>
 800b89c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b8a0:	9d06      	ldr	r5, [sp, #24]
 800b8a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8a6:	f7f5 f933 	bl	8000b10 <__aeabi_d2iz>
 800b8aa:	9011      	str	r0, [sp, #68]	; 0x44
 800b8ac:	f7f4 fe16 	bl	80004dc <__aeabi_i2d>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8b8:	f7f4 fcc2 	bl	8000240 <__aeabi_dsub>
 800b8bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b8be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8c2:	3330      	adds	r3, #48	; 0x30
 800b8c4:	f805 3b01 	strb.w	r3, [r5], #1
 800b8c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b8cc:	f7f5 f8e2 	bl	8000a94 <__aeabi_dcmplt>
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	d163      	bne.n	800b99c <_dtoa_r+0x5f4>
 800b8d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8d8:	2000      	movs	r0, #0
 800b8da:	4937      	ldr	r1, [pc, #220]	; (800b9b8 <_dtoa_r+0x610>)
 800b8dc:	f7f4 fcb0 	bl	8000240 <__aeabi_dsub>
 800b8e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b8e4:	f7f5 f8d6 	bl	8000a94 <__aeabi_dcmplt>
 800b8e8:	2800      	cmp	r0, #0
 800b8ea:	f040 80b5 	bne.w	800ba58 <_dtoa_r+0x6b0>
 800b8ee:	9b06      	ldr	r3, [sp, #24]
 800b8f0:	1aeb      	subs	r3, r5, r3
 800b8f2:	429e      	cmp	r6, r3
 800b8f4:	f77f af7c 	ble.w	800b7f0 <_dtoa_r+0x448>
 800b8f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	4b2f      	ldr	r3, [pc, #188]	; (800b9bc <_dtoa_r+0x614>)
 800b900:	f7f4 fe56 	bl	80005b0 <__aeabi_dmul>
 800b904:	2200      	movs	r2, #0
 800b906:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b90a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b90e:	4b2b      	ldr	r3, [pc, #172]	; (800b9bc <_dtoa_r+0x614>)
 800b910:	f7f4 fe4e 	bl	80005b0 <__aeabi_dmul>
 800b914:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b918:	e7c3      	b.n	800b8a2 <_dtoa_r+0x4fa>
 800b91a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b91e:	f7f4 fe47 	bl	80005b0 <__aeabi_dmul>
 800b922:	9b06      	ldr	r3, [sp, #24]
 800b924:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b928:	199d      	adds	r5, r3, r6
 800b92a:	461e      	mov	r6, r3
 800b92c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b930:	f7f5 f8ee 	bl	8000b10 <__aeabi_d2iz>
 800b934:	9011      	str	r0, [sp, #68]	; 0x44
 800b936:	f7f4 fdd1 	bl	80004dc <__aeabi_i2d>
 800b93a:	4602      	mov	r2, r0
 800b93c:	460b      	mov	r3, r1
 800b93e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b942:	f7f4 fc7d 	bl	8000240 <__aeabi_dsub>
 800b946:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b948:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b94c:	3330      	adds	r3, #48	; 0x30
 800b94e:	f806 3b01 	strb.w	r3, [r6], #1
 800b952:	42ae      	cmp	r6, r5
 800b954:	f04f 0200 	mov.w	r2, #0
 800b958:	d124      	bne.n	800b9a4 <_dtoa_r+0x5fc>
 800b95a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b95e:	4b1a      	ldr	r3, [pc, #104]	; (800b9c8 <_dtoa_r+0x620>)
 800b960:	f7f4 fc70 	bl	8000244 <__adddf3>
 800b964:	4602      	mov	r2, r0
 800b966:	460b      	mov	r3, r1
 800b968:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b96c:	f7f5 f8b0 	bl	8000ad0 <__aeabi_dcmpgt>
 800b970:	2800      	cmp	r0, #0
 800b972:	d171      	bne.n	800ba58 <_dtoa_r+0x6b0>
 800b974:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b978:	2000      	movs	r0, #0
 800b97a:	4913      	ldr	r1, [pc, #76]	; (800b9c8 <_dtoa_r+0x620>)
 800b97c:	f7f4 fc60 	bl	8000240 <__aeabi_dsub>
 800b980:	4602      	mov	r2, r0
 800b982:	460b      	mov	r3, r1
 800b984:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b988:	f7f5 f884 	bl	8000a94 <__aeabi_dcmplt>
 800b98c:	2800      	cmp	r0, #0
 800b98e:	f43f af2f 	beq.w	800b7f0 <_dtoa_r+0x448>
 800b992:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b996:	1e6a      	subs	r2, r5, #1
 800b998:	2b30      	cmp	r3, #48	; 0x30
 800b99a:	d001      	beq.n	800b9a0 <_dtoa_r+0x5f8>
 800b99c:	46ba      	mov	sl, r7
 800b99e:	e04a      	b.n	800ba36 <_dtoa_r+0x68e>
 800b9a0:	4615      	mov	r5, r2
 800b9a2:	e7f6      	b.n	800b992 <_dtoa_r+0x5ea>
 800b9a4:	4b05      	ldr	r3, [pc, #20]	; (800b9bc <_dtoa_r+0x614>)
 800b9a6:	f7f4 fe03 	bl	80005b0 <__aeabi_dmul>
 800b9aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9ae:	e7bd      	b.n	800b92c <_dtoa_r+0x584>
 800b9b0:	0800e1c8 	.word	0x0800e1c8
 800b9b4:	0800e1a0 	.word	0x0800e1a0
 800b9b8:	3ff00000 	.word	0x3ff00000
 800b9bc:	40240000 	.word	0x40240000
 800b9c0:	401c0000 	.word	0x401c0000
 800b9c4:	40140000 	.word	0x40140000
 800b9c8:	3fe00000 	.word	0x3fe00000
 800b9cc:	9d06      	ldr	r5, [sp, #24]
 800b9ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b9d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9d6:	4630      	mov	r0, r6
 800b9d8:	4639      	mov	r1, r7
 800b9da:	f7f4 ff13 	bl	8000804 <__aeabi_ddiv>
 800b9de:	f7f5 f897 	bl	8000b10 <__aeabi_d2iz>
 800b9e2:	4681      	mov	r9, r0
 800b9e4:	f7f4 fd7a 	bl	80004dc <__aeabi_i2d>
 800b9e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b9ec:	f7f4 fde0 	bl	80005b0 <__aeabi_dmul>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	4630      	mov	r0, r6
 800b9f6:	4639      	mov	r1, r7
 800b9f8:	f7f4 fc22 	bl	8000240 <__aeabi_dsub>
 800b9fc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800ba00:	f805 6b01 	strb.w	r6, [r5], #1
 800ba04:	9e06      	ldr	r6, [sp, #24]
 800ba06:	4602      	mov	r2, r0
 800ba08:	1bae      	subs	r6, r5, r6
 800ba0a:	45b0      	cmp	r8, r6
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	d135      	bne.n	800ba7c <_dtoa_r+0x6d4>
 800ba10:	f7f4 fc18 	bl	8000244 <__adddf3>
 800ba14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba18:	4606      	mov	r6, r0
 800ba1a:	460f      	mov	r7, r1
 800ba1c:	f7f5 f858 	bl	8000ad0 <__aeabi_dcmpgt>
 800ba20:	b9c8      	cbnz	r0, 800ba56 <_dtoa_r+0x6ae>
 800ba22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba26:	4630      	mov	r0, r6
 800ba28:	4639      	mov	r1, r7
 800ba2a:	f7f5 f829 	bl	8000a80 <__aeabi_dcmpeq>
 800ba2e:	b110      	cbz	r0, 800ba36 <_dtoa_r+0x68e>
 800ba30:	f019 0f01 	tst.w	r9, #1
 800ba34:	d10f      	bne.n	800ba56 <_dtoa_r+0x6ae>
 800ba36:	4659      	mov	r1, fp
 800ba38:	4620      	mov	r0, r4
 800ba3a:	f000 fac6 	bl	800bfca <_Bfree>
 800ba3e:	2300      	movs	r3, #0
 800ba40:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ba42:	702b      	strb	r3, [r5, #0]
 800ba44:	f10a 0301 	add.w	r3, sl, #1
 800ba48:	6013      	str	r3, [r2, #0]
 800ba4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f43f acf3 	beq.w	800b438 <_dtoa_r+0x90>
 800ba52:	601d      	str	r5, [r3, #0]
 800ba54:	e4f0      	b.n	800b438 <_dtoa_r+0x90>
 800ba56:	4657      	mov	r7, sl
 800ba58:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ba5c:	1e6b      	subs	r3, r5, #1
 800ba5e:	2a39      	cmp	r2, #57	; 0x39
 800ba60:	d106      	bne.n	800ba70 <_dtoa_r+0x6c8>
 800ba62:	9a06      	ldr	r2, [sp, #24]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d107      	bne.n	800ba78 <_dtoa_r+0x6d0>
 800ba68:	2330      	movs	r3, #48	; 0x30
 800ba6a:	7013      	strb	r3, [r2, #0]
 800ba6c:	4613      	mov	r3, r2
 800ba6e:	3701      	adds	r7, #1
 800ba70:	781a      	ldrb	r2, [r3, #0]
 800ba72:	3201      	adds	r2, #1
 800ba74:	701a      	strb	r2, [r3, #0]
 800ba76:	e791      	b.n	800b99c <_dtoa_r+0x5f4>
 800ba78:	461d      	mov	r5, r3
 800ba7a:	e7ed      	b.n	800ba58 <_dtoa_r+0x6b0>
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	4b99      	ldr	r3, [pc, #612]	; (800bce4 <_dtoa_r+0x93c>)
 800ba80:	f7f4 fd96 	bl	80005b0 <__aeabi_dmul>
 800ba84:	2200      	movs	r2, #0
 800ba86:	2300      	movs	r3, #0
 800ba88:	4606      	mov	r6, r0
 800ba8a:	460f      	mov	r7, r1
 800ba8c:	f7f4 fff8 	bl	8000a80 <__aeabi_dcmpeq>
 800ba90:	2800      	cmp	r0, #0
 800ba92:	d09e      	beq.n	800b9d2 <_dtoa_r+0x62a>
 800ba94:	e7cf      	b.n	800ba36 <_dtoa_r+0x68e>
 800ba96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba98:	2a00      	cmp	r2, #0
 800ba9a:	f000 8088 	beq.w	800bbae <_dtoa_r+0x806>
 800ba9e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800baa0:	2a01      	cmp	r2, #1
 800baa2:	dc6d      	bgt.n	800bb80 <_dtoa_r+0x7d8>
 800baa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800baa6:	2a00      	cmp	r2, #0
 800baa8:	d066      	beq.n	800bb78 <_dtoa_r+0x7d0>
 800baaa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800baae:	464d      	mov	r5, r9
 800bab0:	9e08      	ldr	r6, [sp, #32]
 800bab2:	9a07      	ldr	r2, [sp, #28]
 800bab4:	2101      	movs	r1, #1
 800bab6:	441a      	add	r2, r3
 800bab8:	4620      	mov	r0, r4
 800baba:	4499      	add	r9, r3
 800babc:	9207      	str	r2, [sp, #28]
 800babe:	f000 fb24 	bl	800c10a <__i2b>
 800bac2:	4607      	mov	r7, r0
 800bac4:	2d00      	cmp	r5, #0
 800bac6:	dd0b      	ble.n	800bae0 <_dtoa_r+0x738>
 800bac8:	9b07      	ldr	r3, [sp, #28]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	dd08      	ble.n	800bae0 <_dtoa_r+0x738>
 800bace:	42ab      	cmp	r3, r5
 800bad0:	bfa8      	it	ge
 800bad2:	462b      	movge	r3, r5
 800bad4:	9a07      	ldr	r2, [sp, #28]
 800bad6:	eba9 0903 	sub.w	r9, r9, r3
 800bada:	1aed      	subs	r5, r5, r3
 800badc:	1ad3      	subs	r3, r2, r3
 800bade:	9307      	str	r3, [sp, #28]
 800bae0:	9b08      	ldr	r3, [sp, #32]
 800bae2:	b1eb      	cbz	r3, 800bb20 <_dtoa_r+0x778>
 800bae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d065      	beq.n	800bbb6 <_dtoa_r+0x80e>
 800baea:	b18e      	cbz	r6, 800bb10 <_dtoa_r+0x768>
 800baec:	4639      	mov	r1, r7
 800baee:	4632      	mov	r2, r6
 800baf0:	4620      	mov	r0, r4
 800baf2:	f000 fba9 	bl	800c248 <__pow5mult>
 800baf6:	465a      	mov	r2, fp
 800baf8:	4601      	mov	r1, r0
 800bafa:	4607      	mov	r7, r0
 800bafc:	4620      	mov	r0, r4
 800bafe:	f000 fb0d 	bl	800c11c <__multiply>
 800bb02:	4659      	mov	r1, fp
 800bb04:	900a      	str	r0, [sp, #40]	; 0x28
 800bb06:	4620      	mov	r0, r4
 800bb08:	f000 fa5f 	bl	800bfca <_Bfree>
 800bb0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb0e:	469b      	mov	fp, r3
 800bb10:	9b08      	ldr	r3, [sp, #32]
 800bb12:	1b9a      	subs	r2, r3, r6
 800bb14:	d004      	beq.n	800bb20 <_dtoa_r+0x778>
 800bb16:	4659      	mov	r1, fp
 800bb18:	4620      	mov	r0, r4
 800bb1a:	f000 fb95 	bl	800c248 <__pow5mult>
 800bb1e:	4683      	mov	fp, r0
 800bb20:	2101      	movs	r1, #1
 800bb22:	4620      	mov	r0, r4
 800bb24:	f000 faf1 	bl	800c10a <__i2b>
 800bb28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb2a:	4606      	mov	r6, r0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	f000 81c6 	beq.w	800bebe <_dtoa_r+0xb16>
 800bb32:	461a      	mov	r2, r3
 800bb34:	4601      	mov	r1, r0
 800bb36:	4620      	mov	r0, r4
 800bb38:	f000 fb86 	bl	800c248 <__pow5mult>
 800bb3c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bb3e:	4606      	mov	r6, r0
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	dc3e      	bgt.n	800bbc2 <_dtoa_r+0x81a>
 800bb44:	9b02      	ldr	r3, [sp, #8]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d137      	bne.n	800bbba <_dtoa_r+0x812>
 800bb4a:	9b03      	ldr	r3, [sp, #12]
 800bb4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d134      	bne.n	800bbbe <_dtoa_r+0x816>
 800bb54:	9b03      	ldr	r3, [sp, #12]
 800bb56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb5a:	0d1b      	lsrs	r3, r3, #20
 800bb5c:	051b      	lsls	r3, r3, #20
 800bb5e:	b12b      	cbz	r3, 800bb6c <_dtoa_r+0x7c4>
 800bb60:	9b07      	ldr	r3, [sp, #28]
 800bb62:	f109 0901 	add.w	r9, r9, #1
 800bb66:	3301      	adds	r3, #1
 800bb68:	9307      	str	r3, [sp, #28]
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	9308      	str	r3, [sp, #32]
 800bb6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d128      	bne.n	800bbc6 <_dtoa_r+0x81e>
 800bb74:	2001      	movs	r0, #1
 800bb76:	e02e      	b.n	800bbd6 <_dtoa_r+0x82e>
 800bb78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bb7a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bb7e:	e796      	b.n	800baae <_dtoa_r+0x706>
 800bb80:	9b08      	ldr	r3, [sp, #32]
 800bb82:	f108 36ff 	add.w	r6, r8, #4294967295
 800bb86:	42b3      	cmp	r3, r6
 800bb88:	bfb7      	itett	lt
 800bb8a:	9b08      	ldrlt	r3, [sp, #32]
 800bb8c:	1b9e      	subge	r6, r3, r6
 800bb8e:	1af2      	sublt	r2, r6, r3
 800bb90:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800bb92:	bfbf      	itttt	lt
 800bb94:	9608      	strlt	r6, [sp, #32]
 800bb96:	189b      	addlt	r3, r3, r2
 800bb98:	930c      	strlt	r3, [sp, #48]	; 0x30
 800bb9a:	2600      	movlt	r6, #0
 800bb9c:	f1b8 0f00 	cmp.w	r8, #0
 800bba0:	bfb9      	ittee	lt
 800bba2:	eba9 0508 	sublt.w	r5, r9, r8
 800bba6:	2300      	movlt	r3, #0
 800bba8:	464d      	movge	r5, r9
 800bbaa:	4643      	movge	r3, r8
 800bbac:	e781      	b.n	800bab2 <_dtoa_r+0x70a>
 800bbae:	9e08      	ldr	r6, [sp, #32]
 800bbb0:	464d      	mov	r5, r9
 800bbb2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bbb4:	e786      	b.n	800bac4 <_dtoa_r+0x71c>
 800bbb6:	9a08      	ldr	r2, [sp, #32]
 800bbb8:	e7ad      	b.n	800bb16 <_dtoa_r+0x76e>
 800bbba:	2300      	movs	r3, #0
 800bbbc:	e7d6      	b.n	800bb6c <_dtoa_r+0x7c4>
 800bbbe:	9b02      	ldr	r3, [sp, #8]
 800bbc0:	e7d4      	b.n	800bb6c <_dtoa_r+0x7c4>
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	9308      	str	r3, [sp, #32]
 800bbc6:	6933      	ldr	r3, [r6, #16]
 800bbc8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bbcc:	6918      	ldr	r0, [r3, #16]
 800bbce:	f000 fa4e 	bl	800c06e <__hi0bits>
 800bbd2:	f1c0 0020 	rsb	r0, r0, #32
 800bbd6:	9b07      	ldr	r3, [sp, #28]
 800bbd8:	4418      	add	r0, r3
 800bbda:	f010 001f 	ands.w	r0, r0, #31
 800bbde:	d047      	beq.n	800bc70 <_dtoa_r+0x8c8>
 800bbe0:	f1c0 0320 	rsb	r3, r0, #32
 800bbe4:	2b04      	cmp	r3, #4
 800bbe6:	dd3b      	ble.n	800bc60 <_dtoa_r+0x8b8>
 800bbe8:	9b07      	ldr	r3, [sp, #28]
 800bbea:	f1c0 001c 	rsb	r0, r0, #28
 800bbee:	4481      	add	r9, r0
 800bbf0:	4405      	add	r5, r0
 800bbf2:	4403      	add	r3, r0
 800bbf4:	9307      	str	r3, [sp, #28]
 800bbf6:	f1b9 0f00 	cmp.w	r9, #0
 800bbfa:	dd05      	ble.n	800bc08 <_dtoa_r+0x860>
 800bbfc:	4659      	mov	r1, fp
 800bbfe:	464a      	mov	r2, r9
 800bc00:	4620      	mov	r0, r4
 800bc02:	f000 fb6f 	bl	800c2e4 <__lshift>
 800bc06:	4683      	mov	fp, r0
 800bc08:	9b07      	ldr	r3, [sp, #28]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	dd05      	ble.n	800bc1a <_dtoa_r+0x872>
 800bc0e:	4631      	mov	r1, r6
 800bc10:	461a      	mov	r2, r3
 800bc12:	4620      	mov	r0, r4
 800bc14:	f000 fb66 	bl	800c2e4 <__lshift>
 800bc18:	4606      	mov	r6, r0
 800bc1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc1c:	b353      	cbz	r3, 800bc74 <_dtoa_r+0x8cc>
 800bc1e:	4631      	mov	r1, r6
 800bc20:	4658      	mov	r0, fp
 800bc22:	f000 fbb3 	bl	800c38c <__mcmp>
 800bc26:	2800      	cmp	r0, #0
 800bc28:	da24      	bge.n	800bc74 <_dtoa_r+0x8cc>
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	4659      	mov	r1, fp
 800bc2e:	220a      	movs	r2, #10
 800bc30:	4620      	mov	r0, r4
 800bc32:	f000 f9e1 	bl	800bff8 <__multadd>
 800bc36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc38:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bc3c:	4683      	mov	fp, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	f000 8144 	beq.w	800becc <_dtoa_r+0xb24>
 800bc44:	2300      	movs	r3, #0
 800bc46:	4639      	mov	r1, r7
 800bc48:	220a      	movs	r2, #10
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	f000 f9d4 	bl	800bff8 <__multadd>
 800bc50:	9b04      	ldr	r3, [sp, #16]
 800bc52:	4607      	mov	r7, r0
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	dc4d      	bgt.n	800bcf4 <_dtoa_r+0x94c>
 800bc58:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bc5a:	2b02      	cmp	r3, #2
 800bc5c:	dd4a      	ble.n	800bcf4 <_dtoa_r+0x94c>
 800bc5e:	e011      	b.n	800bc84 <_dtoa_r+0x8dc>
 800bc60:	d0c9      	beq.n	800bbf6 <_dtoa_r+0x84e>
 800bc62:	9a07      	ldr	r2, [sp, #28]
 800bc64:	331c      	adds	r3, #28
 800bc66:	441a      	add	r2, r3
 800bc68:	4499      	add	r9, r3
 800bc6a:	441d      	add	r5, r3
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	e7c1      	b.n	800bbf4 <_dtoa_r+0x84c>
 800bc70:	4603      	mov	r3, r0
 800bc72:	e7f6      	b.n	800bc62 <_dtoa_r+0x8ba>
 800bc74:	f1b8 0f00 	cmp.w	r8, #0
 800bc78:	dc36      	bgt.n	800bce8 <_dtoa_r+0x940>
 800bc7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bc7c:	2b02      	cmp	r3, #2
 800bc7e:	dd33      	ble.n	800bce8 <_dtoa_r+0x940>
 800bc80:	f8cd 8010 	str.w	r8, [sp, #16]
 800bc84:	9b04      	ldr	r3, [sp, #16]
 800bc86:	b963      	cbnz	r3, 800bca2 <_dtoa_r+0x8fa>
 800bc88:	4631      	mov	r1, r6
 800bc8a:	2205      	movs	r2, #5
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	f000 f9b3 	bl	800bff8 <__multadd>
 800bc92:	4601      	mov	r1, r0
 800bc94:	4606      	mov	r6, r0
 800bc96:	4658      	mov	r0, fp
 800bc98:	f000 fb78 	bl	800c38c <__mcmp>
 800bc9c:	2800      	cmp	r0, #0
 800bc9e:	f73f add3 	bgt.w	800b848 <_dtoa_r+0x4a0>
 800bca2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bca4:	9d06      	ldr	r5, [sp, #24]
 800bca6:	ea6f 0a03 	mvn.w	sl, r3
 800bcaa:	f04f 0900 	mov.w	r9, #0
 800bcae:	4631      	mov	r1, r6
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	f000 f98a 	bl	800bfca <_Bfree>
 800bcb6:	2f00      	cmp	r7, #0
 800bcb8:	f43f aebd 	beq.w	800ba36 <_dtoa_r+0x68e>
 800bcbc:	f1b9 0f00 	cmp.w	r9, #0
 800bcc0:	d005      	beq.n	800bcce <_dtoa_r+0x926>
 800bcc2:	45b9      	cmp	r9, r7
 800bcc4:	d003      	beq.n	800bcce <_dtoa_r+0x926>
 800bcc6:	4649      	mov	r1, r9
 800bcc8:	4620      	mov	r0, r4
 800bcca:	f000 f97e 	bl	800bfca <_Bfree>
 800bcce:	4639      	mov	r1, r7
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	f000 f97a 	bl	800bfca <_Bfree>
 800bcd6:	e6ae      	b.n	800ba36 <_dtoa_r+0x68e>
 800bcd8:	2600      	movs	r6, #0
 800bcda:	4637      	mov	r7, r6
 800bcdc:	e7e1      	b.n	800bca2 <_dtoa_r+0x8fa>
 800bcde:	46ba      	mov	sl, r7
 800bce0:	4637      	mov	r7, r6
 800bce2:	e5b1      	b.n	800b848 <_dtoa_r+0x4a0>
 800bce4:	40240000 	.word	0x40240000
 800bce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcea:	f8cd 8010 	str.w	r8, [sp, #16]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	f000 80f3 	beq.w	800beda <_dtoa_r+0xb32>
 800bcf4:	2d00      	cmp	r5, #0
 800bcf6:	dd05      	ble.n	800bd04 <_dtoa_r+0x95c>
 800bcf8:	4639      	mov	r1, r7
 800bcfa:	462a      	mov	r2, r5
 800bcfc:	4620      	mov	r0, r4
 800bcfe:	f000 faf1 	bl	800c2e4 <__lshift>
 800bd02:	4607      	mov	r7, r0
 800bd04:	9b08      	ldr	r3, [sp, #32]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d04c      	beq.n	800bda4 <_dtoa_r+0x9fc>
 800bd0a:	6879      	ldr	r1, [r7, #4]
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	f000 f928 	bl	800bf62 <_Balloc>
 800bd12:	4605      	mov	r5, r0
 800bd14:	693a      	ldr	r2, [r7, #16]
 800bd16:	f107 010c 	add.w	r1, r7, #12
 800bd1a:	3202      	adds	r2, #2
 800bd1c:	0092      	lsls	r2, r2, #2
 800bd1e:	300c      	adds	r0, #12
 800bd20:	f000 f912 	bl	800bf48 <memcpy>
 800bd24:	2201      	movs	r2, #1
 800bd26:	4629      	mov	r1, r5
 800bd28:	4620      	mov	r0, r4
 800bd2a:	f000 fadb 	bl	800c2e4 <__lshift>
 800bd2e:	46b9      	mov	r9, r7
 800bd30:	4607      	mov	r7, r0
 800bd32:	9b06      	ldr	r3, [sp, #24]
 800bd34:	9307      	str	r3, [sp, #28]
 800bd36:	9b02      	ldr	r3, [sp, #8]
 800bd38:	f003 0301 	and.w	r3, r3, #1
 800bd3c:	9308      	str	r3, [sp, #32]
 800bd3e:	4631      	mov	r1, r6
 800bd40:	4658      	mov	r0, fp
 800bd42:	f7ff faa1 	bl	800b288 <quorem>
 800bd46:	4649      	mov	r1, r9
 800bd48:	4605      	mov	r5, r0
 800bd4a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bd4e:	4658      	mov	r0, fp
 800bd50:	f000 fb1c 	bl	800c38c <__mcmp>
 800bd54:	463a      	mov	r2, r7
 800bd56:	9002      	str	r0, [sp, #8]
 800bd58:	4631      	mov	r1, r6
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	f000 fb30 	bl	800c3c0 <__mdiff>
 800bd60:	68c3      	ldr	r3, [r0, #12]
 800bd62:	4602      	mov	r2, r0
 800bd64:	bb03      	cbnz	r3, 800bda8 <_dtoa_r+0xa00>
 800bd66:	4601      	mov	r1, r0
 800bd68:	9009      	str	r0, [sp, #36]	; 0x24
 800bd6a:	4658      	mov	r0, fp
 800bd6c:	f000 fb0e 	bl	800c38c <__mcmp>
 800bd70:	4603      	mov	r3, r0
 800bd72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd74:	4611      	mov	r1, r2
 800bd76:	4620      	mov	r0, r4
 800bd78:	9309      	str	r3, [sp, #36]	; 0x24
 800bd7a:	f000 f926 	bl	800bfca <_Bfree>
 800bd7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd80:	b9a3      	cbnz	r3, 800bdac <_dtoa_r+0xa04>
 800bd82:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bd84:	b992      	cbnz	r2, 800bdac <_dtoa_r+0xa04>
 800bd86:	9a08      	ldr	r2, [sp, #32]
 800bd88:	b982      	cbnz	r2, 800bdac <_dtoa_r+0xa04>
 800bd8a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bd8e:	d029      	beq.n	800bde4 <_dtoa_r+0xa3c>
 800bd90:	9b02      	ldr	r3, [sp, #8]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	dd01      	ble.n	800bd9a <_dtoa_r+0x9f2>
 800bd96:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800bd9a:	9b07      	ldr	r3, [sp, #28]
 800bd9c:	1c5d      	adds	r5, r3, #1
 800bd9e:	f883 8000 	strb.w	r8, [r3]
 800bda2:	e784      	b.n	800bcae <_dtoa_r+0x906>
 800bda4:	4638      	mov	r0, r7
 800bda6:	e7c2      	b.n	800bd2e <_dtoa_r+0x986>
 800bda8:	2301      	movs	r3, #1
 800bdaa:	e7e3      	b.n	800bd74 <_dtoa_r+0x9cc>
 800bdac:	9a02      	ldr	r2, [sp, #8]
 800bdae:	2a00      	cmp	r2, #0
 800bdb0:	db04      	blt.n	800bdbc <_dtoa_r+0xa14>
 800bdb2:	d123      	bne.n	800bdfc <_dtoa_r+0xa54>
 800bdb4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bdb6:	bb0a      	cbnz	r2, 800bdfc <_dtoa_r+0xa54>
 800bdb8:	9a08      	ldr	r2, [sp, #32]
 800bdba:	b9fa      	cbnz	r2, 800bdfc <_dtoa_r+0xa54>
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	ddec      	ble.n	800bd9a <_dtoa_r+0x9f2>
 800bdc0:	4659      	mov	r1, fp
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	f000 fa8d 	bl	800c2e4 <__lshift>
 800bdca:	4631      	mov	r1, r6
 800bdcc:	4683      	mov	fp, r0
 800bdce:	f000 fadd 	bl	800c38c <__mcmp>
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	dc03      	bgt.n	800bdde <_dtoa_r+0xa36>
 800bdd6:	d1e0      	bne.n	800bd9a <_dtoa_r+0x9f2>
 800bdd8:	f018 0f01 	tst.w	r8, #1
 800bddc:	d0dd      	beq.n	800bd9a <_dtoa_r+0x9f2>
 800bdde:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bde2:	d1d8      	bne.n	800bd96 <_dtoa_r+0x9ee>
 800bde4:	9b07      	ldr	r3, [sp, #28]
 800bde6:	9a07      	ldr	r2, [sp, #28]
 800bde8:	1c5d      	adds	r5, r3, #1
 800bdea:	2339      	movs	r3, #57	; 0x39
 800bdec:	7013      	strb	r3, [r2, #0]
 800bdee:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bdf2:	1e6a      	subs	r2, r5, #1
 800bdf4:	2b39      	cmp	r3, #57	; 0x39
 800bdf6:	d04d      	beq.n	800be94 <_dtoa_r+0xaec>
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	e052      	b.n	800bea2 <_dtoa_r+0xafa>
 800bdfc:	9a07      	ldr	r2, [sp, #28]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	f102 0501 	add.w	r5, r2, #1
 800be04:	dd06      	ble.n	800be14 <_dtoa_r+0xa6c>
 800be06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800be0a:	d0eb      	beq.n	800bde4 <_dtoa_r+0xa3c>
 800be0c:	f108 0801 	add.w	r8, r8, #1
 800be10:	9b07      	ldr	r3, [sp, #28]
 800be12:	e7c4      	b.n	800bd9e <_dtoa_r+0x9f6>
 800be14:	9b06      	ldr	r3, [sp, #24]
 800be16:	9a04      	ldr	r2, [sp, #16]
 800be18:	1aeb      	subs	r3, r5, r3
 800be1a:	4293      	cmp	r3, r2
 800be1c:	f805 8c01 	strb.w	r8, [r5, #-1]
 800be20:	d021      	beq.n	800be66 <_dtoa_r+0xabe>
 800be22:	4659      	mov	r1, fp
 800be24:	2300      	movs	r3, #0
 800be26:	220a      	movs	r2, #10
 800be28:	4620      	mov	r0, r4
 800be2a:	f000 f8e5 	bl	800bff8 <__multadd>
 800be2e:	45b9      	cmp	r9, r7
 800be30:	4683      	mov	fp, r0
 800be32:	f04f 0300 	mov.w	r3, #0
 800be36:	f04f 020a 	mov.w	r2, #10
 800be3a:	4649      	mov	r1, r9
 800be3c:	4620      	mov	r0, r4
 800be3e:	d105      	bne.n	800be4c <_dtoa_r+0xaa4>
 800be40:	f000 f8da 	bl	800bff8 <__multadd>
 800be44:	4681      	mov	r9, r0
 800be46:	4607      	mov	r7, r0
 800be48:	9507      	str	r5, [sp, #28]
 800be4a:	e778      	b.n	800bd3e <_dtoa_r+0x996>
 800be4c:	f000 f8d4 	bl	800bff8 <__multadd>
 800be50:	4639      	mov	r1, r7
 800be52:	4681      	mov	r9, r0
 800be54:	2300      	movs	r3, #0
 800be56:	220a      	movs	r2, #10
 800be58:	4620      	mov	r0, r4
 800be5a:	f000 f8cd 	bl	800bff8 <__multadd>
 800be5e:	4607      	mov	r7, r0
 800be60:	e7f2      	b.n	800be48 <_dtoa_r+0xaa0>
 800be62:	f04f 0900 	mov.w	r9, #0
 800be66:	4659      	mov	r1, fp
 800be68:	2201      	movs	r2, #1
 800be6a:	4620      	mov	r0, r4
 800be6c:	f000 fa3a 	bl	800c2e4 <__lshift>
 800be70:	4631      	mov	r1, r6
 800be72:	4683      	mov	fp, r0
 800be74:	f000 fa8a 	bl	800c38c <__mcmp>
 800be78:	2800      	cmp	r0, #0
 800be7a:	dcb8      	bgt.n	800bdee <_dtoa_r+0xa46>
 800be7c:	d102      	bne.n	800be84 <_dtoa_r+0xadc>
 800be7e:	f018 0f01 	tst.w	r8, #1
 800be82:	d1b4      	bne.n	800bdee <_dtoa_r+0xa46>
 800be84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800be88:	1e6a      	subs	r2, r5, #1
 800be8a:	2b30      	cmp	r3, #48	; 0x30
 800be8c:	f47f af0f 	bne.w	800bcae <_dtoa_r+0x906>
 800be90:	4615      	mov	r5, r2
 800be92:	e7f7      	b.n	800be84 <_dtoa_r+0xadc>
 800be94:	9b06      	ldr	r3, [sp, #24]
 800be96:	4293      	cmp	r3, r2
 800be98:	d105      	bne.n	800bea6 <_dtoa_r+0xafe>
 800be9a:	2331      	movs	r3, #49	; 0x31
 800be9c:	9a06      	ldr	r2, [sp, #24]
 800be9e:	f10a 0a01 	add.w	sl, sl, #1
 800bea2:	7013      	strb	r3, [r2, #0]
 800bea4:	e703      	b.n	800bcae <_dtoa_r+0x906>
 800bea6:	4615      	mov	r5, r2
 800bea8:	e7a1      	b.n	800bdee <_dtoa_r+0xa46>
 800beaa:	4b17      	ldr	r3, [pc, #92]	; (800bf08 <_dtoa_r+0xb60>)
 800beac:	f7ff bae1 	b.w	800b472 <_dtoa_r+0xca>
 800beb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	f47f aabb 	bne.w	800b42e <_dtoa_r+0x86>
 800beb8:	4b14      	ldr	r3, [pc, #80]	; (800bf0c <_dtoa_r+0xb64>)
 800beba:	f7ff bada 	b.w	800b472 <_dtoa_r+0xca>
 800bebe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	f77f ae3f 	ble.w	800bb44 <_dtoa_r+0x79c>
 800bec6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bec8:	9308      	str	r3, [sp, #32]
 800beca:	e653      	b.n	800bb74 <_dtoa_r+0x7cc>
 800becc:	9b04      	ldr	r3, [sp, #16]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	dc03      	bgt.n	800beda <_dtoa_r+0xb32>
 800bed2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bed4:	2b02      	cmp	r3, #2
 800bed6:	f73f aed5 	bgt.w	800bc84 <_dtoa_r+0x8dc>
 800beda:	9d06      	ldr	r5, [sp, #24]
 800bedc:	4631      	mov	r1, r6
 800bede:	4658      	mov	r0, fp
 800bee0:	f7ff f9d2 	bl	800b288 <quorem>
 800bee4:	9b06      	ldr	r3, [sp, #24]
 800bee6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800beea:	f805 8b01 	strb.w	r8, [r5], #1
 800beee:	9a04      	ldr	r2, [sp, #16]
 800bef0:	1aeb      	subs	r3, r5, r3
 800bef2:	429a      	cmp	r2, r3
 800bef4:	ddb5      	ble.n	800be62 <_dtoa_r+0xaba>
 800bef6:	4659      	mov	r1, fp
 800bef8:	2300      	movs	r3, #0
 800befa:	220a      	movs	r2, #10
 800befc:	4620      	mov	r0, r4
 800befe:	f000 f87b 	bl	800bff8 <__multadd>
 800bf02:	4683      	mov	fp, r0
 800bf04:	e7ea      	b.n	800bedc <_dtoa_r+0xb34>
 800bf06:	bf00      	nop
 800bf08:	0800e16c 	.word	0x0800e16c
 800bf0c:	0800e190 	.word	0x0800e190

0800bf10 <_localeconv_r>:
 800bf10:	4b04      	ldr	r3, [pc, #16]	; (800bf24 <_localeconv_r+0x14>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	6a18      	ldr	r0, [r3, #32]
 800bf16:	4b04      	ldr	r3, [pc, #16]	; (800bf28 <_localeconv_r+0x18>)
 800bf18:	2800      	cmp	r0, #0
 800bf1a:	bf08      	it	eq
 800bf1c:	4618      	moveq	r0, r3
 800bf1e:	30f0      	adds	r0, #240	; 0xf0
 800bf20:	4770      	bx	lr
 800bf22:	bf00      	nop
 800bf24:	200007e4 	.word	0x200007e4
 800bf28:	20000848 	.word	0x20000848

0800bf2c <memchr>:
 800bf2c:	b510      	push	{r4, lr}
 800bf2e:	b2c9      	uxtb	r1, r1
 800bf30:	4402      	add	r2, r0
 800bf32:	4290      	cmp	r0, r2
 800bf34:	4603      	mov	r3, r0
 800bf36:	d101      	bne.n	800bf3c <memchr+0x10>
 800bf38:	2300      	movs	r3, #0
 800bf3a:	e003      	b.n	800bf44 <memchr+0x18>
 800bf3c:	781c      	ldrb	r4, [r3, #0]
 800bf3e:	3001      	adds	r0, #1
 800bf40:	428c      	cmp	r4, r1
 800bf42:	d1f6      	bne.n	800bf32 <memchr+0x6>
 800bf44:	4618      	mov	r0, r3
 800bf46:	bd10      	pop	{r4, pc}

0800bf48 <memcpy>:
 800bf48:	b510      	push	{r4, lr}
 800bf4a:	1e43      	subs	r3, r0, #1
 800bf4c:	440a      	add	r2, r1
 800bf4e:	4291      	cmp	r1, r2
 800bf50:	d100      	bne.n	800bf54 <memcpy+0xc>
 800bf52:	bd10      	pop	{r4, pc}
 800bf54:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf58:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf5c:	e7f7      	b.n	800bf4e <memcpy+0x6>

0800bf5e <__malloc_lock>:
 800bf5e:	4770      	bx	lr

0800bf60 <__malloc_unlock>:
 800bf60:	4770      	bx	lr

0800bf62 <_Balloc>:
 800bf62:	b570      	push	{r4, r5, r6, lr}
 800bf64:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bf66:	4604      	mov	r4, r0
 800bf68:	460e      	mov	r6, r1
 800bf6a:	b93d      	cbnz	r5, 800bf7c <_Balloc+0x1a>
 800bf6c:	2010      	movs	r0, #16
 800bf6e:	f7fe fc1f 	bl	800a7b0 <malloc>
 800bf72:	6260      	str	r0, [r4, #36]	; 0x24
 800bf74:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bf78:	6005      	str	r5, [r0, #0]
 800bf7a:	60c5      	str	r5, [r0, #12]
 800bf7c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bf7e:	68eb      	ldr	r3, [r5, #12]
 800bf80:	b183      	cbz	r3, 800bfa4 <_Balloc+0x42>
 800bf82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf84:	68db      	ldr	r3, [r3, #12]
 800bf86:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bf8a:	b9b8      	cbnz	r0, 800bfbc <_Balloc+0x5a>
 800bf8c:	2101      	movs	r1, #1
 800bf8e:	fa01 f506 	lsl.w	r5, r1, r6
 800bf92:	1d6a      	adds	r2, r5, #5
 800bf94:	0092      	lsls	r2, r2, #2
 800bf96:	4620      	mov	r0, r4
 800bf98:	f7fe fc22 	bl	800a7e0 <_calloc_r>
 800bf9c:	b160      	cbz	r0, 800bfb8 <_Balloc+0x56>
 800bf9e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800bfa2:	e00e      	b.n	800bfc2 <_Balloc+0x60>
 800bfa4:	2221      	movs	r2, #33	; 0x21
 800bfa6:	2104      	movs	r1, #4
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	f7fe fc19 	bl	800a7e0 <_calloc_r>
 800bfae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfb0:	60e8      	str	r0, [r5, #12]
 800bfb2:	68db      	ldr	r3, [r3, #12]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d1e4      	bne.n	800bf82 <_Balloc+0x20>
 800bfb8:	2000      	movs	r0, #0
 800bfba:	bd70      	pop	{r4, r5, r6, pc}
 800bfbc:	6802      	ldr	r2, [r0, #0]
 800bfbe:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bfc8:	e7f7      	b.n	800bfba <_Balloc+0x58>

0800bfca <_Bfree>:
 800bfca:	b570      	push	{r4, r5, r6, lr}
 800bfcc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800bfce:	4606      	mov	r6, r0
 800bfd0:	460d      	mov	r5, r1
 800bfd2:	b93c      	cbnz	r4, 800bfe4 <_Bfree+0x1a>
 800bfd4:	2010      	movs	r0, #16
 800bfd6:	f7fe fbeb 	bl	800a7b0 <malloc>
 800bfda:	6270      	str	r0, [r6, #36]	; 0x24
 800bfdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bfe0:	6004      	str	r4, [r0, #0]
 800bfe2:	60c4      	str	r4, [r0, #12]
 800bfe4:	b13d      	cbz	r5, 800bff6 <_Bfree+0x2c>
 800bfe6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bfe8:	686a      	ldr	r2, [r5, #4]
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bff0:	6029      	str	r1, [r5, #0]
 800bff2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800bff6:	bd70      	pop	{r4, r5, r6, pc}

0800bff8 <__multadd>:
 800bff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bffc:	461f      	mov	r7, r3
 800bffe:	4606      	mov	r6, r0
 800c000:	460c      	mov	r4, r1
 800c002:	2300      	movs	r3, #0
 800c004:	690d      	ldr	r5, [r1, #16]
 800c006:	f101 0c14 	add.w	ip, r1, #20
 800c00a:	f8dc 0000 	ldr.w	r0, [ip]
 800c00e:	3301      	adds	r3, #1
 800c010:	b281      	uxth	r1, r0
 800c012:	fb02 7101 	mla	r1, r2, r1, r7
 800c016:	0c00      	lsrs	r0, r0, #16
 800c018:	0c0f      	lsrs	r7, r1, #16
 800c01a:	fb02 7000 	mla	r0, r2, r0, r7
 800c01e:	b289      	uxth	r1, r1
 800c020:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c024:	429d      	cmp	r5, r3
 800c026:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c02a:	f84c 1b04 	str.w	r1, [ip], #4
 800c02e:	dcec      	bgt.n	800c00a <__multadd+0x12>
 800c030:	b1d7      	cbz	r7, 800c068 <__multadd+0x70>
 800c032:	68a3      	ldr	r3, [r4, #8]
 800c034:	42ab      	cmp	r3, r5
 800c036:	dc12      	bgt.n	800c05e <__multadd+0x66>
 800c038:	6861      	ldr	r1, [r4, #4]
 800c03a:	4630      	mov	r0, r6
 800c03c:	3101      	adds	r1, #1
 800c03e:	f7ff ff90 	bl	800bf62 <_Balloc>
 800c042:	4680      	mov	r8, r0
 800c044:	6922      	ldr	r2, [r4, #16]
 800c046:	f104 010c 	add.w	r1, r4, #12
 800c04a:	3202      	adds	r2, #2
 800c04c:	0092      	lsls	r2, r2, #2
 800c04e:	300c      	adds	r0, #12
 800c050:	f7ff ff7a 	bl	800bf48 <memcpy>
 800c054:	4621      	mov	r1, r4
 800c056:	4630      	mov	r0, r6
 800c058:	f7ff ffb7 	bl	800bfca <_Bfree>
 800c05c:	4644      	mov	r4, r8
 800c05e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c062:	3501      	adds	r5, #1
 800c064:	615f      	str	r7, [r3, #20]
 800c066:	6125      	str	r5, [r4, #16]
 800c068:	4620      	mov	r0, r4
 800c06a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c06e <__hi0bits>:
 800c06e:	0c02      	lsrs	r2, r0, #16
 800c070:	0412      	lsls	r2, r2, #16
 800c072:	4603      	mov	r3, r0
 800c074:	b9b2      	cbnz	r2, 800c0a4 <__hi0bits+0x36>
 800c076:	0403      	lsls	r3, r0, #16
 800c078:	2010      	movs	r0, #16
 800c07a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c07e:	bf04      	itt	eq
 800c080:	021b      	lsleq	r3, r3, #8
 800c082:	3008      	addeq	r0, #8
 800c084:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c088:	bf04      	itt	eq
 800c08a:	011b      	lsleq	r3, r3, #4
 800c08c:	3004      	addeq	r0, #4
 800c08e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c092:	bf04      	itt	eq
 800c094:	009b      	lsleq	r3, r3, #2
 800c096:	3002      	addeq	r0, #2
 800c098:	2b00      	cmp	r3, #0
 800c09a:	db06      	blt.n	800c0aa <__hi0bits+0x3c>
 800c09c:	005b      	lsls	r3, r3, #1
 800c09e:	d503      	bpl.n	800c0a8 <__hi0bits+0x3a>
 800c0a0:	3001      	adds	r0, #1
 800c0a2:	4770      	bx	lr
 800c0a4:	2000      	movs	r0, #0
 800c0a6:	e7e8      	b.n	800c07a <__hi0bits+0xc>
 800c0a8:	2020      	movs	r0, #32
 800c0aa:	4770      	bx	lr

0800c0ac <__lo0bits>:
 800c0ac:	6803      	ldr	r3, [r0, #0]
 800c0ae:	4601      	mov	r1, r0
 800c0b0:	f013 0207 	ands.w	r2, r3, #7
 800c0b4:	d00b      	beq.n	800c0ce <__lo0bits+0x22>
 800c0b6:	07da      	lsls	r2, r3, #31
 800c0b8:	d423      	bmi.n	800c102 <__lo0bits+0x56>
 800c0ba:	0798      	lsls	r0, r3, #30
 800c0bc:	bf49      	itett	mi
 800c0be:	085b      	lsrmi	r3, r3, #1
 800c0c0:	089b      	lsrpl	r3, r3, #2
 800c0c2:	2001      	movmi	r0, #1
 800c0c4:	600b      	strmi	r3, [r1, #0]
 800c0c6:	bf5c      	itt	pl
 800c0c8:	600b      	strpl	r3, [r1, #0]
 800c0ca:	2002      	movpl	r0, #2
 800c0cc:	4770      	bx	lr
 800c0ce:	b298      	uxth	r0, r3
 800c0d0:	b9a8      	cbnz	r0, 800c0fe <__lo0bits+0x52>
 800c0d2:	2010      	movs	r0, #16
 800c0d4:	0c1b      	lsrs	r3, r3, #16
 800c0d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c0da:	bf04      	itt	eq
 800c0dc:	0a1b      	lsreq	r3, r3, #8
 800c0de:	3008      	addeq	r0, #8
 800c0e0:	071a      	lsls	r2, r3, #28
 800c0e2:	bf04      	itt	eq
 800c0e4:	091b      	lsreq	r3, r3, #4
 800c0e6:	3004      	addeq	r0, #4
 800c0e8:	079a      	lsls	r2, r3, #30
 800c0ea:	bf04      	itt	eq
 800c0ec:	089b      	lsreq	r3, r3, #2
 800c0ee:	3002      	addeq	r0, #2
 800c0f0:	07da      	lsls	r2, r3, #31
 800c0f2:	d402      	bmi.n	800c0fa <__lo0bits+0x4e>
 800c0f4:	085b      	lsrs	r3, r3, #1
 800c0f6:	d006      	beq.n	800c106 <__lo0bits+0x5a>
 800c0f8:	3001      	adds	r0, #1
 800c0fa:	600b      	str	r3, [r1, #0]
 800c0fc:	4770      	bx	lr
 800c0fe:	4610      	mov	r0, r2
 800c100:	e7e9      	b.n	800c0d6 <__lo0bits+0x2a>
 800c102:	2000      	movs	r0, #0
 800c104:	4770      	bx	lr
 800c106:	2020      	movs	r0, #32
 800c108:	4770      	bx	lr

0800c10a <__i2b>:
 800c10a:	b510      	push	{r4, lr}
 800c10c:	460c      	mov	r4, r1
 800c10e:	2101      	movs	r1, #1
 800c110:	f7ff ff27 	bl	800bf62 <_Balloc>
 800c114:	2201      	movs	r2, #1
 800c116:	6144      	str	r4, [r0, #20]
 800c118:	6102      	str	r2, [r0, #16]
 800c11a:	bd10      	pop	{r4, pc}

0800c11c <__multiply>:
 800c11c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c120:	4614      	mov	r4, r2
 800c122:	690a      	ldr	r2, [r1, #16]
 800c124:	6923      	ldr	r3, [r4, #16]
 800c126:	4688      	mov	r8, r1
 800c128:	429a      	cmp	r2, r3
 800c12a:	bfbe      	ittt	lt
 800c12c:	460b      	movlt	r3, r1
 800c12e:	46a0      	movlt	r8, r4
 800c130:	461c      	movlt	r4, r3
 800c132:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c136:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c13a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c13e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c142:	eb07 0609 	add.w	r6, r7, r9
 800c146:	42b3      	cmp	r3, r6
 800c148:	bfb8      	it	lt
 800c14a:	3101      	addlt	r1, #1
 800c14c:	f7ff ff09 	bl	800bf62 <_Balloc>
 800c150:	f100 0514 	add.w	r5, r0, #20
 800c154:	462b      	mov	r3, r5
 800c156:	2200      	movs	r2, #0
 800c158:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c15c:	4573      	cmp	r3, lr
 800c15e:	d316      	bcc.n	800c18e <__multiply+0x72>
 800c160:	f104 0214 	add.w	r2, r4, #20
 800c164:	f108 0114 	add.w	r1, r8, #20
 800c168:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c16c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c170:	9300      	str	r3, [sp, #0]
 800c172:	9b00      	ldr	r3, [sp, #0]
 800c174:	9201      	str	r2, [sp, #4]
 800c176:	4293      	cmp	r3, r2
 800c178:	d80c      	bhi.n	800c194 <__multiply+0x78>
 800c17a:	2e00      	cmp	r6, #0
 800c17c:	dd03      	ble.n	800c186 <__multiply+0x6a>
 800c17e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c182:	2b00      	cmp	r3, #0
 800c184:	d05d      	beq.n	800c242 <__multiply+0x126>
 800c186:	6106      	str	r6, [r0, #16]
 800c188:	b003      	add	sp, #12
 800c18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c18e:	f843 2b04 	str.w	r2, [r3], #4
 800c192:	e7e3      	b.n	800c15c <__multiply+0x40>
 800c194:	f8b2 b000 	ldrh.w	fp, [r2]
 800c198:	f1bb 0f00 	cmp.w	fp, #0
 800c19c:	d023      	beq.n	800c1e6 <__multiply+0xca>
 800c19e:	4689      	mov	r9, r1
 800c1a0:	46ac      	mov	ip, r5
 800c1a2:	f04f 0800 	mov.w	r8, #0
 800c1a6:	f859 4b04 	ldr.w	r4, [r9], #4
 800c1aa:	f8dc a000 	ldr.w	sl, [ip]
 800c1ae:	b2a3      	uxth	r3, r4
 800c1b0:	fa1f fa8a 	uxth.w	sl, sl
 800c1b4:	fb0b a303 	mla	r3, fp, r3, sl
 800c1b8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c1bc:	f8dc 4000 	ldr.w	r4, [ip]
 800c1c0:	4443      	add	r3, r8
 800c1c2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c1c6:	fb0b 840a 	mla	r4, fp, sl, r8
 800c1ca:	46e2      	mov	sl, ip
 800c1cc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c1d6:	454f      	cmp	r7, r9
 800c1d8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c1dc:	f84a 3b04 	str.w	r3, [sl], #4
 800c1e0:	d82b      	bhi.n	800c23a <__multiply+0x11e>
 800c1e2:	f8cc 8004 	str.w	r8, [ip, #4]
 800c1e6:	9b01      	ldr	r3, [sp, #4]
 800c1e8:	3204      	adds	r2, #4
 800c1ea:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c1ee:	f1ba 0f00 	cmp.w	sl, #0
 800c1f2:	d020      	beq.n	800c236 <__multiply+0x11a>
 800c1f4:	4689      	mov	r9, r1
 800c1f6:	46a8      	mov	r8, r5
 800c1f8:	f04f 0b00 	mov.w	fp, #0
 800c1fc:	682b      	ldr	r3, [r5, #0]
 800c1fe:	f8b9 c000 	ldrh.w	ip, [r9]
 800c202:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c206:	b29b      	uxth	r3, r3
 800c208:	fb0a 440c 	mla	r4, sl, ip, r4
 800c20c:	46c4      	mov	ip, r8
 800c20e:	445c      	add	r4, fp
 800c210:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c214:	f84c 3b04 	str.w	r3, [ip], #4
 800c218:	f859 3b04 	ldr.w	r3, [r9], #4
 800c21c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c220:	0c1b      	lsrs	r3, r3, #16
 800c222:	fb0a b303 	mla	r3, sl, r3, fp
 800c226:	454f      	cmp	r7, r9
 800c228:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c22c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c230:	d805      	bhi.n	800c23e <__multiply+0x122>
 800c232:	f8c8 3004 	str.w	r3, [r8, #4]
 800c236:	3504      	adds	r5, #4
 800c238:	e79b      	b.n	800c172 <__multiply+0x56>
 800c23a:	46d4      	mov	ip, sl
 800c23c:	e7b3      	b.n	800c1a6 <__multiply+0x8a>
 800c23e:	46e0      	mov	r8, ip
 800c240:	e7dd      	b.n	800c1fe <__multiply+0xe2>
 800c242:	3e01      	subs	r6, #1
 800c244:	e799      	b.n	800c17a <__multiply+0x5e>
	...

0800c248 <__pow5mult>:
 800c248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c24c:	4615      	mov	r5, r2
 800c24e:	f012 0203 	ands.w	r2, r2, #3
 800c252:	4606      	mov	r6, r0
 800c254:	460f      	mov	r7, r1
 800c256:	d007      	beq.n	800c268 <__pow5mult+0x20>
 800c258:	4c21      	ldr	r4, [pc, #132]	; (800c2e0 <__pow5mult+0x98>)
 800c25a:	3a01      	subs	r2, #1
 800c25c:	2300      	movs	r3, #0
 800c25e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c262:	f7ff fec9 	bl	800bff8 <__multadd>
 800c266:	4607      	mov	r7, r0
 800c268:	10ad      	asrs	r5, r5, #2
 800c26a:	d035      	beq.n	800c2d8 <__pow5mult+0x90>
 800c26c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c26e:	b93c      	cbnz	r4, 800c280 <__pow5mult+0x38>
 800c270:	2010      	movs	r0, #16
 800c272:	f7fe fa9d 	bl	800a7b0 <malloc>
 800c276:	6270      	str	r0, [r6, #36]	; 0x24
 800c278:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c27c:	6004      	str	r4, [r0, #0]
 800c27e:	60c4      	str	r4, [r0, #12]
 800c280:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c284:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c288:	b94c      	cbnz	r4, 800c29e <__pow5mult+0x56>
 800c28a:	f240 2171 	movw	r1, #625	; 0x271
 800c28e:	4630      	mov	r0, r6
 800c290:	f7ff ff3b 	bl	800c10a <__i2b>
 800c294:	2300      	movs	r3, #0
 800c296:	4604      	mov	r4, r0
 800c298:	f8c8 0008 	str.w	r0, [r8, #8]
 800c29c:	6003      	str	r3, [r0, #0]
 800c29e:	f04f 0800 	mov.w	r8, #0
 800c2a2:	07eb      	lsls	r3, r5, #31
 800c2a4:	d50a      	bpl.n	800c2bc <__pow5mult+0x74>
 800c2a6:	4639      	mov	r1, r7
 800c2a8:	4622      	mov	r2, r4
 800c2aa:	4630      	mov	r0, r6
 800c2ac:	f7ff ff36 	bl	800c11c <__multiply>
 800c2b0:	4681      	mov	r9, r0
 800c2b2:	4639      	mov	r1, r7
 800c2b4:	4630      	mov	r0, r6
 800c2b6:	f7ff fe88 	bl	800bfca <_Bfree>
 800c2ba:	464f      	mov	r7, r9
 800c2bc:	106d      	asrs	r5, r5, #1
 800c2be:	d00b      	beq.n	800c2d8 <__pow5mult+0x90>
 800c2c0:	6820      	ldr	r0, [r4, #0]
 800c2c2:	b938      	cbnz	r0, 800c2d4 <__pow5mult+0x8c>
 800c2c4:	4622      	mov	r2, r4
 800c2c6:	4621      	mov	r1, r4
 800c2c8:	4630      	mov	r0, r6
 800c2ca:	f7ff ff27 	bl	800c11c <__multiply>
 800c2ce:	6020      	str	r0, [r4, #0]
 800c2d0:	f8c0 8000 	str.w	r8, [r0]
 800c2d4:	4604      	mov	r4, r0
 800c2d6:	e7e4      	b.n	800c2a2 <__pow5mult+0x5a>
 800c2d8:	4638      	mov	r0, r7
 800c2da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2de:	bf00      	nop
 800c2e0:	0800e290 	.word	0x0800e290

0800c2e4 <__lshift>:
 800c2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2e8:	460c      	mov	r4, r1
 800c2ea:	4607      	mov	r7, r0
 800c2ec:	4616      	mov	r6, r2
 800c2ee:	6923      	ldr	r3, [r4, #16]
 800c2f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c2f4:	eb0a 0903 	add.w	r9, sl, r3
 800c2f8:	6849      	ldr	r1, [r1, #4]
 800c2fa:	68a3      	ldr	r3, [r4, #8]
 800c2fc:	f109 0501 	add.w	r5, r9, #1
 800c300:	42ab      	cmp	r3, r5
 800c302:	db32      	blt.n	800c36a <__lshift+0x86>
 800c304:	4638      	mov	r0, r7
 800c306:	f7ff fe2c 	bl	800bf62 <_Balloc>
 800c30a:	2300      	movs	r3, #0
 800c30c:	4680      	mov	r8, r0
 800c30e:	461a      	mov	r2, r3
 800c310:	f100 0114 	add.w	r1, r0, #20
 800c314:	4553      	cmp	r3, sl
 800c316:	db2b      	blt.n	800c370 <__lshift+0x8c>
 800c318:	6920      	ldr	r0, [r4, #16]
 800c31a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c31e:	f104 0314 	add.w	r3, r4, #20
 800c322:	f016 021f 	ands.w	r2, r6, #31
 800c326:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c32a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c32e:	d025      	beq.n	800c37c <__lshift+0x98>
 800c330:	2000      	movs	r0, #0
 800c332:	f1c2 0e20 	rsb	lr, r2, #32
 800c336:	468a      	mov	sl, r1
 800c338:	681e      	ldr	r6, [r3, #0]
 800c33a:	4096      	lsls	r6, r2
 800c33c:	4330      	orrs	r0, r6
 800c33e:	f84a 0b04 	str.w	r0, [sl], #4
 800c342:	f853 0b04 	ldr.w	r0, [r3], #4
 800c346:	459c      	cmp	ip, r3
 800c348:	fa20 f00e 	lsr.w	r0, r0, lr
 800c34c:	d814      	bhi.n	800c378 <__lshift+0x94>
 800c34e:	6048      	str	r0, [r1, #4]
 800c350:	b108      	cbz	r0, 800c356 <__lshift+0x72>
 800c352:	f109 0502 	add.w	r5, r9, #2
 800c356:	3d01      	subs	r5, #1
 800c358:	4638      	mov	r0, r7
 800c35a:	f8c8 5010 	str.w	r5, [r8, #16]
 800c35e:	4621      	mov	r1, r4
 800c360:	f7ff fe33 	bl	800bfca <_Bfree>
 800c364:	4640      	mov	r0, r8
 800c366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c36a:	3101      	adds	r1, #1
 800c36c:	005b      	lsls	r3, r3, #1
 800c36e:	e7c7      	b.n	800c300 <__lshift+0x1c>
 800c370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c374:	3301      	adds	r3, #1
 800c376:	e7cd      	b.n	800c314 <__lshift+0x30>
 800c378:	4651      	mov	r1, sl
 800c37a:	e7dc      	b.n	800c336 <__lshift+0x52>
 800c37c:	3904      	subs	r1, #4
 800c37e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c382:	459c      	cmp	ip, r3
 800c384:	f841 2f04 	str.w	r2, [r1, #4]!
 800c388:	d8f9      	bhi.n	800c37e <__lshift+0x9a>
 800c38a:	e7e4      	b.n	800c356 <__lshift+0x72>

0800c38c <__mcmp>:
 800c38c:	6903      	ldr	r3, [r0, #16]
 800c38e:	690a      	ldr	r2, [r1, #16]
 800c390:	b530      	push	{r4, r5, lr}
 800c392:	1a9b      	subs	r3, r3, r2
 800c394:	d10c      	bne.n	800c3b0 <__mcmp+0x24>
 800c396:	0092      	lsls	r2, r2, #2
 800c398:	3014      	adds	r0, #20
 800c39a:	3114      	adds	r1, #20
 800c39c:	1884      	adds	r4, r0, r2
 800c39e:	4411      	add	r1, r2
 800c3a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c3a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c3a8:	4295      	cmp	r5, r2
 800c3aa:	d003      	beq.n	800c3b4 <__mcmp+0x28>
 800c3ac:	d305      	bcc.n	800c3ba <__mcmp+0x2e>
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	bd30      	pop	{r4, r5, pc}
 800c3b4:	42a0      	cmp	r0, r4
 800c3b6:	d3f3      	bcc.n	800c3a0 <__mcmp+0x14>
 800c3b8:	e7fa      	b.n	800c3b0 <__mcmp+0x24>
 800c3ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c3be:	e7f7      	b.n	800c3b0 <__mcmp+0x24>

0800c3c0 <__mdiff>:
 800c3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3c4:	460d      	mov	r5, r1
 800c3c6:	4607      	mov	r7, r0
 800c3c8:	4611      	mov	r1, r2
 800c3ca:	4628      	mov	r0, r5
 800c3cc:	4614      	mov	r4, r2
 800c3ce:	f7ff ffdd 	bl	800c38c <__mcmp>
 800c3d2:	1e06      	subs	r6, r0, #0
 800c3d4:	d108      	bne.n	800c3e8 <__mdiff+0x28>
 800c3d6:	4631      	mov	r1, r6
 800c3d8:	4638      	mov	r0, r7
 800c3da:	f7ff fdc2 	bl	800bf62 <_Balloc>
 800c3de:	2301      	movs	r3, #1
 800c3e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3e8:	bfa4      	itt	ge
 800c3ea:	4623      	movge	r3, r4
 800c3ec:	462c      	movge	r4, r5
 800c3ee:	4638      	mov	r0, r7
 800c3f0:	6861      	ldr	r1, [r4, #4]
 800c3f2:	bfa6      	itte	ge
 800c3f4:	461d      	movge	r5, r3
 800c3f6:	2600      	movge	r6, #0
 800c3f8:	2601      	movlt	r6, #1
 800c3fa:	f7ff fdb2 	bl	800bf62 <_Balloc>
 800c3fe:	f04f 0e00 	mov.w	lr, #0
 800c402:	60c6      	str	r6, [r0, #12]
 800c404:	692b      	ldr	r3, [r5, #16]
 800c406:	6926      	ldr	r6, [r4, #16]
 800c408:	f104 0214 	add.w	r2, r4, #20
 800c40c:	f105 0914 	add.w	r9, r5, #20
 800c410:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c414:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c418:	f100 0114 	add.w	r1, r0, #20
 800c41c:	f852 ab04 	ldr.w	sl, [r2], #4
 800c420:	f859 5b04 	ldr.w	r5, [r9], #4
 800c424:	fa1f f38a 	uxth.w	r3, sl
 800c428:	4473      	add	r3, lr
 800c42a:	b2ac      	uxth	r4, r5
 800c42c:	1b1b      	subs	r3, r3, r4
 800c42e:	0c2c      	lsrs	r4, r5, #16
 800c430:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800c434:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800c438:	b29b      	uxth	r3, r3
 800c43a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800c43e:	45c8      	cmp	r8, r9
 800c440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800c444:	4694      	mov	ip, r2
 800c446:	f841 4b04 	str.w	r4, [r1], #4
 800c44a:	d8e7      	bhi.n	800c41c <__mdiff+0x5c>
 800c44c:	45bc      	cmp	ip, r7
 800c44e:	d304      	bcc.n	800c45a <__mdiff+0x9a>
 800c450:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c454:	b183      	cbz	r3, 800c478 <__mdiff+0xb8>
 800c456:	6106      	str	r6, [r0, #16]
 800c458:	e7c4      	b.n	800c3e4 <__mdiff+0x24>
 800c45a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800c45e:	b2a2      	uxth	r2, r4
 800c460:	4472      	add	r2, lr
 800c462:	1413      	asrs	r3, r2, #16
 800c464:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c468:	b292      	uxth	r2, r2
 800c46a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c46e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c472:	f841 2b04 	str.w	r2, [r1], #4
 800c476:	e7e9      	b.n	800c44c <__mdiff+0x8c>
 800c478:	3e01      	subs	r6, #1
 800c47a:	e7e9      	b.n	800c450 <__mdiff+0x90>

0800c47c <__d2b>:
 800c47c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c480:	461c      	mov	r4, r3
 800c482:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800c486:	2101      	movs	r1, #1
 800c488:	4690      	mov	r8, r2
 800c48a:	f7ff fd6a 	bl	800bf62 <_Balloc>
 800c48e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800c492:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800c496:	4607      	mov	r7, r0
 800c498:	bb34      	cbnz	r4, 800c4e8 <__d2b+0x6c>
 800c49a:	9201      	str	r2, [sp, #4]
 800c49c:	f1b8 0200 	subs.w	r2, r8, #0
 800c4a0:	d027      	beq.n	800c4f2 <__d2b+0x76>
 800c4a2:	a802      	add	r0, sp, #8
 800c4a4:	f840 2d08 	str.w	r2, [r0, #-8]!
 800c4a8:	f7ff fe00 	bl	800c0ac <__lo0bits>
 800c4ac:	9900      	ldr	r1, [sp, #0]
 800c4ae:	b1f0      	cbz	r0, 800c4ee <__d2b+0x72>
 800c4b0:	9a01      	ldr	r2, [sp, #4]
 800c4b2:	f1c0 0320 	rsb	r3, r0, #32
 800c4b6:	fa02 f303 	lsl.w	r3, r2, r3
 800c4ba:	430b      	orrs	r3, r1
 800c4bc:	40c2      	lsrs	r2, r0
 800c4be:	617b      	str	r3, [r7, #20]
 800c4c0:	9201      	str	r2, [sp, #4]
 800c4c2:	9b01      	ldr	r3, [sp, #4]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	bf14      	ite	ne
 800c4c8:	2102      	movne	r1, #2
 800c4ca:	2101      	moveq	r1, #1
 800c4cc:	61bb      	str	r3, [r7, #24]
 800c4ce:	6139      	str	r1, [r7, #16]
 800c4d0:	b1c4      	cbz	r4, 800c504 <__d2b+0x88>
 800c4d2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c4d6:	4404      	add	r4, r0
 800c4d8:	6034      	str	r4, [r6, #0]
 800c4da:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c4de:	6028      	str	r0, [r5, #0]
 800c4e0:	4638      	mov	r0, r7
 800c4e2:	b002      	add	sp, #8
 800c4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c4ec:	e7d5      	b.n	800c49a <__d2b+0x1e>
 800c4ee:	6179      	str	r1, [r7, #20]
 800c4f0:	e7e7      	b.n	800c4c2 <__d2b+0x46>
 800c4f2:	a801      	add	r0, sp, #4
 800c4f4:	f7ff fdda 	bl	800c0ac <__lo0bits>
 800c4f8:	2101      	movs	r1, #1
 800c4fa:	9b01      	ldr	r3, [sp, #4]
 800c4fc:	6139      	str	r1, [r7, #16]
 800c4fe:	617b      	str	r3, [r7, #20]
 800c500:	3020      	adds	r0, #32
 800c502:	e7e5      	b.n	800c4d0 <__d2b+0x54>
 800c504:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c508:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c50c:	6030      	str	r0, [r6, #0]
 800c50e:	6918      	ldr	r0, [r3, #16]
 800c510:	f7ff fdad 	bl	800c06e <__hi0bits>
 800c514:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c518:	e7e1      	b.n	800c4de <__d2b+0x62>

0800c51a <__ssputs_r>:
 800c51a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c51e:	688e      	ldr	r6, [r1, #8]
 800c520:	4682      	mov	sl, r0
 800c522:	429e      	cmp	r6, r3
 800c524:	460c      	mov	r4, r1
 800c526:	4690      	mov	r8, r2
 800c528:	4699      	mov	r9, r3
 800c52a:	d837      	bhi.n	800c59c <__ssputs_r+0x82>
 800c52c:	898a      	ldrh	r2, [r1, #12]
 800c52e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c532:	d031      	beq.n	800c598 <__ssputs_r+0x7e>
 800c534:	2302      	movs	r3, #2
 800c536:	6825      	ldr	r5, [r4, #0]
 800c538:	6909      	ldr	r1, [r1, #16]
 800c53a:	1a6f      	subs	r7, r5, r1
 800c53c:	6965      	ldr	r5, [r4, #20]
 800c53e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c542:	fb95 f5f3 	sdiv	r5, r5, r3
 800c546:	f109 0301 	add.w	r3, r9, #1
 800c54a:	443b      	add	r3, r7
 800c54c:	429d      	cmp	r5, r3
 800c54e:	bf38      	it	cc
 800c550:	461d      	movcc	r5, r3
 800c552:	0553      	lsls	r3, r2, #21
 800c554:	d530      	bpl.n	800c5b8 <__ssputs_r+0x9e>
 800c556:	4629      	mov	r1, r5
 800c558:	f7fe f99c 	bl	800a894 <_malloc_r>
 800c55c:	4606      	mov	r6, r0
 800c55e:	b950      	cbnz	r0, 800c576 <__ssputs_r+0x5c>
 800c560:	230c      	movs	r3, #12
 800c562:	f04f 30ff 	mov.w	r0, #4294967295
 800c566:	f8ca 3000 	str.w	r3, [sl]
 800c56a:	89a3      	ldrh	r3, [r4, #12]
 800c56c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c570:	81a3      	strh	r3, [r4, #12]
 800c572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c576:	463a      	mov	r2, r7
 800c578:	6921      	ldr	r1, [r4, #16]
 800c57a:	f7ff fce5 	bl	800bf48 <memcpy>
 800c57e:	89a3      	ldrh	r3, [r4, #12]
 800c580:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c588:	81a3      	strh	r3, [r4, #12]
 800c58a:	6126      	str	r6, [r4, #16]
 800c58c:	443e      	add	r6, r7
 800c58e:	6026      	str	r6, [r4, #0]
 800c590:	464e      	mov	r6, r9
 800c592:	6165      	str	r5, [r4, #20]
 800c594:	1bed      	subs	r5, r5, r7
 800c596:	60a5      	str	r5, [r4, #8]
 800c598:	454e      	cmp	r6, r9
 800c59a:	d900      	bls.n	800c59e <__ssputs_r+0x84>
 800c59c:	464e      	mov	r6, r9
 800c59e:	4632      	mov	r2, r6
 800c5a0:	4641      	mov	r1, r8
 800c5a2:	6820      	ldr	r0, [r4, #0]
 800c5a4:	f000 f91e 	bl	800c7e4 <memmove>
 800c5a8:	68a3      	ldr	r3, [r4, #8]
 800c5aa:	2000      	movs	r0, #0
 800c5ac:	1b9b      	subs	r3, r3, r6
 800c5ae:	60a3      	str	r3, [r4, #8]
 800c5b0:	6823      	ldr	r3, [r4, #0]
 800c5b2:	441e      	add	r6, r3
 800c5b4:	6026      	str	r6, [r4, #0]
 800c5b6:	e7dc      	b.n	800c572 <__ssputs_r+0x58>
 800c5b8:	462a      	mov	r2, r5
 800c5ba:	f000 f92c 	bl	800c816 <_realloc_r>
 800c5be:	4606      	mov	r6, r0
 800c5c0:	2800      	cmp	r0, #0
 800c5c2:	d1e2      	bne.n	800c58a <__ssputs_r+0x70>
 800c5c4:	6921      	ldr	r1, [r4, #16]
 800c5c6:	4650      	mov	r0, sl
 800c5c8:	f7fe f918 	bl	800a7fc <_free_r>
 800c5cc:	e7c8      	b.n	800c560 <__ssputs_r+0x46>
	...

0800c5d0 <_svfiprintf_r>:
 800c5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d4:	461d      	mov	r5, r3
 800c5d6:	898b      	ldrh	r3, [r1, #12]
 800c5d8:	b09d      	sub	sp, #116	; 0x74
 800c5da:	061f      	lsls	r7, r3, #24
 800c5dc:	4680      	mov	r8, r0
 800c5de:	460c      	mov	r4, r1
 800c5e0:	4616      	mov	r6, r2
 800c5e2:	d50f      	bpl.n	800c604 <_svfiprintf_r+0x34>
 800c5e4:	690b      	ldr	r3, [r1, #16]
 800c5e6:	b96b      	cbnz	r3, 800c604 <_svfiprintf_r+0x34>
 800c5e8:	2140      	movs	r1, #64	; 0x40
 800c5ea:	f7fe f953 	bl	800a894 <_malloc_r>
 800c5ee:	6020      	str	r0, [r4, #0]
 800c5f0:	6120      	str	r0, [r4, #16]
 800c5f2:	b928      	cbnz	r0, 800c600 <_svfiprintf_r+0x30>
 800c5f4:	230c      	movs	r3, #12
 800c5f6:	f8c8 3000 	str.w	r3, [r8]
 800c5fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c5fe:	e0c8      	b.n	800c792 <_svfiprintf_r+0x1c2>
 800c600:	2340      	movs	r3, #64	; 0x40
 800c602:	6163      	str	r3, [r4, #20]
 800c604:	2300      	movs	r3, #0
 800c606:	9309      	str	r3, [sp, #36]	; 0x24
 800c608:	2320      	movs	r3, #32
 800c60a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c60e:	2330      	movs	r3, #48	; 0x30
 800c610:	f04f 0b01 	mov.w	fp, #1
 800c614:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c618:	9503      	str	r5, [sp, #12]
 800c61a:	4637      	mov	r7, r6
 800c61c:	463d      	mov	r5, r7
 800c61e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c622:	b10b      	cbz	r3, 800c628 <_svfiprintf_r+0x58>
 800c624:	2b25      	cmp	r3, #37	; 0x25
 800c626:	d13e      	bne.n	800c6a6 <_svfiprintf_r+0xd6>
 800c628:	ebb7 0a06 	subs.w	sl, r7, r6
 800c62c:	d00b      	beq.n	800c646 <_svfiprintf_r+0x76>
 800c62e:	4653      	mov	r3, sl
 800c630:	4632      	mov	r2, r6
 800c632:	4621      	mov	r1, r4
 800c634:	4640      	mov	r0, r8
 800c636:	f7ff ff70 	bl	800c51a <__ssputs_r>
 800c63a:	3001      	adds	r0, #1
 800c63c:	f000 80a4 	beq.w	800c788 <_svfiprintf_r+0x1b8>
 800c640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c642:	4453      	add	r3, sl
 800c644:	9309      	str	r3, [sp, #36]	; 0x24
 800c646:	783b      	ldrb	r3, [r7, #0]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	f000 809d 	beq.w	800c788 <_svfiprintf_r+0x1b8>
 800c64e:	2300      	movs	r3, #0
 800c650:	f04f 32ff 	mov.w	r2, #4294967295
 800c654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c658:	9304      	str	r3, [sp, #16]
 800c65a:	9307      	str	r3, [sp, #28]
 800c65c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c660:	931a      	str	r3, [sp, #104]	; 0x68
 800c662:	462f      	mov	r7, r5
 800c664:	2205      	movs	r2, #5
 800c666:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c66a:	4850      	ldr	r0, [pc, #320]	; (800c7ac <_svfiprintf_r+0x1dc>)
 800c66c:	f7ff fc5e 	bl	800bf2c <memchr>
 800c670:	9b04      	ldr	r3, [sp, #16]
 800c672:	b9d0      	cbnz	r0, 800c6aa <_svfiprintf_r+0xda>
 800c674:	06d9      	lsls	r1, r3, #27
 800c676:	bf44      	itt	mi
 800c678:	2220      	movmi	r2, #32
 800c67a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c67e:	071a      	lsls	r2, r3, #28
 800c680:	bf44      	itt	mi
 800c682:	222b      	movmi	r2, #43	; 0x2b
 800c684:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c688:	782a      	ldrb	r2, [r5, #0]
 800c68a:	2a2a      	cmp	r2, #42	; 0x2a
 800c68c:	d015      	beq.n	800c6ba <_svfiprintf_r+0xea>
 800c68e:	462f      	mov	r7, r5
 800c690:	2000      	movs	r0, #0
 800c692:	250a      	movs	r5, #10
 800c694:	9a07      	ldr	r2, [sp, #28]
 800c696:	4639      	mov	r1, r7
 800c698:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c69c:	3b30      	subs	r3, #48	; 0x30
 800c69e:	2b09      	cmp	r3, #9
 800c6a0:	d94d      	bls.n	800c73e <_svfiprintf_r+0x16e>
 800c6a2:	b1b8      	cbz	r0, 800c6d4 <_svfiprintf_r+0x104>
 800c6a4:	e00f      	b.n	800c6c6 <_svfiprintf_r+0xf6>
 800c6a6:	462f      	mov	r7, r5
 800c6a8:	e7b8      	b.n	800c61c <_svfiprintf_r+0x4c>
 800c6aa:	4a40      	ldr	r2, [pc, #256]	; (800c7ac <_svfiprintf_r+0x1dc>)
 800c6ac:	463d      	mov	r5, r7
 800c6ae:	1a80      	subs	r0, r0, r2
 800c6b0:	fa0b f000 	lsl.w	r0, fp, r0
 800c6b4:	4318      	orrs	r0, r3
 800c6b6:	9004      	str	r0, [sp, #16]
 800c6b8:	e7d3      	b.n	800c662 <_svfiprintf_r+0x92>
 800c6ba:	9a03      	ldr	r2, [sp, #12]
 800c6bc:	1d11      	adds	r1, r2, #4
 800c6be:	6812      	ldr	r2, [r2, #0]
 800c6c0:	9103      	str	r1, [sp, #12]
 800c6c2:	2a00      	cmp	r2, #0
 800c6c4:	db01      	blt.n	800c6ca <_svfiprintf_r+0xfa>
 800c6c6:	9207      	str	r2, [sp, #28]
 800c6c8:	e004      	b.n	800c6d4 <_svfiprintf_r+0x104>
 800c6ca:	4252      	negs	r2, r2
 800c6cc:	f043 0302 	orr.w	r3, r3, #2
 800c6d0:	9207      	str	r2, [sp, #28]
 800c6d2:	9304      	str	r3, [sp, #16]
 800c6d4:	783b      	ldrb	r3, [r7, #0]
 800c6d6:	2b2e      	cmp	r3, #46	; 0x2e
 800c6d8:	d10c      	bne.n	800c6f4 <_svfiprintf_r+0x124>
 800c6da:	787b      	ldrb	r3, [r7, #1]
 800c6dc:	2b2a      	cmp	r3, #42	; 0x2a
 800c6de:	d133      	bne.n	800c748 <_svfiprintf_r+0x178>
 800c6e0:	9b03      	ldr	r3, [sp, #12]
 800c6e2:	3702      	adds	r7, #2
 800c6e4:	1d1a      	adds	r2, r3, #4
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	9203      	str	r2, [sp, #12]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	bfb8      	it	lt
 800c6ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6f2:	9305      	str	r3, [sp, #20]
 800c6f4:	4d2e      	ldr	r5, [pc, #184]	; (800c7b0 <_svfiprintf_r+0x1e0>)
 800c6f6:	2203      	movs	r2, #3
 800c6f8:	7839      	ldrb	r1, [r7, #0]
 800c6fa:	4628      	mov	r0, r5
 800c6fc:	f7ff fc16 	bl	800bf2c <memchr>
 800c700:	b138      	cbz	r0, 800c712 <_svfiprintf_r+0x142>
 800c702:	2340      	movs	r3, #64	; 0x40
 800c704:	1b40      	subs	r0, r0, r5
 800c706:	fa03 f000 	lsl.w	r0, r3, r0
 800c70a:	9b04      	ldr	r3, [sp, #16]
 800c70c:	3701      	adds	r7, #1
 800c70e:	4303      	orrs	r3, r0
 800c710:	9304      	str	r3, [sp, #16]
 800c712:	7839      	ldrb	r1, [r7, #0]
 800c714:	2206      	movs	r2, #6
 800c716:	4827      	ldr	r0, [pc, #156]	; (800c7b4 <_svfiprintf_r+0x1e4>)
 800c718:	1c7e      	adds	r6, r7, #1
 800c71a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c71e:	f7ff fc05 	bl	800bf2c <memchr>
 800c722:	2800      	cmp	r0, #0
 800c724:	d038      	beq.n	800c798 <_svfiprintf_r+0x1c8>
 800c726:	4b24      	ldr	r3, [pc, #144]	; (800c7b8 <_svfiprintf_r+0x1e8>)
 800c728:	bb13      	cbnz	r3, 800c770 <_svfiprintf_r+0x1a0>
 800c72a:	9b03      	ldr	r3, [sp, #12]
 800c72c:	3307      	adds	r3, #7
 800c72e:	f023 0307 	bic.w	r3, r3, #7
 800c732:	3308      	adds	r3, #8
 800c734:	9303      	str	r3, [sp, #12]
 800c736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c738:	444b      	add	r3, r9
 800c73a:	9309      	str	r3, [sp, #36]	; 0x24
 800c73c:	e76d      	b.n	800c61a <_svfiprintf_r+0x4a>
 800c73e:	fb05 3202 	mla	r2, r5, r2, r3
 800c742:	2001      	movs	r0, #1
 800c744:	460f      	mov	r7, r1
 800c746:	e7a6      	b.n	800c696 <_svfiprintf_r+0xc6>
 800c748:	2300      	movs	r3, #0
 800c74a:	250a      	movs	r5, #10
 800c74c:	4619      	mov	r1, r3
 800c74e:	3701      	adds	r7, #1
 800c750:	9305      	str	r3, [sp, #20]
 800c752:	4638      	mov	r0, r7
 800c754:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c758:	3a30      	subs	r2, #48	; 0x30
 800c75a:	2a09      	cmp	r2, #9
 800c75c:	d903      	bls.n	800c766 <_svfiprintf_r+0x196>
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d0c8      	beq.n	800c6f4 <_svfiprintf_r+0x124>
 800c762:	9105      	str	r1, [sp, #20]
 800c764:	e7c6      	b.n	800c6f4 <_svfiprintf_r+0x124>
 800c766:	fb05 2101 	mla	r1, r5, r1, r2
 800c76a:	2301      	movs	r3, #1
 800c76c:	4607      	mov	r7, r0
 800c76e:	e7f0      	b.n	800c752 <_svfiprintf_r+0x182>
 800c770:	ab03      	add	r3, sp, #12
 800c772:	9300      	str	r3, [sp, #0]
 800c774:	4622      	mov	r2, r4
 800c776:	4b11      	ldr	r3, [pc, #68]	; (800c7bc <_svfiprintf_r+0x1ec>)
 800c778:	a904      	add	r1, sp, #16
 800c77a:	4640      	mov	r0, r8
 800c77c:	f7fe f976 	bl	800aa6c <_printf_float>
 800c780:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c784:	4681      	mov	r9, r0
 800c786:	d1d6      	bne.n	800c736 <_svfiprintf_r+0x166>
 800c788:	89a3      	ldrh	r3, [r4, #12]
 800c78a:	065b      	lsls	r3, r3, #25
 800c78c:	f53f af35 	bmi.w	800c5fa <_svfiprintf_r+0x2a>
 800c790:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c792:	b01d      	add	sp, #116	; 0x74
 800c794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c798:	ab03      	add	r3, sp, #12
 800c79a:	9300      	str	r3, [sp, #0]
 800c79c:	4622      	mov	r2, r4
 800c79e:	4b07      	ldr	r3, [pc, #28]	; (800c7bc <_svfiprintf_r+0x1ec>)
 800c7a0:	a904      	add	r1, sp, #16
 800c7a2:	4640      	mov	r0, r8
 800c7a4:	f7fe fc0e 	bl	800afc4 <_printf_i>
 800c7a8:	e7ea      	b.n	800c780 <_svfiprintf_r+0x1b0>
 800c7aa:	bf00      	nop
 800c7ac:	0800e29c 	.word	0x0800e29c
 800c7b0:	0800e2a2 	.word	0x0800e2a2
 800c7b4:	0800e2a6 	.word	0x0800e2a6
 800c7b8:	0800aa6d 	.word	0x0800aa6d
 800c7bc:	0800c51b 	.word	0x0800c51b

0800c7c0 <__ascii_mbtowc>:
 800c7c0:	b082      	sub	sp, #8
 800c7c2:	b901      	cbnz	r1, 800c7c6 <__ascii_mbtowc+0x6>
 800c7c4:	a901      	add	r1, sp, #4
 800c7c6:	b142      	cbz	r2, 800c7da <__ascii_mbtowc+0x1a>
 800c7c8:	b14b      	cbz	r3, 800c7de <__ascii_mbtowc+0x1e>
 800c7ca:	7813      	ldrb	r3, [r2, #0]
 800c7cc:	600b      	str	r3, [r1, #0]
 800c7ce:	7812      	ldrb	r2, [r2, #0]
 800c7d0:	1c10      	adds	r0, r2, #0
 800c7d2:	bf18      	it	ne
 800c7d4:	2001      	movne	r0, #1
 800c7d6:	b002      	add	sp, #8
 800c7d8:	4770      	bx	lr
 800c7da:	4610      	mov	r0, r2
 800c7dc:	e7fb      	b.n	800c7d6 <__ascii_mbtowc+0x16>
 800c7de:	f06f 0001 	mvn.w	r0, #1
 800c7e2:	e7f8      	b.n	800c7d6 <__ascii_mbtowc+0x16>

0800c7e4 <memmove>:
 800c7e4:	4288      	cmp	r0, r1
 800c7e6:	b510      	push	{r4, lr}
 800c7e8:	eb01 0302 	add.w	r3, r1, r2
 800c7ec:	d807      	bhi.n	800c7fe <memmove+0x1a>
 800c7ee:	1e42      	subs	r2, r0, #1
 800c7f0:	4299      	cmp	r1, r3
 800c7f2:	d00a      	beq.n	800c80a <memmove+0x26>
 800c7f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7f8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c7fc:	e7f8      	b.n	800c7f0 <memmove+0xc>
 800c7fe:	4283      	cmp	r3, r0
 800c800:	d9f5      	bls.n	800c7ee <memmove+0xa>
 800c802:	1881      	adds	r1, r0, r2
 800c804:	1ad2      	subs	r2, r2, r3
 800c806:	42d3      	cmn	r3, r2
 800c808:	d100      	bne.n	800c80c <memmove+0x28>
 800c80a:	bd10      	pop	{r4, pc}
 800c80c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c810:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c814:	e7f7      	b.n	800c806 <memmove+0x22>

0800c816 <_realloc_r>:
 800c816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c818:	4607      	mov	r7, r0
 800c81a:	4614      	mov	r4, r2
 800c81c:	460e      	mov	r6, r1
 800c81e:	b921      	cbnz	r1, 800c82a <_realloc_r+0x14>
 800c820:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c824:	4611      	mov	r1, r2
 800c826:	f7fe b835 	b.w	800a894 <_malloc_r>
 800c82a:	b922      	cbnz	r2, 800c836 <_realloc_r+0x20>
 800c82c:	f7fd ffe6 	bl	800a7fc <_free_r>
 800c830:	4625      	mov	r5, r4
 800c832:	4628      	mov	r0, r5
 800c834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c836:	f000 f821 	bl	800c87c <_malloc_usable_size_r>
 800c83a:	42a0      	cmp	r0, r4
 800c83c:	d20f      	bcs.n	800c85e <_realloc_r+0x48>
 800c83e:	4621      	mov	r1, r4
 800c840:	4638      	mov	r0, r7
 800c842:	f7fe f827 	bl	800a894 <_malloc_r>
 800c846:	4605      	mov	r5, r0
 800c848:	2800      	cmp	r0, #0
 800c84a:	d0f2      	beq.n	800c832 <_realloc_r+0x1c>
 800c84c:	4631      	mov	r1, r6
 800c84e:	4622      	mov	r2, r4
 800c850:	f7ff fb7a 	bl	800bf48 <memcpy>
 800c854:	4631      	mov	r1, r6
 800c856:	4638      	mov	r0, r7
 800c858:	f7fd ffd0 	bl	800a7fc <_free_r>
 800c85c:	e7e9      	b.n	800c832 <_realloc_r+0x1c>
 800c85e:	4635      	mov	r5, r6
 800c860:	e7e7      	b.n	800c832 <_realloc_r+0x1c>

0800c862 <__ascii_wctomb>:
 800c862:	b149      	cbz	r1, 800c878 <__ascii_wctomb+0x16>
 800c864:	2aff      	cmp	r2, #255	; 0xff
 800c866:	bf8b      	itete	hi
 800c868:	238a      	movhi	r3, #138	; 0x8a
 800c86a:	700a      	strbls	r2, [r1, #0]
 800c86c:	6003      	strhi	r3, [r0, #0]
 800c86e:	2001      	movls	r0, #1
 800c870:	bf88      	it	hi
 800c872:	f04f 30ff 	movhi.w	r0, #4294967295
 800c876:	4770      	bx	lr
 800c878:	4608      	mov	r0, r1
 800c87a:	4770      	bx	lr

0800c87c <_malloc_usable_size_r>:
 800c87c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c880:	1f18      	subs	r0, r3, #4
 800c882:	2b00      	cmp	r3, #0
 800c884:	bfbc      	itt	lt
 800c886:	580b      	ldrlt	r3, [r1, r0]
 800c888:	18c0      	addlt	r0, r0, r3
 800c88a:	4770      	bx	lr

0800c88c <_init>:
 800c88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c88e:	bf00      	nop
 800c890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c892:	bc08      	pop	{r3}
 800c894:	469e      	mov	lr, r3
 800c896:	4770      	bx	lr

0800c898 <_fini>:
 800c898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c89a:	bf00      	nop
 800c89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c89e:	bc08      	pop	{r3}
 800c8a0:	469e      	mov	lr, r3
 800c8a2:	4770      	bx	lr
