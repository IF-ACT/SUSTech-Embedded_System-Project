
LCD_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069d8  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08006bc0  08006bc0  00016bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006be4  08006be4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006be4  08006be4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006be4  08006be4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006be4  08006be4  00016be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006be8  08006be8  00016be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  2000000c  08006bf8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08006bf8  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000051cc  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000011e9  00000000  00000000  00025201  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000510  00000000  00000000  000263f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000468  00000000  00000000  00026900  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000155e1  00000000  00000000  00026d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000057e7  00000000  00000000  0003c349  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00076a2c  00000000  00000000  00041b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b855c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000137c  00000000  00000000  000b85d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000000c 	.word	0x2000000c
 8000204:	00000000 	.word	0x00000000
 8000208:	08006ba8 	.word	0x08006ba8

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000010 	.word	0x20000010
 8000224:	08006ba8 	.word	0x08006ba8

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2uiz>:
 80009c4:	004a      	lsls	r2, r1, #1
 80009c6:	d211      	bcs.n	80009ec <__aeabi_d2uiz+0x28>
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009cc:	d211      	bcs.n	80009f2 <__aeabi_d2uiz+0x2e>
 80009ce:	d50d      	bpl.n	80009ec <__aeabi_d2uiz+0x28>
 80009d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d40e      	bmi.n	80009f8 <__aeabi_d2uiz+0x34>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d102      	bne.n	80009fe <__aeabi_d2uiz+0x3a>
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	4770      	bx	lr
 80009fe:	f04f 0000 	mov.w	r0, #0
 8000a02:	4770      	bx	lr

08000a04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 0310 	add.w	r3, r7, #16
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a18:	4b32      	ldr	r3, [pc, #200]	; (8000ae4 <MX_GPIO_Init+0xe0>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a31      	ldr	r2, [pc, #196]	; (8000ae4 <MX_GPIO_Init+0xe0>)
 8000a1e:	f043 0320 	orr.w	r3, r3, #32
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b2f      	ldr	r3, [pc, #188]	; (8000ae4 <MX_GPIO_Init+0xe0>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0320 	and.w	r3, r3, #32
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a30:	4b2c      	ldr	r3, [pc, #176]	; (8000ae4 <MX_GPIO_Init+0xe0>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a2b      	ldr	r2, [pc, #172]	; (8000ae4 <MX_GPIO_Init+0xe0>)
 8000a36:	f043 0310 	orr.w	r3, r3, #16
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <MX_GPIO_Init+0xe0>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f003 0310 	and.w	r3, r3, #16
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <MX_GPIO_Init+0xe0>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a25      	ldr	r2, [pc, #148]	; (8000ae4 <MX_GPIO_Init+0xe0>)
 8000a4e:	f043 0304 	orr.w	r3, r3, #4
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <MX_GPIO_Init+0xe0>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f003 0304 	and.w	r3, r3, #4
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a66:	4820      	ldr	r0, [pc, #128]	; (8000ae8 <MX_GPIO_Init+0xe4>)
 8000a68:	f005 fc4e 	bl	8006308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8000a6c:	2320      	movs	r3, #32
 8000a6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a70:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <MX_GPIO_Init+0xe8>)
 8000a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 0310 	add.w	r3, r7, #16
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	481c      	ldr	r0, [pc, #112]	; (8000af0 <MX_GPIO_Init+0xec>)
 8000a80:	f005 fad8 	bl	8006034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000a84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2302      	movs	r3, #2
 8000a94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 0310 	add.w	r3, r7, #16
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4812      	ldr	r0, [pc, #72]	; (8000ae8 <MX_GPIO_Init+0xe4>)
 8000a9e:	f005 fac9 	bl	8006034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8000aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aa8:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_GPIO_Init+0xe8>)
 8000aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000ab0:	f107 0310 	add.w	r3, r7, #16
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <MX_GPIO_Init+0xe4>)
 8000ab8:	f005 fabc 	bl	8006034 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1);
 8000abc:	2201      	movs	r2, #1
 8000abe:	2101      	movs	r1, #1
 8000ac0:	2017      	movs	r0, #23
 8000ac2:	f005 fa80 	bl	8005fc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ac6:	2017      	movs	r0, #23
 8000ac8:	f005 fa99 	bl	8005ffe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 2);
 8000acc:	2202      	movs	r2, #2
 8000ace:	2101      	movs	r1, #1
 8000ad0:	2028      	movs	r0, #40	; 0x28
 8000ad2:	f005 fa78 	bl	8005fc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ad6:	2028      	movs	r0, #40	; 0x28
 8000ad8:	f005 fa91 	bl	8005ffe <HAL_NVIC_EnableIRQ>

}
 8000adc:	bf00      	nop
 8000ade:	3720      	adds	r7, #32
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	40010800 	.word	0x40010800
 8000aec:	10210000 	.word	0x10210000
 8000af0:	40011000 	.word	0x40011000

08000af4 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <LCD_WR_REG+0x40>)
 8000b00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b04:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <LCD_WR_REG+0x40>)
 8000b08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b0c:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <LCD_WR_REG+0x44>)
 8000b10:	88fb      	ldrh	r3, [r7, #6]
 8000b12:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000b14:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <LCD_WR_REG+0x40>)
 8000b16:	2280      	movs	r2, #128	; 0x80
 8000b18:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <LCD_WR_REG+0x40>)
 8000b1c:	2280      	movs	r2, #128	; 0x80
 8000b1e:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <LCD_WR_REG+0x40>)
 8000b22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b26:	611a      	str	r2, [r3, #16]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	40011000 	.word	0x40011000
 8000b38:	40010c00 	.word	0x40010c00

08000b3c <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <LCD_WR_DATAX+0x40>)
 8000b48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b4c:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <LCD_WR_DATAX+0x40>)
 8000b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b54:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <LCD_WR_DATAX+0x44>)
 8000b58:	88fb      	ldrh	r3, [r7, #6]
 8000b5a:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <LCD_WR_DATAX+0x40>)
 8000b5e:	2280      	movs	r2, #128	; 0x80
 8000b60:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <LCD_WR_DATAX+0x40>)
 8000b64:	2280      	movs	r2, #128	; 0x80
 8000b66:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <LCD_WR_DATAX+0x40>)
 8000b6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b6e:	611a      	str	r2, [r3, #16]
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40011000 	.word	0x40011000
 8000b80:	40010c00 	.word	0x40010c00

08000b84 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8000b8a:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <LCD_RD_DATA+0x7c>)
 8000b8c:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000b90:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8000b92:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <LCD_RD_DATA+0x7c>)
 8000b94:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000b98:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <LCD_RD_DATA+0x7c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8000ba0:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <LCD_RD_DATA+0x80>)
 8000ba2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ba6:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <LCD_RD_DATA+0x80>)
 8000baa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bae:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <LCD_RD_DATA+0x80>)
 8000bb2:	2240      	movs	r2, #64	; 0x40
 8000bb4:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <LCD_RD_DATA+0x84>)
 8000bb8:	889b      	ldrh	r3, [r3, #4]
 8000bba:	f648 1289 	movw	r2, #35209	; 0x8989
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d102      	bne.n	8000bc8 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f005 f906 	bl	8005dd4 <HAL_Delay>
	t = DATAIN
 8000bc8:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <LCD_RD_DATA+0x7c>)
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <LCD_RD_DATA+0x80>)
 8000bd0:	2240      	movs	r2, #64	; 0x40
 8000bd2:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000bd4:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <LCD_RD_DATA+0x80>)
 8000bd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bda:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <LCD_RD_DATA+0x7c>)
 8000bde:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000be2:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <LCD_RD_DATA+0x7c>)
 8000be6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000bea:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <LCD_RD_DATA+0x7c>)
 8000bee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bf2:	60da      	str	r2, [r3, #12]
	return t;
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40010c00 	.word	0x40010c00
 8000c04:	40011000 	.word	0x40011000
 8000c08:	20000028 	.word	0x20000028

08000c0c <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	460a      	mov	r2, r1
 8000c16:	80fb      	strh	r3, [r7, #6]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ff68 	bl	8000af4 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <LCD_WriteReg+0x4c>)
 8000c26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c2a:	611a      	str	r2, [r3, #16]
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <LCD_WriteReg+0x4c>)
 8000c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c32:	615a      	str	r2, [r3, #20]
 8000c34:	4a09      	ldr	r2, [pc, #36]	; (8000c5c <LCD_WriteReg+0x50>)
 8000c36:	88bb      	ldrh	r3, [r7, #4]
 8000c38:	60d3      	str	r3, [r2, #12]
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <LCD_WriteReg+0x4c>)
 8000c3c:	2280      	movs	r2, #128	; 0x80
 8000c3e:	615a      	str	r2, [r3, #20]
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <LCD_WriteReg+0x4c>)
 8000c42:	2280      	movs	r2, #128	; 0x80
 8000c44:	611a      	str	r2, [r3, #16]
 8000c46:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <LCD_WriteReg+0x4c>)
 8000c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c4c:	611a      	str	r2, [r3, #16]
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40011000 	.word	0x40011000
 8000c5c:	40010c00 	.word	0x40010c00

08000c60 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff41 	bl	8000af4 <LCD_WR_REG>
	return LCD_RD_DATA();
 8000c72:	f7ff ff87 	bl	8000b84 <LCD_RD_DATA>
 8000c76:	4603      	mov	r3, r0
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <LCD_WriteRAM_Prepare+0x14>)
 8000c86:	891b      	ldrh	r3, [r3, #8]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ff33 	bl	8000af4 <LCD_WR_REG>
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000028 	.word	0x20000028

08000c98 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	460a      	mov	r2, r1
 8000ca2:	80fb      	strh	r3, [r7, #6]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000ca8:	4b73      	ldr	r3, [pc, #460]	; (8000e78 <LCD_SetCursor+0x1e0>)
 8000caa:	889b      	ldrh	r3, [r3, #4]
 8000cac:	f249 3241 	movw	r2, #37697	; 0x9341
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d005      	beq.n	8000cc0 <LCD_SetCursor+0x28>
 8000cb4:	4b70      	ldr	r3, [pc, #448]	; (8000e78 <LCD_SetCursor+0x1e0>)
 8000cb6:	889b      	ldrh	r3, [r3, #4]
 8000cb8:	f245 3210 	movw	r2, #21264	; 0x5310
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d164      	bne.n	8000d8a <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000cc0:	4b6d      	ldr	r3, [pc, #436]	; (8000e78 <LCD_SetCursor+0x1e0>)
 8000cc2:	895b      	ldrh	r3, [r3, #10]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff15 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000cca:	4b6c      	ldr	r3, [pc, #432]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000ccc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cd0:	611a      	str	r2, [r3, #16]
 8000cd2:	4b6a      	ldr	r3, [pc, #424]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cd8:	615a      	str	r2, [r3, #20]
 8000cda:	88fb      	ldrh	r3, [r7, #6]
 8000cdc:	0a1b      	lsrs	r3, r3, #8
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	4b67      	ldr	r3, [pc, #412]	; (8000e80 <LCD_SetCursor+0x1e8>)
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	4b65      	ldr	r3, [pc, #404]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000ce6:	2280      	movs	r2, #128	; 0x80
 8000ce8:	615a      	str	r2, [r3, #20]
 8000cea:	4b64      	ldr	r3, [pc, #400]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000cec:	2280      	movs	r2, #128	; 0x80
 8000cee:	611a      	str	r2, [r3, #16]
 8000cf0:	4b62      	ldr	r3, [pc, #392]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000cf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cf6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000cf8:	4b60      	ldr	r3, [pc, #384]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000cfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cfe:	611a      	str	r2, [r3, #16]
 8000d00:	4b5e      	ldr	r3, [pc, #376]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000d02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d06:	615a      	str	r2, [r3, #20]
 8000d08:	88fb      	ldrh	r3, [r7, #6]
 8000d0a:	4a5d      	ldr	r2, [pc, #372]	; (8000e80 <LCD_SetCursor+0x1e8>)
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	60d3      	str	r3, [r2, #12]
 8000d10:	4b5a      	ldr	r3, [pc, #360]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000d12:	2280      	movs	r2, #128	; 0x80
 8000d14:	615a      	str	r2, [r3, #20]
 8000d16:	4b59      	ldr	r3, [pc, #356]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000d18:	2280      	movs	r2, #128	; 0x80
 8000d1a:	611a      	str	r2, [r3, #16]
 8000d1c:	4b57      	ldr	r3, [pc, #348]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d22:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000d24:	4b54      	ldr	r3, [pc, #336]	; (8000e78 <LCD_SetCursor+0x1e0>)
 8000d26:	899b      	ldrh	r3, [r3, #12]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fee3 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000d2e:	4b53      	ldr	r3, [pc, #332]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000d30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d34:	611a      	str	r2, [r3, #16]
 8000d36:	4b51      	ldr	r3, [pc, #324]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d3c:	615a      	str	r2, [r3, #20]
 8000d3e:	88bb      	ldrh	r3, [r7, #4]
 8000d40:	0a1b      	lsrs	r3, r3, #8
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	4b4e      	ldr	r3, [pc, #312]	; (8000e80 <LCD_SetCursor+0x1e8>)
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	4b4c      	ldr	r3, [pc, #304]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000d4a:	2280      	movs	r2, #128	; 0x80
 8000d4c:	615a      	str	r2, [r3, #20]
 8000d4e:	4b4b      	ldr	r3, [pc, #300]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000d50:	2280      	movs	r2, #128	; 0x80
 8000d52:	611a      	str	r2, [r3, #16]
 8000d54:	4b49      	ldr	r3, [pc, #292]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d5a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000d5c:	4b47      	ldr	r3, [pc, #284]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000d5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d62:	611a      	str	r2, [r3, #16]
 8000d64:	4b45      	ldr	r3, [pc, #276]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d6a:	615a      	str	r2, [r3, #20]
 8000d6c:	88bb      	ldrh	r3, [r7, #4]
 8000d6e:	4a44      	ldr	r2, [pc, #272]	; (8000e80 <LCD_SetCursor+0x1e8>)
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	60d3      	str	r3, [r2, #12]
 8000d74:	4b41      	ldr	r3, [pc, #260]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000d76:	2280      	movs	r2, #128	; 0x80
 8000d78:	615a      	str	r2, [r3, #20]
 8000d7a:	4b40      	ldr	r3, [pc, #256]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000d7c:	2280      	movs	r2, #128	; 0x80
 8000d7e:	611a      	str	r2, [r3, #16]
 8000d80:	4b3e      	ldr	r3, [pc, #248]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d86:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000d88:	e248      	b.n	800121c <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000d8a:	4b3b      	ldr	r3, [pc, #236]	; (8000e78 <LCD_SetCursor+0x1e0>)
 8000d8c:	889b      	ldrh	r3, [r3, #4]
 8000d8e:	f646 0204 	movw	r2, #26628	; 0x6804
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d176      	bne.n	8000e84 <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000d96:	4b38      	ldr	r3, [pc, #224]	; (8000e78 <LCD_SetCursor+0x1e0>)
 8000d98:	799b      	ldrb	r3, [r3, #6]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d106      	bne.n	8000dac <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000d9e:	4b36      	ldr	r3, [pc, #216]	; (8000e78 <LCD_SetCursor+0x1e0>)
 8000da0:	881a      	ldrh	r2, [r3, #0]
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	3b01      	subs	r3, #1
 8000daa:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000dac:	4b32      	ldr	r3, [pc, #200]	; (8000e78 <LCD_SetCursor+0x1e0>)
 8000dae:	895b      	ldrh	r3, [r3, #10]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fe9f 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000db6:	4b31      	ldr	r3, [pc, #196]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000db8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dbc:	611a      	str	r2, [r3, #16]
 8000dbe:	4b2f      	ldr	r3, [pc, #188]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dc4:	615a      	str	r2, [r3, #20]
 8000dc6:	88fb      	ldrh	r3, [r7, #6]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	4b2c      	ldr	r3, [pc, #176]	; (8000e80 <LCD_SetCursor+0x1e8>)
 8000dce:	60da      	str	r2, [r3, #12]
 8000dd0:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000dd2:	2280      	movs	r2, #128	; 0x80
 8000dd4:	615a      	str	r2, [r3, #20]
 8000dd6:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000dd8:	2280      	movs	r2, #128	; 0x80
 8000dda:	611a      	str	r2, [r3, #16]
 8000ddc:	4b27      	ldr	r3, [pc, #156]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000de2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000de4:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000de6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dea:	611a      	str	r2, [r3, #16]
 8000dec:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000dee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df2:	615a      	str	r2, [r3, #20]
 8000df4:	88fb      	ldrh	r3, [r7, #6]
 8000df6:	4a22      	ldr	r2, [pc, #136]	; (8000e80 <LCD_SetCursor+0x1e8>)
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	60d3      	str	r3, [r2, #12]
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000dfe:	2280      	movs	r2, #128	; 0x80
 8000e00:	615a      	str	r2, [r3, #20]
 8000e02:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000e04:	2280      	movs	r2, #128	; 0x80
 8000e06:	611a      	str	r2, [r3, #16]
 8000e08:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000e0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e0e:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000e10:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <LCD_SetCursor+0x1e0>)
 8000e12:	899b      	ldrh	r3, [r3, #12]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fe6d 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000e1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e20:	611a      	str	r2, [r3, #16]
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000e24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e28:	615a      	str	r2, [r3, #20]
 8000e2a:	88bb      	ldrh	r3, [r7, #4]
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <LCD_SetCursor+0x1e8>)
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000e36:	2280      	movs	r2, #128	; 0x80
 8000e38:	615a      	str	r2, [r3, #20]
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	611a      	str	r2, [r3, #16]
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e46:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000e4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e4e:	611a      	str	r2, [r3, #16]
 8000e50:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000e52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e56:	615a      	str	r2, [r3, #20]
 8000e58:	88bb      	ldrh	r3, [r7, #4]
 8000e5a:	4a09      	ldr	r2, [pc, #36]	; (8000e80 <LCD_SetCursor+0x1e8>)
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	60d3      	str	r3, [r2, #12]
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000e62:	2280      	movs	r2, #128	; 0x80
 8000e64:	615a      	str	r2, [r3, #20]
 8000e66:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000e68:	2280      	movs	r2, #128	; 0x80
 8000e6a:	611a      	str	r2, [r3, #16]
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <LCD_SetCursor+0x1e4>)
 8000e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e72:	611a      	str	r2, [r3, #16]
}
 8000e74:	e1d2      	b.n	800121c <LCD_SetCursor+0x584>
 8000e76:	bf00      	nop
 8000e78:	20000028 	.word	0x20000028
 8000e7c:	40011000 	.word	0x40011000
 8000e80:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8000e84:	4b99      	ldr	r3, [pc, #612]	; (80010ec <LCD_SetCursor+0x454>)
 8000e86:	889b      	ldrh	r3, [r3, #4]
 8000e88:	f641 1263 	movw	r2, #6499	; 0x1963
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	f040 8133 	bne.w	80010f8 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8000e92:	4b96      	ldr	r3, [pc, #600]	; (80010ec <LCD_SetCursor+0x454>)
 8000e94:	799b      	ldrb	r3, [r3, #6]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d163      	bne.n	8000f62 <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8000e9a:	4b94      	ldr	r3, [pc, #592]	; (80010ec <LCD_SetCursor+0x454>)
 8000e9c:	881a      	ldrh	r2, [r3, #0]
 8000e9e:	88fb      	ldrh	r3, [r7, #6]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000ea8:	4b90      	ldr	r3, [pc, #576]	; (80010ec <LCD_SetCursor+0x454>)
 8000eaa:	895b      	ldrh	r3, [r3, #10]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fe21 	bl	8000af4 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8000eb2:	4b8f      	ldr	r3, [pc, #572]	; (80010f0 <LCD_SetCursor+0x458>)
 8000eb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eb8:	611a      	str	r2, [r3, #16]
 8000eba:	4b8d      	ldr	r3, [pc, #564]	; (80010f0 <LCD_SetCursor+0x458>)
 8000ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ec0:	615a      	str	r2, [r3, #20]
 8000ec2:	4b8c      	ldr	r3, [pc, #560]	; (80010f4 <LCD_SetCursor+0x45c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	4b89      	ldr	r3, [pc, #548]	; (80010f0 <LCD_SetCursor+0x458>)
 8000eca:	2280      	movs	r2, #128	; 0x80
 8000ecc:	615a      	str	r2, [r3, #20]
 8000ece:	4b88      	ldr	r3, [pc, #544]	; (80010f0 <LCD_SetCursor+0x458>)
 8000ed0:	2280      	movs	r2, #128	; 0x80
 8000ed2:	611a      	str	r2, [r3, #16]
 8000ed4:	4b86      	ldr	r3, [pc, #536]	; (80010f0 <LCD_SetCursor+0x458>)
 8000ed6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eda:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8000edc:	4b84      	ldr	r3, [pc, #528]	; (80010f0 <LCD_SetCursor+0x458>)
 8000ede:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ee2:	611a      	str	r2, [r3, #16]
 8000ee4:	4b82      	ldr	r3, [pc, #520]	; (80010f0 <LCD_SetCursor+0x458>)
 8000ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eea:	615a      	str	r2, [r3, #20]
 8000eec:	4b81      	ldr	r3, [pc, #516]	; (80010f4 <LCD_SetCursor+0x45c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	4b7f      	ldr	r3, [pc, #508]	; (80010f0 <LCD_SetCursor+0x458>)
 8000ef4:	2280      	movs	r2, #128	; 0x80
 8000ef6:	615a      	str	r2, [r3, #20]
 8000ef8:	4b7d      	ldr	r3, [pc, #500]	; (80010f0 <LCD_SetCursor+0x458>)
 8000efa:	2280      	movs	r2, #128	; 0x80
 8000efc:	611a      	str	r2, [r3, #16]
 8000efe:	4b7c      	ldr	r3, [pc, #496]	; (80010f0 <LCD_SetCursor+0x458>)
 8000f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f04:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8000f06:	4b7a      	ldr	r3, [pc, #488]	; (80010f0 <LCD_SetCursor+0x458>)
 8000f08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f0c:	611a      	str	r2, [r3, #16]
 8000f0e:	4b78      	ldr	r3, [pc, #480]	; (80010f0 <LCD_SetCursor+0x458>)
 8000f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f14:	615a      	str	r2, [r3, #20]
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	4b75      	ldr	r3, [pc, #468]	; (80010f4 <LCD_SetCursor+0x45c>)
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	4b73      	ldr	r3, [pc, #460]	; (80010f0 <LCD_SetCursor+0x458>)
 8000f22:	2280      	movs	r2, #128	; 0x80
 8000f24:	615a      	str	r2, [r3, #20]
 8000f26:	4b72      	ldr	r3, [pc, #456]	; (80010f0 <LCD_SetCursor+0x458>)
 8000f28:	2280      	movs	r2, #128	; 0x80
 8000f2a:	611a      	str	r2, [r3, #16]
 8000f2c:	4b70      	ldr	r3, [pc, #448]	; (80010f0 <LCD_SetCursor+0x458>)
 8000f2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f32:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000f34:	4b6e      	ldr	r3, [pc, #440]	; (80010f0 <LCD_SetCursor+0x458>)
 8000f36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f3a:	611a      	str	r2, [r3, #16]
 8000f3c:	4b6c      	ldr	r3, [pc, #432]	; (80010f0 <LCD_SetCursor+0x458>)
 8000f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f42:	615a      	str	r2, [r3, #20]
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	4a6b      	ldr	r2, [pc, #428]	; (80010f4 <LCD_SetCursor+0x45c>)
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	60d3      	str	r3, [r2, #12]
 8000f4c:	4b68      	ldr	r3, [pc, #416]	; (80010f0 <LCD_SetCursor+0x458>)
 8000f4e:	2280      	movs	r2, #128	; 0x80
 8000f50:	615a      	str	r2, [r3, #20]
 8000f52:	4b67      	ldr	r3, [pc, #412]	; (80010f0 <LCD_SetCursor+0x458>)
 8000f54:	2280      	movs	r2, #128	; 0x80
 8000f56:	611a      	str	r2, [r3, #16]
 8000f58:	4b65      	ldr	r3, [pc, #404]	; (80010f0 <LCD_SetCursor+0x458>)
 8000f5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f5e:	611a      	str	r2, [r3, #16]
 8000f60:	e061      	b.n	8001026 <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8000f62:	4b62      	ldr	r3, [pc, #392]	; (80010ec <LCD_SetCursor+0x454>)
 8000f64:	895b      	ldrh	r3, [r3, #10]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fdc4 	bl	8000af4 <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8000f6c:	4b60      	ldr	r3, [pc, #384]	; (80010f0 <LCD_SetCursor+0x458>)
 8000f6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f72:	611a      	str	r2, [r3, #16]
 8000f74:	4b5e      	ldr	r3, [pc, #376]	; (80010f0 <LCD_SetCursor+0x458>)
 8000f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f7a:	615a      	str	r2, [r3, #20]
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
 8000f7e:	0a1b      	lsrs	r3, r3, #8
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	4b5c      	ldr	r3, [pc, #368]	; (80010f4 <LCD_SetCursor+0x45c>)
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	4b5a      	ldr	r3, [pc, #360]	; (80010f0 <LCD_SetCursor+0x458>)
 8000f88:	2280      	movs	r2, #128	; 0x80
 8000f8a:	615a      	str	r2, [r3, #20]
 8000f8c:	4b58      	ldr	r3, [pc, #352]	; (80010f0 <LCD_SetCursor+0x458>)
 8000f8e:	2280      	movs	r2, #128	; 0x80
 8000f90:	611a      	str	r2, [r3, #16]
 8000f92:	4b57      	ldr	r3, [pc, #348]	; (80010f0 <LCD_SetCursor+0x458>)
 8000f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f98:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000f9a:	4b55      	ldr	r3, [pc, #340]	; (80010f0 <LCD_SetCursor+0x458>)
 8000f9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fa0:	611a      	str	r2, [r3, #16]
 8000fa2:	4b53      	ldr	r3, [pc, #332]	; (80010f0 <LCD_SetCursor+0x458>)
 8000fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fa8:	615a      	str	r2, [r3, #20]
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	4a51      	ldr	r2, [pc, #324]	; (80010f4 <LCD_SetCursor+0x45c>)
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	60d3      	str	r3, [r2, #12]
 8000fb2:	4b4f      	ldr	r3, [pc, #316]	; (80010f0 <LCD_SetCursor+0x458>)
 8000fb4:	2280      	movs	r2, #128	; 0x80
 8000fb6:	615a      	str	r2, [r3, #20]
 8000fb8:	4b4d      	ldr	r3, [pc, #308]	; (80010f0 <LCD_SetCursor+0x458>)
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	611a      	str	r2, [r3, #16]
 8000fbe:	4b4c      	ldr	r3, [pc, #304]	; (80010f0 <LCD_SetCursor+0x458>)
 8000fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fc4:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8000fc6:	4b4a      	ldr	r3, [pc, #296]	; (80010f0 <LCD_SetCursor+0x458>)
 8000fc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fcc:	611a      	str	r2, [r3, #16]
 8000fce:	4b48      	ldr	r3, [pc, #288]	; (80010f0 <LCD_SetCursor+0x458>)
 8000fd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fd4:	615a      	str	r2, [r3, #20]
 8000fd6:	4b45      	ldr	r3, [pc, #276]	; (80010ec <LCD_SetCursor+0x454>)
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	121a      	asrs	r2, r3, #8
 8000fde:	4b45      	ldr	r3, [pc, #276]	; (80010f4 <LCD_SetCursor+0x45c>)
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	4b43      	ldr	r3, [pc, #268]	; (80010f0 <LCD_SetCursor+0x458>)
 8000fe4:	2280      	movs	r2, #128	; 0x80
 8000fe6:	615a      	str	r2, [r3, #20]
 8000fe8:	4b41      	ldr	r3, [pc, #260]	; (80010f0 <LCD_SetCursor+0x458>)
 8000fea:	2280      	movs	r2, #128	; 0x80
 8000fec:	611a      	str	r2, [r3, #16]
 8000fee:	4b40      	ldr	r3, [pc, #256]	; (80010f0 <LCD_SetCursor+0x458>)
 8000ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ff4:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8000ff6:	4b3e      	ldr	r3, [pc, #248]	; (80010f0 <LCD_SetCursor+0x458>)
 8000ff8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ffc:	611a      	str	r2, [r3, #16]
 8000ffe:	4b3c      	ldr	r3, [pc, #240]	; (80010f0 <LCD_SetCursor+0x458>)
 8001000:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001004:	615a      	str	r2, [r3, #20]
 8001006:	4b39      	ldr	r3, [pc, #228]	; (80010ec <LCD_SetCursor+0x454>)
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	3b01      	subs	r3, #1
 800100c:	4a39      	ldr	r2, [pc, #228]	; (80010f4 <LCD_SetCursor+0x45c>)
 800100e:	b2db      	uxtb	r3, r3
 8001010:	60d3      	str	r3, [r2, #12]
 8001012:	4b37      	ldr	r3, [pc, #220]	; (80010f0 <LCD_SetCursor+0x458>)
 8001014:	2280      	movs	r2, #128	; 0x80
 8001016:	615a      	str	r2, [r3, #20]
 8001018:	4b35      	ldr	r3, [pc, #212]	; (80010f0 <LCD_SetCursor+0x458>)
 800101a:	2280      	movs	r2, #128	; 0x80
 800101c:	611a      	str	r2, [r3, #16]
 800101e:	4b34      	ldr	r3, [pc, #208]	; (80010f0 <LCD_SetCursor+0x458>)
 8001020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001024:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001026:	4b31      	ldr	r3, [pc, #196]	; (80010ec <LCD_SetCursor+0x454>)
 8001028:	899b      	ldrh	r3, [r3, #12]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fd62 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8001030:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <LCD_SetCursor+0x458>)
 8001032:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001036:	611a      	str	r2, [r3, #16]
 8001038:	4b2d      	ldr	r3, [pc, #180]	; (80010f0 <LCD_SetCursor+0x458>)
 800103a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800103e:	615a      	str	r2, [r3, #20]
 8001040:	88bb      	ldrh	r3, [r7, #4]
 8001042:	0a1b      	lsrs	r3, r3, #8
 8001044:	b29a      	uxth	r2, r3
 8001046:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <LCD_SetCursor+0x45c>)
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	4b29      	ldr	r3, [pc, #164]	; (80010f0 <LCD_SetCursor+0x458>)
 800104c:	2280      	movs	r2, #128	; 0x80
 800104e:	615a      	str	r2, [r3, #20]
 8001050:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <LCD_SetCursor+0x458>)
 8001052:	2280      	movs	r2, #128	; 0x80
 8001054:	611a      	str	r2, [r3, #16]
 8001056:	4b26      	ldr	r3, [pc, #152]	; (80010f0 <LCD_SetCursor+0x458>)
 8001058:	f44f 7200 	mov.w	r2, #512	; 0x200
 800105c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 800105e:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <LCD_SetCursor+0x458>)
 8001060:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001064:	611a      	str	r2, [r3, #16]
 8001066:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <LCD_SetCursor+0x458>)
 8001068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800106c:	615a      	str	r2, [r3, #20]
 800106e:	88bb      	ldrh	r3, [r7, #4]
 8001070:	4a20      	ldr	r2, [pc, #128]	; (80010f4 <LCD_SetCursor+0x45c>)
 8001072:	b2db      	uxtb	r3, r3
 8001074:	60d3      	str	r3, [r2, #12]
 8001076:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <LCD_SetCursor+0x458>)
 8001078:	2280      	movs	r2, #128	; 0x80
 800107a:	615a      	str	r2, [r3, #20]
 800107c:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <LCD_SetCursor+0x458>)
 800107e:	2280      	movs	r2, #128	; 0x80
 8001080:	611a      	str	r2, [r3, #16]
 8001082:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <LCD_SetCursor+0x458>)
 8001084:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001088:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <LCD_SetCursor+0x458>)
 800108c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001090:	611a      	str	r2, [r3, #16]
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <LCD_SetCursor+0x458>)
 8001094:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001098:	615a      	str	r2, [r3, #20]
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <LCD_SetCursor+0x454>)
 800109c:	885b      	ldrh	r3, [r3, #2]
 800109e:	3b01      	subs	r3, #1
 80010a0:	121a      	asrs	r2, r3, #8
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <LCD_SetCursor+0x45c>)
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <LCD_SetCursor+0x458>)
 80010a8:	2280      	movs	r2, #128	; 0x80
 80010aa:	615a      	str	r2, [r3, #20]
 80010ac:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <LCD_SetCursor+0x458>)
 80010ae:	2280      	movs	r2, #128	; 0x80
 80010b0:	611a      	str	r2, [r3, #16]
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <LCD_SetCursor+0x458>)
 80010b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010b8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80010ba:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <LCD_SetCursor+0x458>)
 80010bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010c0:	611a      	str	r2, [r3, #16]
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <LCD_SetCursor+0x458>)
 80010c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c8:	615a      	str	r2, [r3, #20]
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <LCD_SetCursor+0x454>)
 80010cc:	885b      	ldrh	r3, [r3, #2]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	4a08      	ldr	r2, [pc, #32]	; (80010f4 <LCD_SetCursor+0x45c>)
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	60d3      	str	r3, [r2, #12]
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <LCD_SetCursor+0x458>)
 80010d8:	2280      	movs	r2, #128	; 0x80
 80010da:	615a      	str	r2, [r3, #20]
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <LCD_SetCursor+0x458>)
 80010de:	2280      	movs	r2, #128	; 0x80
 80010e0:	611a      	str	r2, [r3, #16]
 80010e2:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <LCD_SetCursor+0x458>)
 80010e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e8:	611a      	str	r2, [r3, #16]
}
 80010ea:	e097      	b.n	800121c <LCD_SetCursor+0x584>
 80010ec:	20000028 	.word	0x20000028
 80010f0:	40011000 	.word	0x40011000
 80010f4:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 80010f8:	4b4a      	ldr	r3, [pc, #296]	; (8001224 <LCD_SetCursor+0x58c>)
 80010fa:	889b      	ldrh	r3, [r3, #4]
 80010fc:	f245 5210 	movw	r2, #21776	; 0x5510
 8001100:	4293      	cmp	r3, r2
 8001102:	d172      	bne.n	80011ea <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8001104:	4b47      	ldr	r3, [pc, #284]	; (8001224 <LCD_SetCursor+0x58c>)
 8001106:	895b      	ldrh	r3, [r3, #10]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fcf3 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 800110e:	4b46      	ldr	r3, [pc, #280]	; (8001228 <LCD_SetCursor+0x590>)
 8001110:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001114:	611a      	str	r2, [r3, #16]
 8001116:	4b44      	ldr	r3, [pc, #272]	; (8001228 <LCD_SetCursor+0x590>)
 8001118:	f44f 7200 	mov.w	r2, #512	; 0x200
 800111c:	615a      	str	r2, [r3, #20]
 800111e:	88fb      	ldrh	r3, [r7, #6]
 8001120:	0a1b      	lsrs	r3, r3, #8
 8001122:	b29a      	uxth	r2, r3
 8001124:	4b41      	ldr	r3, [pc, #260]	; (800122c <LCD_SetCursor+0x594>)
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	4b3f      	ldr	r3, [pc, #252]	; (8001228 <LCD_SetCursor+0x590>)
 800112a:	2280      	movs	r2, #128	; 0x80
 800112c:	615a      	str	r2, [r3, #20]
 800112e:	4b3e      	ldr	r3, [pc, #248]	; (8001228 <LCD_SetCursor+0x590>)
 8001130:	2280      	movs	r2, #128	; 0x80
 8001132:	611a      	str	r2, [r3, #16]
 8001134:	4b3c      	ldr	r3, [pc, #240]	; (8001228 <LCD_SetCursor+0x590>)
 8001136:	f44f 7200 	mov.w	r2, #512	; 0x200
 800113a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 800113c:	4b39      	ldr	r3, [pc, #228]	; (8001224 <LCD_SetCursor+0x58c>)
 800113e:	895b      	ldrh	r3, [r3, #10]
 8001140:	3301      	adds	r3, #1
 8001142:	b29b      	uxth	r3, r3
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fcd5 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 800114a:	4b37      	ldr	r3, [pc, #220]	; (8001228 <LCD_SetCursor+0x590>)
 800114c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001150:	611a      	str	r2, [r3, #16]
 8001152:	4b35      	ldr	r3, [pc, #212]	; (8001228 <LCD_SetCursor+0x590>)
 8001154:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001158:	615a      	str	r2, [r3, #20]
 800115a:	88fb      	ldrh	r3, [r7, #6]
 800115c:	4a33      	ldr	r2, [pc, #204]	; (800122c <LCD_SetCursor+0x594>)
 800115e:	b2db      	uxtb	r3, r3
 8001160:	60d3      	str	r3, [r2, #12]
 8001162:	4b31      	ldr	r3, [pc, #196]	; (8001228 <LCD_SetCursor+0x590>)
 8001164:	2280      	movs	r2, #128	; 0x80
 8001166:	615a      	str	r2, [r3, #20]
 8001168:	4b2f      	ldr	r3, [pc, #188]	; (8001228 <LCD_SetCursor+0x590>)
 800116a:	2280      	movs	r2, #128	; 0x80
 800116c:	611a      	str	r2, [r3, #16]
 800116e:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <LCD_SetCursor+0x590>)
 8001170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001174:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001176:	4b2b      	ldr	r3, [pc, #172]	; (8001224 <LCD_SetCursor+0x58c>)
 8001178:	899b      	ldrh	r3, [r3, #12]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fcba 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8001180:	4b29      	ldr	r3, [pc, #164]	; (8001228 <LCD_SetCursor+0x590>)
 8001182:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001186:	611a      	str	r2, [r3, #16]
 8001188:	4b27      	ldr	r3, [pc, #156]	; (8001228 <LCD_SetCursor+0x590>)
 800118a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800118e:	615a      	str	r2, [r3, #20]
 8001190:	88bb      	ldrh	r3, [r7, #4]
 8001192:	0a1b      	lsrs	r3, r3, #8
 8001194:	b29a      	uxth	r2, r3
 8001196:	4b25      	ldr	r3, [pc, #148]	; (800122c <LCD_SetCursor+0x594>)
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	4b23      	ldr	r3, [pc, #140]	; (8001228 <LCD_SetCursor+0x590>)
 800119c:	2280      	movs	r2, #128	; 0x80
 800119e:	615a      	str	r2, [r3, #20]
 80011a0:	4b21      	ldr	r3, [pc, #132]	; (8001228 <LCD_SetCursor+0x590>)
 80011a2:	2280      	movs	r2, #128	; 0x80
 80011a4:	611a      	str	r2, [r3, #16]
 80011a6:	4b20      	ldr	r3, [pc, #128]	; (8001228 <LCD_SetCursor+0x590>)
 80011a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ac:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 80011ae:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <LCD_SetCursor+0x58c>)
 80011b0:	899b      	ldrh	r3, [r3, #12]
 80011b2:	3301      	adds	r3, #1
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fc9c 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 80011bc:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <LCD_SetCursor+0x590>)
 80011be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c2:	611a      	str	r2, [r3, #16]
 80011c4:	4b18      	ldr	r3, [pc, #96]	; (8001228 <LCD_SetCursor+0x590>)
 80011c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ca:	615a      	str	r2, [r3, #20]
 80011cc:	88bb      	ldrh	r3, [r7, #4]
 80011ce:	4a17      	ldr	r2, [pc, #92]	; (800122c <LCD_SetCursor+0x594>)
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	60d3      	str	r3, [r2, #12]
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <LCD_SetCursor+0x590>)
 80011d6:	2280      	movs	r2, #128	; 0x80
 80011d8:	615a      	str	r2, [r3, #20]
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <LCD_SetCursor+0x590>)
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	611a      	str	r2, [r3, #16]
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <LCD_SetCursor+0x590>)
 80011e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e6:	611a      	str	r2, [r3, #16]
}
 80011e8:	e018      	b.n	800121c <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <LCD_SetCursor+0x58c>)
 80011ec:	799b      	ldrb	r3, [r3, #6]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d106      	bne.n	8001200 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <LCD_SetCursor+0x58c>)
 80011f4:	881a      	ldrh	r2, [r3, #0]
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	3b01      	subs	r3, #1
 80011fe:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <LCD_SetCursor+0x58c>)
 8001202:	895b      	ldrh	r3, [r3, #10]
 8001204:	88fa      	ldrh	r2, [r7, #6]
 8001206:	4611      	mov	r1, r2
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fcff 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 800120e:	4b05      	ldr	r3, [pc, #20]	; (8001224 <LCD_SetCursor+0x58c>)
 8001210:	899b      	ldrh	r3, [r3, #12]
 8001212:	88ba      	ldrh	r2, [r7, #4]
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fcf8 	bl	8000c0c <LCD_WriteReg>
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000028 	.word	0x20000028
 8001228:	40011000 	.word	0x40011000
 800122c:	40010c00 	.word	0x40010c00

08001230 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 8001242:	4b78      	ldr	r3, [pc, #480]	; (8001424 <LCD_Scan_Dir+0x1f4>)
 8001244:	799b      	ldrb	r3, [r3, #6]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d10b      	bne.n	8001262 <LCD_Scan_Dir+0x32>
 800124a:	4b76      	ldr	r3, [pc, #472]	; (8001424 <LCD_Scan_Dir+0x1f4>)
 800124c:	889b      	ldrh	r3, [r3, #4]
 800124e:	f646 0204 	movw	r2, #26628	; 0x6804
 8001252:	4293      	cmp	r3, r2
 8001254:	d005      	beq.n	8001262 <LCD_Scan_Dir+0x32>
 8001256:	4b73      	ldr	r3, [pc, #460]	; (8001424 <LCD_Scan_Dir+0x1f4>)
 8001258:	889b      	ldrh	r3, [r3, #4]
 800125a:	f641 1263 	movw	r2, #6499	; 0x1963
 800125e:	4293      	cmp	r3, r2
 8001260:	d109      	bne.n	8001276 <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 8001262:	4b70      	ldr	r3, [pc, #448]	; (8001424 <LCD_Scan_Dir+0x1f4>)
 8001264:	799b      	ldrb	r3, [r3, #6]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d134      	bne.n	80012d4 <LCD_Scan_Dir+0xa4>
 800126a:	4b6e      	ldr	r3, [pc, #440]	; (8001424 <LCD_Scan_Dir+0x1f4>)
 800126c:	889b      	ldrh	r3, [r3, #4]
 800126e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001272:	4293      	cmp	r3, r2
 8001274:	d12e      	bne.n	80012d4 <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2b07      	cmp	r3, #7
 800127a:	d82b      	bhi.n	80012d4 <LCD_Scan_Dir+0xa4>
 800127c:	a201      	add	r2, pc, #4	; (adr r2, 8001284 <LCD_Scan_Dir+0x54>)
 800127e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001282:	bf00      	nop
 8001284:	080012a5 	.word	0x080012a5
 8001288:	080012ab 	.word	0x080012ab
 800128c:	080012b1 	.word	0x080012b1
 8001290:	080012b7 	.word	0x080012b7
 8001294:	080012bd 	.word	0x080012bd
 8001298:	080012c3 	.word	0x080012c3
 800129c:	080012c9 	.word	0x080012c9
 80012a0:	080012cf 	.word	0x080012cf
		{
		case 0:
			dir = 6;
 80012a4:	2306      	movs	r3, #6
 80012a6:	71fb      	strb	r3, [r7, #7]
			break;
 80012a8:	e014      	b.n	80012d4 <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 80012aa:	2307      	movs	r3, #7
 80012ac:	71fb      	strb	r3, [r7, #7]
			break;
 80012ae:	e011      	b.n	80012d4 <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 80012b0:	2304      	movs	r3, #4
 80012b2:	71fb      	strb	r3, [r7, #7]
			break;
 80012b4:	e00e      	b.n	80012d4 <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 80012b6:	2305      	movs	r3, #5
 80012b8:	71fb      	strb	r3, [r7, #7]
			break;
 80012ba:	e00b      	b.n	80012d4 <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 80012bc:	2301      	movs	r3, #1
 80012be:	71fb      	strb	r3, [r7, #7]
			break;
 80012c0:	e008      	b.n	80012d4 <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	71fb      	strb	r3, [r7, #7]
			break;
 80012c6:	e005      	b.n	80012d4 <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 80012c8:	2303      	movs	r3, #3
 80012ca:	71fb      	strb	r3, [r7, #7]
			break;
 80012cc:	e002      	b.n	80012d4 <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 80012ce:	2302      	movs	r3, #2
 80012d0:	71fb      	strb	r3, [r7, #7]
			break;
 80012d2:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 80012d4:	4b53      	ldr	r3, [pc, #332]	; (8001424 <LCD_Scan_Dir+0x1f4>)
 80012d6:	889b      	ldrh	r3, [r3, #4]
 80012d8:	f249 3241 	movw	r2, #37697	; 0x9341
 80012dc:	4293      	cmp	r3, r2
 80012de:	d018      	beq.n	8001312 <LCD_Scan_Dir+0xe2>
 80012e0:	4b50      	ldr	r3, [pc, #320]	; (8001424 <LCD_Scan_Dir+0x1f4>)
 80012e2:	889b      	ldrh	r3, [r3, #4]
 80012e4:	f646 0204 	movw	r2, #26628	; 0x6804
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d012      	beq.n	8001312 <LCD_Scan_Dir+0xe2>
 80012ec:	4b4d      	ldr	r3, [pc, #308]	; (8001424 <LCD_Scan_Dir+0x1f4>)
 80012ee:	889b      	ldrh	r3, [r3, #4]
 80012f0:	f245 3210 	movw	r2, #21264	; 0x5310
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d00c      	beq.n	8001312 <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 80012f8:	4b4a      	ldr	r3, [pc, #296]	; (8001424 <LCD_Scan_Dir+0x1f4>)
 80012fa:	889b      	ldrh	r3, [r3, #4]
 80012fc:	f245 5210 	movw	r2, #21776	; 0x5510
 8001300:	4293      	cmp	r3, r2
 8001302:	d006      	beq.n	8001312 <LCD_Scan_Dir+0xe2>
 8001304:	4b47      	ldr	r3, [pc, #284]	; (8001424 <LCD_Scan_Dir+0x1f4>)
 8001306:	889b      	ldrh	r3, [r3, #4]
 8001308:	f641 1263 	movw	r2, #6499	; 0x1963
 800130c:	4293      	cmp	r3, r2
 800130e:	f040 8250 	bne.w	80017b2 <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	2b07      	cmp	r3, #7
 8001316:	d836      	bhi.n	8001386 <LCD_Scan_Dir+0x156>
 8001318:	a201      	add	r2, pc, #4	; (adr r2, 8001320 <LCD_Scan_Dir+0xf0>)
 800131a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131e:	bf00      	nop
 8001320:	08001387 	.word	0x08001387
 8001324:	08001341 	.word	0x08001341
 8001328:	0800134b 	.word	0x0800134b
 800132c:	08001355 	.word	0x08001355
 8001330:	0800135f 	.word	0x0800135f
 8001334:	08001369 	.word	0x08001369
 8001338:	08001373 	.word	0x08001373
 800133c:	0800137d 	.word	0x0800137d
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8001340:	89fb      	ldrh	r3, [r7, #14]
 8001342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001346:	81fb      	strh	r3, [r7, #14]
			break;
 8001348:	e01d      	b.n	8001386 <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 800134a:	89fb      	ldrh	r3, [r7, #14]
 800134c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001350:	81fb      	strh	r3, [r7, #14]
			break;
 8001352:	e018      	b.n	8001386 <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8001354:	89fb      	ldrh	r3, [r7, #14]
 8001356:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800135a:	81fb      	strh	r3, [r7, #14]
			break;
 800135c:	e013      	b.n	8001386 <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 800135e:	89fb      	ldrh	r3, [r7, #14]
 8001360:	f043 0320 	orr.w	r3, r3, #32
 8001364:	81fb      	strh	r3, [r7, #14]
			break;
 8001366:	e00e      	b.n	8001386 <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8001368:	89fb      	ldrh	r3, [r7, #14]
 800136a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800136e:	81fb      	strh	r3, [r7, #14]
			break;
 8001370:	e009      	b.n	8001386 <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 8001372:	89fb      	ldrh	r3, [r7, #14]
 8001374:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001378:	81fb      	strh	r3, [r7, #14]
			break;
 800137a:	e004      	b.n	8001386 <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 800137c:	89fb      	ldrh	r3, [r7, #14]
 800137e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001382:	81fb      	strh	r3, [r7, #14]
			break;
 8001384:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 8001386:	4b27      	ldr	r3, [pc, #156]	; (8001424 <LCD_Scan_Dir+0x1f4>)
 8001388:	889b      	ldrh	r3, [r3, #4]
 800138a:	f245 5210 	movw	r2, #21776	; 0x5510
 800138e:	4293      	cmp	r3, r2
 8001390:	d103      	bne.n	800139a <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 8001392:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8001396:	81bb      	strh	r3, [r7, #12]
 8001398:	e001      	b.n	800139e <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 800139a:	2336      	movs	r3, #54	; 0x36
 800139c:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 800139e:	4b21      	ldr	r3, [pc, #132]	; (8001424 <LCD_Scan_Dir+0x1f4>)
 80013a0:	889b      	ldrh	r3, [r3, #4]
 80013a2:	f245 3210 	movw	r2, #21264	; 0x5310
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d00f      	beq.n	80013ca <LCD_Scan_Dir+0x19a>
 80013aa:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <LCD_Scan_Dir+0x1f4>)
 80013ac:	889b      	ldrh	r3, [r3, #4]
 80013ae:	f245 5210 	movw	r2, #21776	; 0x5510
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d009      	beq.n	80013ca <LCD_Scan_Dir+0x19a>
 80013b6:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <LCD_Scan_Dir+0x1f4>)
 80013b8:	889b      	ldrh	r3, [r3, #4]
 80013ba:	f641 1263 	movw	r2, #6499	; 0x1963
 80013be:	4293      	cmp	r3, r2
 80013c0:	d003      	beq.n	80013ca <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 80013c2:	89fb      	ldrh	r3, [r7, #14]
 80013c4:	f043 0308 	orr.w	r3, r3, #8
 80013c8:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 80013ca:	4b16      	ldr	r3, [pc, #88]	; (8001424 <LCD_Scan_Dir+0x1f4>)
 80013cc:	889b      	ldrh	r3, [r3, #4]
 80013ce:	f646 0204 	movw	r2, #26628	; 0x6804
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d103      	bne.n	80013de <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 80013d6:	89fb      	ldrh	r3, [r7, #14]
 80013d8:	f043 0302 	orr.w	r3, r3, #2
 80013dc:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80013de:	89fa      	ldrh	r2, [r7, #14]
 80013e0:	89bb      	ldrh	r3, [r7, #12]
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fc11 	bl	8000c0c <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <LCD_Scan_Dir+0x1f4>)
 80013ec:	889b      	ldrh	r3, [r3, #4]
 80013ee:	f641 1263 	movw	r2, #6499	; 0x1963
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d028      	beq.n	8001448 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 80013f6:	89fb      	ldrh	r3, [r7, #14]
 80013f8:	f003 0320 	and.w	r3, r3, #32
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d013      	beq.n	8001428 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <LCD_Scan_Dir+0x1f4>)
 8001402:	881a      	ldrh	r2, [r3, #0]
 8001404:	4b07      	ldr	r3, [pc, #28]	; (8001424 <LCD_Scan_Dir+0x1f4>)
 8001406:	885b      	ldrh	r3, [r3, #2]
 8001408:	429a      	cmp	r2, r3
 800140a:	d21d      	bcs.n	8001448 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <LCD_Scan_Dir+0x1f4>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8001412:	4b04      	ldr	r3, [pc, #16]	; (8001424 <LCD_Scan_Dir+0x1f4>)
 8001414:	885a      	ldrh	r2, [r3, #2]
 8001416:	4b03      	ldr	r3, [pc, #12]	; (8001424 <LCD_Scan_Dir+0x1f4>)
 8001418:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 800141a:	4a02      	ldr	r2, [pc, #8]	; (8001424 <LCD_Scan_Dir+0x1f4>)
 800141c:	897b      	ldrh	r3, [r7, #10]
 800141e:	8053      	strh	r3, [r2, #2]
 8001420:	e012      	b.n	8001448 <LCD_Scan_Dir+0x218>
 8001422:	bf00      	nop
 8001424:	20000028 	.word	0x20000028
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 8001428:	4b7f      	ldr	r3, [pc, #508]	; (8001628 <LCD_Scan_Dir+0x3f8>)
 800142a:	881a      	ldrh	r2, [r3, #0]
 800142c:	4b7e      	ldr	r3, [pc, #504]	; (8001628 <LCD_Scan_Dir+0x3f8>)
 800142e:	885b      	ldrh	r3, [r3, #2]
 8001430:	429a      	cmp	r2, r3
 8001432:	d909      	bls.n	8001448 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8001434:	4b7c      	ldr	r3, [pc, #496]	; (8001628 <LCD_Scan_Dir+0x3f8>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 800143a:	4b7b      	ldr	r3, [pc, #492]	; (8001628 <LCD_Scan_Dir+0x3f8>)
 800143c:	885a      	ldrh	r2, [r3, #2]
 800143e:	4b7a      	ldr	r3, [pc, #488]	; (8001628 <LCD_Scan_Dir+0x3f8>)
 8001440:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8001442:	4a79      	ldr	r2, [pc, #484]	; (8001628 <LCD_Scan_Dir+0x3f8>)
 8001444:	897b      	ldrh	r3, [r7, #10]
 8001446:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 8001448:	4b77      	ldr	r3, [pc, #476]	; (8001628 <LCD_Scan_Dir+0x3f8>)
 800144a:	889b      	ldrh	r3, [r3, #4]
 800144c:	f245 5210 	movw	r2, #21776	; 0x5510
 8001450:	4293      	cmp	r3, r2
 8001452:	f040 80ef 	bne.w	8001634 <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 8001456:	4b74      	ldr	r3, [pc, #464]	; (8001628 <LCD_Scan_Dir+0x3f8>)
 8001458:	895b      	ldrh	r3, [r3, #10]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fb4a 	bl	8000af4 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001460:	4b72      	ldr	r3, [pc, #456]	; (800162c <LCD_Scan_Dir+0x3fc>)
 8001462:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001466:	611a      	str	r2, [r3, #16]
 8001468:	4b70      	ldr	r3, [pc, #448]	; (800162c <LCD_Scan_Dir+0x3fc>)
 800146a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800146e:	615a      	str	r2, [r3, #20]
 8001470:	4b6f      	ldr	r3, [pc, #444]	; (8001630 <LCD_Scan_Dir+0x400>)
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	4b6d      	ldr	r3, [pc, #436]	; (800162c <LCD_Scan_Dir+0x3fc>)
 8001478:	2280      	movs	r2, #128	; 0x80
 800147a:	615a      	str	r2, [r3, #20]
 800147c:	4b6b      	ldr	r3, [pc, #428]	; (800162c <LCD_Scan_Dir+0x3fc>)
 800147e:	2280      	movs	r2, #128	; 0x80
 8001480:	611a      	str	r2, [r3, #16]
 8001482:	4b6a      	ldr	r3, [pc, #424]	; (800162c <LCD_Scan_Dir+0x3fc>)
 8001484:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001488:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 800148a:	4b67      	ldr	r3, [pc, #412]	; (8001628 <LCD_Scan_Dir+0x3f8>)
 800148c:	895b      	ldrh	r3, [r3, #10]
 800148e:	3301      	adds	r3, #1
 8001490:	b29b      	uxth	r3, r3
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fb2e 	bl	8000af4 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001498:	4b64      	ldr	r3, [pc, #400]	; (800162c <LCD_Scan_Dir+0x3fc>)
 800149a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800149e:	611a      	str	r2, [r3, #16]
 80014a0:	4b62      	ldr	r3, [pc, #392]	; (800162c <LCD_Scan_Dir+0x3fc>)
 80014a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a6:	615a      	str	r2, [r3, #20]
 80014a8:	4b61      	ldr	r3, [pc, #388]	; (8001630 <LCD_Scan_Dir+0x400>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	4b5f      	ldr	r3, [pc, #380]	; (800162c <LCD_Scan_Dir+0x3fc>)
 80014b0:	2280      	movs	r2, #128	; 0x80
 80014b2:	615a      	str	r2, [r3, #20]
 80014b4:	4b5d      	ldr	r3, [pc, #372]	; (800162c <LCD_Scan_Dir+0x3fc>)
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	611a      	str	r2, [r3, #16]
 80014ba:	4b5c      	ldr	r3, [pc, #368]	; (800162c <LCD_Scan_Dir+0x3fc>)
 80014bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014c0:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 80014c2:	4b59      	ldr	r3, [pc, #356]	; (8001628 <LCD_Scan_Dir+0x3f8>)
 80014c4:	895b      	ldrh	r3, [r3, #10]
 80014c6:	3302      	adds	r3, #2
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fb12 	bl	8000af4 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80014d0:	4b56      	ldr	r3, [pc, #344]	; (800162c <LCD_Scan_Dir+0x3fc>)
 80014d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014d6:	611a      	str	r2, [r3, #16]
 80014d8:	4b54      	ldr	r3, [pc, #336]	; (800162c <LCD_Scan_Dir+0x3fc>)
 80014da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014de:	615a      	str	r2, [r3, #20]
 80014e0:	4b51      	ldr	r3, [pc, #324]	; (8001628 <LCD_Scan_Dir+0x3f8>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	3b01      	subs	r3, #1
 80014e6:	121a      	asrs	r2, r3, #8
 80014e8:	4b51      	ldr	r3, [pc, #324]	; (8001630 <LCD_Scan_Dir+0x400>)
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	4b4f      	ldr	r3, [pc, #316]	; (800162c <LCD_Scan_Dir+0x3fc>)
 80014ee:	2280      	movs	r2, #128	; 0x80
 80014f0:	615a      	str	r2, [r3, #20]
 80014f2:	4b4e      	ldr	r3, [pc, #312]	; (800162c <LCD_Scan_Dir+0x3fc>)
 80014f4:	2280      	movs	r2, #128	; 0x80
 80014f6:	611a      	str	r2, [r3, #16]
 80014f8:	4b4c      	ldr	r3, [pc, #304]	; (800162c <LCD_Scan_Dir+0x3fc>)
 80014fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014fe:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8001500:	4b49      	ldr	r3, [pc, #292]	; (8001628 <LCD_Scan_Dir+0x3f8>)
 8001502:	895b      	ldrh	r3, [r3, #10]
 8001504:	3303      	adds	r3, #3
 8001506:	b29b      	uxth	r3, r3
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff faf3 	bl	8000af4 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800150e:	4b47      	ldr	r3, [pc, #284]	; (800162c <LCD_Scan_Dir+0x3fc>)
 8001510:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	4b45      	ldr	r3, [pc, #276]	; (800162c <LCD_Scan_Dir+0x3fc>)
 8001518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800151c:	615a      	str	r2, [r3, #20]
 800151e:	4b42      	ldr	r3, [pc, #264]	; (8001628 <LCD_Scan_Dir+0x3f8>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	3b01      	subs	r3, #1
 8001524:	4a42      	ldr	r2, [pc, #264]	; (8001630 <LCD_Scan_Dir+0x400>)
 8001526:	b2db      	uxtb	r3, r3
 8001528:	60d3      	str	r3, [r2, #12]
 800152a:	4b40      	ldr	r3, [pc, #256]	; (800162c <LCD_Scan_Dir+0x3fc>)
 800152c:	2280      	movs	r2, #128	; 0x80
 800152e:	615a      	str	r2, [r3, #20]
 8001530:	4b3e      	ldr	r3, [pc, #248]	; (800162c <LCD_Scan_Dir+0x3fc>)
 8001532:	2280      	movs	r2, #128	; 0x80
 8001534:	611a      	str	r2, [r3, #16]
 8001536:	4b3d      	ldr	r3, [pc, #244]	; (800162c <LCD_Scan_Dir+0x3fc>)
 8001538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800153c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 800153e:	4b3a      	ldr	r3, [pc, #232]	; (8001628 <LCD_Scan_Dir+0x3f8>)
 8001540:	899b      	ldrh	r3, [r3, #12]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fad6 	bl	8000af4 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001548:	4b38      	ldr	r3, [pc, #224]	; (800162c <LCD_Scan_Dir+0x3fc>)
 800154a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800154e:	611a      	str	r2, [r3, #16]
 8001550:	4b36      	ldr	r3, [pc, #216]	; (800162c <LCD_Scan_Dir+0x3fc>)
 8001552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001556:	615a      	str	r2, [r3, #20]
 8001558:	4b35      	ldr	r3, [pc, #212]	; (8001630 <LCD_Scan_Dir+0x400>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	4b33      	ldr	r3, [pc, #204]	; (800162c <LCD_Scan_Dir+0x3fc>)
 8001560:	2280      	movs	r2, #128	; 0x80
 8001562:	615a      	str	r2, [r3, #20]
 8001564:	4b31      	ldr	r3, [pc, #196]	; (800162c <LCD_Scan_Dir+0x3fc>)
 8001566:	2280      	movs	r2, #128	; 0x80
 8001568:	611a      	str	r2, [r3, #16]
 800156a:	4b30      	ldr	r3, [pc, #192]	; (800162c <LCD_Scan_Dir+0x3fc>)
 800156c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001570:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 8001572:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <LCD_Scan_Dir+0x3f8>)
 8001574:	899b      	ldrh	r3, [r3, #12]
 8001576:	3301      	adds	r3, #1
 8001578:	b29b      	uxth	r3, r3
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff faba 	bl	8000af4 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001580:	4b2a      	ldr	r3, [pc, #168]	; (800162c <LCD_Scan_Dir+0x3fc>)
 8001582:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001586:	611a      	str	r2, [r3, #16]
 8001588:	4b28      	ldr	r3, [pc, #160]	; (800162c <LCD_Scan_Dir+0x3fc>)
 800158a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800158e:	615a      	str	r2, [r3, #20]
 8001590:	4b27      	ldr	r3, [pc, #156]	; (8001630 <LCD_Scan_Dir+0x400>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	4b25      	ldr	r3, [pc, #148]	; (800162c <LCD_Scan_Dir+0x3fc>)
 8001598:	2280      	movs	r2, #128	; 0x80
 800159a:	615a      	str	r2, [r3, #20]
 800159c:	4b23      	ldr	r3, [pc, #140]	; (800162c <LCD_Scan_Dir+0x3fc>)
 800159e:	2280      	movs	r2, #128	; 0x80
 80015a0:	611a      	str	r2, [r3, #16]
 80015a2:	4b22      	ldr	r3, [pc, #136]	; (800162c <LCD_Scan_Dir+0x3fc>)
 80015a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 80015aa:	4b1f      	ldr	r3, [pc, #124]	; (8001628 <LCD_Scan_Dir+0x3f8>)
 80015ac:	899b      	ldrh	r3, [r3, #12]
 80015ae:	3302      	adds	r3, #2
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fa9e 	bl	8000af4 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80015b8:	4b1c      	ldr	r3, [pc, #112]	; (800162c <LCD_Scan_Dir+0x3fc>)
 80015ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015be:	611a      	str	r2, [r3, #16]
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <LCD_Scan_Dir+0x3fc>)
 80015c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c6:	615a      	str	r2, [r3, #20]
 80015c8:	4b17      	ldr	r3, [pc, #92]	; (8001628 <LCD_Scan_Dir+0x3f8>)
 80015ca:	885b      	ldrh	r3, [r3, #2]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	121a      	asrs	r2, r3, #8
 80015d0:	4b17      	ldr	r3, [pc, #92]	; (8001630 <LCD_Scan_Dir+0x400>)
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	4b15      	ldr	r3, [pc, #84]	; (800162c <LCD_Scan_Dir+0x3fc>)
 80015d6:	2280      	movs	r2, #128	; 0x80
 80015d8:	615a      	str	r2, [r3, #20]
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <LCD_Scan_Dir+0x3fc>)
 80015dc:	2280      	movs	r2, #128	; 0x80
 80015de:	611a      	str	r2, [r3, #16]
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <LCD_Scan_Dir+0x3fc>)
 80015e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e6:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <LCD_Scan_Dir+0x3f8>)
 80015ea:	899b      	ldrh	r3, [r3, #12]
 80015ec:	3303      	adds	r3, #3
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fa7f 	bl	8000af4 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80015f6:	4b0d      	ldr	r3, [pc, #52]	; (800162c <LCD_Scan_Dir+0x3fc>)
 80015f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015fc:	611a      	str	r2, [r3, #16]
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <LCD_Scan_Dir+0x3fc>)
 8001600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001604:	615a      	str	r2, [r3, #20]
 8001606:	4b08      	ldr	r3, [pc, #32]	; (8001628 <LCD_Scan_Dir+0x3f8>)
 8001608:	885b      	ldrh	r3, [r3, #2]
 800160a:	3b01      	subs	r3, #1
 800160c:	4a08      	ldr	r2, [pc, #32]	; (8001630 <LCD_Scan_Dir+0x400>)
 800160e:	b2db      	uxtb	r3, r3
 8001610:	60d3      	str	r3, [r2, #12]
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <LCD_Scan_Dir+0x3fc>)
 8001614:	2280      	movs	r2, #128	; 0x80
 8001616:	615a      	str	r2, [r3, #20]
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <LCD_Scan_Dir+0x3fc>)
 800161a:	2280      	movs	r2, #128	; 0x80
 800161c:	611a      	str	r2, [r3, #16]
 800161e:	4b03      	ldr	r3, [pc, #12]	; (800162c <LCD_Scan_Dir+0x3fc>)
 8001620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001624:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8001626:	e10a      	b.n	800183e <LCD_Scan_Dir+0x60e>
 8001628:	20000028 	.word	0x20000028
 800162c:	40011000 	.word	0x40011000
 8001630:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 8001634:	4b84      	ldr	r3, [pc, #528]	; (8001848 <LCD_Scan_Dir+0x618>)
 8001636:	895b      	ldrh	r3, [r3, #10]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fa5b 	bl	8000af4 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800163e:	4b83      	ldr	r3, [pc, #524]	; (800184c <LCD_Scan_Dir+0x61c>)
 8001640:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001644:	611a      	str	r2, [r3, #16]
 8001646:	4b81      	ldr	r3, [pc, #516]	; (800184c <LCD_Scan_Dir+0x61c>)
 8001648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800164c:	615a      	str	r2, [r3, #20]
 800164e:	4b80      	ldr	r3, [pc, #512]	; (8001850 <LCD_Scan_Dir+0x620>)
 8001650:	2200      	movs	r2, #0
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	4b7d      	ldr	r3, [pc, #500]	; (800184c <LCD_Scan_Dir+0x61c>)
 8001656:	2280      	movs	r2, #128	; 0x80
 8001658:	615a      	str	r2, [r3, #20]
 800165a:	4b7c      	ldr	r3, [pc, #496]	; (800184c <LCD_Scan_Dir+0x61c>)
 800165c:	2280      	movs	r2, #128	; 0x80
 800165e:	611a      	str	r2, [r3, #16]
 8001660:	4b7a      	ldr	r3, [pc, #488]	; (800184c <LCD_Scan_Dir+0x61c>)
 8001662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001666:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001668:	4b78      	ldr	r3, [pc, #480]	; (800184c <LCD_Scan_Dir+0x61c>)
 800166a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800166e:	611a      	str	r2, [r3, #16]
 8001670:	4b76      	ldr	r3, [pc, #472]	; (800184c <LCD_Scan_Dir+0x61c>)
 8001672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001676:	615a      	str	r2, [r3, #20]
 8001678:	4b75      	ldr	r3, [pc, #468]	; (8001850 <LCD_Scan_Dir+0x620>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	4b73      	ldr	r3, [pc, #460]	; (800184c <LCD_Scan_Dir+0x61c>)
 8001680:	2280      	movs	r2, #128	; 0x80
 8001682:	615a      	str	r2, [r3, #20]
 8001684:	4b71      	ldr	r3, [pc, #452]	; (800184c <LCD_Scan_Dir+0x61c>)
 8001686:	2280      	movs	r2, #128	; 0x80
 8001688:	611a      	str	r2, [r3, #16]
 800168a:	4b70      	ldr	r3, [pc, #448]	; (800184c <LCD_Scan_Dir+0x61c>)
 800168c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001690:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001692:	4b6e      	ldr	r3, [pc, #440]	; (800184c <LCD_Scan_Dir+0x61c>)
 8001694:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001698:	611a      	str	r2, [r3, #16]
 800169a:	4b6c      	ldr	r3, [pc, #432]	; (800184c <LCD_Scan_Dir+0x61c>)
 800169c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016a0:	615a      	str	r2, [r3, #20]
 80016a2:	4b69      	ldr	r3, [pc, #420]	; (8001848 <LCD_Scan_Dir+0x618>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	121a      	asrs	r2, r3, #8
 80016aa:	4b69      	ldr	r3, [pc, #420]	; (8001850 <LCD_Scan_Dir+0x620>)
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	4b67      	ldr	r3, [pc, #412]	; (800184c <LCD_Scan_Dir+0x61c>)
 80016b0:	2280      	movs	r2, #128	; 0x80
 80016b2:	615a      	str	r2, [r3, #20]
 80016b4:	4b65      	ldr	r3, [pc, #404]	; (800184c <LCD_Scan_Dir+0x61c>)
 80016b6:	2280      	movs	r2, #128	; 0x80
 80016b8:	611a      	str	r2, [r3, #16]
 80016ba:	4b64      	ldr	r3, [pc, #400]	; (800184c <LCD_Scan_Dir+0x61c>)
 80016bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016c0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80016c2:	4b62      	ldr	r3, [pc, #392]	; (800184c <LCD_Scan_Dir+0x61c>)
 80016c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016c8:	611a      	str	r2, [r3, #16]
 80016ca:	4b60      	ldr	r3, [pc, #384]	; (800184c <LCD_Scan_Dir+0x61c>)
 80016cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016d0:	615a      	str	r2, [r3, #20]
 80016d2:	4b5d      	ldr	r3, [pc, #372]	; (8001848 <LCD_Scan_Dir+0x618>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	3b01      	subs	r3, #1
 80016d8:	4a5d      	ldr	r2, [pc, #372]	; (8001850 <LCD_Scan_Dir+0x620>)
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	60d3      	str	r3, [r2, #12]
 80016de:	4b5b      	ldr	r3, [pc, #364]	; (800184c <LCD_Scan_Dir+0x61c>)
 80016e0:	2280      	movs	r2, #128	; 0x80
 80016e2:	615a      	str	r2, [r3, #20]
 80016e4:	4b59      	ldr	r3, [pc, #356]	; (800184c <LCD_Scan_Dir+0x61c>)
 80016e6:	2280      	movs	r2, #128	; 0x80
 80016e8:	611a      	str	r2, [r3, #16]
 80016ea:	4b58      	ldr	r3, [pc, #352]	; (800184c <LCD_Scan_Dir+0x61c>)
 80016ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016f0:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 80016f2:	4b55      	ldr	r3, [pc, #340]	; (8001848 <LCD_Scan_Dir+0x618>)
 80016f4:	899b      	ldrh	r3, [r3, #12]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff f9fc 	bl	8000af4 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80016fc:	4b53      	ldr	r3, [pc, #332]	; (800184c <LCD_Scan_Dir+0x61c>)
 80016fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001702:	611a      	str	r2, [r3, #16]
 8001704:	4b51      	ldr	r3, [pc, #324]	; (800184c <LCD_Scan_Dir+0x61c>)
 8001706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800170a:	615a      	str	r2, [r3, #20]
 800170c:	4b50      	ldr	r3, [pc, #320]	; (8001850 <LCD_Scan_Dir+0x620>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	4b4e      	ldr	r3, [pc, #312]	; (800184c <LCD_Scan_Dir+0x61c>)
 8001714:	2280      	movs	r2, #128	; 0x80
 8001716:	615a      	str	r2, [r3, #20]
 8001718:	4b4c      	ldr	r3, [pc, #304]	; (800184c <LCD_Scan_Dir+0x61c>)
 800171a:	2280      	movs	r2, #128	; 0x80
 800171c:	611a      	str	r2, [r3, #16]
 800171e:	4b4b      	ldr	r3, [pc, #300]	; (800184c <LCD_Scan_Dir+0x61c>)
 8001720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001724:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001726:	4b49      	ldr	r3, [pc, #292]	; (800184c <LCD_Scan_Dir+0x61c>)
 8001728:	f44f 7280 	mov.w	r2, #256	; 0x100
 800172c:	611a      	str	r2, [r3, #16]
 800172e:	4b47      	ldr	r3, [pc, #284]	; (800184c <LCD_Scan_Dir+0x61c>)
 8001730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001734:	615a      	str	r2, [r3, #20]
 8001736:	4b46      	ldr	r3, [pc, #280]	; (8001850 <LCD_Scan_Dir+0x620>)
 8001738:	2200      	movs	r2, #0
 800173a:	60da      	str	r2, [r3, #12]
 800173c:	4b43      	ldr	r3, [pc, #268]	; (800184c <LCD_Scan_Dir+0x61c>)
 800173e:	2280      	movs	r2, #128	; 0x80
 8001740:	615a      	str	r2, [r3, #20]
 8001742:	4b42      	ldr	r3, [pc, #264]	; (800184c <LCD_Scan_Dir+0x61c>)
 8001744:	2280      	movs	r2, #128	; 0x80
 8001746:	611a      	str	r2, [r3, #16]
 8001748:	4b40      	ldr	r3, [pc, #256]	; (800184c <LCD_Scan_Dir+0x61c>)
 800174a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800174e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001750:	4b3e      	ldr	r3, [pc, #248]	; (800184c <LCD_Scan_Dir+0x61c>)
 8001752:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001756:	611a      	str	r2, [r3, #16]
 8001758:	4b3c      	ldr	r3, [pc, #240]	; (800184c <LCD_Scan_Dir+0x61c>)
 800175a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800175e:	615a      	str	r2, [r3, #20]
 8001760:	4b39      	ldr	r3, [pc, #228]	; (8001848 <LCD_Scan_Dir+0x618>)
 8001762:	885b      	ldrh	r3, [r3, #2]
 8001764:	3b01      	subs	r3, #1
 8001766:	121a      	asrs	r2, r3, #8
 8001768:	4b39      	ldr	r3, [pc, #228]	; (8001850 <LCD_Scan_Dir+0x620>)
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	4b37      	ldr	r3, [pc, #220]	; (800184c <LCD_Scan_Dir+0x61c>)
 800176e:	2280      	movs	r2, #128	; 0x80
 8001770:	615a      	str	r2, [r3, #20]
 8001772:	4b36      	ldr	r3, [pc, #216]	; (800184c <LCD_Scan_Dir+0x61c>)
 8001774:	2280      	movs	r2, #128	; 0x80
 8001776:	611a      	str	r2, [r3, #16]
 8001778:	4b34      	ldr	r3, [pc, #208]	; (800184c <LCD_Scan_Dir+0x61c>)
 800177a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800177e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001780:	4b32      	ldr	r3, [pc, #200]	; (800184c <LCD_Scan_Dir+0x61c>)
 8001782:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001786:	611a      	str	r2, [r3, #16]
 8001788:	4b30      	ldr	r3, [pc, #192]	; (800184c <LCD_Scan_Dir+0x61c>)
 800178a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800178e:	615a      	str	r2, [r3, #20]
 8001790:	4b2d      	ldr	r3, [pc, #180]	; (8001848 <LCD_Scan_Dir+0x618>)
 8001792:	885b      	ldrh	r3, [r3, #2]
 8001794:	3b01      	subs	r3, #1
 8001796:	4a2e      	ldr	r2, [pc, #184]	; (8001850 <LCD_Scan_Dir+0x620>)
 8001798:	b2db      	uxtb	r3, r3
 800179a:	60d3      	str	r3, [r2, #12]
 800179c:	4b2b      	ldr	r3, [pc, #172]	; (800184c <LCD_Scan_Dir+0x61c>)
 800179e:	2280      	movs	r2, #128	; 0x80
 80017a0:	615a      	str	r2, [r3, #20]
 80017a2:	4b2a      	ldr	r3, [pc, #168]	; (800184c <LCD_Scan_Dir+0x61c>)
 80017a4:	2280      	movs	r2, #128	; 0x80
 80017a6:	611a      	str	r2, [r3, #16]
 80017a8:	4b28      	ldr	r3, [pc, #160]	; (800184c <LCD_Scan_Dir+0x61c>)
 80017aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ae:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 80017b0:	e045      	b.n	800183e <LCD_Scan_Dir+0x60e>
		}
	} else {
		switch (dir) {
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	2b07      	cmp	r3, #7
 80017b6:	d836      	bhi.n	8001826 <LCD_Scan_Dir+0x5f6>
 80017b8:	a201      	add	r2, pc, #4	; (adr r2, 80017c0 <LCD_Scan_Dir+0x590>)
 80017ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017be:	bf00      	nop
 80017c0:	080017e1 	.word	0x080017e1
 80017c4:	080017eb 	.word	0x080017eb
 80017c8:	080017f5 	.word	0x080017f5
 80017cc:	08001827 	.word	0x08001827
 80017d0:	080017ff 	.word	0x080017ff
 80017d4:	08001809 	.word	0x08001809
 80017d8:	08001813 	.word	0x08001813
 80017dc:	0800181d 	.word	0x0800181d
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 80017e0:	89fb      	ldrh	r3, [r7, #14]
 80017e2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80017e6:	81fb      	strh	r3, [r7, #14]
			break;
 80017e8:	e01d      	b.n	8001826 <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 80017ea:	89fb      	ldrh	r3, [r7, #14]
 80017ec:	f043 0310 	orr.w	r3, r3, #16
 80017f0:	81fb      	strh	r3, [r7, #14]
			break;
 80017f2:	e018      	b.n	8001826 <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 80017f4:	89fb      	ldrh	r3, [r7, #14]
 80017f6:	f043 0320 	orr.w	r3, r3, #32
 80017fa:	81fb      	strh	r3, [r7, #14]
			break;
 80017fc:	e013      	b.n	8001826 <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 80017fe:	89fb      	ldrh	r3, [r7, #14]
 8001800:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001804:	81fb      	strh	r3, [r7, #14]
			break;
 8001806:	e00e      	b.n	8001826 <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 8001808:	89fb      	ldrh	r3, [r7, #14]
 800180a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800180e:	81fb      	strh	r3, [r7, #14]
			break;
 8001810:	e009      	b.n	8001826 <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 8001812:	89fb      	ldrh	r3, [r7, #14]
 8001814:	f043 0318 	orr.w	r3, r3, #24
 8001818:	81fb      	strh	r3, [r7, #14]
			break;
 800181a:	e004      	b.n	8001826 <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 800181c:	89fb      	ldrh	r3, [r7, #14]
 800181e:	f043 0308 	orr.w	r3, r3, #8
 8001822:	81fb      	strh	r3, [r7, #14]
			break;
 8001824:	bf00      	nop
		}
		dirreg = 0X03;
 8001826:	2303      	movs	r3, #3
 8001828:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 800182a:	89fb      	ldrh	r3, [r7, #14]
 800182c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001830:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8001832:	89fa      	ldrh	r2, [r7, #14]
 8001834:	89bb      	ldrh	r3, [r7, #12]
 8001836:	4611      	mov	r1, r2
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff f9e7 	bl	8000c0c <LCD_WriteReg>
	}
}
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000028 	.word	0x20000028
 800184c:	40011000 	.word	0x40011000
 8001850:	40010c00 	.word	0x40010c00
 8001854:	00000000 	.word	0x00000000

08001858 <LCD_SSD_BackLightSet>:
	LCD_CS_SET;
	LCD_WR_DATA(color);		//写数据
}
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001862:	20be      	movs	r0, #190	; 0xbe
 8001864:	f7ff f946 	bl	8000af4 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001868:	4b4b      	ldr	r3, [pc, #300]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 800186a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800186e:	611a      	str	r2, [r3, #16]
 8001870:	4b49      	ldr	r3, [pc, #292]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 8001872:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001876:	615a      	str	r2, [r3, #20]
 8001878:	4b48      	ldr	r3, [pc, #288]	; (800199c <LCD_SSD_BackLightSet+0x144>)
 800187a:	2205      	movs	r2, #5
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	4b46      	ldr	r3, [pc, #280]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 8001880:	2280      	movs	r2, #128	; 0x80
 8001882:	615a      	str	r2, [r3, #20]
 8001884:	4b44      	ldr	r3, [pc, #272]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 8001886:	2280      	movs	r2, #128	; 0x80
 8001888:	611a      	str	r2, [r3, #16]
 800188a:	4b43      	ldr	r3, [pc, #268]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 800188c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001890:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8001892:	4b41      	ldr	r3, [pc, #260]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 8001894:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001898:	611a      	str	r2, [r3, #16]
 800189a:	4b3f      	ldr	r3, [pc, #252]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 800189c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a0:	615a      	str	r2, [r3, #20]
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fe11 	bl	80004cc <__aeabi_i2d>
 80018aa:	a339      	add	r3, pc, #228	; (adr r3, 8001990 <LCD_SSD_BackLightSet+0x138>)
 80018ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b0:	f7fe fe76 	bl	80005a0 <__aeabi_dmul>
 80018b4:	4603      	mov	r3, r0
 80018b6:	460c      	mov	r4, r1
 80018b8:	461a      	mov	r2, r3
 80018ba:	4623      	mov	r3, r4
 80018bc:	4c37      	ldr	r4, [pc, #220]	; (800199c <LCD_SSD_BackLightSet+0x144>)
 80018be:	4610      	mov	r0, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	f7ff f87f 	bl	80009c4 <__aeabi_d2uiz>
 80018c6:	4603      	mov	r3, r0
 80018c8:	60e3      	str	r3, [r4, #12]
 80018ca:	4b33      	ldr	r3, [pc, #204]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 80018cc:	2280      	movs	r2, #128	; 0x80
 80018ce:	615a      	str	r2, [r3, #20]
 80018d0:	4b31      	ldr	r3, [pc, #196]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 80018d2:	2280      	movs	r2, #128	; 0x80
 80018d4:	611a      	str	r2, [r3, #16]
 80018d6:	4b30      	ldr	r3, [pc, #192]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 80018d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018dc:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 80018de:	4b2e      	ldr	r3, [pc, #184]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 80018e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018e4:	611a      	str	r2, [r3, #16]
 80018e6:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 80018e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ec:	615a      	str	r2, [r3, #20]
 80018ee:	4b2b      	ldr	r3, [pc, #172]	; (800199c <LCD_SSD_BackLightSet+0x144>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	60da      	str	r2, [r3, #12]
 80018f4:	4b28      	ldr	r3, [pc, #160]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 80018f6:	2280      	movs	r2, #128	; 0x80
 80018f8:	615a      	str	r2, [r3, #20]
 80018fa:	4b27      	ldr	r3, [pc, #156]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 80018fc:	2280      	movs	r2, #128	; 0x80
 80018fe:	611a      	str	r2, [r3, #16]
 8001900:	4b25      	ldr	r3, [pc, #148]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 8001902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001906:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8001908:	4b23      	ldr	r3, [pc, #140]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 800190a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800190e:	611a      	str	r2, [r3, #16]
 8001910:	4b21      	ldr	r3, [pc, #132]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 8001912:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001916:	615a      	str	r2, [r3, #20]
 8001918:	4b20      	ldr	r3, [pc, #128]	; (800199c <LCD_SSD_BackLightSet+0x144>)
 800191a:	22ff      	movs	r2, #255	; 0xff
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 8001920:	2280      	movs	r2, #128	; 0x80
 8001922:	615a      	str	r2, [r3, #20]
 8001924:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	611a      	str	r2, [r3, #16]
 800192a:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 800192c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001930:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8001932:	4b19      	ldr	r3, [pc, #100]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 8001934:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001938:	611a      	str	r2, [r3, #16]
 800193a:	4b17      	ldr	r3, [pc, #92]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 800193c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001940:	615a      	str	r2, [r3, #20]
 8001942:	4b16      	ldr	r3, [pc, #88]	; (800199c <LCD_SSD_BackLightSet+0x144>)
 8001944:	2200      	movs	r2, #0
 8001946:	60da      	str	r2, [r3, #12]
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 800194a:	2280      	movs	r2, #128	; 0x80
 800194c:	615a      	str	r2, [r3, #20]
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 8001950:	2280      	movs	r2, #128	; 0x80
 8001952:	611a      	str	r2, [r3, #16]
 8001954:	4b10      	ldr	r3, [pc, #64]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 8001956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800195a:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 800195c:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 800195e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001962:	611a      	str	r2, [r3, #16]
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 8001966:	f44f 7200 	mov.w	r2, #512	; 0x200
 800196a:	615a      	str	r2, [r3, #20]
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <LCD_SSD_BackLightSet+0x144>)
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 8001974:	2280      	movs	r2, #128	; 0x80
 8001976:	615a      	str	r2, [r3, #20]
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 800197a:	2280      	movs	r2, #128	; 0x80
 800197c:	611a      	str	r2, [r3, #16]
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <LCD_SSD_BackLightSet+0x140>)
 8001980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001984:	611a      	str	r2, [r3, #16]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	bd90      	pop	{r4, r7, pc}
 800198e:	bf00      	nop
 8001990:	66666666 	.word	0x66666666
 8001994:	40046666 	.word	0x40046666
 8001998:	40011000 	.word	0x40011000
 800199c:	40010c00 	.word	0x40010c00

080019a0 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d177      	bne.n	8001aa0 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 80019b0:	4b80      	ldr	r3, [pc, #512]	; (8001bb4 <LCD_Display_Dir+0x214>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 80019b6:	4b7f      	ldr	r3, [pc, #508]	; (8001bb4 <LCD_Display_Dir+0x214>)
 80019b8:	22f0      	movs	r2, #240	; 0xf0
 80019ba:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 80019bc:	4b7d      	ldr	r3, [pc, #500]	; (8001bb4 <LCD_Display_Dir+0x214>)
 80019be:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019c2:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 80019c4:	4b7b      	ldr	r3, [pc, #492]	; (8001bb4 <LCD_Display_Dir+0x214>)
 80019c6:	889b      	ldrh	r3, [r3, #4]
 80019c8:	f249 3241 	movw	r2, #37697	; 0x9341
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d00b      	beq.n	80019e8 <LCD_Display_Dir+0x48>
 80019d0:	4b78      	ldr	r3, [pc, #480]	; (8001bb4 <LCD_Display_Dir+0x214>)
 80019d2:	889b      	ldrh	r3, [r3, #4]
 80019d4:	f646 0204 	movw	r2, #26628	; 0x6804
 80019d8:	4293      	cmp	r3, r2
 80019da:	d005      	beq.n	80019e8 <LCD_Display_Dir+0x48>
 80019dc:	4b75      	ldr	r3, [pc, #468]	; (8001bb4 <LCD_Display_Dir+0x214>)
 80019de:	889b      	ldrh	r3, [r3, #4]
 80019e0:	f245 3210 	movw	r2, #21264	; 0x5310
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d11e      	bne.n	8001a26 <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 80019e8:	4b72      	ldr	r3, [pc, #456]	; (8001bb4 <LCD_Display_Dir+0x214>)
 80019ea:	222c      	movs	r2, #44	; 0x2c
 80019ec:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 80019ee:	4b71      	ldr	r3, [pc, #452]	; (8001bb4 <LCD_Display_Dir+0x214>)
 80019f0:	222a      	movs	r2, #42	; 0x2a
 80019f2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 80019f4:	4b6f      	ldr	r3, [pc, #444]	; (8001bb4 <LCD_Display_Dir+0x214>)
 80019f6:	222b      	movs	r2, #43	; 0x2b
 80019f8:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 80019fa:	4b6e      	ldr	r3, [pc, #440]	; (8001bb4 <LCD_Display_Dir+0x214>)
 80019fc:	889b      	ldrh	r3, [r3, #4]
 80019fe:	f646 0204 	movw	r2, #26628	; 0x6804
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d006      	beq.n	8001a14 <LCD_Display_Dir+0x74>
 8001a06:	4b6b      	ldr	r3, [pc, #428]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001a08:	889b      	ldrh	r3, [r3, #4]
 8001a0a:	f245 3210 	movw	r2, #21264	; 0x5310
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	f040 80c7 	bne.w	8001ba2 <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8001a14:	4b67      	ldr	r3, [pc, #412]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001a16:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a1a:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8001a1c:	4b65      	ldr	r3, [pc, #404]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001a1e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001a22:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001a24:	e0bd      	b.n	8001ba2 <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8001a26:	4b63      	ldr	r3, [pc, #396]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001a28:	889b      	ldrh	r3, [r3, #4]
 8001a2a:	f245 5210 	movw	r2, #21776	; 0x5510
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d114      	bne.n	8001a5c <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8001a32:	4b60      	ldr	r3, [pc, #384]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001a34:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001a38:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001a3a:	4b5e      	ldr	r3, [pc, #376]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001a3c:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001a40:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001a42:	4b5c      	ldr	r3, [pc, #368]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001a44:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001a48:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8001a4a:	4b5a      	ldr	r3, [pc, #360]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001a4c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001a50:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8001a52:	4b58      	ldr	r3, [pc, #352]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001a54:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001a58:	805a      	strh	r2, [r3, #2]
 8001a5a:	e0a3      	b.n	8001ba4 <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 8001a5c:	4b55      	ldr	r3, [pc, #340]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001a5e:	889b      	ldrh	r3, [r3, #4]
 8001a60:	f641 1263 	movw	r2, #6499	; 0x1963
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d111      	bne.n	8001a8c <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001a68:	4b52      	ldr	r3, [pc, #328]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001a6a:	222c      	movs	r2, #44	; 0x2c
 8001a6c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 8001a6e:	4b51      	ldr	r3, [pc, #324]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001a70:	222b      	movs	r2, #43	; 0x2b
 8001a72:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8001a74:	4b4f      	ldr	r3, [pc, #316]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001a76:	222a      	movs	r2, #42	; 0x2a
 8001a78:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8001a7a:	4b4e      	ldr	r3, [pc, #312]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001a7c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001a80:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8001a82:	4b4c      	ldr	r3, [pc, #304]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001a84:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001a88:	805a      	strh	r2, [r3, #2]
 8001a8a:	e08b      	b.n	8001ba4 <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8001a8c:	4b49      	ldr	r3, [pc, #292]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001a8e:	2222      	movs	r2, #34	; 0x22
 8001a90:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8001a92:	4b48      	ldr	r3, [pc, #288]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001a94:	2220      	movs	r2, #32
 8001a96:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8001a98:	4b46      	ldr	r3, [pc, #280]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001a9a:	2221      	movs	r2, #33	; 0x21
 8001a9c:	819a      	strh	r2, [r3, #12]
 8001a9e:	e081      	b.n	8001ba4 <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8001aa0:	4b44      	ldr	r3, [pc, #272]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 8001aa6:	4b43      	ldr	r3, [pc, #268]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001aa8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001aac:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001aae:	4b41      	ldr	r3, [pc, #260]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001ab0:	22f0      	movs	r2, #240	; 0xf0
 8001ab2:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001ab4:	4b3f      	ldr	r3, [pc, #252]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001ab6:	889b      	ldrh	r3, [r3, #4]
 8001ab8:	f249 3241 	movw	r2, #37697	; 0x9341
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d005      	beq.n	8001acc <LCD_Display_Dir+0x12c>
 8001ac0:	4b3c      	ldr	r3, [pc, #240]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001ac2:	889b      	ldrh	r3, [r3, #4]
 8001ac4:	f245 3210 	movw	r2, #21264	; 0x5310
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d109      	bne.n	8001ae0 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 8001acc:	4b39      	ldr	r3, [pc, #228]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001ace:	222c      	movs	r2, #44	; 0x2c
 8001ad0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8001ad2:	4b38      	ldr	r3, [pc, #224]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001ad4:	222a      	movs	r2, #42	; 0x2a
 8001ad6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8001ad8:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001ada:	222b      	movs	r2, #43	; 0x2b
 8001adc:	819a      	strh	r2, [r3, #12]
 8001ade:	e04b      	b.n	8001b78 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8001ae0:	4b34      	ldr	r3, [pc, #208]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001ae2:	889b      	ldrh	r3, [r3, #4]
 8001ae4:	f646 0204 	movw	r2, #26628	; 0x6804
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d109      	bne.n	8001b00 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8001aec:	4b31      	ldr	r3, [pc, #196]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001aee:	222c      	movs	r2, #44	; 0x2c
 8001af0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 8001af2:	4b30      	ldr	r3, [pc, #192]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001af4:	222b      	movs	r2, #43	; 0x2b
 8001af6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8001af8:	4b2e      	ldr	r3, [pc, #184]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001afa:	222a      	movs	r2, #42	; 0x2a
 8001afc:	819a      	strh	r2, [r3, #12]
 8001afe:	e03b      	b.n	8001b78 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8001b00:	4b2c      	ldr	r3, [pc, #176]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001b02:	889b      	ldrh	r3, [r3, #4]
 8001b04:	f245 5210 	movw	r2, #21776	; 0x5510
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d114      	bne.n	8001b36 <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 8001b0c:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001b0e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001b12:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8001b14:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001b16:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001b1a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8001b1c:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001b1e:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001b22:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 8001b24:	4b23      	ldr	r3, [pc, #140]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001b26:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001b2a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8001b2c:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001b2e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001b32:	805a      	strh	r2, [r3, #2]
 8001b34:	e020      	b.n	8001b78 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001b38:	889b      	ldrh	r3, [r3, #4]
 8001b3a:	f641 1263 	movw	r2, #6499	; 0x1963
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d111      	bne.n	8001b66 <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001b44:	222c      	movs	r2, #44	; 0x2c
 8001b46:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8001b48:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001b4a:	222a      	movs	r2, #42	; 0x2a
 8001b4c:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 8001b4e:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001b50:	222b      	movs	r2, #43	; 0x2b
 8001b52:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8001b54:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001b56:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001b5a:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 8001b5c:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001b5e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001b62:	805a      	strh	r2, [r3, #2]
 8001b64:	e008      	b.n	8001b78 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 8001b66:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001b68:	2222      	movs	r2, #34	; 0x22
 8001b6a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001b6e:	2221      	movs	r2, #33	; 0x21
 8001b70:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001b74:	2220      	movs	r2, #32
 8001b76:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001b7a:	889b      	ldrh	r3, [r3, #4]
 8001b7c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d005      	beq.n	8001b90 <LCD_Display_Dir+0x1f0>
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001b86:	889b      	ldrh	r3, [r3, #4]
 8001b88:	f245 3210 	movw	r2, #21264	; 0x5310
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d109      	bne.n	8001ba4 <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001b92:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001b96:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <LCD_Display_Dir+0x214>)
 8001b9a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001b9e:	805a      	strh	r2, [r3, #2]
 8001ba0:	e000      	b.n	8001ba4 <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001ba2:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	f7ff fb43 	bl	8001230 <LCD_Scan_Dir>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000028 	.word	0x20000028

08001bb8 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8001bbe:	4b90      	ldr	r3, [pc, #576]	; (8001e00 <LCD_Init+0x248>)
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	4a8f      	ldr	r2, [pc, #572]	; (8001e00 <LCD_Init+0x248>)
 8001bc4:	f043 0308 	orr.w	r3, r3, #8
 8001bc8:	6193      	str	r3, [r2, #24]
 8001bca:	4b8d      	ldr	r3, [pc, #564]	; (8001e00 <LCD_Init+0x248>)
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8001bd6:	4b8a      	ldr	r3, [pc, #552]	; (8001e00 <LCD_Init+0x248>)
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	4a89      	ldr	r2, [pc, #548]	; (8001e00 <LCD_Init+0x248>)
 8001bdc:	f043 0310 	orr.w	r3, r3, #16
 8001be0:	6193      	str	r3, [r2, #24]
 8001be2:	4b87      	ldr	r3, [pc, #540]	; (8001e00 <LCD_Init+0x248>)
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	f003 0310 	and.w	r3, r3, #16
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8001bee:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001bf2:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8001c00:	f107 0308 	add.w	r3, r7, #8
 8001c04:	4619      	mov	r1, r3
 8001c06:	487f      	ldr	r0, [pc, #508]	; (8001e04 <LCD_Init+0x24c>)
 8001c08:	f004 fa14 	bl	8006034 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 8001c0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c10:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 8001c12:	f107 0308 	add.w	r3, r7, #8
 8001c16:	4619      	mov	r1, r3
 8001c18:	487b      	ldr	r0, [pc, #492]	; (8001e08 <LCD_Init+0x250>)
 8001c1a:	f004 fa0b 	bl	8006034 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 8001c1e:	2032      	movs	r0, #50	; 0x32
 8001c20:	f004 f8d8 	bl	8005dd4 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 8001c24:	2101      	movs	r1, #1
 8001c26:	2000      	movs	r0, #0
 8001c28:	f7fe fff0 	bl	8000c0c <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8001c2c:	2032      	movs	r0, #50	; 0x32
 8001c2e:	f004 f8d1 	bl	8005dd4 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 8001c32:	2000      	movs	r0, #0
 8001c34:	f7ff f814 	bl	8000c60 <LCD_ReadReg>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	4b73      	ldr	r3, [pc, #460]	; (8001e0c <LCD_Init+0x254>)
 8001c3e:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8001c40:	4b72      	ldr	r3, [pc, #456]	; (8001e0c <LCD_Init+0x254>)
 8001c42:	889b      	ldrh	r3, [r3, #4]
 8001c44:	2bfe      	cmp	r3, #254	; 0xfe
 8001c46:	d90b      	bls.n	8001c60 <LCD_Init+0xa8>
 8001c48:	4b70      	ldr	r3, [pc, #448]	; (8001e0c <LCD_Init+0x254>)
 8001c4a:	889b      	ldrh	r3, [r3, #4]
 8001c4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d005      	beq.n	8001c60 <LCD_Init+0xa8>
 8001c54:	4b6d      	ldr	r3, [pc, #436]	; (8001e0c <LCD_Init+0x254>)
 8001c56:	889b      	ldrh	r3, [r3, #4]
 8001c58:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8001c5c:	f040 80c8 	bne.w	8001df0 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8001c60:	20d3      	movs	r0, #211	; 0xd3
 8001c62:	f7fe ff47 	bl	8000af4 <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 8001c66:	f7fe ff8d 	bl	8000b84 <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 8001c6a:	f7fe ff8b 	bl	8000b84 <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 8001c6e:	f7fe ff89 	bl	8000b84 <LCD_RD_DATA>
 8001c72:	4603      	mov	r3, r0
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b65      	ldr	r3, [pc, #404]	; (8001e0c <LCD_Init+0x254>)
 8001c78:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 8001c7a:	4b64      	ldr	r3, [pc, #400]	; (8001e0c <LCD_Init+0x254>)
 8001c7c:	889b      	ldrh	r3, [r3, #4]
 8001c7e:	021b      	lsls	r3, r3, #8
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	4b62      	ldr	r3, [pc, #392]	; (8001e0c <LCD_Init+0x254>)
 8001c84:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 8001c86:	f7fe ff7d 	bl	8000b84 <LCD_RD_DATA>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b5f      	ldr	r3, [pc, #380]	; (8001e0c <LCD_Init+0x254>)
 8001c90:	889b      	ldrh	r3, [r3, #4]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	4b5d      	ldr	r3, [pc, #372]	; (8001e0c <LCD_Init+0x254>)
 8001c98:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 8001c9a:	4b5c      	ldr	r3, [pc, #368]	; (8001e0c <LCD_Init+0x254>)
 8001c9c:	889b      	ldrh	r3, [r3, #4]
 8001c9e:	f249 3241 	movw	r2, #37697	; 0x9341
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	f000 80a4 	beq.w	8001df0 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8001ca8:	20bf      	movs	r0, #191	; 0xbf
 8001caa:	f7fe ff23 	bl	8000af4 <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 8001cae:	f7fe ff69 	bl	8000b84 <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 8001cb2:	f7fe ff67 	bl	8000b84 <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 8001cb6:	f7fe ff65 	bl	8000b84 <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 8001cba:	f7fe ff63 	bl	8000b84 <LCD_RD_DATA>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b52      	ldr	r3, [pc, #328]	; (8001e0c <LCD_Init+0x254>)
 8001cc4:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 8001cc6:	4b51      	ldr	r3, [pc, #324]	; (8001e0c <LCD_Init+0x254>)
 8001cc8:	889b      	ldrh	r3, [r3, #4]
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	4b4f      	ldr	r3, [pc, #316]	; (8001e0c <LCD_Init+0x254>)
 8001cd0:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 8001cd2:	f7fe ff57 	bl	8000b84 <LCD_RD_DATA>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b4c      	ldr	r3, [pc, #304]	; (8001e0c <LCD_Init+0x254>)
 8001cdc:	889b      	ldrh	r3, [r3, #4]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	4b4a      	ldr	r3, [pc, #296]	; (8001e0c <LCD_Init+0x254>)
 8001ce4:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 8001ce6:	4b49      	ldr	r3, [pc, #292]	; (8001e0c <LCD_Init+0x254>)
 8001ce8:	889b      	ldrh	r3, [r3, #4]
 8001cea:	f646 0204 	movw	r2, #26628	; 0x6804
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d07e      	beq.n	8001df0 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 8001cf2:	20d4      	movs	r0, #212	; 0xd4
 8001cf4:	f7fe fefe 	bl	8000af4 <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 8001cf8:	f7fe ff44 	bl	8000b84 <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 8001cfc:	f7fe ff42 	bl	8000b84 <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 8001d00:	f7fe ff40 	bl	8000b84 <LCD_RD_DATA>
 8001d04:	4603      	mov	r3, r0
 8001d06:	461a      	mov	r2, r3
 8001d08:	4b40      	ldr	r3, [pc, #256]	; (8001e0c <LCD_Init+0x254>)
 8001d0a:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 8001d0c:	4b3f      	ldr	r3, [pc, #252]	; (8001e0c <LCD_Init+0x254>)
 8001d0e:	889b      	ldrh	r3, [r3, #4]
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	4b3d      	ldr	r3, [pc, #244]	; (8001e0c <LCD_Init+0x254>)
 8001d16:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 8001d18:	f7fe ff34 	bl	8000b84 <LCD_RD_DATA>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b3a      	ldr	r3, [pc, #232]	; (8001e0c <LCD_Init+0x254>)
 8001d22:	889b      	ldrh	r3, [r3, #4]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	4b38      	ldr	r3, [pc, #224]	; (8001e0c <LCD_Init+0x254>)
 8001d2a:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8001d2c:	4b37      	ldr	r3, [pc, #220]	; (8001e0c <LCD_Init+0x254>)
 8001d2e:	889b      	ldrh	r3, [r3, #4]
 8001d30:	f245 3210 	movw	r2, #21264	; 0x5310
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d05b      	beq.n	8001df0 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 8001d38:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8001d3c:	f7fe feda 	bl	8000af4 <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8001d40:	f7fe ff20 	bl	8000b84 <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 8001d44:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8001d48:	f7fe fed4 	bl	8000af4 <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 8001d4c:	f7fe ff1a 	bl	8000b84 <LCD_RD_DATA>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461a      	mov	r2, r3
 8001d54:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <LCD_Init+0x254>)
 8001d56:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8001d58:	4b2c      	ldr	r3, [pc, #176]	; (8001e0c <LCD_Init+0x254>)
 8001d5a:	889b      	ldrh	r3, [r3, #4]
 8001d5c:	021b      	lsls	r3, r3, #8
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <LCD_Init+0x254>)
 8001d62:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8001d64:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8001d68:	f7fe fec4 	bl	8000af4 <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 8001d6c:	f7fe ff0a 	bl	8000b84 <LCD_RD_DATA>
 8001d70:	4603      	mov	r3, r0
 8001d72:	461a      	mov	r2, r3
 8001d74:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <LCD_Init+0x254>)
 8001d76:	889b      	ldrh	r3, [r3, #4]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <LCD_Init+0x254>)
 8001d7e:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8001d80:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <LCD_Init+0x254>)
 8001d82:	889b      	ldrh	r3, [r3, #4]
 8001d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d88:	d103      	bne.n	8001d92 <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <LCD_Init+0x254>)
 8001d8c:	f245 5210 	movw	r2, #21776	; 0x5510
 8001d90:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8001d92:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <LCD_Init+0x254>)
 8001d94:	889b      	ldrh	r3, [r3, #4]
 8001d96:	f245 5210 	movw	r2, #21776	; 0x5510
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d028      	beq.n	8001df0 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 8001d9e:	20a1      	movs	r0, #161	; 0xa1
 8001da0:	f7fe fea8 	bl	8000af4 <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 8001da4:	f7fe feee 	bl	8000b84 <LCD_RD_DATA>
 8001da8:	4603      	mov	r3, r0
 8001daa:	461a      	mov	r2, r3
 8001dac:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <LCD_Init+0x254>)
 8001dae:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8001db0:	f7fe fee8 	bl	8000b84 <LCD_RD_DATA>
 8001db4:	4603      	mov	r3, r0
 8001db6:	461a      	mov	r2, r3
 8001db8:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <LCD_Init+0x254>)
 8001dba:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 8001dbc:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <LCD_Init+0x254>)
 8001dbe:	889b      	ldrh	r3, [r3, #4]
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <LCD_Init+0x254>)
 8001dc6:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8001dc8:	f7fe fedc 	bl	8000b84 <LCD_RD_DATA>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <LCD_Init+0x254>)
 8001dd2:	889b      	ldrh	r3, [r3, #4]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <LCD_Init+0x254>)
 8001dda:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <LCD_Init+0x254>)
 8001dde:	889b      	ldrh	r3, [r3, #4]
 8001de0:	f245 7261 	movw	r2, #22369	; 0x5761
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d103      	bne.n	8001df0 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <LCD_Init+0x254>)
 8001dea:	f641 1263 	movw	r2, #6499	; 0x1963
 8001dee:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <LCD_Init+0x254>)
 8001df2:	889b      	ldrh	r3, [r3, #4]
 8001df4:	f249 3241 	movw	r2, #37697	; 0x9341
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	f040 811f 	bne.w	800203c <LCD_Init+0x484>
 8001dfe:	e007      	b.n	8001e10 <LCD_Init+0x258>
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40011000 	.word	0x40011000
 8001e08:	40010c00 	.word	0x40010c00
 8001e0c:	20000028 	.word	0x20000028
			{
		LCD_WR_REG(0xCF);
 8001e10:	20cf      	movs	r0, #207	; 0xcf
 8001e12:	f7fe fe6f 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001e16:	2000      	movs	r0, #0
 8001e18:	f7fe fe90 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 8001e1c:	20c1      	movs	r0, #193	; 0xc1
 8001e1e:	f7fe fe8d 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 8001e22:	2030      	movs	r0, #48	; 0x30
 8001e24:	f7fe fe8a 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 8001e28:	20ed      	movs	r0, #237	; 0xed
 8001e2a:	f7fe fe63 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 8001e2e:	2064      	movs	r0, #100	; 0x64
 8001e30:	f7fe fe84 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8001e34:	2003      	movs	r0, #3
 8001e36:	f7fe fe81 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 8001e3a:	2012      	movs	r0, #18
 8001e3c:	f7fe fe7e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 8001e40:	2081      	movs	r0, #129	; 0x81
 8001e42:	f7fe fe7b 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 8001e46:	20e8      	movs	r0, #232	; 0xe8
 8001e48:	f7fe fe54 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 8001e4c:	2085      	movs	r0, #133	; 0x85
 8001e4e:	f7fe fe75 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8001e52:	2010      	movs	r0, #16
 8001e54:	f7fe fe72 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8001e58:	207a      	movs	r0, #122	; 0x7a
 8001e5a:	f7fe fe6f 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 8001e5e:	20cb      	movs	r0, #203	; 0xcb
 8001e60:	f7fe fe48 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 8001e64:	2039      	movs	r0, #57	; 0x39
 8001e66:	f7fe fe69 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8001e6a:	202c      	movs	r0, #44	; 0x2c
 8001e6c:	f7fe fe66 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001e70:	2000      	movs	r0, #0
 8001e72:	f7fe fe63 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8001e76:	2034      	movs	r0, #52	; 0x34
 8001e78:	f7fe fe60 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8001e7c:	2002      	movs	r0, #2
 8001e7e:	f7fe fe5d 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 8001e82:	20f7      	movs	r0, #247	; 0xf7
 8001e84:	f7fe fe36 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8001e88:	2020      	movs	r0, #32
 8001e8a:	f7fe fe57 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 8001e8e:	20ea      	movs	r0, #234	; 0xea
 8001e90:	f7fe fe30 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001e94:	2000      	movs	r0, #0
 8001e96:	f7fe fe51 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f7fe fe4e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8001ea0:	20c0      	movs	r0, #192	; 0xc0
 8001ea2:	f7fe fe27 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 8001ea6:	201b      	movs	r0, #27
 8001ea8:	f7fe fe48 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 8001eac:	20c1      	movs	r0, #193	; 0xc1
 8001eae:	f7fe fe21 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 8001eb2:	2001      	movs	r0, #1
 8001eb4:	f7fe fe42 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8001eb8:	20c5      	movs	r0, #197	; 0xc5
 8001eba:	f7fe fe1b 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 8001ebe:	2030      	movs	r0, #48	; 0x30
 8001ec0:	f7fe fe3c 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 8001ec4:	2030      	movs	r0, #48	; 0x30
 8001ec6:	f7fe fe39 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 8001eca:	20c7      	movs	r0, #199	; 0xc7
 8001ecc:	f7fe fe12 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8001ed0:	20b7      	movs	r0, #183	; 0xb7
 8001ed2:	f7fe fe33 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 8001ed6:	2036      	movs	r0, #54	; 0x36
 8001ed8:	f7fe fe0c 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 8001edc:	2048      	movs	r0, #72	; 0x48
 8001ede:	f7fe fe2d 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 8001ee2:	203a      	movs	r0, #58	; 0x3a
 8001ee4:	f7fe fe06 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8001ee8:	2055      	movs	r0, #85	; 0x55
 8001eea:	f7fe fe27 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 8001eee:	20b1      	movs	r0, #177	; 0xb1
 8001ef0:	f7fe fe00 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7fe fe21 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 8001efa:	201a      	movs	r0, #26
 8001efc:	f7fe fe1e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 8001f00:	20b6      	movs	r0, #182	; 0xb6
 8001f02:	f7fe fdf7 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8001f06:	200a      	movs	r0, #10
 8001f08:	f7fe fe18 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8001f0c:	20a2      	movs	r0, #162	; 0xa2
 8001f0e:	f7fe fe15 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 8001f12:	20f2      	movs	r0, #242	; 0xf2
 8001f14:	f7fe fdee 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001f18:	2000      	movs	r0, #0
 8001f1a:	f7fe fe0f 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 8001f1e:	2026      	movs	r0, #38	; 0x26
 8001f20:	f7fe fde8 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8001f24:	2001      	movs	r0, #1
 8001f26:	f7fe fe09 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 8001f2a:	20e0      	movs	r0, #224	; 0xe0
 8001f2c:	f7fe fde2 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 8001f30:	200f      	movs	r0, #15
 8001f32:	f7fe fe03 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8001f36:	202a      	movs	r0, #42	; 0x2a
 8001f38:	f7fe fe00 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 8001f3c:	2028      	movs	r0, #40	; 0x28
 8001f3e:	f7fe fdfd 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8001f42:	2008      	movs	r0, #8
 8001f44:	f7fe fdfa 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 8001f48:	200e      	movs	r0, #14
 8001f4a:	f7fe fdf7 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8001f4e:	2008      	movs	r0, #8
 8001f50:	f7fe fdf4 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8001f54:	2054      	movs	r0, #84	; 0x54
 8001f56:	f7fe fdf1 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 8001f5a:	20a9      	movs	r0, #169	; 0xa9
 8001f5c:	f7fe fdee 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8001f60:	2043      	movs	r0, #67	; 0x43
 8001f62:	f7fe fdeb 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 8001f66:	200a      	movs	r0, #10
 8001f68:	f7fe fde8 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8001f6c:	200f      	movs	r0, #15
 8001f6e:	f7fe fde5 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001f72:	2000      	movs	r0, #0
 8001f74:	f7fe fde2 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f7fe fddf 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7fe fddc 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001f84:	2000      	movs	r0, #0
 8001f86:	f7fe fdd9 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 8001f8a:	20e1      	movs	r0, #225	; 0xe1
 8001f8c:	f7fe fdb2 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001f90:	2000      	movs	r0, #0
 8001f92:	f7fe fdd3 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 8001f96:	2015      	movs	r0, #21
 8001f98:	f7fe fdd0 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8001f9c:	2017      	movs	r0, #23
 8001f9e:	f7fe fdcd 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 8001fa2:	2007      	movs	r0, #7
 8001fa4:	f7fe fdca 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8001fa8:	2011      	movs	r0, #17
 8001faa:	f7fe fdc7 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 8001fae:	2006      	movs	r0, #6
 8001fb0:	f7fe fdc4 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 8001fb4:	202b      	movs	r0, #43	; 0x2b
 8001fb6:	f7fe fdc1 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8001fba:	2056      	movs	r0, #86	; 0x56
 8001fbc:	f7fe fdbe 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8001fc0:	203c      	movs	r0, #60	; 0x3c
 8001fc2:	f7fe fdbb 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8001fc6:	2005      	movs	r0, #5
 8001fc8:	f7fe fdb8 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8001fcc:	2010      	movs	r0, #16
 8001fce:	f7fe fdb5 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8001fd2:	200f      	movs	r0, #15
 8001fd4:	f7fe fdb2 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8001fd8:	203f      	movs	r0, #63	; 0x3f
 8001fda:	f7fe fdaf 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8001fde:	203f      	movs	r0, #63	; 0x3f
 8001fe0:	f7fe fdac 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8001fe4:	200f      	movs	r0, #15
 8001fe6:	f7fe fda9 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 8001fea:	202b      	movs	r0, #43	; 0x2b
 8001fec:	f7fe fd82 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f7fe fda3 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f7fe fda0 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	f7fe fd9d 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 8002002:	203f      	movs	r0, #63	; 0x3f
 8002004:	f7fe fd9a 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 8002008:	202a      	movs	r0, #42	; 0x2a
 800200a:	f7fe fd73 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800200e:	2000      	movs	r0, #0
 8002010:	f7fe fd94 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002014:	2000      	movs	r0, #0
 8002016:	f7fe fd91 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800201a:	2000      	movs	r0, #0
 800201c:	f7fe fd8e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 8002020:	20ef      	movs	r0, #239	; 0xef
 8002022:	f7fe fd8b 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 8002026:	2011      	movs	r0, #17
 8002028:	f7fe fd64 	bl	8000af4 <LCD_WR_REG>
		HAL_Delay(120);
 800202c:	2078      	movs	r0, #120	; 0x78
 800202e:	f003 fed1 	bl	8005dd4 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 8002032:	2029      	movs	r0, #41	; 0x29
 8002034:	f7fe fd5e 	bl	8000af4 <LCD_WR_REG>
 8002038:	f003 bcd8 	b.w	80059ec <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 800203c:	4b58      	ldr	r3, [pc, #352]	; (80021a0 <LCD_Init+0x5e8>)
 800203e:	889b      	ldrh	r3, [r3, #4]
 8002040:	f646 0204 	movw	r2, #26628	; 0x6804
 8002044:	4293      	cmp	r3, r2
 8002046:	f040 80ad 	bne.w	80021a4 <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 800204a:	2011      	movs	r0, #17
 800204c:	f7fe fd52 	bl	8000af4 <LCD_WR_REG>
		HAL_Delay(20);
 8002050:	2014      	movs	r0, #20
 8002052:	f003 febf 	bl	8005dd4 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8002056:	20d0      	movs	r0, #208	; 0xd0
 8002058:	f7fe fd4c 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 800205c:	2007      	movs	r0, #7
 800205e:	f7fe fd6d 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 8002062:	2042      	movs	r0, #66	; 0x42
 8002064:	f7fe fd6a 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8002068:	201d      	movs	r0, #29
 800206a:	f7fe fd67 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 800206e:	20d1      	movs	r0, #209	; 0xd1
 8002070:	f7fe fd40 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002074:	2000      	movs	r0, #0
 8002076:	f7fe fd61 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 800207a:	201a      	movs	r0, #26
 800207c:	f7fe fd5e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8002080:	2009      	movs	r0, #9
 8002082:	f7fe fd5b 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8002086:	20d2      	movs	r0, #210	; 0xd2
 8002088:	f7fe fd34 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 800208c:	2001      	movs	r0, #1
 800208e:	f7fe fd55 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 8002092:	2022      	movs	r0, #34	; 0x22
 8002094:	f7fe fd52 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8002098:	20c0      	movs	r0, #192	; 0xc0
 800209a:	f7fe fd2b 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 800209e:	2010      	movs	r0, #16
 80020a0:	f7fe fd4c 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 80020a4:	203b      	movs	r0, #59	; 0x3b
 80020a6:	f7fe fd49 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80020aa:	2000      	movs	r0, #0
 80020ac:	f7fe fd46 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 80020b0:	2002      	movs	r0, #2
 80020b2:	f7fe fd43 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 80020b6:	2011      	movs	r0, #17
 80020b8:	f7fe fd40 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 80020bc:	20c5      	movs	r0, #197	; 0xc5
 80020be:	f7fe fd19 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 80020c2:	2003      	movs	r0, #3
 80020c4:	f7fe fd3a 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 80020c8:	20c8      	movs	r0, #200	; 0xc8
 80020ca:	f7fe fd13 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80020ce:	2000      	movs	r0, #0
 80020d0:	f7fe fd34 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 80020d4:	2025      	movs	r0, #37	; 0x25
 80020d6:	f7fe fd31 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 80020da:	2021      	movs	r0, #33	; 0x21
 80020dc:	f7fe fd2e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 80020e0:	2005      	movs	r0, #5
 80020e2:	f7fe fd2b 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80020e6:	2000      	movs	r0, #0
 80020e8:	f7fe fd28 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 80020ec:	200a      	movs	r0, #10
 80020ee:	f7fe fd25 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 80020f2:	2065      	movs	r0, #101	; 0x65
 80020f4:	f7fe fd22 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 80020f8:	2025      	movs	r0, #37	; 0x25
 80020fa:	f7fe fd1f 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 80020fe:	2077      	movs	r0, #119	; 0x77
 8002100:	f7fe fd1c 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 8002104:	2050      	movs	r0, #80	; 0x50
 8002106:	f7fe fd19 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 800210a:	200f      	movs	r0, #15
 800210c:	f7fe fd16 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002110:	2000      	movs	r0, #0
 8002112:	f7fe fd13 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 8002116:	20f8      	movs	r0, #248	; 0xf8
 8002118:	f7fe fcec 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 800211c:	2001      	movs	r0, #1
 800211e:	f7fe fd0d 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 8002122:	20fe      	movs	r0, #254	; 0xfe
 8002124:	f7fe fce6 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002128:	2000      	movs	r0, #0
 800212a:	f7fe fd07 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 800212e:	2002      	movs	r0, #2
 8002130:	f7fe fd04 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 8002134:	2020      	movs	r0, #32
 8002136:	f7fe fcdd 	bl	8000af4 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 800213a:	2036      	movs	r0, #54	; 0x36
 800213c:	f7fe fcda 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8002140:	2008      	movs	r0, #8
 8002142:	f7fe fcfb 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 8002146:	203a      	movs	r0, #58	; 0x3a
 8002148:	f7fe fcd4 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 800214c:	2055      	movs	r0, #85	; 0x55
 800214e:	f7fe fcf5 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 8002152:	202b      	movs	r0, #43	; 0x2b
 8002154:	f7fe fcce 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002158:	2000      	movs	r0, #0
 800215a:	f7fe fcef 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800215e:	2000      	movs	r0, #0
 8002160:	f7fe fcec 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8002164:	2001      	movs	r0, #1
 8002166:	f7fe fce9 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 800216a:	203f      	movs	r0, #63	; 0x3f
 800216c:	f7fe fce6 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8002170:	202a      	movs	r0, #42	; 0x2a
 8002172:	f7fe fcbf 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002176:	2000      	movs	r0, #0
 8002178:	f7fe fce0 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800217c:	2000      	movs	r0, #0
 800217e:	f7fe fcdd 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8002182:	2001      	movs	r0, #1
 8002184:	f7fe fcda 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8002188:	20df      	movs	r0, #223	; 0xdf
 800218a:	f7fe fcd7 	bl	8000b3c <LCD_WR_DATAX>
		HAL_Delay(120);
 800218e:	2078      	movs	r0, #120	; 0x78
 8002190:	f003 fe20 	bl	8005dd4 <HAL_Delay>
		LCD_WR_REG(0X29);
 8002194:	2029      	movs	r0, #41	; 0x29
 8002196:	f7fe fcad 	bl	8000af4 <LCD_WR_REG>
 800219a:	f003 bc27 	b.w	80059ec <LCD_Init+0x3e34>
 800219e:	bf00      	nop
 80021a0:	20000028 	.word	0x20000028
	} else if (lcddev.id == 0x5310) {
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <LCD_Init+0x5fc>)
 80021a6:	889b      	ldrh	r3, [r3, #4]
 80021a8:	f245 3210 	movw	r2, #21264	; 0x5310
 80021ac:	4293      	cmp	r3, r2
 80021ae:	f040 877c 	bne.w	80030aa <LCD_Init+0x14f2>
 80021b2:	e001      	b.n	80021b8 <LCD_Init+0x600>
 80021b4:	20000028 	.word	0x20000028
		LCD_WR_REG(0xED);
 80021b8:	20ed      	movs	r0, #237	; 0xed
 80021ba:	f7fe fc9b 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80021be:	2001      	movs	r0, #1
 80021c0:	f7fe fcbc 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 80021c4:	20fe      	movs	r0, #254	; 0xfe
 80021c6:	f7fe fcb9 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 80021ca:	20ee      	movs	r0, #238	; 0xee
 80021cc:	f7fe fc92 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 80021d0:	20de      	movs	r0, #222	; 0xde
 80021d2:	f7fe fcb3 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 80021d6:	2021      	movs	r0, #33	; 0x21
 80021d8:	f7fe fcb0 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 80021dc:	20f1      	movs	r0, #241	; 0xf1
 80021de:	f7fe fc89 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80021e2:	2001      	movs	r0, #1
 80021e4:	f7fe fcaa 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 80021e8:	20df      	movs	r0, #223	; 0xdf
 80021ea:	f7fe fc83 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 80021ee:	2010      	movs	r0, #16
 80021f0:	f7fe fca4 	bl	8000b3c <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 80021f4:	20c4      	movs	r0, #196	; 0xc4
 80021f6:	f7fe fc7d 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 80021fa:	208f      	movs	r0, #143	; 0x8f
 80021fc:	f7fe fc9e 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002200:	20c6      	movs	r0, #198	; 0xc6
 8002202:	f7fe fc77 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002206:	2000      	movs	r0, #0
 8002208:	f7fe fc98 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 800220c:	20e2      	movs	r0, #226	; 0xe2
 800220e:	f7fe fc95 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002212:	20e2      	movs	r0, #226	; 0xe2
 8002214:	f7fe fc92 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002218:	20e2      	movs	r0, #226	; 0xe2
 800221a:	f7fe fc8f 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 800221e:	20bf      	movs	r0, #191	; 0xbf
 8002220:	f7fe fc68 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8002224:	20aa      	movs	r0, #170	; 0xaa
 8002226:	f7fe fc89 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 800222a:	20b0      	movs	r0, #176	; 0xb0
 800222c:	f7fe fc62 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 8002230:	200d      	movs	r0, #13
 8002232:	f7fe fc83 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002236:	2000      	movs	r0, #0
 8002238:	f7fe fc80 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 800223c:	200d      	movs	r0, #13
 800223e:	f7fe fc7d 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002242:	2000      	movs	r0, #0
 8002244:	f7fe fc7a 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002248:	2011      	movs	r0, #17
 800224a:	f7fe fc77 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800224e:	2000      	movs	r0, #0
 8002250:	f7fe fc74 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 8002254:	2019      	movs	r0, #25
 8002256:	f7fe fc71 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800225a:	2000      	movs	r0, #0
 800225c:	f7fe fc6e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002260:	2021      	movs	r0, #33	; 0x21
 8002262:	f7fe fc6b 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002266:	2000      	movs	r0, #0
 8002268:	f7fe fc68 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 800226c:	202d      	movs	r0, #45	; 0x2d
 800226e:	f7fe fc65 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002272:	2000      	movs	r0, #0
 8002274:	f7fe fc62 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8002278:	203d      	movs	r0, #61	; 0x3d
 800227a:	f7fe fc5f 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800227e:	2000      	movs	r0, #0
 8002280:	f7fe fc5c 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002284:	205d      	movs	r0, #93	; 0x5d
 8002286:	f7fe fc59 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800228a:	2000      	movs	r0, #0
 800228c:	f7fe fc56 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002290:	205d      	movs	r0, #93	; 0x5d
 8002292:	f7fe fc53 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002296:	2000      	movs	r0, #0
 8002298:	f7fe fc50 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 800229c:	20b1      	movs	r0, #177	; 0xb1
 800229e:	f7fe fc29 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 80022a2:	2080      	movs	r0, #128	; 0x80
 80022a4:	f7fe fc4a 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022a8:	2000      	movs	r0, #0
 80022aa:	f7fe fc47 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 80022ae:	208b      	movs	r0, #139	; 0x8b
 80022b0:	f7fe fc44 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022b4:	2000      	movs	r0, #0
 80022b6:	f7fe fc41 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 80022ba:	2096      	movs	r0, #150	; 0x96
 80022bc:	f7fe fc3e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022c0:	2000      	movs	r0, #0
 80022c2:	f7fe fc3b 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 80022c6:	20b2      	movs	r0, #178	; 0xb2
 80022c8:	f7fe fc14 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80022cc:	2000      	movs	r0, #0
 80022ce:	f7fe fc35 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022d2:	2000      	movs	r0, #0
 80022d4:	f7fe fc32 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80022d8:	2002      	movs	r0, #2
 80022da:	f7fe fc2f 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022de:	2000      	movs	r0, #0
 80022e0:	f7fe fc2c 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80022e4:	2003      	movs	r0, #3
 80022e6:	f7fe fc29 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022ea:	2000      	movs	r0, #0
 80022ec:	f7fe fc26 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 80022f0:	20b3      	movs	r0, #179	; 0xb3
 80022f2:	f7fe fbff 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80022f6:	2000      	movs	r0, #0
 80022f8:	f7fe fc20 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80022fc:	2000      	movs	r0, #0
 80022fe:	f7fe fc1d 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002302:	2000      	movs	r0, #0
 8002304:	f7fe fc1a 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002308:	2000      	movs	r0, #0
 800230a:	f7fe fc17 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800230e:	2000      	movs	r0, #0
 8002310:	f7fe fc14 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002314:	2000      	movs	r0, #0
 8002316:	f7fe fc11 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800231a:	2000      	movs	r0, #0
 800231c:	f7fe fc0e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002320:	2000      	movs	r0, #0
 8002322:	f7fe fc0b 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002326:	2000      	movs	r0, #0
 8002328:	f7fe fc08 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800232c:	2000      	movs	r0, #0
 800232e:	f7fe fc05 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002332:	2000      	movs	r0, #0
 8002334:	f7fe fc02 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002338:	2000      	movs	r0, #0
 800233a:	f7fe fbff 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800233e:	2000      	movs	r0, #0
 8002340:	f7fe fbfc 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002344:	2000      	movs	r0, #0
 8002346:	f7fe fbf9 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800234a:	2000      	movs	r0, #0
 800234c:	f7fe fbf6 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002350:	2000      	movs	r0, #0
 8002352:	f7fe fbf3 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002356:	2000      	movs	r0, #0
 8002358:	f7fe fbf0 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800235c:	2000      	movs	r0, #0
 800235e:	f7fe fbed 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002362:	2000      	movs	r0, #0
 8002364:	f7fe fbea 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002368:	2000      	movs	r0, #0
 800236a:	f7fe fbe7 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800236e:	2000      	movs	r0, #0
 8002370:	f7fe fbe4 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002374:	2000      	movs	r0, #0
 8002376:	f7fe fbe1 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800237a:	2000      	movs	r0, #0
 800237c:	f7fe fbde 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002380:	2000      	movs	r0, #0
 8002382:	f7fe fbdb 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 8002386:	20b4      	movs	r0, #180	; 0xb4
 8002388:	f7fe fbb4 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 800238c:	208b      	movs	r0, #139	; 0x8b
 800238e:	f7fe fbd5 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002392:	2000      	movs	r0, #0
 8002394:	f7fe fbd2 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8002398:	2096      	movs	r0, #150	; 0x96
 800239a:	f7fe fbcf 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800239e:	2000      	movs	r0, #0
 80023a0:	f7fe fbcc 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 80023a4:	20a1      	movs	r0, #161	; 0xa1
 80023a6:	f7fe fbc9 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023aa:	2000      	movs	r0, #0
 80023ac:	f7fe fbc6 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 80023b0:	20b5      	movs	r0, #181	; 0xb5
 80023b2:	f7fe fb9f 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 80023b6:	2002      	movs	r0, #2
 80023b8:	f7fe fbc0 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023bc:	2000      	movs	r0, #0
 80023be:	f7fe fbbd 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80023c2:	2003      	movs	r0, #3
 80023c4:	f7fe fbba 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023c8:	2000      	movs	r0, #0
 80023ca:	f7fe fbb7 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 80023ce:	2004      	movs	r0, #4
 80023d0:	f7fe fbb4 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023d4:	2000      	movs	r0, #0
 80023d6:	f7fe fbb1 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 80023da:	20b6      	movs	r0, #182	; 0xb6
 80023dc:	f7fe fb8a 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80023e0:	2000      	movs	r0, #0
 80023e2:	f7fe fbab 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023e6:	2000      	movs	r0, #0
 80023e8:	f7fe fba8 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 80023ec:	20b7      	movs	r0, #183	; 0xb7
 80023ee:	f7fe fb81 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80023f2:	2000      	movs	r0, #0
 80023f4:	f7fe fba2 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80023f8:	2000      	movs	r0, #0
 80023fa:	f7fe fb9f 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80023fe:	203f      	movs	r0, #63	; 0x3f
 8002400:	f7fe fb9c 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002404:	2000      	movs	r0, #0
 8002406:	f7fe fb99 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 800240a:	205e      	movs	r0, #94	; 0x5e
 800240c:	f7fe fb96 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002410:	2000      	movs	r0, #0
 8002412:	f7fe fb93 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002416:	2064      	movs	r0, #100	; 0x64
 8002418:	f7fe fb90 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800241c:	2000      	movs	r0, #0
 800241e:	f7fe fb8d 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 8002422:	208c      	movs	r0, #140	; 0x8c
 8002424:	f7fe fb8a 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002428:	2000      	movs	r0, #0
 800242a:	f7fe fb87 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 800242e:	20ac      	movs	r0, #172	; 0xac
 8002430:	f7fe fb84 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002434:	2000      	movs	r0, #0
 8002436:	f7fe fb81 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800243a:	20dc      	movs	r0, #220	; 0xdc
 800243c:	f7fe fb7e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002440:	2000      	movs	r0, #0
 8002442:	f7fe fb7b 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 8002446:	2070      	movs	r0, #112	; 0x70
 8002448:	f7fe fb78 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800244c:	2000      	movs	r0, #0
 800244e:	f7fe fb75 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 8002452:	2090      	movs	r0, #144	; 0x90
 8002454:	f7fe fb72 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002458:	2000      	movs	r0, #0
 800245a:	f7fe fb6f 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 800245e:	20eb      	movs	r0, #235	; 0xeb
 8002460:	f7fe fb6c 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002464:	2000      	movs	r0, #0
 8002466:	f7fe fb69 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800246a:	20dc      	movs	r0, #220	; 0xdc
 800246c:	f7fe fb66 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002470:	2000      	movs	r0, #0
 8002472:	f7fe fb63 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 8002476:	20b8      	movs	r0, #184	; 0xb8
 8002478:	f7fe fb3c 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800247c:	2000      	movs	r0, #0
 800247e:	f7fe fb5d 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002482:	2000      	movs	r0, #0
 8002484:	f7fe fb5a 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002488:	2000      	movs	r0, #0
 800248a:	f7fe fb57 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800248e:	2000      	movs	r0, #0
 8002490:	f7fe fb54 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002494:	2000      	movs	r0, #0
 8002496:	f7fe fb51 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800249a:	2000      	movs	r0, #0
 800249c:	f7fe fb4e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024a0:	2000      	movs	r0, #0
 80024a2:	f7fe fb4b 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024a6:	2000      	movs	r0, #0
 80024a8:	f7fe fb48 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 80024ac:	20ba      	movs	r0, #186	; 0xba
 80024ae:	f7fe fb21 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 80024b2:	2024      	movs	r0, #36	; 0x24
 80024b4:	f7fe fb42 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024b8:	2000      	movs	r0, #0
 80024ba:	f7fe fb3f 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024be:	2000      	movs	r0, #0
 80024c0:	f7fe fb3c 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024c4:	2000      	movs	r0, #0
 80024c6:	f7fe fb39 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 80024ca:	20c1      	movs	r0, #193	; 0xc1
 80024cc:	f7fe fb12 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 80024d0:	2020      	movs	r0, #32
 80024d2:	f7fe fb33 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024d6:	2000      	movs	r0, #0
 80024d8:	f7fe fb30 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 80024dc:	2054      	movs	r0, #84	; 0x54
 80024de:	f7fe fb2d 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024e2:	2000      	movs	r0, #0
 80024e4:	f7fe fb2a 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 80024e8:	20ff      	movs	r0, #255	; 0xff
 80024ea:	f7fe fb27 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024ee:	2000      	movs	r0, #0
 80024f0:	f7fe fb24 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 80024f4:	20c2      	movs	r0, #194	; 0xc2
 80024f6:	f7fe fafd 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80024fa:	200a      	movs	r0, #10
 80024fc:	f7fe fb1e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002500:	2000      	movs	r0, #0
 8002502:	f7fe fb1b 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8002506:	2004      	movs	r0, #4
 8002508:	f7fe fb18 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800250c:	2000      	movs	r0, #0
 800250e:	f7fe fb15 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 8002512:	20c3      	movs	r0, #195	; 0xc3
 8002514:	f7fe faee 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8002518:	203c      	movs	r0, #60	; 0x3c
 800251a:	f7fe fb0f 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800251e:	2000      	movs	r0, #0
 8002520:	f7fe fb0c 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 8002524:	203a      	movs	r0, #58	; 0x3a
 8002526:	f7fe fb09 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800252a:	2000      	movs	r0, #0
 800252c:	f7fe fb06 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8002530:	2039      	movs	r0, #57	; 0x39
 8002532:	f7fe fb03 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002536:	2000      	movs	r0, #0
 8002538:	f7fe fb00 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 800253c:	2037      	movs	r0, #55	; 0x37
 800253e:	f7fe fafd 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002542:	2000      	movs	r0, #0
 8002544:	f7fe fafa 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002548:	203c      	movs	r0, #60	; 0x3c
 800254a:	f7fe faf7 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800254e:	2000      	movs	r0, #0
 8002550:	f7fe faf4 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002554:	2036      	movs	r0, #54	; 0x36
 8002556:	f7fe faf1 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800255a:	2000      	movs	r0, #0
 800255c:	f7fe faee 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002560:	2032      	movs	r0, #50	; 0x32
 8002562:	f7fe faeb 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002566:	2000      	movs	r0, #0
 8002568:	f7fe fae8 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 800256c:	202f      	movs	r0, #47	; 0x2f
 800256e:	f7fe fae5 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002572:	2000      	movs	r0, #0
 8002574:	f7fe fae2 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002578:	202c      	movs	r0, #44	; 0x2c
 800257a:	f7fe fadf 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800257e:	2000      	movs	r0, #0
 8002580:	f7fe fadc 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002584:	2029      	movs	r0, #41	; 0x29
 8002586:	f7fe fad9 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800258a:	2000      	movs	r0, #0
 800258c:	f7fe fad6 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002590:	2026      	movs	r0, #38	; 0x26
 8002592:	f7fe fad3 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002596:	2000      	movs	r0, #0
 8002598:	f7fe fad0 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 800259c:	2024      	movs	r0, #36	; 0x24
 800259e:	f7fe facd 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025a2:	2000      	movs	r0, #0
 80025a4:	f7fe faca 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80025a8:	2024      	movs	r0, #36	; 0x24
 80025aa:	f7fe fac7 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ae:	2000      	movs	r0, #0
 80025b0:	f7fe fac4 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80025b4:	2023      	movs	r0, #35	; 0x23
 80025b6:	f7fe fac1 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ba:	2000      	movs	r0, #0
 80025bc:	f7fe fabe 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80025c0:	203c      	movs	r0, #60	; 0x3c
 80025c2:	f7fe fabb 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025c6:	2000      	movs	r0, #0
 80025c8:	f7fe fab8 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80025cc:	2036      	movs	r0, #54	; 0x36
 80025ce:	f7fe fab5 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025d2:	2000      	movs	r0, #0
 80025d4:	f7fe fab2 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 80025d8:	2032      	movs	r0, #50	; 0x32
 80025da:	f7fe faaf 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025de:	2000      	movs	r0, #0
 80025e0:	f7fe faac 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 80025e4:	202f      	movs	r0, #47	; 0x2f
 80025e6:	f7fe faa9 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025ea:	2000      	movs	r0, #0
 80025ec:	f7fe faa6 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80025f0:	202c      	movs	r0, #44	; 0x2c
 80025f2:	f7fe faa3 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025f6:	2000      	movs	r0, #0
 80025f8:	f7fe faa0 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80025fc:	2029      	movs	r0, #41	; 0x29
 80025fe:	f7fe fa9d 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002602:	2000      	movs	r0, #0
 8002604:	f7fe fa9a 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002608:	2026      	movs	r0, #38	; 0x26
 800260a:	f7fe fa97 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800260e:	2000      	movs	r0, #0
 8002610:	f7fe fa94 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002614:	2024      	movs	r0, #36	; 0x24
 8002616:	f7fe fa91 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800261a:	2000      	movs	r0, #0
 800261c:	f7fe fa8e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002620:	2024      	movs	r0, #36	; 0x24
 8002622:	f7fe fa8b 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002626:	2000      	movs	r0, #0
 8002628:	f7fe fa88 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 800262c:	2023      	movs	r0, #35	; 0x23
 800262e:	f7fe fa85 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002632:	2000      	movs	r0, #0
 8002634:	f7fe fa82 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8002638:	20c4      	movs	r0, #196	; 0xc4
 800263a:	f7fe fa5b 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 800263e:	2062      	movs	r0, #98	; 0x62
 8002640:	f7fe fa7c 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002644:	2000      	movs	r0, #0
 8002646:	f7fe fa79 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 800264a:	2005      	movs	r0, #5
 800264c:	f7fe fa76 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002650:	2000      	movs	r0, #0
 8002652:	f7fe fa73 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002656:	2084      	movs	r0, #132	; 0x84
 8002658:	f7fe fa70 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800265c:	2000      	movs	r0, #0
 800265e:	f7fe fa6d 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8002662:	20f0      	movs	r0, #240	; 0xf0
 8002664:	f7fe fa6a 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002668:	2000      	movs	r0, #0
 800266a:	f7fe fa67 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 800266e:	2018      	movs	r0, #24
 8002670:	f7fe fa64 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002674:	2000      	movs	r0, #0
 8002676:	f7fe fa61 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 800267a:	20a4      	movs	r0, #164	; 0xa4
 800267c:	f7fe fa5e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002680:	2000      	movs	r0, #0
 8002682:	f7fe fa5b 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002686:	2018      	movs	r0, #24
 8002688:	f7fe fa58 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800268c:	2000      	movs	r0, #0
 800268e:	f7fe fa55 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002692:	2050      	movs	r0, #80	; 0x50
 8002694:	f7fe fa52 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002698:	2000      	movs	r0, #0
 800269a:	f7fe fa4f 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 800269e:	200c      	movs	r0, #12
 80026a0:	f7fe fa4c 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026a4:	2000      	movs	r0, #0
 80026a6:	f7fe fa49 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 80026aa:	2017      	movs	r0, #23
 80026ac:	f7fe fa46 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026b0:	2000      	movs	r0, #0
 80026b2:	f7fe fa43 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 80026b6:	2095      	movs	r0, #149	; 0x95
 80026b8:	f7fe fa40 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026bc:	2000      	movs	r0, #0
 80026be:	f7fe fa3d 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80026c2:	20f3      	movs	r0, #243	; 0xf3
 80026c4:	f7fe fa3a 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026c8:	2000      	movs	r0, #0
 80026ca:	f7fe fa37 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 80026ce:	20e6      	movs	r0, #230	; 0xe6
 80026d0:	f7fe fa34 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026d4:	2000      	movs	r0, #0
 80026d6:	f7fe fa31 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 80026da:	20c5      	movs	r0, #197	; 0xc5
 80026dc:	f7fe fa0a 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 80026e0:	2032      	movs	r0, #50	; 0x32
 80026e2:	f7fe fa2b 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026e6:	2000      	movs	r0, #0
 80026e8:	f7fe fa28 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80026ec:	2044      	movs	r0, #68	; 0x44
 80026ee:	f7fe fa25 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026f2:	2000      	movs	r0, #0
 80026f4:	f7fe fa22 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 80026f8:	2065      	movs	r0, #101	; 0x65
 80026fa:	f7fe fa1f 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80026fe:	2000      	movs	r0, #0
 8002700:	f7fe fa1c 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002704:	2076      	movs	r0, #118	; 0x76
 8002706:	f7fe fa19 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800270a:	2000      	movs	r0, #0
 800270c:	f7fe fa16 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002710:	2088      	movs	r0, #136	; 0x88
 8002712:	f7fe fa13 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002716:	2000      	movs	r0, #0
 8002718:	f7fe fa10 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 800271c:	20c6      	movs	r0, #198	; 0xc6
 800271e:	f7fe f9e9 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002722:	2020      	movs	r0, #32
 8002724:	f7fe fa0a 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002728:	2000      	movs	r0, #0
 800272a:	f7fe fa07 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 800272e:	2017      	movs	r0, #23
 8002730:	f7fe fa04 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002734:	2000      	movs	r0, #0
 8002736:	f7fe fa01 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 800273a:	2001      	movs	r0, #1
 800273c:	f7fe f9fe 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002740:	2000      	movs	r0, #0
 8002742:	f7fe f9fb 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8002746:	20c7      	movs	r0, #199	; 0xc7
 8002748:	f7fe f9d4 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800274c:	2000      	movs	r0, #0
 800274e:	f7fe f9f5 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002752:	2000      	movs	r0, #0
 8002754:	f7fe f9f2 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002758:	2000      	movs	r0, #0
 800275a:	f7fe f9ef 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800275e:	2000      	movs	r0, #0
 8002760:	f7fe f9ec 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8002764:	20c8      	movs	r0, #200	; 0xc8
 8002766:	f7fe f9c5 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800276a:	2000      	movs	r0, #0
 800276c:	f7fe f9e6 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002770:	2000      	movs	r0, #0
 8002772:	f7fe f9e3 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002776:	2000      	movs	r0, #0
 8002778:	f7fe f9e0 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800277c:	2000      	movs	r0, #0
 800277e:	f7fe f9dd 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8002782:	20c9      	movs	r0, #201	; 0xc9
 8002784:	f7fe f9b6 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002788:	2000      	movs	r0, #0
 800278a:	f7fe f9d7 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800278e:	2000      	movs	r0, #0
 8002790:	f7fe f9d4 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002794:	2000      	movs	r0, #0
 8002796:	f7fe f9d1 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800279a:	2000      	movs	r0, #0
 800279c:	f7fe f9ce 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027a0:	2000      	movs	r0, #0
 80027a2:	f7fe f9cb 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027a6:	2000      	movs	r0, #0
 80027a8:	f7fe f9c8 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027ac:	2000      	movs	r0, #0
 80027ae:	f7fe f9c5 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027b2:	2000      	movs	r0, #0
 80027b4:	f7fe f9c2 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027b8:	2000      	movs	r0, #0
 80027ba:	f7fe f9bf 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027be:	2000      	movs	r0, #0
 80027c0:	f7fe f9bc 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027c4:	2000      	movs	r0, #0
 80027c6:	f7fe f9b9 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027ca:	2000      	movs	r0, #0
 80027cc:	f7fe f9b6 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027d0:	2000      	movs	r0, #0
 80027d2:	f7fe f9b3 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027d6:	2000      	movs	r0, #0
 80027d8:	f7fe f9b0 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027dc:	2000      	movs	r0, #0
 80027de:	f7fe f9ad 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027e2:	2000      	movs	r0, #0
 80027e4:	f7fe f9aa 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 80027e8:	20e0      	movs	r0, #224	; 0xe0
 80027ea:	f7fe f983 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 80027ee:	2016      	movs	r0, #22
 80027f0:	f7fe f9a4 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80027f4:	2000      	movs	r0, #0
 80027f6:	f7fe f9a1 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 80027fa:	201c      	movs	r0, #28
 80027fc:	f7fe f99e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002800:	2000      	movs	r0, #0
 8002802:	f7fe f99b 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002806:	2021      	movs	r0, #33	; 0x21
 8002808:	f7fe f998 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800280c:	2000      	movs	r0, #0
 800280e:	f7fe f995 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002812:	2036      	movs	r0, #54	; 0x36
 8002814:	f7fe f992 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002818:	2000      	movs	r0, #0
 800281a:	f7fe f98f 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 800281e:	2046      	movs	r0, #70	; 0x46
 8002820:	f7fe f98c 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002824:	2000      	movs	r0, #0
 8002826:	f7fe f989 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 800282a:	2052      	movs	r0, #82	; 0x52
 800282c:	f7fe f986 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002830:	2000      	movs	r0, #0
 8002832:	f7fe f983 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002836:	2064      	movs	r0, #100	; 0x64
 8002838:	f7fe f980 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800283c:	2000      	movs	r0, #0
 800283e:	f7fe f97d 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002842:	207a      	movs	r0, #122	; 0x7a
 8002844:	f7fe f97a 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002848:	2000      	movs	r0, #0
 800284a:	f7fe f977 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 800284e:	208b      	movs	r0, #139	; 0x8b
 8002850:	f7fe f974 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002854:	2000      	movs	r0, #0
 8002856:	f7fe f971 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800285a:	2099      	movs	r0, #153	; 0x99
 800285c:	f7fe f96e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002860:	2000      	movs	r0, #0
 8002862:	f7fe f96b 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002866:	20a8      	movs	r0, #168	; 0xa8
 8002868:	f7fe f968 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800286c:	2000      	movs	r0, #0
 800286e:	f7fe f965 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002872:	20b9      	movs	r0, #185	; 0xb9
 8002874:	f7fe f962 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002878:	2000      	movs	r0, #0
 800287a:	f7fe f95f 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 800287e:	20c4      	movs	r0, #196	; 0xc4
 8002880:	f7fe f95c 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002884:	2000      	movs	r0, #0
 8002886:	f7fe f959 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 800288a:	20ca      	movs	r0, #202	; 0xca
 800288c:	f7fe f956 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002890:	2000      	movs	r0, #0
 8002892:	f7fe f953 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002896:	20d2      	movs	r0, #210	; 0xd2
 8002898:	f7fe f950 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800289c:	2000      	movs	r0, #0
 800289e:	f7fe f94d 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 80028a2:	20d9      	movs	r0, #217	; 0xd9
 80028a4:	f7fe f94a 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028a8:	2000      	movs	r0, #0
 80028aa:	f7fe f947 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 80028ae:	20e0      	movs	r0, #224	; 0xe0
 80028b0:	f7fe f944 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028b4:	2000      	movs	r0, #0
 80028b6:	f7fe f941 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80028ba:	20f3      	movs	r0, #243	; 0xf3
 80028bc:	f7fe f93e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028c0:	2000      	movs	r0, #0
 80028c2:	f7fe f93b 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 80028c6:	20e1      	movs	r0, #225	; 0xe1
 80028c8:	f7fe f914 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 80028cc:	2016      	movs	r0, #22
 80028ce:	f7fe f935 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028d2:	2000      	movs	r0, #0
 80028d4:	f7fe f932 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 80028d8:	201c      	movs	r0, #28
 80028da:	f7fe f92f 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028de:	2000      	movs	r0, #0
 80028e0:	f7fe f92c 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 80028e4:	2022      	movs	r0, #34	; 0x22
 80028e6:	f7fe f929 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ea:	2000      	movs	r0, #0
 80028ec:	f7fe f926 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80028f0:	2036      	movs	r0, #54	; 0x36
 80028f2:	f7fe f923 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028f6:	2000      	movs	r0, #0
 80028f8:	f7fe f920 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 80028fc:	2045      	movs	r0, #69	; 0x45
 80028fe:	f7fe f91d 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002902:	2000      	movs	r0, #0
 8002904:	f7fe f91a 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002908:	2052      	movs	r0, #82	; 0x52
 800290a:	f7fe f917 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800290e:	2000      	movs	r0, #0
 8002910:	f7fe f914 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002914:	2064      	movs	r0, #100	; 0x64
 8002916:	f7fe f911 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800291a:	2000      	movs	r0, #0
 800291c:	f7fe f90e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002920:	207a      	movs	r0, #122	; 0x7a
 8002922:	f7fe f90b 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002926:	2000      	movs	r0, #0
 8002928:	f7fe f908 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 800292c:	208b      	movs	r0, #139	; 0x8b
 800292e:	f7fe f905 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002932:	2000      	movs	r0, #0
 8002934:	f7fe f902 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002938:	2099      	movs	r0, #153	; 0x99
 800293a:	f7fe f8ff 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800293e:	2000      	movs	r0, #0
 8002940:	f7fe f8fc 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002944:	20a8      	movs	r0, #168	; 0xa8
 8002946:	f7fe f8f9 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800294a:	2000      	movs	r0, #0
 800294c:	f7fe f8f6 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002950:	20b9      	movs	r0, #185	; 0xb9
 8002952:	f7fe f8f3 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002956:	2000      	movs	r0, #0
 8002958:	f7fe f8f0 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 800295c:	20c4      	movs	r0, #196	; 0xc4
 800295e:	f7fe f8ed 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002962:	2000      	movs	r0, #0
 8002964:	f7fe f8ea 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002968:	20ca      	movs	r0, #202	; 0xca
 800296a:	f7fe f8e7 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800296e:	2000      	movs	r0, #0
 8002970:	f7fe f8e4 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002974:	20d2      	movs	r0, #210	; 0xd2
 8002976:	f7fe f8e1 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800297a:	2000      	movs	r0, #0
 800297c:	f7fe f8de 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8002980:	20d8      	movs	r0, #216	; 0xd8
 8002982:	f7fe f8db 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002986:	2000      	movs	r0, #0
 8002988:	f7fe f8d8 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 800298c:	20e0      	movs	r0, #224	; 0xe0
 800298e:	f7fe f8d5 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002992:	2000      	movs	r0, #0
 8002994:	f7fe f8d2 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002998:	20f3      	movs	r0, #243	; 0xf3
 800299a:	f7fe f8cf 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800299e:	2000      	movs	r0, #0
 80029a0:	f7fe f8cc 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 80029a4:	20e2      	movs	r0, #226	; 0xe2
 80029a6:	f7fe f8a5 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 80029aa:	2005      	movs	r0, #5
 80029ac:	f7fe f8c6 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029b0:	2000      	movs	r0, #0
 80029b2:	f7fe f8c3 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 80029b6:	200b      	movs	r0, #11
 80029b8:	f7fe f8c0 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029bc:	2000      	movs	r0, #0
 80029be:	f7fe f8bd 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 80029c2:	201b      	movs	r0, #27
 80029c4:	f7fe f8ba 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029c8:	2000      	movs	r0, #0
 80029ca:	f7fe f8b7 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80029ce:	2034      	movs	r0, #52	; 0x34
 80029d0:	f7fe f8b4 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029d4:	2000      	movs	r0, #0
 80029d6:	f7fe f8b1 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80029da:	2044      	movs	r0, #68	; 0x44
 80029dc:	f7fe f8ae 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e0:	2000      	movs	r0, #0
 80029e2:	f7fe f8ab 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 80029e6:	204f      	movs	r0, #79	; 0x4f
 80029e8:	f7fe f8a8 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ec:	2000      	movs	r0, #0
 80029ee:	f7fe f8a5 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 80029f2:	2061      	movs	r0, #97	; 0x61
 80029f4:	f7fe f8a2 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029f8:	2000      	movs	r0, #0
 80029fa:	f7fe f89f 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 80029fe:	2079      	movs	r0, #121	; 0x79
 8002a00:	f7fe f89c 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a04:	2000      	movs	r0, #0
 8002a06:	f7fe f899 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002a0a:	2088      	movs	r0, #136	; 0x88
 8002a0c:	f7fe f896 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a10:	2000      	movs	r0, #0
 8002a12:	f7fe f893 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002a16:	2097      	movs	r0, #151	; 0x97
 8002a18:	f7fe f890 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f7fe f88d 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002a22:	20a6      	movs	r0, #166	; 0xa6
 8002a24:	f7fe f88a 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f7fe f887 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002a2e:	20b7      	movs	r0, #183	; 0xb7
 8002a30:	f7fe f884 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a34:	2000      	movs	r0, #0
 8002a36:	f7fe f881 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002a3a:	20c2      	movs	r0, #194	; 0xc2
 8002a3c:	f7fe f87e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a40:	2000      	movs	r0, #0
 8002a42:	f7fe f87b 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002a46:	20c7      	movs	r0, #199	; 0xc7
 8002a48:	f7fe f878 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	f7fe f875 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002a52:	20d1      	movs	r0, #209	; 0xd1
 8002a54:	f7fe f872 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f7fe f86f 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 8002a5e:	20d6      	movs	r0, #214	; 0xd6
 8002a60:	f7fe f86c 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a64:	2000      	movs	r0, #0
 8002a66:	f7fe f869 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002a6a:	20dd      	movs	r0, #221	; 0xdd
 8002a6c:	f7fe f866 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a70:	2000      	movs	r0, #0
 8002a72:	f7fe f863 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002a76:	20f3      	movs	r0, #243	; 0xf3
 8002a78:	f7fe f860 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f7fe f85d 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8002a82:	20e3      	movs	r0, #227	; 0xe3
 8002a84:	f7fe f836 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002a88:	2005      	movs	r0, #5
 8002a8a:	f7fe f857 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f7fe f854 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8002a94:	200a      	movs	r0, #10
 8002a96:	f7fe f851 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f7fe f84e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002aa0:	201c      	movs	r0, #28
 8002aa2:	f7fe f84b 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f7fe f848 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8002aac:	2033      	movs	r0, #51	; 0x33
 8002aae:	f7fe f845 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f7fe f842 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002ab8:	2044      	movs	r0, #68	; 0x44
 8002aba:	f7fe f83f 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f7fe f83c 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002ac4:	2050      	movs	r0, #80	; 0x50
 8002ac6:	f7fe f839 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aca:	2000      	movs	r0, #0
 8002acc:	f7fe f836 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8002ad0:	2062      	movs	r0, #98	; 0x62
 8002ad2:	f7fe f833 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f7fe f830 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 8002adc:	2078      	movs	r0, #120	; 0x78
 8002ade:	f7fe f82d 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	f7fe f82a 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002ae8:	2088      	movs	r0, #136	; 0x88
 8002aea:	f7fe f827 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aee:	2000      	movs	r0, #0
 8002af0:	f7fe f824 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8002af4:	2097      	movs	r0, #151	; 0x97
 8002af6:	f7fe f821 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002afa:	2000      	movs	r0, #0
 8002afc:	f7fe f81e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8002b00:	20a6      	movs	r0, #166	; 0xa6
 8002b02:	f7fe f81b 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b06:	2000      	movs	r0, #0
 8002b08:	f7fe f818 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8002b0c:	20b7      	movs	r0, #183	; 0xb7
 8002b0e:	f7fe f815 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b12:	2000      	movs	r0, #0
 8002b14:	f7fe f812 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8002b18:	20c2      	movs	r0, #194	; 0xc2
 8002b1a:	f7fe f80f 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b1e:	2000      	movs	r0, #0
 8002b20:	f7fe f80c 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8002b24:	20c7      	movs	r0, #199	; 0xc7
 8002b26:	f7fe f809 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	f7fe f806 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8002b30:	20d1      	movs	r0, #209	; 0xd1
 8002b32:	f7fe f803 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b36:	2000      	movs	r0, #0
 8002b38:	f7fe f800 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8002b3c:	20d5      	movs	r0, #213	; 0xd5
 8002b3e:	f7fd fffd 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b42:	2000      	movs	r0, #0
 8002b44:	f7fd fffa 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002b48:	20dd      	movs	r0, #221	; 0xdd
 8002b4a:	f7fd fff7 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f7fd fff4 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002b54:	20f3      	movs	r0, #243	; 0xf3
 8002b56:	f7fd fff1 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	f7fd ffee 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8002b60:	20e4      	movs	r0, #228	; 0xe4
 8002b62:	f7fd ffc7 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8002b66:	2001      	movs	r0, #1
 8002b68:	f7fd ffe8 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f7fd ffe5 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002b72:	2001      	movs	r0, #1
 8002b74:	f7fd ffe2 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f7fd ffdf 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002b7e:	2002      	movs	r0, #2
 8002b80:	f7fd ffdc 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b84:	2000      	movs	r0, #0
 8002b86:	f7fd ffd9 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8002b8a:	202a      	movs	r0, #42	; 0x2a
 8002b8c:	f7fd ffd6 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b90:	2000      	movs	r0, #0
 8002b92:	f7fd ffd3 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002b96:	203c      	movs	r0, #60	; 0x3c
 8002b98:	f7fd ffd0 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	f7fd ffcd 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002ba2:	204b      	movs	r0, #75	; 0x4b
 8002ba4:	f7fd ffca 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ba8:	2000      	movs	r0, #0
 8002baa:	f7fd ffc7 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002bae:	205d      	movs	r0, #93	; 0x5d
 8002bb0:	f7fd ffc4 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	f7fd ffc1 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002bba:	2074      	movs	r0, #116	; 0x74
 8002bbc:	f7fd ffbe 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	f7fd ffbb 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002bc6:	2084      	movs	r0, #132	; 0x84
 8002bc8:	f7fd ffb8 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bcc:	2000      	movs	r0, #0
 8002bce:	f7fd ffb5 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002bd2:	2093      	movs	r0, #147	; 0x93
 8002bd4:	f7fd ffb2 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f7fd ffaf 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002bde:	20a2      	movs	r0, #162	; 0xa2
 8002be0:	f7fd ffac 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002be4:	2000      	movs	r0, #0
 8002be6:	f7fd ffa9 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002bea:	20b3      	movs	r0, #179	; 0xb3
 8002bec:	f7fd ffa6 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	f7fd ffa3 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002bf6:	20be      	movs	r0, #190	; 0xbe
 8002bf8:	f7fd ffa0 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	f7fd ff9d 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002c02:	20c4      	movs	r0, #196	; 0xc4
 8002c04:	f7fd ff9a 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f7fd ff97 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002c0e:	20cd      	movs	r0, #205	; 0xcd
 8002c10:	f7fd ff94 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c14:	2000      	movs	r0, #0
 8002c16:	f7fd ff91 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002c1a:	20d3      	movs	r0, #211	; 0xd3
 8002c1c:	f7fd ff8e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c20:	2000      	movs	r0, #0
 8002c22:	f7fd ff8b 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8002c26:	20dd      	movs	r0, #221	; 0xdd
 8002c28:	f7fd ff88 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	f7fd ff85 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002c32:	20f3      	movs	r0, #243	; 0xf3
 8002c34:	f7fd ff82 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c38:	2000      	movs	r0, #0
 8002c3a:	f7fd ff7f 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8002c3e:	20e5      	movs	r0, #229	; 0xe5
 8002c40:	f7fd ff58 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002c44:	2000      	movs	r0, #0
 8002c46:	f7fd ff79 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	f7fd ff76 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c50:	2000      	movs	r0, #0
 8002c52:	f7fd ff73 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c56:	2000      	movs	r0, #0
 8002c58:	f7fd ff70 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002c5c:	2002      	movs	r0, #2
 8002c5e:	f7fd ff6d 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c62:	2000      	movs	r0, #0
 8002c64:	f7fd ff6a 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002c68:	2029      	movs	r0, #41	; 0x29
 8002c6a:	f7fd ff67 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c6e:	2000      	movs	r0, #0
 8002c70:	f7fd ff64 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002c74:	203c      	movs	r0, #60	; 0x3c
 8002c76:	f7fd ff61 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	f7fd ff5e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8002c80:	204b      	movs	r0, #75	; 0x4b
 8002c82:	f7fd ff5b 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c86:	2000      	movs	r0, #0
 8002c88:	f7fd ff58 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8002c8c:	205d      	movs	r0, #93	; 0x5d
 8002c8e:	f7fd ff55 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c92:	2000      	movs	r0, #0
 8002c94:	f7fd ff52 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8002c98:	2074      	movs	r0, #116	; 0x74
 8002c9a:	f7fd ff4f 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	f7fd ff4c 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002ca4:	2084      	movs	r0, #132	; 0x84
 8002ca6:	f7fd ff49 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002caa:	2000      	movs	r0, #0
 8002cac:	f7fd ff46 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8002cb0:	2093      	movs	r0, #147	; 0x93
 8002cb2:	f7fd ff43 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f7fd ff40 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002cbc:	20a2      	movs	r0, #162	; 0xa2
 8002cbe:	f7fd ff3d 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	f7fd ff3a 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8002cc8:	20b3      	movs	r0, #179	; 0xb3
 8002cca:	f7fd ff37 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f7fd ff34 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8002cd4:	20be      	movs	r0, #190	; 0xbe
 8002cd6:	f7fd ff31 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cda:	2000      	movs	r0, #0
 8002cdc:	f7fd ff2e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002ce0:	20c4      	movs	r0, #196	; 0xc4
 8002ce2:	f7fd ff2b 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f7fd ff28 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8002cec:	20cd      	movs	r0, #205	; 0xcd
 8002cee:	f7fd ff25 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f7fd ff22 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8002cf8:	20d3      	movs	r0, #211	; 0xd3
 8002cfa:	f7fd ff1f 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cfe:	2000      	movs	r0, #0
 8002d00:	f7fd ff1c 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002d04:	20dc      	movs	r0, #220	; 0xdc
 8002d06:	f7fd ff19 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	f7fd ff16 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002d10:	20f3      	movs	r0, #243	; 0xf3
 8002d12:	f7fd ff13 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d16:	2000      	movs	r0, #0
 8002d18:	f7fd ff10 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 8002d1c:	20e6      	movs	r0, #230	; 0xe6
 8002d1e:	f7fd fee9 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 8002d22:	2011      	movs	r0, #17
 8002d24:	f7fd ff0a 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d28:	2000      	movs	r0, #0
 8002d2a:	f7fd ff07 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8002d2e:	2034      	movs	r0, #52	; 0x34
 8002d30:	f7fd ff04 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d34:	2000      	movs	r0, #0
 8002d36:	f7fd ff01 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8002d3a:	2056      	movs	r0, #86	; 0x56
 8002d3c:	f7fd fefe 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d40:	2000      	movs	r0, #0
 8002d42:	f7fd fefb 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002d46:	2076      	movs	r0, #118	; 0x76
 8002d48:	f7fd fef8 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	f7fd fef5 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8002d52:	2077      	movs	r0, #119	; 0x77
 8002d54:	f7fd fef2 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d58:	2000      	movs	r0, #0
 8002d5a:	f7fd feef 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002d5e:	2066      	movs	r0, #102	; 0x66
 8002d60:	f7fd feec 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d64:	2000      	movs	r0, #0
 8002d66:	f7fd fee9 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002d6a:	2088      	movs	r0, #136	; 0x88
 8002d6c:	f7fd fee6 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d70:	2000      	movs	r0, #0
 8002d72:	f7fd fee3 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002d76:	2099      	movs	r0, #153	; 0x99
 8002d78:	f7fd fee0 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f7fd fedd 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8002d82:	20bb      	movs	r0, #187	; 0xbb
 8002d84:	f7fd feda 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d88:	2000      	movs	r0, #0
 8002d8a:	f7fd fed7 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002d8e:	2099      	movs	r0, #153	; 0x99
 8002d90:	f7fd fed4 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7fd fed1 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002d9a:	2066      	movs	r0, #102	; 0x66
 8002d9c:	f7fd fece 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002da0:	2000      	movs	r0, #0
 8002da2:	f7fd fecb 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002da6:	2055      	movs	r0, #85	; 0x55
 8002da8:	f7fd fec8 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dac:	2000      	movs	r0, #0
 8002dae:	f7fd fec5 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002db2:	2055      	movs	r0, #85	; 0x55
 8002db4:	f7fd fec2 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002db8:	2000      	movs	r0, #0
 8002dba:	f7fd febf 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002dbe:	2045      	movs	r0, #69	; 0x45
 8002dc0:	f7fd febc 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f7fd feb9 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8002dca:	2043      	movs	r0, #67	; 0x43
 8002dcc:	f7fd feb6 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	f7fd feb3 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002dd6:	2044      	movs	r0, #68	; 0x44
 8002dd8:	f7fd feb0 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ddc:	2000      	movs	r0, #0
 8002dde:	f7fd fead 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 8002de2:	20e7      	movs	r0, #231	; 0xe7
 8002de4:	f7fd fe86 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002de8:	2032      	movs	r0, #50	; 0x32
 8002dea:	f7fd fea7 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dee:	2000      	movs	r0, #0
 8002df0:	f7fd fea4 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002df4:	2055      	movs	r0, #85	; 0x55
 8002df6:	f7fd fea1 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	f7fd fe9e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002e00:	2076      	movs	r0, #118	; 0x76
 8002e02:	f7fd fe9b 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e06:	2000      	movs	r0, #0
 8002e08:	f7fd fe98 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002e0c:	2066      	movs	r0, #102	; 0x66
 8002e0e:	f7fd fe95 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e12:	2000      	movs	r0, #0
 8002e14:	f7fd fe92 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8002e18:	2067      	movs	r0, #103	; 0x67
 8002e1a:	f7fd fe8f 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e1e:	2000      	movs	r0, #0
 8002e20:	f7fd fe8c 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8002e24:	2067      	movs	r0, #103	; 0x67
 8002e26:	f7fd fe89 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	f7fd fe86 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8002e30:	2087      	movs	r0, #135	; 0x87
 8002e32:	f7fd fe83 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e36:	2000      	movs	r0, #0
 8002e38:	f7fd fe80 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002e3c:	2099      	movs	r0, #153	; 0x99
 8002e3e:	f7fd fe7d 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e42:	2000      	movs	r0, #0
 8002e44:	f7fd fe7a 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8002e48:	20bb      	movs	r0, #187	; 0xbb
 8002e4a:	f7fd fe77 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e4e:	2000      	movs	r0, #0
 8002e50:	f7fd fe74 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002e54:	2099      	movs	r0, #153	; 0x99
 8002e56:	f7fd fe71 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f7fd fe6e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8002e60:	2077      	movs	r0, #119	; 0x77
 8002e62:	f7fd fe6b 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e66:	2000      	movs	r0, #0
 8002e68:	f7fd fe68 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002e6c:	2044      	movs	r0, #68	; 0x44
 8002e6e:	f7fd fe65 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e72:	2000      	movs	r0, #0
 8002e74:	f7fd fe62 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8002e78:	2056      	movs	r0, #86	; 0x56
 8002e7a:	f7fd fe5f 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e7e:	2000      	movs	r0, #0
 8002e80:	f7fd fe5c 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002e84:	2023      	movs	r0, #35	; 0x23
 8002e86:	f7fd fe59 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	f7fd fe56 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8002e90:	2033      	movs	r0, #51	; 0x33
 8002e92:	f7fd fe53 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e96:	2000      	movs	r0, #0
 8002e98:	f7fd fe50 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002e9c:	2045      	movs	r0, #69	; 0x45
 8002e9e:	f7fd fe4d 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	f7fd fe4a 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8002ea8:	20e8      	movs	r0, #232	; 0xe8
 8002eaa:	f7fd fe23 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002eae:	2000      	movs	r0, #0
 8002eb0:	f7fd fe44 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	f7fd fe41 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002eba:	2099      	movs	r0, #153	; 0x99
 8002ebc:	f7fd fe3e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	f7fd fe3b 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8002ec6:	2087      	movs	r0, #135	; 0x87
 8002ec8:	f7fd fe38 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ecc:	2000      	movs	r0, #0
 8002ece:	f7fd fe35 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002ed2:	2088      	movs	r0, #136	; 0x88
 8002ed4:	f7fd fe32 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ed8:	2000      	movs	r0, #0
 8002eda:	f7fd fe2f 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8002ede:	2077      	movs	r0, #119	; 0x77
 8002ee0:	f7fd fe2c 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	f7fd fe29 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002eea:	2066      	movs	r0, #102	; 0x66
 8002eec:	f7fd fe26 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	f7fd fe23 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002ef6:	2088      	movs	r0, #136	; 0x88
 8002ef8:	f7fd fe20 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002efc:	2000      	movs	r0, #0
 8002efe:	f7fd fe1d 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 8002f02:	20aa      	movs	r0, #170	; 0xaa
 8002f04:	f7fd fe1a 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f08:	2000      	movs	r0, #0
 8002f0a:	f7fd fe17 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8002f0e:	20bb      	movs	r0, #187	; 0xbb
 8002f10:	f7fd fe14 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f14:	2000      	movs	r0, #0
 8002f16:	f7fd fe11 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002f1a:	2099      	movs	r0, #153	; 0x99
 8002f1c:	f7fd fe0e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f20:	2000      	movs	r0, #0
 8002f22:	f7fd fe0b 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8002f26:	2066      	movs	r0, #102	; 0x66
 8002f28:	f7fd fe08 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	f7fd fe05 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002f32:	2055      	movs	r0, #85	; 0x55
 8002f34:	f7fd fe02 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f38:	2000      	movs	r0, #0
 8002f3a:	f7fd fdff 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002f3e:	2055      	movs	r0, #85	; 0x55
 8002f40:	f7fd fdfc 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f44:	2000      	movs	r0, #0
 8002f46:	f7fd fdf9 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002f4a:	2044      	movs	r0, #68	; 0x44
 8002f4c:	f7fd fdf6 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f50:	2000      	movs	r0, #0
 8002f52:	f7fd fdf3 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002f56:	2044      	movs	r0, #68	; 0x44
 8002f58:	f7fd fdf0 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f7fd fded 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8002f62:	2055      	movs	r0, #85	; 0x55
 8002f64:	f7fd fdea 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f68:	2000      	movs	r0, #0
 8002f6a:	f7fd fde7 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 8002f6e:	20e9      	movs	r0, #233	; 0xe9
 8002f70:	f7fd fdc0 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8002f74:	20aa      	movs	r0, #170	; 0xaa
 8002f76:	f7fd fde1 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	f7fd fdde 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7fd fddb 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f86:	2000      	movs	r0, #0
 8002f88:	f7fd fdd8 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	f7fd fdb1 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8002f92:	20aa      	movs	r0, #170	; 0xaa
 8002f94:	f7fd fdd2 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8002f98:	20cf      	movs	r0, #207	; 0xcf
 8002f9a:	f7fd fdab 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	f7fd fdcc 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	f7fd fdc9 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002faa:	2000      	movs	r0, #0
 8002fac:	f7fd fdc6 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	f7fd fdc3 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	f7fd fdc0 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	f7fd fdbd 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	f7fd fdba 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fc8:	2000      	movs	r0, #0
 8002fca:	f7fd fdb7 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fce:	2000      	movs	r0, #0
 8002fd0:	f7fd fdb4 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	f7fd fdb1 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fda:	2000      	movs	r0, #0
 8002fdc:	f7fd fdae 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	f7fd fdab 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	f7fd fda8 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fec:	2000      	movs	r0, #0
 8002fee:	f7fd fda5 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	f7fd fda2 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	f7fd fd9f 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ffe:	2000      	movs	r0, #0
 8003000:	f7fd fd9c 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 8003004:	20f0      	movs	r0, #240	; 0xf0
 8003006:	f7fd fd75 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800300a:	2000      	movs	r0, #0
 800300c:	f7fd fd96 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8003010:	2050      	movs	r0, #80	; 0x50
 8003012:	f7fd fd93 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003016:	2000      	movs	r0, #0
 8003018:	f7fd fd90 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800301c:	2000      	movs	r0, #0
 800301e:	f7fd fd8d 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003022:	2000      	movs	r0, #0
 8003024:	f7fd fd8a 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 8003028:	20f3      	movs	r0, #243	; 0xf3
 800302a:	f7fd fd63 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800302e:	2000      	movs	r0, #0
 8003030:	f7fd fd84 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 8003034:	20f9      	movs	r0, #249	; 0xf9
 8003036:	f7fd fd5d 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 800303a:	2006      	movs	r0, #6
 800303c:	f7fd fd7e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8003040:	2010      	movs	r0, #16
 8003042:	f7fd fd7b 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003046:	2029      	movs	r0, #41	; 0x29
 8003048:	f7fd fd78 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800304c:	2000      	movs	r0, #0
 800304e:	f7fd fd75 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 8003052:	203a      	movs	r0, #58	; 0x3a
 8003054:	f7fd fd4e 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8003058:	2055      	movs	r0, #85	; 0x55
 800305a:	f7fd fd6f 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 800305e:	2011      	movs	r0, #17
 8003060:	f7fd fd48 	bl	8000af4 <LCD_WR_REG>
		HAL_Delay(100);
 8003064:	2064      	movs	r0, #100	; 0x64
 8003066:	f002 feb5 	bl	8005dd4 <HAL_Delay>
		LCD_WR_REG(0x29);
 800306a:	2029      	movs	r0, #41	; 0x29
 800306c:	f7fd fd42 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8003070:	2035      	movs	r0, #53	; 0x35
 8003072:	f7fd fd3f 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003076:	2000      	movs	r0, #0
 8003078:	f7fd fd60 	bl	8000b3c <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 800307c:	2051      	movs	r0, #81	; 0x51
 800307e:	f7fd fd39 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 8003082:	20ff      	movs	r0, #255	; 0xff
 8003084:	f7fd fd5a 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8003088:	2053      	movs	r0, #83	; 0x53
 800308a:	f7fd fd33 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 800308e:	202c      	movs	r0, #44	; 0x2c
 8003090:	f7fd fd54 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 8003094:	2055      	movs	r0, #85	; 0x55
 8003096:	f7fd fd2d 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 800309a:	2082      	movs	r0, #130	; 0x82
 800309c:	f7fd fd4e 	bl	8000b3c <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 80030a0:	202c      	movs	r0, #44	; 0x2c
 80030a2:	f7fd fd27 	bl	8000af4 <LCD_WR_REG>
 80030a6:	f002 bca1 	b.w	80059ec <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 80030aa:	4b04      	ldr	r3, [pc, #16]	; (80030bc <LCD_Init+0x1504>)
 80030ac:	889b      	ldrh	r3, [r3, #4]
 80030ae:	f245 5210 	movw	r2, #21776	; 0x5510
 80030b2:	4293      	cmp	r3, r2
 80030b4:	f040 8782 	bne.w	8003fbc <LCD_Init+0x2404>
 80030b8:	e002      	b.n	80030c0 <LCD_Init+0x1508>
 80030ba:	bf00      	nop
 80030bc:	20000028 	.word	0x20000028
		LCD_WriteReg(0xF000, 0x55);
 80030c0:	2155      	movs	r1, #85	; 0x55
 80030c2:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80030c6:	f7fd fda1 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 80030ca:	21aa      	movs	r1, #170	; 0xaa
 80030cc:	f24f 0001 	movw	r0, #61441	; 0xf001
 80030d0:	f7fd fd9c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 80030d4:	2152      	movs	r1, #82	; 0x52
 80030d6:	f24f 0002 	movw	r0, #61442	; 0xf002
 80030da:	f7fd fd97 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 80030de:	2108      	movs	r1, #8
 80030e0:	f24f 0003 	movw	r0, #61443	; 0xf003
 80030e4:	f7fd fd92 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 80030e8:	2101      	movs	r1, #1
 80030ea:	f24f 0004 	movw	r0, #61444	; 0xf004
 80030ee:	f7fd fd8d 	bl	8000c0c <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 80030f2:	210d      	movs	r1, #13
 80030f4:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80030f8:	f7fd fd88 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 80030fc:	210d      	movs	r1, #13
 80030fe:	f24b 0001 	movw	r0, #45057	; 0xb001
 8003102:	f7fd fd83 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 8003106:	210d      	movs	r1, #13
 8003108:	f24b 0002 	movw	r0, #45058	; 0xb002
 800310c:	f7fd fd7e 	bl	8000c0c <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 8003110:	2134      	movs	r1, #52	; 0x34
 8003112:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003116:	f7fd fd79 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 800311a:	2134      	movs	r1, #52	; 0x34
 800311c:	f24b 6001 	movw	r0, #46593	; 0xb601
 8003120:	f7fd fd74 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 8003124:	2134      	movs	r1, #52	; 0x34
 8003126:	f24b 6002 	movw	r0, #46594	; 0xb602
 800312a:	f7fd fd6f 	bl	8000c0c <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 800312e:	210d      	movs	r1, #13
 8003130:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003134:	f7fd fd6a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 8003138:	210d      	movs	r1, #13
 800313a:	f24b 1001 	movw	r0, #45313	; 0xb101
 800313e:	f7fd fd65 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 8003142:	210d      	movs	r1, #13
 8003144:	f24b 1002 	movw	r0, #45314	; 0xb102
 8003148:	f7fd fd60 	bl	8000c0c <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 800314c:	2134      	movs	r1, #52	; 0x34
 800314e:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003152:	f7fd fd5b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 8003156:	2134      	movs	r1, #52	; 0x34
 8003158:	f24b 7001 	movw	r0, #46849	; 0xb701
 800315c:	f7fd fd56 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8003160:	2134      	movs	r1, #52	; 0x34
 8003162:	f24b 7002 	movw	r0, #46850	; 0xb702
 8003166:	f7fd fd51 	bl	8000c0c <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 800316a:	2100      	movs	r1, #0
 800316c:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8003170:	f7fd fd4c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 8003174:	2100      	movs	r1, #0
 8003176:	f24b 2001 	movw	r0, #45569	; 0xb201
 800317a:	f7fd fd47 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 800317e:	2100      	movs	r1, #0
 8003180:	f24b 2002 	movw	r0, #45570	; 0xb202
 8003184:	f7fd fd42 	bl	8000c0c <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8003188:	2124      	movs	r1, #36	; 0x24
 800318a:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800318e:	f7fd fd3d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 8003192:	2124      	movs	r1, #36	; 0x24
 8003194:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003198:	f7fd fd38 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 800319c:	2124      	movs	r1, #36	; 0x24
 800319e:	f64b 0002 	movw	r0, #47106	; 0xb802
 80031a2:	f7fd fd33 	bl	8000c0c <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 80031a6:	2101      	movs	r1, #1
 80031a8:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 80031ac:	f7fd fd2e 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 80031b0:	210f      	movs	r1, #15
 80031b2:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 80031b6:	f7fd fd29 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 80031ba:	210f      	movs	r1, #15
 80031bc:	f24b 3001 	movw	r0, #45825	; 0xb301
 80031c0:	f7fd fd24 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 80031c4:	210f      	movs	r1, #15
 80031c6:	f24b 3002 	movw	r0, #45826	; 0xb302
 80031ca:	f7fd fd1f 	bl	8000c0c <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 80031ce:	2134      	movs	r1, #52	; 0x34
 80031d0:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 80031d4:	f7fd fd1a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 80031d8:	2134      	movs	r1, #52	; 0x34
 80031da:	f64b 1001 	movw	r0, #47361	; 0xb901
 80031de:	f7fd fd15 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 80031e2:	2134      	movs	r1, #52	; 0x34
 80031e4:	f64b 1002 	movw	r0, #47362	; 0xb902
 80031e8:	f7fd fd10 	bl	8000c0c <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 80031ec:	2108      	movs	r1, #8
 80031ee:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80031f2:	f7fd fd0b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 80031f6:	2108      	movs	r1, #8
 80031f8:	f24b 5001 	movw	r0, #46337	; 0xb501
 80031fc:	f7fd fd06 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 8003200:	2108      	movs	r1, #8
 8003202:	f24b 5002 	movw	r0, #46338	; 0xb502
 8003206:	f7fd fd01 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 800320a:	2103      	movs	r1, #3
 800320c:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8003210:	f7fd fcfc 	bl	8000c0c <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 8003214:	2124      	movs	r1, #36	; 0x24
 8003216:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 800321a:	f7fd fcf7 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 800321e:	2124      	movs	r1, #36	; 0x24
 8003220:	f64b 2001 	movw	r0, #47617	; 0xba01
 8003224:	f7fd fcf2 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 8003228:	2124      	movs	r1, #36	; 0x24
 800322a:	f64b 2002 	movw	r0, #47618	; 0xba02
 800322e:	f7fd fced 	bl	8000c0c <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 8003232:	2100      	movs	r1, #0
 8003234:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003238:	f7fd fce8 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 800323c:	2178      	movs	r1, #120	; 0x78
 800323e:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003242:	f7fd fce3 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8003246:	2100      	movs	r1, #0
 8003248:	f64b 4002 	movw	r0, #48130	; 0xbc02
 800324c:	f7fd fcde 	bl	8000c0c <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8003250:	2100      	movs	r1, #0
 8003252:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8003256:	f7fd fcd9 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 800325a:	2178      	movs	r1, #120	; 0x78
 800325c:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8003260:	f7fd fcd4 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 8003264:	2100      	movs	r1, #0
 8003266:	f64b 5002 	movw	r0, #48386	; 0xbd02
 800326a:	f7fd fccf 	bl	8000c0c <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 800326e:	2100      	movs	r1, #0
 8003270:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8003274:	f7fd fcca 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8003278:	2164      	movs	r1, #100	; 0x64
 800327a:	f64b 6001 	movw	r0, #48641	; 0xbe01
 800327e:	f7fd fcc5 	bl	8000c0c <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 8003282:	2100      	movs	r1, #0
 8003284:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8003288:	f7fd fcc0 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 800328c:	2133      	movs	r1, #51	; 0x33
 800328e:	f24d 1001 	movw	r0, #53505	; 0xd101
 8003292:	f7fd fcbb 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 8003296:	2100      	movs	r1, #0
 8003298:	f24d 1002 	movw	r0, #53506	; 0xd102
 800329c:	f7fd fcb6 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 80032a0:	2134      	movs	r1, #52	; 0x34
 80032a2:	f24d 1003 	movw	r0, #53507	; 0xd103
 80032a6:	f7fd fcb1 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 80032aa:	2100      	movs	r1, #0
 80032ac:	f24d 1004 	movw	r0, #53508	; 0xd104
 80032b0:	f7fd fcac 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 80032b4:	213a      	movs	r1, #58	; 0x3a
 80032b6:	f24d 1005 	movw	r0, #53509	; 0xd105
 80032ba:	f7fd fca7 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 80032be:	2100      	movs	r1, #0
 80032c0:	f24d 1006 	movw	r0, #53510	; 0xd106
 80032c4:	f7fd fca2 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 80032c8:	214a      	movs	r1, #74	; 0x4a
 80032ca:	f24d 1007 	movw	r0, #53511	; 0xd107
 80032ce:	f7fd fc9d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 80032d2:	2100      	movs	r1, #0
 80032d4:	f24d 1008 	movw	r0, #53512	; 0xd108
 80032d8:	f7fd fc98 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 80032dc:	215c      	movs	r1, #92	; 0x5c
 80032de:	f24d 1009 	movw	r0, #53513	; 0xd109
 80032e2:	f7fd fc93 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 80032e6:	2100      	movs	r1, #0
 80032e8:	f24d 100a 	movw	r0, #53514	; 0xd10a
 80032ec:	f7fd fc8e 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 80032f0:	2181      	movs	r1, #129	; 0x81
 80032f2:	f24d 100b 	movw	r0, #53515	; 0xd10b
 80032f6:	f7fd fc89 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 80032fa:	2100      	movs	r1, #0
 80032fc:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8003300:	f7fd fc84 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 8003304:	21a6      	movs	r1, #166	; 0xa6
 8003306:	f24d 100d 	movw	r0, #53517	; 0xd10d
 800330a:	f7fd fc7f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 800330e:	2100      	movs	r1, #0
 8003310:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8003314:	f7fd fc7a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 8003318:	21e5      	movs	r1, #229	; 0xe5
 800331a:	f24d 100f 	movw	r0, #53519	; 0xd10f
 800331e:	f7fd fc75 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 8003322:	2101      	movs	r1, #1
 8003324:	f24d 1010 	movw	r0, #53520	; 0xd110
 8003328:	f7fd fc70 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 800332c:	2113      	movs	r1, #19
 800332e:	f24d 1011 	movw	r0, #53521	; 0xd111
 8003332:	f7fd fc6b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 8003336:	2101      	movs	r1, #1
 8003338:	f24d 1012 	movw	r0, #53522	; 0xd112
 800333c:	f7fd fc66 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8003340:	2154      	movs	r1, #84	; 0x54
 8003342:	f24d 1013 	movw	r0, #53523	; 0xd113
 8003346:	f7fd fc61 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 800334a:	2101      	movs	r1, #1
 800334c:	f24d 1014 	movw	r0, #53524	; 0xd114
 8003350:	f7fd fc5c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 8003354:	2182      	movs	r1, #130	; 0x82
 8003356:	f24d 1015 	movw	r0, #53525	; 0xd115
 800335a:	f7fd fc57 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 800335e:	2101      	movs	r1, #1
 8003360:	f24d 1016 	movw	r0, #53526	; 0xd116
 8003364:	f7fd fc52 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8003368:	21ca      	movs	r1, #202	; 0xca
 800336a:	f24d 1017 	movw	r0, #53527	; 0xd117
 800336e:	f7fd fc4d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 8003372:	2102      	movs	r1, #2
 8003374:	f24d 1018 	movw	r0, #53528	; 0xd118
 8003378:	f7fd fc48 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 800337c:	2100      	movs	r1, #0
 800337e:	f24d 1019 	movw	r0, #53529	; 0xd119
 8003382:	f7fd fc43 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 8003386:	2102      	movs	r1, #2
 8003388:	f24d 101a 	movw	r0, #53530	; 0xd11a
 800338c:	f7fd fc3e 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8003390:	2101      	movs	r1, #1
 8003392:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8003396:	f7fd fc39 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 800339a:	2102      	movs	r1, #2
 800339c:	f24d 101c 	movw	r0, #53532	; 0xd11c
 80033a0:	f7fd fc34 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 80033a4:	2134      	movs	r1, #52	; 0x34
 80033a6:	f24d 101d 	movw	r0, #53533	; 0xd11d
 80033aa:	f7fd fc2f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 80033ae:	2102      	movs	r1, #2
 80033b0:	f24d 101e 	movw	r0, #53534	; 0xd11e
 80033b4:	f7fd fc2a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 80033b8:	2167      	movs	r1, #103	; 0x67
 80033ba:	f24d 101f 	movw	r0, #53535	; 0xd11f
 80033be:	f7fd fc25 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 80033c2:	2102      	movs	r1, #2
 80033c4:	f24d 1020 	movw	r0, #53536	; 0xd120
 80033c8:	f7fd fc20 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 80033cc:	2184      	movs	r1, #132	; 0x84
 80033ce:	f24d 1021 	movw	r0, #53537	; 0xd121
 80033d2:	f7fd fc1b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 80033d6:	2102      	movs	r1, #2
 80033d8:	f24d 1022 	movw	r0, #53538	; 0xd122
 80033dc:	f7fd fc16 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 80033e0:	21a4      	movs	r1, #164	; 0xa4
 80033e2:	f24d 1023 	movw	r0, #53539	; 0xd123
 80033e6:	f7fd fc11 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 80033ea:	2102      	movs	r1, #2
 80033ec:	f24d 1024 	movw	r0, #53540	; 0xd124
 80033f0:	f7fd fc0c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 80033f4:	21b7      	movs	r1, #183	; 0xb7
 80033f6:	f24d 1025 	movw	r0, #53541	; 0xd125
 80033fa:	f7fd fc07 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 80033fe:	2102      	movs	r1, #2
 8003400:	f24d 1026 	movw	r0, #53542	; 0xd126
 8003404:	f7fd fc02 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 8003408:	21cf      	movs	r1, #207	; 0xcf
 800340a:	f24d 1027 	movw	r0, #53543	; 0xd127
 800340e:	f7fd fbfd 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 8003412:	2102      	movs	r1, #2
 8003414:	f24d 1028 	movw	r0, #53544	; 0xd128
 8003418:	f7fd fbf8 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 800341c:	21de      	movs	r1, #222	; 0xde
 800341e:	f24d 1029 	movw	r0, #53545	; 0xd129
 8003422:	f7fd fbf3 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 8003426:	2102      	movs	r1, #2
 8003428:	f24d 102a 	movw	r0, #53546	; 0xd12a
 800342c:	f7fd fbee 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 8003430:	21f2      	movs	r1, #242	; 0xf2
 8003432:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8003436:	f7fd fbe9 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 800343a:	2102      	movs	r1, #2
 800343c:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8003440:	f7fd fbe4 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 8003444:	21fe      	movs	r1, #254	; 0xfe
 8003446:	f24d 102d 	movw	r0, #53549	; 0xd12d
 800344a:	f7fd fbdf 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 800344e:	2103      	movs	r1, #3
 8003450:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8003454:	f7fd fbda 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8003458:	2110      	movs	r1, #16
 800345a:	f24d 102f 	movw	r0, #53551	; 0xd12f
 800345e:	f7fd fbd5 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 8003462:	2103      	movs	r1, #3
 8003464:	f24d 1030 	movw	r0, #53552	; 0xd130
 8003468:	f7fd fbd0 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 800346c:	2133      	movs	r1, #51	; 0x33
 800346e:	f24d 1031 	movw	r0, #53553	; 0xd131
 8003472:	f7fd fbcb 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 8003476:	2103      	movs	r1, #3
 8003478:	f24d 1032 	movw	r0, #53554	; 0xd132
 800347c:	f7fd fbc6 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8003480:	216d      	movs	r1, #109	; 0x6d
 8003482:	f24d 1033 	movw	r0, #53555	; 0xd133
 8003486:	f7fd fbc1 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 800348a:	2100      	movs	r1, #0
 800348c:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8003490:	f7fd fbbc 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 8003494:	2133      	movs	r1, #51	; 0x33
 8003496:	f24d 2001 	movw	r0, #53761	; 0xd201
 800349a:	f7fd fbb7 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 800349e:	2100      	movs	r1, #0
 80034a0:	f24d 2002 	movw	r0, #53762	; 0xd202
 80034a4:	f7fd fbb2 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 80034a8:	2134      	movs	r1, #52	; 0x34
 80034aa:	f24d 2003 	movw	r0, #53763	; 0xd203
 80034ae:	f7fd fbad 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 80034b2:	2100      	movs	r1, #0
 80034b4:	f24d 2004 	movw	r0, #53764	; 0xd204
 80034b8:	f7fd fba8 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 80034bc:	213a      	movs	r1, #58	; 0x3a
 80034be:	f24d 2005 	movw	r0, #53765	; 0xd205
 80034c2:	f7fd fba3 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 80034c6:	2100      	movs	r1, #0
 80034c8:	f24d 2006 	movw	r0, #53766	; 0xd206
 80034cc:	f7fd fb9e 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 80034d0:	214a      	movs	r1, #74	; 0x4a
 80034d2:	f24d 2007 	movw	r0, #53767	; 0xd207
 80034d6:	f7fd fb99 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 80034da:	2100      	movs	r1, #0
 80034dc:	f24d 2008 	movw	r0, #53768	; 0xd208
 80034e0:	f7fd fb94 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 80034e4:	215c      	movs	r1, #92	; 0x5c
 80034e6:	f24d 2009 	movw	r0, #53769	; 0xd209
 80034ea:	f7fd fb8f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 80034ee:	2100      	movs	r1, #0
 80034f0:	f24d 200a 	movw	r0, #53770	; 0xd20a
 80034f4:	f7fd fb8a 	bl	8000c0c <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 80034f8:	2181      	movs	r1, #129	; 0x81
 80034fa:	f24d 200b 	movw	r0, #53771	; 0xd20b
 80034fe:	f7fd fb85 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 8003502:	2100      	movs	r1, #0
 8003504:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8003508:	f7fd fb80 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 800350c:	21a6      	movs	r1, #166	; 0xa6
 800350e:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8003512:	f7fd fb7b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 8003516:	2100      	movs	r1, #0
 8003518:	f24d 200e 	movw	r0, #53774	; 0xd20e
 800351c:	f7fd fb76 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8003520:	21e5      	movs	r1, #229	; 0xe5
 8003522:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8003526:	f7fd fb71 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 800352a:	2101      	movs	r1, #1
 800352c:	f24d 2010 	movw	r0, #53776	; 0xd210
 8003530:	f7fd fb6c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 8003534:	2113      	movs	r1, #19
 8003536:	f24d 2011 	movw	r0, #53777	; 0xd211
 800353a:	f7fd fb67 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 800353e:	2101      	movs	r1, #1
 8003540:	f24d 2012 	movw	r0, #53778	; 0xd212
 8003544:	f7fd fb62 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8003548:	2154      	movs	r1, #84	; 0x54
 800354a:	f24d 2013 	movw	r0, #53779	; 0xd213
 800354e:	f7fd fb5d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 8003552:	2101      	movs	r1, #1
 8003554:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003558:	f7fd fb58 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 800355c:	2182      	movs	r1, #130	; 0x82
 800355e:	f24d 2015 	movw	r0, #53781	; 0xd215
 8003562:	f7fd fb53 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 8003566:	2101      	movs	r1, #1
 8003568:	f24d 2016 	movw	r0, #53782	; 0xd216
 800356c:	f7fd fb4e 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8003570:	21ca      	movs	r1, #202	; 0xca
 8003572:	f24d 2017 	movw	r0, #53783	; 0xd217
 8003576:	f7fd fb49 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 800357a:	2102      	movs	r1, #2
 800357c:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003580:	f7fd fb44 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 8003584:	2100      	movs	r1, #0
 8003586:	f24d 2019 	movw	r0, #53785	; 0xd219
 800358a:	f7fd fb3f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 800358e:	2102      	movs	r1, #2
 8003590:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003594:	f7fd fb3a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8003598:	2101      	movs	r1, #1
 800359a:	f24d 201b 	movw	r0, #53787	; 0xd21b
 800359e:	f7fd fb35 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 80035a2:	2102      	movs	r1, #2
 80035a4:	f24d 201c 	movw	r0, #53788	; 0xd21c
 80035a8:	f7fd fb30 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 80035ac:	2134      	movs	r1, #52	; 0x34
 80035ae:	f24d 201d 	movw	r0, #53789	; 0xd21d
 80035b2:	f7fd fb2b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 80035b6:	2102      	movs	r1, #2
 80035b8:	f24d 201e 	movw	r0, #53790	; 0xd21e
 80035bc:	f7fd fb26 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 80035c0:	2167      	movs	r1, #103	; 0x67
 80035c2:	f24d 201f 	movw	r0, #53791	; 0xd21f
 80035c6:	f7fd fb21 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 80035ca:	2102      	movs	r1, #2
 80035cc:	f24d 2020 	movw	r0, #53792	; 0xd220
 80035d0:	f7fd fb1c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 80035d4:	2184      	movs	r1, #132	; 0x84
 80035d6:	f24d 2021 	movw	r0, #53793	; 0xd221
 80035da:	f7fd fb17 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 80035de:	2102      	movs	r1, #2
 80035e0:	f24d 2022 	movw	r0, #53794	; 0xd222
 80035e4:	f7fd fb12 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 80035e8:	21a4      	movs	r1, #164	; 0xa4
 80035ea:	f24d 2023 	movw	r0, #53795	; 0xd223
 80035ee:	f7fd fb0d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 80035f2:	2102      	movs	r1, #2
 80035f4:	f24d 2024 	movw	r0, #53796	; 0xd224
 80035f8:	f7fd fb08 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 80035fc:	21b7      	movs	r1, #183	; 0xb7
 80035fe:	f24d 2025 	movw	r0, #53797	; 0xd225
 8003602:	f7fd fb03 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 8003606:	2102      	movs	r1, #2
 8003608:	f24d 2026 	movw	r0, #53798	; 0xd226
 800360c:	f7fd fafe 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8003610:	21cf      	movs	r1, #207	; 0xcf
 8003612:	f24d 2027 	movw	r0, #53799	; 0xd227
 8003616:	f7fd faf9 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 800361a:	2102      	movs	r1, #2
 800361c:	f24d 2028 	movw	r0, #53800	; 0xd228
 8003620:	f7fd faf4 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 8003624:	21de      	movs	r1, #222	; 0xde
 8003626:	f24d 2029 	movw	r0, #53801	; 0xd229
 800362a:	f7fd faef 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 800362e:	2102      	movs	r1, #2
 8003630:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8003634:	f7fd faea 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8003638:	21f2      	movs	r1, #242	; 0xf2
 800363a:	f24d 202b 	movw	r0, #53803	; 0xd22b
 800363e:	f7fd fae5 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 8003642:	2102      	movs	r1, #2
 8003644:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003648:	f7fd fae0 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 800364c:	21fe      	movs	r1, #254	; 0xfe
 800364e:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8003652:	f7fd fadb 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8003656:	2103      	movs	r1, #3
 8003658:	f24d 202e 	movw	r0, #53806	; 0xd22e
 800365c:	f7fd fad6 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8003660:	2110      	movs	r1, #16
 8003662:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8003666:	f7fd fad1 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 800366a:	2103      	movs	r1, #3
 800366c:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003670:	f7fd facc 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8003674:	2133      	movs	r1, #51	; 0x33
 8003676:	f24d 2031 	movw	r0, #53809	; 0xd231
 800367a:	f7fd fac7 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 800367e:	2103      	movs	r1, #3
 8003680:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003684:	f7fd fac2 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8003688:	216d      	movs	r1, #109	; 0x6d
 800368a:	f24d 2033 	movw	r0, #53811	; 0xd233
 800368e:	f7fd fabd 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8003692:	2100      	movs	r1, #0
 8003694:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003698:	f7fd fab8 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 800369c:	2133      	movs	r1, #51	; 0x33
 800369e:	f24d 3001 	movw	r0, #54017	; 0xd301
 80036a2:	f7fd fab3 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 80036a6:	2100      	movs	r1, #0
 80036a8:	f24d 3002 	movw	r0, #54018	; 0xd302
 80036ac:	f7fd faae 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 80036b0:	2134      	movs	r1, #52	; 0x34
 80036b2:	f24d 3003 	movw	r0, #54019	; 0xd303
 80036b6:	f7fd faa9 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 80036ba:	2100      	movs	r1, #0
 80036bc:	f24d 3004 	movw	r0, #54020	; 0xd304
 80036c0:	f7fd faa4 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 80036c4:	213a      	movs	r1, #58	; 0x3a
 80036c6:	f24d 3005 	movw	r0, #54021	; 0xd305
 80036ca:	f7fd fa9f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 80036ce:	2100      	movs	r1, #0
 80036d0:	f24d 3006 	movw	r0, #54022	; 0xd306
 80036d4:	f7fd fa9a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 80036d8:	214a      	movs	r1, #74	; 0x4a
 80036da:	f24d 3007 	movw	r0, #54023	; 0xd307
 80036de:	f7fd fa95 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 80036e2:	2100      	movs	r1, #0
 80036e4:	f24d 3008 	movw	r0, #54024	; 0xd308
 80036e8:	f7fd fa90 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 80036ec:	215c      	movs	r1, #92	; 0x5c
 80036ee:	f24d 3009 	movw	r0, #54025	; 0xd309
 80036f2:	f7fd fa8b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 80036f6:	2100      	movs	r1, #0
 80036f8:	f24d 300a 	movw	r0, #54026	; 0xd30a
 80036fc:	f7fd fa86 	bl	8000c0c <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8003700:	2181      	movs	r1, #129	; 0x81
 8003702:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8003706:	f7fd fa81 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 800370a:	2100      	movs	r1, #0
 800370c:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003710:	f7fd fa7c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8003714:	21a6      	movs	r1, #166	; 0xa6
 8003716:	f24d 300d 	movw	r0, #54029	; 0xd30d
 800371a:	f7fd fa77 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 800371e:	2100      	movs	r1, #0
 8003720:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8003724:	f7fd fa72 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8003728:	21e5      	movs	r1, #229	; 0xe5
 800372a:	f24d 300f 	movw	r0, #54031	; 0xd30f
 800372e:	f7fd fa6d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8003732:	2101      	movs	r1, #1
 8003734:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003738:	f7fd fa68 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 800373c:	2113      	movs	r1, #19
 800373e:	f24d 3011 	movw	r0, #54033	; 0xd311
 8003742:	f7fd fa63 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8003746:	2101      	movs	r1, #1
 8003748:	f24d 3012 	movw	r0, #54034	; 0xd312
 800374c:	f7fd fa5e 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8003750:	2154      	movs	r1, #84	; 0x54
 8003752:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003756:	f7fd fa59 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 800375a:	2101      	movs	r1, #1
 800375c:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003760:	f7fd fa54 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8003764:	2182      	movs	r1, #130	; 0x82
 8003766:	f24d 3015 	movw	r0, #54037	; 0xd315
 800376a:	f7fd fa4f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 800376e:	2101      	movs	r1, #1
 8003770:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003774:	f7fd fa4a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8003778:	21ca      	movs	r1, #202	; 0xca
 800377a:	f24d 3017 	movw	r0, #54039	; 0xd317
 800377e:	f7fd fa45 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8003782:	2102      	movs	r1, #2
 8003784:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003788:	f7fd fa40 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 800378c:	2100      	movs	r1, #0
 800378e:	f24d 3019 	movw	r0, #54041	; 0xd319
 8003792:	f7fd fa3b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8003796:	2102      	movs	r1, #2
 8003798:	f24d 301a 	movw	r0, #54042	; 0xd31a
 800379c:	f7fd fa36 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 80037a0:	2101      	movs	r1, #1
 80037a2:	f24d 301b 	movw	r0, #54043	; 0xd31b
 80037a6:	f7fd fa31 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 80037aa:	2102      	movs	r1, #2
 80037ac:	f24d 301c 	movw	r0, #54044	; 0xd31c
 80037b0:	f7fd fa2c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 80037b4:	2134      	movs	r1, #52	; 0x34
 80037b6:	f24d 301d 	movw	r0, #54045	; 0xd31d
 80037ba:	f7fd fa27 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 80037be:	2102      	movs	r1, #2
 80037c0:	f24d 301e 	movw	r0, #54046	; 0xd31e
 80037c4:	f7fd fa22 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 80037c8:	2167      	movs	r1, #103	; 0x67
 80037ca:	f24d 301f 	movw	r0, #54047	; 0xd31f
 80037ce:	f7fd fa1d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 80037d2:	2102      	movs	r1, #2
 80037d4:	f24d 3020 	movw	r0, #54048	; 0xd320
 80037d8:	f7fd fa18 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 80037dc:	2184      	movs	r1, #132	; 0x84
 80037de:	f24d 3021 	movw	r0, #54049	; 0xd321
 80037e2:	f7fd fa13 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 80037e6:	2102      	movs	r1, #2
 80037e8:	f24d 3022 	movw	r0, #54050	; 0xd322
 80037ec:	f7fd fa0e 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 80037f0:	21a4      	movs	r1, #164	; 0xa4
 80037f2:	f24d 3023 	movw	r0, #54051	; 0xd323
 80037f6:	f7fd fa09 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 80037fa:	2102      	movs	r1, #2
 80037fc:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003800:	f7fd fa04 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8003804:	21b7      	movs	r1, #183	; 0xb7
 8003806:	f24d 3025 	movw	r0, #54053	; 0xd325
 800380a:	f7fd f9ff 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 800380e:	2102      	movs	r1, #2
 8003810:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003814:	f7fd f9fa 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8003818:	21cf      	movs	r1, #207	; 0xcf
 800381a:	f24d 3027 	movw	r0, #54055	; 0xd327
 800381e:	f7fd f9f5 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8003822:	2102      	movs	r1, #2
 8003824:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003828:	f7fd f9f0 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 800382c:	21de      	movs	r1, #222	; 0xde
 800382e:	f24d 3029 	movw	r0, #54057	; 0xd329
 8003832:	f7fd f9eb 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8003836:	2102      	movs	r1, #2
 8003838:	f24d 302a 	movw	r0, #54058	; 0xd32a
 800383c:	f7fd f9e6 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8003840:	21f2      	movs	r1, #242	; 0xf2
 8003842:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003846:	f7fd f9e1 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 800384a:	2102      	movs	r1, #2
 800384c:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003850:	f7fd f9dc 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8003854:	21fe      	movs	r1, #254	; 0xfe
 8003856:	f24d 302d 	movw	r0, #54061	; 0xd32d
 800385a:	f7fd f9d7 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 800385e:	2103      	movs	r1, #3
 8003860:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003864:	f7fd f9d2 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8003868:	2110      	movs	r1, #16
 800386a:	f24d 302f 	movw	r0, #54063	; 0xd32f
 800386e:	f7fd f9cd 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8003872:	2103      	movs	r1, #3
 8003874:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003878:	f7fd f9c8 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 800387c:	2133      	movs	r1, #51	; 0x33
 800387e:	f24d 3031 	movw	r0, #54065	; 0xd331
 8003882:	f7fd f9c3 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8003886:	2103      	movs	r1, #3
 8003888:	f24d 3032 	movw	r0, #54066	; 0xd332
 800388c:	f7fd f9be 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8003890:	216d      	movs	r1, #109	; 0x6d
 8003892:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003896:	f7fd f9b9 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 800389a:	2100      	movs	r1, #0
 800389c:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 80038a0:	f7fd f9b4 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 80038a4:	2133      	movs	r1, #51	; 0x33
 80038a6:	f24d 4001 	movw	r0, #54273	; 0xd401
 80038aa:	f7fd f9af 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 80038ae:	2100      	movs	r1, #0
 80038b0:	f24d 4002 	movw	r0, #54274	; 0xd402
 80038b4:	f7fd f9aa 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 80038b8:	2134      	movs	r1, #52	; 0x34
 80038ba:	f24d 4003 	movw	r0, #54275	; 0xd403
 80038be:	f7fd f9a5 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 80038c2:	2100      	movs	r1, #0
 80038c4:	f24d 4004 	movw	r0, #54276	; 0xd404
 80038c8:	f7fd f9a0 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 80038cc:	213a      	movs	r1, #58	; 0x3a
 80038ce:	f24d 4005 	movw	r0, #54277	; 0xd405
 80038d2:	f7fd f99b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 80038d6:	2100      	movs	r1, #0
 80038d8:	f24d 4006 	movw	r0, #54278	; 0xd406
 80038dc:	f7fd f996 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 80038e0:	214a      	movs	r1, #74	; 0x4a
 80038e2:	f24d 4007 	movw	r0, #54279	; 0xd407
 80038e6:	f7fd f991 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 80038ea:	2100      	movs	r1, #0
 80038ec:	f24d 4008 	movw	r0, #54280	; 0xd408
 80038f0:	f7fd f98c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 80038f4:	215c      	movs	r1, #92	; 0x5c
 80038f6:	f24d 4009 	movw	r0, #54281	; 0xd409
 80038fa:	f7fd f987 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 80038fe:	2100      	movs	r1, #0
 8003900:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8003904:	f7fd f982 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8003908:	2181      	movs	r1, #129	; 0x81
 800390a:	f24d 400b 	movw	r0, #54283	; 0xd40b
 800390e:	f7fd f97d 	bl	8000c0c <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8003912:	2100      	movs	r1, #0
 8003914:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003918:	f7fd f978 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 800391c:	21a6      	movs	r1, #166	; 0xa6
 800391e:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8003922:	f7fd f973 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8003926:	2100      	movs	r1, #0
 8003928:	f24d 400e 	movw	r0, #54286	; 0xd40e
 800392c:	f7fd f96e 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8003930:	21e5      	movs	r1, #229	; 0xe5
 8003932:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003936:	f7fd f969 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 800393a:	2101      	movs	r1, #1
 800393c:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003940:	f7fd f964 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8003944:	2113      	movs	r1, #19
 8003946:	f24d 4011 	movw	r0, #54289	; 0xd411
 800394a:	f7fd f95f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 800394e:	2101      	movs	r1, #1
 8003950:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003954:	f7fd f95a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8003958:	2154      	movs	r1, #84	; 0x54
 800395a:	f24d 4013 	movw	r0, #54291	; 0xd413
 800395e:	f7fd f955 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8003962:	2101      	movs	r1, #1
 8003964:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003968:	f7fd f950 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 800396c:	2182      	movs	r1, #130	; 0x82
 800396e:	f24d 4015 	movw	r0, #54293	; 0xd415
 8003972:	f7fd f94b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8003976:	2101      	movs	r1, #1
 8003978:	f24d 4016 	movw	r0, #54294	; 0xd416
 800397c:	f7fd f946 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8003980:	21ca      	movs	r1, #202	; 0xca
 8003982:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003986:	f7fd f941 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 800398a:	2102      	movs	r1, #2
 800398c:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003990:	f7fd f93c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8003994:	2100      	movs	r1, #0
 8003996:	f24d 4019 	movw	r0, #54297	; 0xd419
 800399a:	f7fd f937 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 800399e:	2102      	movs	r1, #2
 80039a0:	f24d 401a 	movw	r0, #54298	; 0xd41a
 80039a4:	f7fd f932 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 80039a8:	2101      	movs	r1, #1
 80039aa:	f24d 401b 	movw	r0, #54299	; 0xd41b
 80039ae:	f7fd f92d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 80039b2:	2102      	movs	r1, #2
 80039b4:	f24d 401c 	movw	r0, #54300	; 0xd41c
 80039b8:	f7fd f928 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 80039bc:	2134      	movs	r1, #52	; 0x34
 80039be:	f24d 401d 	movw	r0, #54301	; 0xd41d
 80039c2:	f7fd f923 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 80039c6:	2102      	movs	r1, #2
 80039c8:	f24d 401e 	movw	r0, #54302	; 0xd41e
 80039cc:	f7fd f91e 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 80039d0:	2167      	movs	r1, #103	; 0x67
 80039d2:	f24d 401f 	movw	r0, #54303	; 0xd41f
 80039d6:	f7fd f919 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 80039da:	2102      	movs	r1, #2
 80039dc:	f24d 4020 	movw	r0, #54304	; 0xd420
 80039e0:	f7fd f914 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 80039e4:	2184      	movs	r1, #132	; 0x84
 80039e6:	f24d 4021 	movw	r0, #54305	; 0xd421
 80039ea:	f7fd f90f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 80039ee:	2102      	movs	r1, #2
 80039f0:	f24d 4022 	movw	r0, #54306	; 0xd422
 80039f4:	f7fd f90a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 80039f8:	21a4      	movs	r1, #164	; 0xa4
 80039fa:	f24d 4023 	movw	r0, #54307	; 0xd423
 80039fe:	f7fd f905 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8003a02:	2102      	movs	r1, #2
 8003a04:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003a08:	f7fd f900 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8003a0c:	21b7      	movs	r1, #183	; 0xb7
 8003a0e:	f24d 4025 	movw	r0, #54309	; 0xd425
 8003a12:	f7fd f8fb 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8003a16:	2102      	movs	r1, #2
 8003a18:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003a1c:	f7fd f8f6 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8003a20:	21cf      	movs	r1, #207	; 0xcf
 8003a22:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003a26:	f7fd f8f1 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8003a2a:	2102      	movs	r1, #2
 8003a2c:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003a30:	f7fd f8ec 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8003a34:	21de      	movs	r1, #222	; 0xde
 8003a36:	f24d 4029 	movw	r0, #54313	; 0xd429
 8003a3a:	f7fd f8e7 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8003a3e:	2102      	movs	r1, #2
 8003a40:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003a44:	f7fd f8e2 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8003a48:	21f2      	movs	r1, #242	; 0xf2
 8003a4a:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8003a4e:	f7fd f8dd 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8003a52:	2102      	movs	r1, #2
 8003a54:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003a58:	f7fd f8d8 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 8003a5c:	21fe      	movs	r1, #254	; 0xfe
 8003a5e:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8003a62:	f7fd f8d3 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8003a66:	2103      	movs	r1, #3
 8003a68:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003a6c:	f7fd f8ce 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8003a70:	2110      	movs	r1, #16
 8003a72:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8003a76:	f7fd f8c9 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8003a7a:	2103      	movs	r1, #3
 8003a7c:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003a80:	f7fd f8c4 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8003a84:	2133      	movs	r1, #51	; 0x33
 8003a86:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003a8a:	f7fd f8bf 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8003a8e:	2103      	movs	r1, #3
 8003a90:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003a94:	f7fd f8ba 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8003a98:	216d      	movs	r1, #109	; 0x6d
 8003a9a:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003a9e:	f7fd f8b5 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003aa8:	f7fd f8b0 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8003aac:	2133      	movs	r1, #51	; 0x33
 8003aae:	f24d 5001 	movw	r0, #54529	; 0xd501
 8003ab2:	f7fd f8ab 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003abc:	f7fd f8a6 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8003ac0:	2134      	movs	r1, #52	; 0x34
 8003ac2:	f24d 5003 	movw	r0, #54531	; 0xd503
 8003ac6:	f7fd f8a1 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 8003aca:	2100      	movs	r1, #0
 8003acc:	f24d 5004 	movw	r0, #54532	; 0xd504
 8003ad0:	f7fd f89c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8003ad4:	213a      	movs	r1, #58	; 0x3a
 8003ad6:	f24d 5005 	movw	r0, #54533	; 0xd505
 8003ada:	f7fd f897 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 8003ade:	2100      	movs	r1, #0
 8003ae0:	f24d 5006 	movw	r0, #54534	; 0xd506
 8003ae4:	f7fd f892 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8003ae8:	214a      	movs	r1, #74	; 0x4a
 8003aea:	f24d 5007 	movw	r0, #54535	; 0xd507
 8003aee:	f7fd f88d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 8003af2:	2100      	movs	r1, #0
 8003af4:	f24d 5008 	movw	r0, #54536	; 0xd508
 8003af8:	f7fd f888 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 8003afc:	215c      	movs	r1, #92	; 0x5c
 8003afe:	f24d 5009 	movw	r0, #54537	; 0xd509
 8003b02:	f7fd f883 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 8003b06:	2100      	movs	r1, #0
 8003b08:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8003b0c:	f7fd f87e 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8003b10:	2181      	movs	r1, #129	; 0x81
 8003b12:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8003b16:	f7fd f879 	bl	8000c0c <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8003b20:	f7fd f874 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 8003b24:	21a6      	movs	r1, #166	; 0xa6
 8003b26:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8003b2a:	f7fd f86f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8003b2e:	2100      	movs	r1, #0
 8003b30:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8003b34:	f7fd f86a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8003b38:	21e5      	movs	r1, #229	; 0xe5
 8003b3a:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8003b3e:	f7fd f865 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 8003b42:	2101      	movs	r1, #1
 8003b44:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003b48:	f7fd f860 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 8003b4c:	2113      	movs	r1, #19
 8003b4e:	f24d 5011 	movw	r0, #54545	; 0xd511
 8003b52:	f7fd f85b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8003b56:	2101      	movs	r1, #1
 8003b58:	f24d 5012 	movw	r0, #54546	; 0xd512
 8003b5c:	f7fd f856 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8003b60:	2154      	movs	r1, #84	; 0x54
 8003b62:	f24d 5013 	movw	r0, #54547	; 0xd513
 8003b66:	f7fd f851 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	f24d 5014 	movw	r0, #54548	; 0xd514
 8003b70:	f7fd f84c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 8003b74:	2182      	movs	r1, #130	; 0x82
 8003b76:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003b7a:	f7fd f847 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8003b7e:	2101      	movs	r1, #1
 8003b80:	f24d 5016 	movw	r0, #54550	; 0xd516
 8003b84:	f7fd f842 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8003b88:	21ca      	movs	r1, #202	; 0xca
 8003b8a:	f24d 5017 	movw	r0, #54551	; 0xd517
 8003b8e:	f7fd f83d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8003b92:	2102      	movs	r1, #2
 8003b94:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003b98:	f7fd f838 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	f24d 5019 	movw	r0, #54553	; 0xd519
 8003ba2:	f7fd f833 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 8003ba6:	2102      	movs	r1, #2
 8003ba8:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003bac:	f7fd f82e 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8003bb6:	f7fd f829 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8003bba:	2102      	movs	r1, #2
 8003bbc:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8003bc0:	f7fd f824 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8003bc4:	2134      	movs	r1, #52	; 0x34
 8003bc6:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003bca:	f7fd f81f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8003bce:	2102      	movs	r1, #2
 8003bd0:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8003bd4:	f7fd f81a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8003bd8:	2167      	movs	r1, #103	; 0x67
 8003bda:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8003bde:	f7fd f815 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 8003be2:	2102      	movs	r1, #2
 8003be4:	f24d 5020 	movw	r0, #54560	; 0xd520
 8003be8:	f7fd f810 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8003bec:	2184      	movs	r1, #132	; 0x84
 8003bee:	f24d 5021 	movw	r0, #54561	; 0xd521
 8003bf2:	f7fd f80b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 8003bf6:	2102      	movs	r1, #2
 8003bf8:	f24d 5022 	movw	r0, #54562	; 0xd522
 8003bfc:	f7fd f806 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8003c00:	21a4      	movs	r1, #164	; 0xa4
 8003c02:	f24d 5023 	movw	r0, #54563	; 0xd523
 8003c06:	f7fd f801 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 8003c0a:	2102      	movs	r1, #2
 8003c0c:	f24d 5024 	movw	r0, #54564	; 0xd524
 8003c10:	f7fc fffc 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 8003c14:	21b7      	movs	r1, #183	; 0xb7
 8003c16:	f24d 5025 	movw	r0, #54565	; 0xd525
 8003c1a:	f7fc fff7 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 8003c1e:	2102      	movs	r1, #2
 8003c20:	f24d 5026 	movw	r0, #54566	; 0xd526
 8003c24:	f7fc fff2 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8003c28:	21cf      	movs	r1, #207	; 0xcf
 8003c2a:	f24d 5027 	movw	r0, #54567	; 0xd527
 8003c2e:	f7fc ffed 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 8003c32:	2102      	movs	r1, #2
 8003c34:	f24d 5028 	movw	r0, #54568	; 0xd528
 8003c38:	f7fc ffe8 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8003c3c:	21de      	movs	r1, #222	; 0xde
 8003c3e:	f24d 5029 	movw	r0, #54569	; 0xd529
 8003c42:	f7fc ffe3 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 8003c46:	2102      	movs	r1, #2
 8003c48:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8003c4c:	f7fc ffde 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8003c50:	21f2      	movs	r1, #242	; 0xf2
 8003c52:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8003c56:	f7fc ffd9 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 8003c5a:	2102      	movs	r1, #2
 8003c5c:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8003c60:	f7fc ffd4 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 8003c64:	21fe      	movs	r1, #254	; 0xfe
 8003c66:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8003c6a:	f7fc ffcf 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 8003c6e:	2103      	movs	r1, #3
 8003c70:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8003c74:	f7fc ffca 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8003c78:	2110      	movs	r1, #16
 8003c7a:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8003c7e:	f7fc ffc5 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 8003c82:	2103      	movs	r1, #3
 8003c84:	f24d 5030 	movw	r0, #54576	; 0xd530
 8003c88:	f7fc ffc0 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 8003c8c:	2133      	movs	r1, #51	; 0x33
 8003c8e:	f24d 5031 	movw	r0, #54577	; 0xd531
 8003c92:	f7fc ffbb 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 8003c96:	2103      	movs	r1, #3
 8003c98:	f24d 5032 	movw	r0, #54578	; 0xd532
 8003c9c:	f7fc ffb6 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8003ca0:	216d      	movs	r1, #109	; 0x6d
 8003ca2:	f24d 5033 	movw	r0, #54579	; 0xd533
 8003ca6:	f7fc ffb1 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 8003caa:	2100      	movs	r1, #0
 8003cac:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8003cb0:	f7fc ffac 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 8003cb4:	2133      	movs	r1, #51	; 0x33
 8003cb6:	f24d 6001 	movw	r0, #54785	; 0xd601
 8003cba:	f7fc ffa7 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	f24d 6002 	movw	r0, #54786	; 0xd602
 8003cc4:	f7fc ffa2 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8003cc8:	2134      	movs	r1, #52	; 0x34
 8003cca:	f24d 6003 	movw	r0, #54787	; 0xd603
 8003cce:	f7fc ff9d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	f24d 6004 	movw	r0, #54788	; 0xd604
 8003cd8:	f7fc ff98 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 8003cdc:	213a      	movs	r1, #58	; 0x3a
 8003cde:	f24d 6005 	movw	r0, #54789	; 0xd605
 8003ce2:	f7fc ff93 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	f24d 6006 	movw	r0, #54790	; 0xd606
 8003cec:	f7fc ff8e 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 8003cf0:	214a      	movs	r1, #74	; 0x4a
 8003cf2:	f24d 6007 	movw	r0, #54791	; 0xd607
 8003cf6:	f7fc ff89 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	f24d 6008 	movw	r0, #54792	; 0xd608
 8003d00:	f7fc ff84 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 8003d04:	215c      	movs	r1, #92	; 0x5c
 8003d06:	f24d 6009 	movw	r0, #54793	; 0xd609
 8003d0a:	f7fc ff7f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 8003d0e:	2100      	movs	r1, #0
 8003d10:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8003d14:	f7fc ff7a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 8003d18:	2181      	movs	r1, #129	; 0x81
 8003d1a:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8003d1e:	f7fc ff75 	bl	8000c0c <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 8003d22:	2100      	movs	r1, #0
 8003d24:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8003d28:	f7fc ff70 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 8003d2c:	21a6      	movs	r1, #166	; 0xa6
 8003d2e:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8003d32:	f7fc ff6b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 8003d36:	2100      	movs	r1, #0
 8003d38:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8003d3c:	f7fc ff66 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8003d40:	21e5      	movs	r1, #229	; 0xe5
 8003d42:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8003d46:	f7fc ff61 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	f24d 6010 	movw	r0, #54800	; 0xd610
 8003d50:	f7fc ff5c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 8003d54:	2113      	movs	r1, #19
 8003d56:	f24d 6011 	movw	r0, #54801	; 0xd611
 8003d5a:	f7fc ff57 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 8003d5e:	2101      	movs	r1, #1
 8003d60:	f24d 6012 	movw	r0, #54802	; 0xd612
 8003d64:	f7fc ff52 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8003d68:	2154      	movs	r1, #84	; 0x54
 8003d6a:	f24d 6013 	movw	r0, #54803	; 0xd613
 8003d6e:	f7fc ff4d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 8003d72:	2101      	movs	r1, #1
 8003d74:	f24d 6014 	movw	r0, #54804	; 0xd614
 8003d78:	f7fc ff48 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 8003d7c:	2182      	movs	r1, #130	; 0x82
 8003d7e:	f24d 6015 	movw	r0, #54805	; 0xd615
 8003d82:	f7fc ff43 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 8003d86:	2101      	movs	r1, #1
 8003d88:	f24d 6016 	movw	r0, #54806	; 0xd616
 8003d8c:	f7fc ff3e 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8003d90:	21ca      	movs	r1, #202	; 0xca
 8003d92:	f24d 6017 	movw	r0, #54807	; 0xd617
 8003d96:	f7fc ff39 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 8003d9a:	2102      	movs	r1, #2
 8003d9c:	f24d 6018 	movw	r0, #54808	; 0xd618
 8003da0:	f7fc ff34 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 8003da4:	2100      	movs	r1, #0
 8003da6:	f24d 6019 	movw	r0, #54809	; 0xd619
 8003daa:	f7fc ff2f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 8003dae:	2102      	movs	r1, #2
 8003db0:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8003db4:	f7fc ff2a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8003db8:	2101      	movs	r1, #1
 8003dba:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8003dbe:	f7fc ff25 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8003dc8:	f7fc ff20 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 8003dcc:	2134      	movs	r1, #52	; 0x34
 8003dce:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8003dd2:	f7fc ff1b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 8003dd6:	2102      	movs	r1, #2
 8003dd8:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8003ddc:	f7fc ff16 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8003de0:	2167      	movs	r1, #103	; 0x67
 8003de2:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8003de6:	f7fc ff11 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 8003dea:	2102      	movs	r1, #2
 8003dec:	f24d 6020 	movw	r0, #54816	; 0xd620
 8003df0:	f7fc ff0c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 8003df4:	2184      	movs	r1, #132	; 0x84
 8003df6:	f24d 6021 	movw	r0, #54817	; 0xd621
 8003dfa:	f7fc ff07 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 8003dfe:	2102      	movs	r1, #2
 8003e00:	f24d 6022 	movw	r0, #54818	; 0xd622
 8003e04:	f7fc ff02 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 8003e08:	21a4      	movs	r1, #164	; 0xa4
 8003e0a:	f24d 6023 	movw	r0, #54819	; 0xd623
 8003e0e:	f7fc fefd 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 8003e12:	2102      	movs	r1, #2
 8003e14:	f24d 6024 	movw	r0, #54820	; 0xd624
 8003e18:	f7fc fef8 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 8003e1c:	21b7      	movs	r1, #183	; 0xb7
 8003e1e:	f24d 6025 	movw	r0, #54821	; 0xd625
 8003e22:	f7fc fef3 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 8003e26:	2102      	movs	r1, #2
 8003e28:	f24d 6026 	movw	r0, #54822	; 0xd626
 8003e2c:	f7fc feee 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 8003e30:	21cf      	movs	r1, #207	; 0xcf
 8003e32:	f24d 6027 	movw	r0, #54823	; 0xd627
 8003e36:	f7fc fee9 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 8003e3a:	2102      	movs	r1, #2
 8003e3c:	f24d 6028 	movw	r0, #54824	; 0xd628
 8003e40:	f7fc fee4 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 8003e44:	21de      	movs	r1, #222	; 0xde
 8003e46:	f24d 6029 	movw	r0, #54825	; 0xd629
 8003e4a:	f7fc fedf 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 8003e4e:	2102      	movs	r1, #2
 8003e50:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8003e54:	f7fc feda 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8003e58:	21f2      	movs	r1, #242	; 0xf2
 8003e5a:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8003e5e:	f7fc fed5 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 8003e62:	2102      	movs	r1, #2
 8003e64:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8003e68:	f7fc fed0 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 8003e6c:	21fe      	movs	r1, #254	; 0xfe
 8003e6e:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8003e72:	f7fc fecb 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 8003e76:	2103      	movs	r1, #3
 8003e78:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8003e7c:	f7fc fec6 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8003e80:	2110      	movs	r1, #16
 8003e82:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8003e86:	f7fc fec1 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 8003e8a:	2103      	movs	r1, #3
 8003e8c:	f24d 6030 	movw	r0, #54832	; 0xd630
 8003e90:	f7fc febc 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 8003e94:	2133      	movs	r1, #51	; 0x33
 8003e96:	f24d 6031 	movw	r0, #54833	; 0xd631
 8003e9a:	f7fc feb7 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 8003e9e:	2103      	movs	r1, #3
 8003ea0:	f24d 6032 	movw	r0, #54834	; 0xd632
 8003ea4:	f7fc feb2 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8003ea8:	216d      	movs	r1, #109	; 0x6d
 8003eaa:	f24d 6033 	movw	r0, #54835	; 0xd633
 8003eae:	f7fc fead 	bl	8000c0c <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 8003eb2:	2155      	movs	r1, #85	; 0x55
 8003eb4:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003eb8:	f7fc fea8 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8003ebc:	21aa      	movs	r1, #170	; 0xaa
 8003ebe:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003ec2:	f7fc fea3 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8003ec6:	2152      	movs	r1, #82	; 0x52
 8003ec8:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003ecc:	f7fc fe9e 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8003ed0:	2108      	movs	r1, #8
 8003ed2:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003ed6:	f7fc fe99 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 8003eda:	2100      	movs	r1, #0
 8003edc:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003ee0:	f7fc fe94 	bl	8000c0c <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8003ee4:	21cc      	movs	r1, #204	; 0xcc
 8003ee6:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003eea:	f7fc fe8f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8003eee:	2100      	movs	r1, #0
 8003ef0:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003ef4:	f7fc fe8a 	bl	8000c0c <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 8003ef8:	2105      	movs	r1, #5
 8003efa:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003efe:	f7fc fe85 	bl	8000c0c <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 8003f02:	2170      	movs	r1, #112	; 0x70
 8003f04:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003f08:	f7fc fe80 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 8003f0c:	2170      	movs	r1, #112	; 0x70
 8003f0e:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003f12:	f7fc fe7b 	bl	8000c0c <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 8003f16:	2101      	movs	r1, #1
 8003f18:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003f1c:	f7fc fe76 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 8003f20:	2103      	movs	r1, #3
 8003f22:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003f26:	f7fc fe71 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 8003f2a:	2103      	movs	r1, #3
 8003f2c:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003f30:	f7fc fe6c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 8003f34:	2103      	movs	r1, #3
 8003f36:	f64b 0003 	movw	r0, #47107	; 0xb803
 8003f3a:	f7fc fe67 	bl	8000c0c <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 8003f3e:	2102      	movs	r1, #2
 8003f40:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003f44:	f7fc fe62 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 8003f48:	2100      	movs	r1, #0
 8003f4a:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003f4e:	f7fc fe5d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8003f52:	2100      	movs	r1, #0
 8003f54:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003f58:	f7fc fe58 	bl	8000c0c <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 8003f5c:	21d0      	movs	r1, #208	; 0xd0
 8003f5e:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8003f62:	f7fc fe53 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 8003f66:	2102      	movs	r1, #2
 8003f68:	f64c 1001 	movw	r0, #51457	; 0xc901
 8003f6c:	f7fc fe4e 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8003f70:	2150      	movs	r1, #80	; 0x50
 8003f72:	f64c 1002 	movw	r0, #51458	; 0xc902
 8003f76:	f7fc fe49 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 8003f7a:	2150      	movs	r1, #80	; 0x50
 8003f7c:	f64c 1003 	movw	r0, #51459	; 0xc903
 8003f80:	f7fc fe44 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 8003f84:	2150      	movs	r1, #80	; 0x50
 8003f86:	f64c 1004 	movw	r0, #51460	; 0xc904
 8003f8a:	f7fc fe3f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 8003f8e:	2100      	movs	r1, #0
 8003f90:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8003f94:	f7fc fe3a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8003f98:	2155      	movs	r1, #85	; 0x55
 8003f9a:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8003f9e:	f7fc fe35 	bl	8000c0c <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8003fa2:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8003fa6:	f7fc fda5 	bl	8000af4 <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 8003faa:	2001      	movs	r0, #1
 8003fac:	f001 ff12 	bl	8005dd4 <HAL_Delay>
		LCD_WR_REG(0x2900);
 8003fb0:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8003fb4:	f7fc fd9e 	bl	8000af4 <LCD_WR_REG>
 8003fb8:	f001 bd18 	b.w	80059ec <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 8003fbc:	4bec      	ldr	r3, [pc, #944]	; (8004370 <LCD_Init+0x27b8>)
 8003fbe:	889b      	ldrh	r3, [r3, #4]
 8003fc0:	f249 3225 	movw	r2, #37669	; 0x9325
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	f040 80d7 	bne.w	8004178 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 8003fca:	f647 01f0 	movw	r1, #30960	; 0x78f0
 8003fce:	20e5      	movs	r0, #229	; 0xe5
 8003fd0:	f7fc fe1c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 8003fd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003fd8:	2001      	movs	r0, #1
 8003fda:	f7fc fe17 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8003fde:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003fe2:	2002      	movs	r0, #2
 8003fe4:	f7fc fe12 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8003fe8:	f241 0130 	movw	r1, #4144	; 0x1030
 8003fec:	2003      	movs	r0, #3
 8003fee:	f7fc fe0d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	2004      	movs	r0, #4
 8003ff6:	f7fc fe09 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8003ffa:	f240 2102 	movw	r1, #514	; 0x202
 8003ffe:	2008      	movs	r0, #8
 8004000:	f7fc fe04 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8004004:	2100      	movs	r1, #0
 8004006:	2009      	movs	r0, #9
 8004008:	f7fc fe00 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 800400c:	2100      	movs	r1, #0
 800400e:	200a      	movs	r0, #10
 8004010:	f7fc fdfc 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004014:	2100      	movs	r1, #0
 8004016:	200c      	movs	r0, #12
 8004018:	f7fc fdf8 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 800401c:	2100      	movs	r1, #0
 800401e:	200d      	movs	r0, #13
 8004020:	f7fc fdf4 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004024:	2100      	movs	r1, #0
 8004026:	200f      	movs	r0, #15
 8004028:	f7fc fdf0 	bl	8000c0c <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 800402c:	2100      	movs	r1, #0
 800402e:	2010      	movs	r0, #16
 8004030:	f7fc fdec 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004034:	2107      	movs	r1, #7
 8004036:	2011      	movs	r0, #17
 8004038:	f7fc fde8 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 800403c:	2100      	movs	r1, #0
 800403e:	2012      	movs	r0, #18
 8004040:	f7fc fde4 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004044:	2100      	movs	r1, #0
 8004046:	2013      	movs	r0, #19
 8004048:	f7fc fde0 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 800404c:	2100      	movs	r1, #0
 800404e:	2007      	movs	r0, #7
 8004050:	f7fc fddc 	bl	8000c0c <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 8004054:	f241 6190 	movw	r1, #5776	; 0x1690
 8004058:	2010      	movs	r0, #16
 800405a:	f7fc fdd7 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 800405e:	f240 2127 	movw	r1, #551	; 0x227
 8004062:	2011      	movs	r0, #17
 8004064:	f7fc fdd2 	bl	8000c0c <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8004068:	219d      	movs	r1, #157	; 0x9d
 800406a:	2012      	movs	r0, #18
 800406c:	f7fc fdce 	bl	8000c0c <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8004070:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8004074:	2013      	movs	r0, #19
 8004076:	f7fc fdc9 	bl	8000c0c <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 800407a:	2125      	movs	r1, #37	; 0x25
 800407c:	2029      	movs	r0, #41	; 0x29
 800407e:	f7fc fdc5 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 8004082:	210d      	movs	r1, #13
 8004084:	202b      	movs	r0, #43	; 0x2b
 8004086:	f7fc fdc1 	bl	8000c0c <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 800408a:	2107      	movs	r1, #7
 800408c:	2030      	movs	r0, #48	; 0x30
 800408e:	f7fc fdbd 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 8004092:	f240 3103 	movw	r1, #771	; 0x303
 8004096:	2031      	movs	r0, #49	; 0x31
 8004098:	f7fc fdb8 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 800409c:	2103      	movs	r1, #3
 800409e:	2032      	movs	r0, #50	; 0x32
 80040a0:	f7fc fdb4 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 80040a4:	f240 2106 	movw	r1, #518	; 0x206
 80040a8:	2035      	movs	r0, #53	; 0x35
 80040aa:	f7fc fdaf 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 80040ae:	2108      	movs	r1, #8
 80040b0:	2036      	movs	r0, #54	; 0x36
 80040b2:	f7fc fdab 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 80040b6:	f240 4106 	movw	r1, #1030	; 0x406
 80040ba:	2037      	movs	r0, #55	; 0x37
 80040bc:	f7fc fda6 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 80040c0:	f44f 7141 	mov.w	r1, #772	; 0x304
 80040c4:	2038      	movs	r0, #56	; 0x38
 80040c6:	f7fc fda1 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 80040ca:	2107      	movs	r1, #7
 80040cc:	2039      	movs	r0, #57	; 0x39
 80040ce:	f7fc fd9d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 80040d2:	f240 6102 	movw	r1, #1538	; 0x602
 80040d6:	203c      	movs	r0, #60	; 0x3c
 80040d8:	f7fc fd98 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 80040dc:	2108      	movs	r1, #8
 80040de:	203d      	movs	r0, #61	; 0x3d
 80040e0:	f7fc fd94 	bl	8000c0c <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 80040e4:	2100      	movs	r1, #0
 80040e6:	2050      	movs	r0, #80	; 0x50
 80040e8:	f7fc fd90 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 80040ec:	21ef      	movs	r1, #239	; 0xef
 80040ee:	2051      	movs	r0, #81	; 0x51
 80040f0:	f7fc fd8c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80040f4:	2100      	movs	r1, #0
 80040f6:	2052      	movs	r0, #82	; 0x52
 80040f8:	f7fc fd88 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80040fc:	f240 113f 	movw	r1, #319	; 0x13f
 8004100:	2053      	movs	r0, #83	; 0x53
 8004102:	f7fc fd83 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 8004106:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 800410a:	2060      	movs	r0, #96	; 0x60
 800410c:	f7fc fd7e 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004110:	2101      	movs	r1, #1
 8004112:	2061      	movs	r0, #97	; 0x61
 8004114:	f7fc fd7a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004118:	2100      	movs	r1, #0
 800411a:	206a      	movs	r0, #106	; 0x6a
 800411c:	f7fc fd76 	bl	8000c0c <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 8004120:	2100      	movs	r1, #0
 8004122:	2080      	movs	r0, #128	; 0x80
 8004124:	f7fc fd72 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004128:	2100      	movs	r1, #0
 800412a:	2081      	movs	r0, #129	; 0x81
 800412c:	f7fc fd6e 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004130:	2100      	movs	r1, #0
 8004132:	2082      	movs	r0, #130	; 0x82
 8004134:	f7fc fd6a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004138:	2100      	movs	r1, #0
 800413a:	2083      	movs	r0, #131	; 0x83
 800413c:	f7fc fd66 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004140:	2100      	movs	r1, #0
 8004142:	2084      	movs	r0, #132	; 0x84
 8004144:	f7fc fd62 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004148:	2100      	movs	r1, #0
 800414a:	2085      	movs	r0, #133	; 0x85
 800414c:	f7fc fd5e 	bl	8000c0c <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8004150:	2110      	movs	r1, #16
 8004152:	2090      	movs	r0, #144	; 0x90
 8004154:	f7fc fd5a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004158:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800415c:	2092      	movs	r0, #146	; 0x92
 800415e:	f7fc fd55 	bl	8000c0c <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 8004162:	f240 1133 	movw	r1, #307	; 0x133
 8004166:	2007      	movs	r0, #7
 8004168:	f7fc fd50 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 800416c:	2122      	movs	r1, #34	; 0x22
 800416e:	2000      	movs	r0, #0
 8004170:	f7fc fd4c 	bl	8000c0c <LCD_WriteReg>
 8004174:	f001 bc3a 	b.w	80059ec <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8004178:	4b7d      	ldr	r3, [pc, #500]	; (8004370 <LCD_Init+0x27b8>)
 800417a:	889b      	ldrh	r3, [r3, #4]
 800417c:	f249 3228 	movw	r2, #37672	; 0x9328
 8004180:	4293      	cmp	r3, r2
 8004182:	f040 80f7 	bne.w	8004374 <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 8004186:	f241 018f 	movw	r1, #4239	; 0x108f
 800418a:	20ec      	movs	r0, #236	; 0xec
 800418c:	f7fc fd3e 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8004190:	f241 2134 	movw	r1, #4660	; 0x1234
 8004194:	20ef      	movs	r0, #239	; 0xef
 8004196:	f7fc fd39 	bl	8000c0c <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 800419a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800419e:	2001      	movs	r0, #1
 80041a0:	f7fc fd34 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 80041a4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80041a8:	2002      	movs	r0, #2
 80041aa:	f7fc fd2f 	bl	8000c0c <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 80041ae:	f241 0130 	movw	r1, #4144	; 0x1030
 80041b2:	2003      	movs	r0, #3
 80041b4:	f7fc fd2a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80041b8:	2100      	movs	r1, #0
 80041ba:	2004      	movs	r0, #4
 80041bc:	f7fc fd26 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80041c0:	f240 2102 	movw	r1, #514	; 0x202
 80041c4:	2008      	movs	r0, #8
 80041c6:	f7fc fd21 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80041ca:	2100      	movs	r1, #0
 80041cc:	2009      	movs	r0, #9
 80041ce:	f7fc fd1d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 80041d2:	2100      	movs	r1, #0
 80041d4:	200a      	movs	r0, #10
 80041d6:	f7fc fd19 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 80041da:	2101      	movs	r1, #1
 80041dc:	200c      	movs	r0, #12
 80041de:	f7fc fd15 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 80041e2:	2100      	movs	r1, #0
 80041e4:	200d      	movs	r0, #13
 80041e6:	f7fc fd11 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 80041ea:	2100      	movs	r1, #0
 80041ec:	200f      	movs	r0, #15
 80041ee:	f7fc fd0d 	bl	8000c0c <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 80041f2:	2100      	movs	r1, #0
 80041f4:	2010      	movs	r0, #16
 80041f6:	f7fc fd09 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80041fa:	2107      	movs	r1, #7
 80041fc:	2011      	movs	r0, #17
 80041fe:	f7fc fd05 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004202:	2100      	movs	r1, #0
 8004204:	2012      	movs	r0, #18
 8004206:	f7fc fd01 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 800420a:	2100      	movs	r1, #0
 800420c:	2013      	movs	r0, #19
 800420e:	f7fc fcfd 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 8004212:	2101      	movs	r1, #1
 8004214:	2007      	movs	r0, #7
 8004216:	f7fc fcf9 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(50);
 800421a:	2032      	movs	r0, #50	; 0x32
 800421c:	f001 fdda 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 8004220:	f241 4190 	movw	r1, #5264	; 0x1490
 8004224:	2010      	movs	r0, #16
 8004226:	f7fc fcf1 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 800422a:	f240 2127 	movw	r1, #551	; 0x227
 800422e:	2011      	movs	r0, #17
 8004230:	f7fc fcec 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(50);
 8004234:	2032      	movs	r0, #50	; 0x32
 8004236:	f001 fdcd 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 800423a:	218a      	movs	r1, #138	; 0x8a
 800423c:	2012      	movs	r0, #18
 800423e:	f7fc fce5 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(50);
 8004242:	2032      	movs	r0, #50	; 0x32
 8004244:	f001 fdc6 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 8004248:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 800424c:	2013      	movs	r0, #19
 800424e:	f7fc fcdd 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 8004252:	2106      	movs	r1, #6
 8004254:	2029      	movs	r0, #41	; 0x29
 8004256:	f7fc fcd9 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 800425a:	210d      	movs	r1, #13
 800425c:	202b      	movs	r0, #43	; 0x2b
 800425e:	f7fc fcd5 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(50);
 8004262:	2032      	movs	r0, #50	; 0x32
 8004264:	f001 fdb6 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8004268:	2100      	movs	r1, #0
 800426a:	2020      	movs	r0, #32
 800426c:	f7fc fcce 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004270:	2100      	movs	r1, #0
 8004272:	2021      	movs	r0, #33	; 0x21
 8004274:	f7fc fcca 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(50);
 8004278:	2032      	movs	r0, #50	; 0x32
 800427a:	f001 fdab 	bl	8005dd4 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 800427e:	2100      	movs	r1, #0
 8004280:	2030      	movs	r0, #48	; 0x30
 8004282:	f7fc fcc3 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 8004286:	f240 6104 	movw	r1, #1540	; 0x604
 800428a:	2031      	movs	r0, #49	; 0x31
 800428c:	f7fc fcbe 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8004290:	f240 3105 	movw	r1, #773	; 0x305
 8004294:	2032      	movs	r0, #50	; 0x32
 8004296:	f7fc fcb9 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 800429a:	2100      	movs	r1, #0
 800429c:	2035      	movs	r0, #53	; 0x35
 800429e:	f7fc fcb5 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 80042a2:	f640 4109 	movw	r1, #3081	; 0xc09
 80042a6:	2036      	movs	r0, #54	; 0x36
 80042a8:	f7fc fcb0 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 80042ac:	f44f 7101 	mov.w	r1, #516	; 0x204
 80042b0:	2037      	movs	r0, #55	; 0x37
 80042b2:	f7fc fcab 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 80042b6:	f240 3101 	movw	r1, #769	; 0x301
 80042ba:	2038      	movs	r0, #56	; 0x38
 80042bc:	f7fc fca6 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 80042c0:	f240 7107 	movw	r1, #1799	; 0x707
 80042c4:	2039      	movs	r0, #57	; 0x39
 80042c6:	f7fc fca1 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 80042ca:	2100      	movs	r1, #0
 80042cc:	203c      	movs	r0, #60	; 0x3c
 80042ce:	f7fc fc9d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 80042d2:	f640 210a 	movw	r1, #2570	; 0xa0a
 80042d6:	203d      	movs	r0, #61	; 0x3d
 80042d8:	f7fc fc98 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(50);
 80042dc:	2032      	movs	r0, #50	; 0x32
 80042de:	f001 fd79 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 80042e2:	2100      	movs	r1, #0
 80042e4:	2050      	movs	r0, #80	; 0x50
 80042e6:	f7fc fc91 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 80042ea:	21ef      	movs	r1, #239	; 0xef
 80042ec:	2051      	movs	r0, #81	; 0x51
 80042ee:	f7fc fc8d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 80042f2:	2100      	movs	r1, #0
 80042f4:	2052      	movs	r0, #82	; 0x52
 80042f6:	f7fc fc89 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 80042fa:	f240 113f 	movw	r1, #319	; 0x13f
 80042fe:	2053      	movs	r0, #83	; 0x53
 8004300:	f7fc fc84 	bl	8000c0c <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 8004304:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004308:	2060      	movs	r0, #96	; 0x60
 800430a:	f7fc fc7f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 800430e:	2101      	movs	r1, #1
 8004310:	2061      	movs	r0, #97	; 0x61
 8004312:	f7fc fc7b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8004316:	2100      	movs	r1, #0
 8004318:	206a      	movs	r0, #106	; 0x6a
 800431a:	f7fc fc77 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 800431e:	2100      	movs	r1, #0
 8004320:	2080      	movs	r0, #128	; 0x80
 8004322:	f7fc fc73 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004326:	2100      	movs	r1, #0
 8004328:	2081      	movs	r0, #129	; 0x81
 800432a:	f7fc fc6f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 800432e:	2100      	movs	r1, #0
 8004330:	2082      	movs	r0, #130	; 0x82
 8004332:	f7fc fc6b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004336:	2100      	movs	r1, #0
 8004338:	2083      	movs	r0, #131	; 0x83
 800433a:	f7fc fc67 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 800433e:	2100      	movs	r1, #0
 8004340:	2084      	movs	r0, #132	; 0x84
 8004342:	f7fc fc63 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004346:	2100      	movs	r1, #0
 8004348:	2085      	movs	r0, #133	; 0x85
 800434a:	f7fc fc5f 	bl	8000c0c <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 800434e:	2110      	movs	r1, #16
 8004350:	2090      	movs	r0, #144	; 0x90
 8004352:	f7fc fc5b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004356:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800435a:	2092      	movs	r0, #146	; 0x92
 800435c:	f7fc fc56 	bl	8000c0c <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8004360:	f240 1133 	movw	r1, #307	; 0x133
 8004364:	2007      	movs	r0, #7
 8004366:	f7fc fc51 	bl	8000c0c <LCD_WriteReg>
 800436a:	f001 bb3f 	b.w	80059ec <LCD_Init+0x3e34>
 800436e:	bf00      	nop
 8004370:	20000028 	.word	0x20000028
	} else if (lcddev.id == 0x9320) //测试OK.
 8004374:	4bce      	ldr	r3, [pc, #824]	; (80046b0 <LCD_Init+0x2af8>)
 8004376:	889b      	ldrh	r3, [r3, #4]
 8004378:	f249 3220 	movw	r2, #37664	; 0x9320
 800437c:	4293      	cmp	r3, r2
 800437e:	f040 80ad 	bne.w	80044dc <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 8004382:	2100      	movs	r1, #0
 8004384:	2000      	movs	r0, #0
 8004386:	f7fc fc41 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 800438a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800438e:	2001      	movs	r0, #1
 8004390:	f7fc fc3c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 8004394:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004398:	2002      	movs	r0, #2
 800439a:	f7fc fc37 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 800439e:	f241 0130 	movw	r1, #4144	; 0x1030
 80043a2:	2003      	movs	r0, #3
 80043a4:	f7fc fc32 	bl	8000c0c <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 80043a8:	2100      	movs	r1, #0
 80043aa:	2004      	movs	r0, #4
 80043ac:	f7fc fc2e 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 80043b0:	f240 2102 	movw	r1, #514	; 0x202
 80043b4:	2008      	movs	r0, #8
 80043b6:	f7fc fc29 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 80043ba:	2100      	movs	r1, #0
 80043bc:	2009      	movs	r0, #9
 80043be:	f7fc fc25 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 80043c2:	2100      	movs	r1, #0
 80043c4:	200a      	movs	r0, #10
 80043c6:	f7fc fc21 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 80043ca:	2101      	movs	r1, #1
 80043cc:	200c      	movs	r0, #12
 80043ce:	f7fc fc1d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 80043d2:	2100      	movs	r1, #0
 80043d4:	200d      	movs	r0, #13
 80043d6:	f7fc fc19 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 80043da:	2100      	movs	r1, #0
 80043dc:	200f      	movs	r0, #15
 80043de:	f7fc fc15 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(50);
 80043e2:	2032      	movs	r0, #50	; 0x32
 80043e4:	f001 fcf6 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 80043e8:	f240 1101 	movw	r1, #257	; 0x101
 80043ec:	2007      	movs	r0, #7
 80043ee:	f7fc fc0d 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(50);
 80043f2:	2032      	movs	r0, #50	; 0x32
 80043f4:	f001 fcee 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 80043f8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80043fc:	2010      	movs	r0, #16
 80043fe:	f7fc fc05 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 8004402:	2107      	movs	r1, #7
 8004404:	2011      	movs	r0, #17
 8004406:	f7fc fc01 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 800440a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800440e:	2012      	movs	r0, #18
 8004410:	f7fc fbfc 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 8004414:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8004418:	2013      	movs	r0, #19
 800441a:	f7fc fbf7 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 800441e:	2100      	movs	r1, #0
 8004420:	2029      	movs	r0, #41	; 0x29
 8004422:	f7fc fbf3 	bl	8000c0c <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 8004426:	f244 0110 	movw	r1, #16400	; 0x4010
 800442a:	202b      	movs	r0, #43	; 0x2b
 800442c:	f7fc fbee 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 8004430:	2100      	movs	r1, #0
 8004432:	2050      	movs	r0, #80	; 0x50
 8004434:	f7fc fbea 	bl	8000c0c <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 8004438:	21ef      	movs	r1, #239	; 0xef
 800443a:	2051      	movs	r0, #81	; 0x51
 800443c:	f7fc fbe6 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8004440:	2100      	movs	r1, #0
 8004442:	2052      	movs	r0, #82	; 0x52
 8004444:	f7fc fbe2 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 8004448:	f240 113f 	movw	r1, #319	; 0x13f
 800444c:	2053      	movs	r0, #83	; 0x53
 800444e:	f7fc fbdd 	bl	8000c0c <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 8004452:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004456:	2060      	movs	r0, #96	; 0x60
 8004458:	f7fc fbd8 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 800445c:	2101      	movs	r1, #1
 800445e:	2061      	movs	r0, #97	; 0x61
 8004460:	f7fc fbd4 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 8004464:	2100      	movs	r1, #0
 8004466:	206a      	movs	r0, #106	; 0x6a
 8004468:	f7fc fbd0 	bl	8000c0c <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 800446c:	2100      	movs	r1, #0
 800446e:	2080      	movs	r0, #128	; 0x80
 8004470:	f7fc fbcc 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 8004474:	2100      	movs	r1, #0
 8004476:	2081      	movs	r0, #129	; 0x81
 8004478:	f7fc fbc8 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 800447c:	2100      	movs	r1, #0
 800447e:	2082      	movs	r0, #130	; 0x82
 8004480:	f7fc fbc4 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 8004484:	2100      	movs	r1, #0
 8004486:	2083      	movs	r0, #131	; 0x83
 8004488:	f7fc fbc0 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 800448c:	2100      	movs	r1, #0
 800448e:	2084      	movs	r0, #132	; 0x84
 8004490:	f7fc fbbc 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 8004494:	2100      	movs	r1, #0
 8004496:	2085      	movs	r0, #133	; 0x85
 8004498:	f7fc fbb8 	bl	8000c0c <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 800449c:	2110      	movs	r1, #16
 800449e:	2090      	movs	r0, #144	; 0x90
 80044a0:	f7fc fbb4 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 80044a4:	2100      	movs	r1, #0
 80044a6:	2092      	movs	r0, #146	; 0x92
 80044a8:	f7fc fbb0 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 80044ac:	2101      	movs	r1, #1
 80044ae:	2093      	movs	r0, #147	; 0x93
 80044b0:	f7fc fbac 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 80044b4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80044b8:	2095      	movs	r0, #149	; 0x95
 80044ba:	f7fc fba7 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 80044be:	2100      	movs	r1, #0
 80044c0:	2097      	movs	r0, #151	; 0x97
 80044c2:	f7fc fba3 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 80044c6:	2100      	movs	r1, #0
 80044c8:	2098      	movs	r0, #152	; 0x98
 80044ca:	f7fc fb9f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 80044ce:	f240 1173 	movw	r1, #371	; 0x173
 80044d2:	2007      	movs	r0, #7
 80044d4:	f7fc fb9a 	bl	8000c0c <LCD_WriteReg>
 80044d8:	f001 ba88 	b.w	80059ec <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 80044dc:	4b74      	ldr	r3, [pc, #464]	; (80046b0 <LCD_Init+0x2af8>)
 80044de:	889b      	ldrh	r3, [r3, #4]
 80044e0:	f249 3231 	movw	r2, #37681	; 0x9331
 80044e4:	4293      	cmp	r3, r2
 80044e6:	f040 80e5 	bne.w	80046b4 <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 80044ea:	f241 0114 	movw	r1, #4116	; 0x1014
 80044ee:	20e7      	movs	r0, #231	; 0xe7
 80044f0:	f7fc fb8c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 80044f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044f8:	2001      	movs	r0, #1
 80044fa:	f7fc fb87 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 80044fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004502:	2002      	movs	r0, #2
 8004504:	f7fc fb82 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8004508:	f241 0138 	movw	r1, #4152	; 0x1038
 800450c:	2003      	movs	r0, #3
 800450e:	f7fc fb7d 	bl	8000c0c <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8004512:	f240 2102 	movw	r1, #514	; 0x202
 8004516:	2008      	movs	r0, #8
 8004518:	f7fc fb78 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 800451c:	2100      	movs	r1, #0
 800451e:	2009      	movs	r0, #9
 8004520:	f7fc fb74 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8004524:	2100      	movs	r1, #0
 8004526:	200a      	movs	r0, #10
 8004528:	f7fc fb70 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 800452c:	2100      	movs	r1, #0
 800452e:	200c      	movs	r0, #12
 8004530:	f7fc fb6c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8004534:	2100      	movs	r1, #0
 8004536:	200d      	movs	r0, #13
 8004538:	f7fc fb68 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 800453c:	2100      	movs	r1, #0
 800453e:	200f      	movs	r0, #15
 8004540:	f7fc fb64 	bl	8000c0c <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004544:	2100      	movs	r1, #0
 8004546:	2010      	movs	r0, #16
 8004548:	f7fc fb60 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 800454c:	2107      	movs	r1, #7
 800454e:	2011      	movs	r0, #17
 8004550:	f7fc fb5c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8004554:	2100      	movs	r1, #0
 8004556:	2012      	movs	r0, #18
 8004558:	f7fc fb58 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 800455c:	2100      	movs	r1, #0
 800455e:	2013      	movs	r0, #19
 8004560:	f7fc fb54 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8004564:	20c8      	movs	r0, #200	; 0xc8
 8004566:	f001 fc35 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 800456a:	f241 6190 	movw	r1, #5776	; 0x1690
 800456e:	2010      	movs	r0, #16
 8004570:	f7fc fb4c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8004574:	f240 2127 	movw	r1, #551	; 0x227
 8004578:	2011      	movs	r0, #17
 800457a:	f7fc fb47 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800457e:	2032      	movs	r0, #50	; 0x32
 8004580:	f001 fc28 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8004584:	210c      	movs	r1, #12
 8004586:	2012      	movs	r0, #18
 8004588:	f7fc fb40 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800458c:	2032      	movs	r0, #50	; 0x32
 800458e:	f001 fc21 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8004592:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004596:	2013      	movs	r0, #19
 8004598:	f7fc fb38 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 800459c:	2111      	movs	r1, #17
 800459e:	2029      	movs	r0, #41	; 0x29
 80045a0:	f7fc fb34 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 80045a4:	210b      	movs	r1, #11
 80045a6:	202b      	movs	r0, #43	; 0x2b
 80045a8:	f7fc fb30 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80045ac:	2032      	movs	r0, #50	; 0x32
 80045ae:	f001 fc11 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 80045b2:	2100      	movs	r1, #0
 80045b4:	2020      	movs	r0, #32
 80045b6:	f7fc fb29 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 80045ba:	f240 113f 	movw	r1, #319	; 0x13f
 80045be:	2021      	movs	r0, #33	; 0x21
 80045c0:	f7fc fb24 	bl	8000c0c <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 80045c4:	2100      	movs	r1, #0
 80045c6:	2030      	movs	r0, #48	; 0x30
 80045c8:	f7fc fb20 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 80045cc:	f44f 7183 	mov.w	r1, #262	; 0x106
 80045d0:	2031      	movs	r0, #49	; 0x31
 80045d2:	f7fc fb1b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 80045d6:	2100      	movs	r1, #0
 80045d8:	2032      	movs	r0, #50	; 0x32
 80045da:	f7fc fb17 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80045de:	f44f 7101 	mov.w	r1, #516	; 0x204
 80045e2:	2035      	movs	r0, #53	; 0x35
 80045e4:	f7fc fb12 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 80045e8:	f241 610a 	movw	r1, #5642	; 0x160a
 80045ec:	2036      	movs	r0, #54	; 0x36
 80045ee:	f7fc fb0d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 80045f2:	f240 7107 	movw	r1, #1799	; 0x707
 80045f6:	2037      	movs	r0, #55	; 0x37
 80045f8:	f7fc fb08 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 80045fc:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004600:	2038      	movs	r0, #56	; 0x38
 8004602:	f7fc fb03 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004606:	f240 7107 	movw	r1, #1799	; 0x707
 800460a:	2039      	movs	r0, #57	; 0x39
 800460c:	f7fc fafe 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8004610:	f240 4102 	movw	r1, #1026	; 0x402
 8004614:	203c      	movs	r0, #60	; 0x3c
 8004616:	f7fc faf9 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 800461a:	f640 410f 	movw	r1, #3087	; 0xc0f
 800461e:	203d      	movs	r0, #61	; 0x3d
 8004620:	f7fc faf4 	bl	8000c0c <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8004624:	2100      	movs	r1, #0
 8004626:	2050      	movs	r0, #80	; 0x50
 8004628:	f7fc faf0 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 800462c:	21ef      	movs	r1, #239	; 0xef
 800462e:	2051      	movs	r0, #81	; 0x51
 8004630:	f7fc faec 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8004634:	2100      	movs	r1, #0
 8004636:	2052      	movs	r0, #82	; 0x52
 8004638:	f7fc fae8 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 800463c:	f240 113f 	movw	r1, #319	; 0x13f
 8004640:	2053      	movs	r0, #83	; 0x53
 8004642:	f7fc fae3 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8004646:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800464a:	2060      	movs	r0, #96	; 0x60
 800464c:	f7fc fade 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8004650:	2101      	movs	r1, #1
 8004652:	2061      	movs	r0, #97	; 0x61
 8004654:	f7fc fada 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8004658:	2100      	movs	r1, #0
 800465a:	206a      	movs	r0, #106	; 0x6a
 800465c:	f7fc fad6 	bl	8000c0c <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8004660:	2100      	movs	r1, #0
 8004662:	2080      	movs	r0, #128	; 0x80
 8004664:	f7fc fad2 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004668:	2100      	movs	r1, #0
 800466a:	2081      	movs	r0, #129	; 0x81
 800466c:	f7fc face 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004670:	2100      	movs	r1, #0
 8004672:	2082      	movs	r0, #130	; 0x82
 8004674:	f7fc faca 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004678:	2100      	movs	r1, #0
 800467a:	2083      	movs	r0, #131	; 0x83
 800467c:	f7fc fac6 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004680:	2100      	movs	r1, #0
 8004682:	2084      	movs	r0, #132	; 0x84
 8004684:	f7fc fac2 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004688:	2100      	movs	r1, #0
 800468a:	2085      	movs	r0, #133	; 0x85
 800468c:	f7fc fabe 	bl	8000c0c <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8004690:	2110      	movs	r1, #16
 8004692:	2090      	movs	r0, #144	; 0x90
 8004694:	f7fc faba 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004698:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800469c:	2092      	movs	r0, #146	; 0x92
 800469e:	f7fc fab5 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 80046a2:	f240 1133 	movw	r1, #307	; 0x133
 80046a6:	2007      	movs	r0, #7
 80046a8:	f7fc fab0 	bl	8000c0c <LCD_WriteReg>
 80046ac:	f001 b99e 	b.w	80059ec <LCD_Init+0x3e34>
 80046b0:	20000028 	.word	0x20000028
	} else if (lcddev.id == 0x5408) {
 80046b4:	4be2      	ldr	r3, [pc, #904]	; (8004a40 <LCD_Init+0x2e88>)
 80046b6:	889b      	ldrh	r3, [r3, #4]
 80046b8:	f245 4208 	movw	r2, #21512	; 0x5408
 80046bc:	4293      	cmp	r3, r2
 80046be:	f040 80a3 	bne.w	8004808 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 80046c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046c6:	2001      	movs	r0, #1
 80046c8:	f7fc faa0 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 80046cc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80046d0:	2002      	movs	r0, #2
 80046d2:	f7fc fa9b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 80046d6:	f241 0130 	movw	r1, #4144	; 0x1030
 80046da:	2003      	movs	r0, #3
 80046dc:	f7fc fa96 	bl	8000c0c <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 80046e0:	2100      	movs	r1, #0
 80046e2:	2004      	movs	r0, #4
 80046e4:	f7fc fa92 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 80046e8:	f240 2107 	movw	r1, #519	; 0x207
 80046ec:	2008      	movs	r0, #8
 80046ee:	f7fc fa8d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 80046f2:	2100      	movs	r1, #0
 80046f4:	2009      	movs	r0, #9
 80046f6:	f7fc fa89 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 80046fa:	2100      	movs	r1, #0
 80046fc:	200a      	movs	r0, #10
 80046fe:	f7fc fa85 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8004702:	2100      	movs	r1, #0
 8004704:	200c      	movs	r0, #12
 8004706:	f7fc fa81 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 800470a:	2100      	movs	r1, #0
 800470c:	200d      	movs	r0, #13
 800470e:	f7fc fa7d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8004712:	2100      	movs	r1, #0
 8004714:	200f      	movs	r0, #15
 8004716:	f7fc fa79 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(20);
 800471a:	2014      	movs	r0, #20
 800471c:	f001 fb5a 	bl	8005dd4 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8004720:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8004724:	2010      	movs	r0, #16
 8004726:	f7fc fa71 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 800472a:	2101      	movs	r1, #1
 800472c:	2011      	movs	r0, #17
 800472e:	f7fc fa6d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8004732:	2101      	movs	r1, #1
 8004734:	2017      	movs	r0, #23
 8004736:	f7fc fa69 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 800473a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800473e:	2012      	movs	r0, #18
 8004740:	f7fc fa64 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8004744:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004748:	2013      	movs	r0, #19
 800474a:	f7fc fa5f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 800474e:	2109      	movs	r1, #9
 8004750:	2029      	movs	r0, #41	; 0x29
 8004752:	f7fc fa5b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8004756:	2109      	movs	r1, #9
 8004758:	202a      	movs	r0, #42	; 0x2a
 800475a:	f7fc fa57 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 800475e:	2100      	movs	r1, #0
 8004760:	20a4      	movs	r0, #164	; 0xa4
 8004762:	f7fc fa53 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8004766:	2100      	movs	r1, #0
 8004768:	2050      	movs	r0, #80	; 0x50
 800476a:	f7fc fa4f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 800476e:	21ef      	movs	r1, #239	; 0xef
 8004770:	2051      	movs	r0, #81	; 0x51
 8004772:	f7fc fa4b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8004776:	2100      	movs	r1, #0
 8004778:	2052      	movs	r0, #82	; 0x52
 800477a:	f7fc fa47 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 800477e:	f240 113f 	movw	r1, #319	; 0x13f
 8004782:	2053      	movs	r0, #83	; 0x53
 8004784:	f7fc fa42 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8004788:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800478c:	2060      	movs	r0, #96	; 0x60
 800478e:	f7fc fa3d 	bl	8000c0c <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8004792:	2101      	movs	r1, #1
 8004794:	2061      	movs	r0, #97	; 0x61
 8004796:	f7fc fa39 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 800479a:	2100      	movs	r1, #0
 800479c:	206a      	movs	r0, #106	; 0x6a
 800479e:	f7fc fa35 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 80047a2:	2100      	movs	r1, #0
 80047a4:	2080      	movs	r0, #128	; 0x80
 80047a6:	f7fc fa31 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 80047aa:	2100      	movs	r1, #0
 80047ac:	2081      	movs	r0, #129	; 0x81
 80047ae:	f7fc fa2d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 80047b2:	2100      	movs	r1, #0
 80047b4:	2082      	movs	r0, #130	; 0x82
 80047b6:	f7fc fa29 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 80047ba:	2100      	movs	r1, #0
 80047bc:	2083      	movs	r0, #131	; 0x83
 80047be:	f7fc fa25 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 80047c2:	2100      	movs	r1, #0
 80047c4:	2084      	movs	r0, #132	; 0x84
 80047c6:	f7fc fa21 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 80047ca:	2100      	movs	r1, #0
 80047cc:	2085      	movs	r0, #133	; 0x85
 80047ce:	f7fc fa1d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 80047d2:	2113      	movs	r1, #19
 80047d4:	2090      	movs	r0, #144	; 0x90
 80047d6:	f7fc fa19 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 80047da:	2100      	movs	r1, #0
 80047dc:	2092      	movs	r0, #146	; 0x92
 80047de:	f7fc fa15 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 80047e2:	2103      	movs	r1, #3
 80047e4:	2093      	movs	r0, #147	; 0x93
 80047e6:	f7fc fa11 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 80047ea:	f44f 7188 	mov.w	r1, #272	; 0x110
 80047ee:	2095      	movs	r0, #149	; 0x95
 80047f0:	f7fc fa0c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 80047f4:	f240 1173 	movw	r1, #371	; 0x173
 80047f8:	2007      	movs	r0, #7
 80047fa:	f7fc fa07 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(50);
 80047fe:	2032      	movs	r0, #50	; 0x32
 8004800:	f001 fae8 	bl	8005dd4 <HAL_Delay>
 8004804:	f001 b8f2 	b.w	80059ec <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004808:	4b8d      	ldr	r3, [pc, #564]	; (8004a40 <LCD_Init+0x2e88>)
 800480a:	889b      	ldrh	r3, [r3, #4]
 800480c:	f241 5205 	movw	r2, #5381	; 0x1505
 8004810:	4293      	cmp	r3, r2
 8004812:	f040 8117 	bne.w	8004a44 <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8004816:	2100      	movs	r1, #0
 8004818:	2007      	movs	r0, #7
 800481a:	f7fc f9f7 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(50);
 800481e:	2032      	movs	r0, #50	; 0x32
 8004820:	f001 fad8 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8004824:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004828:	2012      	movs	r0, #18
 800482a:	f7fc f9ef 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 800482e:	2101      	movs	r1, #1
 8004830:	20a4      	movs	r0, #164	; 0xa4
 8004832:	f7fc f9eb 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8004836:	210f      	movs	r1, #15
 8004838:	2008      	movs	r0, #8
 800483a:	f7fc f9e7 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 800483e:	2108      	movs	r1, #8
 8004840:	200a      	movs	r0, #10
 8004842:	f7fc f9e3 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8004846:	2108      	movs	r1, #8
 8004848:	200d      	movs	r0, #13
 800484a:	f7fc f9df 	bl	8000c0c <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 800484e:	f240 7107 	movw	r1, #1799	; 0x707
 8004852:	2030      	movs	r0, #48	; 0x30
 8004854:	f7fc f9da 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8004858:	2107      	movs	r1, #7
 800485a:	2031      	movs	r0, #49	; 0x31
 800485c:	f7fc f9d6 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8004860:	f240 6103 	movw	r1, #1539	; 0x603
 8004864:	2032      	movs	r0, #50	; 0x32
 8004866:	f7fc f9d1 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 800486a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800486e:	2033      	movs	r0, #51	; 0x33
 8004870:	f7fc f9cc 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8004874:	f240 2102 	movw	r1, #514	; 0x202
 8004878:	2034      	movs	r0, #52	; 0x34
 800487a:	f7fc f9c7 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 800487e:	2102      	movs	r1, #2
 8004880:	2035      	movs	r0, #53	; 0x35
 8004882:	f7fc f9c3 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8004886:	f641 710f 	movw	r1, #7951	; 0x1f0f
 800488a:	2036      	movs	r0, #54	; 0x36
 800488c:	f7fc f9be 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8004890:	f240 7107 	movw	r1, #1799	; 0x707
 8004894:	2037      	movs	r0, #55	; 0x37
 8004896:	f7fc f9b9 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 800489a:	2100      	movs	r1, #0
 800489c:	2038      	movs	r0, #56	; 0x38
 800489e:	f7fc f9b5 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 80048a2:	2100      	movs	r1, #0
 80048a4:	2039      	movs	r0, #57	; 0x39
 80048a6:	f7fc f9b1 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 80048aa:	f240 7107 	movw	r1, #1799	; 0x707
 80048ae:	203a      	movs	r0, #58	; 0x3a
 80048b0:	f7fc f9ac 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 80048b4:	2100      	movs	r1, #0
 80048b6:	203b      	movs	r0, #59	; 0x3b
 80048b8:	f7fc f9a8 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 80048bc:	2107      	movs	r1, #7
 80048be:	203c      	movs	r0, #60	; 0x3c
 80048c0:	f7fc f9a4 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 80048c4:	2100      	movs	r1, #0
 80048c6:	203d      	movs	r0, #61	; 0x3d
 80048c8:	f7fc f9a0 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(50);
 80048cc:	2032      	movs	r0, #50	; 0x32
 80048ce:	f001 fa81 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 80048d2:	2101      	movs	r1, #1
 80048d4:	2007      	movs	r0, #7
 80048d6:	f7fc f999 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 80048da:	2101      	movs	r1, #1
 80048dc:	2017      	movs	r0, #23
 80048de:	f7fc f995 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(50);
 80048e2:	2032      	movs	r0, #50	; 0x32
 80048e4:	f001 fa76 	bl	8005dd4 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 80048e8:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 80048ec:	2010      	movs	r0, #16
 80048ee:	f7fc f98d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 80048f2:	f240 2117 	movw	r1, #535	; 0x217
 80048f6:	2011      	movs	r0, #17
 80048f8:	f7fc f988 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 80048fc:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004900:	2012      	movs	r0, #18
 8004902:	f7fc f983 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004906:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800490a:	2013      	movs	r0, #19
 800490c:	f7fc f97e 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8004910:	2100      	movs	r1, #0
 8004912:	202a      	movs	r0, #42	; 0x2a
 8004914:	f7fc f97a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004918:	210a      	movs	r1, #10
 800491a:	2029      	movs	r0, #41	; 0x29
 800491c:	f7fc f976 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8004920:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004924:	2012      	movs	r0, #18
 8004926:	f7fc f971 	bl	8000c0c <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 800492a:	2100      	movs	r1, #0
 800492c:	2050      	movs	r0, #80	; 0x50
 800492e:	f7fc f96d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004932:	21ef      	movs	r1, #239	; 0xef
 8004934:	2051      	movs	r0, #81	; 0x51
 8004936:	f7fc f969 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800493a:	2100      	movs	r1, #0
 800493c:	2052      	movs	r0, #82	; 0x52
 800493e:	f7fc f965 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004942:	f240 113f 	movw	r1, #319	; 0x13f
 8004946:	2053      	movs	r0, #83	; 0x53
 8004948:	f7fc f960 	bl	8000c0c <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 800494c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004950:	2060      	movs	r0, #96	; 0x60
 8004952:	f7fc f95b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004956:	2101      	movs	r1, #1
 8004958:	2061      	movs	r0, #97	; 0x61
 800495a:	f7fc f957 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 800495e:	2100      	movs	r1, #0
 8004960:	206a      	movs	r0, #106	; 0x6a
 8004962:	f7fc f953 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004966:	2100      	movs	r1, #0
 8004968:	2080      	movs	r0, #128	; 0x80
 800496a:	f7fc f94f 	bl	8000c0c <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 800496e:	2100      	movs	r1, #0
 8004970:	2081      	movs	r0, #129	; 0x81
 8004972:	f7fc f94b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004976:	2100      	movs	r1, #0
 8004978:	2082      	movs	r0, #130	; 0x82
 800497a:	f7fc f947 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 800497e:	2100      	movs	r1, #0
 8004980:	2083      	movs	r0, #131	; 0x83
 8004982:	f7fc f943 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004986:	2100      	movs	r1, #0
 8004988:	2084      	movs	r0, #132	; 0x84
 800498a:	f7fc f93f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 800498e:	2100      	movs	r1, #0
 8004990:	2085      	movs	r0, #133	; 0x85
 8004992:	f7fc f93b 	bl	8000c0c <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8004996:	2113      	movs	r1, #19
 8004998:	2090      	movs	r0, #144	; 0x90
 800499a:	f7fc f937 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 800499e:	f44f 7140 	mov.w	r1, #768	; 0x300
 80049a2:	2092      	movs	r0, #146	; 0x92
 80049a4:	f7fc f932 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 80049a8:	2105      	movs	r1, #5
 80049aa:	2093      	movs	r0, #147	; 0x93
 80049ac:	f7fc f92e 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 80049b0:	2100      	movs	r1, #0
 80049b2:	2095      	movs	r0, #149	; 0x95
 80049b4:	f7fc f92a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 80049b8:	2100      	movs	r1, #0
 80049ba:	2097      	movs	r0, #151	; 0x97
 80049bc:	f7fc f926 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 80049c0:	2100      	movs	r1, #0
 80049c2:	2098      	movs	r0, #152	; 0x98
 80049c4:	f7fc f922 	bl	8000c0c <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 80049c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049cc:	2001      	movs	r0, #1
 80049ce:	f7fc f91d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 80049d2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80049d6:	2002      	movs	r0, #2
 80049d8:	f7fc f918 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 80049dc:	f241 0138 	movw	r1, #4152	; 0x1038
 80049e0:	2003      	movs	r0, #3
 80049e2:	f7fc f913 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80049e6:	2100      	movs	r1, #0
 80049e8:	2004      	movs	r0, #4
 80049ea:	f7fc f90f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80049ee:	2100      	movs	r1, #0
 80049f0:	200c      	movs	r0, #12
 80049f2:	f7fc f90b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80049f6:	2100      	movs	r1, #0
 80049f8:	200f      	movs	r0, #15
 80049fa:	f7fc f907 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 80049fe:	2100      	movs	r1, #0
 8004a00:	2020      	movs	r0, #32
 8004a02:	f7fc f903 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004a06:	2100      	movs	r1, #0
 8004a08:	2021      	movs	r0, #33	; 0x21
 8004a0a:	f7fc f8ff 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8004a0e:	2121      	movs	r1, #33	; 0x21
 8004a10:	2007      	movs	r0, #7
 8004a12:	f7fc f8fb 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(20);
 8004a16:	2014      	movs	r0, #20
 8004a18:	f001 f9dc 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004a1c:	2161      	movs	r1, #97	; 0x61
 8004a1e:	2007      	movs	r0, #7
 8004a20:	f7fc f8f4 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(20);
 8004a24:	2014      	movs	r0, #20
 8004a26:	f001 f9d5 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8004a2a:	f240 1173 	movw	r1, #371	; 0x173
 8004a2e:	2007      	movs	r0, #7
 8004a30:	f7fc f8ec 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(20);
 8004a34:	2014      	movs	r0, #20
 8004a36:	f001 f9cd 	bl	8005dd4 <HAL_Delay>
 8004a3a:	f000 bfd7 	b.w	80059ec <LCD_Init+0x3e34>
 8004a3e:	bf00      	nop
 8004a40:	20000028 	.word	0x20000028
	} else if (lcddev.id == 0xB505) {
 8004a44:	4bf0      	ldr	r3, [pc, #960]	; (8004e08 <LCD_Init+0x3250>)
 8004a46:	889b      	ldrh	r3, [r3, #4]
 8004a48:	f24b 5205 	movw	r2, #46341	; 0xb505
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	f040 8103 	bne.w	8004c58 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8004a52:	2100      	movs	r1, #0
 8004a54:	2000      	movs	r0, #0
 8004a56:	f7fc f8d9 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	f7fc f8d5 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004a62:	2100      	movs	r1, #0
 8004a64:	2000      	movs	r0, #0
 8004a66:	f7fc f8d1 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	2000      	movs	r0, #0
 8004a6e:	f7fc f8cd 	bl	8000c0c <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8004a72:	2101      	movs	r1, #1
 8004a74:	20a4      	movs	r0, #164	; 0xa4
 8004a76:	f7fc f8c9 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(20);
 8004a7a:	2014      	movs	r0, #20
 8004a7c:	f001 f9aa 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004a80:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004a84:	2060      	movs	r0, #96	; 0x60
 8004a86:	f7fc f8c1 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004a8a:	f240 2102 	movw	r1, #514	; 0x202
 8004a8e:	2008      	movs	r0, #8
 8004a90:	f7fc f8bc 	bl	8000c0c <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8004a94:	f44f 7105 	mov.w	r1, #532	; 0x214
 8004a98:	2030      	movs	r0, #48	; 0x30
 8004a9a:	f7fc f8b7 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8004a9e:	f243 7115 	movw	r1, #14101	; 0x3715
 8004aa2:	2031      	movs	r0, #49	; 0x31
 8004aa4:	f7fc f8b2 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8004aa8:	f240 6104 	movw	r1, #1540	; 0x604
 8004aac:	2032      	movs	r0, #50	; 0x32
 8004aae:	f7fc f8ad 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 8004ab2:	f640 6116 	movw	r1, #3606	; 0xe16
 8004ab6:	2033      	movs	r0, #51	; 0x33
 8004ab8:	f7fc f8a8 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8004abc:	f242 2111 	movw	r1, #8721	; 0x2211
 8004ac0:	2034      	movs	r0, #52	; 0x34
 8004ac2:	f7fc f8a3 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8004ac6:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8004aca:	2035      	movs	r0, #53	; 0x35
 8004acc:	f7fc f89e 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8004ad0:	f248 5107 	movw	r1, #34055	; 0x8507
 8004ad4:	2036      	movs	r0, #54	; 0x36
 8004ad6:	f7fc f899 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 8004ada:	f241 4107 	movw	r1, #5127	; 0x1407
 8004ade:	2037      	movs	r0, #55	; 0x37
 8004ae0:	f7fc f894 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8004ae4:	f241 4103 	movw	r1, #5123	; 0x1403
 8004ae8:	2038      	movs	r0, #56	; 0x38
 8004aea:	f7fc f88f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8004aee:	2120      	movs	r1, #32
 8004af0:	2039      	movs	r0, #57	; 0x39
 8004af2:	f7fc f88b 	bl	8000c0c <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 8004af6:	211a      	movs	r1, #26
 8004af8:	2090      	movs	r0, #144	; 0x90
 8004afa:	f7fc f887 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8004afe:	2100      	movs	r1, #0
 8004b00:	2010      	movs	r0, #16
 8004b02:	f7fc f883 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004b06:	2107      	movs	r1, #7
 8004b08:	2011      	movs	r0, #17
 8004b0a:	f7fc f87f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004b0e:	2100      	movs	r1, #0
 8004b10:	2012      	movs	r0, #18
 8004b12:	f7fc f87b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004b16:	2100      	movs	r1, #0
 8004b18:	2013      	movs	r0, #19
 8004b1a:	f7fc f877 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(20);
 8004b1e:	2014      	movs	r0, #20
 8004b20:	f001 f958 	bl	8005dd4 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 8004b24:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8004b28:	2010      	movs	r0, #16
 8004b2a:	f7fc f86f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8004b2e:	f240 1137 	movw	r1, #311	; 0x137
 8004b32:	2011      	movs	r0, #17
 8004b34:	f7fc f86a 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(20);
 8004b38:	2014      	movs	r0, #20
 8004b3a:	f001 f94b 	bl	8005dd4 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8004b3e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8004b42:	2012      	movs	r0, #18
 8004b44:	f7fc f862 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(20);
 8004b48:	2014      	movs	r0, #20
 8004b4a:	f001 f943 	bl	8005dd4 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 8004b4e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004b52:	2013      	movs	r0, #19
 8004b54:	f7fc f85a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8004b58:	2180      	movs	r1, #128	; 0x80
 8004b5a:	202a      	movs	r0, #42	; 0x2a
 8004b5c:	f7fc f856 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8004b60:	2148      	movs	r1, #72	; 0x48
 8004b62:	2029      	movs	r0, #41	; 0x29
 8004b64:	f7fc f852 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(20);
 8004b68:	2014      	movs	r0, #20
 8004b6a:	f001 f933 	bl	8005dd4 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8004b6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b72:	2001      	movs	r0, #1
 8004b74:	f7fc f84a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004b78:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004b7c:	2002      	movs	r0, #2
 8004b7e:	f7fc f845 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8004b82:	f241 0138 	movw	r1, #4152	; 0x1038
 8004b86:	2003      	movs	r0, #3
 8004b88:	f7fc f840 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004b8c:	f240 2102 	movw	r1, #514	; 0x202
 8004b90:	2008      	movs	r0, #8
 8004b92:	f7fc f83b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8004b96:	2100      	movs	r1, #0
 8004b98:	200a      	movs	r0, #10
 8004b9a:	f7fc f837 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	200c      	movs	r0, #12
 8004ba2:	f7fc f833 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	200d      	movs	r0, #13
 8004baa:	f7fc f82f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8004bae:	2130      	movs	r1, #48	; 0x30
 8004bb0:	200e      	movs	r0, #14
 8004bb2:	f7fc f82b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	2050      	movs	r0, #80	; 0x50
 8004bba:	f7fc f827 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8004bbe:	21ef      	movs	r1, #239	; 0xef
 8004bc0:	2051      	movs	r0, #81	; 0x51
 8004bc2:	f7fc f823 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	2052      	movs	r0, #82	; 0x52
 8004bca:	f7fc f81f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8004bce:	f240 113f 	movw	r1, #319	; 0x13f
 8004bd2:	2053      	movs	r0, #83	; 0x53
 8004bd4:	f7fc f81a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8004bd8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004bdc:	2060      	movs	r0, #96	; 0x60
 8004bde:	f7fc f815 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004be2:	2101      	movs	r1, #1
 8004be4:	2061      	movs	r0, #97	; 0x61
 8004be6:	f7fc f811 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8004bea:	2100      	movs	r1, #0
 8004bec:	206a      	movs	r0, #106	; 0x6a
 8004bee:	f7fc f80d 	bl	8000c0c <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 8004bf2:	2111      	movs	r1, #17
 8004bf4:	2090      	movs	r0, #144	; 0x90
 8004bf6:	f7fc f809 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004bfa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004bfe:	2092      	movs	r0, #146	; 0x92
 8004c00:	f7fc f804 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 8004c04:	f240 4102 	movw	r1, #1026	; 0x402
 8004c08:	2093      	movs	r0, #147	; 0x93
 8004c0a:	f7fb ffff 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 8004c0e:	2102      	movs	r1, #2
 8004c10:	2094      	movs	r0, #148	; 0x94
 8004c12:	f7fb fffb 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(20);
 8004c16:	2014      	movs	r0, #20
 8004c18:	f001 f8dc 	bl	8005dd4 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	2007      	movs	r0, #7
 8004c20:	f7fb fff4 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(20);
 8004c24:	2014      	movs	r0, #20
 8004c26:	f001 f8d5 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8004c2a:	2161      	movs	r1, #97	; 0x61
 8004c2c:	2007      	movs	r0, #7
 8004c2e:	f7fb ffed 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 8004c32:	f240 1173 	movw	r1, #371	; 0x173
 8004c36:	2007      	movs	r0, #7
 8004c38:	f7fb ffe8 	bl	8000c0c <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	2020      	movs	r0, #32
 8004c40:	f7fb ffe4 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8004c44:	2100      	movs	r1, #0
 8004c46:	2021      	movs	r0, #33	; 0x21
 8004c48:	f7fb ffe0 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 8004c4c:	2122      	movs	r1, #34	; 0x22
 8004c4e:	2000      	movs	r0, #0
 8004c50:	f7fb ffdc 	bl	8000c0c <LCD_WriteReg>
 8004c54:	f000 beca 	b.w	80059ec <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8004c58:	4b6b      	ldr	r3, [pc, #428]	; (8004e08 <LCD_Init+0x3250>)
 8004c5a:	889b      	ldrh	r3, [r3, #4]
 8004c5c:	f24c 5205 	movw	r2, #50437	; 0xc505
 8004c60:	4293      	cmp	r3, r2
 8004c62:	f040 80d3 	bne.w	8004e0c <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 8004c66:	2100      	movs	r1, #0
 8004c68:	2000      	movs	r0, #0
 8004c6a:	f7fb ffcf 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004c6e:	2100      	movs	r1, #0
 8004c70:	2000      	movs	r0, #0
 8004c72:	f7fb ffcb 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(20);
 8004c76:	2014      	movs	r0, #20
 8004c78:	f001 f8ac 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	2000      	movs	r0, #0
 8004c80:	f7fb ffc4 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004c84:	2100      	movs	r1, #0
 8004c86:	2000      	movs	r0, #0
 8004c88:	f7fb ffc0 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	2000      	movs	r0, #0
 8004c90:	f7fb ffbc 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8004c94:	2100      	movs	r1, #0
 8004c96:	2000      	movs	r0, #0
 8004c98:	f7fb ffb8 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	20a4      	movs	r0, #164	; 0xa4
 8004ca0:	f7fb ffb4 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(20);
 8004ca4:	2014      	movs	r0, #20
 8004ca6:	f001 f895 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8004caa:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004cae:	2060      	movs	r0, #96	; 0x60
 8004cb0:	f7fb ffac 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 8004cb4:	f640 0106 	movw	r1, #2054	; 0x806
 8004cb8:	2008      	movs	r0, #8
 8004cba:	f7fb ffa7 	bl	8000c0c <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 8004cbe:	f240 7103 	movw	r1, #1795	; 0x703
 8004cc2:	2030      	movs	r0, #48	; 0x30
 8004cc4:	f7fb ffa2 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8004cc8:	2101      	movs	r1, #1
 8004cca:	2031      	movs	r0, #49	; 0x31
 8004ccc:	f7fb ff9e 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8004cd0:	2104      	movs	r1, #4
 8004cd2:	2032      	movs	r0, #50	; 0x32
 8004cd4:	f7fb ff9a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8004cd8:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004cdc:	2033      	movs	r0, #51	; 0x33
 8004cde:	f7fb ff95 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 8004ce2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004ce6:	2034      	movs	r0, #52	; 0x34
 8004ce8:	f7fb ff90 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 8004cec:	f240 1103 	movw	r1, #259	; 0x103
 8004cf0:	2035      	movs	r0, #53	; 0x35
 8004cf2:	f7fb ff8b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 8004cf6:	211f      	movs	r1, #31
 8004cf8:	2036      	movs	r0, #54	; 0x36
 8004cfa:	f7fb ff87 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 8004cfe:	f240 7103 	movw	r1, #1795	; 0x703
 8004d02:	2037      	movs	r0, #55	; 0x37
 8004d04:	f7fb ff82 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 8004d08:	2101      	movs	r1, #1
 8004d0a:	2038      	movs	r0, #56	; 0x38
 8004d0c:	f7fb ff7e 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 8004d10:	2104      	movs	r1, #4
 8004d12:	2039      	movs	r0, #57	; 0x39
 8004d14:	f7fb ff7a 	bl	8000c0c <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8004d18:	2115      	movs	r1, #21
 8004d1a:	2090      	movs	r0, #144	; 0x90
 8004d1c:	f7fb ff76 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8004d20:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8004d24:	2010      	movs	r0, #16
 8004d26:	f7fb ff71 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 8004d2a:	f240 2147 	movw	r1, #583	; 0x247
 8004d2e:	2011      	movs	r0, #17
 8004d30:	f7fb ff6c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 8004d34:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8004d38:	2012      	movs	r0, #18
 8004d3a:	f7fb ff67 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 8004d3e:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8004d42:	2013      	movs	r0, #19
 8004d44:	f7fb ff62 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(120);
 8004d48:	2078      	movs	r0, #120	; 0x78
 8004d4a:	f001 f843 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 8004d4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d52:	2001      	movs	r0, #1
 8004d54:	f7fb ff5a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8004d58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d5c:	2002      	movs	r0, #2
 8004d5e:	f7fb ff55 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8004d62:	f241 0130 	movw	r1, #4144	; 0x1030
 8004d66:	2003      	movs	r0, #3
 8004d68:	f7fb ff50 	bl	8000c0c <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8004d6c:	2108      	movs	r1, #8
 8004d6e:	200a      	movs	r0, #10
 8004d70:	f7fb ff4c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004d74:	2100      	movs	r1, #0
 8004d76:	200c      	movs	r0, #12
 8004d78:	f7fb ff48 	bl	8000c0c <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8004d7c:	2120      	movs	r1, #32
 8004d7e:	200e      	movs	r0, #14
 8004d80:	f7fb ff44 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004d84:	2100      	movs	r1, #0
 8004d86:	200f      	movs	r0, #15
 8004d88:	f7fb ff40 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	2020      	movs	r0, #32
 8004d90:	f7fb ff3c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8004d94:	2100      	movs	r1, #0
 8004d96:	2021      	movs	r0, #33	; 0x21
 8004d98:	f7fb ff38 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 8004d9c:	213d      	movs	r1, #61	; 0x3d
 8004d9e:	202a      	movs	r0, #42	; 0x2a
 8004da0:	f7fb ff34 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(20);
 8004da4:	2014      	movs	r0, #20
 8004da6:	f001 f815 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8004daa:	212d      	movs	r1, #45	; 0x2d
 8004dac:	2029      	movs	r0, #41	; 0x29
 8004dae:	f7fb ff2d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8004db2:	2100      	movs	r1, #0
 8004db4:	2050      	movs	r0, #80	; 0x50
 8004db6:	f7fb ff29 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8004dba:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 8004dbe:	2051      	movs	r0, #81	; 0x51
 8004dc0:	f7fb ff24 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	2052      	movs	r0, #82	; 0x52
 8004dc8:	f7fb ff20 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004dcc:	f240 113f 	movw	r1, #319	; 0x13f
 8004dd0:	2053      	movs	r0, #83	; 0x53
 8004dd2:	f7fb ff1b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	2061      	movs	r0, #97	; 0x61
 8004dda:	f7fb ff17 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004dde:	2100      	movs	r1, #0
 8004de0:	206a      	movs	r0, #106	; 0x6a
 8004de2:	f7fb ff13 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004de6:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004dea:	2092      	movs	r0, #146	; 0x92
 8004dec:	f7fb ff0e 	bl	8000c0c <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 8004df0:	2105      	movs	r1, #5
 8004df2:	2093      	movs	r0, #147	; 0x93
 8004df4:	f7fb ff0a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8004df8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004dfc:	2007      	movs	r0, #7
 8004dfe:	f7fb ff05 	bl	8000c0c <LCD_WriteReg>
 8004e02:	f000 bdf3 	b.w	80059ec <LCD_Init+0x3e34>
 8004e06:	bf00      	nop
 8004e08:	20000028 	.word	0x20000028
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 8004e0c:	4bc2      	ldr	r3, [pc, #776]	; (8005118 <LCD_Init+0x3560>)
 8004e0e:	889b      	ldrh	r3, [r3, #4]
 8004e10:	f648 1289 	movw	r2, #35209	; 0x8989
 8004e14:	4293      	cmp	r3, r2
 8004e16:	f040 80bc 	bne.w	8004f92 <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	f7fb fef5 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 8004e22:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 8004e26:	2003      	movs	r0, #3
 8004e28:	f7fb fef0 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	200c      	movs	r0, #12
 8004e30:	f7fb feec 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 8004e34:	f640 010c 	movw	r1, #2060	; 0x80c
 8004e38:	200d      	movs	r0, #13
 8004e3a:	f7fb fee7 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 8004e3e:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 8004e42:	200e      	movs	r0, #14
 8004e44:	f7fb fee2 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 8004e48:	21b0      	movs	r1, #176	; 0xb0
 8004e4a:	201e      	movs	r0, #30
 8004e4c:	f7fb fede 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8004e50:	f642 313f 	movw	r1, #11071	; 0x2b3f
 8004e54:	2001      	movs	r0, #1
 8004e56:	f7fb fed9 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 8004e5a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004e5e:	2002      	movs	r0, #2
 8004e60:	f7fb fed4 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8004e64:	2100      	movs	r1, #0
 8004e66:	2010      	movs	r0, #16
 8004e68:	f7fb fed0 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 8004e6c:	f246 0178 	movw	r1, #24696	; 0x6078
 8004e70:	2011      	movs	r0, #17
 8004e72:	f7fb fecb 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 8004e76:	2100      	movs	r1, #0
 8004e78:	2005      	movs	r0, #5
 8004e7a:	f7fb fec7 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 8004e7e:	2100      	movs	r1, #0
 8004e80:	2006      	movs	r0, #6
 8004e82:	f7fb fec3 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 8004e86:	f64e 711c 	movw	r1, #61212	; 0xef1c
 8004e8a:	2016      	movs	r0, #22
 8004e8c:	f7fb febe 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8004e90:	2103      	movs	r1, #3
 8004e92:	2017      	movs	r0, #23
 8004e94:	f7fb feba 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8004e98:	f240 2133 	movw	r1, #563	; 0x233
 8004e9c:	2007      	movs	r0, #7
 8004e9e:	f7fb feb5 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	200b      	movs	r0, #11
 8004ea6:	f7fb feb1 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 8004eaa:	2100      	movs	r1, #0
 8004eac:	200f      	movs	r0, #15
 8004eae:	f7fb fead 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	2041      	movs	r0, #65	; 0x41
 8004eb6:	f7fb fea9 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 8004eba:	2100      	movs	r1, #0
 8004ebc:	2042      	movs	r0, #66	; 0x42
 8004ebe:	f7fb fea5 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	2048      	movs	r0, #72	; 0x48
 8004ec6:	f7fb fea1 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 8004eca:	f240 113f 	movw	r1, #319	; 0x13f
 8004ece:	2049      	movs	r0, #73	; 0x49
 8004ed0:	f7fb fe9c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	204a      	movs	r0, #74	; 0x4a
 8004ed8:	f7fb fe98 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 8004edc:	2100      	movs	r1, #0
 8004ede:	204b      	movs	r0, #75	; 0x4b
 8004ee0:	f7fb fe94 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 8004ee4:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8004ee8:	2044      	movs	r0, #68	; 0x44
 8004eea:	f7fb fe8f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 8004eee:	2100      	movs	r1, #0
 8004ef0:	2045      	movs	r0, #69	; 0x45
 8004ef2:	f7fb fe8b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 8004ef6:	f240 113f 	movw	r1, #319	; 0x13f
 8004efa:	2046      	movs	r0, #70	; 0x46
 8004efc:	f7fb fe86 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 8004f00:	f240 7107 	movw	r1, #1799	; 0x707
 8004f04:	2030      	movs	r0, #48	; 0x30
 8004f06:	f7fb fe81 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 8004f0a:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004f0e:	2031      	movs	r0, #49	; 0x31
 8004f10:	f7fb fe7c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 8004f14:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004f18:	2032      	movs	r0, #50	; 0x32
 8004f1a:	f7fb fe77 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 8004f1e:	f240 5102 	movw	r1, #1282	; 0x502
 8004f22:	2033      	movs	r0, #51	; 0x33
 8004f24:	f7fb fe72 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 8004f28:	f240 5107 	movw	r1, #1287	; 0x507
 8004f2c:	2034      	movs	r0, #52	; 0x34
 8004f2e:	f7fb fe6d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8004f32:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004f36:	2035      	movs	r0, #53	; 0x35
 8004f38:	f7fb fe68 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 8004f3c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004f40:	2036      	movs	r0, #54	; 0x36
 8004f42:	f7fb fe63 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 8004f46:	f240 5102 	movw	r1, #1282	; 0x502
 8004f4a:	2037      	movs	r0, #55	; 0x37
 8004f4c:	f7fb fe5e 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8004f50:	f240 3102 	movw	r1, #770	; 0x302
 8004f54:	203a      	movs	r0, #58	; 0x3a
 8004f56:	f7fb fe59 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 8004f5a:	f240 3102 	movw	r1, #770	; 0x302
 8004f5e:	203b      	movs	r0, #59	; 0x3b
 8004f60:	f7fb fe54 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 8004f64:	2100      	movs	r1, #0
 8004f66:	2023      	movs	r0, #35	; 0x23
 8004f68:	f7fb fe50 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	2024      	movs	r0, #36	; 0x24
 8004f70:	f7fb fe4c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 8004f74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f78:	2025      	movs	r0, #37	; 0x25
 8004f7a:	f7fb fe47 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 8004f7e:	2100      	movs	r1, #0
 8004f80:	204f      	movs	r0, #79	; 0x4f
 8004f82:	f7fb fe43 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 8004f86:	2100      	movs	r1, #0
 8004f88:	204e      	movs	r0, #78	; 0x4e
 8004f8a:	f7fb fe3f 	bl	8000c0c <LCD_WriteReg>
 8004f8e:	f000 bd2d 	b.w	80059ec <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 8004f92:	4b61      	ldr	r3, [pc, #388]	; (8005118 <LCD_Init+0x3560>)
 8004f94:	889b      	ldrh	r3, [r3, #4]
 8004f96:	f244 5231 	movw	r2, #17713	; 0x4531
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	f040 80be 	bne.w	800511c <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	2000      	movs	r0, #0
 8004fa4:	f7fb fe32 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(10);
 8004fa8:	200a      	movs	r0, #10
 8004faa:	f000 ff13 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 8004fae:	f241 6128 	movw	r1, #5672	; 0x1628
 8004fb2:	2010      	movs	r0, #16
 8004fb4:	f7fb fe2a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8004fb8:	210e      	movs	r1, #14
 8004fba:	2012      	movs	r0, #18
 8004fbc:	f7fb fe26 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8004fc0:	f640 2139 	movw	r1, #2617	; 0xa39
 8004fc4:	2013      	movs	r0, #19
 8004fc6:	f7fb fe21 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(10);
 8004fca:	200a      	movs	r0, #10
 8004fcc:	f000 ff02 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8004fd0:	2140      	movs	r1, #64	; 0x40
 8004fd2:	2011      	movs	r0, #17
 8004fd4:	f7fb fe1a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8004fd8:	2150      	movs	r1, #80	; 0x50
 8004fda:	2015      	movs	r0, #21
 8004fdc:	f7fb fe16 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(10);
 8004fe0:	200a      	movs	r0, #10
 8004fe2:	f000 fef7 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 8004fe6:	211e      	movs	r1, #30
 8004fe8:	2012      	movs	r0, #18
 8004fea:	f7fb fe0f 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(10);
 8004fee:	200a      	movs	r0, #10
 8004ff0:	f000 fef0 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 8004ff4:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8004ff8:	2010      	movs	r0, #16
 8004ffa:	f7fb fe07 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 8004ffe:	f642 2139 	movw	r1, #10809	; 0x2a39
 8005002:	2013      	movs	r0, #19
 8005004:	f7fb fe02 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(10);
 8005008:	200a      	movs	r0, #10
 800500a:	f000 fee3 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 800500e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005012:	2001      	movs	r0, #1
 8005014:	f7fb fdfa 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8005018:	f44f 7140 	mov.w	r1, #768	; 0x300
 800501c:	2002      	movs	r0, #2
 800501e:	f7fb fdf5 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 8005022:	f241 0138 	movw	r1, #4152	; 0x1038
 8005026:	2003      	movs	r0, #3
 8005028:	f7fb fdf0 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 800502c:	f240 2102 	movw	r1, #514	; 0x202
 8005030:	2008      	movs	r0, #8
 8005032:	f7fb fdeb 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8005036:	2108      	movs	r1, #8
 8005038:	200a      	movs	r0, #10
 800503a:	f7fb fde7 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 800503e:	2100      	movs	r1, #0
 8005040:	2030      	movs	r0, #48	; 0x30
 8005042:	f7fb fde3 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8005046:	f240 4102 	movw	r1, #1026	; 0x402
 800504a:	2031      	movs	r0, #49	; 0x31
 800504c:	f7fb fdde 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8005050:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005054:	2032      	movs	r0, #50	; 0x32
 8005056:	f7fb fdd9 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 800505a:	f240 5103 	movw	r1, #1283	; 0x503
 800505e:	2033      	movs	r0, #51	; 0x33
 8005060:	f7fb fdd4 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 8005064:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005068:	2034      	movs	r0, #52	; 0x34
 800506a:	f7fb fdcf 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 800506e:	f240 3101 	movw	r1, #769	; 0x301
 8005072:	2035      	movs	r0, #53	; 0x35
 8005074:	f7fb fdca 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8005078:	f240 7107 	movw	r1, #1799	; 0x707
 800507c:	2036      	movs	r0, #54	; 0x36
 800507e:	f7fb fdc5 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8005082:	f240 3105 	movw	r1, #773	; 0x305
 8005086:	2037      	movs	r0, #55	; 0x37
 8005088:	f7fb fdc0 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 800508c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005090:	2038      	movs	r0, #56	; 0x38
 8005092:	f7fb fdbb 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 8005096:	f640 710b 	movw	r1, #3851	; 0xf0b
 800509a:	2039      	movs	r0, #57	; 0x39
 800509c:	f7fb fdb6 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 80050a0:	2102      	movs	r1, #2
 80050a2:	2041      	movs	r0, #65	; 0x41
 80050a4:	f7fb fdb2 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 80050a8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80050ac:	2060      	movs	r0, #96	; 0x60
 80050ae:	f7fb fdad 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 80050b2:	2101      	movs	r1, #1
 80050b4:	2061      	movs	r0, #97	; 0x61
 80050b6:	f7fb fda9 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 80050ba:	f44f 7104 	mov.w	r1, #528	; 0x210
 80050be:	2090      	movs	r0, #144	; 0x90
 80050c0:	f7fb fda4 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 80050c4:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80050c8:	2092      	movs	r0, #146	; 0x92
 80050ca:	f7fb fd9f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 80050ce:	2104      	movs	r1, #4
 80050d0:	2093      	movs	r0, #147	; 0x93
 80050d2:	f7fb fd9b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 80050d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050da:	20a0      	movs	r0, #160	; 0xa0
 80050dc:	f7fb fd96 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 80050e0:	2101      	movs	r1, #1
 80050e2:	2007      	movs	r0, #7
 80050e4:	f7fb fd92 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 80050e8:	2121      	movs	r1, #33	; 0x21
 80050ea:	2007      	movs	r0, #7
 80050ec:	f7fb fd8e 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 80050f0:	2123      	movs	r1, #35	; 0x23
 80050f2:	2007      	movs	r0, #7
 80050f4:	f7fb fd8a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 80050f8:	2133      	movs	r1, #51	; 0x33
 80050fa:	2007      	movs	r0, #7
 80050fc:	f7fb fd86 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8005100:	f240 1133 	movw	r1, #307	; 0x133
 8005104:	2007      	movs	r0, #7
 8005106:	f7fb fd81 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 800510a:	2100      	movs	r1, #0
 800510c:	20a0      	movs	r0, #160	; 0xa0
 800510e:	f7fb fd7d 	bl	8000c0c <LCD_WriteReg>
 8005112:	f000 bc6b 	b.w	80059ec <LCD_Init+0x3e34>
 8005116:	bf00      	nop
 8005118:	20000028 	.word	0x20000028
	} else if (lcddev.id == 0x4535) {
 800511c:	4b5b      	ldr	r3, [pc, #364]	; (800528c <LCD_Init+0x36d4>)
 800511e:	889b      	ldrh	r3, [r3, #4]
 8005120:	f244 5235 	movw	r2, #17717	; 0x4535
 8005124:	4293      	cmp	r3, r2
 8005126:	f040 80b3 	bne.w	8005290 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 800512a:	2130      	movs	r1, #48	; 0x30
 800512c:	2015      	movs	r0, #21
 800512e:	f7fb fd6d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 8005132:	2110      	movs	r1, #16
 8005134:	209a      	movs	r0, #154	; 0x9a
 8005136:	f7fb fd69 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 800513a:	2120      	movs	r1, #32
 800513c:	2011      	movs	r0, #17
 800513e:	f7fb fd65 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 8005142:	f243 4128 	movw	r1, #13352	; 0x3428
 8005146:	2010      	movs	r0, #16
 8005148:	f7fb fd60 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 800514c:	2102      	movs	r1, #2
 800514e:	2012      	movs	r0, #18
 8005150:	f7fb fd5c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 8005154:	f241 0138 	movw	r1, #4152	; 0x1038
 8005158:	2013      	movs	r0, #19
 800515a:	f7fb fd57 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(40);
 800515e:	2028      	movs	r0, #40	; 0x28
 8005160:	f000 fe38 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 8005164:	2112      	movs	r1, #18
 8005166:	2012      	movs	r0, #18
 8005168:	f7fb fd50 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(40);
 800516c:	2028      	movs	r0, #40	; 0x28
 800516e:	f000 fe31 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 8005172:	f243 4120 	movw	r1, #13344	; 0x3420
 8005176:	2010      	movs	r0, #16
 8005178:	f7fb fd48 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 800517c:	f243 0138 	movw	r1, #12344	; 0x3038
 8005180:	2013      	movs	r0, #19
 8005182:	f7fb fd43 	bl	8000c0c <LCD_WriteReg>
		HAL_Delay(70);
 8005186:	2046      	movs	r0, #70	; 0x46
 8005188:	f000 fe24 	bl	8005dd4 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 800518c:	2100      	movs	r1, #0
 800518e:	2030      	movs	r0, #48	; 0x30
 8005190:	f7fb fd3c 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8005194:	f240 4102 	movw	r1, #1026	; 0x402
 8005198:	2031      	movs	r0, #49	; 0x31
 800519a:	f7fb fd37 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 800519e:	f240 3107 	movw	r1, #775	; 0x307
 80051a2:	2032      	movs	r0, #50	; 0x32
 80051a4:	f7fb fd32 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 80051a8:	f44f 7141 	mov.w	r1, #772	; 0x304
 80051ac:	2033      	movs	r0, #51	; 0x33
 80051ae:	f7fb fd2d 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 80051b2:	2104      	movs	r1, #4
 80051b4:	2034      	movs	r0, #52	; 0x34
 80051b6:	f7fb fd29 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 80051ba:	f240 4101 	movw	r1, #1025	; 0x401
 80051be:	2035      	movs	r0, #53	; 0x35
 80051c0:	f7fb fd24 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 80051c4:	f240 7107 	movw	r1, #1799	; 0x707
 80051c8:	2036      	movs	r0, #54	; 0x36
 80051ca:	f7fb fd1f 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 80051ce:	f240 3105 	movw	r1, #773	; 0x305
 80051d2:	2037      	movs	r0, #55	; 0x37
 80051d4:	f7fb fd1a 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 80051d8:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80051dc:	2038      	movs	r0, #56	; 0x38
 80051de:	f7fb fd15 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 80051e2:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80051e6:	2039      	movs	r0, #57	; 0x39
 80051e8:	f7fb fd10 	bl	8000c0c <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 80051ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051f0:	2001      	movs	r0, #1
 80051f2:	f7fb fd0b 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80051f6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80051fa:	2002      	movs	r0, #2
 80051fc:	f7fb fd06 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 8005200:	f241 0130 	movw	r1, #4144	; 0x1030
 8005204:	2003      	movs	r0, #3
 8005206:	f7fb fd01 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 800520a:	f640 0108 	movw	r1, #2056	; 0x808
 800520e:	2008      	movs	r0, #8
 8005210:	f7fb fcfc 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8005214:	2108      	movs	r1, #8
 8005216:	200a      	movs	r0, #10
 8005218:	f7fb fcf8 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 800521c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005220:	2060      	movs	r0, #96	; 0x60
 8005222:	f7fb fcf3 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8005226:	2101      	movs	r1, #1
 8005228:	2061      	movs	r0, #97	; 0x61
 800522a:	f7fb fcef 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 800522e:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8005232:	2090      	movs	r0, #144	; 0x90
 8005234:	f7fb fcea 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 8005238:	f44f 7180 	mov.w	r1, #256	; 0x100
 800523c:	2092      	movs	r0, #146	; 0x92
 800523e:	f7fb fce5 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 8005242:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005246:	2093      	movs	r0, #147	; 0x93
 8005248:	f7fb fce0 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 800524c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005250:	20a0      	movs	r0, #160	; 0xa0
 8005252:	f7fb fcdb 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 8005256:	2110      	movs	r1, #16
 8005258:	20a3      	movs	r0, #163	; 0xa3
 800525a:	f7fb fcd7 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 800525e:	2101      	movs	r1, #1
 8005260:	2007      	movs	r0, #7
 8005262:	f7fb fcd3 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005266:	2121      	movs	r1, #33	; 0x21
 8005268:	2007      	movs	r0, #7
 800526a:	f7fb fccf 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 800526e:	2123      	movs	r1, #35	; 0x23
 8005270:	2007      	movs	r0, #7
 8005272:	f7fb fccb 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005276:	2133      	movs	r1, #51	; 0x33
 8005278:	2007      	movs	r0, #7
 800527a:	f7fb fcc7 	bl	8000c0c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 800527e:	f240 1133 	movw	r1, #307	; 0x133
 8005282:	2007      	movs	r0, #7
 8005284:	f7fb fcc2 	bl	8000c0c <LCD_WriteReg>
 8005288:	e3b0      	b.n	80059ec <LCD_Init+0x3e34>
 800528a:	bf00      	nop
 800528c:	20000028 	.word	0x20000028
	} else if (lcddev.id == 0X1963) {
 8005290:	4ba8      	ldr	r3, [pc, #672]	; (8005534 <LCD_Init+0x397c>)
 8005292:	889b      	ldrh	r3, [r3, #4]
 8005294:	f641 1263 	movw	r2, #6499	; 0x1963
 8005298:	4293      	cmp	r3, r2
 800529a:	f040 83a7 	bne.w	80059ec <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 800529e:	20e2      	movs	r0, #226	; 0xe2
 80052a0:	f7fb fc28 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 80052a4:	4ba4      	ldr	r3, [pc, #656]	; (8005538 <LCD_Init+0x3980>)
 80052a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052aa:	611a      	str	r2, [r3, #16]
 80052ac:	4ba2      	ldr	r3, [pc, #648]	; (8005538 <LCD_Init+0x3980>)
 80052ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052b2:	615a      	str	r2, [r3, #20]
 80052b4:	4ba1      	ldr	r3, [pc, #644]	; (800553c <LCD_Init+0x3984>)
 80052b6:	221d      	movs	r2, #29
 80052b8:	60da      	str	r2, [r3, #12]
 80052ba:	4b9f      	ldr	r3, [pc, #636]	; (8005538 <LCD_Init+0x3980>)
 80052bc:	2280      	movs	r2, #128	; 0x80
 80052be:	615a      	str	r2, [r3, #20]
 80052c0:	4b9d      	ldr	r3, [pc, #628]	; (8005538 <LCD_Init+0x3980>)
 80052c2:	2280      	movs	r2, #128	; 0x80
 80052c4:	611a      	str	r2, [r3, #16]
 80052c6:	4b9c      	ldr	r3, [pc, #624]	; (8005538 <LCD_Init+0x3980>)
 80052c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052cc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 80052ce:	4b9a      	ldr	r3, [pc, #616]	; (8005538 <LCD_Init+0x3980>)
 80052d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052d4:	611a      	str	r2, [r3, #16]
 80052d6:	4b98      	ldr	r3, [pc, #608]	; (8005538 <LCD_Init+0x3980>)
 80052d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052dc:	615a      	str	r2, [r3, #20]
 80052de:	4b97      	ldr	r3, [pc, #604]	; (800553c <LCD_Init+0x3984>)
 80052e0:	2202      	movs	r2, #2
 80052e2:	60da      	str	r2, [r3, #12]
 80052e4:	4b94      	ldr	r3, [pc, #592]	; (8005538 <LCD_Init+0x3980>)
 80052e6:	2280      	movs	r2, #128	; 0x80
 80052e8:	615a      	str	r2, [r3, #20]
 80052ea:	4b93      	ldr	r3, [pc, #588]	; (8005538 <LCD_Init+0x3980>)
 80052ec:	2280      	movs	r2, #128	; 0x80
 80052ee:	611a      	str	r2, [r3, #16]
 80052f0:	4b91      	ldr	r3, [pc, #580]	; (8005538 <LCD_Init+0x3980>)
 80052f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052f6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 80052f8:	4b8f      	ldr	r3, [pc, #572]	; (8005538 <LCD_Init+0x3980>)
 80052fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052fe:	611a      	str	r2, [r3, #16]
 8005300:	4b8d      	ldr	r3, [pc, #564]	; (8005538 <LCD_Init+0x3980>)
 8005302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005306:	615a      	str	r2, [r3, #20]
 8005308:	4b8c      	ldr	r3, [pc, #560]	; (800553c <LCD_Init+0x3984>)
 800530a:	2204      	movs	r2, #4
 800530c:	60da      	str	r2, [r3, #12]
 800530e:	4b8a      	ldr	r3, [pc, #552]	; (8005538 <LCD_Init+0x3980>)
 8005310:	2280      	movs	r2, #128	; 0x80
 8005312:	615a      	str	r2, [r3, #20]
 8005314:	4b88      	ldr	r3, [pc, #544]	; (8005538 <LCD_Init+0x3980>)
 8005316:	2280      	movs	r2, #128	; 0x80
 8005318:	611a      	str	r2, [r3, #16]
 800531a:	4b87      	ldr	r3, [pc, #540]	; (8005538 <LCD_Init+0x3980>)
 800531c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005320:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 8005322:	2001      	movs	r0, #1
 8005324:	f000 fd56 	bl	8005dd4 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8005328:	20e0      	movs	r0, #224	; 0xe0
 800532a:	f7fb fbe3 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 800532e:	4b82      	ldr	r3, [pc, #520]	; (8005538 <LCD_Init+0x3980>)
 8005330:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005334:	611a      	str	r2, [r3, #16]
 8005336:	4b80      	ldr	r3, [pc, #512]	; (8005538 <LCD_Init+0x3980>)
 8005338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800533c:	615a      	str	r2, [r3, #20]
 800533e:	4b7f      	ldr	r3, [pc, #508]	; (800553c <LCD_Init+0x3984>)
 8005340:	2201      	movs	r2, #1
 8005342:	60da      	str	r2, [r3, #12]
 8005344:	4b7c      	ldr	r3, [pc, #496]	; (8005538 <LCD_Init+0x3980>)
 8005346:	2280      	movs	r2, #128	; 0x80
 8005348:	615a      	str	r2, [r3, #20]
 800534a:	4b7b      	ldr	r3, [pc, #492]	; (8005538 <LCD_Init+0x3980>)
 800534c:	2280      	movs	r2, #128	; 0x80
 800534e:	611a      	str	r2, [r3, #16]
 8005350:	4b79      	ldr	r3, [pc, #484]	; (8005538 <LCD_Init+0x3980>)
 8005352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005356:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8005358:	200a      	movs	r0, #10
 800535a:	f000 fd3b 	bl	8005dd4 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 800535e:	20e0      	movs	r0, #224	; 0xe0
 8005360:	f7fb fbc8 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 8005364:	4b74      	ldr	r3, [pc, #464]	; (8005538 <LCD_Init+0x3980>)
 8005366:	f44f 7280 	mov.w	r2, #256	; 0x100
 800536a:	611a      	str	r2, [r3, #16]
 800536c:	4b72      	ldr	r3, [pc, #456]	; (8005538 <LCD_Init+0x3980>)
 800536e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005372:	615a      	str	r2, [r3, #20]
 8005374:	4b71      	ldr	r3, [pc, #452]	; (800553c <LCD_Init+0x3984>)
 8005376:	2203      	movs	r2, #3
 8005378:	60da      	str	r2, [r3, #12]
 800537a:	4b6f      	ldr	r3, [pc, #444]	; (8005538 <LCD_Init+0x3980>)
 800537c:	2280      	movs	r2, #128	; 0x80
 800537e:	615a      	str	r2, [r3, #20]
 8005380:	4b6d      	ldr	r3, [pc, #436]	; (8005538 <LCD_Init+0x3980>)
 8005382:	2280      	movs	r2, #128	; 0x80
 8005384:	611a      	str	r2, [r3, #16]
 8005386:	4b6c      	ldr	r3, [pc, #432]	; (8005538 <LCD_Init+0x3980>)
 8005388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800538c:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 800538e:	200c      	movs	r0, #12
 8005390:	f000 fd20 	bl	8005dd4 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8005394:	2001      	movs	r0, #1
 8005396:	f7fb fbad 	bl	8000af4 <LCD_WR_REG>
		HAL_Delay(10);
 800539a:	200a      	movs	r0, #10
 800539c:	f000 fd1a 	bl	8005dd4 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 80053a0:	20e6      	movs	r0, #230	; 0xe6
 80053a2:	f7fb fba7 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 80053a6:	4b64      	ldr	r3, [pc, #400]	; (8005538 <LCD_Init+0x3980>)
 80053a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053ac:	611a      	str	r2, [r3, #16]
 80053ae:	4b62      	ldr	r3, [pc, #392]	; (8005538 <LCD_Init+0x3980>)
 80053b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053b4:	615a      	str	r2, [r3, #20]
 80053b6:	4b61      	ldr	r3, [pc, #388]	; (800553c <LCD_Init+0x3984>)
 80053b8:	222f      	movs	r2, #47	; 0x2f
 80053ba:	60da      	str	r2, [r3, #12]
 80053bc:	4b5e      	ldr	r3, [pc, #376]	; (8005538 <LCD_Init+0x3980>)
 80053be:	2280      	movs	r2, #128	; 0x80
 80053c0:	615a      	str	r2, [r3, #20]
 80053c2:	4b5d      	ldr	r3, [pc, #372]	; (8005538 <LCD_Init+0x3980>)
 80053c4:	2280      	movs	r2, #128	; 0x80
 80053c6:	611a      	str	r2, [r3, #16]
 80053c8:	4b5b      	ldr	r3, [pc, #364]	; (8005538 <LCD_Init+0x3980>)
 80053ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053ce:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80053d0:	4b59      	ldr	r3, [pc, #356]	; (8005538 <LCD_Init+0x3980>)
 80053d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053d6:	611a      	str	r2, [r3, #16]
 80053d8:	4b57      	ldr	r3, [pc, #348]	; (8005538 <LCD_Init+0x3980>)
 80053da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053de:	615a      	str	r2, [r3, #20]
 80053e0:	4b56      	ldr	r3, [pc, #344]	; (800553c <LCD_Init+0x3984>)
 80053e2:	22ff      	movs	r2, #255	; 0xff
 80053e4:	60da      	str	r2, [r3, #12]
 80053e6:	4b54      	ldr	r3, [pc, #336]	; (8005538 <LCD_Init+0x3980>)
 80053e8:	2280      	movs	r2, #128	; 0x80
 80053ea:	615a      	str	r2, [r3, #20]
 80053ec:	4b52      	ldr	r3, [pc, #328]	; (8005538 <LCD_Init+0x3980>)
 80053ee:	2280      	movs	r2, #128	; 0x80
 80053f0:	611a      	str	r2, [r3, #16]
 80053f2:	4b51      	ldr	r3, [pc, #324]	; (8005538 <LCD_Init+0x3980>)
 80053f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053f8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80053fa:	4b4f      	ldr	r3, [pc, #316]	; (8005538 <LCD_Init+0x3980>)
 80053fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005400:	611a      	str	r2, [r3, #16]
 8005402:	4b4d      	ldr	r3, [pc, #308]	; (8005538 <LCD_Init+0x3980>)
 8005404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005408:	615a      	str	r2, [r3, #20]
 800540a:	4b4c      	ldr	r3, [pc, #304]	; (800553c <LCD_Init+0x3984>)
 800540c:	22ff      	movs	r2, #255	; 0xff
 800540e:	60da      	str	r2, [r3, #12]
 8005410:	4b49      	ldr	r3, [pc, #292]	; (8005538 <LCD_Init+0x3980>)
 8005412:	2280      	movs	r2, #128	; 0x80
 8005414:	615a      	str	r2, [r3, #20]
 8005416:	4b48      	ldr	r3, [pc, #288]	; (8005538 <LCD_Init+0x3980>)
 8005418:	2280      	movs	r2, #128	; 0x80
 800541a:	611a      	str	r2, [r3, #16]
 800541c:	4b46      	ldr	r3, [pc, #280]	; (8005538 <LCD_Init+0x3980>)
 800541e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005422:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 8005424:	20b0      	movs	r0, #176	; 0xb0
 8005426:	f7fb fb65 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 800542a:	4b43      	ldr	r3, [pc, #268]	; (8005538 <LCD_Init+0x3980>)
 800542c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005430:	611a      	str	r2, [r3, #16]
 8005432:	4b41      	ldr	r3, [pc, #260]	; (8005538 <LCD_Init+0x3980>)
 8005434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005438:	615a      	str	r2, [r3, #20]
 800543a:	4b40      	ldr	r3, [pc, #256]	; (800553c <LCD_Init+0x3984>)
 800543c:	2220      	movs	r2, #32
 800543e:	60da      	str	r2, [r3, #12]
 8005440:	4b3d      	ldr	r3, [pc, #244]	; (8005538 <LCD_Init+0x3980>)
 8005442:	2280      	movs	r2, #128	; 0x80
 8005444:	615a      	str	r2, [r3, #20]
 8005446:	4b3c      	ldr	r3, [pc, #240]	; (8005538 <LCD_Init+0x3980>)
 8005448:	2280      	movs	r2, #128	; 0x80
 800544a:	611a      	str	r2, [r3, #16]
 800544c:	4b3a      	ldr	r3, [pc, #232]	; (8005538 <LCD_Init+0x3980>)
 800544e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005452:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 8005454:	4b38      	ldr	r3, [pc, #224]	; (8005538 <LCD_Init+0x3980>)
 8005456:	f44f 7280 	mov.w	r2, #256	; 0x100
 800545a:	611a      	str	r2, [r3, #16]
 800545c:	4b36      	ldr	r3, [pc, #216]	; (8005538 <LCD_Init+0x3980>)
 800545e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005462:	615a      	str	r2, [r3, #20]
 8005464:	4b35      	ldr	r3, [pc, #212]	; (800553c <LCD_Init+0x3984>)
 8005466:	2200      	movs	r2, #0
 8005468:	60da      	str	r2, [r3, #12]
 800546a:	4b33      	ldr	r3, [pc, #204]	; (8005538 <LCD_Init+0x3980>)
 800546c:	2280      	movs	r2, #128	; 0x80
 800546e:	615a      	str	r2, [r3, #20]
 8005470:	4b31      	ldr	r3, [pc, #196]	; (8005538 <LCD_Init+0x3980>)
 8005472:	2280      	movs	r2, #128	; 0x80
 8005474:	611a      	str	r2, [r3, #16]
 8005476:	4b30      	ldr	r3, [pc, #192]	; (8005538 <LCD_Init+0x3980>)
 8005478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800547c:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 800547e:	4b2e      	ldr	r3, [pc, #184]	; (8005538 <LCD_Init+0x3980>)
 8005480:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005484:	611a      	str	r2, [r3, #16]
 8005486:	4b2c      	ldr	r3, [pc, #176]	; (8005538 <LCD_Init+0x3980>)
 8005488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800548c:	615a      	str	r2, [r3, #20]
 800548e:	4b2b      	ldr	r3, [pc, #172]	; (800553c <LCD_Init+0x3984>)
 8005490:	2203      	movs	r2, #3
 8005492:	60da      	str	r2, [r3, #12]
 8005494:	4b28      	ldr	r3, [pc, #160]	; (8005538 <LCD_Init+0x3980>)
 8005496:	2280      	movs	r2, #128	; 0x80
 8005498:	615a      	str	r2, [r3, #20]
 800549a:	4b27      	ldr	r3, [pc, #156]	; (8005538 <LCD_Init+0x3980>)
 800549c:	2280      	movs	r2, #128	; 0x80
 800549e:	611a      	str	r2, [r3, #16]
 80054a0:	4b25      	ldr	r3, [pc, #148]	; (8005538 <LCD_Init+0x3980>)
 80054a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054a6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 80054a8:	4b23      	ldr	r3, [pc, #140]	; (8005538 <LCD_Init+0x3980>)
 80054aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054ae:	611a      	str	r2, [r3, #16]
 80054b0:	4b21      	ldr	r3, [pc, #132]	; (8005538 <LCD_Init+0x3980>)
 80054b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054b6:	615a      	str	r2, [r3, #20]
 80054b8:	4b20      	ldr	r3, [pc, #128]	; (800553c <LCD_Init+0x3984>)
 80054ba:	f240 321f 	movw	r2, #799	; 0x31f
 80054be:	60da      	str	r2, [r3, #12]
 80054c0:	4b1d      	ldr	r3, [pc, #116]	; (8005538 <LCD_Init+0x3980>)
 80054c2:	2280      	movs	r2, #128	; 0x80
 80054c4:	615a      	str	r2, [r3, #20]
 80054c6:	4b1c      	ldr	r3, [pc, #112]	; (8005538 <LCD_Init+0x3980>)
 80054c8:	2280      	movs	r2, #128	; 0x80
 80054ca:	611a      	str	r2, [r3, #16]
 80054cc:	4b1a      	ldr	r3, [pc, #104]	; (8005538 <LCD_Init+0x3980>)
 80054ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054d2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 80054d4:	4b18      	ldr	r3, [pc, #96]	; (8005538 <LCD_Init+0x3980>)
 80054d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054da:	611a      	str	r2, [r3, #16]
 80054dc:	4b16      	ldr	r3, [pc, #88]	; (8005538 <LCD_Init+0x3980>)
 80054de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054e2:	615a      	str	r2, [r3, #20]
 80054e4:	4b15      	ldr	r3, [pc, #84]	; (800553c <LCD_Init+0x3984>)
 80054e6:	2201      	movs	r2, #1
 80054e8:	60da      	str	r2, [r3, #12]
 80054ea:	4b13      	ldr	r3, [pc, #76]	; (8005538 <LCD_Init+0x3980>)
 80054ec:	2280      	movs	r2, #128	; 0x80
 80054ee:	615a      	str	r2, [r3, #20]
 80054f0:	4b11      	ldr	r3, [pc, #68]	; (8005538 <LCD_Init+0x3980>)
 80054f2:	2280      	movs	r2, #128	; 0x80
 80054f4:	611a      	str	r2, [r3, #16]
 80054f6:	4b10      	ldr	r3, [pc, #64]	; (8005538 <LCD_Init+0x3980>)
 80054f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054fc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 80054fe:	4b0e      	ldr	r3, [pc, #56]	; (8005538 <LCD_Init+0x3980>)
 8005500:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005504:	611a      	str	r2, [r3, #16]
 8005506:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <LCD_Init+0x3980>)
 8005508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800550c:	615a      	str	r2, [r3, #20]
 800550e:	4b0b      	ldr	r3, [pc, #44]	; (800553c <LCD_Init+0x3984>)
 8005510:	f240 12df 	movw	r2, #479	; 0x1df
 8005514:	60da      	str	r2, [r3, #12]
 8005516:	4b08      	ldr	r3, [pc, #32]	; (8005538 <LCD_Init+0x3980>)
 8005518:	2280      	movs	r2, #128	; 0x80
 800551a:	615a      	str	r2, [r3, #20]
 800551c:	4b06      	ldr	r3, [pc, #24]	; (8005538 <LCD_Init+0x3980>)
 800551e:	2280      	movs	r2, #128	; 0x80
 8005520:	611a      	str	r2, [r3, #16]
 8005522:	4b05      	ldr	r3, [pc, #20]	; (8005538 <LCD_Init+0x3980>)
 8005524:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005528:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 800552a:	4b03      	ldr	r3, [pc, #12]	; (8005538 <LCD_Init+0x3980>)
 800552c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005530:	e006      	b.n	8005540 <LCD_Init+0x3988>
 8005532:	bf00      	nop
 8005534:	20000028 	.word	0x20000028
 8005538:	40011000 	.word	0x40011000
 800553c:	40010c00 	.word	0x40010c00
 8005540:	611a      	str	r2, [r3, #16]
 8005542:	4ba3      	ldr	r3, [pc, #652]	; (80057d0 <LCD_Init+0x3c18>)
 8005544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005548:	615a      	str	r2, [r3, #20]
 800554a:	4ba2      	ldr	r3, [pc, #648]	; (80057d4 <LCD_Init+0x3c1c>)
 800554c:	2200      	movs	r2, #0
 800554e:	60da      	str	r2, [r3, #12]
 8005550:	4b9f      	ldr	r3, [pc, #636]	; (80057d0 <LCD_Init+0x3c18>)
 8005552:	2280      	movs	r2, #128	; 0x80
 8005554:	615a      	str	r2, [r3, #20]
 8005556:	4b9e      	ldr	r3, [pc, #632]	; (80057d0 <LCD_Init+0x3c18>)
 8005558:	2280      	movs	r2, #128	; 0x80
 800555a:	611a      	str	r2, [r3, #16]
 800555c:	4b9c      	ldr	r3, [pc, #624]	; (80057d0 <LCD_Init+0x3c18>)
 800555e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005562:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 8005564:	20b4      	movs	r0, #180	; 0xb4
 8005566:	f7fb fac5 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 800556a:	4b99      	ldr	r3, [pc, #612]	; (80057d0 <LCD_Init+0x3c18>)
 800556c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005570:	611a      	str	r2, [r3, #16]
 8005572:	4b97      	ldr	r3, [pc, #604]	; (80057d0 <LCD_Init+0x3c18>)
 8005574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005578:	615a      	str	r2, [r3, #20]
 800557a:	4b96      	ldr	r3, [pc, #600]	; (80057d4 <LCD_Init+0x3c1c>)
 800557c:	2204      	movs	r2, #4
 800557e:	60da      	str	r2, [r3, #12]
 8005580:	4b93      	ldr	r3, [pc, #588]	; (80057d0 <LCD_Init+0x3c18>)
 8005582:	2280      	movs	r2, #128	; 0x80
 8005584:	615a      	str	r2, [r3, #20]
 8005586:	4b92      	ldr	r3, [pc, #584]	; (80057d0 <LCD_Init+0x3c18>)
 8005588:	2280      	movs	r2, #128	; 0x80
 800558a:	611a      	str	r2, [r3, #16]
 800558c:	4b90      	ldr	r3, [pc, #576]	; (80057d0 <LCD_Init+0x3c18>)
 800558e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005592:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 8005594:	4b8e      	ldr	r3, [pc, #568]	; (80057d0 <LCD_Init+0x3c18>)
 8005596:	f44f 7280 	mov.w	r2, #256	; 0x100
 800559a:	611a      	str	r2, [r3, #16]
 800559c:	4b8c      	ldr	r3, [pc, #560]	; (80057d0 <LCD_Init+0x3c18>)
 800559e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055a2:	615a      	str	r2, [r3, #20]
 80055a4:	4b8b      	ldr	r3, [pc, #556]	; (80057d4 <LCD_Init+0x3c1c>)
 80055a6:	f240 421f 	movw	r2, #1055	; 0x41f
 80055aa:	60da      	str	r2, [r3, #12]
 80055ac:	4b88      	ldr	r3, [pc, #544]	; (80057d0 <LCD_Init+0x3c18>)
 80055ae:	2280      	movs	r2, #128	; 0x80
 80055b0:	615a      	str	r2, [r3, #20]
 80055b2:	4b87      	ldr	r3, [pc, #540]	; (80057d0 <LCD_Init+0x3c18>)
 80055b4:	2280      	movs	r2, #128	; 0x80
 80055b6:	611a      	str	r2, [r3, #16]
 80055b8:	4b85      	ldr	r3, [pc, #532]	; (80057d0 <LCD_Init+0x3c18>)
 80055ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055be:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 80055c0:	4b83      	ldr	r3, [pc, #524]	; (80057d0 <LCD_Init+0x3c18>)
 80055c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055c6:	611a      	str	r2, [r3, #16]
 80055c8:	4b81      	ldr	r3, [pc, #516]	; (80057d0 <LCD_Init+0x3c18>)
 80055ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055ce:	615a      	str	r2, [r3, #20]
 80055d0:	4b80      	ldr	r3, [pc, #512]	; (80057d4 <LCD_Init+0x3c1c>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	60da      	str	r2, [r3, #12]
 80055d6:	4b7e      	ldr	r3, [pc, #504]	; (80057d0 <LCD_Init+0x3c18>)
 80055d8:	2280      	movs	r2, #128	; 0x80
 80055da:	615a      	str	r2, [r3, #20]
 80055dc:	4b7c      	ldr	r3, [pc, #496]	; (80057d0 <LCD_Init+0x3c18>)
 80055de:	2280      	movs	r2, #128	; 0x80
 80055e0:	611a      	str	r2, [r3, #16]
 80055e2:	4b7b      	ldr	r3, [pc, #492]	; (80057d0 <LCD_Init+0x3c18>)
 80055e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055e8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 80055ea:	4b79      	ldr	r3, [pc, #484]	; (80057d0 <LCD_Init+0x3c18>)
 80055ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80055f0:	611a      	str	r2, [r3, #16]
 80055f2:	4b77      	ldr	r3, [pc, #476]	; (80057d0 <LCD_Init+0x3c18>)
 80055f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055f8:	615a      	str	r2, [r3, #20]
 80055fa:	4b76      	ldr	r3, [pc, #472]	; (80057d4 <LCD_Init+0x3c1c>)
 80055fc:	222e      	movs	r2, #46	; 0x2e
 80055fe:	60da      	str	r2, [r3, #12]
 8005600:	4b73      	ldr	r3, [pc, #460]	; (80057d0 <LCD_Init+0x3c18>)
 8005602:	2280      	movs	r2, #128	; 0x80
 8005604:	615a      	str	r2, [r3, #20]
 8005606:	4b72      	ldr	r3, [pc, #456]	; (80057d0 <LCD_Init+0x3c18>)
 8005608:	2280      	movs	r2, #128	; 0x80
 800560a:	611a      	str	r2, [r3, #16]
 800560c:	4b70      	ldr	r3, [pc, #448]	; (80057d0 <LCD_Init+0x3c18>)
 800560e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005612:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8005614:	4b6e      	ldr	r3, [pc, #440]	; (80057d0 <LCD_Init+0x3c18>)
 8005616:	f44f 7280 	mov.w	r2, #256	; 0x100
 800561a:	611a      	str	r2, [r3, #16]
 800561c:	4b6c      	ldr	r3, [pc, #432]	; (80057d0 <LCD_Init+0x3c18>)
 800561e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005622:	615a      	str	r2, [r3, #20]
 8005624:	4b6b      	ldr	r3, [pc, #428]	; (80057d4 <LCD_Init+0x3c1c>)
 8005626:	2200      	movs	r2, #0
 8005628:	60da      	str	r2, [r3, #12]
 800562a:	4b69      	ldr	r3, [pc, #420]	; (80057d0 <LCD_Init+0x3c18>)
 800562c:	2280      	movs	r2, #128	; 0x80
 800562e:	615a      	str	r2, [r3, #20]
 8005630:	4b67      	ldr	r3, [pc, #412]	; (80057d0 <LCD_Init+0x3c18>)
 8005632:	2280      	movs	r2, #128	; 0x80
 8005634:	611a      	str	r2, [r3, #16]
 8005636:	4b66      	ldr	r3, [pc, #408]	; (80057d0 <LCD_Init+0x3c18>)
 8005638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800563c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 800563e:	4b64      	ldr	r3, [pc, #400]	; (80057d0 <LCD_Init+0x3c18>)
 8005640:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005644:	611a      	str	r2, [r3, #16]
 8005646:	4b62      	ldr	r3, [pc, #392]	; (80057d0 <LCD_Init+0x3c18>)
 8005648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800564c:	615a      	str	r2, [r3, #20]
 800564e:	4b61      	ldr	r3, [pc, #388]	; (80057d4 <LCD_Init+0x3c1c>)
 8005650:	2200      	movs	r2, #0
 8005652:	60da      	str	r2, [r3, #12]
 8005654:	4b5e      	ldr	r3, [pc, #376]	; (80057d0 <LCD_Init+0x3c18>)
 8005656:	2280      	movs	r2, #128	; 0x80
 8005658:	615a      	str	r2, [r3, #20]
 800565a:	4b5d      	ldr	r3, [pc, #372]	; (80057d0 <LCD_Init+0x3c18>)
 800565c:	2280      	movs	r2, #128	; 0x80
 800565e:	611a      	str	r2, [r3, #16]
 8005660:	4b5b      	ldr	r3, [pc, #364]	; (80057d0 <LCD_Init+0x3c18>)
 8005662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005666:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005668:	4b59      	ldr	r3, [pc, #356]	; (80057d0 <LCD_Init+0x3c18>)
 800566a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800566e:	611a      	str	r2, [r3, #16]
 8005670:	4b57      	ldr	r3, [pc, #348]	; (80057d0 <LCD_Init+0x3c18>)
 8005672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005676:	615a      	str	r2, [r3, #20]
 8005678:	4b56      	ldr	r3, [pc, #344]	; (80057d4 <LCD_Init+0x3c1c>)
 800567a:	2200      	movs	r2, #0
 800567c:	60da      	str	r2, [r3, #12]
 800567e:	4b54      	ldr	r3, [pc, #336]	; (80057d0 <LCD_Init+0x3c18>)
 8005680:	2280      	movs	r2, #128	; 0x80
 8005682:	615a      	str	r2, [r3, #20]
 8005684:	4b52      	ldr	r3, [pc, #328]	; (80057d0 <LCD_Init+0x3c18>)
 8005686:	2280      	movs	r2, #128	; 0x80
 8005688:	611a      	str	r2, [r3, #16]
 800568a:	4b51      	ldr	r3, [pc, #324]	; (80057d0 <LCD_Init+0x3c18>)
 800568c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005690:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005692:	4b4f      	ldr	r3, [pc, #316]	; (80057d0 <LCD_Init+0x3c18>)
 8005694:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005698:	611a      	str	r2, [r3, #16]
 800569a:	4b4d      	ldr	r3, [pc, #308]	; (80057d0 <LCD_Init+0x3c18>)
 800569c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056a0:	615a      	str	r2, [r3, #20]
 80056a2:	4b4c      	ldr	r3, [pc, #304]	; (80057d4 <LCD_Init+0x3c1c>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	60da      	str	r2, [r3, #12]
 80056a8:	4b49      	ldr	r3, [pc, #292]	; (80057d0 <LCD_Init+0x3c18>)
 80056aa:	2280      	movs	r2, #128	; 0x80
 80056ac:	615a      	str	r2, [r3, #20]
 80056ae:	4b48      	ldr	r3, [pc, #288]	; (80057d0 <LCD_Init+0x3c18>)
 80056b0:	2280      	movs	r2, #128	; 0x80
 80056b2:	611a      	str	r2, [r3, #16]
 80056b4:	4b46      	ldr	r3, [pc, #280]	; (80057d0 <LCD_Init+0x3c18>)
 80056b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ba:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 80056bc:	20b6      	movs	r0, #182	; 0xb6
 80056be:	f7fb fa19 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 80056c2:	4b43      	ldr	r3, [pc, #268]	; (80057d0 <LCD_Init+0x3c18>)
 80056c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056c8:	611a      	str	r2, [r3, #16]
 80056ca:	4b41      	ldr	r3, [pc, #260]	; (80057d0 <LCD_Init+0x3c18>)
 80056cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056d0:	615a      	str	r2, [r3, #20]
 80056d2:	4b40      	ldr	r3, [pc, #256]	; (80057d4 <LCD_Init+0x3c1c>)
 80056d4:	2202      	movs	r2, #2
 80056d6:	60da      	str	r2, [r3, #12]
 80056d8:	4b3d      	ldr	r3, [pc, #244]	; (80057d0 <LCD_Init+0x3c18>)
 80056da:	2280      	movs	r2, #128	; 0x80
 80056dc:	615a      	str	r2, [r3, #20]
 80056de:	4b3c      	ldr	r3, [pc, #240]	; (80057d0 <LCD_Init+0x3c18>)
 80056e0:	2280      	movs	r2, #128	; 0x80
 80056e2:	611a      	str	r2, [r3, #16]
 80056e4:	4b3a      	ldr	r3, [pc, #232]	; (80057d0 <LCD_Init+0x3c18>)
 80056e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056ea:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 80056ec:	4b38      	ldr	r3, [pc, #224]	; (80057d0 <LCD_Init+0x3c18>)
 80056ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056f2:	611a      	str	r2, [r3, #16]
 80056f4:	4b36      	ldr	r3, [pc, #216]	; (80057d0 <LCD_Init+0x3c18>)
 80056f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056fa:	615a      	str	r2, [r3, #20]
 80056fc:	4b35      	ldr	r3, [pc, #212]	; (80057d4 <LCD_Init+0x3c1c>)
 80056fe:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8005702:	60da      	str	r2, [r3, #12]
 8005704:	4b32      	ldr	r3, [pc, #200]	; (80057d0 <LCD_Init+0x3c18>)
 8005706:	2280      	movs	r2, #128	; 0x80
 8005708:	615a      	str	r2, [r3, #20]
 800570a:	4b31      	ldr	r3, [pc, #196]	; (80057d0 <LCD_Init+0x3c18>)
 800570c:	2280      	movs	r2, #128	; 0x80
 800570e:	611a      	str	r2, [r3, #16]
 8005710:	4b2f      	ldr	r3, [pc, #188]	; (80057d0 <LCD_Init+0x3c18>)
 8005712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005716:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8005718:	4b2d      	ldr	r3, [pc, #180]	; (80057d0 <LCD_Init+0x3c18>)
 800571a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800571e:	611a      	str	r2, [r3, #16]
 8005720:	4b2b      	ldr	r3, [pc, #172]	; (80057d0 <LCD_Init+0x3c18>)
 8005722:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005726:	615a      	str	r2, [r3, #20]
 8005728:	4b2a      	ldr	r3, [pc, #168]	; (80057d4 <LCD_Init+0x3c1c>)
 800572a:	2200      	movs	r2, #0
 800572c:	60da      	str	r2, [r3, #12]
 800572e:	4b28      	ldr	r3, [pc, #160]	; (80057d0 <LCD_Init+0x3c18>)
 8005730:	2280      	movs	r2, #128	; 0x80
 8005732:	615a      	str	r2, [r3, #20]
 8005734:	4b26      	ldr	r3, [pc, #152]	; (80057d0 <LCD_Init+0x3c18>)
 8005736:	2280      	movs	r2, #128	; 0x80
 8005738:	611a      	str	r2, [r3, #16]
 800573a:	4b25      	ldr	r3, [pc, #148]	; (80057d0 <LCD_Init+0x3c18>)
 800573c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005740:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8005742:	4b23      	ldr	r3, [pc, #140]	; (80057d0 <LCD_Init+0x3c18>)
 8005744:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005748:	611a      	str	r2, [r3, #16]
 800574a:	4b21      	ldr	r3, [pc, #132]	; (80057d0 <LCD_Init+0x3c18>)
 800574c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005750:	615a      	str	r2, [r3, #20]
 8005752:	4b20      	ldr	r3, [pc, #128]	; (80057d4 <LCD_Init+0x3c1c>)
 8005754:	2217      	movs	r2, #23
 8005756:	60da      	str	r2, [r3, #12]
 8005758:	4b1d      	ldr	r3, [pc, #116]	; (80057d0 <LCD_Init+0x3c18>)
 800575a:	2280      	movs	r2, #128	; 0x80
 800575c:	615a      	str	r2, [r3, #20]
 800575e:	4b1c      	ldr	r3, [pc, #112]	; (80057d0 <LCD_Init+0x3c18>)
 8005760:	2280      	movs	r2, #128	; 0x80
 8005762:	611a      	str	r2, [r3, #16]
 8005764:	4b1a      	ldr	r3, [pc, #104]	; (80057d0 <LCD_Init+0x3c18>)
 8005766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800576a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 800576c:	4b18      	ldr	r3, [pc, #96]	; (80057d0 <LCD_Init+0x3c18>)
 800576e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005772:	611a      	str	r2, [r3, #16]
 8005774:	4b16      	ldr	r3, [pc, #88]	; (80057d0 <LCD_Init+0x3c18>)
 8005776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800577a:	615a      	str	r2, [r3, #20]
 800577c:	4b15      	ldr	r3, [pc, #84]	; (80057d4 <LCD_Init+0x3c1c>)
 800577e:	2215      	movs	r2, #21
 8005780:	60da      	str	r2, [r3, #12]
 8005782:	4b13      	ldr	r3, [pc, #76]	; (80057d0 <LCD_Init+0x3c18>)
 8005784:	2280      	movs	r2, #128	; 0x80
 8005786:	615a      	str	r2, [r3, #20]
 8005788:	4b11      	ldr	r3, [pc, #68]	; (80057d0 <LCD_Init+0x3c18>)
 800578a:	2280      	movs	r2, #128	; 0x80
 800578c:	611a      	str	r2, [r3, #16]
 800578e:	4b10      	ldr	r3, [pc, #64]	; (80057d0 <LCD_Init+0x3c18>)
 8005790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005794:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005796:	4b0e      	ldr	r3, [pc, #56]	; (80057d0 <LCD_Init+0x3c18>)
 8005798:	f44f 7280 	mov.w	r2, #256	; 0x100
 800579c:	611a      	str	r2, [r3, #16]
 800579e:	4b0c      	ldr	r3, [pc, #48]	; (80057d0 <LCD_Init+0x3c18>)
 80057a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057a4:	615a      	str	r2, [r3, #20]
 80057a6:	4b0b      	ldr	r3, [pc, #44]	; (80057d4 <LCD_Init+0x3c1c>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	60da      	str	r2, [r3, #12]
 80057ac:	4b08      	ldr	r3, [pc, #32]	; (80057d0 <LCD_Init+0x3c18>)
 80057ae:	2280      	movs	r2, #128	; 0x80
 80057b0:	615a      	str	r2, [r3, #20]
 80057b2:	4b07      	ldr	r3, [pc, #28]	; (80057d0 <LCD_Init+0x3c18>)
 80057b4:	2280      	movs	r2, #128	; 0x80
 80057b6:	611a      	str	r2, [r3, #16]
 80057b8:	4b05      	ldr	r3, [pc, #20]	; (80057d0 <LCD_Init+0x3c18>)
 80057ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057be:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80057c0:	4b03      	ldr	r3, [pc, #12]	; (80057d0 <LCD_Init+0x3c18>)
 80057c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057c6:	611a      	str	r2, [r3, #16]
 80057c8:	4b01      	ldr	r3, [pc, #4]	; (80057d0 <LCD_Init+0x3c18>)
 80057ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057ce:	e003      	b.n	80057d8 <LCD_Init+0x3c20>
 80057d0:	40011000 	.word	0x40011000
 80057d4:	40010c00 	.word	0x40010c00
 80057d8:	615a      	str	r2, [r3, #20]
 80057da:	4b8b      	ldr	r3, [pc, #556]	; (8005a08 <LCD_Init+0x3e50>)
 80057dc:	2200      	movs	r2, #0
 80057de:	60da      	str	r2, [r3, #12]
 80057e0:	4b8a      	ldr	r3, [pc, #552]	; (8005a0c <LCD_Init+0x3e54>)
 80057e2:	2280      	movs	r2, #128	; 0x80
 80057e4:	615a      	str	r2, [r3, #20]
 80057e6:	4b89      	ldr	r3, [pc, #548]	; (8005a0c <LCD_Init+0x3e54>)
 80057e8:	2280      	movs	r2, #128	; 0x80
 80057ea:	611a      	str	r2, [r3, #16]
 80057ec:	4b87      	ldr	r3, [pc, #540]	; (8005a0c <LCD_Init+0x3e54>)
 80057ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057f2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 80057f4:	20f0      	movs	r0, #240	; 0xf0
 80057f6:	f7fb f97d 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 80057fa:	4b84      	ldr	r3, [pc, #528]	; (8005a0c <LCD_Init+0x3e54>)
 80057fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005800:	611a      	str	r2, [r3, #16]
 8005802:	4b82      	ldr	r3, [pc, #520]	; (8005a0c <LCD_Init+0x3e54>)
 8005804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005808:	615a      	str	r2, [r3, #20]
 800580a:	4b7f      	ldr	r3, [pc, #508]	; (8005a08 <LCD_Init+0x3e50>)
 800580c:	2203      	movs	r2, #3
 800580e:	60da      	str	r2, [r3, #12]
 8005810:	4b7e      	ldr	r3, [pc, #504]	; (8005a0c <LCD_Init+0x3e54>)
 8005812:	2280      	movs	r2, #128	; 0x80
 8005814:	615a      	str	r2, [r3, #20]
 8005816:	4b7d      	ldr	r3, [pc, #500]	; (8005a0c <LCD_Init+0x3e54>)
 8005818:	2280      	movs	r2, #128	; 0x80
 800581a:	611a      	str	r2, [r3, #16]
 800581c:	4b7b      	ldr	r3, [pc, #492]	; (8005a0c <LCD_Init+0x3e54>)
 800581e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005822:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8005824:	2029      	movs	r0, #41	; 0x29
 8005826:	f7fb f965 	bl	8000af4 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 800582a:	20d0      	movs	r0, #208	; 0xd0
 800582c:	f7fb f962 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005830:	4b76      	ldr	r3, [pc, #472]	; (8005a0c <LCD_Init+0x3e54>)
 8005832:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005836:	611a      	str	r2, [r3, #16]
 8005838:	4b74      	ldr	r3, [pc, #464]	; (8005a0c <LCD_Init+0x3e54>)
 800583a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800583e:	615a      	str	r2, [r3, #20]
 8005840:	4b71      	ldr	r3, [pc, #452]	; (8005a08 <LCD_Init+0x3e50>)
 8005842:	2200      	movs	r2, #0
 8005844:	60da      	str	r2, [r3, #12]
 8005846:	4b71      	ldr	r3, [pc, #452]	; (8005a0c <LCD_Init+0x3e54>)
 8005848:	2280      	movs	r2, #128	; 0x80
 800584a:	615a      	str	r2, [r3, #20]
 800584c:	4b6f      	ldr	r3, [pc, #444]	; (8005a0c <LCD_Init+0x3e54>)
 800584e:	2280      	movs	r2, #128	; 0x80
 8005850:	611a      	str	r2, [r3, #16]
 8005852:	4b6e      	ldr	r3, [pc, #440]	; (8005a0c <LCD_Init+0x3e54>)
 8005854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005858:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 800585a:	20be      	movs	r0, #190	; 0xbe
 800585c:	f7fb f94a 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8005860:	4b6a      	ldr	r3, [pc, #424]	; (8005a0c <LCD_Init+0x3e54>)
 8005862:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005866:	611a      	str	r2, [r3, #16]
 8005868:	4b68      	ldr	r3, [pc, #416]	; (8005a0c <LCD_Init+0x3e54>)
 800586a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800586e:	615a      	str	r2, [r3, #20]
 8005870:	4b65      	ldr	r3, [pc, #404]	; (8005a08 <LCD_Init+0x3e50>)
 8005872:	2205      	movs	r2, #5
 8005874:	60da      	str	r2, [r3, #12]
 8005876:	4b65      	ldr	r3, [pc, #404]	; (8005a0c <LCD_Init+0x3e54>)
 8005878:	2280      	movs	r2, #128	; 0x80
 800587a:	615a      	str	r2, [r3, #20]
 800587c:	4b63      	ldr	r3, [pc, #396]	; (8005a0c <LCD_Init+0x3e54>)
 800587e:	2280      	movs	r2, #128	; 0x80
 8005880:	611a      	str	r2, [r3, #16]
 8005882:	4b62      	ldr	r3, [pc, #392]	; (8005a0c <LCD_Init+0x3e54>)
 8005884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005888:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 800588a:	4b60      	ldr	r3, [pc, #384]	; (8005a0c <LCD_Init+0x3e54>)
 800588c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005890:	611a      	str	r2, [r3, #16]
 8005892:	4b5e      	ldr	r3, [pc, #376]	; (8005a0c <LCD_Init+0x3e54>)
 8005894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005898:	615a      	str	r2, [r3, #20]
 800589a:	4b5b      	ldr	r3, [pc, #364]	; (8005a08 <LCD_Init+0x3e50>)
 800589c:	22fe      	movs	r2, #254	; 0xfe
 800589e:	60da      	str	r2, [r3, #12]
 80058a0:	4b5a      	ldr	r3, [pc, #360]	; (8005a0c <LCD_Init+0x3e54>)
 80058a2:	2280      	movs	r2, #128	; 0x80
 80058a4:	615a      	str	r2, [r3, #20]
 80058a6:	4b59      	ldr	r3, [pc, #356]	; (8005a0c <LCD_Init+0x3e54>)
 80058a8:	2280      	movs	r2, #128	; 0x80
 80058aa:	611a      	str	r2, [r3, #16]
 80058ac:	4b57      	ldr	r3, [pc, #348]	; (8005a0c <LCD_Init+0x3e54>)
 80058ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058b2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 80058b4:	4b55      	ldr	r3, [pc, #340]	; (8005a0c <LCD_Init+0x3e54>)
 80058b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058ba:	611a      	str	r2, [r3, #16]
 80058bc:	4b53      	ldr	r3, [pc, #332]	; (8005a0c <LCD_Init+0x3e54>)
 80058be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058c2:	615a      	str	r2, [r3, #20]
 80058c4:	4b50      	ldr	r3, [pc, #320]	; (8005a08 <LCD_Init+0x3e50>)
 80058c6:	2201      	movs	r2, #1
 80058c8:	60da      	str	r2, [r3, #12]
 80058ca:	4b50      	ldr	r3, [pc, #320]	; (8005a0c <LCD_Init+0x3e54>)
 80058cc:	2280      	movs	r2, #128	; 0x80
 80058ce:	615a      	str	r2, [r3, #20]
 80058d0:	4b4e      	ldr	r3, [pc, #312]	; (8005a0c <LCD_Init+0x3e54>)
 80058d2:	2280      	movs	r2, #128	; 0x80
 80058d4:	611a      	str	r2, [r3, #16]
 80058d6:	4b4d      	ldr	r3, [pc, #308]	; (8005a0c <LCD_Init+0x3e54>)
 80058d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058dc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 80058de:	4b4b      	ldr	r3, [pc, #300]	; (8005a0c <LCD_Init+0x3e54>)
 80058e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058e4:	611a      	str	r2, [r3, #16]
 80058e6:	4b49      	ldr	r3, [pc, #292]	; (8005a0c <LCD_Init+0x3e54>)
 80058e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ec:	615a      	str	r2, [r3, #20]
 80058ee:	4b46      	ldr	r3, [pc, #280]	; (8005a08 <LCD_Init+0x3e50>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	60da      	str	r2, [r3, #12]
 80058f4:	4b45      	ldr	r3, [pc, #276]	; (8005a0c <LCD_Init+0x3e54>)
 80058f6:	2280      	movs	r2, #128	; 0x80
 80058f8:	615a      	str	r2, [r3, #20]
 80058fa:	4b44      	ldr	r3, [pc, #272]	; (8005a0c <LCD_Init+0x3e54>)
 80058fc:	2280      	movs	r2, #128	; 0x80
 80058fe:	611a      	str	r2, [r3, #16]
 8005900:	4b42      	ldr	r3, [pc, #264]	; (8005a0c <LCD_Init+0x3e54>)
 8005902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005906:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8005908:	4b40      	ldr	r3, [pc, #256]	; (8005a0c <LCD_Init+0x3e54>)
 800590a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800590e:	611a      	str	r2, [r3, #16]
 8005910:	4b3e      	ldr	r3, [pc, #248]	; (8005a0c <LCD_Init+0x3e54>)
 8005912:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005916:	615a      	str	r2, [r3, #20]
 8005918:	4b3b      	ldr	r3, [pc, #236]	; (8005a08 <LCD_Init+0x3e50>)
 800591a:	2200      	movs	r2, #0
 800591c:	60da      	str	r2, [r3, #12]
 800591e:	4b3b      	ldr	r3, [pc, #236]	; (8005a0c <LCD_Init+0x3e54>)
 8005920:	2280      	movs	r2, #128	; 0x80
 8005922:	615a      	str	r2, [r3, #20]
 8005924:	4b39      	ldr	r3, [pc, #228]	; (8005a0c <LCD_Init+0x3e54>)
 8005926:	2280      	movs	r2, #128	; 0x80
 8005928:	611a      	str	r2, [r3, #16]
 800592a:	4b38      	ldr	r3, [pc, #224]	; (8005a0c <LCD_Init+0x3e54>)
 800592c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005930:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8005932:	4b36      	ldr	r3, [pc, #216]	; (8005a0c <LCD_Init+0x3e54>)
 8005934:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005938:	611a      	str	r2, [r3, #16]
 800593a:	4b34      	ldr	r3, [pc, #208]	; (8005a0c <LCD_Init+0x3e54>)
 800593c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005940:	615a      	str	r2, [r3, #20]
 8005942:	4b31      	ldr	r3, [pc, #196]	; (8005a08 <LCD_Init+0x3e50>)
 8005944:	2200      	movs	r2, #0
 8005946:	60da      	str	r2, [r3, #12]
 8005948:	4b30      	ldr	r3, [pc, #192]	; (8005a0c <LCD_Init+0x3e54>)
 800594a:	2280      	movs	r2, #128	; 0x80
 800594c:	615a      	str	r2, [r3, #20]
 800594e:	4b2f      	ldr	r3, [pc, #188]	; (8005a0c <LCD_Init+0x3e54>)
 8005950:	2280      	movs	r2, #128	; 0x80
 8005952:	611a      	str	r2, [r3, #16]
 8005954:	4b2d      	ldr	r3, [pc, #180]	; (8005a0c <LCD_Init+0x3e54>)
 8005956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800595a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 800595c:	20b8      	movs	r0, #184	; 0xb8
 800595e:	f7fb f8c9 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8005962:	4b2a      	ldr	r3, [pc, #168]	; (8005a0c <LCD_Init+0x3e54>)
 8005964:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005968:	611a      	str	r2, [r3, #16]
 800596a:	4b28      	ldr	r3, [pc, #160]	; (8005a0c <LCD_Init+0x3e54>)
 800596c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005970:	615a      	str	r2, [r3, #20]
 8005972:	4b25      	ldr	r3, [pc, #148]	; (8005a08 <LCD_Init+0x3e50>)
 8005974:	2203      	movs	r2, #3
 8005976:	60da      	str	r2, [r3, #12]
 8005978:	4b24      	ldr	r3, [pc, #144]	; (8005a0c <LCD_Init+0x3e54>)
 800597a:	2280      	movs	r2, #128	; 0x80
 800597c:	615a      	str	r2, [r3, #20]
 800597e:	4b23      	ldr	r3, [pc, #140]	; (8005a0c <LCD_Init+0x3e54>)
 8005980:	2280      	movs	r2, #128	; 0x80
 8005982:	611a      	str	r2, [r3, #16]
 8005984:	4b21      	ldr	r3, [pc, #132]	; (8005a0c <LCD_Init+0x3e54>)
 8005986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800598a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 800598c:	4b1f      	ldr	r3, [pc, #124]	; (8005a0c <LCD_Init+0x3e54>)
 800598e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005992:	611a      	str	r2, [r3, #16]
 8005994:	4b1d      	ldr	r3, [pc, #116]	; (8005a0c <LCD_Init+0x3e54>)
 8005996:	f44f 7200 	mov.w	r2, #512	; 0x200
 800599a:	615a      	str	r2, [r3, #20]
 800599c:	4b1a      	ldr	r3, [pc, #104]	; (8005a08 <LCD_Init+0x3e50>)
 800599e:	2201      	movs	r2, #1
 80059a0:	60da      	str	r2, [r3, #12]
 80059a2:	4b1a      	ldr	r3, [pc, #104]	; (8005a0c <LCD_Init+0x3e54>)
 80059a4:	2280      	movs	r2, #128	; 0x80
 80059a6:	615a      	str	r2, [r3, #20]
 80059a8:	4b18      	ldr	r3, [pc, #96]	; (8005a0c <LCD_Init+0x3e54>)
 80059aa:	2280      	movs	r2, #128	; 0x80
 80059ac:	611a      	str	r2, [r3, #16]
 80059ae:	4b17      	ldr	r3, [pc, #92]	; (8005a0c <LCD_Init+0x3e54>)
 80059b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059b4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 80059b6:	20ba      	movs	r0, #186	; 0xba
 80059b8:	f7fb f89c 	bl	8000af4 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 80059bc:	4b13      	ldr	r3, [pc, #76]	; (8005a0c <LCD_Init+0x3e54>)
 80059be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059c2:	611a      	str	r2, [r3, #16]
 80059c4:	4b11      	ldr	r3, [pc, #68]	; (8005a0c <LCD_Init+0x3e54>)
 80059c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059ca:	615a      	str	r2, [r3, #20]
 80059cc:	4b0e      	ldr	r3, [pc, #56]	; (8005a08 <LCD_Init+0x3e50>)
 80059ce:	2201      	movs	r2, #1
 80059d0:	60da      	str	r2, [r3, #12]
 80059d2:	4b0e      	ldr	r3, [pc, #56]	; (8005a0c <LCD_Init+0x3e54>)
 80059d4:	2280      	movs	r2, #128	; 0x80
 80059d6:	615a      	str	r2, [r3, #20]
 80059d8:	4b0c      	ldr	r3, [pc, #48]	; (8005a0c <LCD_Init+0x3e54>)
 80059da:	2280      	movs	r2, #128	; 0x80
 80059dc:	611a      	str	r2, [r3, #16]
 80059de:	4b0b      	ldr	r3, [pc, #44]	; (8005a0c <LCD_Init+0x3e54>)
 80059e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059e4:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 80059e6:	2064      	movs	r0, #100	; 0x64
 80059e8:	f7fb ff36 	bl	8001858 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 80059ec:	2000      	movs	r0, #0
 80059ee:	f7fb ffd7 	bl	80019a0 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 80059f2:	4b07      	ldr	r3, [pc, #28]	; (8005a10 <LCD_Init+0x3e58>)
 80059f4:	2201      	movs	r2, #1
 80059f6:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 80059f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80059fc:	f000 f80a 	bl	8005a14 <LCD_Clear>
}
 8005a00:	bf00      	nop
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	40010c00 	.word	0x40010c00
 8005a0c:	40011000 	.word	0x40011000
 8005a10:	422201a8 	.word	0x422201a8

08005a14 <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8005a22:	4b2a      	ldr	r3, [pc, #168]	; (8005acc <LCD_Clear+0xb8>)
 8005a24:	881b      	ldrh	r3, [r3, #0]
 8005a26:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8005a28:	4b28      	ldr	r3, [pc, #160]	; (8005acc <LCD_Clear+0xb8>)
 8005a2a:	885b      	ldrh	r3, [r3, #2]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	fb02 f303 	mul.w	r3, r2, r3
 8005a34:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8005a36:	4b25      	ldr	r3, [pc, #148]	; (8005acc <LCD_Clear+0xb8>)
 8005a38:	889b      	ldrh	r3, [r3, #4]
 8005a3a:	f646 0204 	movw	r2, #26628	; 0x6804
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d11a      	bne.n	8005a78 <LCD_Clear+0x64>
 8005a42:	4b22      	ldr	r3, [pc, #136]	; (8005acc <LCD_Clear+0xb8>)
 8005a44:	799b      	ldrb	r3, [r3, #6]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d116      	bne.n	8005a78 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8005a4a:	4b20      	ldr	r3, [pc, #128]	; (8005acc <LCD_Clear+0xb8>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8005a50:	4b1e      	ldr	r3, [pc, #120]	; (8005acc <LCD_Clear+0xb8>)
 8005a52:	222a      	movs	r2, #42	; 0x2a
 8005a54:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8005a56:	4b1d      	ldr	r3, [pc, #116]	; (8005acc <LCD_Clear+0xb8>)
 8005a58:	222b      	movs	r2, #43	; 0x2b
 8005a5a:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	2000      	movs	r0, #0
 8005a60:	f7fb f91a 	bl	8000c98 <LCD_SetCursor>
		lcddev.dir = 1;
 8005a64:	4b19      	ldr	r3, [pc, #100]	; (8005acc <LCD_Clear+0xb8>)
 8005a66:	2201      	movs	r2, #1
 8005a68:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8005a6a:	4b18      	ldr	r3, [pc, #96]	; (8005acc <LCD_Clear+0xb8>)
 8005a6c:	222b      	movs	r2, #43	; 0x2b
 8005a6e:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8005a70:	4b16      	ldr	r3, [pc, #88]	; (8005acc <LCD_Clear+0xb8>)
 8005a72:	222a      	movs	r2, #42	; 0x2a
 8005a74:	819a      	strh	r2, [r3, #12]
 8005a76:	e003      	b.n	8005a80 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8005a78:	2100      	movs	r1, #0
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	f7fb f90c 	bl	8000c98 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8005a80:	f7fb f8fe 	bl	8000c80 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8005a84:	2300      	movs	r3, #0
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	e017      	b.n	8005aba <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8005a8a:	4b11      	ldr	r3, [pc, #68]	; (8005ad0 <LCD_Clear+0xbc>)
 8005a8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a90:	611a      	str	r2, [r3, #16]
 8005a92:	4b0f      	ldr	r3, [pc, #60]	; (8005ad0 <LCD_Clear+0xbc>)
 8005a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a98:	615a      	str	r2, [r3, #20]
 8005a9a:	4a0e      	ldr	r2, [pc, #56]	; (8005ad4 <LCD_Clear+0xc0>)
 8005a9c:	88fb      	ldrh	r3, [r7, #6]
 8005a9e:	60d3      	str	r3, [r2, #12]
 8005aa0:	4b0b      	ldr	r3, [pc, #44]	; (8005ad0 <LCD_Clear+0xbc>)
 8005aa2:	2280      	movs	r2, #128	; 0x80
 8005aa4:	615a      	str	r2, [r3, #20]
 8005aa6:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <LCD_Clear+0xbc>)
 8005aa8:	2280      	movs	r2, #128	; 0x80
 8005aaa:	611a      	str	r2, [r3, #16]
 8005aac:	4b08      	ldr	r3, [pc, #32]	; (8005ad0 <LCD_Clear+0xbc>)
 8005aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ab2:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	60fb      	str	r3, [r7, #12]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d3e3      	bcc.n	8005a8a <LCD_Clear+0x76>
}
 8005ac2:	bf00      	nop
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	20000028 	.word	0x20000028
 8005ad0:	40011000 	.word	0x40011000
 8005ad4:	40010c00 	.word	0x40010c00

08005ad8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8005adc:	f000 f918 	bl	8005d10 <HAL_Init>

	/* USER CODE BEGIN Init */
	LCD_Init();
 8005ae0:	f7fc f86a 	bl	8001bb8 <LCD_Init>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8005ae4:	f000 f803 	bl	8005aee <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8005ae8:	f7fa ff8c 	bl	8000a04 <MX_GPIO_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */


	while (1) {
 8005aec:	e7fe      	b.n	8005aec <main+0x14>

08005aee <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b090      	sub	sp, #64	; 0x40
 8005af2:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8005af4:	f107 0318 	add.w	r3, r7, #24
 8005af8:	2228      	movs	r2, #40	; 0x28
 8005afa:	2100      	movs	r1, #0
 8005afc:	4618      	mov	r0, r3
 8005afe:	f001 f84b 	bl	8006b98 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8005b02:	1d3b      	adds	r3, r7, #4
 8005b04:	2200      	movs	r2, #0
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	605a      	str	r2, [r3, #4]
 8005b0a:	609a      	str	r2, [r3, #8]
 8005b0c:	60da      	str	r2, [r3, #12]
 8005b0e:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005b10:	2301      	movs	r3, #1
 8005b12:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005b14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b18:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005b22:	2302      	movs	r3, #2
 8005b24:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005b26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b2a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005b2c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005b30:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8005b32:	f107 0318 	add.w	r3, r7, #24
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 fc20 	bl	800637c <HAL_RCC_OscConfig>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <SystemClock_Config+0x58>
		Error_Handler();
 8005b42:	f000 f819 	bl	8005b78 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8005b46:	230f      	movs	r3, #15
 8005b48:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005b52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b56:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8005b5c:	1d3b      	adds	r3, r7, #4
 8005b5e:	2102      	movs	r1, #2
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 fe8b 	bl	800687c <HAL_RCC_ClockConfig>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <SystemClock_Config+0x82>
		Error_Handler();
 8005b6c:	f000 f804 	bl	8005b78 <Error_Handler>
	}
}
 8005b70:	bf00      	nop
 8005b72:	3740      	adds	r7, #64	; 0x40
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8005b78:	b480      	push	{r7}
 8005b7a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8005b7c:	bf00      	nop
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bc80      	pop	{r7}
 8005b82:	4770      	bx	lr

08005b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005b8a:	4b15      	ldr	r3, [pc, #84]	; (8005be0 <HAL_MspInit+0x5c>)
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	4a14      	ldr	r2, [pc, #80]	; (8005be0 <HAL_MspInit+0x5c>)
 8005b90:	f043 0301 	orr.w	r3, r3, #1
 8005b94:	6193      	str	r3, [r2, #24]
 8005b96:	4b12      	ldr	r3, [pc, #72]	; (8005be0 <HAL_MspInit+0x5c>)
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	60bb      	str	r3, [r7, #8]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ba2:	4b0f      	ldr	r3, [pc, #60]	; (8005be0 <HAL_MspInit+0x5c>)
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	4a0e      	ldr	r2, [pc, #56]	; (8005be0 <HAL_MspInit+0x5c>)
 8005ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bac:	61d3      	str	r3, [r2, #28]
 8005bae:	4b0c      	ldr	r3, [pc, #48]	; (8005be0 <HAL_MspInit+0x5c>)
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb6:	607b      	str	r3, [r7, #4]
 8005bb8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005bba:	4b0a      	ldr	r3, [pc, #40]	; (8005be4 <HAL_MspInit+0x60>)
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005bce:	60fb      	str	r3, [r7, #12]
 8005bd0:	4a04      	ldr	r2, [pc, #16]	; (8005be4 <HAL_MspInit+0x60>)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005bd6:	bf00      	nop
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bc80      	pop	{r7}
 8005bde:	4770      	bx	lr
 8005be0:	40021000 	.word	0x40021000
 8005be4:	40010000 	.word	0x40010000

08005be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005be8:	b480      	push	{r7}
 8005bea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005bec:	bf00      	nop
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bc80      	pop	{r7}
 8005bf2:	4770      	bx	lr

08005bf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005bf8:	e7fe      	b.n	8005bf8 <HardFault_Handler+0x4>

08005bfa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005bfe:	e7fe      	b.n	8005bfe <MemManage_Handler+0x4>

08005c00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c00:	b480      	push	{r7}
 8005c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c04:	e7fe      	b.n	8005c04 <BusFault_Handler+0x4>

08005c06 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c06:	b480      	push	{r7}
 8005c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c0a:	e7fe      	b.n	8005c0a <UsageFault_Handler+0x4>

08005c0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005c10:	bf00      	nop
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bc80      	pop	{r7}
 8005c16:	4770      	bx	lr

08005c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c1c:	bf00      	nop
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bc80      	pop	{r7}
 8005c22:	4770      	bx	lr

08005c24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005c24:	b480      	push	{r7}
 8005c26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005c28:	bf00      	nop
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bc80      	pop	{r7}
 8005c2e:	4770      	bx	lr

08005c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005c34:	f000 f8b2 	bl	8005d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c38:	bf00      	nop
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8005c40:	2020      	movs	r0, #32
 8005c42:	f000 fb79 	bl	8006338 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005c46:	bf00      	nop
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005c4e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005c52:	f000 fb71 	bl	8006338 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005c56:	bf00      	nop
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005c60:	4b15      	ldr	r3, [pc, #84]	; (8005cb8 <SystemInit+0x5c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a14      	ldr	r2, [pc, #80]	; (8005cb8 <SystemInit+0x5c>)
 8005c66:	f043 0301 	orr.w	r3, r3, #1
 8005c6a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005c6c:	4b12      	ldr	r3, [pc, #72]	; (8005cb8 <SystemInit+0x5c>)
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	4911      	ldr	r1, [pc, #68]	; (8005cb8 <SystemInit+0x5c>)
 8005c72:	4b12      	ldr	r3, [pc, #72]	; (8005cbc <SystemInit+0x60>)
 8005c74:	4013      	ands	r3, r2
 8005c76:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005c78:	4b0f      	ldr	r3, [pc, #60]	; (8005cb8 <SystemInit+0x5c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a0e      	ldr	r2, [pc, #56]	; (8005cb8 <SystemInit+0x5c>)
 8005c7e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c86:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005c88:	4b0b      	ldr	r3, [pc, #44]	; (8005cb8 <SystemInit+0x5c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a0a      	ldr	r2, [pc, #40]	; (8005cb8 <SystemInit+0x5c>)
 8005c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c92:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005c94:	4b08      	ldr	r3, [pc, #32]	; (8005cb8 <SystemInit+0x5c>)
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	4a07      	ldr	r2, [pc, #28]	; (8005cb8 <SystemInit+0x5c>)
 8005c9a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005c9e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005ca0:	4b05      	ldr	r3, [pc, #20]	; (8005cb8 <SystemInit+0x5c>)
 8005ca2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005ca6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005ca8:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <SystemInit+0x64>)
 8005caa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005cae:	609a      	str	r2, [r3, #8]
#endif 
}
 8005cb0:	bf00      	nop
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bc80      	pop	{r7}
 8005cb6:	4770      	bx	lr
 8005cb8:	40021000 	.word	0x40021000
 8005cbc:	f8ff0000 	.word	0xf8ff0000
 8005cc0:	e000ed00 	.word	0xe000ed00

08005cc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005cc4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005cc6:	e003      	b.n	8005cd0 <LoopCopyDataInit>

08005cc8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005cc8:	4b0b      	ldr	r3, [pc, #44]	; (8005cf8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005cca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005ccc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005cce:	3104      	adds	r1, #4

08005cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005cd0:	480a      	ldr	r0, [pc, #40]	; (8005cfc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005cd2:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005cd4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005cd6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005cd8:	d3f6      	bcc.n	8005cc8 <CopyDataInit>
  ldr r2, =_sbss
 8005cda:	4a0a      	ldr	r2, [pc, #40]	; (8005d04 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005cdc:	e002      	b.n	8005ce4 <LoopFillZerobss>

08005cde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005cde:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005ce0:	f842 3b04 	str.w	r3, [r2], #4

08005ce4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005ce4:	4b08      	ldr	r3, [pc, #32]	; (8005d08 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005ce6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005ce8:	d3f9      	bcc.n	8005cde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005cea:	f7ff ffb7 	bl	8005c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005cee:	f000 ff2f 	bl	8006b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005cf2:	f7ff fef1 	bl	8005ad8 <main>
  bx lr
 8005cf6:	4770      	bx	lr
  ldr r3, =_sidata
 8005cf8:	08006bec 	.word	0x08006bec
  ldr r0, =_sdata
 8005cfc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005d00:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8005d04:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8005d08:	2000003c 	.word	0x2000003c

08005d0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005d0c:	e7fe      	b.n	8005d0c <ADC1_2_IRQHandler>
	...

08005d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d14:	4b08      	ldr	r3, [pc, #32]	; (8005d38 <HAL_Init+0x28>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a07      	ldr	r2, [pc, #28]	; (8005d38 <HAL_Init+0x28>)
 8005d1a:	f043 0310 	orr.w	r3, r3, #16
 8005d1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d20:	2003      	movs	r0, #3
 8005d22:	f000 f945 	bl	8005fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005d26:	2000      	movs	r0, #0
 8005d28:	f000 f808 	bl	8005d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005d2c:	f7ff ff2a 	bl	8005b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	40022000 	.word	0x40022000

08005d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005d44:	4b12      	ldr	r3, [pc, #72]	; (8005d90 <HAL_InitTick+0x54>)
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	4b12      	ldr	r3, [pc, #72]	; (8005d94 <HAL_InitTick+0x58>)
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 f95d 	bl	800601a <HAL_SYSTICK_Config>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e00e      	b.n	8005d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b0f      	cmp	r3, #15
 8005d6e:	d80a      	bhi.n	8005d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d70:	2200      	movs	r2, #0
 8005d72:	6879      	ldr	r1, [r7, #4]
 8005d74:	f04f 30ff 	mov.w	r0, #4294967295
 8005d78:	f000 f925 	bl	8005fc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005d7c:	4a06      	ldr	r2, [pc, #24]	; (8005d98 <HAL_InitTick+0x5c>)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
 8005d84:	e000      	b.n	8005d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3708      	adds	r7, #8
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	20000000 	.word	0x20000000
 8005d94:	20000008 	.word	0x20000008
 8005d98:	20000004 	.word	0x20000004

08005d9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005da0:	4b05      	ldr	r3, [pc, #20]	; (8005db8 <HAL_IncTick+0x1c>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	461a      	mov	r2, r3
 8005da6:	4b05      	ldr	r3, [pc, #20]	; (8005dbc <HAL_IncTick+0x20>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4413      	add	r3, r2
 8005dac:	4a03      	ldr	r2, [pc, #12]	; (8005dbc <HAL_IncTick+0x20>)
 8005dae:	6013      	str	r3, [r2, #0]
}
 8005db0:	bf00      	nop
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bc80      	pop	{r7}
 8005db6:	4770      	bx	lr
 8005db8:	20000008 	.word	0x20000008
 8005dbc:	20000038 	.word	0x20000038

08005dc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8005dc4:	4b02      	ldr	r3, [pc, #8]	; (8005dd0 <HAL_GetTick+0x10>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bc80      	pop	{r7}
 8005dce:	4770      	bx	lr
 8005dd0:	20000038 	.word	0x20000038

08005dd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ddc:	f7ff fff0 	bl	8005dc0 <HAL_GetTick>
 8005de0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dec:	d005      	beq.n	8005dfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005dee:	4b09      	ldr	r3, [pc, #36]	; (8005e14 <HAL_Delay+0x40>)
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	461a      	mov	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4413      	add	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005dfa:	bf00      	nop
 8005dfc:	f7ff ffe0 	bl	8005dc0 <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d8f7      	bhi.n	8005dfc <HAL_Delay+0x28>
  {
  }
}
 8005e0c:	bf00      	nop
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	20000008 	.word	0x20000008

08005e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f003 0307 	and.w	r3, r3, #7
 8005e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e28:	4b0c      	ldr	r3, [pc, #48]	; (8005e5c <__NVIC_SetPriorityGrouping+0x44>)
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e34:	4013      	ands	r3, r2
 8005e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e4a:	4a04      	ldr	r2, [pc, #16]	; (8005e5c <__NVIC_SetPriorityGrouping+0x44>)
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	60d3      	str	r3, [r2, #12]
}
 8005e50:	bf00      	nop
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bc80      	pop	{r7}
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	e000ed00 	.word	0xe000ed00

08005e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e60:	b480      	push	{r7}
 8005e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e64:	4b04      	ldr	r3, [pc, #16]	; (8005e78 <__NVIC_GetPriorityGrouping+0x18>)
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	0a1b      	lsrs	r3, r3, #8
 8005e6a:	f003 0307 	and.w	r3, r3, #7
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bc80      	pop	{r7}
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	e000ed00 	.word	0xe000ed00

08005e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	4603      	mov	r3, r0
 8005e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	db0b      	blt.n	8005ea6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e8e:	79fb      	ldrb	r3, [r7, #7]
 8005e90:	f003 021f 	and.w	r2, r3, #31
 8005e94:	4906      	ldr	r1, [pc, #24]	; (8005eb0 <__NVIC_EnableIRQ+0x34>)
 8005e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e9a:	095b      	lsrs	r3, r3, #5
 8005e9c:	2001      	movs	r0, #1
 8005e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8005ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ea6:	bf00      	nop
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bc80      	pop	{r7}
 8005eae:	4770      	bx	lr
 8005eb0:	e000e100 	.word	0xe000e100

08005eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	4603      	mov	r3, r0
 8005ebc:	6039      	str	r1, [r7, #0]
 8005ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	db0a      	blt.n	8005ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	490c      	ldr	r1, [pc, #48]	; (8005f00 <__NVIC_SetPriority+0x4c>)
 8005ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ed2:	0112      	lsls	r2, r2, #4
 8005ed4:	b2d2      	uxtb	r2, r2
 8005ed6:	440b      	add	r3, r1
 8005ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005edc:	e00a      	b.n	8005ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	4908      	ldr	r1, [pc, #32]	; (8005f04 <__NVIC_SetPriority+0x50>)
 8005ee4:	79fb      	ldrb	r3, [r7, #7]
 8005ee6:	f003 030f 	and.w	r3, r3, #15
 8005eea:	3b04      	subs	r3, #4
 8005eec:	0112      	lsls	r2, r2, #4
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	440b      	add	r3, r1
 8005ef2:	761a      	strb	r2, [r3, #24]
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bc80      	pop	{r7}
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	e000e100 	.word	0xe000e100
 8005f04:	e000ed00 	.word	0xe000ed00

08005f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b089      	sub	sp, #36	; 0x24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f003 0307 	and.w	r3, r3, #7
 8005f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	f1c3 0307 	rsb	r3, r3, #7
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	bf28      	it	cs
 8005f26:	2304      	movcs	r3, #4
 8005f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	2b06      	cmp	r3, #6
 8005f30:	d902      	bls.n	8005f38 <NVIC_EncodePriority+0x30>
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	3b03      	subs	r3, #3
 8005f36:	e000      	b.n	8005f3a <NVIC_EncodePriority+0x32>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	fa02 f303 	lsl.w	r3, r2, r3
 8005f46:	43da      	mvns	r2, r3
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	401a      	ands	r2, r3
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f50:	f04f 31ff 	mov.w	r1, #4294967295
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	fa01 f303 	lsl.w	r3, r1, r3
 8005f5a:	43d9      	mvns	r1, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f60:	4313      	orrs	r3, r2
         );
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3724      	adds	r7, #36	; 0x24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bc80      	pop	{r7}
 8005f6a:	4770      	bx	lr

08005f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	3b01      	subs	r3, #1
 8005f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f7c:	d301      	bcc.n	8005f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e00f      	b.n	8005fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f82:	4a0a      	ldr	r2, [pc, #40]	; (8005fac <SysTick_Config+0x40>)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	3b01      	subs	r3, #1
 8005f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f8a:	210f      	movs	r1, #15
 8005f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f90:	f7ff ff90 	bl	8005eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f94:	4b05      	ldr	r3, [pc, #20]	; (8005fac <SysTick_Config+0x40>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f9a:	4b04      	ldr	r3, [pc, #16]	; (8005fac <SysTick_Config+0x40>)
 8005f9c:	2207      	movs	r2, #7
 8005f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	e000e010 	.word	0xe000e010

08005fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7ff ff2d 	bl	8005e18 <__NVIC_SetPriorityGrouping>
}
 8005fbe:	bf00      	nop
 8005fc0:	3708      	adds	r7, #8
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b086      	sub	sp, #24
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	4603      	mov	r3, r0
 8005fce:	60b9      	str	r1, [r7, #8]
 8005fd0:	607a      	str	r2, [r7, #4]
 8005fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005fd8:	f7ff ff42 	bl	8005e60 <__NVIC_GetPriorityGrouping>
 8005fdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	68b9      	ldr	r1, [r7, #8]
 8005fe2:	6978      	ldr	r0, [r7, #20]
 8005fe4:	f7ff ff90 	bl	8005f08 <NVIC_EncodePriority>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fee:	4611      	mov	r1, r2
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7ff ff5f 	bl	8005eb4 <__NVIC_SetPriority>
}
 8005ff6:	bf00      	nop
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b082      	sub	sp, #8
 8006002:	af00      	add	r7, sp, #0
 8006004:	4603      	mov	r3, r0
 8006006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800600c:	4618      	mov	r0, r3
 800600e:	f7ff ff35 	bl	8005e7c <__NVIC_EnableIRQ>
}
 8006012:	bf00      	nop
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b082      	sub	sp, #8
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7ff ffa2 	bl	8005f6c <SysTick_Config>
 8006028:	4603      	mov	r3, r0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
	...

08006034 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006034:	b480      	push	{r7}
 8006036:	b08b      	sub	sp, #44	; 0x2c
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800603e:	2300      	movs	r3, #0
 8006040:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006042:	2300      	movs	r3, #0
 8006044:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006046:	e133      	b.n	80062b0 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006048:	2201      	movs	r2, #1
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	fa02 f303 	lsl.w	r3, r2, r3
 8006050:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69fa      	ldr	r2, [r7, #28]
 8006058:	4013      	ands	r3, r2
 800605a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	429a      	cmp	r2, r3
 8006062:	f040 8122 	bne.w	80062aa <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	2b12      	cmp	r3, #18
 800606c:	d034      	beq.n	80060d8 <HAL_GPIO_Init+0xa4>
 800606e:	2b12      	cmp	r3, #18
 8006070:	d80d      	bhi.n	800608e <HAL_GPIO_Init+0x5a>
 8006072:	2b02      	cmp	r3, #2
 8006074:	d02b      	beq.n	80060ce <HAL_GPIO_Init+0x9a>
 8006076:	2b02      	cmp	r3, #2
 8006078:	d804      	bhi.n	8006084 <HAL_GPIO_Init+0x50>
 800607a:	2b00      	cmp	r3, #0
 800607c:	d031      	beq.n	80060e2 <HAL_GPIO_Init+0xae>
 800607e:	2b01      	cmp	r3, #1
 8006080:	d01c      	beq.n	80060bc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006082:	e048      	b.n	8006116 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8006084:	2b03      	cmp	r3, #3
 8006086:	d043      	beq.n	8006110 <HAL_GPIO_Init+0xdc>
 8006088:	2b11      	cmp	r3, #17
 800608a:	d01b      	beq.n	80060c4 <HAL_GPIO_Init+0x90>
          break;
 800608c:	e043      	b.n	8006116 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800608e:	4a8f      	ldr	r2, [pc, #572]	; (80062cc <HAL_GPIO_Init+0x298>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d026      	beq.n	80060e2 <HAL_GPIO_Init+0xae>
 8006094:	4a8d      	ldr	r2, [pc, #564]	; (80062cc <HAL_GPIO_Init+0x298>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d806      	bhi.n	80060a8 <HAL_GPIO_Init+0x74>
 800609a:	4a8d      	ldr	r2, [pc, #564]	; (80062d0 <HAL_GPIO_Init+0x29c>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d020      	beq.n	80060e2 <HAL_GPIO_Init+0xae>
 80060a0:	4a8c      	ldr	r2, [pc, #560]	; (80062d4 <HAL_GPIO_Init+0x2a0>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d01d      	beq.n	80060e2 <HAL_GPIO_Init+0xae>
          break;
 80060a6:	e036      	b.n	8006116 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80060a8:	4a8b      	ldr	r2, [pc, #556]	; (80062d8 <HAL_GPIO_Init+0x2a4>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d019      	beq.n	80060e2 <HAL_GPIO_Init+0xae>
 80060ae:	4a8b      	ldr	r2, [pc, #556]	; (80062dc <HAL_GPIO_Init+0x2a8>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d016      	beq.n	80060e2 <HAL_GPIO_Init+0xae>
 80060b4:	4a8a      	ldr	r2, [pc, #552]	; (80062e0 <HAL_GPIO_Init+0x2ac>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d013      	beq.n	80060e2 <HAL_GPIO_Init+0xae>
          break;
 80060ba:	e02c      	b.n	8006116 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	623b      	str	r3, [r7, #32]
          break;
 80060c2:	e028      	b.n	8006116 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	3304      	adds	r3, #4
 80060ca:	623b      	str	r3, [r7, #32]
          break;
 80060cc:	e023      	b.n	8006116 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	3308      	adds	r3, #8
 80060d4:	623b      	str	r3, [r7, #32]
          break;
 80060d6:	e01e      	b.n	8006116 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	330c      	adds	r3, #12
 80060de:	623b      	str	r3, [r7, #32]
          break;
 80060e0:	e019      	b.n	8006116 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d102      	bne.n	80060f0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80060ea:	2304      	movs	r3, #4
 80060ec:	623b      	str	r3, [r7, #32]
          break;
 80060ee:	e012      	b.n	8006116 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d105      	bne.n	8006104 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80060f8:	2308      	movs	r3, #8
 80060fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	69fa      	ldr	r2, [r7, #28]
 8006100:	611a      	str	r2, [r3, #16]
          break;
 8006102:	e008      	b.n	8006116 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006104:	2308      	movs	r3, #8
 8006106:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	69fa      	ldr	r2, [r7, #28]
 800610c:	615a      	str	r2, [r3, #20]
          break;
 800610e:	e002      	b.n	8006116 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006110:	2300      	movs	r3, #0
 8006112:	623b      	str	r3, [r7, #32]
          break;
 8006114:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	2bff      	cmp	r3, #255	; 0xff
 800611a:	d801      	bhi.n	8006120 <HAL_GPIO_Init+0xec>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	e001      	b.n	8006124 <HAL_GPIO_Init+0xf0>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	3304      	adds	r3, #4
 8006124:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	2bff      	cmp	r3, #255	; 0xff
 800612a:	d802      	bhi.n	8006132 <HAL_GPIO_Init+0xfe>
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	e002      	b.n	8006138 <HAL_GPIO_Init+0x104>
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	3b08      	subs	r3, #8
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	210f      	movs	r1, #15
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	fa01 f303 	lsl.w	r3, r1, r3
 8006146:	43db      	mvns	r3, r3
 8006148:	401a      	ands	r2, r3
 800614a:	6a39      	ldr	r1, [r7, #32]
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	fa01 f303 	lsl.w	r3, r1, r3
 8006152:	431a      	orrs	r2, r3
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 80a2 	beq.w	80062aa <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006166:	4b5f      	ldr	r3, [pc, #380]	; (80062e4 <HAL_GPIO_Init+0x2b0>)
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	4a5e      	ldr	r2, [pc, #376]	; (80062e4 <HAL_GPIO_Init+0x2b0>)
 800616c:	f043 0301 	orr.w	r3, r3, #1
 8006170:	6193      	str	r3, [r2, #24]
 8006172:	4b5c      	ldr	r3, [pc, #368]	; (80062e4 <HAL_GPIO_Init+0x2b0>)
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	60bb      	str	r3, [r7, #8]
 800617c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800617e:	4a5a      	ldr	r2, [pc, #360]	; (80062e8 <HAL_GPIO_Init+0x2b4>)
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	089b      	lsrs	r3, r3, #2
 8006184:	3302      	adds	r3, #2
 8006186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800618a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	f003 0303 	and.w	r3, r3, #3
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	220f      	movs	r2, #15
 8006196:	fa02 f303 	lsl.w	r3, r2, r3
 800619a:	43db      	mvns	r3, r3
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	4013      	ands	r3, r2
 80061a0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a51      	ldr	r2, [pc, #324]	; (80062ec <HAL_GPIO_Init+0x2b8>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d01f      	beq.n	80061ea <HAL_GPIO_Init+0x1b6>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a50      	ldr	r2, [pc, #320]	; (80062f0 <HAL_GPIO_Init+0x2bc>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d019      	beq.n	80061e6 <HAL_GPIO_Init+0x1b2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a4f      	ldr	r2, [pc, #316]	; (80062f4 <HAL_GPIO_Init+0x2c0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d013      	beq.n	80061e2 <HAL_GPIO_Init+0x1ae>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a4e      	ldr	r2, [pc, #312]	; (80062f8 <HAL_GPIO_Init+0x2c4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d00d      	beq.n	80061de <HAL_GPIO_Init+0x1aa>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a4d      	ldr	r2, [pc, #308]	; (80062fc <HAL_GPIO_Init+0x2c8>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d007      	beq.n	80061da <HAL_GPIO_Init+0x1a6>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a4c      	ldr	r2, [pc, #304]	; (8006300 <HAL_GPIO_Init+0x2cc>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d101      	bne.n	80061d6 <HAL_GPIO_Init+0x1a2>
 80061d2:	2305      	movs	r3, #5
 80061d4:	e00a      	b.n	80061ec <HAL_GPIO_Init+0x1b8>
 80061d6:	2306      	movs	r3, #6
 80061d8:	e008      	b.n	80061ec <HAL_GPIO_Init+0x1b8>
 80061da:	2304      	movs	r3, #4
 80061dc:	e006      	b.n	80061ec <HAL_GPIO_Init+0x1b8>
 80061de:	2303      	movs	r3, #3
 80061e0:	e004      	b.n	80061ec <HAL_GPIO_Init+0x1b8>
 80061e2:	2302      	movs	r3, #2
 80061e4:	e002      	b.n	80061ec <HAL_GPIO_Init+0x1b8>
 80061e6:	2301      	movs	r3, #1
 80061e8:	e000      	b.n	80061ec <HAL_GPIO_Init+0x1b8>
 80061ea:	2300      	movs	r3, #0
 80061ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ee:	f002 0203 	and.w	r2, r2, #3
 80061f2:	0092      	lsls	r2, r2, #2
 80061f4:	4093      	lsls	r3, r2
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80061fc:	493a      	ldr	r1, [pc, #232]	; (80062e8 <HAL_GPIO_Init+0x2b4>)
 80061fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006200:	089b      	lsrs	r3, r3, #2
 8006202:	3302      	adds	r3, #2
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d006      	beq.n	8006224 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006216:	4b3b      	ldr	r3, [pc, #236]	; (8006304 <HAL_GPIO_Init+0x2d0>)
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	493a      	ldr	r1, [pc, #232]	; (8006304 <HAL_GPIO_Init+0x2d0>)
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	4313      	orrs	r3, r2
 8006220:	600b      	str	r3, [r1, #0]
 8006222:	e006      	b.n	8006232 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006224:	4b37      	ldr	r3, [pc, #220]	; (8006304 <HAL_GPIO_Init+0x2d0>)
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	43db      	mvns	r3, r3
 800622c:	4935      	ldr	r1, [pc, #212]	; (8006304 <HAL_GPIO_Init+0x2d0>)
 800622e:	4013      	ands	r3, r2
 8006230:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d006      	beq.n	800624c <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800623e:	4b31      	ldr	r3, [pc, #196]	; (8006304 <HAL_GPIO_Init+0x2d0>)
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	4930      	ldr	r1, [pc, #192]	; (8006304 <HAL_GPIO_Init+0x2d0>)
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	4313      	orrs	r3, r2
 8006248:	604b      	str	r3, [r1, #4]
 800624a:	e006      	b.n	800625a <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800624c:	4b2d      	ldr	r3, [pc, #180]	; (8006304 <HAL_GPIO_Init+0x2d0>)
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	43db      	mvns	r3, r3
 8006254:	492b      	ldr	r1, [pc, #172]	; (8006304 <HAL_GPIO_Init+0x2d0>)
 8006256:	4013      	ands	r3, r2
 8006258:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d006      	beq.n	8006274 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006266:	4b27      	ldr	r3, [pc, #156]	; (8006304 <HAL_GPIO_Init+0x2d0>)
 8006268:	689a      	ldr	r2, [r3, #8]
 800626a:	4926      	ldr	r1, [pc, #152]	; (8006304 <HAL_GPIO_Init+0x2d0>)
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	4313      	orrs	r3, r2
 8006270:	608b      	str	r3, [r1, #8]
 8006272:	e006      	b.n	8006282 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006274:	4b23      	ldr	r3, [pc, #140]	; (8006304 <HAL_GPIO_Init+0x2d0>)
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	43db      	mvns	r3, r3
 800627c:	4921      	ldr	r1, [pc, #132]	; (8006304 <HAL_GPIO_Init+0x2d0>)
 800627e:	4013      	ands	r3, r2
 8006280:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d006      	beq.n	800629c <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800628e:	4b1d      	ldr	r3, [pc, #116]	; (8006304 <HAL_GPIO_Init+0x2d0>)
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	491c      	ldr	r1, [pc, #112]	; (8006304 <HAL_GPIO_Init+0x2d0>)
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	4313      	orrs	r3, r2
 8006298:	60cb      	str	r3, [r1, #12]
 800629a:	e006      	b.n	80062aa <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800629c:	4b19      	ldr	r3, [pc, #100]	; (8006304 <HAL_GPIO_Init+0x2d0>)
 800629e:	68da      	ldr	r2, [r3, #12]
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	43db      	mvns	r3, r3
 80062a4:	4917      	ldr	r1, [pc, #92]	; (8006304 <HAL_GPIO_Init+0x2d0>)
 80062a6:	4013      	ands	r3, r2
 80062a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	3301      	adds	r3, #1
 80062ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	fa22 f303 	lsr.w	r3, r2, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f47f aec4 	bne.w	8006048 <HAL_GPIO_Init+0x14>
  }
}
 80062c0:	bf00      	nop
 80062c2:	372c      	adds	r7, #44	; 0x2c
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bc80      	pop	{r7}
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	10210000 	.word	0x10210000
 80062d0:	10110000 	.word	0x10110000
 80062d4:	10120000 	.word	0x10120000
 80062d8:	10310000 	.word	0x10310000
 80062dc:	10320000 	.word	0x10320000
 80062e0:	10220000 	.word	0x10220000
 80062e4:	40021000 	.word	0x40021000
 80062e8:	40010000 	.word	0x40010000
 80062ec:	40010800 	.word	0x40010800
 80062f0:	40010c00 	.word	0x40010c00
 80062f4:	40011000 	.word	0x40011000
 80062f8:	40011400 	.word	0x40011400
 80062fc:	40011800 	.word	0x40011800
 8006300:	40011c00 	.word	0x40011c00
 8006304:	40010400 	.word	0x40010400

08006308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	460b      	mov	r3, r1
 8006312:	807b      	strh	r3, [r7, #2]
 8006314:	4613      	mov	r3, r2
 8006316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006318:	787b      	ldrb	r3, [r7, #1]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800631e:	887a      	ldrh	r2, [r7, #2]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006324:	e003      	b.n	800632e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006326:	887b      	ldrh	r3, [r7, #2]
 8006328:	041a      	lsls	r2, r3, #16
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	611a      	str	r2, [r3, #16]
}
 800632e:	bf00      	nop
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	bc80      	pop	{r7}
 8006336:	4770      	bx	lr

08006338 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	4603      	mov	r3, r0
 8006340:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006342:	4b08      	ldr	r3, [pc, #32]	; (8006364 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006344:	695a      	ldr	r2, [r3, #20]
 8006346:	88fb      	ldrh	r3, [r7, #6]
 8006348:	4013      	ands	r3, r2
 800634a:	2b00      	cmp	r3, #0
 800634c:	d006      	beq.n	800635c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800634e:	4a05      	ldr	r2, [pc, #20]	; (8006364 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006350:	88fb      	ldrh	r3, [r7, #6]
 8006352:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006354:	88fb      	ldrh	r3, [r7, #6]
 8006356:	4618      	mov	r0, r3
 8006358:	f000 f806 	bl	8006368 <HAL_GPIO_EXTI_Callback>
  }
}
 800635c:	bf00      	nop
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	40010400 	.word	0x40010400

08006368 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	4603      	mov	r3, r0
 8006370:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006372:	bf00      	nop
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	bc80      	pop	{r7}
 800637a:	4770      	bx	lr

0800637c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e26c      	b.n	8006868 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 8087 	beq.w	80064aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800639c:	4b92      	ldr	r3, [pc, #584]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f003 030c 	and.w	r3, r3, #12
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d00c      	beq.n	80063c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80063a8:	4b8f      	ldr	r3, [pc, #572]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f003 030c 	and.w	r3, r3, #12
 80063b0:	2b08      	cmp	r3, #8
 80063b2:	d112      	bne.n	80063da <HAL_RCC_OscConfig+0x5e>
 80063b4:	4b8c      	ldr	r3, [pc, #560]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063c0:	d10b      	bne.n	80063da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063c2:	4b89      	ldr	r3, [pc, #548]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d06c      	beq.n	80064a8 <HAL_RCC_OscConfig+0x12c>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d168      	bne.n	80064a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e246      	b.n	8006868 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e2:	d106      	bne.n	80063f2 <HAL_RCC_OscConfig+0x76>
 80063e4:	4b80      	ldr	r3, [pc, #512]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a7f      	ldr	r2, [pc, #508]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80063ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063ee:	6013      	str	r3, [r2, #0]
 80063f0:	e02e      	b.n	8006450 <HAL_RCC_OscConfig+0xd4>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10c      	bne.n	8006414 <HAL_RCC_OscConfig+0x98>
 80063fa:	4b7b      	ldr	r3, [pc, #492]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a7a      	ldr	r2, [pc, #488]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006404:	6013      	str	r3, [r2, #0]
 8006406:	4b78      	ldr	r3, [pc, #480]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a77      	ldr	r2, [pc, #476]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800640c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006410:	6013      	str	r3, [r2, #0]
 8006412:	e01d      	b.n	8006450 <HAL_RCC_OscConfig+0xd4>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800641c:	d10c      	bne.n	8006438 <HAL_RCC_OscConfig+0xbc>
 800641e:	4b72      	ldr	r3, [pc, #456]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a71      	ldr	r2, [pc, #452]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006428:	6013      	str	r3, [r2, #0]
 800642a:	4b6f      	ldr	r3, [pc, #444]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a6e      	ldr	r2, [pc, #440]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006434:	6013      	str	r3, [r2, #0]
 8006436:	e00b      	b.n	8006450 <HAL_RCC_OscConfig+0xd4>
 8006438:	4b6b      	ldr	r3, [pc, #428]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a6a      	ldr	r2, [pc, #424]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800643e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006442:	6013      	str	r3, [r2, #0]
 8006444:	4b68      	ldr	r3, [pc, #416]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a67      	ldr	r2, [pc, #412]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800644a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800644e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d013      	beq.n	8006480 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006458:	f7ff fcb2 	bl	8005dc0 <HAL_GetTick>
 800645c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800645e:	e008      	b.n	8006472 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006460:	f7ff fcae 	bl	8005dc0 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b64      	cmp	r3, #100	; 0x64
 800646c:	d901      	bls.n	8006472 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e1fa      	b.n	8006868 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006472:	4b5d      	ldr	r3, [pc, #372]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0f0      	beq.n	8006460 <HAL_RCC_OscConfig+0xe4>
 800647e:	e014      	b.n	80064aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006480:	f7ff fc9e 	bl	8005dc0 <HAL_GetTick>
 8006484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006486:	e008      	b.n	800649a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006488:	f7ff fc9a 	bl	8005dc0 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b64      	cmp	r3, #100	; 0x64
 8006494:	d901      	bls.n	800649a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e1e6      	b.n	8006868 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800649a:	4b53      	ldr	r3, [pc, #332]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1f0      	bne.n	8006488 <HAL_RCC_OscConfig+0x10c>
 80064a6:	e000      	b.n	80064aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d063      	beq.n	800657e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064b6:	4b4c      	ldr	r3, [pc, #304]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f003 030c 	and.w	r3, r3, #12
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00b      	beq.n	80064da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80064c2:	4b49      	ldr	r3, [pc, #292]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f003 030c 	and.w	r3, r3, #12
 80064ca:	2b08      	cmp	r3, #8
 80064cc:	d11c      	bne.n	8006508 <HAL_RCC_OscConfig+0x18c>
 80064ce:	4b46      	ldr	r3, [pc, #280]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d116      	bne.n	8006508 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064da:	4b43      	ldr	r3, [pc, #268]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d005      	beq.n	80064f2 <HAL_RCC_OscConfig+0x176>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d001      	beq.n	80064f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e1ba      	b.n	8006868 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064f2:	4b3d      	ldr	r3, [pc, #244]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	4939      	ldr	r1, [pc, #228]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006502:	4313      	orrs	r3, r2
 8006504:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006506:	e03a      	b.n	800657e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d020      	beq.n	8006552 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006510:	4b36      	ldr	r3, [pc, #216]	; (80065ec <HAL_RCC_OscConfig+0x270>)
 8006512:	2201      	movs	r2, #1
 8006514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006516:	f7ff fc53 	bl	8005dc0 <HAL_GetTick>
 800651a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800651c:	e008      	b.n	8006530 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800651e:	f7ff fc4f 	bl	8005dc0 <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	2b02      	cmp	r3, #2
 800652a:	d901      	bls.n	8006530 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e19b      	b.n	8006868 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006530:	4b2d      	ldr	r3, [pc, #180]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0f0      	beq.n	800651e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800653c:	4b2a      	ldr	r3, [pc, #168]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	00db      	lsls	r3, r3, #3
 800654a:	4927      	ldr	r1, [pc, #156]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 800654c:	4313      	orrs	r3, r2
 800654e:	600b      	str	r3, [r1, #0]
 8006550:	e015      	b.n	800657e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006552:	4b26      	ldr	r3, [pc, #152]	; (80065ec <HAL_RCC_OscConfig+0x270>)
 8006554:	2200      	movs	r2, #0
 8006556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006558:	f7ff fc32 	bl	8005dc0 <HAL_GetTick>
 800655c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800655e:	e008      	b.n	8006572 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006560:	f7ff fc2e 	bl	8005dc0 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e17a      	b.n	8006868 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006572:	4b1d      	ldr	r3, [pc, #116]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1f0      	bne.n	8006560 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0308 	and.w	r3, r3, #8
 8006586:	2b00      	cmp	r3, #0
 8006588:	d03a      	beq.n	8006600 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d019      	beq.n	80065c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006592:	4b17      	ldr	r3, [pc, #92]	; (80065f0 <HAL_RCC_OscConfig+0x274>)
 8006594:	2201      	movs	r2, #1
 8006596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006598:	f7ff fc12 	bl	8005dc0 <HAL_GetTick>
 800659c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800659e:	e008      	b.n	80065b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065a0:	f7ff fc0e 	bl	8005dc0 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e15a      	b.n	8006868 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065b2:	4b0d      	ldr	r3, [pc, #52]	; (80065e8 <HAL_RCC_OscConfig+0x26c>)
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d0f0      	beq.n	80065a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80065be:	2001      	movs	r0, #1
 80065c0:	f000 faa8 	bl	8006b14 <RCC_Delay>
 80065c4:	e01c      	b.n	8006600 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065c6:	4b0a      	ldr	r3, [pc, #40]	; (80065f0 <HAL_RCC_OscConfig+0x274>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065cc:	f7ff fbf8 	bl	8005dc0 <HAL_GetTick>
 80065d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065d2:	e00f      	b.n	80065f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065d4:	f7ff fbf4 	bl	8005dc0 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d908      	bls.n	80065f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e140      	b.n	8006868 <HAL_RCC_OscConfig+0x4ec>
 80065e6:	bf00      	nop
 80065e8:	40021000 	.word	0x40021000
 80065ec:	42420000 	.word	0x42420000
 80065f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065f4:	4b9e      	ldr	r3, [pc, #632]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	f003 0302 	and.w	r3, r3, #2
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1e9      	bne.n	80065d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0304 	and.w	r3, r3, #4
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 80a6 	beq.w	800675a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800660e:	2300      	movs	r3, #0
 8006610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006612:	4b97      	ldr	r3, [pc, #604]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10d      	bne.n	800663a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800661e:	4b94      	ldr	r3, [pc, #592]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	4a93      	ldr	r2, [pc, #588]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006628:	61d3      	str	r3, [r2, #28]
 800662a:	4b91      	ldr	r3, [pc, #580]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006632:	60bb      	str	r3, [r7, #8]
 8006634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006636:	2301      	movs	r3, #1
 8006638:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800663a:	4b8e      	ldr	r3, [pc, #568]	; (8006874 <HAL_RCC_OscConfig+0x4f8>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006642:	2b00      	cmp	r3, #0
 8006644:	d118      	bne.n	8006678 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006646:	4b8b      	ldr	r3, [pc, #556]	; (8006874 <HAL_RCC_OscConfig+0x4f8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a8a      	ldr	r2, [pc, #552]	; (8006874 <HAL_RCC_OscConfig+0x4f8>)
 800664c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006652:	f7ff fbb5 	bl	8005dc0 <HAL_GetTick>
 8006656:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006658:	e008      	b.n	800666c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800665a:	f7ff fbb1 	bl	8005dc0 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b64      	cmp	r3, #100	; 0x64
 8006666:	d901      	bls.n	800666c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e0fd      	b.n	8006868 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800666c:	4b81      	ldr	r3, [pc, #516]	; (8006874 <HAL_RCC_OscConfig+0x4f8>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0f0      	beq.n	800665a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d106      	bne.n	800668e <HAL_RCC_OscConfig+0x312>
 8006680:	4b7b      	ldr	r3, [pc, #492]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006682:	6a1b      	ldr	r3, [r3, #32]
 8006684:	4a7a      	ldr	r2, [pc, #488]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006686:	f043 0301 	orr.w	r3, r3, #1
 800668a:	6213      	str	r3, [r2, #32]
 800668c:	e02d      	b.n	80066ea <HAL_RCC_OscConfig+0x36e>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10c      	bne.n	80066b0 <HAL_RCC_OscConfig+0x334>
 8006696:	4b76      	ldr	r3, [pc, #472]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	4a75      	ldr	r2, [pc, #468]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 800669c:	f023 0301 	bic.w	r3, r3, #1
 80066a0:	6213      	str	r3, [r2, #32]
 80066a2:	4b73      	ldr	r3, [pc, #460]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	4a72      	ldr	r2, [pc, #456]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 80066a8:	f023 0304 	bic.w	r3, r3, #4
 80066ac:	6213      	str	r3, [r2, #32]
 80066ae:	e01c      	b.n	80066ea <HAL_RCC_OscConfig+0x36e>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	2b05      	cmp	r3, #5
 80066b6:	d10c      	bne.n	80066d2 <HAL_RCC_OscConfig+0x356>
 80066b8:	4b6d      	ldr	r3, [pc, #436]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 80066ba:	6a1b      	ldr	r3, [r3, #32]
 80066bc:	4a6c      	ldr	r2, [pc, #432]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 80066be:	f043 0304 	orr.w	r3, r3, #4
 80066c2:	6213      	str	r3, [r2, #32]
 80066c4:	4b6a      	ldr	r3, [pc, #424]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 80066c6:	6a1b      	ldr	r3, [r3, #32]
 80066c8:	4a69      	ldr	r2, [pc, #420]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 80066ca:	f043 0301 	orr.w	r3, r3, #1
 80066ce:	6213      	str	r3, [r2, #32]
 80066d0:	e00b      	b.n	80066ea <HAL_RCC_OscConfig+0x36e>
 80066d2:	4b67      	ldr	r3, [pc, #412]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	4a66      	ldr	r2, [pc, #408]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 80066d8:	f023 0301 	bic.w	r3, r3, #1
 80066dc:	6213      	str	r3, [r2, #32]
 80066de:	4b64      	ldr	r3, [pc, #400]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	4a63      	ldr	r2, [pc, #396]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 80066e4:	f023 0304 	bic.w	r3, r3, #4
 80066e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d015      	beq.n	800671e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066f2:	f7ff fb65 	bl	8005dc0 <HAL_GetTick>
 80066f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066f8:	e00a      	b.n	8006710 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066fa:	f7ff fb61 	bl	8005dc0 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	f241 3288 	movw	r2, #5000	; 0x1388
 8006708:	4293      	cmp	r3, r2
 800670a:	d901      	bls.n	8006710 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e0ab      	b.n	8006868 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006710:	4b57      	ldr	r3, [pc, #348]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	f003 0302 	and.w	r3, r3, #2
 8006718:	2b00      	cmp	r3, #0
 800671a:	d0ee      	beq.n	80066fa <HAL_RCC_OscConfig+0x37e>
 800671c:	e014      	b.n	8006748 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800671e:	f7ff fb4f 	bl	8005dc0 <HAL_GetTick>
 8006722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006724:	e00a      	b.n	800673c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006726:	f7ff fb4b 	bl	8005dc0 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	f241 3288 	movw	r2, #5000	; 0x1388
 8006734:	4293      	cmp	r3, r2
 8006736:	d901      	bls.n	800673c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e095      	b.n	8006868 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800673c:	4b4c      	ldr	r3, [pc, #304]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1ee      	bne.n	8006726 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006748:	7dfb      	ldrb	r3, [r7, #23]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d105      	bne.n	800675a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800674e:	4b48      	ldr	r3, [pc, #288]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	4a47      	ldr	r2, [pc, #284]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006758:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	69db      	ldr	r3, [r3, #28]
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 8081 	beq.w	8006866 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006764:	4b42      	ldr	r3, [pc, #264]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f003 030c 	and.w	r3, r3, #12
 800676c:	2b08      	cmp	r3, #8
 800676e:	d061      	beq.n	8006834 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	2b02      	cmp	r3, #2
 8006776:	d146      	bne.n	8006806 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006778:	4b3f      	ldr	r3, [pc, #252]	; (8006878 <HAL_RCC_OscConfig+0x4fc>)
 800677a:	2200      	movs	r2, #0
 800677c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800677e:	f7ff fb1f 	bl	8005dc0 <HAL_GetTick>
 8006782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006784:	e008      	b.n	8006798 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006786:	f7ff fb1b 	bl	8005dc0 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2b02      	cmp	r3, #2
 8006792:	d901      	bls.n	8006798 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e067      	b.n	8006868 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006798:	4b35      	ldr	r3, [pc, #212]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1f0      	bne.n	8006786 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ac:	d108      	bne.n	80067c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80067ae:	4b30      	ldr	r3, [pc, #192]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	492d      	ldr	r1, [pc, #180]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067c0:	4b2b      	ldr	r3, [pc, #172]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a19      	ldr	r1, [r3, #32]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	430b      	orrs	r3, r1
 80067d2:	4927      	ldr	r1, [pc, #156]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067d8:	4b27      	ldr	r3, [pc, #156]	; (8006878 <HAL_RCC_OscConfig+0x4fc>)
 80067da:	2201      	movs	r2, #1
 80067dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067de:	f7ff faef 	bl	8005dc0 <HAL_GetTick>
 80067e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067e4:	e008      	b.n	80067f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067e6:	f7ff faeb 	bl	8005dc0 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d901      	bls.n	80067f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e037      	b.n	8006868 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067f8:	4b1d      	ldr	r3, [pc, #116]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d0f0      	beq.n	80067e6 <HAL_RCC_OscConfig+0x46a>
 8006804:	e02f      	b.n	8006866 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006806:	4b1c      	ldr	r3, [pc, #112]	; (8006878 <HAL_RCC_OscConfig+0x4fc>)
 8006808:	2200      	movs	r2, #0
 800680a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800680c:	f7ff fad8 	bl	8005dc0 <HAL_GetTick>
 8006810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006812:	e008      	b.n	8006826 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006814:	f7ff fad4 	bl	8005dc0 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b02      	cmp	r3, #2
 8006820:	d901      	bls.n	8006826 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e020      	b.n	8006868 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006826:	4b12      	ldr	r3, [pc, #72]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1f0      	bne.n	8006814 <HAL_RCC_OscConfig+0x498>
 8006832:	e018      	b.n	8006866 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	69db      	ldr	r3, [r3, #28]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d101      	bne.n	8006840 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e013      	b.n	8006868 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006840:	4b0b      	ldr	r3, [pc, #44]	; (8006870 <HAL_RCC_OscConfig+0x4f4>)
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a1b      	ldr	r3, [r3, #32]
 8006850:	429a      	cmp	r2, r3
 8006852:	d106      	bne.n	8006862 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800685e:	429a      	cmp	r2, r3
 8006860:	d001      	beq.n	8006866 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e000      	b.n	8006868 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3718      	adds	r7, #24
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	40021000 	.word	0x40021000
 8006874:	40007000 	.word	0x40007000
 8006878:	42420060 	.word	0x42420060

0800687c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d101      	bne.n	8006890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e0d0      	b.n	8006a32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006890:	4b6a      	ldr	r3, [pc, #424]	; (8006a3c <HAL_RCC_ClockConfig+0x1c0>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0307 	and.w	r3, r3, #7
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	429a      	cmp	r2, r3
 800689c:	d910      	bls.n	80068c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800689e:	4b67      	ldr	r3, [pc, #412]	; (8006a3c <HAL_RCC_ClockConfig+0x1c0>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f023 0207 	bic.w	r2, r3, #7
 80068a6:	4965      	ldr	r1, [pc, #404]	; (8006a3c <HAL_RCC_ClockConfig+0x1c0>)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ae:	4b63      	ldr	r3, [pc, #396]	; (8006a3c <HAL_RCC_ClockConfig+0x1c0>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0307 	and.w	r3, r3, #7
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d001      	beq.n	80068c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e0b8      	b.n	8006a32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0302 	and.w	r3, r3, #2
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d020      	beq.n	800690e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0304 	and.w	r3, r3, #4
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d005      	beq.n	80068e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068d8:	4b59      	ldr	r3, [pc, #356]	; (8006a40 <HAL_RCC_ClockConfig+0x1c4>)
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	4a58      	ldr	r2, [pc, #352]	; (8006a40 <HAL_RCC_ClockConfig+0x1c4>)
 80068de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80068e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0308 	and.w	r3, r3, #8
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d005      	beq.n	80068fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068f0:	4b53      	ldr	r3, [pc, #332]	; (8006a40 <HAL_RCC_ClockConfig+0x1c4>)
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	4a52      	ldr	r2, [pc, #328]	; (8006a40 <HAL_RCC_ClockConfig+0x1c4>)
 80068f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80068fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068fc:	4b50      	ldr	r3, [pc, #320]	; (8006a40 <HAL_RCC_ClockConfig+0x1c4>)
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	494d      	ldr	r1, [pc, #308]	; (8006a40 <HAL_RCC_ClockConfig+0x1c4>)
 800690a:	4313      	orrs	r3, r2
 800690c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d040      	beq.n	800699c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d107      	bne.n	8006932 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006922:	4b47      	ldr	r3, [pc, #284]	; (8006a40 <HAL_RCC_ClockConfig+0x1c4>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d115      	bne.n	800695a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e07f      	b.n	8006a32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2b02      	cmp	r3, #2
 8006938:	d107      	bne.n	800694a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800693a:	4b41      	ldr	r3, [pc, #260]	; (8006a40 <HAL_RCC_ClockConfig+0x1c4>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d109      	bne.n	800695a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e073      	b.n	8006a32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800694a:	4b3d      	ldr	r3, [pc, #244]	; (8006a40 <HAL_RCC_ClockConfig+0x1c4>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e06b      	b.n	8006a32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800695a:	4b39      	ldr	r3, [pc, #228]	; (8006a40 <HAL_RCC_ClockConfig+0x1c4>)
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f023 0203 	bic.w	r2, r3, #3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	4936      	ldr	r1, [pc, #216]	; (8006a40 <HAL_RCC_ClockConfig+0x1c4>)
 8006968:	4313      	orrs	r3, r2
 800696a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800696c:	f7ff fa28 	bl	8005dc0 <HAL_GetTick>
 8006970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006972:	e00a      	b.n	800698a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006974:	f7ff fa24 	bl	8005dc0 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006982:	4293      	cmp	r3, r2
 8006984:	d901      	bls.n	800698a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e053      	b.n	8006a32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800698a:	4b2d      	ldr	r3, [pc, #180]	; (8006a40 <HAL_RCC_ClockConfig+0x1c4>)
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f003 020c 	and.w	r2, r3, #12
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	429a      	cmp	r2, r3
 800699a:	d1eb      	bne.n	8006974 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800699c:	4b27      	ldr	r3, [pc, #156]	; (8006a3c <HAL_RCC_ClockConfig+0x1c0>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0307 	and.w	r3, r3, #7
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d210      	bcs.n	80069cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069aa:	4b24      	ldr	r3, [pc, #144]	; (8006a3c <HAL_RCC_ClockConfig+0x1c0>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f023 0207 	bic.w	r2, r3, #7
 80069b2:	4922      	ldr	r1, [pc, #136]	; (8006a3c <HAL_RCC_ClockConfig+0x1c0>)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ba:	4b20      	ldr	r3, [pc, #128]	; (8006a3c <HAL_RCC_ClockConfig+0x1c0>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d001      	beq.n	80069cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e032      	b.n	8006a32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d008      	beq.n	80069ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069d8:	4b19      	ldr	r3, [pc, #100]	; (8006a40 <HAL_RCC_ClockConfig+0x1c4>)
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	4916      	ldr	r1, [pc, #88]	; (8006a40 <HAL_RCC_ClockConfig+0x1c4>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0308 	and.w	r3, r3, #8
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d009      	beq.n	8006a0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80069f6:	4b12      	ldr	r3, [pc, #72]	; (8006a40 <HAL_RCC_ClockConfig+0x1c4>)
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	00db      	lsls	r3, r3, #3
 8006a04:	490e      	ldr	r1, [pc, #56]	; (8006a40 <HAL_RCC_ClockConfig+0x1c4>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a0a:	f000 f821 	bl	8006a50 <HAL_RCC_GetSysClockFreq>
 8006a0e:	4601      	mov	r1, r0
 8006a10:	4b0b      	ldr	r3, [pc, #44]	; (8006a40 <HAL_RCC_ClockConfig+0x1c4>)
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	091b      	lsrs	r3, r3, #4
 8006a16:	f003 030f 	and.w	r3, r3, #15
 8006a1a:	4a0a      	ldr	r2, [pc, #40]	; (8006a44 <HAL_RCC_ClockConfig+0x1c8>)
 8006a1c:	5cd3      	ldrb	r3, [r2, r3]
 8006a1e:	fa21 f303 	lsr.w	r3, r1, r3
 8006a22:	4a09      	ldr	r2, [pc, #36]	; (8006a48 <HAL_RCC_ClockConfig+0x1cc>)
 8006a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006a26:	4b09      	ldr	r3, [pc, #36]	; (8006a4c <HAL_RCC_ClockConfig+0x1d0>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7ff f986 	bl	8005d3c <HAL_InitTick>

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	40022000 	.word	0x40022000
 8006a40:	40021000 	.word	0x40021000
 8006a44:	08006bd4 	.word	0x08006bd4
 8006a48:	20000000 	.word	0x20000000
 8006a4c:	20000004 	.word	0x20000004

08006a50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a50:	b490      	push	{r4, r7}
 8006a52:	b08a      	sub	sp, #40	; 0x28
 8006a54:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006a56:	4b2a      	ldr	r3, [pc, #168]	; (8006b00 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006a58:	1d3c      	adds	r4, r7, #4
 8006a5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006a60:	4b28      	ldr	r3, [pc, #160]	; (8006b04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006a62:	881b      	ldrh	r3, [r3, #0]
 8006a64:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a66:	2300      	movs	r3, #0
 8006a68:	61fb      	str	r3, [r7, #28]
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	61bb      	str	r3, [r7, #24]
 8006a6e:	2300      	movs	r3, #0
 8006a70:	627b      	str	r3, [r7, #36]	; 0x24
 8006a72:	2300      	movs	r3, #0
 8006a74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006a76:	2300      	movs	r3, #0
 8006a78:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006a7a:	4b23      	ldr	r3, [pc, #140]	; (8006b08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	f003 030c 	and.w	r3, r3, #12
 8006a86:	2b04      	cmp	r3, #4
 8006a88:	d002      	beq.n	8006a90 <HAL_RCC_GetSysClockFreq+0x40>
 8006a8a:	2b08      	cmp	r3, #8
 8006a8c:	d003      	beq.n	8006a96 <HAL_RCC_GetSysClockFreq+0x46>
 8006a8e:	e02d      	b.n	8006aec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006a90:	4b1e      	ldr	r3, [pc, #120]	; (8006b0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006a92:	623b      	str	r3, [r7, #32]
      break;
 8006a94:	e02d      	b.n	8006af2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	0c9b      	lsrs	r3, r3, #18
 8006a9a:	f003 030f 	and.w	r3, r3, #15
 8006a9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006aa8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d013      	beq.n	8006adc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006ab4:	4b14      	ldr	r3, [pc, #80]	; (8006b08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	0c5b      	lsrs	r3, r3, #17
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006ac8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	4a0f      	ldr	r2, [pc, #60]	; (8006b0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006ace:	fb02 f203 	mul.w	r2, r2, r3
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8006ada:	e004      	b.n	8006ae6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	4a0c      	ldr	r2, [pc, #48]	; (8006b10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006ae0:	fb02 f303 	mul.w	r3, r2, r3
 8006ae4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae8:	623b      	str	r3, [r7, #32]
      break;
 8006aea:	e002      	b.n	8006af2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006aec:	4b07      	ldr	r3, [pc, #28]	; (8006b0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006aee:	623b      	str	r3, [r7, #32]
      break;
 8006af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006af2:	6a3b      	ldr	r3, [r7, #32]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3728      	adds	r7, #40	; 0x28
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bc90      	pop	{r4, r7}
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	08006bc0 	.word	0x08006bc0
 8006b04:	08006bd0 	.word	0x08006bd0
 8006b08:	40021000 	.word	0x40021000
 8006b0c:	007a1200 	.word	0x007a1200
 8006b10:	003d0900 	.word	0x003d0900

08006b14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006b1c:	4b0a      	ldr	r3, [pc, #40]	; (8006b48 <RCC_Delay+0x34>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a0a      	ldr	r2, [pc, #40]	; (8006b4c <RCC_Delay+0x38>)
 8006b22:	fba2 2303 	umull	r2, r3, r2, r3
 8006b26:	0a5b      	lsrs	r3, r3, #9
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	fb02 f303 	mul.w	r3, r2, r3
 8006b2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006b30:	bf00      	nop
  }
  while (Delay --);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	1e5a      	subs	r2, r3, #1
 8006b36:	60fa      	str	r2, [r7, #12]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1f9      	bne.n	8006b30 <RCC_Delay+0x1c>
}
 8006b3c:	bf00      	nop
 8006b3e:	3714      	adds	r7, #20
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bc80      	pop	{r7}
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	20000000 	.word	0x20000000
 8006b4c:	10624dd3 	.word	0x10624dd3

08006b50 <__libc_init_array>:
 8006b50:	b570      	push	{r4, r5, r6, lr}
 8006b52:	2500      	movs	r5, #0
 8006b54:	4e0c      	ldr	r6, [pc, #48]	; (8006b88 <__libc_init_array+0x38>)
 8006b56:	4c0d      	ldr	r4, [pc, #52]	; (8006b8c <__libc_init_array+0x3c>)
 8006b58:	1ba4      	subs	r4, r4, r6
 8006b5a:	10a4      	asrs	r4, r4, #2
 8006b5c:	42a5      	cmp	r5, r4
 8006b5e:	d109      	bne.n	8006b74 <__libc_init_array+0x24>
 8006b60:	f000 f822 	bl	8006ba8 <_init>
 8006b64:	2500      	movs	r5, #0
 8006b66:	4e0a      	ldr	r6, [pc, #40]	; (8006b90 <__libc_init_array+0x40>)
 8006b68:	4c0a      	ldr	r4, [pc, #40]	; (8006b94 <__libc_init_array+0x44>)
 8006b6a:	1ba4      	subs	r4, r4, r6
 8006b6c:	10a4      	asrs	r4, r4, #2
 8006b6e:	42a5      	cmp	r5, r4
 8006b70:	d105      	bne.n	8006b7e <__libc_init_array+0x2e>
 8006b72:	bd70      	pop	{r4, r5, r6, pc}
 8006b74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b78:	4798      	blx	r3
 8006b7a:	3501      	adds	r5, #1
 8006b7c:	e7ee      	b.n	8006b5c <__libc_init_array+0xc>
 8006b7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b82:	4798      	blx	r3
 8006b84:	3501      	adds	r5, #1
 8006b86:	e7f2      	b.n	8006b6e <__libc_init_array+0x1e>
 8006b88:	08006be4 	.word	0x08006be4
 8006b8c:	08006be4 	.word	0x08006be4
 8006b90:	08006be4 	.word	0x08006be4
 8006b94:	08006be8 	.word	0x08006be8

08006b98 <memset>:
 8006b98:	4603      	mov	r3, r0
 8006b9a:	4402      	add	r2, r0
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d100      	bne.n	8006ba2 <memset+0xa>
 8006ba0:	4770      	bx	lr
 8006ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ba6:	e7f9      	b.n	8006b9c <memset+0x4>

08006ba8 <_init>:
 8006ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006baa:	bf00      	nop
 8006bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bae:	bc08      	pop	{r3}
 8006bb0:	469e      	mov	lr, r3
 8006bb2:	4770      	bx	lr

08006bb4 <_fini>:
 8006bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb6:	bf00      	nop
 8006bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bba:	bc08      	pop	{r3}
 8006bbc:	469e      	mov	lr, r3
 8006bbe:	4770      	bx	lr
