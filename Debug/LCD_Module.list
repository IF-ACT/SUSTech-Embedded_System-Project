
LCD_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a20c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  0800a3f8  0800a3f8  0001a3f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6f8  0800a6f8  000202a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a6f8  0800a6f8  000202a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a6f8  0800a6f8  000202a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6f8  0800a6f8  0001a6f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6fc  0800a6fc  0001a6fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a4  20000000  0800a700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  200002a4  0800a9a4  000202a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  0800a9a4  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd49  00000000  00000000  000202cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002753  00000000  00000000  0002e016  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000908  00000000  00000000  00030770  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007a0  00000000  00000000  00031078  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017b02  00000000  00000000  00031818  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bd91  00000000  00000000  0004931a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00079ac5  00000000  00000000  000550ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ceb70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bc0  00000000  00000000  000cebec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200002a4 	.word	0x200002a4
 8000204:	00000000 	.word	0x00000000
 8000208:	0800a3dc 	.word	0x0800a3dc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200002a8 	.word	0x200002a8
 8000224:	0800a3dc 	.word	0x0800a3dc

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	d1ed      	bne.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0e:	2afd      	cmp	r2, #253	; 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	; 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	; 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	; 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <__aeabi_f2iz>:
 800105c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001060:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001064:	d30f      	bcc.n	8001086 <__aeabi_f2iz+0x2a>
 8001066:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800106a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800106e:	d90d      	bls.n	800108c <__aeabi_f2iz+0x30>
 8001070:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001074:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001078:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800107c:	fa23 f002 	lsr.w	r0, r3, r2
 8001080:	bf18      	it	ne
 8001082:	4240      	negne	r0, r0
 8001084:	4770      	bx	lr
 8001086:	f04f 0000 	mov.w	r0, #0
 800108a:	4770      	bx	lr
 800108c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001090:	d101      	bne.n	8001096 <__aeabi_f2iz+0x3a>
 8001092:	0242      	lsls	r2, r0, #9
 8001094:	d105      	bne.n	80010a2 <__aeabi_f2iz+0x46>
 8001096:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800109a:	bf08      	it	eq
 800109c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010a0:	4770      	bx	lr
 80010a2:	f04f 0000 	mov.w	r0, #0
 80010a6:	4770      	bx	lr

080010a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <HAL_Init+0x28>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <HAL_Init+0x28>)
 80010b2:	f043 0310 	orr.w	r3, r3, #16
 80010b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b8:	2003      	movs	r0, #3
 80010ba:	f000 f945 	bl	8001348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010be:	2000      	movs	r0, #0
 80010c0:	f000 f808 	bl	80010d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c4:	f006 fd32 	bl	8007b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40022000 	.word	0x40022000

080010d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_InitTick+0x54>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_InitTick+0x58>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f95d 	bl	80013b2 <HAL_SYSTICK_Config>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e00e      	b.n	8001120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b0f      	cmp	r3, #15
 8001106:	d80a      	bhi.n	800111e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001108:	2200      	movs	r2, #0
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f000 f925 	bl	800135e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001114:	4a06      	ldr	r2, [pc, #24]	; (8001130 <HAL_InitTick+0x5c>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	e000      	b.n	8001120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200000d0 	.word	0x200000d0
 800112c:	20000004 	.word	0x20000004
 8001130:	20000000 	.word	0x20000000

08001134 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_IncTick+0x1c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b05      	ldr	r3, [pc, #20]	; (8001154 <HAL_IncTick+0x20>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4413      	add	r3, r2
 8001144:	4a03      	ldr	r2, [pc, #12]	; (8001154 <HAL_IncTick+0x20>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	20000004 	.word	0x20000004
 8001154:	200002d4 	.word	0x200002d4

08001158 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b02      	ldr	r3, [pc, #8]	; (8001168 <HAL_GetTick+0x10>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr
 8001168:	200002d4 	.word	0x200002d4

0800116c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001174:	f7ff fff0 	bl	8001158 <HAL_GetTick>
 8001178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001184:	d005      	beq.n	8001192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_Delay+0x40>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001192:	bf00      	nop
 8001194:	f7ff ffe0 	bl	8001158 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d8f7      	bhi.n	8001194 <HAL_Delay+0x28>
  {
  }
}
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000004 	.word	0x20000004

080011b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011cc:	4013      	ands	r3, r2
 80011ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e2:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	60d3      	str	r3, [r2, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <__NVIC_GetPriorityGrouping+0x18>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	0a1b      	lsrs	r3, r3, #8
 8001202:	f003 0307 	and.w	r3, r3, #7
}
 8001206:	4618      	mov	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	2b00      	cmp	r3, #0
 8001224:	db0b      	blt.n	800123e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	f003 021f 	and.w	r2, r3, #31
 800122c:	4906      	ldr	r1, [pc, #24]	; (8001248 <__NVIC_EnableIRQ+0x34>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	095b      	lsrs	r3, r3, #5
 8001234:	2001      	movs	r0, #1
 8001236:	fa00 f202 	lsl.w	r2, r0, r2
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100

0800124c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	db0a      	blt.n	8001276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	490c      	ldr	r1, [pc, #48]	; (8001298 <__NVIC_SetPriority+0x4c>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	0112      	lsls	r2, r2, #4
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	440b      	add	r3, r1
 8001270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001274:	e00a      	b.n	800128c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4908      	ldr	r1, [pc, #32]	; (800129c <__NVIC_SetPriority+0x50>)
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	3b04      	subs	r3, #4
 8001284:	0112      	lsls	r2, r2, #4
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	440b      	add	r3, r1
 800128a:	761a      	strb	r2, [r3, #24]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000e100 	.word	0xe000e100
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f1c3 0307 	rsb	r3, r3, #7
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	bf28      	it	cs
 80012be:	2304      	movcs	r3, #4
 80012c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3304      	adds	r3, #4
 80012c6:	2b06      	cmp	r3, #6
 80012c8:	d902      	bls.n	80012d0 <NVIC_EncodePriority+0x30>
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3b03      	subs	r3, #3
 80012ce:	e000      	b.n	80012d2 <NVIC_EncodePriority+0x32>
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	f04f 32ff 	mov.w	r2, #4294967295
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	401a      	ands	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	43d9      	mvns	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	4313      	orrs	r3, r2
         );
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3724      	adds	r7, #36	; 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001314:	d301      	bcc.n	800131a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001316:	2301      	movs	r3, #1
 8001318:	e00f      	b.n	800133a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <SysTick_Config+0x40>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001322:	210f      	movs	r1, #15
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f7ff ff90 	bl	800124c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <SysTick_Config+0x40>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <SysTick_Config+0x40>)
 8001334:	2207      	movs	r2, #7
 8001336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	e000e010 	.word	0xe000e010

08001348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff2d 	bl	80011b0 <__NVIC_SetPriorityGrouping>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001370:	f7ff ff42 	bl	80011f8 <__NVIC_GetPriorityGrouping>
 8001374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	6978      	ldr	r0, [r7, #20]
 800137c:	f7ff ff90 	bl	80012a0 <NVIC_EncodePriority>
 8001380:	4602      	mov	r2, r0
 8001382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff5f 	bl	800124c <__NVIC_SetPriority>
}
 800138e:	bf00      	nop
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff35 	bl	8001214 <__NVIC_EnableIRQ>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ffa2 	bl	8001304 <SysTick_Config>
 80013c0:	4603      	mov	r3, r0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b08b      	sub	sp, #44	; 0x2c
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013da:	2300      	movs	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013de:	e133      	b.n	8001648 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013e0:	2201      	movs	r2, #1
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	69fa      	ldr	r2, [r7, #28]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	f040 8122 	bne.w	8001642 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b12      	cmp	r3, #18
 8001404:	d034      	beq.n	8001470 <HAL_GPIO_Init+0xa4>
 8001406:	2b12      	cmp	r3, #18
 8001408:	d80d      	bhi.n	8001426 <HAL_GPIO_Init+0x5a>
 800140a:	2b02      	cmp	r3, #2
 800140c:	d02b      	beq.n	8001466 <HAL_GPIO_Init+0x9a>
 800140e:	2b02      	cmp	r3, #2
 8001410:	d804      	bhi.n	800141c <HAL_GPIO_Init+0x50>
 8001412:	2b00      	cmp	r3, #0
 8001414:	d031      	beq.n	800147a <HAL_GPIO_Init+0xae>
 8001416:	2b01      	cmp	r3, #1
 8001418:	d01c      	beq.n	8001454 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800141a:	e048      	b.n	80014ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800141c:	2b03      	cmp	r3, #3
 800141e:	d043      	beq.n	80014a8 <HAL_GPIO_Init+0xdc>
 8001420:	2b11      	cmp	r3, #17
 8001422:	d01b      	beq.n	800145c <HAL_GPIO_Init+0x90>
          break;
 8001424:	e043      	b.n	80014ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001426:	4a8f      	ldr	r2, [pc, #572]	; (8001664 <HAL_GPIO_Init+0x298>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d026      	beq.n	800147a <HAL_GPIO_Init+0xae>
 800142c:	4a8d      	ldr	r2, [pc, #564]	; (8001664 <HAL_GPIO_Init+0x298>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d806      	bhi.n	8001440 <HAL_GPIO_Init+0x74>
 8001432:	4a8d      	ldr	r2, [pc, #564]	; (8001668 <HAL_GPIO_Init+0x29c>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d020      	beq.n	800147a <HAL_GPIO_Init+0xae>
 8001438:	4a8c      	ldr	r2, [pc, #560]	; (800166c <HAL_GPIO_Init+0x2a0>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d01d      	beq.n	800147a <HAL_GPIO_Init+0xae>
          break;
 800143e:	e036      	b.n	80014ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001440:	4a8b      	ldr	r2, [pc, #556]	; (8001670 <HAL_GPIO_Init+0x2a4>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d019      	beq.n	800147a <HAL_GPIO_Init+0xae>
 8001446:	4a8b      	ldr	r2, [pc, #556]	; (8001674 <HAL_GPIO_Init+0x2a8>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d016      	beq.n	800147a <HAL_GPIO_Init+0xae>
 800144c:	4a8a      	ldr	r2, [pc, #552]	; (8001678 <HAL_GPIO_Init+0x2ac>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d013      	beq.n	800147a <HAL_GPIO_Init+0xae>
          break;
 8001452:	e02c      	b.n	80014ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	623b      	str	r3, [r7, #32]
          break;
 800145a:	e028      	b.n	80014ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	3304      	adds	r3, #4
 8001462:	623b      	str	r3, [r7, #32]
          break;
 8001464:	e023      	b.n	80014ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	3308      	adds	r3, #8
 800146c:	623b      	str	r3, [r7, #32]
          break;
 800146e:	e01e      	b.n	80014ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	330c      	adds	r3, #12
 8001476:	623b      	str	r3, [r7, #32]
          break;
 8001478:	e019      	b.n	80014ae <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d102      	bne.n	8001488 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001482:	2304      	movs	r3, #4
 8001484:	623b      	str	r3, [r7, #32]
          break;
 8001486:	e012      	b.n	80014ae <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d105      	bne.n	800149c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001490:	2308      	movs	r3, #8
 8001492:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69fa      	ldr	r2, [r7, #28]
 8001498:	611a      	str	r2, [r3, #16]
          break;
 800149a:	e008      	b.n	80014ae <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800149c:	2308      	movs	r3, #8
 800149e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69fa      	ldr	r2, [r7, #28]
 80014a4:	615a      	str	r2, [r3, #20]
          break;
 80014a6:	e002      	b.n	80014ae <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]
          break;
 80014ac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	2bff      	cmp	r3, #255	; 0xff
 80014b2:	d801      	bhi.n	80014b8 <HAL_GPIO_Init+0xec>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	e001      	b.n	80014bc <HAL_GPIO_Init+0xf0>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3304      	adds	r3, #4
 80014bc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	2bff      	cmp	r3, #255	; 0xff
 80014c2:	d802      	bhi.n	80014ca <HAL_GPIO_Init+0xfe>
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	e002      	b.n	80014d0 <HAL_GPIO_Init+0x104>
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	3b08      	subs	r3, #8
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	210f      	movs	r1, #15
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	fa01 f303 	lsl.w	r3, r1, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	401a      	ands	r2, r3
 80014e2:	6a39      	ldr	r1, [r7, #32]
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	431a      	orrs	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 80a2 	beq.w	8001642 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014fe:	4b5f      	ldr	r3, [pc, #380]	; (800167c <HAL_GPIO_Init+0x2b0>)
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	4a5e      	ldr	r2, [pc, #376]	; (800167c <HAL_GPIO_Init+0x2b0>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6193      	str	r3, [r2, #24]
 800150a:	4b5c      	ldr	r3, [pc, #368]	; (800167c <HAL_GPIO_Init+0x2b0>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001516:	4a5a      	ldr	r2, [pc, #360]	; (8001680 <HAL_GPIO_Init+0x2b4>)
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	089b      	lsrs	r3, r3, #2
 800151c:	3302      	adds	r3, #2
 800151e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001522:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	f003 0303 	and.w	r3, r3, #3
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	220f      	movs	r2, #15
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	4013      	ands	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a51      	ldr	r2, [pc, #324]	; (8001684 <HAL_GPIO_Init+0x2b8>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d01f      	beq.n	8001582 <HAL_GPIO_Init+0x1b6>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a50      	ldr	r2, [pc, #320]	; (8001688 <HAL_GPIO_Init+0x2bc>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d019      	beq.n	800157e <HAL_GPIO_Init+0x1b2>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a4f      	ldr	r2, [pc, #316]	; (800168c <HAL_GPIO_Init+0x2c0>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d013      	beq.n	800157a <HAL_GPIO_Init+0x1ae>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a4e      	ldr	r2, [pc, #312]	; (8001690 <HAL_GPIO_Init+0x2c4>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d00d      	beq.n	8001576 <HAL_GPIO_Init+0x1aa>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4d      	ldr	r2, [pc, #308]	; (8001694 <HAL_GPIO_Init+0x2c8>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d007      	beq.n	8001572 <HAL_GPIO_Init+0x1a6>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4c      	ldr	r2, [pc, #304]	; (8001698 <HAL_GPIO_Init+0x2cc>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d101      	bne.n	800156e <HAL_GPIO_Init+0x1a2>
 800156a:	2305      	movs	r3, #5
 800156c:	e00a      	b.n	8001584 <HAL_GPIO_Init+0x1b8>
 800156e:	2306      	movs	r3, #6
 8001570:	e008      	b.n	8001584 <HAL_GPIO_Init+0x1b8>
 8001572:	2304      	movs	r3, #4
 8001574:	e006      	b.n	8001584 <HAL_GPIO_Init+0x1b8>
 8001576:	2303      	movs	r3, #3
 8001578:	e004      	b.n	8001584 <HAL_GPIO_Init+0x1b8>
 800157a:	2302      	movs	r3, #2
 800157c:	e002      	b.n	8001584 <HAL_GPIO_Init+0x1b8>
 800157e:	2301      	movs	r3, #1
 8001580:	e000      	b.n	8001584 <HAL_GPIO_Init+0x1b8>
 8001582:	2300      	movs	r3, #0
 8001584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001586:	f002 0203 	and.w	r2, r2, #3
 800158a:	0092      	lsls	r2, r2, #2
 800158c:	4093      	lsls	r3, r2
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	4313      	orrs	r3, r2
 8001592:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001594:	493a      	ldr	r1, [pc, #232]	; (8001680 <HAL_GPIO_Init+0x2b4>)
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	089b      	lsrs	r3, r3, #2
 800159a:	3302      	adds	r3, #2
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d006      	beq.n	80015bc <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015ae:	4b3b      	ldr	r3, [pc, #236]	; (800169c <HAL_GPIO_Init+0x2d0>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	493a      	ldr	r1, [pc, #232]	; (800169c <HAL_GPIO_Init+0x2d0>)
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	600b      	str	r3, [r1, #0]
 80015ba:	e006      	b.n	80015ca <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015bc:	4b37      	ldr	r3, [pc, #220]	; (800169c <HAL_GPIO_Init+0x2d0>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	4935      	ldr	r1, [pc, #212]	; (800169c <HAL_GPIO_Init+0x2d0>)
 80015c6:	4013      	ands	r3, r2
 80015c8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d006      	beq.n	80015e4 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015d6:	4b31      	ldr	r3, [pc, #196]	; (800169c <HAL_GPIO_Init+0x2d0>)
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	4930      	ldr	r1, [pc, #192]	; (800169c <HAL_GPIO_Init+0x2d0>)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	4313      	orrs	r3, r2
 80015e0:	604b      	str	r3, [r1, #4]
 80015e2:	e006      	b.n	80015f2 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015e4:	4b2d      	ldr	r3, [pc, #180]	; (800169c <HAL_GPIO_Init+0x2d0>)
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	492b      	ldr	r1, [pc, #172]	; (800169c <HAL_GPIO_Init+0x2d0>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d006      	beq.n	800160c <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015fe:	4b27      	ldr	r3, [pc, #156]	; (800169c <HAL_GPIO_Init+0x2d0>)
 8001600:	689a      	ldr	r2, [r3, #8]
 8001602:	4926      	ldr	r1, [pc, #152]	; (800169c <HAL_GPIO_Init+0x2d0>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	608b      	str	r3, [r1, #8]
 800160a:	e006      	b.n	800161a <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800160c:	4b23      	ldr	r3, [pc, #140]	; (800169c <HAL_GPIO_Init+0x2d0>)
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	43db      	mvns	r3, r3
 8001614:	4921      	ldr	r1, [pc, #132]	; (800169c <HAL_GPIO_Init+0x2d0>)
 8001616:	4013      	ands	r3, r2
 8001618:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d006      	beq.n	8001634 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001626:	4b1d      	ldr	r3, [pc, #116]	; (800169c <HAL_GPIO_Init+0x2d0>)
 8001628:	68da      	ldr	r2, [r3, #12]
 800162a:	491c      	ldr	r1, [pc, #112]	; (800169c <HAL_GPIO_Init+0x2d0>)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	60cb      	str	r3, [r1, #12]
 8001632:	e006      	b.n	8001642 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <HAL_GPIO_Init+0x2d0>)
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	43db      	mvns	r3, r3
 800163c:	4917      	ldr	r1, [pc, #92]	; (800169c <HAL_GPIO_Init+0x2d0>)
 800163e:	4013      	ands	r3, r2
 8001640:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	3301      	adds	r3, #1
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	fa22 f303 	lsr.w	r3, r2, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	f47f aec4 	bne.w	80013e0 <HAL_GPIO_Init+0x14>
  }
}
 8001658:	bf00      	nop
 800165a:	372c      	adds	r7, #44	; 0x2c
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	10210000 	.word	0x10210000
 8001668:	10110000 	.word	0x10110000
 800166c:	10120000 	.word	0x10120000
 8001670:	10310000 	.word	0x10310000
 8001674:	10320000 	.word	0x10320000
 8001678:	10220000 	.word	0x10220000
 800167c:	40021000 	.word	0x40021000
 8001680:	40010000 	.word	0x40010000
 8001684:	40010800 	.word	0x40010800
 8001688:	40010c00 	.word	0x40010c00
 800168c:	40011000 	.word	0x40011000
 8001690:	40011400 	.word	0x40011400
 8001694:	40011800 	.word	0x40011800
 8001698:	40011c00 	.word	0x40011c00
 800169c:	40010400 	.word	0x40010400

080016a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	887b      	ldrh	r3, [r7, #2]
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016b8:	2301      	movs	r3, #1
 80016ba:	73fb      	strb	r3, [r7, #15]
 80016bc:	e001      	b.n	80016c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr

080016ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	460b      	mov	r3, r1
 80016d8:	807b      	strh	r3, [r7, #2]
 80016da:	4613      	mov	r3, r2
 80016dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016de:	787b      	ldrb	r3, [r7, #1]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016e4:	887a      	ldrh	r2, [r7, #2]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016ea:	e003      	b.n	80016f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016ec:	887b      	ldrh	r3, [r7, #2]
 80016ee:	041a      	lsls	r2, r3, #16
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	611a      	str	r2, [r3, #16]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr

080016fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	460b      	mov	r3, r1
 8001708:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	887b      	ldrh	r3, [r7, #2]
 8001710:	4013      	ands	r3, r2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001716:	887a      	ldrh	r2, [r7, #2]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800171c:	e002      	b.n	8001724 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800171e:	887a      	ldrh	r2, [r7, #2]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	611a      	str	r2, [r3, #16]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr
	...

08001730 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800173c:	695a      	ldr	r2, [r3, #20]
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	4013      	ands	r3, r2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d006      	beq.n	8001754 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001746:	4a05      	ldr	r2, [pc, #20]	; (800175c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800174c:	88fb      	ldrh	r3, [r7, #6]
 800174e:	4618      	mov	r0, r3
 8001750:	f006 f960 	bl	8007a14 <HAL_GPIO_EXTI_Callback>
  }
}
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40010400 	.word	0x40010400

08001760 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e26c      	b.n	8001c4c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 8087 	beq.w	800188e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001780:	4b92      	ldr	r3, [pc, #584]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 030c 	and.w	r3, r3, #12
 8001788:	2b04      	cmp	r3, #4
 800178a:	d00c      	beq.n	80017a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800178c:	4b8f      	ldr	r3, [pc, #572]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 030c 	and.w	r3, r3, #12
 8001794:	2b08      	cmp	r3, #8
 8001796:	d112      	bne.n	80017be <HAL_RCC_OscConfig+0x5e>
 8001798:	4b8c      	ldr	r3, [pc, #560]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a4:	d10b      	bne.n	80017be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a6:	4b89      	ldr	r3, [pc, #548]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d06c      	beq.n	800188c <HAL_RCC_OscConfig+0x12c>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d168      	bne.n	800188c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e246      	b.n	8001c4c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c6:	d106      	bne.n	80017d6 <HAL_RCC_OscConfig+0x76>
 80017c8:	4b80      	ldr	r3, [pc, #512]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a7f      	ldr	r2, [pc, #508]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80017ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	e02e      	b.n	8001834 <HAL_RCC_OscConfig+0xd4>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10c      	bne.n	80017f8 <HAL_RCC_OscConfig+0x98>
 80017de:	4b7b      	ldr	r3, [pc, #492]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a7a      	ldr	r2, [pc, #488]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80017e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	4b78      	ldr	r3, [pc, #480]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a77      	ldr	r2, [pc, #476]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80017f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	e01d      	b.n	8001834 <HAL_RCC_OscConfig+0xd4>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001800:	d10c      	bne.n	800181c <HAL_RCC_OscConfig+0xbc>
 8001802:	4b72      	ldr	r3, [pc, #456]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a71      	ldr	r2, [pc, #452]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	4b6f      	ldr	r3, [pc, #444]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a6e      	ldr	r2, [pc, #440]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	e00b      	b.n	8001834 <HAL_RCC_OscConfig+0xd4>
 800181c:	4b6b      	ldr	r3, [pc, #428]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a6a      	ldr	r2, [pc, #424]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	4b68      	ldr	r3, [pc, #416]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a67      	ldr	r2, [pc, #412]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 800182e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001832:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d013      	beq.n	8001864 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183c:	f7ff fc8c 	bl	8001158 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001844:	f7ff fc88 	bl	8001158 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b64      	cmp	r3, #100	; 0x64
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e1fa      	b.n	8001c4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001856:	4b5d      	ldr	r3, [pc, #372]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0xe4>
 8001862:	e014      	b.n	800188e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001864:	f7ff fc78 	bl	8001158 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800186c:	f7ff fc74 	bl	8001158 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b64      	cmp	r3, #100	; 0x64
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e1e6      	b.n	8001c4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800187e:	4b53      	ldr	r3, [pc, #332]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f0      	bne.n	800186c <HAL_RCC_OscConfig+0x10c>
 800188a:	e000      	b.n	800188e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d063      	beq.n	8001962 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800189a:	4b4c      	ldr	r3, [pc, #304]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 030c 	and.w	r3, r3, #12
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00b      	beq.n	80018be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018a6:	4b49      	ldr	r3, [pc, #292]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d11c      	bne.n	80018ec <HAL_RCC_OscConfig+0x18c>
 80018b2:	4b46      	ldr	r3, [pc, #280]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d116      	bne.n	80018ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018be:	4b43      	ldr	r3, [pc, #268]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d005      	beq.n	80018d6 <HAL_RCC_OscConfig+0x176>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d001      	beq.n	80018d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e1ba      	b.n	8001c4c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d6:	4b3d      	ldr	r3, [pc, #244]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	4939      	ldr	r1, [pc, #228]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ea:	e03a      	b.n	8001962 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d020      	beq.n	8001936 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f4:	4b36      	ldr	r3, [pc, #216]	; (80019d0 <HAL_RCC_OscConfig+0x270>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fa:	f7ff fc2d 	bl	8001158 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001902:	f7ff fc29 	bl	8001158 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e19b      	b.n	8001c4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001914:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0f0      	beq.n	8001902 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001920:	4b2a      	ldr	r3, [pc, #168]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	4927      	ldr	r1, [pc, #156]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001930:	4313      	orrs	r3, r2
 8001932:	600b      	str	r3, [r1, #0]
 8001934:	e015      	b.n	8001962 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001936:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <HAL_RCC_OscConfig+0x270>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193c:	f7ff fc0c 	bl	8001158 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001944:	f7ff fc08 	bl	8001158 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e17a      	b.n	8001c4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001956:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	2b00      	cmp	r3, #0
 800196c:	d03a      	beq.n	80019e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d019      	beq.n	80019aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001976:	4b17      	ldr	r3, [pc, #92]	; (80019d4 <HAL_RCC_OscConfig+0x274>)
 8001978:	2201      	movs	r2, #1
 800197a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197c:	f7ff fbec 	bl	8001158 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001984:	f7ff fbe8 	bl	8001158 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e15a      	b.n	8001c4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001996:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <HAL_RCC_OscConfig+0x26c>)
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019a2:	2001      	movs	r0, #1
 80019a4:	f000 fada 	bl	8001f5c <RCC_Delay>
 80019a8:	e01c      	b.n	80019e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019aa:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <HAL_RCC_OscConfig+0x274>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b0:	f7ff fbd2 	bl	8001158 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b6:	e00f      	b.n	80019d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b8:	f7ff fbce 	bl	8001158 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d908      	bls.n	80019d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e140      	b.n	8001c4c <HAL_RCC_OscConfig+0x4ec>
 80019ca:	bf00      	nop
 80019cc:	40021000 	.word	0x40021000
 80019d0:	42420000 	.word	0x42420000
 80019d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d8:	4b9e      	ldr	r3, [pc, #632]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1e9      	bne.n	80019b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 80a6 	beq.w	8001b3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019f2:	2300      	movs	r3, #0
 80019f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f6:	4b97      	ldr	r3, [pc, #604]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10d      	bne.n	8001a1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a02:	4b94      	ldr	r3, [pc, #592]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	4a93      	ldr	r2, [pc, #588]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	61d3      	str	r3, [r2, #28]
 8001a0e:	4b91      	ldr	r3, [pc, #580]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1e:	4b8e      	ldr	r3, [pc, #568]	; (8001c58 <HAL_RCC_OscConfig+0x4f8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d118      	bne.n	8001a5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2a:	4b8b      	ldr	r3, [pc, #556]	; (8001c58 <HAL_RCC_OscConfig+0x4f8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a8a      	ldr	r2, [pc, #552]	; (8001c58 <HAL_RCC_OscConfig+0x4f8>)
 8001a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a36:	f7ff fb8f 	bl	8001158 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a3e:	f7ff fb8b 	bl	8001158 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b64      	cmp	r3, #100	; 0x64
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e0fd      	b.n	8001c4c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a50:	4b81      	ldr	r3, [pc, #516]	; (8001c58 <HAL_RCC_OscConfig+0x4f8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d106      	bne.n	8001a72 <HAL_RCC_OscConfig+0x312>
 8001a64:	4b7b      	ldr	r3, [pc, #492]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	4a7a      	ldr	r2, [pc, #488]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6213      	str	r3, [r2, #32]
 8001a70:	e02d      	b.n	8001ace <HAL_RCC_OscConfig+0x36e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x334>
 8001a7a:	4b76      	ldr	r3, [pc, #472]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
 8001a7e:	4a75      	ldr	r2, [pc, #468]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6213      	str	r3, [r2, #32]
 8001a86:	4b73      	ldr	r3, [pc, #460]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	4a72      	ldr	r2, [pc, #456]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001a8c:	f023 0304 	bic.w	r3, r3, #4
 8001a90:	6213      	str	r3, [r2, #32]
 8001a92:	e01c      	b.n	8001ace <HAL_RCC_OscConfig+0x36e>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b05      	cmp	r3, #5
 8001a9a:	d10c      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x356>
 8001a9c:	4b6d      	ldr	r3, [pc, #436]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001a9e:	6a1b      	ldr	r3, [r3, #32]
 8001aa0:	4a6c      	ldr	r2, [pc, #432]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001aa2:	f043 0304 	orr.w	r3, r3, #4
 8001aa6:	6213      	str	r3, [r2, #32]
 8001aa8:	4b6a      	ldr	r3, [pc, #424]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	4a69      	ldr	r2, [pc, #420]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6213      	str	r3, [r2, #32]
 8001ab4:	e00b      	b.n	8001ace <HAL_RCC_OscConfig+0x36e>
 8001ab6:	4b67      	ldr	r3, [pc, #412]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	4a66      	ldr	r2, [pc, #408]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001abc:	f023 0301 	bic.w	r3, r3, #1
 8001ac0:	6213      	str	r3, [r2, #32]
 8001ac2:	4b64      	ldr	r3, [pc, #400]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	4a63      	ldr	r2, [pc, #396]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001ac8:	f023 0304 	bic.w	r3, r3, #4
 8001acc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d015      	beq.n	8001b02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad6:	f7ff fb3f 	bl	8001158 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001adc:	e00a      	b.n	8001af4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ade:	f7ff fb3b 	bl	8001158 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e0ab      	b.n	8001c4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af4:	4b57      	ldr	r3, [pc, #348]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0ee      	beq.n	8001ade <HAL_RCC_OscConfig+0x37e>
 8001b00:	e014      	b.n	8001b2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b02:	f7ff fb29 	bl	8001158 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b08:	e00a      	b.n	8001b20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0a:	f7ff fb25 	bl	8001158 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e095      	b.n	8001c4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b20:	4b4c      	ldr	r3, [pc, #304]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1ee      	bne.n	8001b0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b2c:	7dfb      	ldrb	r3, [r7, #23]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d105      	bne.n	8001b3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b32:	4b48      	ldr	r3, [pc, #288]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	4a47      	ldr	r2, [pc, #284]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 8081 	beq.w	8001c4a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b48:	4b42      	ldr	r3, [pc, #264]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 030c 	and.w	r3, r3, #12
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d061      	beq.n	8001c18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d146      	bne.n	8001bea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5c:	4b3f      	ldr	r3, [pc, #252]	; (8001c5c <HAL_RCC_OscConfig+0x4fc>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b62:	f7ff faf9 	bl	8001158 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6a:	f7ff faf5 	bl	8001158 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e067      	b.n	8001c4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b7c:	4b35      	ldr	r3, [pc, #212]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f0      	bne.n	8001b6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b90:	d108      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b92:	4b30      	ldr	r3, [pc, #192]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	492d      	ldr	r1, [pc, #180]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ba4:	4b2b      	ldr	r3, [pc, #172]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a19      	ldr	r1, [r3, #32]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	430b      	orrs	r3, r1
 8001bb6:	4927      	ldr	r1, [pc, #156]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bbc:	4b27      	ldr	r3, [pc, #156]	; (8001c5c <HAL_RCC_OscConfig+0x4fc>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc2:	f7ff fac9 	bl	8001158 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bca:	f7ff fac5 	bl	8001158 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e037      	b.n	8001c4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f0      	beq.n	8001bca <HAL_RCC_OscConfig+0x46a>
 8001be8:	e02f      	b.n	8001c4a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bea:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <HAL_RCC_OscConfig+0x4fc>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fab2 	bl	8001158 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf8:	f7ff faae 	bl	8001158 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e020      	b.n	8001c4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x498>
 8001c16:	e018      	b.n	8001c4a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d101      	bne.n	8001c24 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e013      	b.n	8001c4c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_RCC_OscConfig+0x4f4>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d106      	bne.n	8001c46 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d001      	beq.n	8001c4a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40007000 	.word	0x40007000
 8001c5c:	42420060 	.word	0x42420060

08001c60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0d0      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c74:	4b6a      	ldr	r3, [pc, #424]	; (8001e20 <HAL_RCC_ClockConfig+0x1c0>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d910      	bls.n	8001ca4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c82:	4b67      	ldr	r3, [pc, #412]	; (8001e20 <HAL_RCC_ClockConfig+0x1c0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f023 0207 	bic.w	r2, r3, #7
 8001c8a:	4965      	ldr	r1, [pc, #404]	; (8001e20 <HAL_RCC_ClockConfig+0x1c0>)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c92:	4b63      	ldr	r3, [pc, #396]	; (8001e20 <HAL_RCC_ClockConfig+0x1c0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0b8      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d020      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cbc:	4b59      	ldr	r3, [pc, #356]	; (8001e24 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	4a58      	ldr	r2, [pc, #352]	; (8001e24 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d005      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cd4:	4b53      	ldr	r3, [pc, #332]	; (8001e24 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	4a52      	ldr	r2, [pc, #328]	; (8001e24 <HAL_RCC_ClockConfig+0x1c4>)
 8001cda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cde:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce0:	4b50      	ldr	r3, [pc, #320]	; (8001e24 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	494d      	ldr	r1, [pc, #308]	; (8001e24 <HAL_RCC_ClockConfig+0x1c4>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d040      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d107      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d06:	4b47      	ldr	r3, [pc, #284]	; (8001e24 <HAL_RCC_ClockConfig+0x1c4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d115      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e07f      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d107      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d1e:	4b41      	ldr	r3, [pc, #260]	; (8001e24 <HAL_RCC_ClockConfig+0x1c4>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d109      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e073      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2e:	4b3d      	ldr	r3, [pc, #244]	; (8001e24 <HAL_RCC_ClockConfig+0x1c4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e06b      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d3e:	4b39      	ldr	r3, [pc, #228]	; (8001e24 <HAL_RCC_ClockConfig+0x1c4>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f023 0203 	bic.w	r2, r3, #3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	4936      	ldr	r1, [pc, #216]	; (8001e24 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d50:	f7ff fa02 	bl	8001158 <HAL_GetTick>
 8001d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d56:	e00a      	b.n	8001d6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d58:	f7ff f9fe 	bl	8001158 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e053      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6e:	4b2d      	ldr	r3, [pc, #180]	; (8001e24 <HAL_RCC_ClockConfig+0x1c4>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 020c 	and.w	r2, r3, #12
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d1eb      	bne.n	8001d58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d80:	4b27      	ldr	r3, [pc, #156]	; (8001e20 <HAL_RCC_ClockConfig+0x1c0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d210      	bcs.n	8001db0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d8e:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <HAL_RCC_ClockConfig+0x1c0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 0207 	bic.w	r2, r3, #7
 8001d96:	4922      	ldr	r1, [pc, #136]	; (8001e20 <HAL_RCC_ClockConfig+0x1c0>)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9e:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <HAL_RCC_ClockConfig+0x1c0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d001      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e032      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d008      	beq.n	8001dce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dbc:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	4916      	ldr	r1, [pc, #88]	; (8001e24 <HAL_RCC_ClockConfig+0x1c4>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d009      	beq.n	8001dee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dda:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_RCC_ClockConfig+0x1c4>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	490e      	ldr	r1, [pc, #56]	; (8001e24 <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dee:	f000 f821 	bl	8001e34 <HAL_RCC_GetSysClockFreq>
 8001df2:	4601      	mov	r1, r0
 8001df4:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <HAL_RCC_ClockConfig+0x1c4>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	091b      	lsrs	r3, r3, #4
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <HAL_RCC_ClockConfig+0x1c8>)
 8001e00:	5cd3      	ldrb	r3, [r2, r3]
 8001e02:	fa21 f303 	lsr.w	r3, r1, r3
 8001e06:	4a09      	ldr	r2, [pc, #36]	; (8001e2c <HAL_RCC_ClockConfig+0x1cc>)
 8001e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <HAL_RCC_ClockConfig+0x1d0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff f960 	bl	80010d4 <HAL_InitTick>

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40022000 	.word	0x40022000
 8001e24:	40021000 	.word	0x40021000
 8001e28:	0800a480 	.word	0x0800a480
 8001e2c:	200000d0 	.word	0x200000d0
 8001e30:	20000000 	.word	0x20000000

08001e34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e34:	b490      	push	{r4, r7}
 8001e36:	b08a      	sub	sp, #40	; 0x28
 8001e38:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e3c:	1d3c      	adds	r4, r7, #4
 8001e3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e44:	4b28      	ldr	r3, [pc, #160]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61bb      	str	r3, [r7, #24]
 8001e52:	2300      	movs	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e5e:	4b23      	ldr	r3, [pc, #140]	; (8001eec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d002      	beq.n	8001e74 <HAL_RCC_GetSysClockFreq+0x40>
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d003      	beq.n	8001e7a <HAL_RCC_GetSysClockFreq+0x46>
 8001e72:	e02d      	b.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e74:	4b1e      	ldr	r3, [pc, #120]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e76:	623b      	str	r3, [r7, #32]
      break;
 8001e78:	e02d      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	0c9b      	lsrs	r3, r3, #18
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e86:	4413      	add	r3, r2
 8001e88:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e8c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d013      	beq.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e98:	4b14      	ldr	r3, [pc, #80]	; (8001eec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	0c5b      	lsrs	r3, r3, #17
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001eac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	4a0f      	ldr	r2, [pc, #60]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001eb2:	fb02 f203 	mul.w	r2, r2, r3
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ebe:	e004      	b.n	8001eca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	4a0c      	ldr	r2, [pc, #48]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ec4:	fb02 f303 	mul.w	r3, r2, r3
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	623b      	str	r3, [r7, #32]
      break;
 8001ece:	e002      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ed0:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ed2:	623b      	str	r3, [r7, #32]
      break;
 8001ed4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3728      	adds	r7, #40	; 0x28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc90      	pop	{r4, r7}
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	0800a3f8 	.word	0x0800a3f8
 8001ee8:	0800a408 	.word	0x0800a408
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	007a1200 	.word	0x007a1200
 8001ef4:	003d0900 	.word	0x003d0900

08001ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001efc:	4b02      	ldr	r3, [pc, #8]	; (8001f08 <HAL_RCC_GetHCLKFreq+0x10>)
 8001efe:	681b      	ldr	r3, [r3, #0]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr
 8001f08:	200000d0 	.word	0x200000d0

08001f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f10:	f7ff fff2 	bl	8001ef8 <HAL_RCC_GetHCLKFreq>
 8001f14:	4601      	mov	r1, r0
 8001f16:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	0a1b      	lsrs	r3, r3, #8
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	4a03      	ldr	r2, [pc, #12]	; (8001f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f22:	5cd3      	ldrb	r3, [r2, r3]
 8001f24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	0800a490 	.word	0x0800a490

08001f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f38:	f7ff ffde 	bl	8001ef8 <HAL_RCC_GetHCLKFreq>
 8001f3c:	4601      	mov	r1, r0
 8001f3e:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	0adb      	lsrs	r3, r3, #11
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	4a03      	ldr	r2, [pc, #12]	; (8001f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f4a:	5cd3      	ldrb	r3, [r2, r3]
 8001f4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40021000 	.word	0x40021000
 8001f58:	0800a490 	.word	0x0800a490

08001f5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f64:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <RCC_Delay+0x34>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <RCC_Delay+0x38>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	0a5b      	lsrs	r3, r3, #9
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	fb02 f303 	mul.w	r3, r2, r3
 8001f76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f78:	bf00      	nop
  }
  while (Delay --);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1e5a      	subs	r2, r3, #1
 8001f7e:	60fa      	str	r2, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f9      	bne.n	8001f78 <RCC_Delay+0x1c>
}
 8001f84:	bf00      	nop
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bc80      	pop	{r7}
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	200000d0 	.word	0x200000d0
 8001f94:	10624dd3 	.word	0x10624dd3

08001f98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e03f      	b.n	800202a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d106      	bne.n	8001fc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f005 feb2 	bl	8007d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2224      	movs	r2, #36	; 0x24
 8001fc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f90b 	bl	80021f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ff0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	695a      	ldr	r2, [r3, #20]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002000:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002010:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2220      	movs	r2, #32
 800201c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2220      	movs	r2, #32
 8002024:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b088      	sub	sp, #32
 8002036:	af02      	add	r7, sp, #8
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	603b      	str	r3, [r7, #0]
 800203e:	4613      	mov	r3, r2
 8002040:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b20      	cmp	r3, #32
 8002050:	f040 8083 	bne.w	800215a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d002      	beq.n	8002060 <HAL_UART_Transmit+0x2e>
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e07b      	b.n	800215c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_UART_Transmit+0x40>
 800206e:	2302      	movs	r3, #2
 8002070:	e074      	b.n	800215c <HAL_UART_Transmit+0x12a>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2221      	movs	r2, #33	; 0x21
 8002084:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002088:	f7ff f866 	bl	8001158 <HAL_GetTick>
 800208c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	88fa      	ldrh	r2, [r7, #6]
 8002092:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	88fa      	ldrh	r2, [r7, #6]
 8002098:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800209a:	e042      	b.n	8002122 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	3b01      	subs	r3, #1
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020b2:	d122      	bne.n	80020fa <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	2200      	movs	r2, #0
 80020bc:	2180      	movs	r1, #128	; 0x80
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 f850 	bl	8002164 <UART_WaitOnFlagUntilTimeout>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e046      	b.n	800215c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020e0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d103      	bne.n	80020f2 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	3302      	adds	r3, #2
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	e017      	b.n	8002122 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	3301      	adds	r3, #1
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	e013      	b.n	8002122 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2200      	movs	r2, #0
 8002102:	2180      	movs	r1, #128	; 0x80
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f000 f82d 	bl	8002164 <UART_WaitOnFlagUntilTimeout>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e023      	b.n	800215c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	60ba      	str	r2, [r7, #8]
 800211a:	781a      	ldrb	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002126:	b29b      	uxth	r3, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1b7      	bne.n	800209c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2200      	movs	r2, #0
 8002134:	2140      	movs	r1, #64	; 0x40
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 f814 	bl	8002164 <UART_WaitOnFlagUntilTimeout>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e00a      	b.n	800215c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2220      	movs	r2, #32
 800214a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	e000      	b.n	800215c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800215a:	2302      	movs	r3, #2
  }
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	4613      	mov	r3, r2
 8002172:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002174:	e02c      	b.n	80021d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217c:	d028      	beq.n	80021d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d007      	beq.n	8002194 <UART_WaitOnFlagUntilTimeout+0x30>
 8002184:	f7fe ffe8 	bl	8001158 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	429a      	cmp	r2, r3
 8002192:	d21d      	bcs.n	80021d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80021a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0201 	bic.w	r2, r2, #1
 80021b2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2220      	movs	r2, #32
 80021b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2220      	movs	r2, #32
 80021c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e00f      	b.n	80021f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	4013      	ands	r3, r2
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	429a      	cmp	r2, r3
 80021de:	bf0c      	ite	eq
 80021e0:	2301      	moveq	r3, #1
 80021e2:	2300      	movne	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d0c3      	beq.n	8002176 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	4313      	orrs	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002232:	f023 030c 	bic.w	r3, r3, #12
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	68f9      	ldr	r1, [r7, #12]
 800223c:	430b      	orrs	r3, r1
 800223e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699a      	ldr	r2, [r3, #24]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a52      	ldr	r2, [pc, #328]	; (80023a4 <UART_SetConfig+0x1ac>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d14e      	bne.n	80022fe <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002260:	f7ff fe68 	bl	8001f34 <HAL_RCC_GetPCLK2Freq>
 8002264:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	009a      	lsls	r2, r3, #2
 8002270:	441a      	add	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	fbb2 f3f3 	udiv	r3, r2, r3
 800227c:	4a4a      	ldr	r2, [pc, #296]	; (80023a8 <UART_SetConfig+0x1b0>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	0119      	lsls	r1, r3, #4
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	009a      	lsls	r2, r3, #2
 8002290:	441a      	add	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	fbb2 f2f3 	udiv	r2, r2, r3
 800229c:	4b42      	ldr	r3, [pc, #264]	; (80023a8 <UART_SetConfig+0x1b0>)
 800229e:	fba3 0302 	umull	r0, r3, r3, r2
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	2064      	movs	r0, #100	; 0x64
 80022a6:	fb00 f303 	mul.w	r3, r0, r3
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	3332      	adds	r3, #50	; 0x32
 80022b0:	4a3d      	ldr	r2, [pc, #244]	; (80023a8 <UART_SetConfig+0x1b0>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	095b      	lsrs	r3, r3, #5
 80022b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022bc:	4419      	add	r1, r3
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	009a      	lsls	r2, r3, #2
 80022c8:	441a      	add	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80022d4:	4b34      	ldr	r3, [pc, #208]	; (80023a8 <UART_SetConfig+0x1b0>)
 80022d6:	fba3 0302 	umull	r0, r3, r3, r2
 80022da:	095b      	lsrs	r3, r3, #5
 80022dc:	2064      	movs	r0, #100	; 0x64
 80022de:	fb00 f303 	mul.w	r3, r0, r3
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	3332      	adds	r3, #50	; 0x32
 80022e8:	4a2f      	ldr	r2, [pc, #188]	; (80023a8 <UART_SetConfig+0x1b0>)
 80022ea:	fba2 2303 	umull	r2, r3, r2, r3
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	f003 020f 	and.w	r2, r3, #15
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	440a      	add	r2, r1
 80022fa:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80022fc:	e04d      	b.n	800239a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80022fe:	f7ff fe05 	bl	8001f0c <HAL_RCC_GetPCLK1Freq>
 8002302:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	009a      	lsls	r2, r3, #2
 800230e:	441a      	add	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	fbb2 f3f3 	udiv	r3, r2, r3
 800231a:	4a23      	ldr	r2, [pc, #140]	; (80023a8 <UART_SetConfig+0x1b0>)
 800231c:	fba2 2303 	umull	r2, r3, r2, r3
 8002320:	095b      	lsrs	r3, r3, #5
 8002322:	0119      	lsls	r1, r3, #4
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	009a      	lsls	r2, r3, #2
 800232e:	441a      	add	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	fbb2 f2f3 	udiv	r2, r2, r3
 800233a:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <UART_SetConfig+0x1b0>)
 800233c:	fba3 0302 	umull	r0, r3, r3, r2
 8002340:	095b      	lsrs	r3, r3, #5
 8002342:	2064      	movs	r0, #100	; 0x64
 8002344:	fb00 f303 	mul.w	r3, r0, r3
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	3332      	adds	r3, #50	; 0x32
 800234e:	4a16      	ldr	r2, [pc, #88]	; (80023a8 <UART_SetConfig+0x1b0>)
 8002350:	fba2 2303 	umull	r2, r3, r2, r3
 8002354:	095b      	lsrs	r3, r3, #5
 8002356:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800235a:	4419      	add	r1, r3
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	009a      	lsls	r2, r3, #2
 8002366:	441a      	add	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002372:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <UART_SetConfig+0x1b0>)
 8002374:	fba3 0302 	umull	r0, r3, r3, r2
 8002378:	095b      	lsrs	r3, r3, #5
 800237a:	2064      	movs	r0, #100	; 0x64
 800237c:	fb00 f303 	mul.w	r3, r0, r3
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	3332      	adds	r3, #50	; 0x32
 8002386:	4a08      	ldr	r2, [pc, #32]	; (80023a8 <UART_SetConfig+0x1b0>)
 8002388:	fba2 2303 	umull	r2, r3, r2, r3
 800238c:	095b      	lsrs	r3, r3, #5
 800238e:	f003 020f 	and.w	r2, r3, #15
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	440a      	add	r2, r1
 8002398:	609a      	str	r2, [r3, #8]
}
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40013800 	.word	0x40013800
 80023a8:	51eb851f 	.word	0x51eb851f

080023ac <GameEngineLoop>:
#include "Renderer.h"
#include "Time.h"
#include "mygpio.h"

void GameEngineLoop()
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
	Node *it;
	GameEvent *event;
	void *game_object;
	unsigned i, j;

	Time_OnStart();
 80023b2:	f005 ff25 	bl	8008200 <Time_OnStart>

	while (true)
	{
		// init
		i = 0; j = 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
		screen = InitScreen(screen);
 80023be:	4b34      	ldr	r3, [pc, #208]	; (8002490 <GameEngineLoop+0xe4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f005 fe55 	bl	8008072 <InitScreen>
 80023c8:	4602      	mov	r2, r0
 80023ca:	4b31      	ldr	r3, [pc, #196]	; (8002490 <GameEngineLoop+0xe4>)
 80023cc:	601a      	str	r2, [r3, #0]
		// object loop
		for (it = objects.head; it; it = it->next)
 80023ce:	4b31      	ldr	r3, [pc, #196]	; (8002494 <GameEngineLoop+0xe8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	e03d      	b.n	8002452 <GameEngineLoop+0xa6>
		{
			event = ((GameEvent*)it->object);
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	60bb      	str	r3, [r7, #8]
			game_object = event->game_object;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	607b      	str	r3, [r7, #4]
			Time_OnUpdate();
 80023e2:	f005 ff19 	bl	8008218 <Time_OnUpdate>

			// Create
			if (!event->__Created(game_object))
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	4798      	blx	r3
 80023ee:	4603      	mov	r3, r0
 80023f0:	f083 0301 	eor.w	r3, r3, #1
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <GameEngineLoop+0x56>
			{
				event->OnCreate(game_object);
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	4798      	blx	r3
			}
			// Update
			event->OnUpdate(game_object);
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	4798      	blx	r3
			// Destroy
			if (event->__ToDestroy(game_object))
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	4798      	blx	r3
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00f      	beq.n	8002438 <GameEngineLoop+0x8c>
			{
				event->OnDestroy(game_object);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	4798      	blx	r3

				free(event);
 8002420:	68b8      	ldr	r0, [r7, #8]
 8002422:	f005 ff75 	bl	8008310 <free>
				it = it->prev;
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	617b      	str	r3, [r7, #20]
				RemoveNode(it->next);
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	4618      	mov	r0, r3
 8002432:	f005 fd73 	bl	8007f1c <RemoveNode>
 8002436:	e009      	b.n	800244c <GameEngineLoop+0xa0>
			}
			// Render
			else
			{
				event->OnRender(game_object, screen);
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	4a14      	ldr	r2, [pc, #80]	; (8002490 <GameEngineLoop+0xe4>)
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	4611      	mov	r1, r2
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	4798      	blx	r3
				i++;
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	3301      	adds	r3, #1
 800244a:	613b      	str	r3, [r7, #16]
		for (it = objects.head; it; it = it->next)
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1be      	bne.n	80023d6 <GameEngineLoop+0x2a>
			}
		}
		// UI loop
		for (it = UI.head; it; it = it->next)
 8002458:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <GameEngineLoop+0xec>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	e005      	b.n	800246c <GameEngineLoop+0xc0>
		{
			j++;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	3301      	adds	r3, #1
 8002464:	60fb      	str	r3, [r7, #12]
		for (it = UI.head; it; it = it->next)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f6      	bne.n	8002460 <GameEngineLoop+0xb4>
			// TODO
		}
		// Flush
		screen = Flush(screen);
 8002472:	4b07      	ldr	r3, [pc, #28]	; (8002490 <GameEngineLoop+0xe4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f005 fe3c 	bl	80080f4 <Flush>
 800247c:	4602      	mov	r2, r0
 800247e:	4b04      	ldr	r3, [pc, #16]	; (8002490 <GameEngineLoop+0xe4>)
 8002480:	601a      	str	r2, [r3, #0]

		printlnf("%u gameobject and %u UI freshed", i, j);
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	6939      	ldr	r1, [r7, #16]
 8002486:	4805      	ldr	r0, [pc, #20]	; (800249c <GameEngineLoop+0xf0>)
 8002488:	f005 fb38 	bl	8007afc <printlnf>
		i = 0; j = 0;
 800248c:	e793      	b.n	80023b6 <GameEngineLoop+0xa>
 800248e:	bf00      	nop
 8002490:	200002d8 	.word	0x200002d8
 8002494:	200002e4 	.word	0x200002e4
 8002498:	200002dc 	.word	0x200002dc
 800249c:	0800a40c 	.word	0x0800a40c

080024a0 <RegistGameEvent>:
	void (*OnUpdate)(void*),
	void (*OnDestroy)(void*),
	void (*OnRender)(void*, Color**),
	bool (*__Created)(void*),
	bool (*__ToDestroy)(void*)
){
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	603b      	str	r3, [r7, #0]
	GameEvent* ge = malloc(sizeof(GameEvent));
 80024ae:	201c      	movs	r0, #28
 80024b0:	f005 ff26 	bl	8008300 <malloc>
 80024b4:	4603      	mov	r3, r0
 80024b6:	617b      	str	r3, [r7, #20]

	ge->game_object = game_object;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	601a      	str	r2, [r3, #0]
	ge->OnCreate = OnCreate;
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	605a      	str	r2, [r3, #4]
	ge->OnUpdate = OnUpdate;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	609a      	str	r2, [r3, #8]
	ge->OnDestroy = OnDestroy;
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	60da      	str	r2, [r3, #12]
	ge->OnRender = OnRender;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	6a3a      	ldr	r2, [r7, #32]
 80024d4:	611a      	str	r2, [r3, #16]
	ge->__Created = __Created;
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024da:	615a      	str	r2, [r3, #20]
	ge->__ToDestroy = __ToDestroy;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024e0:	619a      	str	r2, [r3, #24]

	return ge;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <GameObject_Initialize>:
void GameObject_Initialize
(
	GameObject* self, uint16_t pos_x, uint16_t pos_y, 
	uint16_t collider, uint16_t width, uint16_t height,
	Color* img
){
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	4608      	mov	r0, r1
 80024f6:	4611      	mov	r1, r2
 80024f8:	461a      	mov	r2, r3
 80024fa:	4603      	mov	r3, r0
 80024fc:	817b      	strh	r3, [r7, #10]
 80024fe:	460b      	mov	r3, r1
 8002500:	813b      	strh	r3, [r7, #8]
 8002502:	4613      	mov	r3, r2
 8002504:	80fb      	strh	r3, [r7, #6]
	self->speed_x = 0.0f;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
	self->speed_y = 0.0f;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	605a      	str	r2, [r3, #4]
	self->pos_x = (float)pos_x;
 8002516:	897b      	ldrh	r3, [r7, #10]
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe fbf7 	bl	8000d0c <__aeabi_ui2f>
 800251e:	4602      	mov	r2, r0
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	609a      	str	r2, [r3, #8]
	self->pos_y = (float)pos_y;
 8002524:	893b      	ldrh	r3, [r7, #8]
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe fbf0 	bl	8000d0c <__aeabi_ui2f>
 800252c:	4602      	mov	r2, r0
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	60da      	str	r2, [r3, #12]
	self->collider = collider;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	88fa      	ldrh	r2, [r7, #6]
 8002536:	821a      	strh	r2, [r3, #16]
	self->width = width;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8b3a      	ldrh	r2, [r7, #24]
 800253c:	825a      	strh	r2, [r3, #18]
	self->height = height;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8bba      	ldrh	r2, [r7, #28]
 8002542:	829a      	strh	r2, [r3, #20]
	self->img = img;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a3a      	ldr	r2, [r7, #32]
 8002548:	619a      	str	r2, [r3, #24]
	self->__created = false;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	771a      	strb	r2, [r3, #28]
	self->__to_destroy = false;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	775a      	strb	r2, [r3, #29]
}
 8002556:	bf00      	nop
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <GameObject_OnCreate>:

void inline GameObject_OnCreate(GameObject* self)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
	self->__created = true;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	771a      	strb	r2, [r3, #28]
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
	...

08002578 <GameObject_OnUpdate>:

void inline GameObject_OnUpdate(GameObject* self)
{
 8002578:	b590      	push	{r4, r7, lr}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
	self->pos_x += self->speed_x * delta_time;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689c      	ldr	r4, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <GameObject_OnUpdate+0x5c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4619      	mov	r1, r3
 800258e:	4610      	mov	r0, r2
 8002590:	f7fe fc14 	bl	8000dbc <__aeabi_fmul>
 8002594:	4603      	mov	r3, r0
 8002596:	4619      	mov	r1, r3
 8002598:	4620      	mov	r0, r4
 800259a:	f7fe fb07 	bl	8000bac <__addsf3>
 800259e:	4603      	mov	r3, r0
 80025a0:	461a      	mov	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	609a      	str	r2, [r3, #8]
	self->pos_y += self->speed_y * delta_time;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68dc      	ldr	r4, [r3, #12]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <GameObject_OnUpdate+0x5c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4619      	mov	r1, r3
 80025b4:	4610      	mov	r0, r2
 80025b6:	f7fe fc01 	bl	8000dbc <__aeabi_fmul>
 80025ba:	4603      	mov	r3, r0
 80025bc:	4619      	mov	r1, r3
 80025be:	4620      	mov	r0, r4
 80025c0:	f7fe faf4 	bl	8000bac <__addsf3>
 80025c4:	4603      	mov	r3, r0
 80025c6:	461a      	mov	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	60da      	str	r2, [r3, #12]
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd90      	pop	{r4, r7, pc}
 80025d4:	200002ec 	.word	0x200002ec

080025d8 <GameObject_OnRender>:

void inline GameObject_OnRender(GameObject* self, Color** screen)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
	Render(self, screen);
 80025e2:	6839      	ldr	r1, [r7, #0]
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f005 fcae 	bl	8007f46 <Render>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <GameObject_Self_Init>:
	unsigned life,
	uint16_t pos_x, uint16_t pos_y, 
	uint16_t collider,
	uint16_t width, uint16_t height,
	Color* img
){
 80025f2:	b590      	push	{r4, r7, lr}
 80025f4:	b089      	sub	sp, #36	; 0x24
 80025f6:	af04      	add	r7, sp, #16
 80025f8:	60f8      	str	r0, [r7, #12]
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	4611      	mov	r1, r2
 80025fe:	461a      	mov	r2, r3
 8002600:	460b      	mov	r3, r1
 8002602:	80fb      	strh	r3, [r7, #6]
 8002604:	4613      	mov	r3, r2
 8002606:	80bb      	strh	r3, [r7, #4]
	self->life = life;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	621a      	str	r2, [r3, #32]
	GameObject_Initialize(
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	8c3c      	ldrh	r4, [r7, #32]
 8002612:	88ba      	ldrh	r2, [r7, #4]
 8002614:	88f9      	ldrh	r1, [r7, #6]
 8002616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002618:	9302      	str	r3, [sp, #8]
 800261a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800261c:	9301      	str	r3, [sp, #4]
 800261e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	4623      	mov	r3, r4
 8002624:	f7ff ff62 	bl	80024ec <GameObject_Initialize>
		pos_x, pos_y,
		collider,
		width, height,
		img
	);
}
 8002628:	bf00      	nop
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	bd90      	pop	{r4, r7, pc}

08002630 <GameObject_Self_OnCreate>:

void inline GameObject_Self_OnCreate(GameObject_Self* self)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
	GameObject_OnCreate(&self->base);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff ff8f 	bl	800255e <GameObject_OnCreate>
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <GameObject_Self_OnUpdate>:

void inline GameObject_Self_OnUpdate(GameObject_Self* self)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
	GameObject_OnUpdate(&self->base);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff ff90 	bl	8002578 <GameObject_OnUpdate>
}
 8002658:	bf00      	nop
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <GameObject_Self_OnRender>:

void inline GameObject_Self_OnRender(GameObject_Self* self, Color** screen)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
	GameObject_OnRender(&self->base, screen);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6839      	ldr	r1, [r7, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff ffb2 	bl	80025d8 <GameObject_OnRender>
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <__GameObject_Self_Created>:

bool inline __GameObject_Self_Created(GameObject_Self* self)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
	return self->base.__created;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	7f1b      	ldrb	r3, [r3, #28]
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr

08002692 <__GameObject_Self_ToDestroy>:

bool inline __GameObject_Self_ToDestroy(GameObject_Self* self)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
	return self->base.__to_destroy;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	7f5b      	ldrb	r3, [r3, #29]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ae:	f107 0310 	add.w	r3, r7, #16
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	605a      	str	r2, [r3, #4]
 80026b8:	609a      	str	r2, [r3, #8]
 80026ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026bc:	4b46      	ldr	r3, [pc, #280]	; (80027d8 <MX_GPIO_Init+0x130>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	4a45      	ldr	r2, [pc, #276]	; (80027d8 <MX_GPIO_Init+0x130>)
 80026c2:	f043 0320 	orr.w	r3, r3, #32
 80026c6:	6193      	str	r3, [r2, #24]
 80026c8:	4b43      	ldr	r3, [pc, #268]	; (80027d8 <MX_GPIO_Init+0x130>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f003 0320 	and.w	r3, r3, #32
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d4:	4b40      	ldr	r3, [pc, #256]	; (80027d8 <MX_GPIO_Init+0x130>)
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	4a3f      	ldr	r2, [pc, #252]	; (80027d8 <MX_GPIO_Init+0x130>)
 80026da:	f043 0304 	orr.w	r3, r3, #4
 80026de:	6193      	str	r3, [r2, #24]
 80026e0:	4b3d      	ldr	r3, [pc, #244]	; (80027d8 <MX_GPIO_Init+0x130>)
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ec:	4b3a      	ldr	r3, [pc, #232]	; (80027d8 <MX_GPIO_Init+0x130>)
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	4a39      	ldr	r2, [pc, #228]	; (80027d8 <MX_GPIO_Init+0x130>)
 80026f2:	f043 0310 	orr.w	r3, r3, #16
 80026f6:	6193      	str	r3, [r2, #24]
 80026f8:	4b37      	ldr	r3, [pc, #220]	; (80027d8 <MX_GPIO_Init+0x130>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	607b      	str	r3, [r7, #4]
 8002702:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8002704:	2200      	movs	r2, #0
 8002706:	f44f 7180 	mov.w	r1, #256	; 0x100
 800270a:	4834      	ldr	r0, [pc, #208]	; (80027dc <MX_GPIO_Init+0x134>)
 800270c:	f7fe ffdf 	bl	80016ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002710:	2200      	movs	r2, #0
 8002712:	2104      	movs	r1, #4
 8002714:	4832      	ldr	r0, [pc, #200]	; (80027e0 <MX_GPIO_Init+0x138>)
 8002716:	f7fe ffda 	bl	80016ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_WK_Pin;
 800271a:	2301      	movs	r3, #1
 800271c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800271e:	4b31      	ldr	r3, [pc, #196]	; (80027e4 <MX_GPIO_Init+0x13c>)
 8002720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002722:	2302      	movs	r3, #2
 8002724:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 8002726:	f107 0310 	add.w	r3, r7, #16
 800272a:	4619      	mov	r1, r3
 800272c:	482b      	ldr	r0, [pc, #172]	; (80027dc <MX_GPIO_Init+0x134>)
 800272e:	f7fe fe4d 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8002732:	2320      	movs	r3, #32
 8002734:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002736:	4b2b      	ldr	r3, [pc, #172]	; (80027e4 <MX_GPIO_Init+0x13c>)
 8002738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800273a:	2301      	movs	r3, #1
 800273c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 800273e:	f107 0310 	add.w	r3, r7, #16
 8002742:	4619      	mov	r1, r3
 8002744:	4828      	ldr	r0, [pc, #160]	; (80027e8 <MX_GPIO_Init+0x140>)
 8002746:	f7fe fe41 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 800274a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800274e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002750:	2301      	movs	r3, #1
 8002752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2302      	movs	r3, #2
 800275a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 800275c:	f107 0310 	add.w	r3, r7, #16
 8002760:	4619      	mov	r1, r3
 8002762:	481e      	ldr	r0, [pc, #120]	; (80027dc <MX_GPIO_Init+0x134>)
 8002764:	f7fe fe32 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8002768:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800276c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800276e:	4b1d      	ldr	r3, [pc, #116]	; (80027e4 <MX_GPIO_Init+0x13c>)
 8002770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002772:	2301      	movs	r3, #1
 8002774:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8002776:	f107 0310 	add.w	r3, r7, #16
 800277a:	4619      	mov	r1, r3
 800277c:	4817      	ldr	r0, [pc, #92]	; (80027dc <MX_GPIO_Init+0x134>)
 800277e:	f7fe fe25 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8002782:	2304      	movs	r3, #4
 8002784:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002786:	2301      	movs	r3, #1
 8002788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278e:	2302      	movs	r3, #2
 8002790:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002792:	f107 0310 	add.w	r3, r7, #16
 8002796:	4619      	mov	r1, r3
 8002798:	4811      	ldr	r0, [pc, #68]	; (80027e0 <MX_GPIO_Init+0x138>)
 800279a:	f7fe fe17 	bl	80013cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800279e:	2200      	movs	r2, #0
 80027a0:	2101      	movs	r1, #1
 80027a2:	2006      	movs	r0, #6
 80027a4:	f7fe fddb 	bl	800135e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80027a8:	2006      	movs	r0, #6
 80027aa:	f7fe fdf4 	bl	8001396 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1);
 80027ae:	2201      	movs	r2, #1
 80027b0:	2101      	movs	r1, #1
 80027b2:	2017      	movs	r0, #23
 80027b4:	f7fe fdd3 	bl	800135e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80027b8:	2017      	movs	r0, #23
 80027ba:	f7fe fdec 	bl	8001396 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 2);
 80027be:	2202      	movs	r2, #2
 80027c0:	2101      	movs	r1, #1
 80027c2:	2028      	movs	r0, #40	; 0x28
 80027c4:	f7fe fdcb 	bl	800135e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80027c8:	2028      	movs	r0, #40	; 0x28
 80027ca:	f7fe fde4 	bl	8001396 <HAL_NVIC_EnableIRQ>

}
 80027ce:	bf00      	nop
 80027d0:	3720      	adds	r7, #32
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40021000 	.word	0x40021000
 80027dc:	40010800 	.word	0x40010800
 80027e0:	40011400 	.word	0x40011400
 80027e4:	10110000 	.word	0x10110000
 80027e8:	40011000 	.word	0x40011000

080027ec <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 80027f6:	4b0d      	ldr	r3, [pc, #52]	; (800282c <LCD_WR_REG+0x40>)
 80027f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027fc:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 80027fe:	4b0b      	ldr	r3, [pc, #44]	; (800282c <LCD_WR_REG+0x40>)
 8002800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002804:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8002806:	4a0a      	ldr	r2, [pc, #40]	; (8002830 <LCD_WR_REG+0x44>)
 8002808:	88fb      	ldrh	r3, [r7, #6]
 800280a:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 800280c:	4b07      	ldr	r3, [pc, #28]	; (800282c <LCD_WR_REG+0x40>)
 800280e:	2280      	movs	r2, #128	; 0x80
 8002810:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <LCD_WR_REG+0x40>)
 8002814:	2280      	movs	r2, #128	; 0x80
 8002816:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8002818:	4b04      	ldr	r3, [pc, #16]	; (800282c <LCD_WR_REG+0x40>)
 800281a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800281e:	611a      	str	r2, [r3, #16]
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40011000 	.word	0x40011000
 8002830:	40010c00 	.word	0x40010c00

08002834 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 800283e:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <LCD_WR_DATAX+0x40>)
 8002840:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002844:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8002846:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <LCD_WR_DATAX+0x40>)
 8002848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800284c:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 800284e:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <LCD_WR_DATAX+0x44>)
 8002850:	88fb      	ldrh	r3, [r7, #6]
 8002852:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8002854:	4b07      	ldr	r3, [pc, #28]	; (8002874 <LCD_WR_DATAX+0x40>)
 8002856:	2280      	movs	r2, #128	; 0x80
 8002858:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 800285a:	4b06      	ldr	r3, [pc, #24]	; (8002874 <LCD_WR_DATAX+0x40>)
 800285c:	2280      	movs	r2, #128	; 0x80
 800285e:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8002860:	4b04      	ldr	r3, [pc, #16]	; (8002874 <LCD_WR_DATAX+0x40>)
 8002862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002866:	611a      	str	r2, [r3, #16]
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40011000 	.word	0x40011000
 8002878:	40010c00 	.word	0x40010c00

0800287c <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8002882:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <LCD_RD_DATA+0x7c>)
 8002884:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8002888:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 800288a:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <LCD_RD_DATA+0x7c>)
 800288c:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8002890:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8002892:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <LCD_RD_DATA+0x7c>)
 8002894:	2200      	movs	r2, #0
 8002896:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8002898:	4b18      	ldr	r3, [pc, #96]	; (80028fc <LCD_RD_DATA+0x80>)
 800289a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800289e:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 80028a0:	4b16      	ldr	r3, [pc, #88]	; (80028fc <LCD_RD_DATA+0x80>)
 80028a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028a6:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 80028a8:	4b14      	ldr	r3, [pc, #80]	; (80028fc <LCD_RD_DATA+0x80>)
 80028aa:	2240      	movs	r2, #64	; 0x40
 80028ac:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 80028ae:	4b14      	ldr	r3, [pc, #80]	; (8002900 <LCD_RD_DATA+0x84>)
 80028b0:	889b      	ldrh	r3, [r3, #4]
 80028b2:	f648 1289 	movw	r2, #35209	; 0x8989
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d102      	bne.n	80028c0 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 80028ba:	2001      	movs	r0, #1
 80028bc:	f7fe fc56 	bl	800116c <HAL_Delay>
	t = DATAIN
 80028c0:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <LCD_RD_DATA+0x7c>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 80028c6:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <LCD_RD_DATA+0x80>)
 80028c8:	2240      	movs	r2, #64	; 0x40
 80028ca:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <LCD_RD_DATA+0x80>)
 80028ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028d2:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 80028d4:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <LCD_RD_DATA+0x7c>)
 80028d6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80028da:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 80028dc:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <LCD_RD_DATA+0x7c>)
 80028de:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80028e2:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 80028e4:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <LCD_RD_DATA+0x7c>)
 80028e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028ea:	60da      	str	r2, [r3, #12]
	return t;
 80028ec:	88fb      	ldrh	r3, [r7, #6]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40010c00 	.word	0x40010c00
 80028fc:	40011000 	.word	0x40011000
 8002900:	200002f0 	.word	0x200002f0

08002904 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	460a      	mov	r2, r1
 800290e:	80fb      	strh	r3, [r7, #6]
 8002910:	4613      	mov	r3, r2
 8002912:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8002914:	88fb      	ldrh	r3, [r7, #6]
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff ff68 	bl	80027ec <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 800291c:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <LCD_WriteReg+0x4c>)
 800291e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002922:	611a      	str	r2, [r3, #16]
 8002924:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <LCD_WriteReg+0x4c>)
 8002926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800292a:	615a      	str	r2, [r3, #20]
 800292c:	4a09      	ldr	r2, [pc, #36]	; (8002954 <LCD_WriteReg+0x50>)
 800292e:	88bb      	ldrh	r3, [r7, #4]
 8002930:	60d3      	str	r3, [r2, #12]
 8002932:	4b07      	ldr	r3, [pc, #28]	; (8002950 <LCD_WriteReg+0x4c>)
 8002934:	2280      	movs	r2, #128	; 0x80
 8002936:	615a      	str	r2, [r3, #20]
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <LCD_WriteReg+0x4c>)
 800293a:	2280      	movs	r2, #128	; 0x80
 800293c:	611a      	str	r2, [r3, #16]
 800293e:	4b04      	ldr	r3, [pc, #16]	; (8002950 <LCD_WriteReg+0x4c>)
 8002940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002944:	611a      	str	r2, [r3, #16]
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40011000 	.word	0x40011000
 8002954:	40010c00 	.word	0x40010c00

08002958 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8002962:	88fb      	ldrh	r3, [r7, #6]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ff41 	bl	80027ec <LCD_WR_REG>
	return LCD_RD_DATA();
 800296a:	f7ff ff87 	bl	800287c <LCD_RD_DATA>
 800296e:	4603      	mov	r3, r0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 800297c:	4b03      	ldr	r3, [pc, #12]	; (800298c <LCD_WriteRAM_Prepare+0x14>)
 800297e:	891b      	ldrh	r3, [r3, #8]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ff33 	bl	80027ec <LCD_WR_REG>
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	200002f0 	.word	0x200002f0

08002990 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	460a      	mov	r2, r1
 800299a:	80fb      	strh	r3, [r7, #6]
 800299c:	4613      	mov	r3, r2
 800299e:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 80029a0:	4b73      	ldr	r3, [pc, #460]	; (8002b70 <LCD_SetCursor+0x1e0>)
 80029a2:	889b      	ldrh	r3, [r3, #4]
 80029a4:	f249 3241 	movw	r2, #37697	; 0x9341
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d005      	beq.n	80029b8 <LCD_SetCursor+0x28>
 80029ac:	4b70      	ldr	r3, [pc, #448]	; (8002b70 <LCD_SetCursor+0x1e0>)
 80029ae:	889b      	ldrh	r3, [r3, #4]
 80029b0:	f245 3210 	movw	r2, #21264	; 0x5310
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d164      	bne.n	8002a82 <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 80029b8:	4b6d      	ldr	r3, [pc, #436]	; (8002b70 <LCD_SetCursor+0x1e0>)
 80029ba:	895b      	ldrh	r3, [r3, #10]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ff15 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 80029c2:	4b6c      	ldr	r3, [pc, #432]	; (8002b74 <LCD_SetCursor+0x1e4>)
 80029c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029c8:	611a      	str	r2, [r3, #16]
 80029ca:	4b6a      	ldr	r3, [pc, #424]	; (8002b74 <LCD_SetCursor+0x1e4>)
 80029cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029d0:	615a      	str	r2, [r3, #20]
 80029d2:	88fb      	ldrh	r3, [r7, #6]
 80029d4:	0a1b      	lsrs	r3, r3, #8
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	4b67      	ldr	r3, [pc, #412]	; (8002b78 <LCD_SetCursor+0x1e8>)
 80029da:	60da      	str	r2, [r3, #12]
 80029dc:	4b65      	ldr	r3, [pc, #404]	; (8002b74 <LCD_SetCursor+0x1e4>)
 80029de:	2280      	movs	r2, #128	; 0x80
 80029e0:	615a      	str	r2, [r3, #20]
 80029e2:	4b64      	ldr	r3, [pc, #400]	; (8002b74 <LCD_SetCursor+0x1e4>)
 80029e4:	2280      	movs	r2, #128	; 0x80
 80029e6:	611a      	str	r2, [r3, #16]
 80029e8:	4b62      	ldr	r3, [pc, #392]	; (8002b74 <LCD_SetCursor+0x1e4>)
 80029ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ee:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 80029f0:	4b60      	ldr	r3, [pc, #384]	; (8002b74 <LCD_SetCursor+0x1e4>)
 80029f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029f6:	611a      	str	r2, [r3, #16]
 80029f8:	4b5e      	ldr	r3, [pc, #376]	; (8002b74 <LCD_SetCursor+0x1e4>)
 80029fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029fe:	615a      	str	r2, [r3, #20]
 8002a00:	88fb      	ldrh	r3, [r7, #6]
 8002a02:	4a5d      	ldr	r2, [pc, #372]	; (8002b78 <LCD_SetCursor+0x1e8>)
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	60d3      	str	r3, [r2, #12]
 8002a08:	4b5a      	ldr	r3, [pc, #360]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002a0a:	2280      	movs	r2, #128	; 0x80
 8002a0c:	615a      	str	r2, [r3, #20]
 8002a0e:	4b59      	ldr	r3, [pc, #356]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002a10:	2280      	movs	r2, #128	; 0x80
 8002a12:	611a      	str	r2, [r3, #16]
 8002a14:	4b57      	ldr	r3, [pc, #348]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a1a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8002a1c:	4b54      	ldr	r3, [pc, #336]	; (8002b70 <LCD_SetCursor+0x1e0>)
 8002a1e:	899b      	ldrh	r3, [r3, #12]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff fee3 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8002a26:	4b53      	ldr	r3, [pc, #332]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002a28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a2c:	611a      	str	r2, [r3, #16]
 8002a2e:	4b51      	ldr	r3, [pc, #324]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a34:	615a      	str	r2, [r3, #20]
 8002a36:	88bb      	ldrh	r3, [r7, #4]
 8002a38:	0a1b      	lsrs	r3, r3, #8
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	4b4e      	ldr	r3, [pc, #312]	; (8002b78 <LCD_SetCursor+0x1e8>)
 8002a3e:	60da      	str	r2, [r3, #12]
 8002a40:	4b4c      	ldr	r3, [pc, #304]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002a42:	2280      	movs	r2, #128	; 0x80
 8002a44:	615a      	str	r2, [r3, #20]
 8002a46:	4b4b      	ldr	r3, [pc, #300]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002a48:	2280      	movs	r2, #128	; 0x80
 8002a4a:	611a      	str	r2, [r3, #16]
 8002a4c:	4b49      	ldr	r3, [pc, #292]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a52:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8002a54:	4b47      	ldr	r3, [pc, #284]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002a56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a5a:	611a      	str	r2, [r3, #16]
 8002a5c:	4b45      	ldr	r3, [pc, #276]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a62:	615a      	str	r2, [r3, #20]
 8002a64:	88bb      	ldrh	r3, [r7, #4]
 8002a66:	4a44      	ldr	r2, [pc, #272]	; (8002b78 <LCD_SetCursor+0x1e8>)
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	60d3      	str	r3, [r2, #12]
 8002a6c:	4b41      	ldr	r3, [pc, #260]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002a6e:	2280      	movs	r2, #128	; 0x80
 8002a70:	615a      	str	r2, [r3, #20]
 8002a72:	4b40      	ldr	r3, [pc, #256]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002a74:	2280      	movs	r2, #128	; 0x80
 8002a76:	611a      	str	r2, [r3, #16]
 8002a78:	4b3e      	ldr	r3, [pc, #248]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a7e:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8002a80:	e248      	b.n	8002f14 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8002a82:	4b3b      	ldr	r3, [pc, #236]	; (8002b70 <LCD_SetCursor+0x1e0>)
 8002a84:	889b      	ldrh	r3, [r3, #4]
 8002a86:	f646 0204 	movw	r2, #26628	; 0x6804
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d176      	bne.n	8002b7c <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8002a8e:	4b38      	ldr	r3, [pc, #224]	; (8002b70 <LCD_SetCursor+0x1e0>)
 8002a90:	799b      	ldrb	r3, [r3, #6]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d106      	bne.n	8002aa4 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8002a96:	4b36      	ldr	r3, [pc, #216]	; (8002b70 <LCD_SetCursor+0x1e0>)
 8002a98:	881a      	ldrh	r2, [r3, #0]
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8002aa4:	4b32      	ldr	r3, [pc, #200]	; (8002b70 <LCD_SetCursor+0x1e0>)
 8002aa6:	895b      	ldrh	r3, [r3, #10]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff fe9f 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8002aae:	4b31      	ldr	r3, [pc, #196]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002ab0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ab4:	611a      	str	r2, [r3, #16]
 8002ab6:	4b2f      	ldr	r3, [pc, #188]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002abc:	615a      	str	r2, [r3, #20]
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	0a1b      	lsrs	r3, r3, #8
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	4b2c      	ldr	r3, [pc, #176]	; (8002b78 <LCD_SetCursor+0x1e8>)
 8002ac6:	60da      	str	r2, [r3, #12]
 8002ac8:	4b2a      	ldr	r3, [pc, #168]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002aca:	2280      	movs	r2, #128	; 0x80
 8002acc:	615a      	str	r2, [r3, #20]
 8002ace:	4b29      	ldr	r3, [pc, #164]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002ad0:	2280      	movs	r2, #128	; 0x80
 8002ad2:	611a      	str	r2, [r3, #16]
 8002ad4:	4b27      	ldr	r3, [pc, #156]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ada:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8002adc:	4b25      	ldr	r3, [pc, #148]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ae2:	611a      	str	r2, [r3, #16]
 8002ae4:	4b23      	ldr	r3, [pc, #140]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aea:	615a      	str	r2, [r3, #20]
 8002aec:	88fb      	ldrh	r3, [r7, #6]
 8002aee:	4a22      	ldr	r2, [pc, #136]	; (8002b78 <LCD_SetCursor+0x1e8>)
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	60d3      	str	r3, [r2, #12]
 8002af4:	4b1f      	ldr	r3, [pc, #124]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002af6:	2280      	movs	r2, #128	; 0x80
 8002af8:	615a      	str	r2, [r3, #20]
 8002afa:	4b1e      	ldr	r3, [pc, #120]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002afc:	2280      	movs	r2, #128	; 0x80
 8002afe:	611a      	str	r2, [r3, #16]
 8002b00:	4b1c      	ldr	r3, [pc, #112]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b06:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8002b08:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <LCD_SetCursor+0x1e0>)
 8002b0a:	899b      	ldrh	r3, [r3, #12]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fe6d 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8002b12:	4b18      	ldr	r3, [pc, #96]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002b14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b18:	611a      	str	r2, [r3, #16]
 8002b1a:	4b16      	ldr	r3, [pc, #88]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b20:	615a      	str	r2, [r3, #20]
 8002b22:	88bb      	ldrh	r3, [r7, #4]
 8002b24:	0a1b      	lsrs	r3, r3, #8
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	4b13      	ldr	r3, [pc, #76]	; (8002b78 <LCD_SetCursor+0x1e8>)
 8002b2a:	60da      	str	r2, [r3, #12]
 8002b2c:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002b2e:	2280      	movs	r2, #128	; 0x80
 8002b30:	615a      	str	r2, [r3, #20]
 8002b32:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002b34:	2280      	movs	r2, #128	; 0x80
 8002b36:	611a      	str	r2, [r3, #16]
 8002b38:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b3e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8002b40:	4b0c      	ldr	r3, [pc, #48]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002b42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b46:	611a      	str	r2, [r3, #16]
 8002b48:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b4e:	615a      	str	r2, [r3, #20]
 8002b50:	88bb      	ldrh	r3, [r7, #4]
 8002b52:	4a09      	ldr	r2, [pc, #36]	; (8002b78 <LCD_SetCursor+0x1e8>)
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	60d3      	str	r3, [r2, #12]
 8002b58:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002b5a:	2280      	movs	r2, #128	; 0x80
 8002b5c:	615a      	str	r2, [r3, #20]
 8002b5e:	4b05      	ldr	r3, [pc, #20]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002b60:	2280      	movs	r2, #128	; 0x80
 8002b62:	611a      	str	r2, [r3, #16]
 8002b64:	4b03      	ldr	r3, [pc, #12]	; (8002b74 <LCD_SetCursor+0x1e4>)
 8002b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b6a:	611a      	str	r2, [r3, #16]
}
 8002b6c:	e1d2      	b.n	8002f14 <LCD_SetCursor+0x584>
 8002b6e:	bf00      	nop
 8002b70:	200002f0 	.word	0x200002f0
 8002b74:	40011000 	.word	0x40011000
 8002b78:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8002b7c:	4b99      	ldr	r3, [pc, #612]	; (8002de4 <LCD_SetCursor+0x454>)
 8002b7e:	889b      	ldrh	r3, [r3, #4]
 8002b80:	f641 1263 	movw	r2, #6499	; 0x1963
 8002b84:	4293      	cmp	r3, r2
 8002b86:	f040 8133 	bne.w	8002df0 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8002b8a:	4b96      	ldr	r3, [pc, #600]	; (8002de4 <LCD_SetCursor+0x454>)
 8002b8c:	799b      	ldrb	r3, [r3, #6]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d163      	bne.n	8002c5a <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8002b92:	4b94      	ldr	r3, [pc, #592]	; (8002de4 <LCD_SetCursor+0x454>)
 8002b94:	881a      	ldrh	r2, [r3, #0]
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8002ba0:	4b90      	ldr	r3, [pc, #576]	; (8002de4 <LCD_SetCursor+0x454>)
 8002ba2:	895b      	ldrh	r3, [r3, #10]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff fe21 	bl	80027ec <LCD_WR_REG>
			LCD_WR_DATA(0);
 8002baa:	4b8f      	ldr	r3, [pc, #572]	; (8002de8 <LCD_SetCursor+0x458>)
 8002bac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bb0:	611a      	str	r2, [r3, #16]
 8002bb2:	4b8d      	ldr	r3, [pc, #564]	; (8002de8 <LCD_SetCursor+0x458>)
 8002bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bb8:	615a      	str	r2, [r3, #20]
 8002bba:	4b8c      	ldr	r3, [pc, #560]	; (8002dec <LCD_SetCursor+0x45c>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	60da      	str	r2, [r3, #12]
 8002bc0:	4b89      	ldr	r3, [pc, #548]	; (8002de8 <LCD_SetCursor+0x458>)
 8002bc2:	2280      	movs	r2, #128	; 0x80
 8002bc4:	615a      	str	r2, [r3, #20]
 8002bc6:	4b88      	ldr	r3, [pc, #544]	; (8002de8 <LCD_SetCursor+0x458>)
 8002bc8:	2280      	movs	r2, #128	; 0x80
 8002bca:	611a      	str	r2, [r3, #16]
 8002bcc:	4b86      	ldr	r3, [pc, #536]	; (8002de8 <LCD_SetCursor+0x458>)
 8002bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bd2:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8002bd4:	4b84      	ldr	r3, [pc, #528]	; (8002de8 <LCD_SetCursor+0x458>)
 8002bd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bda:	611a      	str	r2, [r3, #16]
 8002bdc:	4b82      	ldr	r3, [pc, #520]	; (8002de8 <LCD_SetCursor+0x458>)
 8002bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002be2:	615a      	str	r2, [r3, #20]
 8002be4:	4b81      	ldr	r3, [pc, #516]	; (8002dec <LCD_SetCursor+0x45c>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	60da      	str	r2, [r3, #12]
 8002bea:	4b7f      	ldr	r3, [pc, #508]	; (8002de8 <LCD_SetCursor+0x458>)
 8002bec:	2280      	movs	r2, #128	; 0x80
 8002bee:	615a      	str	r2, [r3, #20]
 8002bf0:	4b7d      	ldr	r3, [pc, #500]	; (8002de8 <LCD_SetCursor+0x458>)
 8002bf2:	2280      	movs	r2, #128	; 0x80
 8002bf4:	611a      	str	r2, [r3, #16]
 8002bf6:	4b7c      	ldr	r3, [pc, #496]	; (8002de8 <LCD_SetCursor+0x458>)
 8002bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bfc:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8002bfe:	4b7a      	ldr	r3, [pc, #488]	; (8002de8 <LCD_SetCursor+0x458>)
 8002c00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c04:	611a      	str	r2, [r3, #16]
 8002c06:	4b78      	ldr	r3, [pc, #480]	; (8002de8 <LCD_SetCursor+0x458>)
 8002c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c0c:	615a      	str	r2, [r3, #20]
 8002c0e:	88fb      	ldrh	r3, [r7, #6]
 8002c10:	0a1b      	lsrs	r3, r3, #8
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	4b75      	ldr	r3, [pc, #468]	; (8002dec <LCD_SetCursor+0x45c>)
 8002c16:	60da      	str	r2, [r3, #12]
 8002c18:	4b73      	ldr	r3, [pc, #460]	; (8002de8 <LCD_SetCursor+0x458>)
 8002c1a:	2280      	movs	r2, #128	; 0x80
 8002c1c:	615a      	str	r2, [r3, #20]
 8002c1e:	4b72      	ldr	r3, [pc, #456]	; (8002de8 <LCD_SetCursor+0x458>)
 8002c20:	2280      	movs	r2, #128	; 0x80
 8002c22:	611a      	str	r2, [r3, #16]
 8002c24:	4b70      	ldr	r3, [pc, #448]	; (8002de8 <LCD_SetCursor+0x458>)
 8002c26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c2a:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8002c2c:	4b6e      	ldr	r3, [pc, #440]	; (8002de8 <LCD_SetCursor+0x458>)
 8002c2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c32:	611a      	str	r2, [r3, #16]
 8002c34:	4b6c      	ldr	r3, [pc, #432]	; (8002de8 <LCD_SetCursor+0x458>)
 8002c36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c3a:	615a      	str	r2, [r3, #20]
 8002c3c:	88fb      	ldrh	r3, [r7, #6]
 8002c3e:	4a6b      	ldr	r2, [pc, #428]	; (8002dec <LCD_SetCursor+0x45c>)
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	60d3      	str	r3, [r2, #12]
 8002c44:	4b68      	ldr	r3, [pc, #416]	; (8002de8 <LCD_SetCursor+0x458>)
 8002c46:	2280      	movs	r2, #128	; 0x80
 8002c48:	615a      	str	r2, [r3, #20]
 8002c4a:	4b67      	ldr	r3, [pc, #412]	; (8002de8 <LCD_SetCursor+0x458>)
 8002c4c:	2280      	movs	r2, #128	; 0x80
 8002c4e:	611a      	str	r2, [r3, #16]
 8002c50:	4b65      	ldr	r3, [pc, #404]	; (8002de8 <LCD_SetCursor+0x458>)
 8002c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c56:	611a      	str	r2, [r3, #16]
 8002c58:	e061      	b.n	8002d1e <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8002c5a:	4b62      	ldr	r3, [pc, #392]	; (8002de4 <LCD_SetCursor+0x454>)
 8002c5c:	895b      	ldrh	r3, [r3, #10]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff fdc4 	bl	80027ec <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8002c64:	4b60      	ldr	r3, [pc, #384]	; (8002de8 <LCD_SetCursor+0x458>)
 8002c66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c6a:	611a      	str	r2, [r3, #16]
 8002c6c:	4b5e      	ldr	r3, [pc, #376]	; (8002de8 <LCD_SetCursor+0x458>)
 8002c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c72:	615a      	str	r2, [r3, #20]
 8002c74:	88fb      	ldrh	r3, [r7, #6]
 8002c76:	0a1b      	lsrs	r3, r3, #8
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	4b5c      	ldr	r3, [pc, #368]	; (8002dec <LCD_SetCursor+0x45c>)
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	4b5a      	ldr	r3, [pc, #360]	; (8002de8 <LCD_SetCursor+0x458>)
 8002c80:	2280      	movs	r2, #128	; 0x80
 8002c82:	615a      	str	r2, [r3, #20]
 8002c84:	4b58      	ldr	r3, [pc, #352]	; (8002de8 <LCD_SetCursor+0x458>)
 8002c86:	2280      	movs	r2, #128	; 0x80
 8002c88:	611a      	str	r2, [r3, #16]
 8002c8a:	4b57      	ldr	r3, [pc, #348]	; (8002de8 <LCD_SetCursor+0x458>)
 8002c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c90:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8002c92:	4b55      	ldr	r3, [pc, #340]	; (8002de8 <LCD_SetCursor+0x458>)
 8002c94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c98:	611a      	str	r2, [r3, #16]
 8002c9a:	4b53      	ldr	r3, [pc, #332]	; (8002de8 <LCD_SetCursor+0x458>)
 8002c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ca0:	615a      	str	r2, [r3, #20]
 8002ca2:	88fb      	ldrh	r3, [r7, #6]
 8002ca4:	4a51      	ldr	r2, [pc, #324]	; (8002dec <LCD_SetCursor+0x45c>)
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	60d3      	str	r3, [r2, #12]
 8002caa:	4b4f      	ldr	r3, [pc, #316]	; (8002de8 <LCD_SetCursor+0x458>)
 8002cac:	2280      	movs	r2, #128	; 0x80
 8002cae:	615a      	str	r2, [r3, #20]
 8002cb0:	4b4d      	ldr	r3, [pc, #308]	; (8002de8 <LCD_SetCursor+0x458>)
 8002cb2:	2280      	movs	r2, #128	; 0x80
 8002cb4:	611a      	str	r2, [r3, #16]
 8002cb6:	4b4c      	ldr	r3, [pc, #304]	; (8002de8 <LCD_SetCursor+0x458>)
 8002cb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cbc:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8002cbe:	4b4a      	ldr	r3, [pc, #296]	; (8002de8 <LCD_SetCursor+0x458>)
 8002cc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cc4:	611a      	str	r2, [r3, #16]
 8002cc6:	4b48      	ldr	r3, [pc, #288]	; (8002de8 <LCD_SetCursor+0x458>)
 8002cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ccc:	615a      	str	r2, [r3, #20]
 8002cce:	4b45      	ldr	r3, [pc, #276]	; (8002de4 <LCD_SetCursor+0x454>)
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	121a      	asrs	r2, r3, #8
 8002cd6:	4b45      	ldr	r3, [pc, #276]	; (8002dec <LCD_SetCursor+0x45c>)
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	4b43      	ldr	r3, [pc, #268]	; (8002de8 <LCD_SetCursor+0x458>)
 8002cdc:	2280      	movs	r2, #128	; 0x80
 8002cde:	615a      	str	r2, [r3, #20]
 8002ce0:	4b41      	ldr	r3, [pc, #260]	; (8002de8 <LCD_SetCursor+0x458>)
 8002ce2:	2280      	movs	r2, #128	; 0x80
 8002ce4:	611a      	str	r2, [r3, #16]
 8002ce6:	4b40      	ldr	r3, [pc, #256]	; (8002de8 <LCD_SetCursor+0x458>)
 8002ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cec:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8002cee:	4b3e      	ldr	r3, [pc, #248]	; (8002de8 <LCD_SetCursor+0x458>)
 8002cf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cf4:	611a      	str	r2, [r3, #16]
 8002cf6:	4b3c      	ldr	r3, [pc, #240]	; (8002de8 <LCD_SetCursor+0x458>)
 8002cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cfc:	615a      	str	r2, [r3, #20]
 8002cfe:	4b39      	ldr	r3, [pc, #228]	; (8002de4 <LCD_SetCursor+0x454>)
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	4a39      	ldr	r2, [pc, #228]	; (8002dec <LCD_SetCursor+0x45c>)
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	60d3      	str	r3, [r2, #12]
 8002d0a:	4b37      	ldr	r3, [pc, #220]	; (8002de8 <LCD_SetCursor+0x458>)
 8002d0c:	2280      	movs	r2, #128	; 0x80
 8002d0e:	615a      	str	r2, [r3, #20]
 8002d10:	4b35      	ldr	r3, [pc, #212]	; (8002de8 <LCD_SetCursor+0x458>)
 8002d12:	2280      	movs	r2, #128	; 0x80
 8002d14:	611a      	str	r2, [r3, #16]
 8002d16:	4b34      	ldr	r3, [pc, #208]	; (8002de8 <LCD_SetCursor+0x458>)
 8002d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d1c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8002d1e:	4b31      	ldr	r3, [pc, #196]	; (8002de4 <LCD_SetCursor+0x454>)
 8002d20:	899b      	ldrh	r3, [r3, #12]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff fd62 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8002d28:	4b2f      	ldr	r3, [pc, #188]	; (8002de8 <LCD_SetCursor+0x458>)
 8002d2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d2e:	611a      	str	r2, [r3, #16]
 8002d30:	4b2d      	ldr	r3, [pc, #180]	; (8002de8 <LCD_SetCursor+0x458>)
 8002d32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d36:	615a      	str	r2, [r3, #20]
 8002d38:	88bb      	ldrh	r3, [r7, #4]
 8002d3a:	0a1b      	lsrs	r3, r3, #8
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	4b2b      	ldr	r3, [pc, #172]	; (8002dec <LCD_SetCursor+0x45c>)
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	4b29      	ldr	r3, [pc, #164]	; (8002de8 <LCD_SetCursor+0x458>)
 8002d44:	2280      	movs	r2, #128	; 0x80
 8002d46:	615a      	str	r2, [r3, #20]
 8002d48:	4b27      	ldr	r3, [pc, #156]	; (8002de8 <LCD_SetCursor+0x458>)
 8002d4a:	2280      	movs	r2, #128	; 0x80
 8002d4c:	611a      	str	r2, [r3, #16]
 8002d4e:	4b26      	ldr	r3, [pc, #152]	; (8002de8 <LCD_SetCursor+0x458>)
 8002d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d54:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8002d56:	4b24      	ldr	r3, [pc, #144]	; (8002de8 <LCD_SetCursor+0x458>)
 8002d58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d5c:	611a      	str	r2, [r3, #16]
 8002d5e:	4b22      	ldr	r3, [pc, #136]	; (8002de8 <LCD_SetCursor+0x458>)
 8002d60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d64:	615a      	str	r2, [r3, #20]
 8002d66:	88bb      	ldrh	r3, [r7, #4]
 8002d68:	4a20      	ldr	r2, [pc, #128]	; (8002dec <LCD_SetCursor+0x45c>)
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	60d3      	str	r3, [r2, #12]
 8002d6e:	4b1e      	ldr	r3, [pc, #120]	; (8002de8 <LCD_SetCursor+0x458>)
 8002d70:	2280      	movs	r2, #128	; 0x80
 8002d72:	615a      	str	r2, [r3, #20]
 8002d74:	4b1c      	ldr	r3, [pc, #112]	; (8002de8 <LCD_SetCursor+0x458>)
 8002d76:	2280      	movs	r2, #128	; 0x80
 8002d78:	611a      	str	r2, [r3, #16]
 8002d7a:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <LCD_SetCursor+0x458>)
 8002d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d80:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8002d82:	4b19      	ldr	r3, [pc, #100]	; (8002de8 <LCD_SetCursor+0x458>)
 8002d84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d88:	611a      	str	r2, [r3, #16]
 8002d8a:	4b17      	ldr	r3, [pc, #92]	; (8002de8 <LCD_SetCursor+0x458>)
 8002d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d90:	615a      	str	r2, [r3, #20]
 8002d92:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <LCD_SetCursor+0x454>)
 8002d94:	885b      	ldrh	r3, [r3, #2]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	121a      	asrs	r2, r3, #8
 8002d9a:	4b14      	ldr	r3, [pc, #80]	; (8002dec <LCD_SetCursor+0x45c>)
 8002d9c:	60da      	str	r2, [r3, #12]
 8002d9e:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <LCD_SetCursor+0x458>)
 8002da0:	2280      	movs	r2, #128	; 0x80
 8002da2:	615a      	str	r2, [r3, #20]
 8002da4:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <LCD_SetCursor+0x458>)
 8002da6:	2280      	movs	r2, #128	; 0x80
 8002da8:	611a      	str	r2, [r3, #16]
 8002daa:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <LCD_SetCursor+0x458>)
 8002dac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002db0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8002db2:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <LCD_SetCursor+0x458>)
 8002db4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002db8:	611a      	str	r2, [r3, #16]
 8002dba:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <LCD_SetCursor+0x458>)
 8002dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dc0:	615a      	str	r2, [r3, #20]
 8002dc2:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <LCD_SetCursor+0x454>)
 8002dc4:	885b      	ldrh	r3, [r3, #2]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	4a08      	ldr	r2, [pc, #32]	; (8002dec <LCD_SetCursor+0x45c>)
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	60d3      	str	r3, [r2, #12]
 8002dce:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <LCD_SetCursor+0x458>)
 8002dd0:	2280      	movs	r2, #128	; 0x80
 8002dd2:	615a      	str	r2, [r3, #20]
 8002dd4:	4b04      	ldr	r3, [pc, #16]	; (8002de8 <LCD_SetCursor+0x458>)
 8002dd6:	2280      	movs	r2, #128	; 0x80
 8002dd8:	611a      	str	r2, [r3, #16]
 8002dda:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <LCD_SetCursor+0x458>)
 8002ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002de0:	611a      	str	r2, [r3, #16]
}
 8002de2:	e097      	b.n	8002f14 <LCD_SetCursor+0x584>
 8002de4:	200002f0 	.word	0x200002f0
 8002de8:	40011000 	.word	0x40011000
 8002dec:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8002df0:	4b4a      	ldr	r3, [pc, #296]	; (8002f1c <LCD_SetCursor+0x58c>)
 8002df2:	889b      	ldrh	r3, [r3, #4]
 8002df4:	f245 5210 	movw	r2, #21776	; 0x5510
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d172      	bne.n	8002ee2 <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8002dfc:	4b47      	ldr	r3, [pc, #284]	; (8002f1c <LCD_SetCursor+0x58c>)
 8002dfe:	895b      	ldrh	r3, [r3, #10]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fcf3 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8002e06:	4b46      	ldr	r3, [pc, #280]	; (8002f20 <LCD_SetCursor+0x590>)
 8002e08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e0c:	611a      	str	r2, [r3, #16]
 8002e0e:	4b44      	ldr	r3, [pc, #272]	; (8002f20 <LCD_SetCursor+0x590>)
 8002e10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e14:	615a      	str	r2, [r3, #20]
 8002e16:	88fb      	ldrh	r3, [r7, #6]
 8002e18:	0a1b      	lsrs	r3, r3, #8
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	4b41      	ldr	r3, [pc, #260]	; (8002f24 <LCD_SetCursor+0x594>)
 8002e1e:	60da      	str	r2, [r3, #12]
 8002e20:	4b3f      	ldr	r3, [pc, #252]	; (8002f20 <LCD_SetCursor+0x590>)
 8002e22:	2280      	movs	r2, #128	; 0x80
 8002e24:	615a      	str	r2, [r3, #20]
 8002e26:	4b3e      	ldr	r3, [pc, #248]	; (8002f20 <LCD_SetCursor+0x590>)
 8002e28:	2280      	movs	r2, #128	; 0x80
 8002e2a:	611a      	str	r2, [r3, #16]
 8002e2c:	4b3c      	ldr	r3, [pc, #240]	; (8002f20 <LCD_SetCursor+0x590>)
 8002e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e32:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8002e34:	4b39      	ldr	r3, [pc, #228]	; (8002f1c <LCD_SetCursor+0x58c>)
 8002e36:	895b      	ldrh	r3, [r3, #10]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fcd5 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 8002e42:	4b37      	ldr	r3, [pc, #220]	; (8002f20 <LCD_SetCursor+0x590>)
 8002e44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e48:	611a      	str	r2, [r3, #16]
 8002e4a:	4b35      	ldr	r3, [pc, #212]	; (8002f20 <LCD_SetCursor+0x590>)
 8002e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e50:	615a      	str	r2, [r3, #20]
 8002e52:	88fb      	ldrh	r3, [r7, #6]
 8002e54:	4a33      	ldr	r2, [pc, #204]	; (8002f24 <LCD_SetCursor+0x594>)
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	60d3      	str	r3, [r2, #12]
 8002e5a:	4b31      	ldr	r3, [pc, #196]	; (8002f20 <LCD_SetCursor+0x590>)
 8002e5c:	2280      	movs	r2, #128	; 0x80
 8002e5e:	615a      	str	r2, [r3, #20]
 8002e60:	4b2f      	ldr	r3, [pc, #188]	; (8002f20 <LCD_SetCursor+0x590>)
 8002e62:	2280      	movs	r2, #128	; 0x80
 8002e64:	611a      	str	r2, [r3, #16]
 8002e66:	4b2e      	ldr	r3, [pc, #184]	; (8002f20 <LCD_SetCursor+0x590>)
 8002e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e6c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8002e6e:	4b2b      	ldr	r3, [pc, #172]	; (8002f1c <LCD_SetCursor+0x58c>)
 8002e70:	899b      	ldrh	r3, [r3, #12]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff fcba 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8002e78:	4b29      	ldr	r3, [pc, #164]	; (8002f20 <LCD_SetCursor+0x590>)
 8002e7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e7e:	611a      	str	r2, [r3, #16]
 8002e80:	4b27      	ldr	r3, [pc, #156]	; (8002f20 <LCD_SetCursor+0x590>)
 8002e82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e86:	615a      	str	r2, [r3, #20]
 8002e88:	88bb      	ldrh	r3, [r7, #4]
 8002e8a:	0a1b      	lsrs	r3, r3, #8
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	4b25      	ldr	r3, [pc, #148]	; (8002f24 <LCD_SetCursor+0x594>)
 8002e90:	60da      	str	r2, [r3, #12]
 8002e92:	4b23      	ldr	r3, [pc, #140]	; (8002f20 <LCD_SetCursor+0x590>)
 8002e94:	2280      	movs	r2, #128	; 0x80
 8002e96:	615a      	str	r2, [r3, #20]
 8002e98:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <LCD_SetCursor+0x590>)
 8002e9a:	2280      	movs	r2, #128	; 0x80
 8002e9c:	611a      	str	r2, [r3, #16]
 8002e9e:	4b20      	ldr	r3, [pc, #128]	; (8002f20 <LCD_SetCursor+0x590>)
 8002ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ea4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	; (8002f1c <LCD_SetCursor+0x58c>)
 8002ea8:	899b      	ldrh	r3, [r3, #12]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff fc9c 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8002eb4:	4b1a      	ldr	r3, [pc, #104]	; (8002f20 <LCD_SetCursor+0x590>)
 8002eb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eba:	611a      	str	r2, [r3, #16]
 8002ebc:	4b18      	ldr	r3, [pc, #96]	; (8002f20 <LCD_SetCursor+0x590>)
 8002ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ec2:	615a      	str	r2, [r3, #20]
 8002ec4:	88bb      	ldrh	r3, [r7, #4]
 8002ec6:	4a17      	ldr	r2, [pc, #92]	; (8002f24 <LCD_SetCursor+0x594>)
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	60d3      	str	r3, [r2, #12]
 8002ecc:	4b14      	ldr	r3, [pc, #80]	; (8002f20 <LCD_SetCursor+0x590>)
 8002ece:	2280      	movs	r2, #128	; 0x80
 8002ed0:	615a      	str	r2, [r3, #20]
 8002ed2:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <LCD_SetCursor+0x590>)
 8002ed4:	2280      	movs	r2, #128	; 0x80
 8002ed6:	611a      	str	r2, [r3, #16]
 8002ed8:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <LCD_SetCursor+0x590>)
 8002eda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ede:	611a      	str	r2, [r3, #16]
}
 8002ee0:	e018      	b.n	8002f14 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8002ee2:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <LCD_SetCursor+0x58c>)
 8002ee4:	799b      	ldrb	r3, [r3, #6]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d106      	bne.n	8002ef8 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 8002eea:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <LCD_SetCursor+0x58c>)
 8002eec:	881a      	ldrh	r2, [r3, #0]
 8002eee:	88fb      	ldrh	r3, [r7, #6]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8002ef8:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <LCD_SetCursor+0x58c>)
 8002efa:	895b      	ldrh	r3, [r3, #10]
 8002efc:	88fa      	ldrh	r2, [r7, #6]
 8002efe:	4611      	mov	r1, r2
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff fcff 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8002f06:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <LCD_SetCursor+0x58c>)
 8002f08:	899b      	ldrh	r3, [r3, #12]
 8002f0a:	88ba      	ldrh	r2, [r7, #4]
 8002f0c:	4611      	mov	r1, r2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fcf8 	bl	8002904 <LCD_WriteReg>
}
 8002f14:	bf00      	nop
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	200002f0 	.word	0x200002f0
 8002f20:	40011000 	.word	0x40011000
 8002f24:	40010c00 	.word	0x40010c00

08002f28 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 8002f3a:	4b78      	ldr	r3, [pc, #480]	; (800311c <LCD_Scan_Dir+0x1f4>)
 8002f3c:	799b      	ldrb	r3, [r3, #6]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d10b      	bne.n	8002f5a <LCD_Scan_Dir+0x32>
 8002f42:	4b76      	ldr	r3, [pc, #472]	; (800311c <LCD_Scan_Dir+0x1f4>)
 8002f44:	889b      	ldrh	r3, [r3, #4]
 8002f46:	f646 0204 	movw	r2, #26628	; 0x6804
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d005      	beq.n	8002f5a <LCD_Scan_Dir+0x32>
 8002f4e:	4b73      	ldr	r3, [pc, #460]	; (800311c <LCD_Scan_Dir+0x1f4>)
 8002f50:	889b      	ldrh	r3, [r3, #4]
 8002f52:	f641 1263 	movw	r2, #6499	; 0x1963
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d109      	bne.n	8002f6e <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 8002f5a:	4b70      	ldr	r3, [pc, #448]	; (800311c <LCD_Scan_Dir+0x1f4>)
 8002f5c:	799b      	ldrb	r3, [r3, #6]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d134      	bne.n	8002fcc <LCD_Scan_Dir+0xa4>
 8002f62:	4b6e      	ldr	r3, [pc, #440]	; (800311c <LCD_Scan_Dir+0x1f4>)
 8002f64:	889b      	ldrh	r3, [r3, #4]
 8002f66:	f641 1263 	movw	r2, #6499	; 0x1963
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d12e      	bne.n	8002fcc <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	2b07      	cmp	r3, #7
 8002f72:	d82b      	bhi.n	8002fcc <LCD_Scan_Dir+0xa4>
 8002f74:	a201      	add	r2, pc, #4	; (adr r2, 8002f7c <LCD_Scan_Dir+0x54>)
 8002f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7a:	bf00      	nop
 8002f7c:	08002f9d 	.word	0x08002f9d
 8002f80:	08002fa3 	.word	0x08002fa3
 8002f84:	08002fa9 	.word	0x08002fa9
 8002f88:	08002faf 	.word	0x08002faf
 8002f8c:	08002fb5 	.word	0x08002fb5
 8002f90:	08002fbb 	.word	0x08002fbb
 8002f94:	08002fc1 	.word	0x08002fc1
 8002f98:	08002fc7 	.word	0x08002fc7
		{
		case 0:
			dir = 6;
 8002f9c:	2306      	movs	r3, #6
 8002f9e:	71fb      	strb	r3, [r7, #7]
			break;
 8002fa0:	e014      	b.n	8002fcc <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 8002fa2:	2307      	movs	r3, #7
 8002fa4:	71fb      	strb	r3, [r7, #7]
			break;
 8002fa6:	e011      	b.n	8002fcc <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 8002fa8:	2304      	movs	r3, #4
 8002faa:	71fb      	strb	r3, [r7, #7]
			break;
 8002fac:	e00e      	b.n	8002fcc <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 8002fae:	2305      	movs	r3, #5
 8002fb0:	71fb      	strb	r3, [r7, #7]
			break;
 8002fb2:	e00b      	b.n	8002fcc <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	71fb      	strb	r3, [r7, #7]
			break;
 8002fb8:	e008      	b.n	8002fcc <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	71fb      	strb	r3, [r7, #7]
			break;
 8002fbe:	e005      	b.n	8002fcc <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	71fb      	strb	r3, [r7, #7]
			break;
 8002fc4:	e002      	b.n	8002fcc <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	71fb      	strb	r3, [r7, #7]
			break;
 8002fca:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 8002fcc:	4b53      	ldr	r3, [pc, #332]	; (800311c <LCD_Scan_Dir+0x1f4>)
 8002fce:	889b      	ldrh	r3, [r3, #4]
 8002fd0:	f249 3241 	movw	r2, #37697	; 0x9341
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d018      	beq.n	800300a <LCD_Scan_Dir+0xe2>
 8002fd8:	4b50      	ldr	r3, [pc, #320]	; (800311c <LCD_Scan_Dir+0x1f4>)
 8002fda:	889b      	ldrh	r3, [r3, #4]
 8002fdc:	f646 0204 	movw	r2, #26628	; 0x6804
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d012      	beq.n	800300a <LCD_Scan_Dir+0xe2>
 8002fe4:	4b4d      	ldr	r3, [pc, #308]	; (800311c <LCD_Scan_Dir+0x1f4>)
 8002fe6:	889b      	ldrh	r3, [r3, #4]
 8002fe8:	f245 3210 	movw	r2, #21264	; 0x5310
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d00c      	beq.n	800300a <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 8002ff0:	4b4a      	ldr	r3, [pc, #296]	; (800311c <LCD_Scan_Dir+0x1f4>)
 8002ff2:	889b      	ldrh	r3, [r3, #4]
 8002ff4:	f245 5210 	movw	r2, #21776	; 0x5510
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d006      	beq.n	800300a <LCD_Scan_Dir+0xe2>
 8002ffc:	4b47      	ldr	r3, [pc, #284]	; (800311c <LCD_Scan_Dir+0x1f4>)
 8002ffe:	889b      	ldrh	r3, [r3, #4]
 8003000:	f641 1263 	movw	r2, #6499	; 0x1963
 8003004:	4293      	cmp	r3, r2
 8003006:	f040 8250 	bne.w	80034aa <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	2b07      	cmp	r3, #7
 800300e:	d836      	bhi.n	800307e <LCD_Scan_Dir+0x156>
 8003010:	a201      	add	r2, pc, #4	; (adr r2, 8003018 <LCD_Scan_Dir+0xf0>)
 8003012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003016:	bf00      	nop
 8003018:	0800307f 	.word	0x0800307f
 800301c:	08003039 	.word	0x08003039
 8003020:	08003043 	.word	0x08003043
 8003024:	0800304d 	.word	0x0800304d
 8003028:	08003057 	.word	0x08003057
 800302c:	08003061 	.word	0x08003061
 8003030:	0800306b 	.word	0x0800306b
 8003034:	08003075 	.word	0x08003075
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8003038:	89fb      	ldrh	r3, [r7, #14]
 800303a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800303e:	81fb      	strh	r3, [r7, #14]
			break;
 8003040:	e01d      	b.n	800307e <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 8003042:	89fb      	ldrh	r3, [r7, #14]
 8003044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003048:	81fb      	strh	r3, [r7, #14]
			break;
 800304a:	e018      	b.n	800307e <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 800304c:	89fb      	ldrh	r3, [r7, #14]
 800304e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003052:	81fb      	strh	r3, [r7, #14]
			break;
 8003054:	e013      	b.n	800307e <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 8003056:	89fb      	ldrh	r3, [r7, #14]
 8003058:	f043 0320 	orr.w	r3, r3, #32
 800305c:	81fb      	strh	r3, [r7, #14]
			break;
 800305e:	e00e      	b.n	800307e <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8003060:	89fb      	ldrh	r3, [r7, #14]
 8003062:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003066:	81fb      	strh	r3, [r7, #14]
			break;
 8003068:	e009      	b.n	800307e <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 800306a:	89fb      	ldrh	r3, [r7, #14]
 800306c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003070:	81fb      	strh	r3, [r7, #14]
			break;
 8003072:	e004      	b.n	800307e <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8003074:	89fb      	ldrh	r3, [r7, #14]
 8003076:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800307a:	81fb      	strh	r3, [r7, #14]
			break;
 800307c:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 800307e:	4b27      	ldr	r3, [pc, #156]	; (800311c <LCD_Scan_Dir+0x1f4>)
 8003080:	889b      	ldrh	r3, [r3, #4]
 8003082:	f245 5210 	movw	r2, #21776	; 0x5510
 8003086:	4293      	cmp	r3, r2
 8003088:	d103      	bne.n	8003092 <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 800308a:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 800308e:	81bb      	strh	r3, [r7, #12]
 8003090:	e001      	b.n	8003096 <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 8003092:	2336      	movs	r3, #54	; 0x36
 8003094:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 8003096:	4b21      	ldr	r3, [pc, #132]	; (800311c <LCD_Scan_Dir+0x1f4>)
 8003098:	889b      	ldrh	r3, [r3, #4]
 800309a:	f245 3210 	movw	r2, #21264	; 0x5310
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00f      	beq.n	80030c2 <LCD_Scan_Dir+0x19a>
 80030a2:	4b1e      	ldr	r3, [pc, #120]	; (800311c <LCD_Scan_Dir+0x1f4>)
 80030a4:	889b      	ldrh	r3, [r3, #4]
 80030a6:	f245 5210 	movw	r2, #21776	; 0x5510
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d009      	beq.n	80030c2 <LCD_Scan_Dir+0x19a>
 80030ae:	4b1b      	ldr	r3, [pc, #108]	; (800311c <LCD_Scan_Dir+0x1f4>)
 80030b0:	889b      	ldrh	r3, [r3, #4]
 80030b2:	f641 1263 	movw	r2, #6499	; 0x1963
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d003      	beq.n	80030c2 <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 80030ba:	89fb      	ldrh	r3, [r7, #14]
 80030bc:	f043 0308 	orr.w	r3, r3, #8
 80030c0:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 80030c2:	4b16      	ldr	r3, [pc, #88]	; (800311c <LCD_Scan_Dir+0x1f4>)
 80030c4:	889b      	ldrh	r3, [r3, #4]
 80030c6:	f646 0204 	movw	r2, #26628	; 0x6804
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d103      	bne.n	80030d6 <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 80030ce:	89fb      	ldrh	r3, [r7, #14]
 80030d0:	f043 0302 	orr.w	r3, r3, #2
 80030d4:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80030d6:	89fa      	ldrh	r2, [r7, #14]
 80030d8:	89bb      	ldrh	r3, [r7, #12]
 80030da:	4611      	mov	r1, r2
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff fc11 	bl	8002904 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 80030e2:	4b0e      	ldr	r3, [pc, #56]	; (800311c <LCD_Scan_Dir+0x1f4>)
 80030e4:	889b      	ldrh	r3, [r3, #4]
 80030e6:	f641 1263 	movw	r2, #6499	; 0x1963
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d028      	beq.n	8003140 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 80030ee:	89fb      	ldrh	r3, [r7, #14]
 80030f0:	f003 0320 	and.w	r3, r3, #32
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d013      	beq.n	8003120 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 80030f8:	4b08      	ldr	r3, [pc, #32]	; (800311c <LCD_Scan_Dir+0x1f4>)
 80030fa:	881a      	ldrh	r2, [r3, #0]
 80030fc:	4b07      	ldr	r3, [pc, #28]	; (800311c <LCD_Scan_Dir+0x1f4>)
 80030fe:	885b      	ldrh	r3, [r3, #2]
 8003100:	429a      	cmp	r2, r3
 8003102:	d21d      	bcs.n	8003140 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8003104:	4b05      	ldr	r3, [pc, #20]	; (800311c <LCD_Scan_Dir+0x1f4>)
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 800310a:	4b04      	ldr	r3, [pc, #16]	; (800311c <LCD_Scan_Dir+0x1f4>)
 800310c:	885a      	ldrh	r2, [r3, #2]
 800310e:	4b03      	ldr	r3, [pc, #12]	; (800311c <LCD_Scan_Dir+0x1f4>)
 8003110:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8003112:	4a02      	ldr	r2, [pc, #8]	; (800311c <LCD_Scan_Dir+0x1f4>)
 8003114:	897b      	ldrh	r3, [r7, #10]
 8003116:	8053      	strh	r3, [r2, #2]
 8003118:	e012      	b.n	8003140 <LCD_Scan_Dir+0x218>
 800311a:	bf00      	nop
 800311c:	200002f0 	.word	0x200002f0
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 8003120:	4b7f      	ldr	r3, [pc, #508]	; (8003320 <LCD_Scan_Dir+0x3f8>)
 8003122:	881a      	ldrh	r2, [r3, #0]
 8003124:	4b7e      	ldr	r3, [pc, #504]	; (8003320 <LCD_Scan_Dir+0x3f8>)
 8003126:	885b      	ldrh	r3, [r3, #2]
 8003128:	429a      	cmp	r2, r3
 800312a:	d909      	bls.n	8003140 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 800312c:	4b7c      	ldr	r3, [pc, #496]	; (8003320 <LCD_Scan_Dir+0x3f8>)
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8003132:	4b7b      	ldr	r3, [pc, #492]	; (8003320 <LCD_Scan_Dir+0x3f8>)
 8003134:	885a      	ldrh	r2, [r3, #2]
 8003136:	4b7a      	ldr	r3, [pc, #488]	; (8003320 <LCD_Scan_Dir+0x3f8>)
 8003138:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 800313a:	4a79      	ldr	r2, [pc, #484]	; (8003320 <LCD_Scan_Dir+0x3f8>)
 800313c:	897b      	ldrh	r3, [r7, #10]
 800313e:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 8003140:	4b77      	ldr	r3, [pc, #476]	; (8003320 <LCD_Scan_Dir+0x3f8>)
 8003142:	889b      	ldrh	r3, [r3, #4]
 8003144:	f245 5210 	movw	r2, #21776	; 0x5510
 8003148:	4293      	cmp	r3, r2
 800314a:	f040 80ef 	bne.w	800332c <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 800314e:	4b74      	ldr	r3, [pc, #464]	; (8003320 <LCD_Scan_Dir+0x3f8>)
 8003150:	895b      	ldrh	r3, [r3, #10]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fb4a 	bl	80027ec <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003158:	4b72      	ldr	r3, [pc, #456]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 800315a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800315e:	611a      	str	r2, [r3, #16]
 8003160:	4b70      	ldr	r3, [pc, #448]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 8003162:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003166:	615a      	str	r2, [r3, #20]
 8003168:	4b6f      	ldr	r3, [pc, #444]	; (8003328 <LCD_Scan_Dir+0x400>)
 800316a:	2200      	movs	r2, #0
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	4b6d      	ldr	r3, [pc, #436]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 8003170:	2280      	movs	r2, #128	; 0x80
 8003172:	615a      	str	r2, [r3, #20]
 8003174:	4b6b      	ldr	r3, [pc, #428]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 8003176:	2280      	movs	r2, #128	; 0x80
 8003178:	611a      	str	r2, [r3, #16]
 800317a:	4b6a      	ldr	r3, [pc, #424]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 800317c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003180:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 8003182:	4b67      	ldr	r3, [pc, #412]	; (8003320 <LCD_Scan_Dir+0x3f8>)
 8003184:	895b      	ldrh	r3, [r3, #10]
 8003186:	3301      	adds	r3, #1
 8003188:	b29b      	uxth	r3, r3
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff fb2e 	bl	80027ec <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003190:	4b64      	ldr	r3, [pc, #400]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 8003192:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003196:	611a      	str	r2, [r3, #16]
 8003198:	4b62      	ldr	r3, [pc, #392]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 800319a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800319e:	615a      	str	r2, [r3, #20]
 80031a0:	4b61      	ldr	r3, [pc, #388]	; (8003328 <LCD_Scan_Dir+0x400>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	60da      	str	r2, [r3, #12]
 80031a6:	4b5f      	ldr	r3, [pc, #380]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 80031a8:	2280      	movs	r2, #128	; 0x80
 80031aa:	615a      	str	r2, [r3, #20]
 80031ac:	4b5d      	ldr	r3, [pc, #372]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 80031ae:	2280      	movs	r2, #128	; 0x80
 80031b0:	611a      	str	r2, [r3, #16]
 80031b2:	4b5c      	ldr	r3, [pc, #368]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 80031b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031b8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 80031ba:	4b59      	ldr	r3, [pc, #356]	; (8003320 <LCD_Scan_Dir+0x3f8>)
 80031bc:	895b      	ldrh	r3, [r3, #10]
 80031be:	3302      	adds	r3, #2
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fb12 	bl	80027ec <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80031c8:	4b56      	ldr	r3, [pc, #344]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 80031ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031ce:	611a      	str	r2, [r3, #16]
 80031d0:	4b54      	ldr	r3, [pc, #336]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 80031d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031d6:	615a      	str	r2, [r3, #20]
 80031d8:	4b51      	ldr	r3, [pc, #324]	; (8003320 <LCD_Scan_Dir+0x3f8>)
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	3b01      	subs	r3, #1
 80031de:	121a      	asrs	r2, r3, #8
 80031e0:	4b51      	ldr	r3, [pc, #324]	; (8003328 <LCD_Scan_Dir+0x400>)
 80031e2:	60da      	str	r2, [r3, #12]
 80031e4:	4b4f      	ldr	r3, [pc, #316]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 80031e6:	2280      	movs	r2, #128	; 0x80
 80031e8:	615a      	str	r2, [r3, #20]
 80031ea:	4b4e      	ldr	r3, [pc, #312]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 80031ec:	2280      	movs	r2, #128	; 0x80
 80031ee:	611a      	str	r2, [r3, #16]
 80031f0:	4b4c      	ldr	r3, [pc, #304]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 80031f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031f6:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 80031f8:	4b49      	ldr	r3, [pc, #292]	; (8003320 <LCD_Scan_Dir+0x3f8>)
 80031fa:	895b      	ldrh	r3, [r3, #10]
 80031fc:	3303      	adds	r3, #3
 80031fe:	b29b      	uxth	r3, r3
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff faf3 	bl	80027ec <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8003206:	4b47      	ldr	r3, [pc, #284]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 8003208:	f44f 7280 	mov.w	r2, #256	; 0x100
 800320c:	611a      	str	r2, [r3, #16]
 800320e:	4b45      	ldr	r3, [pc, #276]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 8003210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003214:	615a      	str	r2, [r3, #20]
 8003216:	4b42      	ldr	r3, [pc, #264]	; (8003320 <LCD_Scan_Dir+0x3f8>)
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	3b01      	subs	r3, #1
 800321c:	4a42      	ldr	r2, [pc, #264]	; (8003328 <LCD_Scan_Dir+0x400>)
 800321e:	b2db      	uxtb	r3, r3
 8003220:	60d3      	str	r3, [r2, #12]
 8003222:	4b40      	ldr	r3, [pc, #256]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 8003224:	2280      	movs	r2, #128	; 0x80
 8003226:	615a      	str	r2, [r3, #20]
 8003228:	4b3e      	ldr	r3, [pc, #248]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 800322a:	2280      	movs	r2, #128	; 0x80
 800322c:	611a      	str	r2, [r3, #16]
 800322e:	4b3d      	ldr	r3, [pc, #244]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 8003230:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003234:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8003236:	4b3a      	ldr	r3, [pc, #232]	; (8003320 <LCD_Scan_Dir+0x3f8>)
 8003238:	899b      	ldrh	r3, [r3, #12]
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff fad6 	bl	80027ec <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003240:	4b38      	ldr	r3, [pc, #224]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 8003242:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003246:	611a      	str	r2, [r3, #16]
 8003248:	4b36      	ldr	r3, [pc, #216]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 800324a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800324e:	615a      	str	r2, [r3, #20]
 8003250:	4b35      	ldr	r3, [pc, #212]	; (8003328 <LCD_Scan_Dir+0x400>)
 8003252:	2200      	movs	r2, #0
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	4b33      	ldr	r3, [pc, #204]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 8003258:	2280      	movs	r2, #128	; 0x80
 800325a:	615a      	str	r2, [r3, #20]
 800325c:	4b31      	ldr	r3, [pc, #196]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 800325e:	2280      	movs	r2, #128	; 0x80
 8003260:	611a      	str	r2, [r3, #16]
 8003262:	4b30      	ldr	r3, [pc, #192]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 8003264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003268:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 800326a:	4b2d      	ldr	r3, [pc, #180]	; (8003320 <LCD_Scan_Dir+0x3f8>)
 800326c:	899b      	ldrh	r3, [r3, #12]
 800326e:	3301      	adds	r3, #1
 8003270:	b29b      	uxth	r3, r3
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff faba 	bl	80027ec <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003278:	4b2a      	ldr	r3, [pc, #168]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 800327a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800327e:	611a      	str	r2, [r3, #16]
 8003280:	4b28      	ldr	r3, [pc, #160]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 8003282:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003286:	615a      	str	r2, [r3, #20]
 8003288:	4b27      	ldr	r3, [pc, #156]	; (8003328 <LCD_Scan_Dir+0x400>)
 800328a:	2200      	movs	r2, #0
 800328c:	60da      	str	r2, [r3, #12]
 800328e:	4b25      	ldr	r3, [pc, #148]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 8003290:	2280      	movs	r2, #128	; 0x80
 8003292:	615a      	str	r2, [r3, #20]
 8003294:	4b23      	ldr	r3, [pc, #140]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 8003296:	2280      	movs	r2, #128	; 0x80
 8003298:	611a      	str	r2, [r3, #16]
 800329a:	4b22      	ldr	r3, [pc, #136]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 800329c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032a0:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 80032a2:	4b1f      	ldr	r3, [pc, #124]	; (8003320 <LCD_Scan_Dir+0x3f8>)
 80032a4:	899b      	ldrh	r3, [r3, #12]
 80032a6:	3302      	adds	r3, #2
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff fa9e 	bl	80027ec <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80032b0:	4b1c      	ldr	r3, [pc, #112]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 80032b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032b6:	611a      	str	r2, [r3, #16]
 80032b8:	4b1a      	ldr	r3, [pc, #104]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 80032ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032be:	615a      	str	r2, [r3, #20]
 80032c0:	4b17      	ldr	r3, [pc, #92]	; (8003320 <LCD_Scan_Dir+0x3f8>)
 80032c2:	885b      	ldrh	r3, [r3, #2]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	121a      	asrs	r2, r3, #8
 80032c8:	4b17      	ldr	r3, [pc, #92]	; (8003328 <LCD_Scan_Dir+0x400>)
 80032ca:	60da      	str	r2, [r3, #12]
 80032cc:	4b15      	ldr	r3, [pc, #84]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 80032ce:	2280      	movs	r2, #128	; 0x80
 80032d0:	615a      	str	r2, [r3, #20]
 80032d2:	4b14      	ldr	r3, [pc, #80]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 80032d4:	2280      	movs	r2, #128	; 0x80
 80032d6:	611a      	str	r2, [r3, #16]
 80032d8:	4b12      	ldr	r3, [pc, #72]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 80032da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032de:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 80032e0:	4b0f      	ldr	r3, [pc, #60]	; (8003320 <LCD_Scan_Dir+0x3f8>)
 80032e2:	899b      	ldrh	r3, [r3, #12]
 80032e4:	3303      	adds	r3, #3
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff fa7f 	bl	80027ec <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80032ee:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 80032f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032f4:	611a      	str	r2, [r3, #16]
 80032f6:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 80032f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032fc:	615a      	str	r2, [r3, #20]
 80032fe:	4b08      	ldr	r3, [pc, #32]	; (8003320 <LCD_Scan_Dir+0x3f8>)
 8003300:	885b      	ldrh	r3, [r3, #2]
 8003302:	3b01      	subs	r3, #1
 8003304:	4a08      	ldr	r2, [pc, #32]	; (8003328 <LCD_Scan_Dir+0x400>)
 8003306:	b2db      	uxtb	r3, r3
 8003308:	60d3      	str	r3, [r2, #12]
 800330a:	4b06      	ldr	r3, [pc, #24]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 800330c:	2280      	movs	r2, #128	; 0x80
 800330e:	615a      	str	r2, [r3, #20]
 8003310:	4b04      	ldr	r3, [pc, #16]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 8003312:	2280      	movs	r2, #128	; 0x80
 8003314:	611a      	str	r2, [r3, #16]
 8003316:	4b03      	ldr	r3, [pc, #12]	; (8003324 <LCD_Scan_Dir+0x3fc>)
 8003318:	f44f 7200 	mov.w	r2, #512	; 0x200
 800331c:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 800331e:	e10a      	b.n	8003536 <LCD_Scan_Dir+0x60e>
 8003320:	200002f0 	.word	0x200002f0
 8003324:	40011000 	.word	0x40011000
 8003328:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 800332c:	4b84      	ldr	r3, [pc, #528]	; (8003540 <LCD_Scan_Dir+0x618>)
 800332e:	895b      	ldrh	r3, [r3, #10]
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff fa5b 	bl	80027ec <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003336:	4b83      	ldr	r3, [pc, #524]	; (8003544 <LCD_Scan_Dir+0x61c>)
 8003338:	f44f 7280 	mov.w	r2, #256	; 0x100
 800333c:	611a      	str	r2, [r3, #16]
 800333e:	4b81      	ldr	r3, [pc, #516]	; (8003544 <LCD_Scan_Dir+0x61c>)
 8003340:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003344:	615a      	str	r2, [r3, #20]
 8003346:	4b80      	ldr	r3, [pc, #512]	; (8003548 <LCD_Scan_Dir+0x620>)
 8003348:	2200      	movs	r2, #0
 800334a:	60da      	str	r2, [r3, #12]
 800334c:	4b7d      	ldr	r3, [pc, #500]	; (8003544 <LCD_Scan_Dir+0x61c>)
 800334e:	2280      	movs	r2, #128	; 0x80
 8003350:	615a      	str	r2, [r3, #20]
 8003352:	4b7c      	ldr	r3, [pc, #496]	; (8003544 <LCD_Scan_Dir+0x61c>)
 8003354:	2280      	movs	r2, #128	; 0x80
 8003356:	611a      	str	r2, [r3, #16]
 8003358:	4b7a      	ldr	r3, [pc, #488]	; (8003544 <LCD_Scan_Dir+0x61c>)
 800335a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800335e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8003360:	4b78      	ldr	r3, [pc, #480]	; (8003544 <LCD_Scan_Dir+0x61c>)
 8003362:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003366:	611a      	str	r2, [r3, #16]
 8003368:	4b76      	ldr	r3, [pc, #472]	; (8003544 <LCD_Scan_Dir+0x61c>)
 800336a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800336e:	615a      	str	r2, [r3, #20]
 8003370:	4b75      	ldr	r3, [pc, #468]	; (8003548 <LCD_Scan_Dir+0x620>)
 8003372:	2200      	movs	r2, #0
 8003374:	60da      	str	r2, [r3, #12]
 8003376:	4b73      	ldr	r3, [pc, #460]	; (8003544 <LCD_Scan_Dir+0x61c>)
 8003378:	2280      	movs	r2, #128	; 0x80
 800337a:	615a      	str	r2, [r3, #20]
 800337c:	4b71      	ldr	r3, [pc, #452]	; (8003544 <LCD_Scan_Dir+0x61c>)
 800337e:	2280      	movs	r2, #128	; 0x80
 8003380:	611a      	str	r2, [r3, #16]
 8003382:	4b70      	ldr	r3, [pc, #448]	; (8003544 <LCD_Scan_Dir+0x61c>)
 8003384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003388:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 800338a:	4b6e      	ldr	r3, [pc, #440]	; (8003544 <LCD_Scan_Dir+0x61c>)
 800338c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003390:	611a      	str	r2, [r3, #16]
 8003392:	4b6c      	ldr	r3, [pc, #432]	; (8003544 <LCD_Scan_Dir+0x61c>)
 8003394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003398:	615a      	str	r2, [r3, #20]
 800339a:	4b69      	ldr	r3, [pc, #420]	; (8003540 <LCD_Scan_Dir+0x618>)
 800339c:	881b      	ldrh	r3, [r3, #0]
 800339e:	3b01      	subs	r3, #1
 80033a0:	121a      	asrs	r2, r3, #8
 80033a2:	4b69      	ldr	r3, [pc, #420]	; (8003548 <LCD_Scan_Dir+0x620>)
 80033a4:	60da      	str	r2, [r3, #12]
 80033a6:	4b67      	ldr	r3, [pc, #412]	; (8003544 <LCD_Scan_Dir+0x61c>)
 80033a8:	2280      	movs	r2, #128	; 0x80
 80033aa:	615a      	str	r2, [r3, #20]
 80033ac:	4b65      	ldr	r3, [pc, #404]	; (8003544 <LCD_Scan_Dir+0x61c>)
 80033ae:	2280      	movs	r2, #128	; 0x80
 80033b0:	611a      	str	r2, [r3, #16]
 80033b2:	4b64      	ldr	r3, [pc, #400]	; (8003544 <LCD_Scan_Dir+0x61c>)
 80033b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033b8:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80033ba:	4b62      	ldr	r3, [pc, #392]	; (8003544 <LCD_Scan_Dir+0x61c>)
 80033bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033c0:	611a      	str	r2, [r3, #16]
 80033c2:	4b60      	ldr	r3, [pc, #384]	; (8003544 <LCD_Scan_Dir+0x61c>)
 80033c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033c8:	615a      	str	r2, [r3, #20]
 80033ca:	4b5d      	ldr	r3, [pc, #372]	; (8003540 <LCD_Scan_Dir+0x618>)
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	4a5d      	ldr	r2, [pc, #372]	; (8003548 <LCD_Scan_Dir+0x620>)
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	60d3      	str	r3, [r2, #12]
 80033d6:	4b5b      	ldr	r3, [pc, #364]	; (8003544 <LCD_Scan_Dir+0x61c>)
 80033d8:	2280      	movs	r2, #128	; 0x80
 80033da:	615a      	str	r2, [r3, #20]
 80033dc:	4b59      	ldr	r3, [pc, #356]	; (8003544 <LCD_Scan_Dir+0x61c>)
 80033de:	2280      	movs	r2, #128	; 0x80
 80033e0:	611a      	str	r2, [r3, #16]
 80033e2:	4b58      	ldr	r3, [pc, #352]	; (8003544 <LCD_Scan_Dir+0x61c>)
 80033e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033e8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 80033ea:	4b55      	ldr	r3, [pc, #340]	; (8003540 <LCD_Scan_Dir+0x618>)
 80033ec:	899b      	ldrh	r3, [r3, #12]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff f9fc 	bl	80027ec <LCD_WR_REG>
			LCD_WR_DATA(0);
 80033f4:	4b53      	ldr	r3, [pc, #332]	; (8003544 <LCD_Scan_Dir+0x61c>)
 80033f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033fa:	611a      	str	r2, [r3, #16]
 80033fc:	4b51      	ldr	r3, [pc, #324]	; (8003544 <LCD_Scan_Dir+0x61c>)
 80033fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003402:	615a      	str	r2, [r3, #20]
 8003404:	4b50      	ldr	r3, [pc, #320]	; (8003548 <LCD_Scan_Dir+0x620>)
 8003406:	2200      	movs	r2, #0
 8003408:	60da      	str	r2, [r3, #12]
 800340a:	4b4e      	ldr	r3, [pc, #312]	; (8003544 <LCD_Scan_Dir+0x61c>)
 800340c:	2280      	movs	r2, #128	; 0x80
 800340e:	615a      	str	r2, [r3, #20]
 8003410:	4b4c      	ldr	r3, [pc, #304]	; (8003544 <LCD_Scan_Dir+0x61c>)
 8003412:	2280      	movs	r2, #128	; 0x80
 8003414:	611a      	str	r2, [r3, #16]
 8003416:	4b4b      	ldr	r3, [pc, #300]	; (8003544 <LCD_Scan_Dir+0x61c>)
 8003418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800341c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 800341e:	4b49      	ldr	r3, [pc, #292]	; (8003544 <LCD_Scan_Dir+0x61c>)
 8003420:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003424:	611a      	str	r2, [r3, #16]
 8003426:	4b47      	ldr	r3, [pc, #284]	; (8003544 <LCD_Scan_Dir+0x61c>)
 8003428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800342c:	615a      	str	r2, [r3, #20]
 800342e:	4b46      	ldr	r3, [pc, #280]	; (8003548 <LCD_Scan_Dir+0x620>)
 8003430:	2200      	movs	r2, #0
 8003432:	60da      	str	r2, [r3, #12]
 8003434:	4b43      	ldr	r3, [pc, #268]	; (8003544 <LCD_Scan_Dir+0x61c>)
 8003436:	2280      	movs	r2, #128	; 0x80
 8003438:	615a      	str	r2, [r3, #20]
 800343a:	4b42      	ldr	r3, [pc, #264]	; (8003544 <LCD_Scan_Dir+0x61c>)
 800343c:	2280      	movs	r2, #128	; 0x80
 800343e:	611a      	str	r2, [r3, #16]
 8003440:	4b40      	ldr	r3, [pc, #256]	; (8003544 <LCD_Scan_Dir+0x61c>)
 8003442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003446:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8003448:	4b3e      	ldr	r3, [pc, #248]	; (8003544 <LCD_Scan_Dir+0x61c>)
 800344a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800344e:	611a      	str	r2, [r3, #16]
 8003450:	4b3c      	ldr	r3, [pc, #240]	; (8003544 <LCD_Scan_Dir+0x61c>)
 8003452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003456:	615a      	str	r2, [r3, #20]
 8003458:	4b39      	ldr	r3, [pc, #228]	; (8003540 <LCD_Scan_Dir+0x618>)
 800345a:	885b      	ldrh	r3, [r3, #2]
 800345c:	3b01      	subs	r3, #1
 800345e:	121a      	asrs	r2, r3, #8
 8003460:	4b39      	ldr	r3, [pc, #228]	; (8003548 <LCD_Scan_Dir+0x620>)
 8003462:	60da      	str	r2, [r3, #12]
 8003464:	4b37      	ldr	r3, [pc, #220]	; (8003544 <LCD_Scan_Dir+0x61c>)
 8003466:	2280      	movs	r2, #128	; 0x80
 8003468:	615a      	str	r2, [r3, #20]
 800346a:	4b36      	ldr	r3, [pc, #216]	; (8003544 <LCD_Scan_Dir+0x61c>)
 800346c:	2280      	movs	r2, #128	; 0x80
 800346e:	611a      	str	r2, [r3, #16]
 8003470:	4b34      	ldr	r3, [pc, #208]	; (8003544 <LCD_Scan_Dir+0x61c>)
 8003472:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003476:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8003478:	4b32      	ldr	r3, [pc, #200]	; (8003544 <LCD_Scan_Dir+0x61c>)
 800347a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800347e:	611a      	str	r2, [r3, #16]
 8003480:	4b30      	ldr	r3, [pc, #192]	; (8003544 <LCD_Scan_Dir+0x61c>)
 8003482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003486:	615a      	str	r2, [r3, #20]
 8003488:	4b2d      	ldr	r3, [pc, #180]	; (8003540 <LCD_Scan_Dir+0x618>)
 800348a:	885b      	ldrh	r3, [r3, #2]
 800348c:	3b01      	subs	r3, #1
 800348e:	4a2e      	ldr	r2, [pc, #184]	; (8003548 <LCD_Scan_Dir+0x620>)
 8003490:	b2db      	uxtb	r3, r3
 8003492:	60d3      	str	r3, [r2, #12]
 8003494:	4b2b      	ldr	r3, [pc, #172]	; (8003544 <LCD_Scan_Dir+0x61c>)
 8003496:	2280      	movs	r2, #128	; 0x80
 8003498:	615a      	str	r2, [r3, #20]
 800349a:	4b2a      	ldr	r3, [pc, #168]	; (8003544 <LCD_Scan_Dir+0x61c>)
 800349c:	2280      	movs	r2, #128	; 0x80
 800349e:	611a      	str	r2, [r3, #16]
 80034a0:	4b28      	ldr	r3, [pc, #160]	; (8003544 <LCD_Scan_Dir+0x61c>)
 80034a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034a6:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 80034a8:	e045      	b.n	8003536 <LCD_Scan_Dir+0x60e>
		}
	} else {
		switch (dir) {
 80034aa:	79fb      	ldrb	r3, [r7, #7]
 80034ac:	2b07      	cmp	r3, #7
 80034ae:	d836      	bhi.n	800351e <LCD_Scan_Dir+0x5f6>
 80034b0:	a201      	add	r2, pc, #4	; (adr r2, 80034b8 <LCD_Scan_Dir+0x590>)
 80034b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b6:	bf00      	nop
 80034b8:	080034d9 	.word	0x080034d9
 80034bc:	080034e3 	.word	0x080034e3
 80034c0:	080034ed 	.word	0x080034ed
 80034c4:	0800351f 	.word	0x0800351f
 80034c8:	080034f7 	.word	0x080034f7
 80034cc:	08003501 	.word	0x08003501
 80034d0:	0800350b 	.word	0x0800350b
 80034d4:	08003515 	.word	0x08003515
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 80034d8:	89fb      	ldrh	r3, [r7, #14]
 80034da:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80034de:	81fb      	strh	r3, [r7, #14]
			break;
 80034e0:	e01d      	b.n	800351e <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 80034e2:	89fb      	ldrh	r3, [r7, #14]
 80034e4:	f043 0310 	orr.w	r3, r3, #16
 80034e8:	81fb      	strh	r3, [r7, #14]
			break;
 80034ea:	e018      	b.n	800351e <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 80034ec:	89fb      	ldrh	r3, [r7, #14]
 80034ee:	f043 0320 	orr.w	r3, r3, #32
 80034f2:	81fb      	strh	r3, [r7, #14]
			break;
 80034f4:	e013      	b.n	800351e <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 80034f6:	89fb      	ldrh	r3, [r7, #14]
 80034f8:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80034fc:	81fb      	strh	r3, [r7, #14]
			break;
 80034fe:	e00e      	b.n	800351e <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 8003500:	89fb      	ldrh	r3, [r7, #14]
 8003502:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003506:	81fb      	strh	r3, [r7, #14]
			break;
 8003508:	e009      	b.n	800351e <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 800350a:	89fb      	ldrh	r3, [r7, #14]
 800350c:	f043 0318 	orr.w	r3, r3, #24
 8003510:	81fb      	strh	r3, [r7, #14]
			break;
 8003512:	e004      	b.n	800351e <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 8003514:	89fb      	ldrh	r3, [r7, #14]
 8003516:	f043 0308 	orr.w	r3, r3, #8
 800351a:	81fb      	strh	r3, [r7, #14]
			break;
 800351c:	bf00      	nop
		}
		dirreg = 0X03;
 800351e:	2303      	movs	r3, #3
 8003520:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 8003522:	89fb      	ldrh	r3, [r7, #14]
 8003524:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003528:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 800352a:	89fa      	ldrh	r2, [r7, #14]
 800352c:	89bb      	ldrh	r3, [r7, #12]
 800352e:	4611      	mov	r1, r2
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff f9e7 	bl	8002904 <LCD_WriteReg>
	}
}
 8003536:	bf00      	nop
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	200002f0 	.word	0x200002f0
 8003544:	40011000 	.word	0x40011000
 8003548:	40010c00 	.word	0x40010c00
 800354c:	00000000 	.word	0x00000000

08003550 <LCD_SSD_BackLightSet>:
	LCD_CS_SET;
	LCD_WR_DATA(color);		//写数据
}
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8003550:	b590      	push	{r4, r7, lr}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 800355a:	20be      	movs	r0, #190	; 0xbe
 800355c:	f7ff f946 	bl	80027ec <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8003560:	4b4b      	ldr	r3, [pc, #300]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 8003562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003566:	611a      	str	r2, [r3, #16]
 8003568:	4b49      	ldr	r3, [pc, #292]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 800356a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800356e:	615a      	str	r2, [r3, #20]
 8003570:	4b48      	ldr	r3, [pc, #288]	; (8003694 <LCD_SSD_BackLightSet+0x144>)
 8003572:	2205      	movs	r2, #5
 8003574:	60da      	str	r2, [r3, #12]
 8003576:	4b46      	ldr	r3, [pc, #280]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 8003578:	2280      	movs	r2, #128	; 0x80
 800357a:	615a      	str	r2, [r3, #20]
 800357c:	4b44      	ldr	r3, [pc, #272]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 800357e:	2280      	movs	r2, #128	; 0x80
 8003580:	611a      	str	r2, [r3, #16]
 8003582:	4b43      	ldr	r3, [pc, #268]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 8003584:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003588:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 800358a:	4b41      	ldr	r3, [pc, #260]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 800358c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003590:	611a      	str	r2, [r3, #16]
 8003592:	4b3f      	ldr	r3, [pc, #252]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 8003594:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003598:	615a      	str	r2, [r3, #20]
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	4618      	mov	r0, r3
 800359e:	f7fc ff9d 	bl	80004dc <__aeabi_i2d>
 80035a2:	a339      	add	r3, pc, #228	; (adr r3, 8003688 <LCD_SSD_BackLightSet+0x138>)
 80035a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a8:	f7fd f802 	bl	80005b0 <__aeabi_dmul>
 80035ac:	4603      	mov	r3, r0
 80035ae:	460c      	mov	r4, r1
 80035b0:	461a      	mov	r2, r3
 80035b2:	4623      	mov	r3, r4
 80035b4:	4c37      	ldr	r4, [pc, #220]	; (8003694 <LCD_SSD_BackLightSet+0x144>)
 80035b6:	4610      	mov	r0, r2
 80035b8:	4619      	mov	r1, r3
 80035ba:	f7fd fad1 	bl	8000b60 <__aeabi_d2uiz>
 80035be:	4603      	mov	r3, r0
 80035c0:	60e3      	str	r3, [r4, #12]
 80035c2:	4b33      	ldr	r3, [pc, #204]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 80035c4:	2280      	movs	r2, #128	; 0x80
 80035c6:	615a      	str	r2, [r3, #20]
 80035c8:	4b31      	ldr	r3, [pc, #196]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 80035ca:	2280      	movs	r2, #128	; 0x80
 80035cc:	611a      	str	r2, [r3, #16]
 80035ce:	4b30      	ldr	r3, [pc, #192]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 80035d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035d4:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 80035d6:	4b2e      	ldr	r3, [pc, #184]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 80035d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035dc:	611a      	str	r2, [r3, #16]
 80035de:	4b2c      	ldr	r3, [pc, #176]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 80035e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035e4:	615a      	str	r2, [r3, #20]
 80035e6:	4b2b      	ldr	r3, [pc, #172]	; (8003694 <LCD_SSD_BackLightSet+0x144>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	60da      	str	r2, [r3, #12]
 80035ec:	4b28      	ldr	r3, [pc, #160]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 80035ee:	2280      	movs	r2, #128	; 0x80
 80035f0:	615a      	str	r2, [r3, #20]
 80035f2:	4b27      	ldr	r3, [pc, #156]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 80035f4:	2280      	movs	r2, #128	; 0x80
 80035f6:	611a      	str	r2, [r3, #16]
 80035f8:	4b25      	ldr	r3, [pc, #148]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 80035fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035fe:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8003600:	4b23      	ldr	r3, [pc, #140]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 8003602:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003606:	611a      	str	r2, [r3, #16]
 8003608:	4b21      	ldr	r3, [pc, #132]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 800360a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800360e:	615a      	str	r2, [r3, #20]
 8003610:	4b20      	ldr	r3, [pc, #128]	; (8003694 <LCD_SSD_BackLightSet+0x144>)
 8003612:	22ff      	movs	r2, #255	; 0xff
 8003614:	60da      	str	r2, [r3, #12]
 8003616:	4b1e      	ldr	r3, [pc, #120]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 8003618:	2280      	movs	r2, #128	; 0x80
 800361a:	615a      	str	r2, [r3, #20]
 800361c:	4b1c      	ldr	r3, [pc, #112]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 800361e:	2280      	movs	r2, #128	; 0x80
 8003620:	611a      	str	r2, [r3, #16]
 8003622:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 8003624:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003628:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 800362a:	4b19      	ldr	r3, [pc, #100]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 800362c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003630:	611a      	str	r2, [r3, #16]
 8003632:	4b17      	ldr	r3, [pc, #92]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 8003634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003638:	615a      	str	r2, [r3, #20]
 800363a:	4b16      	ldr	r3, [pc, #88]	; (8003694 <LCD_SSD_BackLightSet+0x144>)
 800363c:	2200      	movs	r2, #0
 800363e:	60da      	str	r2, [r3, #12]
 8003640:	4b13      	ldr	r3, [pc, #76]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 8003642:	2280      	movs	r2, #128	; 0x80
 8003644:	615a      	str	r2, [r3, #20]
 8003646:	4b12      	ldr	r3, [pc, #72]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 8003648:	2280      	movs	r2, #128	; 0x80
 800364a:	611a      	str	r2, [r3, #16]
 800364c:	4b10      	ldr	r3, [pc, #64]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 800364e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003652:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 8003654:	4b0e      	ldr	r3, [pc, #56]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 8003656:	f44f 7280 	mov.w	r2, #256	; 0x100
 800365a:	611a      	str	r2, [r3, #16]
 800365c:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 800365e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003662:	615a      	str	r2, [r3, #20]
 8003664:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <LCD_SSD_BackLightSet+0x144>)
 8003666:	2200      	movs	r2, #0
 8003668:	60da      	str	r2, [r3, #12]
 800366a:	4b09      	ldr	r3, [pc, #36]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 800366c:	2280      	movs	r2, #128	; 0x80
 800366e:	615a      	str	r2, [r3, #20]
 8003670:	4b07      	ldr	r3, [pc, #28]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 8003672:	2280      	movs	r2, #128	; 0x80
 8003674:	611a      	str	r2, [r3, #16]
 8003676:	4b06      	ldr	r3, [pc, #24]	; (8003690 <LCD_SSD_BackLightSet+0x140>)
 8003678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800367c:	611a      	str	r2, [r3, #16]
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	bd90      	pop	{r4, r7, pc}
 8003686:	bf00      	nop
 8003688:	66666666 	.word	0x66666666
 800368c:	40046666 	.word	0x40046666
 8003690:	40011000 	.word	0x40011000
 8003694:	40010c00 	.word	0x40010c00

08003698 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	4603      	mov	r3, r0
 80036a0:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d177      	bne.n	8003798 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 80036a8:	4b80      	ldr	r3, [pc, #512]	; (80038ac <LCD_Display_Dir+0x214>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 80036ae:	4b7f      	ldr	r3, [pc, #508]	; (80038ac <LCD_Display_Dir+0x214>)
 80036b0:	22f0      	movs	r2, #240	; 0xf0
 80036b2:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 80036b4:	4b7d      	ldr	r3, [pc, #500]	; (80038ac <LCD_Display_Dir+0x214>)
 80036b6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80036ba:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 80036bc:	4b7b      	ldr	r3, [pc, #492]	; (80038ac <LCD_Display_Dir+0x214>)
 80036be:	889b      	ldrh	r3, [r3, #4]
 80036c0:	f249 3241 	movw	r2, #37697	; 0x9341
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00b      	beq.n	80036e0 <LCD_Display_Dir+0x48>
 80036c8:	4b78      	ldr	r3, [pc, #480]	; (80038ac <LCD_Display_Dir+0x214>)
 80036ca:	889b      	ldrh	r3, [r3, #4]
 80036cc:	f646 0204 	movw	r2, #26628	; 0x6804
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d005      	beq.n	80036e0 <LCD_Display_Dir+0x48>
 80036d4:	4b75      	ldr	r3, [pc, #468]	; (80038ac <LCD_Display_Dir+0x214>)
 80036d6:	889b      	ldrh	r3, [r3, #4]
 80036d8:	f245 3210 	movw	r2, #21264	; 0x5310
 80036dc:	4293      	cmp	r3, r2
 80036de:	d11e      	bne.n	800371e <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 80036e0:	4b72      	ldr	r3, [pc, #456]	; (80038ac <LCD_Display_Dir+0x214>)
 80036e2:	222c      	movs	r2, #44	; 0x2c
 80036e4:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 80036e6:	4b71      	ldr	r3, [pc, #452]	; (80038ac <LCD_Display_Dir+0x214>)
 80036e8:	222a      	movs	r2, #42	; 0x2a
 80036ea:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 80036ec:	4b6f      	ldr	r3, [pc, #444]	; (80038ac <LCD_Display_Dir+0x214>)
 80036ee:	222b      	movs	r2, #43	; 0x2b
 80036f0:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 80036f2:	4b6e      	ldr	r3, [pc, #440]	; (80038ac <LCD_Display_Dir+0x214>)
 80036f4:	889b      	ldrh	r3, [r3, #4]
 80036f6:	f646 0204 	movw	r2, #26628	; 0x6804
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d006      	beq.n	800370c <LCD_Display_Dir+0x74>
 80036fe:	4b6b      	ldr	r3, [pc, #428]	; (80038ac <LCD_Display_Dir+0x214>)
 8003700:	889b      	ldrh	r3, [r3, #4]
 8003702:	f245 3210 	movw	r2, #21264	; 0x5310
 8003706:	4293      	cmp	r3, r2
 8003708:	f040 80c7 	bne.w	800389a <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 800370c:	4b67      	ldr	r3, [pc, #412]	; (80038ac <LCD_Display_Dir+0x214>)
 800370e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003712:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8003714:	4b65      	ldr	r3, [pc, #404]	; (80038ac <LCD_Display_Dir+0x214>)
 8003716:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800371a:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 800371c:	e0bd      	b.n	800389a <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 800371e:	4b63      	ldr	r3, [pc, #396]	; (80038ac <LCD_Display_Dir+0x214>)
 8003720:	889b      	ldrh	r3, [r3, #4]
 8003722:	f245 5210 	movw	r2, #21776	; 0x5510
 8003726:	4293      	cmp	r3, r2
 8003728:	d114      	bne.n	8003754 <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 800372a:	4b60      	ldr	r3, [pc, #384]	; (80038ac <LCD_Display_Dir+0x214>)
 800372c:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8003730:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8003732:	4b5e      	ldr	r3, [pc, #376]	; (80038ac <LCD_Display_Dir+0x214>)
 8003734:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8003738:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 800373a:	4b5c      	ldr	r3, [pc, #368]	; (80038ac <LCD_Display_Dir+0x214>)
 800373c:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8003740:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8003742:	4b5a      	ldr	r3, [pc, #360]	; (80038ac <LCD_Display_Dir+0x214>)
 8003744:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003748:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 800374a:	4b58      	ldr	r3, [pc, #352]	; (80038ac <LCD_Display_Dir+0x214>)
 800374c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003750:	805a      	strh	r2, [r3, #2]
 8003752:	e0a3      	b.n	800389c <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 8003754:	4b55      	ldr	r3, [pc, #340]	; (80038ac <LCD_Display_Dir+0x214>)
 8003756:	889b      	ldrh	r3, [r3, #4]
 8003758:	f641 1263 	movw	r2, #6499	; 0x1963
 800375c:	4293      	cmp	r3, r2
 800375e:	d111      	bne.n	8003784 <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8003760:	4b52      	ldr	r3, [pc, #328]	; (80038ac <LCD_Display_Dir+0x214>)
 8003762:	222c      	movs	r2, #44	; 0x2c
 8003764:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 8003766:	4b51      	ldr	r3, [pc, #324]	; (80038ac <LCD_Display_Dir+0x214>)
 8003768:	222b      	movs	r2, #43	; 0x2b
 800376a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 800376c:	4b4f      	ldr	r3, [pc, #316]	; (80038ac <LCD_Display_Dir+0x214>)
 800376e:	222a      	movs	r2, #42	; 0x2a
 8003770:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8003772:	4b4e      	ldr	r3, [pc, #312]	; (80038ac <LCD_Display_Dir+0x214>)
 8003774:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003778:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 800377a:	4b4c      	ldr	r3, [pc, #304]	; (80038ac <LCD_Display_Dir+0x214>)
 800377c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003780:	805a      	strh	r2, [r3, #2]
 8003782:	e08b      	b.n	800389c <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8003784:	4b49      	ldr	r3, [pc, #292]	; (80038ac <LCD_Display_Dir+0x214>)
 8003786:	2222      	movs	r2, #34	; 0x22
 8003788:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 800378a:	4b48      	ldr	r3, [pc, #288]	; (80038ac <LCD_Display_Dir+0x214>)
 800378c:	2220      	movs	r2, #32
 800378e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8003790:	4b46      	ldr	r3, [pc, #280]	; (80038ac <LCD_Display_Dir+0x214>)
 8003792:	2221      	movs	r2, #33	; 0x21
 8003794:	819a      	strh	r2, [r3, #12]
 8003796:	e081      	b.n	800389c <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8003798:	4b44      	ldr	r3, [pc, #272]	; (80038ac <LCD_Display_Dir+0x214>)
 800379a:	2201      	movs	r2, #1
 800379c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 800379e:	4b43      	ldr	r3, [pc, #268]	; (80038ac <LCD_Display_Dir+0x214>)
 80037a0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80037a4:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 80037a6:	4b41      	ldr	r3, [pc, #260]	; (80038ac <LCD_Display_Dir+0x214>)
 80037a8:	22f0      	movs	r2, #240	; 0xf0
 80037aa:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 80037ac:	4b3f      	ldr	r3, [pc, #252]	; (80038ac <LCD_Display_Dir+0x214>)
 80037ae:	889b      	ldrh	r3, [r3, #4]
 80037b0:	f249 3241 	movw	r2, #37697	; 0x9341
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d005      	beq.n	80037c4 <LCD_Display_Dir+0x12c>
 80037b8:	4b3c      	ldr	r3, [pc, #240]	; (80038ac <LCD_Display_Dir+0x214>)
 80037ba:	889b      	ldrh	r3, [r3, #4]
 80037bc:	f245 3210 	movw	r2, #21264	; 0x5310
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d109      	bne.n	80037d8 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 80037c4:	4b39      	ldr	r3, [pc, #228]	; (80038ac <LCD_Display_Dir+0x214>)
 80037c6:	222c      	movs	r2, #44	; 0x2c
 80037c8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 80037ca:	4b38      	ldr	r3, [pc, #224]	; (80038ac <LCD_Display_Dir+0x214>)
 80037cc:	222a      	movs	r2, #42	; 0x2a
 80037ce:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 80037d0:	4b36      	ldr	r3, [pc, #216]	; (80038ac <LCD_Display_Dir+0x214>)
 80037d2:	222b      	movs	r2, #43	; 0x2b
 80037d4:	819a      	strh	r2, [r3, #12]
 80037d6:	e04b      	b.n	8003870 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 80037d8:	4b34      	ldr	r3, [pc, #208]	; (80038ac <LCD_Display_Dir+0x214>)
 80037da:	889b      	ldrh	r3, [r3, #4]
 80037dc:	f646 0204 	movw	r2, #26628	; 0x6804
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d109      	bne.n	80037f8 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 80037e4:	4b31      	ldr	r3, [pc, #196]	; (80038ac <LCD_Display_Dir+0x214>)
 80037e6:	222c      	movs	r2, #44	; 0x2c
 80037e8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 80037ea:	4b30      	ldr	r3, [pc, #192]	; (80038ac <LCD_Display_Dir+0x214>)
 80037ec:	222b      	movs	r2, #43	; 0x2b
 80037ee:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 80037f0:	4b2e      	ldr	r3, [pc, #184]	; (80038ac <LCD_Display_Dir+0x214>)
 80037f2:	222a      	movs	r2, #42	; 0x2a
 80037f4:	819a      	strh	r2, [r3, #12]
 80037f6:	e03b      	b.n	8003870 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 80037f8:	4b2c      	ldr	r3, [pc, #176]	; (80038ac <LCD_Display_Dir+0x214>)
 80037fa:	889b      	ldrh	r3, [r3, #4]
 80037fc:	f245 5210 	movw	r2, #21776	; 0x5510
 8003800:	4293      	cmp	r3, r2
 8003802:	d114      	bne.n	800382e <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 8003804:	4b29      	ldr	r3, [pc, #164]	; (80038ac <LCD_Display_Dir+0x214>)
 8003806:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800380a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 800380c:	4b27      	ldr	r3, [pc, #156]	; (80038ac <LCD_Display_Dir+0x214>)
 800380e:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8003812:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8003814:	4b25      	ldr	r3, [pc, #148]	; (80038ac <LCD_Display_Dir+0x214>)
 8003816:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 800381a:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 800381c:	4b23      	ldr	r3, [pc, #140]	; (80038ac <LCD_Display_Dir+0x214>)
 800381e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003822:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8003824:	4b21      	ldr	r3, [pc, #132]	; (80038ac <LCD_Display_Dir+0x214>)
 8003826:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800382a:	805a      	strh	r2, [r3, #2]
 800382c:	e020      	b.n	8003870 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 800382e:	4b1f      	ldr	r3, [pc, #124]	; (80038ac <LCD_Display_Dir+0x214>)
 8003830:	889b      	ldrh	r3, [r3, #4]
 8003832:	f641 1263 	movw	r2, #6499	; 0x1963
 8003836:	4293      	cmp	r3, r2
 8003838:	d111      	bne.n	800385e <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 800383a:	4b1c      	ldr	r3, [pc, #112]	; (80038ac <LCD_Display_Dir+0x214>)
 800383c:	222c      	movs	r2, #44	; 0x2c
 800383e:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8003840:	4b1a      	ldr	r3, [pc, #104]	; (80038ac <LCD_Display_Dir+0x214>)
 8003842:	222a      	movs	r2, #42	; 0x2a
 8003844:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 8003846:	4b19      	ldr	r3, [pc, #100]	; (80038ac <LCD_Display_Dir+0x214>)
 8003848:	222b      	movs	r2, #43	; 0x2b
 800384a:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 800384c:	4b17      	ldr	r3, [pc, #92]	; (80038ac <LCD_Display_Dir+0x214>)
 800384e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003852:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 8003854:	4b15      	ldr	r3, [pc, #84]	; (80038ac <LCD_Display_Dir+0x214>)
 8003856:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800385a:	805a      	strh	r2, [r3, #2]
 800385c:	e008      	b.n	8003870 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 800385e:	4b13      	ldr	r3, [pc, #76]	; (80038ac <LCD_Display_Dir+0x214>)
 8003860:	2222      	movs	r2, #34	; 0x22
 8003862:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8003864:	4b11      	ldr	r3, [pc, #68]	; (80038ac <LCD_Display_Dir+0x214>)
 8003866:	2221      	movs	r2, #33	; 0x21
 8003868:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 800386a:	4b10      	ldr	r3, [pc, #64]	; (80038ac <LCD_Display_Dir+0x214>)
 800386c:	2220      	movs	r2, #32
 800386e:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8003870:	4b0e      	ldr	r3, [pc, #56]	; (80038ac <LCD_Display_Dir+0x214>)
 8003872:	889b      	ldrh	r3, [r3, #4]
 8003874:	f646 0204 	movw	r2, #26628	; 0x6804
 8003878:	4293      	cmp	r3, r2
 800387a:	d005      	beq.n	8003888 <LCD_Display_Dir+0x1f0>
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <LCD_Display_Dir+0x214>)
 800387e:	889b      	ldrh	r3, [r3, #4]
 8003880:	f245 3210 	movw	r2, #21264	; 0x5310
 8003884:	4293      	cmp	r3, r2
 8003886:	d109      	bne.n	800389c <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8003888:	4b08      	ldr	r3, [pc, #32]	; (80038ac <LCD_Display_Dir+0x214>)
 800388a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800388e:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8003890:	4b06      	ldr	r3, [pc, #24]	; (80038ac <LCD_Display_Dir+0x214>)
 8003892:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003896:	805a      	strh	r2, [r3, #2]
 8003898:	e000      	b.n	800389c <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 800389a:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 800389c:	2000      	movs	r0, #0
 800389e:	f7ff fb43 	bl	8002f28 <LCD_Scan_Dir>
}
 80038a2:	bf00      	nop
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	200002f0 	.word	0x200002f0

080038b0 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 80038b6:	4b90      	ldr	r3, [pc, #576]	; (8003af8 <LCD_Init+0x248>)
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	4a8f      	ldr	r2, [pc, #572]	; (8003af8 <LCD_Init+0x248>)
 80038bc:	f043 0308 	orr.w	r3, r3, #8
 80038c0:	6193      	str	r3, [r2, #24]
 80038c2:	4b8d      	ldr	r3, [pc, #564]	; (8003af8 <LCD_Init+0x248>)
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	607b      	str	r3, [r7, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 80038ce:	4b8a      	ldr	r3, [pc, #552]	; (8003af8 <LCD_Init+0x248>)
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	4a89      	ldr	r2, [pc, #548]	; (8003af8 <LCD_Init+0x248>)
 80038d4:	f043 0310 	orr.w	r3, r3, #16
 80038d8:	6193      	str	r3, [r2, #24]
 80038da:	4b87      	ldr	r3, [pc, #540]	; (8003af8 <LCD_Init+0x248>)
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 80038e6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80038ea:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 80038ec:	2301      	movs	r3, #1
 80038ee:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 80038f0:	2301      	movs	r3, #1
 80038f2:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 80038f4:	2303      	movs	r3, #3
 80038f6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 80038f8:	f107 0308 	add.w	r3, r7, #8
 80038fc:	4619      	mov	r1, r3
 80038fe:	487f      	ldr	r0, [pc, #508]	; (8003afc <LCD_Init+0x24c>)
 8003900:	f7fd fd64 	bl	80013cc <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 8003904:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003908:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 800390a:	f107 0308 	add.w	r3, r7, #8
 800390e:	4619      	mov	r1, r3
 8003910:	487b      	ldr	r0, [pc, #492]	; (8003b00 <LCD_Init+0x250>)
 8003912:	f7fd fd5b 	bl	80013cc <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 8003916:	2032      	movs	r0, #50	; 0x32
 8003918:	f7fd fc28 	bl	800116c <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 800391c:	2101      	movs	r1, #1
 800391e:	2000      	movs	r0, #0
 8003920:	f7fe fff0 	bl	8002904 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8003924:	2032      	movs	r0, #50	; 0x32
 8003926:	f7fd fc21 	bl	800116c <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 800392a:	2000      	movs	r0, #0
 800392c:	f7ff f814 	bl	8002958 <LCD_ReadReg>
 8003930:	4603      	mov	r3, r0
 8003932:	461a      	mov	r2, r3
 8003934:	4b73      	ldr	r3, [pc, #460]	; (8003b04 <LCD_Init+0x254>)
 8003936:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8003938:	4b72      	ldr	r3, [pc, #456]	; (8003b04 <LCD_Init+0x254>)
 800393a:	889b      	ldrh	r3, [r3, #4]
 800393c:	2bfe      	cmp	r3, #254	; 0xfe
 800393e:	d90b      	bls.n	8003958 <LCD_Init+0xa8>
 8003940:	4b70      	ldr	r3, [pc, #448]	; (8003b04 <LCD_Init+0x254>)
 8003942:	889b      	ldrh	r3, [r3, #4]
 8003944:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003948:	4293      	cmp	r3, r2
 800394a:	d005      	beq.n	8003958 <LCD_Init+0xa8>
 800394c:	4b6d      	ldr	r3, [pc, #436]	; (8003b04 <LCD_Init+0x254>)
 800394e:	889b      	ldrh	r3, [r3, #4]
 8003950:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8003954:	f040 80c8 	bne.w	8003ae8 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8003958:	20d3      	movs	r0, #211	; 0xd3
 800395a:	f7fe ff47 	bl	80027ec <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 800395e:	f7fe ff8d 	bl	800287c <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 8003962:	f7fe ff8b 	bl	800287c <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 8003966:	f7fe ff89 	bl	800287c <LCD_RD_DATA>
 800396a:	4603      	mov	r3, r0
 800396c:	461a      	mov	r2, r3
 800396e:	4b65      	ldr	r3, [pc, #404]	; (8003b04 <LCD_Init+0x254>)
 8003970:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 8003972:	4b64      	ldr	r3, [pc, #400]	; (8003b04 <LCD_Init+0x254>)
 8003974:	889b      	ldrh	r3, [r3, #4]
 8003976:	021b      	lsls	r3, r3, #8
 8003978:	b29a      	uxth	r2, r3
 800397a:	4b62      	ldr	r3, [pc, #392]	; (8003b04 <LCD_Init+0x254>)
 800397c:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 800397e:	f7fe ff7d 	bl	800287c <LCD_RD_DATA>
 8003982:	4603      	mov	r3, r0
 8003984:	461a      	mov	r2, r3
 8003986:	4b5f      	ldr	r3, [pc, #380]	; (8003b04 <LCD_Init+0x254>)
 8003988:	889b      	ldrh	r3, [r3, #4]
 800398a:	4313      	orrs	r3, r2
 800398c:	b29a      	uxth	r2, r3
 800398e:	4b5d      	ldr	r3, [pc, #372]	; (8003b04 <LCD_Init+0x254>)
 8003990:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 8003992:	4b5c      	ldr	r3, [pc, #368]	; (8003b04 <LCD_Init+0x254>)
 8003994:	889b      	ldrh	r3, [r3, #4]
 8003996:	f249 3241 	movw	r2, #37697	; 0x9341
 800399a:	4293      	cmp	r3, r2
 800399c:	f000 80a4 	beq.w	8003ae8 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 80039a0:	20bf      	movs	r0, #191	; 0xbf
 80039a2:	f7fe ff23 	bl	80027ec <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 80039a6:	f7fe ff69 	bl	800287c <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 80039aa:	f7fe ff67 	bl	800287c <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 80039ae:	f7fe ff65 	bl	800287c <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 80039b2:	f7fe ff63 	bl	800287c <LCD_RD_DATA>
 80039b6:	4603      	mov	r3, r0
 80039b8:	461a      	mov	r2, r3
 80039ba:	4b52      	ldr	r3, [pc, #328]	; (8003b04 <LCD_Init+0x254>)
 80039bc:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 80039be:	4b51      	ldr	r3, [pc, #324]	; (8003b04 <LCD_Init+0x254>)
 80039c0:	889b      	ldrh	r3, [r3, #4]
 80039c2:	021b      	lsls	r3, r3, #8
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	4b4f      	ldr	r3, [pc, #316]	; (8003b04 <LCD_Init+0x254>)
 80039c8:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 80039ca:	f7fe ff57 	bl	800287c <LCD_RD_DATA>
 80039ce:	4603      	mov	r3, r0
 80039d0:	461a      	mov	r2, r3
 80039d2:	4b4c      	ldr	r3, [pc, #304]	; (8003b04 <LCD_Init+0x254>)
 80039d4:	889b      	ldrh	r3, [r3, #4]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	b29a      	uxth	r2, r3
 80039da:	4b4a      	ldr	r3, [pc, #296]	; (8003b04 <LCD_Init+0x254>)
 80039dc:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 80039de:	4b49      	ldr	r3, [pc, #292]	; (8003b04 <LCD_Init+0x254>)
 80039e0:	889b      	ldrh	r3, [r3, #4]
 80039e2:	f646 0204 	movw	r2, #26628	; 0x6804
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d07e      	beq.n	8003ae8 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 80039ea:	20d4      	movs	r0, #212	; 0xd4
 80039ec:	f7fe fefe 	bl	80027ec <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 80039f0:	f7fe ff44 	bl	800287c <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 80039f4:	f7fe ff42 	bl	800287c <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 80039f8:	f7fe ff40 	bl	800287c <LCD_RD_DATA>
 80039fc:	4603      	mov	r3, r0
 80039fe:	461a      	mov	r2, r3
 8003a00:	4b40      	ldr	r3, [pc, #256]	; (8003b04 <LCD_Init+0x254>)
 8003a02:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 8003a04:	4b3f      	ldr	r3, [pc, #252]	; (8003b04 <LCD_Init+0x254>)
 8003a06:	889b      	ldrh	r3, [r3, #4]
 8003a08:	021b      	lsls	r3, r3, #8
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	4b3d      	ldr	r3, [pc, #244]	; (8003b04 <LCD_Init+0x254>)
 8003a0e:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 8003a10:	f7fe ff34 	bl	800287c <LCD_RD_DATA>
 8003a14:	4603      	mov	r3, r0
 8003a16:	461a      	mov	r2, r3
 8003a18:	4b3a      	ldr	r3, [pc, #232]	; (8003b04 <LCD_Init+0x254>)
 8003a1a:	889b      	ldrh	r3, [r3, #4]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	4b38      	ldr	r3, [pc, #224]	; (8003b04 <LCD_Init+0x254>)
 8003a22:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8003a24:	4b37      	ldr	r3, [pc, #220]	; (8003b04 <LCD_Init+0x254>)
 8003a26:	889b      	ldrh	r3, [r3, #4]
 8003a28:	f245 3210 	movw	r2, #21264	; 0x5310
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d05b      	beq.n	8003ae8 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 8003a30:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8003a34:	f7fe feda 	bl	80027ec <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8003a38:	f7fe ff20 	bl	800287c <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 8003a3c:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8003a40:	f7fe fed4 	bl	80027ec <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 8003a44:	f7fe ff1a 	bl	800287c <LCD_RD_DATA>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	4b2d      	ldr	r3, [pc, #180]	; (8003b04 <LCD_Init+0x254>)
 8003a4e:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8003a50:	4b2c      	ldr	r3, [pc, #176]	; (8003b04 <LCD_Init+0x254>)
 8003a52:	889b      	ldrh	r3, [r3, #4]
 8003a54:	021b      	lsls	r3, r3, #8
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	4b2a      	ldr	r3, [pc, #168]	; (8003b04 <LCD_Init+0x254>)
 8003a5a:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8003a5c:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8003a60:	f7fe fec4 	bl	80027ec <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 8003a64:	f7fe ff0a 	bl	800287c <LCD_RD_DATA>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	4b25      	ldr	r3, [pc, #148]	; (8003b04 <LCD_Init+0x254>)
 8003a6e:	889b      	ldrh	r3, [r3, #4]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	4b23      	ldr	r3, [pc, #140]	; (8003b04 <LCD_Init+0x254>)
 8003a76:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8003a78:	4b22      	ldr	r3, [pc, #136]	; (8003b04 <LCD_Init+0x254>)
 8003a7a:	889b      	ldrh	r3, [r3, #4]
 8003a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a80:	d103      	bne.n	8003a8a <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8003a82:	4b20      	ldr	r3, [pc, #128]	; (8003b04 <LCD_Init+0x254>)
 8003a84:	f245 5210 	movw	r2, #21776	; 0x5510
 8003a88:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8003a8a:	4b1e      	ldr	r3, [pc, #120]	; (8003b04 <LCD_Init+0x254>)
 8003a8c:	889b      	ldrh	r3, [r3, #4]
 8003a8e:	f245 5210 	movw	r2, #21776	; 0x5510
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d028      	beq.n	8003ae8 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 8003a96:	20a1      	movs	r0, #161	; 0xa1
 8003a98:	f7fe fea8 	bl	80027ec <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 8003a9c:	f7fe feee 	bl	800287c <LCD_RD_DATA>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	4b17      	ldr	r3, [pc, #92]	; (8003b04 <LCD_Init+0x254>)
 8003aa6:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8003aa8:	f7fe fee8 	bl	800287c <LCD_RD_DATA>
 8003aac:	4603      	mov	r3, r0
 8003aae:	461a      	mov	r2, r3
 8003ab0:	4b14      	ldr	r3, [pc, #80]	; (8003b04 <LCD_Init+0x254>)
 8003ab2:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 8003ab4:	4b13      	ldr	r3, [pc, #76]	; (8003b04 <LCD_Init+0x254>)
 8003ab6:	889b      	ldrh	r3, [r3, #4]
 8003ab8:	021b      	lsls	r3, r3, #8
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <LCD_Init+0x254>)
 8003abe:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8003ac0:	f7fe fedc 	bl	800287c <LCD_RD_DATA>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	4b0e      	ldr	r3, [pc, #56]	; (8003b04 <LCD_Init+0x254>)
 8003aca:	889b      	ldrh	r3, [r3, #4]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	4b0c      	ldr	r3, [pc, #48]	; (8003b04 <LCD_Init+0x254>)
 8003ad2:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 8003ad4:	4b0b      	ldr	r3, [pc, #44]	; (8003b04 <LCD_Init+0x254>)
 8003ad6:	889b      	ldrh	r3, [r3, #4]
 8003ad8:	f245 7261 	movw	r2, #22369	; 0x5761
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d103      	bne.n	8003ae8 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8003ae0:	4b08      	ldr	r3, [pc, #32]	; (8003b04 <LCD_Init+0x254>)
 8003ae2:	f641 1263 	movw	r2, #6499	; 0x1963
 8003ae6:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 8003ae8:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <LCD_Init+0x254>)
 8003aea:	889b      	ldrh	r3, [r3, #4]
 8003aec:	f249 3241 	movw	r2, #37697	; 0x9341
 8003af0:	4293      	cmp	r3, r2
 8003af2:	f040 811f 	bne.w	8003d34 <LCD_Init+0x484>
 8003af6:	e007      	b.n	8003b08 <LCD_Init+0x258>
 8003af8:	40021000 	.word	0x40021000
 8003afc:	40011000 	.word	0x40011000
 8003b00:	40010c00 	.word	0x40010c00
 8003b04:	200002f0 	.word	0x200002f0
			{
		LCD_WR_REG(0xCF);
 8003b08:	20cf      	movs	r0, #207	; 0xcf
 8003b0a:	f7fe fe6f 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003b0e:	2000      	movs	r0, #0
 8003b10:	f7fe fe90 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 8003b14:	20c1      	movs	r0, #193	; 0xc1
 8003b16:	f7fe fe8d 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 8003b1a:	2030      	movs	r0, #48	; 0x30
 8003b1c:	f7fe fe8a 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 8003b20:	20ed      	movs	r0, #237	; 0xed
 8003b22:	f7fe fe63 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 8003b26:	2064      	movs	r0, #100	; 0x64
 8003b28:	f7fe fe84 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8003b2c:	2003      	movs	r0, #3
 8003b2e:	f7fe fe81 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 8003b32:	2012      	movs	r0, #18
 8003b34:	f7fe fe7e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 8003b38:	2081      	movs	r0, #129	; 0x81
 8003b3a:	f7fe fe7b 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 8003b3e:	20e8      	movs	r0, #232	; 0xe8
 8003b40:	f7fe fe54 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 8003b44:	2085      	movs	r0, #133	; 0x85
 8003b46:	f7fe fe75 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8003b4a:	2010      	movs	r0, #16
 8003b4c:	f7fe fe72 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8003b50:	207a      	movs	r0, #122	; 0x7a
 8003b52:	f7fe fe6f 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 8003b56:	20cb      	movs	r0, #203	; 0xcb
 8003b58:	f7fe fe48 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 8003b5c:	2039      	movs	r0, #57	; 0x39
 8003b5e:	f7fe fe69 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8003b62:	202c      	movs	r0, #44	; 0x2c
 8003b64:	f7fe fe66 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b68:	2000      	movs	r0, #0
 8003b6a:	f7fe fe63 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8003b6e:	2034      	movs	r0, #52	; 0x34
 8003b70:	f7fe fe60 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8003b74:	2002      	movs	r0, #2
 8003b76:	f7fe fe5d 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 8003b7a:	20f7      	movs	r0, #247	; 0xf7
 8003b7c:	f7fe fe36 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8003b80:	2020      	movs	r0, #32
 8003b82:	f7fe fe57 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 8003b86:	20ea      	movs	r0, #234	; 0xea
 8003b88:	f7fe fe30 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	f7fe fe51 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b92:	2000      	movs	r0, #0
 8003b94:	f7fe fe4e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8003b98:	20c0      	movs	r0, #192	; 0xc0
 8003b9a:	f7fe fe27 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 8003b9e:	201b      	movs	r0, #27
 8003ba0:	f7fe fe48 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 8003ba4:	20c1      	movs	r0, #193	; 0xc1
 8003ba6:	f7fe fe21 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 8003baa:	2001      	movs	r0, #1
 8003bac:	f7fe fe42 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8003bb0:	20c5      	movs	r0, #197	; 0xc5
 8003bb2:	f7fe fe1b 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 8003bb6:	2030      	movs	r0, #48	; 0x30
 8003bb8:	f7fe fe3c 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 8003bbc:	2030      	movs	r0, #48	; 0x30
 8003bbe:	f7fe fe39 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 8003bc2:	20c7      	movs	r0, #199	; 0xc7
 8003bc4:	f7fe fe12 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8003bc8:	20b7      	movs	r0, #183	; 0xb7
 8003bca:	f7fe fe33 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 8003bce:	2036      	movs	r0, #54	; 0x36
 8003bd0:	f7fe fe0c 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 8003bd4:	2048      	movs	r0, #72	; 0x48
 8003bd6:	f7fe fe2d 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 8003bda:	203a      	movs	r0, #58	; 0x3a
 8003bdc:	f7fe fe06 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8003be0:	2055      	movs	r0, #85	; 0x55
 8003be2:	f7fe fe27 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 8003be6:	20b1      	movs	r0, #177	; 0xb1
 8003be8:	f7fe fe00 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003bec:	2000      	movs	r0, #0
 8003bee:	f7fe fe21 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 8003bf2:	201a      	movs	r0, #26
 8003bf4:	f7fe fe1e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 8003bf8:	20b6      	movs	r0, #182	; 0xb6
 8003bfa:	f7fe fdf7 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8003bfe:	200a      	movs	r0, #10
 8003c00:	f7fe fe18 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8003c04:	20a2      	movs	r0, #162	; 0xa2
 8003c06:	f7fe fe15 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 8003c0a:	20f2      	movs	r0, #242	; 0xf2
 8003c0c:	f7fe fdee 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003c10:	2000      	movs	r0, #0
 8003c12:	f7fe fe0f 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 8003c16:	2026      	movs	r0, #38	; 0x26
 8003c18:	f7fe fde8 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	f7fe fe09 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 8003c22:	20e0      	movs	r0, #224	; 0xe0
 8003c24:	f7fe fde2 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 8003c28:	200f      	movs	r0, #15
 8003c2a:	f7fe fe03 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8003c2e:	202a      	movs	r0, #42	; 0x2a
 8003c30:	f7fe fe00 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 8003c34:	2028      	movs	r0, #40	; 0x28
 8003c36:	f7fe fdfd 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8003c3a:	2008      	movs	r0, #8
 8003c3c:	f7fe fdfa 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 8003c40:	200e      	movs	r0, #14
 8003c42:	f7fe fdf7 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8003c46:	2008      	movs	r0, #8
 8003c48:	f7fe fdf4 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8003c4c:	2054      	movs	r0, #84	; 0x54
 8003c4e:	f7fe fdf1 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 8003c52:	20a9      	movs	r0, #169	; 0xa9
 8003c54:	f7fe fdee 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8003c58:	2043      	movs	r0, #67	; 0x43
 8003c5a:	f7fe fdeb 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 8003c5e:	200a      	movs	r0, #10
 8003c60:	f7fe fde8 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8003c64:	200f      	movs	r0, #15
 8003c66:	f7fe fde5 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c6a:	2000      	movs	r0, #0
 8003c6c:	f7fe fde2 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c70:	2000      	movs	r0, #0
 8003c72:	f7fe fddf 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c76:	2000      	movs	r0, #0
 8003c78:	f7fe fddc 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	f7fe fdd9 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 8003c82:	20e1      	movs	r0, #225	; 0xe1
 8003c84:	f7fe fdb2 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003c88:	2000      	movs	r0, #0
 8003c8a:	f7fe fdd3 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 8003c8e:	2015      	movs	r0, #21
 8003c90:	f7fe fdd0 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8003c94:	2017      	movs	r0, #23
 8003c96:	f7fe fdcd 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 8003c9a:	2007      	movs	r0, #7
 8003c9c:	f7fe fdca 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8003ca0:	2011      	movs	r0, #17
 8003ca2:	f7fe fdc7 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 8003ca6:	2006      	movs	r0, #6
 8003ca8:	f7fe fdc4 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 8003cac:	202b      	movs	r0, #43	; 0x2b
 8003cae:	f7fe fdc1 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003cb2:	2056      	movs	r0, #86	; 0x56
 8003cb4:	f7fe fdbe 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8003cb8:	203c      	movs	r0, #60	; 0x3c
 8003cba:	f7fe fdbb 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8003cbe:	2005      	movs	r0, #5
 8003cc0:	f7fe fdb8 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8003cc4:	2010      	movs	r0, #16
 8003cc6:	f7fe fdb5 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8003cca:	200f      	movs	r0, #15
 8003ccc:	f7fe fdb2 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8003cd0:	203f      	movs	r0, #63	; 0x3f
 8003cd2:	f7fe fdaf 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8003cd6:	203f      	movs	r0, #63	; 0x3f
 8003cd8:	f7fe fdac 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8003cdc:	200f      	movs	r0, #15
 8003cde:	f7fe fda9 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 8003ce2:	202b      	movs	r0, #43	; 0x2b
 8003ce4:	f7fe fd82 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003ce8:	2000      	movs	r0, #0
 8003cea:	f7fe fda3 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003cee:	2000      	movs	r0, #0
 8003cf0:	f7fe fda0 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8003cf4:	2001      	movs	r0, #1
 8003cf6:	f7fe fd9d 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 8003cfa:	203f      	movs	r0, #63	; 0x3f
 8003cfc:	f7fe fd9a 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 8003d00:	202a      	movs	r0, #42	; 0x2a
 8003d02:	f7fe fd73 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003d06:	2000      	movs	r0, #0
 8003d08:	f7fe fd94 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	f7fe fd91 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d12:	2000      	movs	r0, #0
 8003d14:	f7fe fd8e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 8003d18:	20ef      	movs	r0, #239	; 0xef
 8003d1a:	f7fe fd8b 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 8003d1e:	2011      	movs	r0, #17
 8003d20:	f7fe fd64 	bl	80027ec <LCD_WR_REG>
		HAL_Delay(120);
 8003d24:	2078      	movs	r0, #120	; 0x78
 8003d26:	f7fd fa21 	bl	800116c <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 8003d2a:	2029      	movs	r0, #41	; 0x29
 8003d2c:	f7fe fd5e 	bl	80027ec <LCD_WR_REG>
 8003d30:	f003 bcd8 	b.w	80076e4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 8003d34:	4b58      	ldr	r3, [pc, #352]	; (8003e98 <LCD_Init+0x5e8>)
 8003d36:	889b      	ldrh	r3, [r3, #4]
 8003d38:	f646 0204 	movw	r2, #26628	; 0x6804
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	f040 80ad 	bne.w	8003e9c <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 8003d42:	2011      	movs	r0, #17
 8003d44:	f7fe fd52 	bl	80027ec <LCD_WR_REG>
		HAL_Delay(20);
 8003d48:	2014      	movs	r0, #20
 8003d4a:	f7fd fa0f 	bl	800116c <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8003d4e:	20d0      	movs	r0, #208	; 0xd0
 8003d50:	f7fe fd4c 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 8003d54:	2007      	movs	r0, #7
 8003d56:	f7fe fd6d 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 8003d5a:	2042      	movs	r0, #66	; 0x42
 8003d5c:	f7fe fd6a 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8003d60:	201d      	movs	r0, #29
 8003d62:	f7fe fd67 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 8003d66:	20d1      	movs	r0, #209	; 0xd1
 8003d68:	f7fe fd40 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	f7fe fd61 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 8003d72:	201a      	movs	r0, #26
 8003d74:	f7fe fd5e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8003d78:	2009      	movs	r0, #9
 8003d7a:	f7fe fd5b 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8003d7e:	20d2      	movs	r0, #210	; 0xd2
 8003d80:	f7fe fd34 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8003d84:	2001      	movs	r0, #1
 8003d86:	f7fe fd55 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 8003d8a:	2022      	movs	r0, #34	; 0x22
 8003d8c:	f7fe fd52 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8003d90:	20c0      	movs	r0, #192	; 0xc0
 8003d92:	f7fe fd2b 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 8003d96:	2010      	movs	r0, #16
 8003d98:	f7fe fd4c 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 8003d9c:	203b      	movs	r0, #59	; 0x3b
 8003d9e:	f7fe fd49 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8003da2:	2000      	movs	r0, #0
 8003da4:	f7fe fd46 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8003da8:	2002      	movs	r0, #2
 8003daa:	f7fe fd43 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 8003dae:	2011      	movs	r0, #17
 8003db0:	f7fe fd40 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 8003db4:	20c5      	movs	r0, #197	; 0xc5
 8003db6:	f7fe fd19 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 8003dba:	2003      	movs	r0, #3
 8003dbc:	f7fe fd3a 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8003dc0:	20c8      	movs	r0, #200	; 0xc8
 8003dc2:	f7fe fd13 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	f7fe fd34 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8003dcc:	2025      	movs	r0, #37	; 0x25
 8003dce:	f7fe fd31 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 8003dd2:	2021      	movs	r0, #33	; 0x21
 8003dd4:	f7fe fd2e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8003dd8:	2005      	movs	r0, #5
 8003dda:	f7fe fd2b 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8003dde:	2000      	movs	r0, #0
 8003de0:	f7fe fd28 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 8003de4:	200a      	movs	r0, #10
 8003de6:	f7fe fd25 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 8003dea:	2065      	movs	r0, #101	; 0x65
 8003dec:	f7fe fd22 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8003df0:	2025      	movs	r0, #37	; 0x25
 8003df2:	f7fe fd1f 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 8003df6:	2077      	movs	r0, #119	; 0x77
 8003df8:	f7fe fd1c 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 8003dfc:	2050      	movs	r0, #80	; 0x50
 8003dfe:	f7fe fd19 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 8003e02:	200f      	movs	r0, #15
 8003e04:	f7fe fd16 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8003e08:	2000      	movs	r0, #0
 8003e0a:	f7fe fd13 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 8003e0e:	20f8      	movs	r0, #248	; 0xf8
 8003e10:	f7fe fcec 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8003e14:	2001      	movs	r0, #1
 8003e16:	f7fe fd0d 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 8003e1a:	20fe      	movs	r0, #254	; 0xfe
 8003e1c:	f7fe fce6 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8003e20:	2000      	movs	r0, #0
 8003e22:	f7fe fd07 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8003e26:	2002      	movs	r0, #2
 8003e28:	f7fe fd04 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 8003e2c:	2020      	movs	r0, #32
 8003e2e:	f7fe fcdd 	bl	80027ec <LCD_WR_REG>

		LCD_WR_REG(0X36);
 8003e32:	2036      	movs	r0, #54	; 0x36
 8003e34:	f7fe fcda 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8003e38:	2008      	movs	r0, #8
 8003e3a:	f7fe fcfb 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 8003e3e:	203a      	movs	r0, #58	; 0x3a
 8003e40:	f7fe fcd4 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 8003e44:	2055      	movs	r0, #85	; 0x55
 8003e46:	f7fe fcf5 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 8003e4a:	202b      	movs	r0, #43	; 0x2b
 8003e4c:	f7fe fcce 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8003e50:	2000      	movs	r0, #0
 8003e52:	f7fe fcef 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8003e56:	2000      	movs	r0, #0
 8003e58:	f7fe fcec 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	f7fe fce9 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 8003e62:	203f      	movs	r0, #63	; 0x3f
 8003e64:	f7fe fce6 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8003e68:	202a      	movs	r0, #42	; 0x2a
 8003e6a:	f7fe fcbf 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8003e6e:	2000      	movs	r0, #0
 8003e70:	f7fe fce0 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8003e74:	2000      	movs	r0, #0
 8003e76:	f7fe fcdd 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8003e7a:	2001      	movs	r0, #1
 8003e7c:	f7fe fcda 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8003e80:	20df      	movs	r0, #223	; 0xdf
 8003e82:	f7fe fcd7 	bl	8002834 <LCD_WR_DATAX>
		HAL_Delay(120);
 8003e86:	2078      	movs	r0, #120	; 0x78
 8003e88:	f7fd f970 	bl	800116c <HAL_Delay>
		LCD_WR_REG(0X29);
 8003e8c:	2029      	movs	r0, #41	; 0x29
 8003e8e:	f7fe fcad 	bl	80027ec <LCD_WR_REG>
 8003e92:	f003 bc27 	b.w	80076e4 <LCD_Init+0x3e34>
 8003e96:	bf00      	nop
 8003e98:	200002f0 	.word	0x200002f0
	} else if (lcddev.id == 0x5310) {
 8003e9c:	4b03      	ldr	r3, [pc, #12]	; (8003eac <LCD_Init+0x5fc>)
 8003e9e:	889b      	ldrh	r3, [r3, #4]
 8003ea0:	f245 3210 	movw	r2, #21264	; 0x5310
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	f040 877c 	bne.w	8004da2 <LCD_Init+0x14f2>
 8003eaa:	e001      	b.n	8003eb0 <LCD_Init+0x600>
 8003eac:	200002f0 	.word	0x200002f0
		LCD_WR_REG(0xED);
 8003eb0:	20ed      	movs	r0, #237	; 0xed
 8003eb2:	f7fe fc9b 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8003eb6:	2001      	movs	r0, #1
 8003eb8:	f7fe fcbc 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 8003ebc:	20fe      	movs	r0, #254	; 0xfe
 8003ebe:	f7fe fcb9 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 8003ec2:	20ee      	movs	r0, #238	; 0xee
 8003ec4:	f7fe fc92 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8003ec8:	20de      	movs	r0, #222	; 0xde
 8003eca:	f7fe fcb3 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8003ece:	2021      	movs	r0, #33	; 0x21
 8003ed0:	f7fe fcb0 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 8003ed4:	20f1      	movs	r0, #241	; 0xf1
 8003ed6:	f7fe fc89 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8003eda:	2001      	movs	r0, #1
 8003edc:	f7fe fcaa 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 8003ee0:	20df      	movs	r0, #223	; 0xdf
 8003ee2:	f7fe fc83 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 8003ee6:	2010      	movs	r0, #16
 8003ee8:	f7fe fca4 	bl	8002834 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 8003eec:	20c4      	movs	r0, #196	; 0xc4
 8003eee:	f7fe fc7d 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 8003ef2:	208f      	movs	r0, #143	; 0x8f
 8003ef4:	f7fe fc9e 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8003ef8:	20c6      	movs	r0, #198	; 0xc6
 8003efa:	f7fe fc77 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003efe:	2000      	movs	r0, #0
 8003f00:	f7fe fc98 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8003f04:	20e2      	movs	r0, #226	; 0xe2
 8003f06:	f7fe fc95 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8003f0a:	20e2      	movs	r0, #226	; 0xe2
 8003f0c:	f7fe fc92 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8003f10:	20e2      	movs	r0, #226	; 0xe2
 8003f12:	f7fe fc8f 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 8003f16:	20bf      	movs	r0, #191	; 0xbf
 8003f18:	f7fe fc68 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003f1c:	20aa      	movs	r0, #170	; 0xaa
 8003f1e:	f7fe fc89 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 8003f22:	20b0      	movs	r0, #176	; 0xb0
 8003f24:	f7fe fc62 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 8003f28:	200d      	movs	r0, #13
 8003f2a:	f7fe fc83 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f2e:	2000      	movs	r0, #0
 8003f30:	f7fe fc80 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 8003f34:	200d      	movs	r0, #13
 8003f36:	f7fe fc7d 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f3a:	2000      	movs	r0, #0
 8003f3c:	f7fe fc7a 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8003f40:	2011      	movs	r0, #17
 8003f42:	f7fe fc77 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f46:	2000      	movs	r0, #0
 8003f48:	f7fe fc74 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 8003f4c:	2019      	movs	r0, #25
 8003f4e:	f7fe fc71 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f52:	2000      	movs	r0, #0
 8003f54:	f7fe fc6e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8003f58:	2021      	movs	r0, #33	; 0x21
 8003f5a:	f7fe fc6b 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f5e:	2000      	movs	r0, #0
 8003f60:	f7fe fc68 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 8003f64:	202d      	movs	r0, #45	; 0x2d
 8003f66:	f7fe fc65 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	f7fe fc62 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8003f70:	203d      	movs	r0, #61	; 0x3d
 8003f72:	f7fe fc5f 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f76:	2000      	movs	r0, #0
 8003f78:	f7fe fc5c 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8003f7c:	205d      	movs	r0, #93	; 0x5d
 8003f7e:	f7fe fc59 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f82:	2000      	movs	r0, #0
 8003f84:	f7fe fc56 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8003f88:	205d      	movs	r0, #93	; 0x5d
 8003f8a:	f7fe fc53 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f8e:	2000      	movs	r0, #0
 8003f90:	f7fe fc50 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 8003f94:	20b1      	movs	r0, #177	; 0xb1
 8003f96:	f7fe fc29 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 8003f9a:	2080      	movs	r0, #128	; 0x80
 8003f9c:	f7fe fc4a 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	f7fe fc47 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8003fa6:	208b      	movs	r0, #139	; 0x8b
 8003fa8:	f7fe fc44 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003fac:	2000      	movs	r0, #0
 8003fae:	f7fe fc41 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8003fb2:	2096      	movs	r0, #150	; 0x96
 8003fb4:	f7fe fc3e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003fb8:	2000      	movs	r0, #0
 8003fba:	f7fe fc3b 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 8003fbe:	20b2      	movs	r0, #178	; 0xb2
 8003fc0:	f7fe fc14 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	f7fe fc35 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003fca:	2000      	movs	r0, #0
 8003fcc:	f7fe fc32 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8003fd0:	2002      	movs	r0, #2
 8003fd2:	f7fe fc2f 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	f7fe fc2c 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8003fdc:	2003      	movs	r0, #3
 8003fde:	f7fe fc29 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003fe2:	2000      	movs	r0, #0
 8003fe4:	f7fe fc26 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 8003fe8:	20b3      	movs	r0, #179	; 0xb3
 8003fea:	f7fe fbff 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003fee:	2000      	movs	r0, #0
 8003ff0:	f7fe fc20 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ff4:	2000      	movs	r0, #0
 8003ff6:	f7fe fc1d 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ffa:	2000      	movs	r0, #0
 8003ffc:	f7fe fc1a 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004000:	2000      	movs	r0, #0
 8004002:	f7fe fc17 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004006:	2000      	movs	r0, #0
 8004008:	f7fe fc14 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800400c:	2000      	movs	r0, #0
 800400e:	f7fe fc11 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004012:	2000      	movs	r0, #0
 8004014:	f7fe fc0e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004018:	2000      	movs	r0, #0
 800401a:	f7fe fc0b 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800401e:	2000      	movs	r0, #0
 8004020:	f7fe fc08 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004024:	2000      	movs	r0, #0
 8004026:	f7fe fc05 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800402a:	2000      	movs	r0, #0
 800402c:	f7fe fc02 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004030:	2000      	movs	r0, #0
 8004032:	f7fe fbff 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004036:	2000      	movs	r0, #0
 8004038:	f7fe fbfc 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800403c:	2000      	movs	r0, #0
 800403e:	f7fe fbf9 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004042:	2000      	movs	r0, #0
 8004044:	f7fe fbf6 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004048:	2000      	movs	r0, #0
 800404a:	f7fe fbf3 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800404e:	2000      	movs	r0, #0
 8004050:	f7fe fbf0 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004054:	2000      	movs	r0, #0
 8004056:	f7fe fbed 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800405a:	2000      	movs	r0, #0
 800405c:	f7fe fbea 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004060:	2000      	movs	r0, #0
 8004062:	f7fe fbe7 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004066:	2000      	movs	r0, #0
 8004068:	f7fe fbe4 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800406c:	2000      	movs	r0, #0
 800406e:	f7fe fbe1 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004072:	2000      	movs	r0, #0
 8004074:	f7fe fbde 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004078:	2000      	movs	r0, #0
 800407a:	f7fe fbdb 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 800407e:	20b4      	movs	r0, #180	; 0xb4
 8004080:	f7fe fbb4 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 8004084:	208b      	movs	r0, #139	; 0x8b
 8004086:	f7fe fbd5 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800408a:	2000      	movs	r0, #0
 800408c:	f7fe fbd2 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8004090:	2096      	movs	r0, #150	; 0x96
 8004092:	f7fe fbcf 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004096:	2000      	movs	r0, #0
 8004098:	f7fe fbcc 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 800409c:	20a1      	movs	r0, #161	; 0xa1
 800409e:	f7fe fbc9 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80040a2:	2000      	movs	r0, #0
 80040a4:	f7fe fbc6 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 80040a8:	20b5      	movs	r0, #181	; 0xb5
 80040aa:	f7fe fb9f 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 80040ae:	2002      	movs	r0, #2
 80040b0:	f7fe fbc0 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80040b4:	2000      	movs	r0, #0
 80040b6:	f7fe fbbd 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80040ba:	2003      	movs	r0, #3
 80040bc:	f7fe fbba 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80040c0:	2000      	movs	r0, #0
 80040c2:	f7fe fbb7 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 80040c6:	2004      	movs	r0, #4
 80040c8:	f7fe fbb4 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80040cc:	2000      	movs	r0, #0
 80040ce:	f7fe fbb1 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 80040d2:	20b6      	movs	r0, #182	; 0xb6
 80040d4:	f7fe fb8a 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80040d8:	2000      	movs	r0, #0
 80040da:	f7fe fbab 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80040de:	2000      	movs	r0, #0
 80040e0:	f7fe fba8 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 80040e4:	20b7      	movs	r0, #183	; 0xb7
 80040e6:	f7fe fb81 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80040ea:	2000      	movs	r0, #0
 80040ec:	f7fe fba2 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80040f0:	2000      	movs	r0, #0
 80040f2:	f7fe fb9f 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80040f6:	203f      	movs	r0, #63	; 0x3f
 80040f8:	f7fe fb9c 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80040fc:	2000      	movs	r0, #0
 80040fe:	f7fe fb99 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 8004102:	205e      	movs	r0, #94	; 0x5e
 8004104:	f7fe fb96 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004108:	2000      	movs	r0, #0
 800410a:	f7fe fb93 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 800410e:	2064      	movs	r0, #100	; 0x64
 8004110:	f7fe fb90 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004114:	2000      	movs	r0, #0
 8004116:	f7fe fb8d 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 800411a:	208c      	movs	r0, #140	; 0x8c
 800411c:	f7fe fb8a 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004120:	2000      	movs	r0, #0
 8004122:	f7fe fb87 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 8004126:	20ac      	movs	r0, #172	; 0xac
 8004128:	f7fe fb84 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800412c:	2000      	movs	r0, #0
 800412e:	f7fe fb81 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8004132:	20dc      	movs	r0, #220	; 0xdc
 8004134:	f7fe fb7e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004138:	2000      	movs	r0, #0
 800413a:	f7fe fb7b 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 800413e:	2070      	movs	r0, #112	; 0x70
 8004140:	f7fe fb78 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004144:	2000      	movs	r0, #0
 8004146:	f7fe fb75 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 800414a:	2090      	movs	r0, #144	; 0x90
 800414c:	f7fe fb72 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004150:	2000      	movs	r0, #0
 8004152:	f7fe fb6f 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 8004156:	20eb      	movs	r0, #235	; 0xeb
 8004158:	f7fe fb6c 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800415c:	2000      	movs	r0, #0
 800415e:	f7fe fb69 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8004162:	20dc      	movs	r0, #220	; 0xdc
 8004164:	f7fe fb66 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004168:	2000      	movs	r0, #0
 800416a:	f7fe fb63 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 800416e:	20b8      	movs	r0, #184	; 0xb8
 8004170:	f7fe fb3c 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004174:	2000      	movs	r0, #0
 8004176:	f7fe fb5d 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800417a:	2000      	movs	r0, #0
 800417c:	f7fe fb5a 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004180:	2000      	movs	r0, #0
 8004182:	f7fe fb57 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004186:	2000      	movs	r0, #0
 8004188:	f7fe fb54 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800418c:	2000      	movs	r0, #0
 800418e:	f7fe fb51 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004192:	2000      	movs	r0, #0
 8004194:	f7fe fb4e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004198:	2000      	movs	r0, #0
 800419a:	f7fe fb4b 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800419e:	2000      	movs	r0, #0
 80041a0:	f7fe fb48 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 80041a4:	20ba      	movs	r0, #186	; 0xba
 80041a6:	f7fe fb21 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 80041aa:	2024      	movs	r0, #36	; 0x24
 80041ac:	f7fe fb42 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80041b0:	2000      	movs	r0, #0
 80041b2:	f7fe fb3f 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80041b6:	2000      	movs	r0, #0
 80041b8:	f7fe fb3c 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80041bc:	2000      	movs	r0, #0
 80041be:	f7fe fb39 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 80041c2:	20c1      	movs	r0, #193	; 0xc1
 80041c4:	f7fe fb12 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 80041c8:	2020      	movs	r0, #32
 80041ca:	f7fe fb33 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80041ce:	2000      	movs	r0, #0
 80041d0:	f7fe fb30 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 80041d4:	2054      	movs	r0, #84	; 0x54
 80041d6:	f7fe fb2d 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80041da:	2000      	movs	r0, #0
 80041dc:	f7fe fb2a 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 80041e0:	20ff      	movs	r0, #255	; 0xff
 80041e2:	f7fe fb27 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80041e6:	2000      	movs	r0, #0
 80041e8:	f7fe fb24 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 80041ec:	20c2      	movs	r0, #194	; 0xc2
 80041ee:	f7fe fafd 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80041f2:	200a      	movs	r0, #10
 80041f4:	f7fe fb1e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80041f8:	2000      	movs	r0, #0
 80041fa:	f7fe fb1b 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 80041fe:	2004      	movs	r0, #4
 8004200:	f7fe fb18 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004204:	2000      	movs	r0, #0
 8004206:	f7fe fb15 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 800420a:	20c3      	movs	r0, #195	; 0xc3
 800420c:	f7fe faee 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8004210:	203c      	movs	r0, #60	; 0x3c
 8004212:	f7fe fb0f 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004216:	2000      	movs	r0, #0
 8004218:	f7fe fb0c 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 800421c:	203a      	movs	r0, #58	; 0x3a
 800421e:	f7fe fb09 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004222:	2000      	movs	r0, #0
 8004224:	f7fe fb06 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8004228:	2039      	movs	r0, #57	; 0x39
 800422a:	f7fe fb03 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800422e:	2000      	movs	r0, #0
 8004230:	f7fe fb00 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 8004234:	2037      	movs	r0, #55	; 0x37
 8004236:	f7fe fafd 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800423a:	2000      	movs	r0, #0
 800423c:	f7fe fafa 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8004240:	203c      	movs	r0, #60	; 0x3c
 8004242:	f7fe faf7 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004246:	2000      	movs	r0, #0
 8004248:	f7fe faf4 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 800424c:	2036      	movs	r0, #54	; 0x36
 800424e:	f7fe faf1 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004252:	2000      	movs	r0, #0
 8004254:	f7fe faee 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8004258:	2032      	movs	r0, #50	; 0x32
 800425a:	f7fe faeb 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800425e:	2000      	movs	r0, #0
 8004260:	f7fe fae8 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8004264:	202f      	movs	r0, #47	; 0x2f
 8004266:	f7fe fae5 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800426a:	2000      	movs	r0, #0
 800426c:	f7fe fae2 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8004270:	202c      	movs	r0, #44	; 0x2c
 8004272:	f7fe fadf 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004276:	2000      	movs	r0, #0
 8004278:	f7fe fadc 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 800427c:	2029      	movs	r0, #41	; 0x29
 800427e:	f7fe fad9 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004282:	2000      	movs	r0, #0
 8004284:	f7fe fad6 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8004288:	2026      	movs	r0, #38	; 0x26
 800428a:	f7fe fad3 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800428e:	2000      	movs	r0, #0
 8004290:	f7fe fad0 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8004294:	2024      	movs	r0, #36	; 0x24
 8004296:	f7fe facd 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800429a:	2000      	movs	r0, #0
 800429c:	f7fe faca 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80042a0:	2024      	movs	r0, #36	; 0x24
 80042a2:	f7fe fac7 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80042a6:	2000      	movs	r0, #0
 80042a8:	f7fe fac4 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80042ac:	2023      	movs	r0, #35	; 0x23
 80042ae:	f7fe fac1 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80042b2:	2000      	movs	r0, #0
 80042b4:	f7fe fabe 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80042b8:	203c      	movs	r0, #60	; 0x3c
 80042ba:	f7fe fabb 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80042be:	2000      	movs	r0, #0
 80042c0:	f7fe fab8 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80042c4:	2036      	movs	r0, #54	; 0x36
 80042c6:	f7fe fab5 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80042ca:	2000      	movs	r0, #0
 80042cc:	f7fe fab2 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 80042d0:	2032      	movs	r0, #50	; 0x32
 80042d2:	f7fe faaf 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80042d6:	2000      	movs	r0, #0
 80042d8:	f7fe faac 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 80042dc:	202f      	movs	r0, #47	; 0x2f
 80042de:	f7fe faa9 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80042e2:	2000      	movs	r0, #0
 80042e4:	f7fe faa6 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80042e8:	202c      	movs	r0, #44	; 0x2c
 80042ea:	f7fe faa3 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80042ee:	2000      	movs	r0, #0
 80042f0:	f7fe faa0 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80042f4:	2029      	movs	r0, #41	; 0x29
 80042f6:	f7fe fa9d 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80042fa:	2000      	movs	r0, #0
 80042fc:	f7fe fa9a 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8004300:	2026      	movs	r0, #38	; 0x26
 8004302:	f7fe fa97 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004306:	2000      	movs	r0, #0
 8004308:	f7fe fa94 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 800430c:	2024      	movs	r0, #36	; 0x24
 800430e:	f7fe fa91 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004312:	2000      	movs	r0, #0
 8004314:	f7fe fa8e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8004318:	2024      	movs	r0, #36	; 0x24
 800431a:	f7fe fa8b 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800431e:	2000      	movs	r0, #0
 8004320:	f7fe fa88 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8004324:	2023      	movs	r0, #35	; 0x23
 8004326:	f7fe fa85 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800432a:	2000      	movs	r0, #0
 800432c:	f7fe fa82 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8004330:	20c4      	movs	r0, #196	; 0xc4
 8004332:	f7fe fa5b 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 8004336:	2062      	movs	r0, #98	; 0x62
 8004338:	f7fe fa7c 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800433c:	2000      	movs	r0, #0
 800433e:	f7fe fa79 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8004342:	2005      	movs	r0, #5
 8004344:	f7fe fa76 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004348:	2000      	movs	r0, #0
 800434a:	f7fe fa73 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 800434e:	2084      	movs	r0, #132	; 0x84
 8004350:	f7fe fa70 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004354:	2000      	movs	r0, #0
 8004356:	f7fe fa6d 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 800435a:	20f0      	movs	r0, #240	; 0xf0
 800435c:	f7fe fa6a 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004360:	2000      	movs	r0, #0
 8004362:	f7fe fa67 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8004366:	2018      	movs	r0, #24
 8004368:	f7fe fa64 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800436c:	2000      	movs	r0, #0
 800436e:	f7fe fa61 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 8004372:	20a4      	movs	r0, #164	; 0xa4
 8004374:	f7fe fa5e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004378:	2000      	movs	r0, #0
 800437a:	f7fe fa5b 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 800437e:	2018      	movs	r0, #24
 8004380:	f7fe fa58 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004384:	2000      	movs	r0, #0
 8004386:	f7fe fa55 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 800438a:	2050      	movs	r0, #80	; 0x50
 800438c:	f7fe fa52 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004390:	2000      	movs	r0, #0
 8004392:	f7fe fa4f 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 8004396:	200c      	movs	r0, #12
 8004398:	f7fe fa4c 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800439c:	2000      	movs	r0, #0
 800439e:	f7fe fa49 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 80043a2:	2017      	movs	r0, #23
 80043a4:	f7fe fa46 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80043a8:	2000      	movs	r0, #0
 80043aa:	f7fe fa43 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 80043ae:	2095      	movs	r0, #149	; 0x95
 80043b0:	f7fe fa40 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80043b4:	2000      	movs	r0, #0
 80043b6:	f7fe fa3d 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80043ba:	20f3      	movs	r0, #243	; 0xf3
 80043bc:	f7fe fa3a 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80043c0:	2000      	movs	r0, #0
 80043c2:	f7fe fa37 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 80043c6:	20e6      	movs	r0, #230	; 0xe6
 80043c8:	f7fe fa34 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80043cc:	2000      	movs	r0, #0
 80043ce:	f7fe fa31 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 80043d2:	20c5      	movs	r0, #197	; 0xc5
 80043d4:	f7fe fa0a 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 80043d8:	2032      	movs	r0, #50	; 0x32
 80043da:	f7fe fa2b 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80043de:	2000      	movs	r0, #0
 80043e0:	f7fe fa28 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80043e4:	2044      	movs	r0, #68	; 0x44
 80043e6:	f7fe fa25 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80043ea:	2000      	movs	r0, #0
 80043ec:	f7fe fa22 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 80043f0:	2065      	movs	r0, #101	; 0x65
 80043f2:	f7fe fa1f 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80043f6:	2000      	movs	r0, #0
 80043f8:	f7fe fa1c 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80043fc:	2076      	movs	r0, #118	; 0x76
 80043fe:	f7fe fa19 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004402:	2000      	movs	r0, #0
 8004404:	f7fe fa16 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8004408:	2088      	movs	r0, #136	; 0x88
 800440a:	f7fe fa13 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800440e:	2000      	movs	r0, #0
 8004410:	f7fe fa10 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8004414:	20c6      	movs	r0, #198	; 0xc6
 8004416:	f7fe f9e9 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 800441a:	2020      	movs	r0, #32
 800441c:	f7fe fa0a 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004420:	2000      	movs	r0, #0
 8004422:	f7fe fa07 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8004426:	2017      	movs	r0, #23
 8004428:	f7fe fa04 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800442c:	2000      	movs	r0, #0
 800442e:	f7fe fa01 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8004432:	2001      	movs	r0, #1
 8004434:	f7fe f9fe 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004438:	2000      	movs	r0, #0
 800443a:	f7fe f9fb 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 800443e:	20c7      	movs	r0, #199	; 0xc7
 8004440:	f7fe f9d4 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004444:	2000      	movs	r0, #0
 8004446:	f7fe f9f5 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800444a:	2000      	movs	r0, #0
 800444c:	f7fe f9f2 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004450:	2000      	movs	r0, #0
 8004452:	f7fe f9ef 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004456:	2000      	movs	r0, #0
 8004458:	f7fe f9ec 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 800445c:	20c8      	movs	r0, #200	; 0xc8
 800445e:	f7fe f9c5 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004462:	2000      	movs	r0, #0
 8004464:	f7fe f9e6 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004468:	2000      	movs	r0, #0
 800446a:	f7fe f9e3 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800446e:	2000      	movs	r0, #0
 8004470:	f7fe f9e0 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004474:	2000      	movs	r0, #0
 8004476:	f7fe f9dd 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 800447a:	20c9      	movs	r0, #201	; 0xc9
 800447c:	f7fe f9b6 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004480:	2000      	movs	r0, #0
 8004482:	f7fe f9d7 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004486:	2000      	movs	r0, #0
 8004488:	f7fe f9d4 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800448c:	2000      	movs	r0, #0
 800448e:	f7fe f9d1 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004492:	2000      	movs	r0, #0
 8004494:	f7fe f9ce 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004498:	2000      	movs	r0, #0
 800449a:	f7fe f9cb 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800449e:	2000      	movs	r0, #0
 80044a0:	f7fe f9c8 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80044a4:	2000      	movs	r0, #0
 80044a6:	f7fe f9c5 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80044aa:	2000      	movs	r0, #0
 80044ac:	f7fe f9c2 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80044b0:	2000      	movs	r0, #0
 80044b2:	f7fe f9bf 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80044b6:	2000      	movs	r0, #0
 80044b8:	f7fe f9bc 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80044bc:	2000      	movs	r0, #0
 80044be:	f7fe f9b9 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80044c2:	2000      	movs	r0, #0
 80044c4:	f7fe f9b6 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80044c8:	2000      	movs	r0, #0
 80044ca:	f7fe f9b3 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80044ce:	2000      	movs	r0, #0
 80044d0:	f7fe f9b0 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80044d4:	2000      	movs	r0, #0
 80044d6:	f7fe f9ad 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80044da:	2000      	movs	r0, #0
 80044dc:	f7fe f9aa 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 80044e0:	20e0      	movs	r0, #224	; 0xe0
 80044e2:	f7fe f983 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 80044e6:	2016      	movs	r0, #22
 80044e8:	f7fe f9a4 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80044ec:	2000      	movs	r0, #0
 80044ee:	f7fe f9a1 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 80044f2:	201c      	movs	r0, #28
 80044f4:	f7fe f99e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80044f8:	2000      	movs	r0, #0
 80044fa:	f7fe f99b 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 80044fe:	2021      	movs	r0, #33	; 0x21
 8004500:	f7fe f998 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004504:	2000      	movs	r0, #0
 8004506:	f7fe f995 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 800450a:	2036      	movs	r0, #54	; 0x36
 800450c:	f7fe f992 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004510:	2000      	movs	r0, #0
 8004512:	f7fe f98f 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8004516:	2046      	movs	r0, #70	; 0x46
 8004518:	f7fe f98c 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800451c:	2000      	movs	r0, #0
 800451e:	f7fe f989 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8004522:	2052      	movs	r0, #82	; 0x52
 8004524:	f7fe f986 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004528:	2000      	movs	r0, #0
 800452a:	f7fe f983 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 800452e:	2064      	movs	r0, #100	; 0x64
 8004530:	f7fe f980 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004534:	2000      	movs	r0, #0
 8004536:	f7fe f97d 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 800453a:	207a      	movs	r0, #122	; 0x7a
 800453c:	f7fe f97a 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004540:	2000      	movs	r0, #0
 8004542:	f7fe f977 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8004546:	208b      	movs	r0, #139	; 0x8b
 8004548:	f7fe f974 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800454c:	2000      	movs	r0, #0
 800454e:	f7fe f971 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8004552:	2099      	movs	r0, #153	; 0x99
 8004554:	f7fe f96e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004558:	2000      	movs	r0, #0
 800455a:	f7fe f96b 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 800455e:	20a8      	movs	r0, #168	; 0xa8
 8004560:	f7fe f968 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004564:	2000      	movs	r0, #0
 8004566:	f7fe f965 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 800456a:	20b9      	movs	r0, #185	; 0xb9
 800456c:	f7fe f962 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004570:	2000      	movs	r0, #0
 8004572:	f7fe f95f 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8004576:	20c4      	movs	r0, #196	; 0xc4
 8004578:	f7fe f95c 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800457c:	2000      	movs	r0, #0
 800457e:	f7fe f959 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8004582:	20ca      	movs	r0, #202	; 0xca
 8004584:	f7fe f956 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004588:	2000      	movs	r0, #0
 800458a:	f7fe f953 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 800458e:	20d2      	movs	r0, #210	; 0xd2
 8004590:	f7fe f950 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004594:	2000      	movs	r0, #0
 8004596:	f7fe f94d 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 800459a:	20d9      	movs	r0, #217	; 0xd9
 800459c:	f7fe f94a 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045a0:	2000      	movs	r0, #0
 80045a2:	f7fe f947 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 80045a6:	20e0      	movs	r0, #224	; 0xe0
 80045a8:	f7fe f944 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045ac:	2000      	movs	r0, #0
 80045ae:	f7fe f941 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80045b2:	20f3      	movs	r0, #243	; 0xf3
 80045b4:	f7fe f93e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045b8:	2000      	movs	r0, #0
 80045ba:	f7fe f93b 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 80045be:	20e1      	movs	r0, #225	; 0xe1
 80045c0:	f7fe f914 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 80045c4:	2016      	movs	r0, #22
 80045c6:	f7fe f935 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045ca:	2000      	movs	r0, #0
 80045cc:	f7fe f932 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 80045d0:	201c      	movs	r0, #28
 80045d2:	f7fe f92f 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045d6:	2000      	movs	r0, #0
 80045d8:	f7fe f92c 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 80045dc:	2022      	movs	r0, #34	; 0x22
 80045de:	f7fe f929 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045e2:	2000      	movs	r0, #0
 80045e4:	f7fe f926 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80045e8:	2036      	movs	r0, #54	; 0x36
 80045ea:	f7fe f923 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045ee:	2000      	movs	r0, #0
 80045f0:	f7fe f920 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 80045f4:	2045      	movs	r0, #69	; 0x45
 80045f6:	f7fe f91d 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045fa:	2000      	movs	r0, #0
 80045fc:	f7fe f91a 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8004600:	2052      	movs	r0, #82	; 0x52
 8004602:	f7fe f917 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004606:	2000      	movs	r0, #0
 8004608:	f7fe f914 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 800460c:	2064      	movs	r0, #100	; 0x64
 800460e:	f7fe f911 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004612:	2000      	movs	r0, #0
 8004614:	f7fe f90e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8004618:	207a      	movs	r0, #122	; 0x7a
 800461a:	f7fe f90b 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800461e:	2000      	movs	r0, #0
 8004620:	f7fe f908 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8004624:	208b      	movs	r0, #139	; 0x8b
 8004626:	f7fe f905 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800462a:	2000      	movs	r0, #0
 800462c:	f7fe f902 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8004630:	2099      	movs	r0, #153	; 0x99
 8004632:	f7fe f8ff 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004636:	2000      	movs	r0, #0
 8004638:	f7fe f8fc 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 800463c:	20a8      	movs	r0, #168	; 0xa8
 800463e:	f7fe f8f9 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004642:	2000      	movs	r0, #0
 8004644:	f7fe f8f6 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8004648:	20b9      	movs	r0, #185	; 0xb9
 800464a:	f7fe f8f3 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800464e:	2000      	movs	r0, #0
 8004650:	f7fe f8f0 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8004654:	20c4      	movs	r0, #196	; 0xc4
 8004656:	f7fe f8ed 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800465a:	2000      	movs	r0, #0
 800465c:	f7fe f8ea 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8004660:	20ca      	movs	r0, #202	; 0xca
 8004662:	f7fe f8e7 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004666:	2000      	movs	r0, #0
 8004668:	f7fe f8e4 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 800466c:	20d2      	movs	r0, #210	; 0xd2
 800466e:	f7fe f8e1 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004672:	2000      	movs	r0, #0
 8004674:	f7fe f8de 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8004678:	20d8      	movs	r0, #216	; 0xd8
 800467a:	f7fe f8db 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800467e:	2000      	movs	r0, #0
 8004680:	f7fe f8d8 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8004684:	20e0      	movs	r0, #224	; 0xe0
 8004686:	f7fe f8d5 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800468a:	2000      	movs	r0, #0
 800468c:	f7fe f8d2 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8004690:	20f3      	movs	r0, #243	; 0xf3
 8004692:	f7fe f8cf 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004696:	2000      	movs	r0, #0
 8004698:	f7fe f8cc 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 800469c:	20e2      	movs	r0, #226	; 0xe2
 800469e:	f7fe f8a5 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 80046a2:	2005      	movs	r0, #5
 80046a4:	f7fe f8c6 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046a8:	2000      	movs	r0, #0
 80046aa:	f7fe f8c3 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 80046ae:	200b      	movs	r0, #11
 80046b0:	f7fe f8c0 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046b4:	2000      	movs	r0, #0
 80046b6:	f7fe f8bd 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 80046ba:	201b      	movs	r0, #27
 80046bc:	f7fe f8ba 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046c0:	2000      	movs	r0, #0
 80046c2:	f7fe f8b7 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80046c6:	2034      	movs	r0, #52	; 0x34
 80046c8:	f7fe f8b4 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046cc:	2000      	movs	r0, #0
 80046ce:	f7fe f8b1 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80046d2:	2044      	movs	r0, #68	; 0x44
 80046d4:	f7fe f8ae 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046d8:	2000      	movs	r0, #0
 80046da:	f7fe f8ab 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 80046de:	204f      	movs	r0, #79	; 0x4f
 80046e0:	f7fe f8a8 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046e4:	2000      	movs	r0, #0
 80046e6:	f7fe f8a5 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 80046ea:	2061      	movs	r0, #97	; 0x61
 80046ec:	f7fe f8a2 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046f0:	2000      	movs	r0, #0
 80046f2:	f7fe f89f 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 80046f6:	2079      	movs	r0, #121	; 0x79
 80046f8:	f7fe f89c 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046fc:	2000      	movs	r0, #0
 80046fe:	f7fe f899 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8004702:	2088      	movs	r0, #136	; 0x88
 8004704:	f7fe f896 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004708:	2000      	movs	r0, #0
 800470a:	f7fe f893 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 800470e:	2097      	movs	r0, #151	; 0x97
 8004710:	f7fe f890 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004714:	2000      	movs	r0, #0
 8004716:	f7fe f88d 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 800471a:	20a6      	movs	r0, #166	; 0xa6
 800471c:	f7fe f88a 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004720:	2000      	movs	r0, #0
 8004722:	f7fe f887 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8004726:	20b7      	movs	r0, #183	; 0xb7
 8004728:	f7fe f884 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800472c:	2000      	movs	r0, #0
 800472e:	f7fe f881 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8004732:	20c2      	movs	r0, #194	; 0xc2
 8004734:	f7fe f87e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004738:	2000      	movs	r0, #0
 800473a:	f7fe f87b 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 800473e:	20c7      	movs	r0, #199	; 0xc7
 8004740:	f7fe f878 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004744:	2000      	movs	r0, #0
 8004746:	f7fe f875 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 800474a:	20d1      	movs	r0, #209	; 0xd1
 800474c:	f7fe f872 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004750:	2000      	movs	r0, #0
 8004752:	f7fe f86f 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 8004756:	20d6      	movs	r0, #214	; 0xd6
 8004758:	f7fe f86c 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800475c:	2000      	movs	r0, #0
 800475e:	f7fe f869 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8004762:	20dd      	movs	r0, #221	; 0xdd
 8004764:	f7fe f866 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004768:	2000      	movs	r0, #0
 800476a:	f7fe f863 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 800476e:	20f3      	movs	r0, #243	; 0xf3
 8004770:	f7fe f860 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004774:	2000      	movs	r0, #0
 8004776:	f7fe f85d 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 800477a:	20e3      	movs	r0, #227	; 0xe3
 800477c:	f7fe f836 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8004780:	2005      	movs	r0, #5
 8004782:	f7fe f857 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004786:	2000      	movs	r0, #0
 8004788:	f7fe f854 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 800478c:	200a      	movs	r0, #10
 800478e:	f7fe f851 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004792:	2000      	movs	r0, #0
 8004794:	f7fe f84e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8004798:	201c      	movs	r0, #28
 800479a:	f7fe f84b 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800479e:	2000      	movs	r0, #0
 80047a0:	f7fe f848 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 80047a4:	2033      	movs	r0, #51	; 0x33
 80047a6:	f7fe f845 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047aa:	2000      	movs	r0, #0
 80047ac:	f7fe f842 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80047b0:	2044      	movs	r0, #68	; 0x44
 80047b2:	f7fe f83f 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047b6:	2000      	movs	r0, #0
 80047b8:	f7fe f83c 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80047bc:	2050      	movs	r0, #80	; 0x50
 80047be:	f7fe f839 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047c2:	2000      	movs	r0, #0
 80047c4:	f7fe f836 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 80047c8:	2062      	movs	r0, #98	; 0x62
 80047ca:	f7fe f833 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047ce:	2000      	movs	r0, #0
 80047d0:	f7fe f830 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 80047d4:	2078      	movs	r0, #120	; 0x78
 80047d6:	f7fe f82d 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047da:	2000      	movs	r0, #0
 80047dc:	f7fe f82a 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80047e0:	2088      	movs	r0, #136	; 0x88
 80047e2:	f7fe f827 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047e6:	2000      	movs	r0, #0
 80047e8:	f7fe f824 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 80047ec:	2097      	movs	r0, #151	; 0x97
 80047ee:	f7fe f821 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047f2:	2000      	movs	r0, #0
 80047f4:	f7fe f81e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 80047f8:	20a6      	movs	r0, #166	; 0xa6
 80047fa:	f7fe f81b 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047fe:	2000      	movs	r0, #0
 8004800:	f7fe f818 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8004804:	20b7      	movs	r0, #183	; 0xb7
 8004806:	f7fe f815 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800480a:	2000      	movs	r0, #0
 800480c:	f7fe f812 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8004810:	20c2      	movs	r0, #194	; 0xc2
 8004812:	f7fe f80f 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004816:	2000      	movs	r0, #0
 8004818:	f7fe f80c 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 800481c:	20c7      	movs	r0, #199	; 0xc7
 800481e:	f7fe f809 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004822:	2000      	movs	r0, #0
 8004824:	f7fe f806 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8004828:	20d1      	movs	r0, #209	; 0xd1
 800482a:	f7fe f803 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800482e:	2000      	movs	r0, #0
 8004830:	f7fe f800 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8004834:	20d5      	movs	r0, #213	; 0xd5
 8004836:	f7fd fffd 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800483a:	2000      	movs	r0, #0
 800483c:	f7fd fffa 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8004840:	20dd      	movs	r0, #221	; 0xdd
 8004842:	f7fd fff7 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004846:	2000      	movs	r0, #0
 8004848:	f7fd fff4 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 800484c:	20f3      	movs	r0, #243	; 0xf3
 800484e:	f7fd fff1 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004852:	2000      	movs	r0, #0
 8004854:	f7fd ffee 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8004858:	20e4      	movs	r0, #228	; 0xe4
 800485a:	f7fd ffc7 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800485e:	2001      	movs	r0, #1
 8004860:	f7fd ffe8 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004864:	2000      	movs	r0, #0
 8004866:	f7fd ffe5 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 800486a:	2001      	movs	r0, #1
 800486c:	f7fd ffe2 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004870:	2000      	movs	r0, #0
 8004872:	f7fd ffdf 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8004876:	2002      	movs	r0, #2
 8004878:	f7fd ffdc 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800487c:	2000      	movs	r0, #0
 800487e:	f7fd ffd9 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8004882:	202a      	movs	r0, #42	; 0x2a
 8004884:	f7fd ffd6 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004888:	2000      	movs	r0, #0
 800488a:	f7fd ffd3 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 800488e:	203c      	movs	r0, #60	; 0x3c
 8004890:	f7fd ffd0 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004894:	2000      	movs	r0, #0
 8004896:	f7fd ffcd 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 800489a:	204b      	movs	r0, #75	; 0x4b
 800489c:	f7fd ffca 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048a0:	2000      	movs	r0, #0
 80048a2:	f7fd ffc7 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80048a6:	205d      	movs	r0, #93	; 0x5d
 80048a8:	f7fd ffc4 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048ac:	2000      	movs	r0, #0
 80048ae:	f7fd ffc1 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 80048b2:	2074      	movs	r0, #116	; 0x74
 80048b4:	f7fd ffbe 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048b8:	2000      	movs	r0, #0
 80048ba:	f7fd ffbb 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 80048be:	2084      	movs	r0, #132	; 0x84
 80048c0:	f7fd ffb8 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048c4:	2000      	movs	r0, #0
 80048c6:	f7fd ffb5 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 80048ca:	2093      	movs	r0, #147	; 0x93
 80048cc:	f7fd ffb2 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048d0:	2000      	movs	r0, #0
 80048d2:	f7fd ffaf 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80048d6:	20a2      	movs	r0, #162	; 0xa2
 80048d8:	f7fd ffac 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048dc:	2000      	movs	r0, #0
 80048de:	f7fd ffa9 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 80048e2:	20b3      	movs	r0, #179	; 0xb3
 80048e4:	f7fd ffa6 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048e8:	2000      	movs	r0, #0
 80048ea:	f7fd ffa3 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 80048ee:	20be      	movs	r0, #190	; 0xbe
 80048f0:	f7fd ffa0 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048f4:	2000      	movs	r0, #0
 80048f6:	f7fd ff9d 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80048fa:	20c4      	movs	r0, #196	; 0xc4
 80048fc:	f7fd ff9a 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004900:	2000      	movs	r0, #0
 8004902:	f7fd ff97 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8004906:	20cd      	movs	r0, #205	; 0xcd
 8004908:	f7fd ff94 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800490c:	2000      	movs	r0, #0
 800490e:	f7fd ff91 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8004912:	20d3      	movs	r0, #211	; 0xd3
 8004914:	f7fd ff8e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004918:	2000      	movs	r0, #0
 800491a:	f7fd ff8b 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 800491e:	20dd      	movs	r0, #221	; 0xdd
 8004920:	f7fd ff88 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004924:	2000      	movs	r0, #0
 8004926:	f7fd ff85 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 800492a:	20f3      	movs	r0, #243	; 0xf3
 800492c:	f7fd ff82 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004930:	2000      	movs	r0, #0
 8004932:	f7fd ff7f 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8004936:	20e5      	movs	r0, #229	; 0xe5
 8004938:	f7fd ff58 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800493c:	2000      	movs	r0, #0
 800493e:	f7fd ff79 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004942:	2000      	movs	r0, #0
 8004944:	f7fd ff76 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004948:	2000      	movs	r0, #0
 800494a:	f7fd ff73 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800494e:	2000      	movs	r0, #0
 8004950:	f7fd ff70 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8004954:	2002      	movs	r0, #2
 8004956:	f7fd ff6d 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800495a:	2000      	movs	r0, #0
 800495c:	f7fd ff6a 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8004960:	2029      	movs	r0, #41	; 0x29
 8004962:	f7fd ff67 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004966:	2000      	movs	r0, #0
 8004968:	f7fd ff64 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 800496c:	203c      	movs	r0, #60	; 0x3c
 800496e:	f7fd ff61 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004972:	2000      	movs	r0, #0
 8004974:	f7fd ff5e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8004978:	204b      	movs	r0, #75	; 0x4b
 800497a:	f7fd ff5b 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800497e:	2000      	movs	r0, #0
 8004980:	f7fd ff58 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8004984:	205d      	movs	r0, #93	; 0x5d
 8004986:	f7fd ff55 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800498a:	2000      	movs	r0, #0
 800498c:	f7fd ff52 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8004990:	2074      	movs	r0, #116	; 0x74
 8004992:	f7fd ff4f 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004996:	2000      	movs	r0, #0
 8004998:	f7fd ff4c 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 800499c:	2084      	movs	r0, #132	; 0x84
 800499e:	f7fd ff49 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049a2:	2000      	movs	r0, #0
 80049a4:	f7fd ff46 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 80049a8:	2093      	movs	r0, #147	; 0x93
 80049aa:	f7fd ff43 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049ae:	2000      	movs	r0, #0
 80049b0:	f7fd ff40 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80049b4:	20a2      	movs	r0, #162	; 0xa2
 80049b6:	f7fd ff3d 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049ba:	2000      	movs	r0, #0
 80049bc:	f7fd ff3a 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 80049c0:	20b3      	movs	r0, #179	; 0xb3
 80049c2:	f7fd ff37 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049c6:	2000      	movs	r0, #0
 80049c8:	f7fd ff34 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 80049cc:	20be      	movs	r0, #190	; 0xbe
 80049ce:	f7fd ff31 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049d2:	2000      	movs	r0, #0
 80049d4:	f7fd ff2e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80049d8:	20c4      	movs	r0, #196	; 0xc4
 80049da:	f7fd ff2b 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049de:	2000      	movs	r0, #0
 80049e0:	f7fd ff28 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 80049e4:	20cd      	movs	r0, #205	; 0xcd
 80049e6:	f7fd ff25 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049ea:	2000      	movs	r0, #0
 80049ec:	f7fd ff22 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 80049f0:	20d3      	movs	r0, #211	; 0xd3
 80049f2:	f7fd ff1f 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049f6:	2000      	movs	r0, #0
 80049f8:	f7fd ff1c 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80049fc:	20dc      	movs	r0, #220	; 0xdc
 80049fe:	f7fd ff19 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a02:	2000      	movs	r0, #0
 8004a04:	f7fd ff16 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8004a08:	20f3      	movs	r0, #243	; 0xf3
 8004a0a:	f7fd ff13 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a0e:	2000      	movs	r0, #0
 8004a10:	f7fd ff10 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 8004a14:	20e6      	movs	r0, #230	; 0xe6
 8004a16:	f7fd fee9 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 8004a1a:	2011      	movs	r0, #17
 8004a1c:	f7fd ff0a 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a20:	2000      	movs	r0, #0
 8004a22:	f7fd ff07 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8004a26:	2034      	movs	r0, #52	; 0x34
 8004a28:	f7fd ff04 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	f7fd ff01 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8004a32:	2056      	movs	r0, #86	; 0x56
 8004a34:	f7fd fefe 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a38:	2000      	movs	r0, #0
 8004a3a:	f7fd fefb 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8004a3e:	2076      	movs	r0, #118	; 0x76
 8004a40:	f7fd fef8 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a44:	2000      	movs	r0, #0
 8004a46:	f7fd fef5 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8004a4a:	2077      	movs	r0, #119	; 0x77
 8004a4c:	f7fd fef2 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a50:	2000      	movs	r0, #0
 8004a52:	f7fd feef 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8004a56:	2066      	movs	r0, #102	; 0x66
 8004a58:	f7fd feec 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	f7fd fee9 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8004a62:	2088      	movs	r0, #136	; 0x88
 8004a64:	f7fd fee6 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a68:	2000      	movs	r0, #0
 8004a6a:	f7fd fee3 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8004a6e:	2099      	movs	r0, #153	; 0x99
 8004a70:	f7fd fee0 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a74:	2000      	movs	r0, #0
 8004a76:	f7fd fedd 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8004a7a:	20bb      	movs	r0, #187	; 0xbb
 8004a7c:	f7fd feda 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a80:	2000      	movs	r0, #0
 8004a82:	f7fd fed7 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8004a86:	2099      	movs	r0, #153	; 0x99
 8004a88:	f7fd fed4 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	f7fd fed1 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8004a92:	2066      	movs	r0, #102	; 0x66
 8004a94:	f7fd fece 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a98:	2000      	movs	r0, #0
 8004a9a:	f7fd fecb 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8004a9e:	2055      	movs	r0, #85	; 0x55
 8004aa0:	f7fd fec8 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	f7fd fec5 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8004aaa:	2055      	movs	r0, #85	; 0x55
 8004aac:	f7fd fec2 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	f7fd febf 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8004ab6:	2045      	movs	r0, #69	; 0x45
 8004ab8:	f7fd febc 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004abc:	2000      	movs	r0, #0
 8004abe:	f7fd feb9 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8004ac2:	2043      	movs	r0, #67	; 0x43
 8004ac4:	f7fd feb6 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ac8:	2000      	movs	r0, #0
 8004aca:	f7fd feb3 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8004ace:	2044      	movs	r0, #68	; 0x44
 8004ad0:	f7fd feb0 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ad4:	2000      	movs	r0, #0
 8004ad6:	f7fd fead 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 8004ada:	20e7      	movs	r0, #231	; 0xe7
 8004adc:	f7fd fe86 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8004ae0:	2032      	movs	r0, #50	; 0x32
 8004ae2:	f7fd fea7 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ae6:	2000      	movs	r0, #0
 8004ae8:	f7fd fea4 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8004aec:	2055      	movs	r0, #85	; 0x55
 8004aee:	f7fd fea1 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004af2:	2000      	movs	r0, #0
 8004af4:	f7fd fe9e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8004af8:	2076      	movs	r0, #118	; 0x76
 8004afa:	f7fd fe9b 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004afe:	2000      	movs	r0, #0
 8004b00:	f7fd fe98 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8004b04:	2066      	movs	r0, #102	; 0x66
 8004b06:	f7fd fe95 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b0a:	2000      	movs	r0, #0
 8004b0c:	f7fd fe92 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8004b10:	2067      	movs	r0, #103	; 0x67
 8004b12:	f7fd fe8f 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b16:	2000      	movs	r0, #0
 8004b18:	f7fd fe8c 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8004b1c:	2067      	movs	r0, #103	; 0x67
 8004b1e:	f7fd fe89 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b22:	2000      	movs	r0, #0
 8004b24:	f7fd fe86 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8004b28:	2087      	movs	r0, #135	; 0x87
 8004b2a:	f7fd fe83 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b2e:	2000      	movs	r0, #0
 8004b30:	f7fd fe80 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8004b34:	2099      	movs	r0, #153	; 0x99
 8004b36:	f7fd fe7d 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	f7fd fe7a 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8004b40:	20bb      	movs	r0, #187	; 0xbb
 8004b42:	f7fd fe77 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b46:	2000      	movs	r0, #0
 8004b48:	f7fd fe74 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8004b4c:	2099      	movs	r0, #153	; 0x99
 8004b4e:	f7fd fe71 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b52:	2000      	movs	r0, #0
 8004b54:	f7fd fe6e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8004b58:	2077      	movs	r0, #119	; 0x77
 8004b5a:	f7fd fe6b 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b5e:	2000      	movs	r0, #0
 8004b60:	f7fd fe68 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8004b64:	2044      	movs	r0, #68	; 0x44
 8004b66:	f7fd fe65 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	f7fd fe62 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8004b70:	2056      	movs	r0, #86	; 0x56
 8004b72:	f7fd fe5f 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b76:	2000      	movs	r0, #0
 8004b78:	f7fd fe5c 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8004b7c:	2023      	movs	r0, #35	; 0x23
 8004b7e:	f7fd fe59 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b82:	2000      	movs	r0, #0
 8004b84:	f7fd fe56 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8004b88:	2033      	movs	r0, #51	; 0x33
 8004b8a:	f7fd fe53 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b8e:	2000      	movs	r0, #0
 8004b90:	f7fd fe50 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8004b94:	2045      	movs	r0, #69	; 0x45
 8004b96:	f7fd fe4d 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	f7fd fe4a 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8004ba0:	20e8      	movs	r0, #232	; 0xe8
 8004ba2:	f7fd fe23 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	f7fd fe44 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bac:	2000      	movs	r0, #0
 8004bae:	f7fd fe41 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8004bb2:	2099      	movs	r0, #153	; 0x99
 8004bb4:	f7fd fe3e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bb8:	2000      	movs	r0, #0
 8004bba:	f7fd fe3b 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8004bbe:	2087      	movs	r0, #135	; 0x87
 8004bc0:	f7fd fe38 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bc4:	2000      	movs	r0, #0
 8004bc6:	f7fd fe35 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8004bca:	2088      	movs	r0, #136	; 0x88
 8004bcc:	f7fd fe32 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	f7fd fe2f 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8004bd6:	2077      	movs	r0, #119	; 0x77
 8004bd8:	f7fd fe2c 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bdc:	2000      	movs	r0, #0
 8004bde:	f7fd fe29 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8004be2:	2066      	movs	r0, #102	; 0x66
 8004be4:	f7fd fe26 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004be8:	2000      	movs	r0, #0
 8004bea:	f7fd fe23 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8004bee:	2088      	movs	r0, #136	; 0x88
 8004bf0:	f7fd fe20 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	f7fd fe1d 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 8004bfa:	20aa      	movs	r0, #170	; 0xaa
 8004bfc:	f7fd fe1a 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c00:	2000      	movs	r0, #0
 8004c02:	f7fd fe17 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8004c06:	20bb      	movs	r0, #187	; 0xbb
 8004c08:	f7fd fe14 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	f7fd fe11 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8004c12:	2099      	movs	r0, #153	; 0x99
 8004c14:	f7fd fe0e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c18:	2000      	movs	r0, #0
 8004c1a:	f7fd fe0b 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8004c1e:	2066      	movs	r0, #102	; 0x66
 8004c20:	f7fd fe08 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c24:	2000      	movs	r0, #0
 8004c26:	f7fd fe05 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8004c2a:	2055      	movs	r0, #85	; 0x55
 8004c2c:	f7fd fe02 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c30:	2000      	movs	r0, #0
 8004c32:	f7fd fdff 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8004c36:	2055      	movs	r0, #85	; 0x55
 8004c38:	f7fd fdfc 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	f7fd fdf9 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8004c42:	2044      	movs	r0, #68	; 0x44
 8004c44:	f7fd fdf6 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c48:	2000      	movs	r0, #0
 8004c4a:	f7fd fdf3 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8004c4e:	2044      	movs	r0, #68	; 0x44
 8004c50:	f7fd fdf0 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c54:	2000      	movs	r0, #0
 8004c56:	f7fd fded 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8004c5a:	2055      	movs	r0, #85	; 0x55
 8004c5c:	f7fd fdea 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c60:	2000      	movs	r0, #0
 8004c62:	f7fd fde7 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 8004c66:	20e9      	movs	r0, #233	; 0xe9
 8004c68:	f7fd fdc0 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8004c6c:	20aa      	movs	r0, #170	; 0xaa
 8004c6e:	f7fd fde1 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c72:	2000      	movs	r0, #0
 8004c74:	f7fd fdde 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c78:	2000      	movs	r0, #0
 8004c7a:	f7fd fddb 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c7e:	2000      	movs	r0, #0
 8004c80:	f7fd fdd8 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 8004c84:	2000      	movs	r0, #0
 8004c86:	f7fd fdb1 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8004c8a:	20aa      	movs	r0, #170	; 0xaa
 8004c8c:	f7fd fdd2 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8004c90:	20cf      	movs	r0, #207	; 0xcf
 8004c92:	f7fd fdab 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004c96:	2000      	movs	r0, #0
 8004c98:	f7fd fdcc 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	f7fd fdc9 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	f7fd fdc6 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ca8:	2000      	movs	r0, #0
 8004caa:	f7fd fdc3 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cae:	2000      	movs	r0, #0
 8004cb0:	f7fd fdc0 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	f7fd fdbd 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cba:	2000      	movs	r0, #0
 8004cbc:	f7fd fdba 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	f7fd fdb7 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	f7fd fdb4 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ccc:	2000      	movs	r0, #0
 8004cce:	f7fd fdb1 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cd2:	2000      	movs	r0, #0
 8004cd4:	f7fd fdae 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cd8:	2000      	movs	r0, #0
 8004cda:	f7fd fdab 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cde:	2000      	movs	r0, #0
 8004ce0:	f7fd fda8 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	f7fd fda5 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cea:	2000      	movs	r0, #0
 8004cec:	f7fd fda2 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cf0:	2000      	movs	r0, #0
 8004cf2:	f7fd fd9f 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cf6:	2000      	movs	r0, #0
 8004cf8:	f7fd fd9c 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 8004cfc:	20f0      	movs	r0, #240	; 0xf0
 8004cfe:	f7fd fd75 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004d02:	2000      	movs	r0, #0
 8004d04:	f7fd fd96 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8004d08:	2050      	movs	r0, #80	; 0x50
 8004d0a:	f7fd fd93 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d0e:	2000      	movs	r0, #0
 8004d10:	f7fd fd90 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d14:	2000      	movs	r0, #0
 8004d16:	f7fd fd8d 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	f7fd fd8a 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 8004d20:	20f3      	movs	r0, #243	; 0xf3
 8004d22:	f7fd fd63 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004d26:	2000      	movs	r0, #0
 8004d28:	f7fd fd84 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 8004d2c:	20f9      	movs	r0, #249	; 0xf9
 8004d2e:	f7fd fd5d 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 8004d32:	2006      	movs	r0, #6
 8004d34:	f7fd fd7e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8004d38:	2010      	movs	r0, #16
 8004d3a:	f7fd fd7b 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8004d3e:	2029      	movs	r0, #41	; 0x29
 8004d40:	f7fd fd78 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d44:	2000      	movs	r0, #0
 8004d46:	f7fd fd75 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 8004d4a:	203a      	movs	r0, #58	; 0x3a
 8004d4c:	f7fd fd4e 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8004d50:	2055      	movs	r0, #85	; 0x55
 8004d52:	f7fd fd6f 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 8004d56:	2011      	movs	r0, #17
 8004d58:	f7fd fd48 	bl	80027ec <LCD_WR_REG>
		HAL_Delay(100);
 8004d5c:	2064      	movs	r0, #100	; 0x64
 8004d5e:	f7fc fa05 	bl	800116c <HAL_Delay>
		LCD_WR_REG(0x29);
 8004d62:	2029      	movs	r0, #41	; 0x29
 8004d64:	f7fd fd42 	bl	80027ec <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8004d68:	2035      	movs	r0, #53	; 0x35
 8004d6a:	f7fd fd3f 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004d6e:	2000      	movs	r0, #0
 8004d70:	f7fd fd60 	bl	8002834 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 8004d74:	2051      	movs	r0, #81	; 0x51
 8004d76:	f7fd fd39 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 8004d7a:	20ff      	movs	r0, #255	; 0xff
 8004d7c:	f7fd fd5a 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8004d80:	2053      	movs	r0, #83	; 0x53
 8004d82:	f7fd fd33 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 8004d86:	202c      	movs	r0, #44	; 0x2c
 8004d88:	f7fd fd54 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 8004d8c:	2055      	movs	r0, #85	; 0x55
 8004d8e:	f7fd fd2d 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 8004d92:	2082      	movs	r0, #130	; 0x82
 8004d94:	f7fd fd4e 	bl	8002834 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8004d98:	202c      	movs	r0, #44	; 0x2c
 8004d9a:	f7fd fd27 	bl	80027ec <LCD_WR_REG>
 8004d9e:	f002 bca1 	b.w	80076e4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 8004da2:	4b04      	ldr	r3, [pc, #16]	; (8004db4 <LCD_Init+0x1504>)
 8004da4:	889b      	ldrh	r3, [r3, #4]
 8004da6:	f245 5210 	movw	r2, #21776	; 0x5510
 8004daa:	4293      	cmp	r3, r2
 8004dac:	f040 8782 	bne.w	8005cb4 <LCD_Init+0x2404>
 8004db0:	e002      	b.n	8004db8 <LCD_Init+0x1508>
 8004db2:	bf00      	nop
 8004db4:	200002f0 	.word	0x200002f0
		LCD_WriteReg(0xF000, 0x55);
 8004db8:	2155      	movs	r1, #85	; 0x55
 8004dba:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8004dbe:	f7fd fda1 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8004dc2:	21aa      	movs	r1, #170	; 0xaa
 8004dc4:	f24f 0001 	movw	r0, #61441	; 0xf001
 8004dc8:	f7fd fd9c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8004dcc:	2152      	movs	r1, #82	; 0x52
 8004dce:	f24f 0002 	movw	r0, #61442	; 0xf002
 8004dd2:	f7fd fd97 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8004dd6:	2108      	movs	r1, #8
 8004dd8:	f24f 0003 	movw	r0, #61443	; 0xf003
 8004ddc:	f7fd fd92 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 8004de0:	2101      	movs	r1, #1
 8004de2:	f24f 0004 	movw	r0, #61444	; 0xf004
 8004de6:	f7fd fd8d 	bl	8002904 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 8004dea:	210d      	movs	r1, #13
 8004dec:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8004df0:	f7fd fd88 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 8004df4:	210d      	movs	r1, #13
 8004df6:	f24b 0001 	movw	r0, #45057	; 0xb001
 8004dfa:	f7fd fd83 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 8004dfe:	210d      	movs	r1, #13
 8004e00:	f24b 0002 	movw	r0, #45058	; 0xb002
 8004e04:	f7fd fd7e 	bl	8002904 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 8004e08:	2134      	movs	r1, #52	; 0x34
 8004e0a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8004e0e:	f7fd fd79 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 8004e12:	2134      	movs	r1, #52	; 0x34
 8004e14:	f24b 6001 	movw	r0, #46593	; 0xb601
 8004e18:	f7fd fd74 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 8004e1c:	2134      	movs	r1, #52	; 0x34
 8004e1e:	f24b 6002 	movw	r0, #46594	; 0xb602
 8004e22:	f7fd fd6f 	bl	8002904 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 8004e26:	210d      	movs	r1, #13
 8004e28:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8004e2c:	f7fd fd6a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 8004e30:	210d      	movs	r1, #13
 8004e32:	f24b 1001 	movw	r0, #45313	; 0xb101
 8004e36:	f7fd fd65 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 8004e3a:	210d      	movs	r1, #13
 8004e3c:	f24b 1002 	movw	r0, #45314	; 0xb102
 8004e40:	f7fd fd60 	bl	8002904 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 8004e44:	2134      	movs	r1, #52	; 0x34
 8004e46:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8004e4a:	f7fd fd5b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 8004e4e:	2134      	movs	r1, #52	; 0x34
 8004e50:	f24b 7001 	movw	r0, #46849	; 0xb701
 8004e54:	f7fd fd56 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8004e58:	2134      	movs	r1, #52	; 0x34
 8004e5a:	f24b 7002 	movw	r0, #46850	; 0xb702
 8004e5e:	f7fd fd51 	bl	8002904 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 8004e62:	2100      	movs	r1, #0
 8004e64:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8004e68:	f7fd fd4c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	f24b 2001 	movw	r0, #45569	; 0xb201
 8004e72:	f7fd fd47 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 8004e76:	2100      	movs	r1, #0
 8004e78:	f24b 2002 	movw	r0, #45570	; 0xb202
 8004e7c:	f7fd fd42 	bl	8002904 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8004e80:	2124      	movs	r1, #36	; 0x24
 8004e82:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8004e86:	f7fd fd3d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 8004e8a:	2124      	movs	r1, #36	; 0x24
 8004e8c:	f64b 0001 	movw	r0, #47105	; 0xb801
 8004e90:	f7fd fd38 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 8004e94:	2124      	movs	r1, #36	; 0x24
 8004e96:	f64b 0002 	movw	r0, #47106	; 0xb802
 8004e9a:	f7fd fd33 	bl	8002904 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8004ea4:	f7fd fd2e 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8004ea8:	210f      	movs	r1, #15
 8004eaa:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8004eae:	f7fd fd29 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 8004eb2:	210f      	movs	r1, #15
 8004eb4:	f24b 3001 	movw	r0, #45825	; 0xb301
 8004eb8:	f7fd fd24 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 8004ebc:	210f      	movs	r1, #15
 8004ebe:	f24b 3002 	movw	r0, #45826	; 0xb302
 8004ec2:	f7fd fd1f 	bl	8002904 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 8004ec6:	2134      	movs	r1, #52	; 0x34
 8004ec8:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8004ecc:	f7fd fd1a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8004ed0:	2134      	movs	r1, #52	; 0x34
 8004ed2:	f64b 1001 	movw	r0, #47361	; 0xb901
 8004ed6:	f7fd fd15 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 8004eda:	2134      	movs	r1, #52	; 0x34
 8004edc:	f64b 1002 	movw	r0, #47362	; 0xb902
 8004ee0:	f7fd fd10 	bl	8002904 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 8004ee4:	2108      	movs	r1, #8
 8004ee6:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8004eea:	f7fd fd0b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 8004eee:	2108      	movs	r1, #8
 8004ef0:	f24b 5001 	movw	r0, #46337	; 0xb501
 8004ef4:	f7fd fd06 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 8004ef8:	2108      	movs	r1, #8
 8004efa:	f24b 5002 	movw	r0, #46338	; 0xb502
 8004efe:	f7fd fd01 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 8004f02:	2103      	movs	r1, #3
 8004f04:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8004f08:	f7fd fcfc 	bl	8002904 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 8004f0c:	2124      	movs	r1, #36	; 0x24
 8004f0e:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8004f12:	f7fd fcf7 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 8004f16:	2124      	movs	r1, #36	; 0x24
 8004f18:	f64b 2001 	movw	r0, #47617	; 0xba01
 8004f1c:	f7fd fcf2 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 8004f20:	2124      	movs	r1, #36	; 0x24
 8004f22:	f64b 2002 	movw	r0, #47618	; 0xba02
 8004f26:	f7fd fced 	bl	8002904 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8004f30:	f7fd fce8 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 8004f34:	2178      	movs	r1, #120	; 0x78
 8004f36:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8004f3a:	f7fd fce3 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8004f3e:	2100      	movs	r1, #0
 8004f40:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004f44:	f7fd fcde 	bl	8002904 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8004f48:	2100      	movs	r1, #0
 8004f4a:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8004f4e:	f7fd fcd9 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 8004f52:	2178      	movs	r1, #120	; 0x78
 8004f54:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8004f58:	f7fd fcd4 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8004f62:	f7fd fccf 	bl	8002904 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 8004f66:	2100      	movs	r1, #0
 8004f68:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8004f6c:	f7fd fcca 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8004f70:	2164      	movs	r1, #100	; 0x64
 8004f72:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8004f76:	f7fd fcc5 	bl	8002904 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8004f80:	f7fd fcc0 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 8004f84:	2133      	movs	r1, #51	; 0x33
 8004f86:	f24d 1001 	movw	r0, #53505	; 0xd101
 8004f8a:	f7fd fcbb 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 8004f8e:	2100      	movs	r1, #0
 8004f90:	f24d 1002 	movw	r0, #53506	; 0xd102
 8004f94:	f7fd fcb6 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8004f98:	2134      	movs	r1, #52	; 0x34
 8004f9a:	f24d 1003 	movw	r0, #53507	; 0xd103
 8004f9e:	f7fd fcb1 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	f24d 1004 	movw	r0, #53508	; 0xd104
 8004fa8:	f7fd fcac 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 8004fac:	213a      	movs	r1, #58	; 0x3a
 8004fae:	f24d 1005 	movw	r0, #53509	; 0xd105
 8004fb2:	f7fd fca7 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	f24d 1006 	movw	r0, #53510	; 0xd106
 8004fbc:	f7fd fca2 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8004fc0:	214a      	movs	r1, #74	; 0x4a
 8004fc2:	f24d 1007 	movw	r0, #53511	; 0xd107
 8004fc6:	f7fd fc9d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 8004fca:	2100      	movs	r1, #0
 8004fcc:	f24d 1008 	movw	r0, #53512	; 0xd108
 8004fd0:	f7fd fc98 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 8004fd4:	215c      	movs	r1, #92	; 0x5c
 8004fd6:	f24d 1009 	movw	r0, #53513	; 0xd109
 8004fda:	f7fd fc93 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 8004fde:	2100      	movs	r1, #0
 8004fe0:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8004fe4:	f7fd fc8e 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 8004fe8:	2181      	movs	r1, #129	; 0x81
 8004fea:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8004fee:	f7fd fc89 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8004ff8:	f7fd fc84 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 8004ffc:	21a6      	movs	r1, #166	; 0xa6
 8004ffe:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8005002:	f7fd fc7f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 8005006:	2100      	movs	r1, #0
 8005008:	f24d 100e 	movw	r0, #53518	; 0xd10e
 800500c:	f7fd fc7a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 8005010:	21e5      	movs	r1, #229	; 0xe5
 8005012:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8005016:	f7fd fc75 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 800501a:	2101      	movs	r1, #1
 800501c:	f24d 1010 	movw	r0, #53520	; 0xd110
 8005020:	f7fd fc70 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 8005024:	2113      	movs	r1, #19
 8005026:	f24d 1011 	movw	r0, #53521	; 0xd111
 800502a:	f7fd fc6b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 800502e:	2101      	movs	r1, #1
 8005030:	f24d 1012 	movw	r0, #53522	; 0xd112
 8005034:	f7fd fc66 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8005038:	2154      	movs	r1, #84	; 0x54
 800503a:	f24d 1013 	movw	r0, #53523	; 0xd113
 800503e:	f7fd fc61 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 8005042:	2101      	movs	r1, #1
 8005044:	f24d 1014 	movw	r0, #53524	; 0xd114
 8005048:	f7fd fc5c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 800504c:	2182      	movs	r1, #130	; 0x82
 800504e:	f24d 1015 	movw	r0, #53525	; 0xd115
 8005052:	f7fd fc57 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 8005056:	2101      	movs	r1, #1
 8005058:	f24d 1016 	movw	r0, #53526	; 0xd116
 800505c:	f7fd fc52 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8005060:	21ca      	movs	r1, #202	; 0xca
 8005062:	f24d 1017 	movw	r0, #53527	; 0xd117
 8005066:	f7fd fc4d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 800506a:	2102      	movs	r1, #2
 800506c:	f24d 1018 	movw	r0, #53528	; 0xd118
 8005070:	f7fd fc48 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 8005074:	2100      	movs	r1, #0
 8005076:	f24d 1019 	movw	r0, #53529	; 0xd119
 800507a:	f7fd fc43 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 800507e:	2102      	movs	r1, #2
 8005080:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8005084:	f7fd fc3e 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8005088:	2101      	movs	r1, #1
 800508a:	f24d 101b 	movw	r0, #53531	; 0xd11b
 800508e:	f7fd fc39 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 8005092:	2102      	movs	r1, #2
 8005094:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8005098:	f7fd fc34 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 800509c:	2134      	movs	r1, #52	; 0x34
 800509e:	f24d 101d 	movw	r0, #53533	; 0xd11d
 80050a2:	f7fd fc2f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 80050a6:	2102      	movs	r1, #2
 80050a8:	f24d 101e 	movw	r0, #53534	; 0xd11e
 80050ac:	f7fd fc2a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 80050b0:	2167      	movs	r1, #103	; 0x67
 80050b2:	f24d 101f 	movw	r0, #53535	; 0xd11f
 80050b6:	f7fd fc25 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 80050ba:	2102      	movs	r1, #2
 80050bc:	f24d 1020 	movw	r0, #53536	; 0xd120
 80050c0:	f7fd fc20 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 80050c4:	2184      	movs	r1, #132	; 0x84
 80050c6:	f24d 1021 	movw	r0, #53537	; 0xd121
 80050ca:	f7fd fc1b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 80050ce:	2102      	movs	r1, #2
 80050d0:	f24d 1022 	movw	r0, #53538	; 0xd122
 80050d4:	f7fd fc16 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 80050d8:	21a4      	movs	r1, #164	; 0xa4
 80050da:	f24d 1023 	movw	r0, #53539	; 0xd123
 80050de:	f7fd fc11 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 80050e2:	2102      	movs	r1, #2
 80050e4:	f24d 1024 	movw	r0, #53540	; 0xd124
 80050e8:	f7fd fc0c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 80050ec:	21b7      	movs	r1, #183	; 0xb7
 80050ee:	f24d 1025 	movw	r0, #53541	; 0xd125
 80050f2:	f7fd fc07 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 80050f6:	2102      	movs	r1, #2
 80050f8:	f24d 1026 	movw	r0, #53542	; 0xd126
 80050fc:	f7fd fc02 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 8005100:	21cf      	movs	r1, #207	; 0xcf
 8005102:	f24d 1027 	movw	r0, #53543	; 0xd127
 8005106:	f7fd fbfd 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 800510a:	2102      	movs	r1, #2
 800510c:	f24d 1028 	movw	r0, #53544	; 0xd128
 8005110:	f7fd fbf8 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 8005114:	21de      	movs	r1, #222	; 0xde
 8005116:	f24d 1029 	movw	r0, #53545	; 0xd129
 800511a:	f7fd fbf3 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 800511e:	2102      	movs	r1, #2
 8005120:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8005124:	f7fd fbee 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 8005128:	21f2      	movs	r1, #242	; 0xf2
 800512a:	f24d 102b 	movw	r0, #53547	; 0xd12b
 800512e:	f7fd fbe9 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 8005132:	2102      	movs	r1, #2
 8005134:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8005138:	f7fd fbe4 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 800513c:	21fe      	movs	r1, #254	; 0xfe
 800513e:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8005142:	f7fd fbdf 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 8005146:	2103      	movs	r1, #3
 8005148:	f24d 102e 	movw	r0, #53550	; 0xd12e
 800514c:	f7fd fbda 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8005150:	2110      	movs	r1, #16
 8005152:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8005156:	f7fd fbd5 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 800515a:	2103      	movs	r1, #3
 800515c:	f24d 1030 	movw	r0, #53552	; 0xd130
 8005160:	f7fd fbd0 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 8005164:	2133      	movs	r1, #51	; 0x33
 8005166:	f24d 1031 	movw	r0, #53553	; 0xd131
 800516a:	f7fd fbcb 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 800516e:	2103      	movs	r1, #3
 8005170:	f24d 1032 	movw	r0, #53554	; 0xd132
 8005174:	f7fd fbc6 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8005178:	216d      	movs	r1, #109	; 0x6d
 800517a:	f24d 1033 	movw	r0, #53555	; 0xd133
 800517e:	f7fd fbc1 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 8005182:	2100      	movs	r1, #0
 8005184:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8005188:	f7fd fbbc 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 800518c:	2133      	movs	r1, #51	; 0x33
 800518e:	f24d 2001 	movw	r0, #53761	; 0xd201
 8005192:	f7fd fbb7 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 8005196:	2100      	movs	r1, #0
 8005198:	f24d 2002 	movw	r0, #53762	; 0xd202
 800519c:	f7fd fbb2 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 80051a0:	2134      	movs	r1, #52	; 0x34
 80051a2:	f24d 2003 	movw	r0, #53763	; 0xd203
 80051a6:	f7fd fbad 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 80051aa:	2100      	movs	r1, #0
 80051ac:	f24d 2004 	movw	r0, #53764	; 0xd204
 80051b0:	f7fd fba8 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 80051b4:	213a      	movs	r1, #58	; 0x3a
 80051b6:	f24d 2005 	movw	r0, #53765	; 0xd205
 80051ba:	f7fd fba3 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 80051be:	2100      	movs	r1, #0
 80051c0:	f24d 2006 	movw	r0, #53766	; 0xd206
 80051c4:	f7fd fb9e 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 80051c8:	214a      	movs	r1, #74	; 0x4a
 80051ca:	f24d 2007 	movw	r0, #53767	; 0xd207
 80051ce:	f7fd fb99 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 80051d2:	2100      	movs	r1, #0
 80051d4:	f24d 2008 	movw	r0, #53768	; 0xd208
 80051d8:	f7fd fb94 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 80051dc:	215c      	movs	r1, #92	; 0x5c
 80051de:	f24d 2009 	movw	r0, #53769	; 0xd209
 80051e2:	f7fd fb8f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 80051e6:	2100      	movs	r1, #0
 80051e8:	f24d 200a 	movw	r0, #53770	; 0xd20a
 80051ec:	f7fd fb8a 	bl	8002904 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 80051f0:	2181      	movs	r1, #129	; 0x81
 80051f2:	f24d 200b 	movw	r0, #53771	; 0xd20b
 80051f6:	f7fd fb85 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 80051fa:	2100      	movs	r1, #0
 80051fc:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8005200:	f7fd fb80 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 8005204:	21a6      	movs	r1, #166	; 0xa6
 8005206:	f24d 200d 	movw	r0, #53773	; 0xd20d
 800520a:	f7fd fb7b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 800520e:	2100      	movs	r1, #0
 8005210:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8005214:	f7fd fb76 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8005218:	21e5      	movs	r1, #229	; 0xe5
 800521a:	f24d 200f 	movw	r0, #53775	; 0xd20f
 800521e:	f7fd fb71 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 8005222:	2101      	movs	r1, #1
 8005224:	f24d 2010 	movw	r0, #53776	; 0xd210
 8005228:	f7fd fb6c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 800522c:	2113      	movs	r1, #19
 800522e:	f24d 2011 	movw	r0, #53777	; 0xd211
 8005232:	f7fd fb67 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 8005236:	2101      	movs	r1, #1
 8005238:	f24d 2012 	movw	r0, #53778	; 0xd212
 800523c:	f7fd fb62 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8005240:	2154      	movs	r1, #84	; 0x54
 8005242:	f24d 2013 	movw	r0, #53779	; 0xd213
 8005246:	f7fd fb5d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 800524a:	2101      	movs	r1, #1
 800524c:	f24d 2014 	movw	r0, #53780	; 0xd214
 8005250:	f7fd fb58 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 8005254:	2182      	movs	r1, #130	; 0x82
 8005256:	f24d 2015 	movw	r0, #53781	; 0xd215
 800525a:	f7fd fb53 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 800525e:	2101      	movs	r1, #1
 8005260:	f24d 2016 	movw	r0, #53782	; 0xd216
 8005264:	f7fd fb4e 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8005268:	21ca      	movs	r1, #202	; 0xca
 800526a:	f24d 2017 	movw	r0, #53783	; 0xd217
 800526e:	f7fd fb49 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 8005272:	2102      	movs	r1, #2
 8005274:	f24d 2018 	movw	r0, #53784	; 0xd218
 8005278:	f7fd fb44 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 800527c:	2100      	movs	r1, #0
 800527e:	f24d 2019 	movw	r0, #53785	; 0xd219
 8005282:	f7fd fb3f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 8005286:	2102      	movs	r1, #2
 8005288:	f24d 201a 	movw	r0, #53786	; 0xd21a
 800528c:	f7fd fb3a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8005290:	2101      	movs	r1, #1
 8005292:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8005296:	f7fd fb35 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 800529a:	2102      	movs	r1, #2
 800529c:	f24d 201c 	movw	r0, #53788	; 0xd21c
 80052a0:	f7fd fb30 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 80052a4:	2134      	movs	r1, #52	; 0x34
 80052a6:	f24d 201d 	movw	r0, #53789	; 0xd21d
 80052aa:	f7fd fb2b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 80052ae:	2102      	movs	r1, #2
 80052b0:	f24d 201e 	movw	r0, #53790	; 0xd21e
 80052b4:	f7fd fb26 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 80052b8:	2167      	movs	r1, #103	; 0x67
 80052ba:	f24d 201f 	movw	r0, #53791	; 0xd21f
 80052be:	f7fd fb21 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 80052c2:	2102      	movs	r1, #2
 80052c4:	f24d 2020 	movw	r0, #53792	; 0xd220
 80052c8:	f7fd fb1c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 80052cc:	2184      	movs	r1, #132	; 0x84
 80052ce:	f24d 2021 	movw	r0, #53793	; 0xd221
 80052d2:	f7fd fb17 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 80052d6:	2102      	movs	r1, #2
 80052d8:	f24d 2022 	movw	r0, #53794	; 0xd222
 80052dc:	f7fd fb12 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 80052e0:	21a4      	movs	r1, #164	; 0xa4
 80052e2:	f24d 2023 	movw	r0, #53795	; 0xd223
 80052e6:	f7fd fb0d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 80052ea:	2102      	movs	r1, #2
 80052ec:	f24d 2024 	movw	r0, #53796	; 0xd224
 80052f0:	f7fd fb08 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 80052f4:	21b7      	movs	r1, #183	; 0xb7
 80052f6:	f24d 2025 	movw	r0, #53797	; 0xd225
 80052fa:	f7fd fb03 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 80052fe:	2102      	movs	r1, #2
 8005300:	f24d 2026 	movw	r0, #53798	; 0xd226
 8005304:	f7fd fafe 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8005308:	21cf      	movs	r1, #207	; 0xcf
 800530a:	f24d 2027 	movw	r0, #53799	; 0xd227
 800530e:	f7fd faf9 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 8005312:	2102      	movs	r1, #2
 8005314:	f24d 2028 	movw	r0, #53800	; 0xd228
 8005318:	f7fd faf4 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 800531c:	21de      	movs	r1, #222	; 0xde
 800531e:	f24d 2029 	movw	r0, #53801	; 0xd229
 8005322:	f7fd faef 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 8005326:	2102      	movs	r1, #2
 8005328:	f24d 202a 	movw	r0, #53802	; 0xd22a
 800532c:	f7fd faea 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8005330:	21f2      	movs	r1, #242	; 0xf2
 8005332:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8005336:	f7fd fae5 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 800533a:	2102      	movs	r1, #2
 800533c:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8005340:	f7fd fae0 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 8005344:	21fe      	movs	r1, #254	; 0xfe
 8005346:	f24d 202d 	movw	r0, #53805	; 0xd22d
 800534a:	f7fd fadb 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 800534e:	2103      	movs	r1, #3
 8005350:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8005354:	f7fd fad6 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8005358:	2110      	movs	r1, #16
 800535a:	f24d 202f 	movw	r0, #53807	; 0xd22f
 800535e:	f7fd fad1 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 8005362:	2103      	movs	r1, #3
 8005364:	f24d 2030 	movw	r0, #53808	; 0xd230
 8005368:	f7fd facc 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 800536c:	2133      	movs	r1, #51	; 0x33
 800536e:	f24d 2031 	movw	r0, #53809	; 0xd231
 8005372:	f7fd fac7 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 8005376:	2103      	movs	r1, #3
 8005378:	f24d 2032 	movw	r0, #53810	; 0xd232
 800537c:	f7fd fac2 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8005380:	216d      	movs	r1, #109	; 0x6d
 8005382:	f24d 2033 	movw	r0, #53811	; 0xd233
 8005386:	f7fd fabd 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 800538a:	2100      	movs	r1, #0
 800538c:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8005390:	f7fd fab8 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 8005394:	2133      	movs	r1, #51	; 0x33
 8005396:	f24d 3001 	movw	r0, #54017	; 0xd301
 800539a:	f7fd fab3 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 800539e:	2100      	movs	r1, #0
 80053a0:	f24d 3002 	movw	r0, #54018	; 0xd302
 80053a4:	f7fd faae 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 80053a8:	2134      	movs	r1, #52	; 0x34
 80053aa:	f24d 3003 	movw	r0, #54019	; 0xd303
 80053ae:	f7fd faa9 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 80053b2:	2100      	movs	r1, #0
 80053b4:	f24d 3004 	movw	r0, #54020	; 0xd304
 80053b8:	f7fd faa4 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 80053bc:	213a      	movs	r1, #58	; 0x3a
 80053be:	f24d 3005 	movw	r0, #54021	; 0xd305
 80053c2:	f7fd fa9f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 80053c6:	2100      	movs	r1, #0
 80053c8:	f24d 3006 	movw	r0, #54022	; 0xd306
 80053cc:	f7fd fa9a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 80053d0:	214a      	movs	r1, #74	; 0x4a
 80053d2:	f24d 3007 	movw	r0, #54023	; 0xd307
 80053d6:	f7fd fa95 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 80053da:	2100      	movs	r1, #0
 80053dc:	f24d 3008 	movw	r0, #54024	; 0xd308
 80053e0:	f7fd fa90 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 80053e4:	215c      	movs	r1, #92	; 0x5c
 80053e6:	f24d 3009 	movw	r0, #54025	; 0xd309
 80053ea:	f7fd fa8b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 80053ee:	2100      	movs	r1, #0
 80053f0:	f24d 300a 	movw	r0, #54026	; 0xd30a
 80053f4:	f7fd fa86 	bl	8002904 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 80053f8:	2181      	movs	r1, #129	; 0x81
 80053fa:	f24d 300b 	movw	r0, #54027	; 0xd30b
 80053fe:	f7fd fa81 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 8005402:	2100      	movs	r1, #0
 8005404:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8005408:	f7fd fa7c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 800540c:	21a6      	movs	r1, #166	; 0xa6
 800540e:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8005412:	f7fd fa77 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 8005416:	2100      	movs	r1, #0
 8005418:	f24d 300e 	movw	r0, #54030	; 0xd30e
 800541c:	f7fd fa72 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8005420:	21e5      	movs	r1, #229	; 0xe5
 8005422:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8005426:	f7fd fa6d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 800542a:	2101      	movs	r1, #1
 800542c:	f24d 3010 	movw	r0, #54032	; 0xd310
 8005430:	f7fd fa68 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 8005434:	2113      	movs	r1, #19
 8005436:	f24d 3011 	movw	r0, #54033	; 0xd311
 800543a:	f7fd fa63 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 800543e:	2101      	movs	r1, #1
 8005440:	f24d 3012 	movw	r0, #54034	; 0xd312
 8005444:	f7fd fa5e 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8005448:	2154      	movs	r1, #84	; 0x54
 800544a:	f24d 3013 	movw	r0, #54035	; 0xd313
 800544e:	f7fd fa59 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 8005452:	2101      	movs	r1, #1
 8005454:	f24d 3014 	movw	r0, #54036	; 0xd314
 8005458:	f7fd fa54 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 800545c:	2182      	movs	r1, #130	; 0x82
 800545e:	f24d 3015 	movw	r0, #54037	; 0xd315
 8005462:	f7fd fa4f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 8005466:	2101      	movs	r1, #1
 8005468:	f24d 3016 	movw	r0, #54038	; 0xd316
 800546c:	f7fd fa4a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8005470:	21ca      	movs	r1, #202	; 0xca
 8005472:	f24d 3017 	movw	r0, #54039	; 0xd317
 8005476:	f7fd fa45 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 800547a:	2102      	movs	r1, #2
 800547c:	f24d 3018 	movw	r0, #54040	; 0xd318
 8005480:	f7fd fa40 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8005484:	2100      	movs	r1, #0
 8005486:	f24d 3019 	movw	r0, #54041	; 0xd319
 800548a:	f7fd fa3b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 800548e:	2102      	movs	r1, #2
 8005490:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8005494:	f7fd fa36 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8005498:	2101      	movs	r1, #1
 800549a:	f24d 301b 	movw	r0, #54043	; 0xd31b
 800549e:	f7fd fa31 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 80054a2:	2102      	movs	r1, #2
 80054a4:	f24d 301c 	movw	r0, #54044	; 0xd31c
 80054a8:	f7fd fa2c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 80054ac:	2134      	movs	r1, #52	; 0x34
 80054ae:	f24d 301d 	movw	r0, #54045	; 0xd31d
 80054b2:	f7fd fa27 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 80054b6:	2102      	movs	r1, #2
 80054b8:	f24d 301e 	movw	r0, #54046	; 0xd31e
 80054bc:	f7fd fa22 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 80054c0:	2167      	movs	r1, #103	; 0x67
 80054c2:	f24d 301f 	movw	r0, #54047	; 0xd31f
 80054c6:	f7fd fa1d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 80054ca:	2102      	movs	r1, #2
 80054cc:	f24d 3020 	movw	r0, #54048	; 0xd320
 80054d0:	f7fd fa18 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 80054d4:	2184      	movs	r1, #132	; 0x84
 80054d6:	f24d 3021 	movw	r0, #54049	; 0xd321
 80054da:	f7fd fa13 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 80054de:	2102      	movs	r1, #2
 80054e0:	f24d 3022 	movw	r0, #54050	; 0xd322
 80054e4:	f7fd fa0e 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 80054e8:	21a4      	movs	r1, #164	; 0xa4
 80054ea:	f24d 3023 	movw	r0, #54051	; 0xd323
 80054ee:	f7fd fa09 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 80054f2:	2102      	movs	r1, #2
 80054f4:	f24d 3024 	movw	r0, #54052	; 0xd324
 80054f8:	f7fd fa04 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 80054fc:	21b7      	movs	r1, #183	; 0xb7
 80054fe:	f24d 3025 	movw	r0, #54053	; 0xd325
 8005502:	f7fd f9ff 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8005506:	2102      	movs	r1, #2
 8005508:	f24d 3026 	movw	r0, #54054	; 0xd326
 800550c:	f7fd f9fa 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8005510:	21cf      	movs	r1, #207	; 0xcf
 8005512:	f24d 3027 	movw	r0, #54055	; 0xd327
 8005516:	f7fd f9f5 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 800551a:	2102      	movs	r1, #2
 800551c:	f24d 3028 	movw	r0, #54056	; 0xd328
 8005520:	f7fd f9f0 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8005524:	21de      	movs	r1, #222	; 0xde
 8005526:	f24d 3029 	movw	r0, #54057	; 0xd329
 800552a:	f7fd f9eb 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 800552e:	2102      	movs	r1, #2
 8005530:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8005534:	f7fd f9e6 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8005538:	21f2      	movs	r1, #242	; 0xf2
 800553a:	f24d 302b 	movw	r0, #54059	; 0xd32b
 800553e:	f7fd f9e1 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8005542:	2102      	movs	r1, #2
 8005544:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8005548:	f7fd f9dc 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 800554c:	21fe      	movs	r1, #254	; 0xfe
 800554e:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8005552:	f7fd f9d7 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 8005556:	2103      	movs	r1, #3
 8005558:	f24d 302e 	movw	r0, #54062	; 0xd32e
 800555c:	f7fd f9d2 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8005560:	2110      	movs	r1, #16
 8005562:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8005566:	f7fd f9cd 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 800556a:	2103      	movs	r1, #3
 800556c:	f24d 3030 	movw	r0, #54064	; 0xd330
 8005570:	f7fd f9c8 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8005574:	2133      	movs	r1, #51	; 0x33
 8005576:	f24d 3031 	movw	r0, #54065	; 0xd331
 800557a:	f7fd f9c3 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 800557e:	2103      	movs	r1, #3
 8005580:	f24d 3032 	movw	r0, #54066	; 0xd332
 8005584:	f7fd f9be 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8005588:	216d      	movs	r1, #109	; 0x6d
 800558a:	f24d 3033 	movw	r0, #54067	; 0xd333
 800558e:	f7fd f9b9 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8005592:	2100      	movs	r1, #0
 8005594:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8005598:	f7fd f9b4 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 800559c:	2133      	movs	r1, #51	; 0x33
 800559e:	f24d 4001 	movw	r0, #54273	; 0xd401
 80055a2:	f7fd f9af 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 80055a6:	2100      	movs	r1, #0
 80055a8:	f24d 4002 	movw	r0, #54274	; 0xd402
 80055ac:	f7fd f9aa 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 80055b0:	2134      	movs	r1, #52	; 0x34
 80055b2:	f24d 4003 	movw	r0, #54275	; 0xd403
 80055b6:	f7fd f9a5 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 80055ba:	2100      	movs	r1, #0
 80055bc:	f24d 4004 	movw	r0, #54276	; 0xd404
 80055c0:	f7fd f9a0 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 80055c4:	213a      	movs	r1, #58	; 0x3a
 80055c6:	f24d 4005 	movw	r0, #54277	; 0xd405
 80055ca:	f7fd f99b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 80055ce:	2100      	movs	r1, #0
 80055d0:	f24d 4006 	movw	r0, #54278	; 0xd406
 80055d4:	f7fd f996 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 80055d8:	214a      	movs	r1, #74	; 0x4a
 80055da:	f24d 4007 	movw	r0, #54279	; 0xd407
 80055de:	f7fd f991 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 80055e2:	2100      	movs	r1, #0
 80055e4:	f24d 4008 	movw	r0, #54280	; 0xd408
 80055e8:	f7fd f98c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 80055ec:	215c      	movs	r1, #92	; 0x5c
 80055ee:	f24d 4009 	movw	r0, #54281	; 0xd409
 80055f2:	f7fd f987 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 80055f6:	2100      	movs	r1, #0
 80055f8:	f24d 400a 	movw	r0, #54282	; 0xd40a
 80055fc:	f7fd f982 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8005600:	2181      	movs	r1, #129	; 0x81
 8005602:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8005606:	f7fd f97d 	bl	8002904 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 800560a:	2100      	movs	r1, #0
 800560c:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8005610:	f7fd f978 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8005614:	21a6      	movs	r1, #166	; 0xa6
 8005616:	f24d 400d 	movw	r0, #54285	; 0xd40d
 800561a:	f7fd f973 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 800561e:	2100      	movs	r1, #0
 8005620:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8005624:	f7fd f96e 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8005628:	21e5      	movs	r1, #229	; 0xe5
 800562a:	f24d 400f 	movw	r0, #54287	; 0xd40f
 800562e:	f7fd f969 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8005632:	2101      	movs	r1, #1
 8005634:	f24d 4010 	movw	r0, #54288	; 0xd410
 8005638:	f7fd f964 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 800563c:	2113      	movs	r1, #19
 800563e:	f24d 4011 	movw	r0, #54289	; 0xd411
 8005642:	f7fd f95f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8005646:	2101      	movs	r1, #1
 8005648:	f24d 4012 	movw	r0, #54290	; 0xd412
 800564c:	f7fd f95a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8005650:	2154      	movs	r1, #84	; 0x54
 8005652:	f24d 4013 	movw	r0, #54291	; 0xd413
 8005656:	f7fd f955 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 800565a:	2101      	movs	r1, #1
 800565c:	f24d 4014 	movw	r0, #54292	; 0xd414
 8005660:	f7fd f950 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8005664:	2182      	movs	r1, #130	; 0x82
 8005666:	f24d 4015 	movw	r0, #54293	; 0xd415
 800566a:	f7fd f94b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 800566e:	2101      	movs	r1, #1
 8005670:	f24d 4016 	movw	r0, #54294	; 0xd416
 8005674:	f7fd f946 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8005678:	21ca      	movs	r1, #202	; 0xca
 800567a:	f24d 4017 	movw	r0, #54295	; 0xd417
 800567e:	f7fd f941 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8005682:	2102      	movs	r1, #2
 8005684:	f24d 4018 	movw	r0, #54296	; 0xd418
 8005688:	f7fd f93c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 800568c:	2100      	movs	r1, #0
 800568e:	f24d 4019 	movw	r0, #54297	; 0xd419
 8005692:	f7fd f937 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8005696:	2102      	movs	r1, #2
 8005698:	f24d 401a 	movw	r0, #54298	; 0xd41a
 800569c:	f7fd f932 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 80056a0:	2101      	movs	r1, #1
 80056a2:	f24d 401b 	movw	r0, #54299	; 0xd41b
 80056a6:	f7fd f92d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 80056aa:	2102      	movs	r1, #2
 80056ac:	f24d 401c 	movw	r0, #54300	; 0xd41c
 80056b0:	f7fd f928 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 80056b4:	2134      	movs	r1, #52	; 0x34
 80056b6:	f24d 401d 	movw	r0, #54301	; 0xd41d
 80056ba:	f7fd f923 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 80056be:	2102      	movs	r1, #2
 80056c0:	f24d 401e 	movw	r0, #54302	; 0xd41e
 80056c4:	f7fd f91e 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 80056c8:	2167      	movs	r1, #103	; 0x67
 80056ca:	f24d 401f 	movw	r0, #54303	; 0xd41f
 80056ce:	f7fd f919 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 80056d2:	2102      	movs	r1, #2
 80056d4:	f24d 4020 	movw	r0, #54304	; 0xd420
 80056d8:	f7fd f914 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 80056dc:	2184      	movs	r1, #132	; 0x84
 80056de:	f24d 4021 	movw	r0, #54305	; 0xd421
 80056e2:	f7fd f90f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 80056e6:	2102      	movs	r1, #2
 80056e8:	f24d 4022 	movw	r0, #54306	; 0xd422
 80056ec:	f7fd f90a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 80056f0:	21a4      	movs	r1, #164	; 0xa4
 80056f2:	f24d 4023 	movw	r0, #54307	; 0xd423
 80056f6:	f7fd f905 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 80056fa:	2102      	movs	r1, #2
 80056fc:	f24d 4024 	movw	r0, #54308	; 0xd424
 8005700:	f7fd f900 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8005704:	21b7      	movs	r1, #183	; 0xb7
 8005706:	f24d 4025 	movw	r0, #54309	; 0xd425
 800570a:	f7fd f8fb 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 800570e:	2102      	movs	r1, #2
 8005710:	f24d 4026 	movw	r0, #54310	; 0xd426
 8005714:	f7fd f8f6 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8005718:	21cf      	movs	r1, #207	; 0xcf
 800571a:	f24d 4027 	movw	r0, #54311	; 0xd427
 800571e:	f7fd f8f1 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8005722:	2102      	movs	r1, #2
 8005724:	f24d 4028 	movw	r0, #54312	; 0xd428
 8005728:	f7fd f8ec 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 800572c:	21de      	movs	r1, #222	; 0xde
 800572e:	f24d 4029 	movw	r0, #54313	; 0xd429
 8005732:	f7fd f8e7 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8005736:	2102      	movs	r1, #2
 8005738:	f24d 402a 	movw	r0, #54314	; 0xd42a
 800573c:	f7fd f8e2 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8005740:	21f2      	movs	r1, #242	; 0xf2
 8005742:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8005746:	f7fd f8dd 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 800574a:	2102      	movs	r1, #2
 800574c:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8005750:	f7fd f8d8 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 8005754:	21fe      	movs	r1, #254	; 0xfe
 8005756:	f24d 402d 	movw	r0, #54317	; 0xd42d
 800575a:	f7fd f8d3 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 800575e:	2103      	movs	r1, #3
 8005760:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8005764:	f7fd f8ce 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8005768:	2110      	movs	r1, #16
 800576a:	f24d 402f 	movw	r0, #54319	; 0xd42f
 800576e:	f7fd f8c9 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8005772:	2103      	movs	r1, #3
 8005774:	f24d 4030 	movw	r0, #54320	; 0xd430
 8005778:	f7fd f8c4 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 800577c:	2133      	movs	r1, #51	; 0x33
 800577e:	f24d 4031 	movw	r0, #54321	; 0xd431
 8005782:	f7fd f8bf 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8005786:	2103      	movs	r1, #3
 8005788:	f24d 4032 	movw	r0, #54322	; 0xd432
 800578c:	f7fd f8ba 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8005790:	216d      	movs	r1, #109	; 0x6d
 8005792:	f24d 4033 	movw	r0, #54323	; 0xd433
 8005796:	f7fd f8b5 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 800579a:	2100      	movs	r1, #0
 800579c:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 80057a0:	f7fd f8b0 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 80057a4:	2133      	movs	r1, #51	; 0x33
 80057a6:	f24d 5001 	movw	r0, #54529	; 0xd501
 80057aa:	f7fd f8ab 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 80057ae:	2100      	movs	r1, #0
 80057b0:	f24d 5002 	movw	r0, #54530	; 0xd502
 80057b4:	f7fd f8a6 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 80057b8:	2134      	movs	r1, #52	; 0x34
 80057ba:	f24d 5003 	movw	r0, #54531	; 0xd503
 80057be:	f7fd f8a1 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 80057c2:	2100      	movs	r1, #0
 80057c4:	f24d 5004 	movw	r0, #54532	; 0xd504
 80057c8:	f7fd f89c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 80057cc:	213a      	movs	r1, #58	; 0x3a
 80057ce:	f24d 5005 	movw	r0, #54533	; 0xd505
 80057d2:	f7fd f897 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 80057d6:	2100      	movs	r1, #0
 80057d8:	f24d 5006 	movw	r0, #54534	; 0xd506
 80057dc:	f7fd f892 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 80057e0:	214a      	movs	r1, #74	; 0x4a
 80057e2:	f24d 5007 	movw	r0, #54535	; 0xd507
 80057e6:	f7fd f88d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 80057ea:	2100      	movs	r1, #0
 80057ec:	f24d 5008 	movw	r0, #54536	; 0xd508
 80057f0:	f7fd f888 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 80057f4:	215c      	movs	r1, #92	; 0x5c
 80057f6:	f24d 5009 	movw	r0, #54537	; 0xd509
 80057fa:	f7fd f883 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 80057fe:	2100      	movs	r1, #0
 8005800:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8005804:	f7fd f87e 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8005808:	2181      	movs	r1, #129	; 0x81
 800580a:	f24d 500b 	movw	r0, #54539	; 0xd50b
 800580e:	f7fd f879 	bl	8002904 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 8005812:	2100      	movs	r1, #0
 8005814:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8005818:	f7fd f874 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 800581c:	21a6      	movs	r1, #166	; 0xa6
 800581e:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8005822:	f7fd f86f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8005826:	2100      	movs	r1, #0
 8005828:	f24d 500e 	movw	r0, #54542	; 0xd50e
 800582c:	f7fd f86a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8005830:	21e5      	movs	r1, #229	; 0xe5
 8005832:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8005836:	f7fd f865 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 800583a:	2101      	movs	r1, #1
 800583c:	f24d 5010 	movw	r0, #54544	; 0xd510
 8005840:	f7fd f860 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 8005844:	2113      	movs	r1, #19
 8005846:	f24d 5011 	movw	r0, #54545	; 0xd511
 800584a:	f7fd f85b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 800584e:	2101      	movs	r1, #1
 8005850:	f24d 5012 	movw	r0, #54546	; 0xd512
 8005854:	f7fd f856 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8005858:	2154      	movs	r1, #84	; 0x54
 800585a:	f24d 5013 	movw	r0, #54547	; 0xd513
 800585e:	f7fd f851 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8005862:	2101      	movs	r1, #1
 8005864:	f24d 5014 	movw	r0, #54548	; 0xd514
 8005868:	f7fd f84c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 800586c:	2182      	movs	r1, #130	; 0x82
 800586e:	f24d 5015 	movw	r0, #54549	; 0xd515
 8005872:	f7fd f847 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8005876:	2101      	movs	r1, #1
 8005878:	f24d 5016 	movw	r0, #54550	; 0xd516
 800587c:	f7fd f842 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8005880:	21ca      	movs	r1, #202	; 0xca
 8005882:	f24d 5017 	movw	r0, #54551	; 0xd517
 8005886:	f7fd f83d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 800588a:	2102      	movs	r1, #2
 800588c:	f24d 5018 	movw	r0, #54552	; 0xd518
 8005890:	f7fd f838 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8005894:	2100      	movs	r1, #0
 8005896:	f24d 5019 	movw	r0, #54553	; 0xd519
 800589a:	f7fd f833 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 800589e:	2102      	movs	r1, #2
 80058a0:	f24d 501a 	movw	r0, #54554	; 0xd51a
 80058a4:	f7fd f82e 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 80058a8:	2101      	movs	r1, #1
 80058aa:	f24d 501b 	movw	r0, #54555	; 0xd51b
 80058ae:	f7fd f829 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 80058b2:	2102      	movs	r1, #2
 80058b4:	f24d 501c 	movw	r0, #54556	; 0xd51c
 80058b8:	f7fd f824 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 80058bc:	2134      	movs	r1, #52	; 0x34
 80058be:	f24d 501d 	movw	r0, #54557	; 0xd51d
 80058c2:	f7fd f81f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 80058c6:	2102      	movs	r1, #2
 80058c8:	f24d 501e 	movw	r0, #54558	; 0xd51e
 80058cc:	f7fd f81a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 80058d0:	2167      	movs	r1, #103	; 0x67
 80058d2:	f24d 501f 	movw	r0, #54559	; 0xd51f
 80058d6:	f7fd f815 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 80058da:	2102      	movs	r1, #2
 80058dc:	f24d 5020 	movw	r0, #54560	; 0xd520
 80058e0:	f7fd f810 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 80058e4:	2184      	movs	r1, #132	; 0x84
 80058e6:	f24d 5021 	movw	r0, #54561	; 0xd521
 80058ea:	f7fd f80b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 80058ee:	2102      	movs	r1, #2
 80058f0:	f24d 5022 	movw	r0, #54562	; 0xd522
 80058f4:	f7fd f806 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 80058f8:	21a4      	movs	r1, #164	; 0xa4
 80058fa:	f24d 5023 	movw	r0, #54563	; 0xd523
 80058fe:	f7fd f801 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 8005902:	2102      	movs	r1, #2
 8005904:	f24d 5024 	movw	r0, #54564	; 0xd524
 8005908:	f7fc fffc 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 800590c:	21b7      	movs	r1, #183	; 0xb7
 800590e:	f24d 5025 	movw	r0, #54565	; 0xd525
 8005912:	f7fc fff7 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 8005916:	2102      	movs	r1, #2
 8005918:	f24d 5026 	movw	r0, #54566	; 0xd526
 800591c:	f7fc fff2 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8005920:	21cf      	movs	r1, #207	; 0xcf
 8005922:	f24d 5027 	movw	r0, #54567	; 0xd527
 8005926:	f7fc ffed 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 800592a:	2102      	movs	r1, #2
 800592c:	f24d 5028 	movw	r0, #54568	; 0xd528
 8005930:	f7fc ffe8 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8005934:	21de      	movs	r1, #222	; 0xde
 8005936:	f24d 5029 	movw	r0, #54569	; 0xd529
 800593a:	f7fc ffe3 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 800593e:	2102      	movs	r1, #2
 8005940:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8005944:	f7fc ffde 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8005948:	21f2      	movs	r1, #242	; 0xf2
 800594a:	f24d 502b 	movw	r0, #54571	; 0xd52b
 800594e:	f7fc ffd9 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 8005952:	2102      	movs	r1, #2
 8005954:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8005958:	f7fc ffd4 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 800595c:	21fe      	movs	r1, #254	; 0xfe
 800595e:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8005962:	f7fc ffcf 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 8005966:	2103      	movs	r1, #3
 8005968:	f24d 502e 	movw	r0, #54574	; 0xd52e
 800596c:	f7fc ffca 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8005970:	2110      	movs	r1, #16
 8005972:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8005976:	f7fc ffc5 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 800597a:	2103      	movs	r1, #3
 800597c:	f24d 5030 	movw	r0, #54576	; 0xd530
 8005980:	f7fc ffc0 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 8005984:	2133      	movs	r1, #51	; 0x33
 8005986:	f24d 5031 	movw	r0, #54577	; 0xd531
 800598a:	f7fc ffbb 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 800598e:	2103      	movs	r1, #3
 8005990:	f24d 5032 	movw	r0, #54578	; 0xd532
 8005994:	f7fc ffb6 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8005998:	216d      	movs	r1, #109	; 0x6d
 800599a:	f24d 5033 	movw	r0, #54579	; 0xd533
 800599e:	f7fc ffb1 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 80059a2:	2100      	movs	r1, #0
 80059a4:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 80059a8:	f7fc ffac 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 80059ac:	2133      	movs	r1, #51	; 0x33
 80059ae:	f24d 6001 	movw	r0, #54785	; 0xd601
 80059b2:	f7fc ffa7 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 80059b6:	2100      	movs	r1, #0
 80059b8:	f24d 6002 	movw	r0, #54786	; 0xd602
 80059bc:	f7fc ffa2 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 80059c0:	2134      	movs	r1, #52	; 0x34
 80059c2:	f24d 6003 	movw	r0, #54787	; 0xd603
 80059c6:	f7fc ff9d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 80059ca:	2100      	movs	r1, #0
 80059cc:	f24d 6004 	movw	r0, #54788	; 0xd604
 80059d0:	f7fc ff98 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 80059d4:	213a      	movs	r1, #58	; 0x3a
 80059d6:	f24d 6005 	movw	r0, #54789	; 0xd605
 80059da:	f7fc ff93 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 80059de:	2100      	movs	r1, #0
 80059e0:	f24d 6006 	movw	r0, #54790	; 0xd606
 80059e4:	f7fc ff8e 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 80059e8:	214a      	movs	r1, #74	; 0x4a
 80059ea:	f24d 6007 	movw	r0, #54791	; 0xd607
 80059ee:	f7fc ff89 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 80059f2:	2100      	movs	r1, #0
 80059f4:	f24d 6008 	movw	r0, #54792	; 0xd608
 80059f8:	f7fc ff84 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 80059fc:	215c      	movs	r1, #92	; 0x5c
 80059fe:	f24d 6009 	movw	r0, #54793	; 0xd609
 8005a02:	f7fc ff7f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 8005a06:	2100      	movs	r1, #0
 8005a08:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8005a0c:	f7fc ff7a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 8005a10:	2181      	movs	r1, #129	; 0x81
 8005a12:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8005a16:	f7fc ff75 	bl	8002904 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8005a20:	f7fc ff70 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 8005a24:	21a6      	movs	r1, #166	; 0xa6
 8005a26:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8005a2a:	f7fc ff6b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 8005a2e:	2100      	movs	r1, #0
 8005a30:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8005a34:	f7fc ff66 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8005a38:	21e5      	movs	r1, #229	; 0xe5
 8005a3a:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8005a3e:	f7fc ff61 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 8005a42:	2101      	movs	r1, #1
 8005a44:	f24d 6010 	movw	r0, #54800	; 0xd610
 8005a48:	f7fc ff5c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 8005a4c:	2113      	movs	r1, #19
 8005a4e:	f24d 6011 	movw	r0, #54801	; 0xd611
 8005a52:	f7fc ff57 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 8005a56:	2101      	movs	r1, #1
 8005a58:	f24d 6012 	movw	r0, #54802	; 0xd612
 8005a5c:	f7fc ff52 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8005a60:	2154      	movs	r1, #84	; 0x54
 8005a62:	f24d 6013 	movw	r0, #54803	; 0xd613
 8005a66:	f7fc ff4d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	f24d 6014 	movw	r0, #54804	; 0xd614
 8005a70:	f7fc ff48 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 8005a74:	2182      	movs	r1, #130	; 0x82
 8005a76:	f24d 6015 	movw	r0, #54805	; 0xd615
 8005a7a:	f7fc ff43 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 8005a7e:	2101      	movs	r1, #1
 8005a80:	f24d 6016 	movw	r0, #54806	; 0xd616
 8005a84:	f7fc ff3e 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8005a88:	21ca      	movs	r1, #202	; 0xca
 8005a8a:	f24d 6017 	movw	r0, #54807	; 0xd617
 8005a8e:	f7fc ff39 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 8005a92:	2102      	movs	r1, #2
 8005a94:	f24d 6018 	movw	r0, #54808	; 0xd618
 8005a98:	f7fc ff34 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	f24d 6019 	movw	r0, #54809	; 0xd619
 8005aa2:	f7fc ff2f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 8005aa6:	2102      	movs	r1, #2
 8005aa8:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8005aac:	f7fc ff2a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8005ab6:	f7fc ff25 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 8005aba:	2102      	movs	r1, #2
 8005abc:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8005ac0:	f7fc ff20 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 8005ac4:	2134      	movs	r1, #52	; 0x34
 8005ac6:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8005aca:	f7fc ff1b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 8005ace:	2102      	movs	r1, #2
 8005ad0:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8005ad4:	f7fc ff16 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8005ad8:	2167      	movs	r1, #103	; 0x67
 8005ada:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8005ade:	f7fc ff11 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 8005ae2:	2102      	movs	r1, #2
 8005ae4:	f24d 6020 	movw	r0, #54816	; 0xd620
 8005ae8:	f7fc ff0c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 8005aec:	2184      	movs	r1, #132	; 0x84
 8005aee:	f24d 6021 	movw	r0, #54817	; 0xd621
 8005af2:	f7fc ff07 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 8005af6:	2102      	movs	r1, #2
 8005af8:	f24d 6022 	movw	r0, #54818	; 0xd622
 8005afc:	f7fc ff02 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 8005b00:	21a4      	movs	r1, #164	; 0xa4
 8005b02:	f24d 6023 	movw	r0, #54819	; 0xd623
 8005b06:	f7fc fefd 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 8005b0a:	2102      	movs	r1, #2
 8005b0c:	f24d 6024 	movw	r0, #54820	; 0xd624
 8005b10:	f7fc fef8 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 8005b14:	21b7      	movs	r1, #183	; 0xb7
 8005b16:	f24d 6025 	movw	r0, #54821	; 0xd625
 8005b1a:	f7fc fef3 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 8005b1e:	2102      	movs	r1, #2
 8005b20:	f24d 6026 	movw	r0, #54822	; 0xd626
 8005b24:	f7fc feee 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 8005b28:	21cf      	movs	r1, #207	; 0xcf
 8005b2a:	f24d 6027 	movw	r0, #54823	; 0xd627
 8005b2e:	f7fc fee9 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 8005b32:	2102      	movs	r1, #2
 8005b34:	f24d 6028 	movw	r0, #54824	; 0xd628
 8005b38:	f7fc fee4 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 8005b3c:	21de      	movs	r1, #222	; 0xde
 8005b3e:	f24d 6029 	movw	r0, #54825	; 0xd629
 8005b42:	f7fc fedf 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 8005b46:	2102      	movs	r1, #2
 8005b48:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8005b4c:	f7fc feda 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8005b50:	21f2      	movs	r1, #242	; 0xf2
 8005b52:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8005b56:	f7fc fed5 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 8005b5a:	2102      	movs	r1, #2
 8005b5c:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8005b60:	f7fc fed0 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 8005b64:	21fe      	movs	r1, #254	; 0xfe
 8005b66:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8005b6a:	f7fc fecb 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 8005b6e:	2103      	movs	r1, #3
 8005b70:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8005b74:	f7fc fec6 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8005b78:	2110      	movs	r1, #16
 8005b7a:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8005b7e:	f7fc fec1 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 8005b82:	2103      	movs	r1, #3
 8005b84:	f24d 6030 	movw	r0, #54832	; 0xd630
 8005b88:	f7fc febc 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 8005b8c:	2133      	movs	r1, #51	; 0x33
 8005b8e:	f24d 6031 	movw	r0, #54833	; 0xd631
 8005b92:	f7fc feb7 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 8005b96:	2103      	movs	r1, #3
 8005b98:	f24d 6032 	movw	r0, #54834	; 0xd632
 8005b9c:	f7fc feb2 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8005ba0:	216d      	movs	r1, #109	; 0x6d
 8005ba2:	f24d 6033 	movw	r0, #54835	; 0xd633
 8005ba6:	f7fc fead 	bl	8002904 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 8005baa:	2155      	movs	r1, #85	; 0x55
 8005bac:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8005bb0:	f7fc fea8 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8005bb4:	21aa      	movs	r1, #170	; 0xaa
 8005bb6:	f24f 0001 	movw	r0, #61441	; 0xf001
 8005bba:	f7fc fea3 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8005bbe:	2152      	movs	r1, #82	; 0x52
 8005bc0:	f24f 0002 	movw	r0, #61442	; 0xf002
 8005bc4:	f7fc fe9e 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8005bc8:	2108      	movs	r1, #8
 8005bca:	f24f 0003 	movw	r0, #61443	; 0xf003
 8005bce:	f7fc fe99 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	f24f 0004 	movw	r0, #61444	; 0xf004
 8005bd8:	f7fc fe94 	bl	8002904 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8005bdc:	21cc      	movs	r1, #204	; 0xcc
 8005bde:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8005be2:	f7fc fe8f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8005be6:	2100      	movs	r1, #0
 8005be8:	f24b 1001 	movw	r0, #45313	; 0xb101
 8005bec:	f7fc fe8a 	bl	8002904 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 8005bf0:	2105      	movs	r1, #5
 8005bf2:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8005bf6:	f7fc fe85 	bl	8002904 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 8005bfa:	2170      	movs	r1, #112	; 0x70
 8005bfc:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8005c00:	f7fc fe80 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 8005c04:	2170      	movs	r1, #112	; 0x70
 8005c06:	f24b 7001 	movw	r0, #46849	; 0xb701
 8005c0a:	f7fc fe7b 	bl	8002904 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 8005c0e:	2101      	movs	r1, #1
 8005c10:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8005c14:	f7fc fe76 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 8005c18:	2103      	movs	r1, #3
 8005c1a:	f64b 0001 	movw	r0, #47105	; 0xb801
 8005c1e:	f7fc fe71 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 8005c22:	2103      	movs	r1, #3
 8005c24:	f64b 0002 	movw	r0, #47106	; 0xb802
 8005c28:	f7fc fe6c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 8005c2c:	2103      	movs	r1, #3
 8005c2e:	f64b 0003 	movw	r0, #47107	; 0xb803
 8005c32:	f7fc fe67 	bl	8002904 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 8005c36:	2102      	movs	r1, #2
 8005c38:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8005c3c:	f7fc fe62 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 8005c40:	2100      	movs	r1, #0
 8005c42:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8005c46:	f7fc fe5d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8005c50:	f7fc fe58 	bl	8002904 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 8005c54:	21d0      	movs	r1, #208	; 0xd0
 8005c56:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8005c5a:	f7fc fe53 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 8005c5e:	2102      	movs	r1, #2
 8005c60:	f64c 1001 	movw	r0, #51457	; 0xc901
 8005c64:	f7fc fe4e 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8005c68:	2150      	movs	r1, #80	; 0x50
 8005c6a:	f64c 1002 	movw	r0, #51458	; 0xc902
 8005c6e:	f7fc fe49 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 8005c72:	2150      	movs	r1, #80	; 0x50
 8005c74:	f64c 1003 	movw	r0, #51459	; 0xc903
 8005c78:	f7fc fe44 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 8005c7c:	2150      	movs	r1, #80	; 0x50
 8005c7e:	f64c 1004 	movw	r0, #51460	; 0xc904
 8005c82:	f7fc fe3f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 8005c86:	2100      	movs	r1, #0
 8005c88:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8005c8c:	f7fc fe3a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8005c90:	2155      	movs	r1, #85	; 0x55
 8005c92:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8005c96:	f7fc fe35 	bl	8002904 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8005c9a:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8005c9e:	f7fc fda5 	bl	80027ec <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 8005ca2:	2001      	movs	r0, #1
 8005ca4:	f7fb fa62 	bl	800116c <HAL_Delay>
		LCD_WR_REG(0x2900);
 8005ca8:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8005cac:	f7fc fd9e 	bl	80027ec <LCD_WR_REG>
 8005cb0:	f001 bd18 	b.w	80076e4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 8005cb4:	4bec      	ldr	r3, [pc, #944]	; (8006068 <LCD_Init+0x27b8>)
 8005cb6:	889b      	ldrh	r3, [r3, #4]
 8005cb8:	f249 3225 	movw	r2, #37669	; 0x9325
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	f040 80d7 	bne.w	8005e70 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 8005cc2:	f647 01f0 	movw	r1, #30960	; 0x78f0
 8005cc6:	20e5      	movs	r0, #229	; 0xe5
 8005cc8:	f7fc fe1c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 8005ccc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005cd0:	2001      	movs	r0, #1
 8005cd2:	f7fc fe17 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8005cd6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005cda:	2002      	movs	r0, #2
 8005cdc:	f7fc fe12 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8005ce0:	f241 0130 	movw	r1, #4144	; 0x1030
 8005ce4:	2003      	movs	r0, #3
 8005ce6:	f7fc fe0d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8005cea:	2100      	movs	r1, #0
 8005cec:	2004      	movs	r0, #4
 8005cee:	f7fc fe09 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8005cf2:	f240 2102 	movw	r1, #514	; 0x202
 8005cf6:	2008      	movs	r0, #8
 8005cf8:	f7fc fe04 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	2009      	movs	r0, #9
 8005d00:	f7fc fe00 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 8005d04:	2100      	movs	r1, #0
 8005d06:	200a      	movs	r0, #10
 8005d08:	f7fc fdfc 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	200c      	movs	r0, #12
 8005d10:	f7fc fdf8 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 8005d14:	2100      	movs	r1, #0
 8005d16:	200d      	movs	r0, #13
 8005d18:	f7fc fdf4 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	200f      	movs	r0, #15
 8005d20:	f7fc fdf0 	bl	8002904 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 8005d24:	2100      	movs	r1, #0
 8005d26:	2010      	movs	r0, #16
 8005d28:	f7fc fdec 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8005d2c:	2107      	movs	r1, #7
 8005d2e:	2011      	movs	r0, #17
 8005d30:	f7fc fde8 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8005d34:	2100      	movs	r1, #0
 8005d36:	2012      	movs	r0, #18
 8005d38:	f7fc fde4 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	2013      	movs	r0, #19
 8005d40:	f7fc fde0 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 8005d44:	2100      	movs	r1, #0
 8005d46:	2007      	movs	r0, #7
 8005d48:	f7fc fddc 	bl	8002904 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 8005d4c:	f241 6190 	movw	r1, #5776	; 0x1690
 8005d50:	2010      	movs	r0, #16
 8005d52:	f7fc fdd7 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8005d56:	f240 2127 	movw	r1, #551	; 0x227
 8005d5a:	2011      	movs	r0, #17
 8005d5c:	f7fc fdd2 	bl	8002904 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8005d60:	219d      	movs	r1, #157	; 0x9d
 8005d62:	2012      	movs	r0, #18
 8005d64:	f7fc fdce 	bl	8002904 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8005d68:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8005d6c:	2013      	movs	r0, #19
 8005d6e:	f7fc fdc9 	bl	8002904 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 8005d72:	2125      	movs	r1, #37	; 0x25
 8005d74:	2029      	movs	r0, #41	; 0x29
 8005d76:	f7fc fdc5 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 8005d7a:	210d      	movs	r1, #13
 8005d7c:	202b      	movs	r0, #43	; 0x2b
 8005d7e:	f7fc fdc1 	bl	8002904 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 8005d82:	2107      	movs	r1, #7
 8005d84:	2030      	movs	r0, #48	; 0x30
 8005d86:	f7fc fdbd 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 8005d8a:	f240 3103 	movw	r1, #771	; 0x303
 8005d8e:	2031      	movs	r0, #49	; 0x31
 8005d90:	f7fc fdb8 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 8005d94:	2103      	movs	r1, #3
 8005d96:	2032      	movs	r0, #50	; 0x32
 8005d98:	f7fc fdb4 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 8005d9c:	f240 2106 	movw	r1, #518	; 0x206
 8005da0:	2035      	movs	r0, #53	; 0x35
 8005da2:	f7fc fdaf 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 8005da6:	2108      	movs	r1, #8
 8005da8:	2036      	movs	r0, #54	; 0x36
 8005daa:	f7fc fdab 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 8005dae:	f240 4106 	movw	r1, #1030	; 0x406
 8005db2:	2037      	movs	r0, #55	; 0x37
 8005db4:	f7fc fda6 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8005db8:	f44f 7141 	mov.w	r1, #772	; 0x304
 8005dbc:	2038      	movs	r0, #56	; 0x38
 8005dbe:	f7fc fda1 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 8005dc2:	2107      	movs	r1, #7
 8005dc4:	2039      	movs	r0, #57	; 0x39
 8005dc6:	f7fc fd9d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 8005dca:	f240 6102 	movw	r1, #1538	; 0x602
 8005dce:	203c      	movs	r0, #60	; 0x3c
 8005dd0:	f7fc fd98 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 8005dd4:	2108      	movs	r1, #8
 8005dd6:	203d      	movs	r0, #61	; 0x3d
 8005dd8:	f7fc fd94 	bl	8002904 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 8005ddc:	2100      	movs	r1, #0
 8005dde:	2050      	movs	r0, #80	; 0x50
 8005de0:	f7fc fd90 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8005de4:	21ef      	movs	r1, #239	; 0xef
 8005de6:	2051      	movs	r0, #81	; 0x51
 8005de8:	f7fc fd8c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8005dec:	2100      	movs	r1, #0
 8005dee:	2052      	movs	r0, #82	; 0x52
 8005df0:	f7fc fd88 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8005df4:	f240 113f 	movw	r1, #319	; 0x13f
 8005df8:	2053      	movs	r0, #83	; 0x53
 8005dfa:	f7fc fd83 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 8005dfe:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8005e02:	2060      	movs	r0, #96	; 0x60
 8005e04:	f7fc fd7e 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8005e08:	2101      	movs	r1, #1
 8005e0a:	2061      	movs	r0, #97	; 0x61
 8005e0c:	f7fc fd7a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8005e10:	2100      	movs	r1, #0
 8005e12:	206a      	movs	r0, #106	; 0x6a
 8005e14:	f7fc fd76 	bl	8002904 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 8005e18:	2100      	movs	r1, #0
 8005e1a:	2080      	movs	r0, #128	; 0x80
 8005e1c:	f7fc fd72 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8005e20:	2100      	movs	r1, #0
 8005e22:	2081      	movs	r0, #129	; 0x81
 8005e24:	f7fc fd6e 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8005e28:	2100      	movs	r1, #0
 8005e2a:	2082      	movs	r0, #130	; 0x82
 8005e2c:	f7fc fd6a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8005e30:	2100      	movs	r1, #0
 8005e32:	2083      	movs	r0, #131	; 0x83
 8005e34:	f7fc fd66 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8005e38:	2100      	movs	r1, #0
 8005e3a:	2084      	movs	r0, #132	; 0x84
 8005e3c:	f7fc fd62 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8005e40:	2100      	movs	r1, #0
 8005e42:	2085      	movs	r0, #133	; 0x85
 8005e44:	f7fc fd5e 	bl	8002904 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8005e48:	2110      	movs	r1, #16
 8005e4a:	2090      	movs	r0, #144	; 0x90
 8005e4c:	f7fc fd5a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8005e50:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005e54:	2092      	movs	r0, #146	; 0x92
 8005e56:	f7fc fd55 	bl	8002904 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 8005e5a:	f240 1133 	movw	r1, #307	; 0x133
 8005e5e:	2007      	movs	r0, #7
 8005e60:	f7fc fd50 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 8005e64:	2122      	movs	r1, #34	; 0x22
 8005e66:	2000      	movs	r0, #0
 8005e68:	f7fc fd4c 	bl	8002904 <LCD_WriteReg>
 8005e6c:	f001 bc3a 	b.w	80076e4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8005e70:	4b7d      	ldr	r3, [pc, #500]	; (8006068 <LCD_Init+0x27b8>)
 8005e72:	889b      	ldrh	r3, [r3, #4]
 8005e74:	f249 3228 	movw	r2, #37672	; 0x9328
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	f040 80f7 	bne.w	800606c <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 8005e7e:	f241 018f 	movw	r1, #4239	; 0x108f
 8005e82:	20ec      	movs	r0, #236	; 0xec
 8005e84:	f7fc fd3e 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8005e88:	f241 2134 	movw	r1, #4660	; 0x1234
 8005e8c:	20ef      	movs	r0, #239	; 0xef
 8005e8e:	f7fc fd39 	bl	8002904 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 8005e92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e96:	2001      	movs	r0, #1
 8005e98:	f7fc fd34 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 8005e9c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005ea0:	2002      	movs	r0, #2
 8005ea2:	f7fc fd2f 	bl	8002904 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 8005ea6:	f241 0130 	movw	r1, #4144	; 0x1030
 8005eaa:	2003      	movs	r0, #3
 8005eac:	f7fc fd2a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	2004      	movs	r0, #4
 8005eb4:	f7fc fd26 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8005eb8:	f240 2102 	movw	r1, #514	; 0x202
 8005ebc:	2008      	movs	r0, #8
 8005ebe:	f7fc fd21 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	2009      	movs	r0, #9
 8005ec6:	f7fc fd1d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 8005eca:	2100      	movs	r1, #0
 8005ecc:	200a      	movs	r0, #10
 8005ece:	f7fc fd19 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	200c      	movs	r0, #12
 8005ed6:	f7fc fd15 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 8005eda:	2100      	movs	r1, #0
 8005edc:	200d      	movs	r0, #13
 8005ede:	f7fc fd11 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	200f      	movs	r0, #15
 8005ee6:	f7fc fd0d 	bl	8002904 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 8005eea:	2100      	movs	r1, #0
 8005eec:	2010      	movs	r0, #16
 8005eee:	f7fc fd09 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8005ef2:	2107      	movs	r1, #7
 8005ef4:	2011      	movs	r0, #17
 8005ef6:	f7fc fd05 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8005efa:	2100      	movs	r1, #0
 8005efc:	2012      	movs	r0, #18
 8005efe:	f7fc fd01 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8005f02:	2100      	movs	r1, #0
 8005f04:	2013      	movs	r0, #19
 8005f06:	f7fc fcfd 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	2007      	movs	r0, #7
 8005f0e:	f7fc fcf9 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(50);
 8005f12:	2032      	movs	r0, #50	; 0x32
 8005f14:	f7fb f92a 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 8005f18:	f241 4190 	movw	r1, #5264	; 0x1490
 8005f1c:	2010      	movs	r0, #16
 8005f1e:	f7fc fcf1 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8005f22:	f240 2127 	movw	r1, #551	; 0x227
 8005f26:	2011      	movs	r0, #17
 8005f28:	f7fc fcec 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(50);
 8005f2c:	2032      	movs	r0, #50	; 0x32
 8005f2e:	f7fb f91d 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 8005f32:	218a      	movs	r1, #138	; 0x8a
 8005f34:	2012      	movs	r0, #18
 8005f36:	f7fc fce5 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(50);
 8005f3a:	2032      	movs	r0, #50	; 0x32
 8005f3c:	f7fb f916 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 8005f40:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8005f44:	2013      	movs	r0, #19
 8005f46:	f7fc fcdd 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 8005f4a:	2106      	movs	r1, #6
 8005f4c:	2029      	movs	r0, #41	; 0x29
 8005f4e:	f7fc fcd9 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 8005f52:	210d      	movs	r1, #13
 8005f54:	202b      	movs	r0, #43	; 0x2b
 8005f56:	f7fc fcd5 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(50);
 8005f5a:	2032      	movs	r0, #50	; 0x32
 8005f5c:	f7fb f906 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8005f60:	2100      	movs	r1, #0
 8005f62:	2020      	movs	r0, #32
 8005f64:	f7fc fcce 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8005f68:	2100      	movs	r1, #0
 8005f6a:	2021      	movs	r0, #33	; 0x21
 8005f6c:	f7fc fcca 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(50);
 8005f70:	2032      	movs	r0, #50	; 0x32
 8005f72:	f7fb f8fb 	bl	800116c <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 8005f76:	2100      	movs	r1, #0
 8005f78:	2030      	movs	r0, #48	; 0x30
 8005f7a:	f7fc fcc3 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 8005f7e:	f240 6104 	movw	r1, #1540	; 0x604
 8005f82:	2031      	movs	r0, #49	; 0x31
 8005f84:	f7fc fcbe 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8005f88:	f240 3105 	movw	r1, #773	; 0x305
 8005f8c:	2032      	movs	r0, #50	; 0x32
 8005f8e:	f7fc fcb9 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 8005f92:	2100      	movs	r1, #0
 8005f94:	2035      	movs	r0, #53	; 0x35
 8005f96:	f7fc fcb5 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 8005f9a:	f640 4109 	movw	r1, #3081	; 0xc09
 8005f9e:	2036      	movs	r0, #54	; 0x36
 8005fa0:	f7fc fcb0 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 8005fa4:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005fa8:	2037      	movs	r0, #55	; 0x37
 8005faa:	f7fc fcab 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 8005fae:	f240 3101 	movw	r1, #769	; 0x301
 8005fb2:	2038      	movs	r0, #56	; 0x38
 8005fb4:	f7fc fca6 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8005fb8:	f240 7107 	movw	r1, #1799	; 0x707
 8005fbc:	2039      	movs	r0, #57	; 0x39
 8005fbe:	f7fc fca1 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	203c      	movs	r0, #60	; 0x3c
 8005fc6:	f7fc fc9d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 8005fca:	f640 210a 	movw	r1, #2570	; 0xa0a
 8005fce:	203d      	movs	r0, #61	; 0x3d
 8005fd0:	f7fc fc98 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(50);
 8005fd4:	2032      	movs	r0, #50	; 0x32
 8005fd6:	f7fb f8c9 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 8005fda:	2100      	movs	r1, #0
 8005fdc:	2050      	movs	r0, #80	; 0x50
 8005fde:	f7fc fc91 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 8005fe2:	21ef      	movs	r1, #239	; 0xef
 8005fe4:	2051      	movs	r0, #81	; 0x51
 8005fe6:	f7fc fc8d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 8005fea:	2100      	movs	r1, #0
 8005fec:	2052      	movs	r0, #82	; 0x52
 8005fee:	f7fc fc89 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 8005ff2:	f240 113f 	movw	r1, #319	; 0x13f
 8005ff6:	2053      	movs	r0, #83	; 0x53
 8005ff8:	f7fc fc84 	bl	8002904 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 8005ffc:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8006000:	2060      	movs	r0, #96	; 0x60
 8006002:	f7fc fc7f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8006006:	2101      	movs	r1, #1
 8006008:	2061      	movs	r0, #97	; 0x61
 800600a:	f7fc fc7b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 800600e:	2100      	movs	r1, #0
 8006010:	206a      	movs	r0, #106	; 0x6a
 8006012:	f7fc fc77 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8006016:	2100      	movs	r1, #0
 8006018:	2080      	movs	r0, #128	; 0x80
 800601a:	f7fc fc73 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 800601e:	2100      	movs	r1, #0
 8006020:	2081      	movs	r0, #129	; 0x81
 8006022:	f7fc fc6f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8006026:	2100      	movs	r1, #0
 8006028:	2082      	movs	r0, #130	; 0x82
 800602a:	f7fc fc6b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 800602e:	2100      	movs	r1, #0
 8006030:	2083      	movs	r0, #131	; 0x83
 8006032:	f7fc fc67 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8006036:	2100      	movs	r1, #0
 8006038:	2084      	movs	r0, #132	; 0x84
 800603a:	f7fc fc63 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 800603e:	2100      	movs	r1, #0
 8006040:	2085      	movs	r0, #133	; 0x85
 8006042:	f7fc fc5f 	bl	8002904 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 8006046:	2110      	movs	r1, #16
 8006048:	2090      	movs	r0, #144	; 0x90
 800604a:	f7fc fc5b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 800604e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006052:	2092      	movs	r0, #146	; 0x92
 8006054:	f7fc fc56 	bl	8002904 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8006058:	f240 1133 	movw	r1, #307	; 0x133
 800605c:	2007      	movs	r0, #7
 800605e:	f7fc fc51 	bl	8002904 <LCD_WriteReg>
 8006062:	f001 bb3f 	b.w	80076e4 <LCD_Init+0x3e34>
 8006066:	bf00      	nop
 8006068:	200002f0 	.word	0x200002f0
	} else if (lcddev.id == 0x9320) //测试OK.
 800606c:	4bce      	ldr	r3, [pc, #824]	; (80063a8 <LCD_Init+0x2af8>)
 800606e:	889b      	ldrh	r3, [r3, #4]
 8006070:	f249 3220 	movw	r2, #37664	; 0x9320
 8006074:	4293      	cmp	r3, r2
 8006076:	f040 80ad 	bne.w	80061d4 <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 800607a:	2100      	movs	r1, #0
 800607c:	2000      	movs	r0, #0
 800607e:	f7fc fc41 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 8006082:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006086:	2001      	movs	r0, #1
 8006088:	f7fc fc3c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 800608c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006090:	2002      	movs	r0, #2
 8006092:	f7fc fc37 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 8006096:	f241 0130 	movw	r1, #4144	; 0x1030
 800609a:	2003      	movs	r0, #3
 800609c:	f7fc fc32 	bl	8002904 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 80060a0:	2100      	movs	r1, #0
 80060a2:	2004      	movs	r0, #4
 80060a4:	f7fc fc2e 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 80060a8:	f240 2102 	movw	r1, #514	; 0x202
 80060ac:	2008      	movs	r0, #8
 80060ae:	f7fc fc29 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 80060b2:	2100      	movs	r1, #0
 80060b4:	2009      	movs	r0, #9
 80060b6:	f7fc fc25 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 80060ba:	2100      	movs	r1, #0
 80060bc:	200a      	movs	r0, #10
 80060be:	f7fc fc21 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 80060c2:	2101      	movs	r1, #1
 80060c4:	200c      	movs	r0, #12
 80060c6:	f7fc fc1d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 80060ca:	2100      	movs	r1, #0
 80060cc:	200d      	movs	r0, #13
 80060ce:	f7fc fc19 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 80060d2:	2100      	movs	r1, #0
 80060d4:	200f      	movs	r0, #15
 80060d6:	f7fc fc15 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(50);
 80060da:	2032      	movs	r0, #50	; 0x32
 80060dc:	f7fb f846 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 80060e0:	f240 1101 	movw	r1, #257	; 0x101
 80060e4:	2007      	movs	r0, #7
 80060e6:	f7fc fc0d 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(50);
 80060ea:	2032      	movs	r0, #50	; 0x32
 80060ec:	f7fb f83e 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 80060f0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80060f4:	2010      	movs	r0, #16
 80060f6:	f7fc fc05 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 80060fa:	2107      	movs	r1, #7
 80060fc:	2011      	movs	r0, #17
 80060fe:	f7fc fc01 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 8006102:	f44f 7188 	mov.w	r1, #272	; 0x110
 8006106:	2012      	movs	r0, #18
 8006108:	f7fc fbfc 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 800610c:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8006110:	2013      	movs	r0, #19
 8006112:	f7fc fbf7 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 8006116:	2100      	movs	r1, #0
 8006118:	2029      	movs	r0, #41	; 0x29
 800611a:	f7fc fbf3 	bl	8002904 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 800611e:	f244 0110 	movw	r1, #16400	; 0x4010
 8006122:	202b      	movs	r0, #43	; 0x2b
 8006124:	f7fc fbee 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 8006128:	2100      	movs	r1, #0
 800612a:	2050      	movs	r0, #80	; 0x50
 800612c:	f7fc fbea 	bl	8002904 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 8006130:	21ef      	movs	r1, #239	; 0xef
 8006132:	2051      	movs	r0, #81	; 0x51
 8006134:	f7fc fbe6 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8006138:	2100      	movs	r1, #0
 800613a:	2052      	movs	r0, #82	; 0x52
 800613c:	f7fc fbe2 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 8006140:	f240 113f 	movw	r1, #319	; 0x13f
 8006144:	2053      	movs	r0, #83	; 0x53
 8006146:	f7fc fbdd 	bl	8002904 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 800614a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800614e:	2060      	movs	r0, #96	; 0x60
 8006150:	f7fc fbd8 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 8006154:	2101      	movs	r1, #1
 8006156:	2061      	movs	r0, #97	; 0x61
 8006158:	f7fc fbd4 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 800615c:	2100      	movs	r1, #0
 800615e:	206a      	movs	r0, #106	; 0x6a
 8006160:	f7fc fbd0 	bl	8002904 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 8006164:	2100      	movs	r1, #0
 8006166:	2080      	movs	r0, #128	; 0x80
 8006168:	f7fc fbcc 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 800616c:	2100      	movs	r1, #0
 800616e:	2081      	movs	r0, #129	; 0x81
 8006170:	f7fc fbc8 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 8006174:	2100      	movs	r1, #0
 8006176:	2082      	movs	r0, #130	; 0x82
 8006178:	f7fc fbc4 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 800617c:	2100      	movs	r1, #0
 800617e:	2083      	movs	r0, #131	; 0x83
 8006180:	f7fc fbc0 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 8006184:	2100      	movs	r1, #0
 8006186:	2084      	movs	r0, #132	; 0x84
 8006188:	f7fc fbbc 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 800618c:	2100      	movs	r1, #0
 800618e:	2085      	movs	r0, #133	; 0x85
 8006190:	f7fc fbb8 	bl	8002904 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 8006194:	2110      	movs	r1, #16
 8006196:	2090      	movs	r0, #144	; 0x90
 8006198:	f7fc fbb4 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 800619c:	2100      	movs	r1, #0
 800619e:	2092      	movs	r0, #146	; 0x92
 80061a0:	f7fc fbb0 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 80061a4:	2101      	movs	r1, #1
 80061a6:	2093      	movs	r0, #147	; 0x93
 80061a8:	f7fc fbac 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 80061ac:	f44f 7188 	mov.w	r1, #272	; 0x110
 80061b0:	2095      	movs	r0, #149	; 0x95
 80061b2:	f7fc fba7 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 80061b6:	2100      	movs	r1, #0
 80061b8:	2097      	movs	r0, #151	; 0x97
 80061ba:	f7fc fba3 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 80061be:	2100      	movs	r1, #0
 80061c0:	2098      	movs	r0, #152	; 0x98
 80061c2:	f7fc fb9f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 80061c6:	f240 1173 	movw	r1, #371	; 0x173
 80061ca:	2007      	movs	r0, #7
 80061cc:	f7fc fb9a 	bl	8002904 <LCD_WriteReg>
 80061d0:	f001 ba88 	b.w	80076e4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 80061d4:	4b74      	ldr	r3, [pc, #464]	; (80063a8 <LCD_Init+0x2af8>)
 80061d6:	889b      	ldrh	r3, [r3, #4]
 80061d8:	f249 3231 	movw	r2, #37681	; 0x9331
 80061dc:	4293      	cmp	r3, r2
 80061de:	f040 80e5 	bne.w	80063ac <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 80061e2:	f241 0114 	movw	r1, #4116	; 0x1014
 80061e6:	20e7      	movs	r0, #231	; 0xe7
 80061e8:	f7fc fb8c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 80061ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061f0:	2001      	movs	r0, #1
 80061f2:	f7fc fb87 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 80061f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061fa:	2002      	movs	r0, #2
 80061fc:	f7fc fb82 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8006200:	f241 0138 	movw	r1, #4152	; 0x1038
 8006204:	2003      	movs	r0, #3
 8006206:	f7fc fb7d 	bl	8002904 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 800620a:	f240 2102 	movw	r1, #514	; 0x202
 800620e:	2008      	movs	r0, #8
 8006210:	f7fc fb78 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8006214:	2100      	movs	r1, #0
 8006216:	2009      	movs	r0, #9
 8006218:	f7fc fb74 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 800621c:	2100      	movs	r1, #0
 800621e:	200a      	movs	r0, #10
 8006220:	f7fc fb70 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8006224:	2100      	movs	r1, #0
 8006226:	200c      	movs	r0, #12
 8006228:	f7fc fb6c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 800622c:	2100      	movs	r1, #0
 800622e:	200d      	movs	r0, #13
 8006230:	f7fc fb68 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8006234:	2100      	movs	r1, #0
 8006236:	200f      	movs	r0, #15
 8006238:	f7fc fb64 	bl	8002904 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 800623c:	2100      	movs	r1, #0
 800623e:	2010      	movs	r0, #16
 8006240:	f7fc fb60 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8006244:	2107      	movs	r1, #7
 8006246:	2011      	movs	r0, #17
 8006248:	f7fc fb5c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 800624c:	2100      	movs	r1, #0
 800624e:	2012      	movs	r0, #18
 8006250:	f7fc fb58 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8006254:	2100      	movs	r1, #0
 8006256:	2013      	movs	r0, #19
 8006258:	f7fc fb54 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 800625c:	20c8      	movs	r0, #200	; 0xc8
 800625e:	f7fa ff85 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8006262:	f241 6190 	movw	r1, #5776	; 0x1690
 8006266:	2010      	movs	r0, #16
 8006268:	f7fc fb4c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 800626c:	f240 2127 	movw	r1, #551	; 0x227
 8006270:	2011      	movs	r0, #17
 8006272:	f7fc fb47 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8006276:	2032      	movs	r0, #50	; 0x32
 8006278:	f7fa ff78 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 800627c:	210c      	movs	r1, #12
 800627e:	2012      	movs	r0, #18
 8006280:	f7fc fb40 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8006284:	2032      	movs	r0, #50	; 0x32
 8006286:	f7fa ff71 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 800628a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800628e:	2013      	movs	r0, #19
 8006290:	f7fc fb38 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8006294:	2111      	movs	r1, #17
 8006296:	2029      	movs	r0, #41	; 0x29
 8006298:	f7fc fb34 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 800629c:	210b      	movs	r1, #11
 800629e:	202b      	movs	r0, #43	; 0x2b
 80062a0:	f7fc fb30 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80062a4:	2032      	movs	r0, #50	; 0x32
 80062a6:	f7fa ff61 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 80062aa:	2100      	movs	r1, #0
 80062ac:	2020      	movs	r0, #32
 80062ae:	f7fc fb29 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 80062b2:	f240 113f 	movw	r1, #319	; 0x13f
 80062b6:	2021      	movs	r0, #33	; 0x21
 80062b8:	f7fc fb24 	bl	8002904 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 80062bc:	2100      	movs	r1, #0
 80062be:	2030      	movs	r0, #48	; 0x30
 80062c0:	f7fc fb20 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 80062c4:	f44f 7183 	mov.w	r1, #262	; 0x106
 80062c8:	2031      	movs	r0, #49	; 0x31
 80062ca:	f7fc fb1b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 80062ce:	2100      	movs	r1, #0
 80062d0:	2032      	movs	r0, #50	; 0x32
 80062d2:	f7fc fb17 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80062d6:	f44f 7101 	mov.w	r1, #516	; 0x204
 80062da:	2035      	movs	r0, #53	; 0x35
 80062dc:	f7fc fb12 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 80062e0:	f241 610a 	movw	r1, #5642	; 0x160a
 80062e4:	2036      	movs	r0, #54	; 0x36
 80062e6:	f7fc fb0d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 80062ea:	f240 7107 	movw	r1, #1799	; 0x707
 80062ee:	2037      	movs	r0, #55	; 0x37
 80062f0:	f7fc fb08 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 80062f4:	f44f 7183 	mov.w	r1, #262	; 0x106
 80062f8:	2038      	movs	r0, #56	; 0x38
 80062fa:	f7fc fb03 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 80062fe:	f240 7107 	movw	r1, #1799	; 0x707
 8006302:	2039      	movs	r0, #57	; 0x39
 8006304:	f7fc fafe 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8006308:	f240 4102 	movw	r1, #1026	; 0x402
 800630c:	203c      	movs	r0, #60	; 0x3c
 800630e:	f7fc faf9 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8006312:	f640 410f 	movw	r1, #3087	; 0xc0f
 8006316:	203d      	movs	r0, #61	; 0x3d
 8006318:	f7fc faf4 	bl	8002904 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 800631c:	2100      	movs	r1, #0
 800631e:	2050      	movs	r0, #80	; 0x50
 8006320:	f7fc faf0 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8006324:	21ef      	movs	r1, #239	; 0xef
 8006326:	2051      	movs	r0, #81	; 0x51
 8006328:	f7fc faec 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 800632c:	2100      	movs	r1, #0
 800632e:	2052      	movs	r0, #82	; 0x52
 8006330:	f7fc fae8 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8006334:	f240 113f 	movw	r1, #319	; 0x13f
 8006338:	2053      	movs	r0, #83	; 0x53
 800633a:	f7fc fae3 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 800633e:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006342:	2060      	movs	r0, #96	; 0x60
 8006344:	f7fc fade 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8006348:	2101      	movs	r1, #1
 800634a:	2061      	movs	r0, #97	; 0x61
 800634c:	f7fc fada 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8006350:	2100      	movs	r1, #0
 8006352:	206a      	movs	r0, #106	; 0x6a
 8006354:	f7fc fad6 	bl	8002904 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8006358:	2100      	movs	r1, #0
 800635a:	2080      	movs	r0, #128	; 0x80
 800635c:	f7fc fad2 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8006360:	2100      	movs	r1, #0
 8006362:	2081      	movs	r0, #129	; 0x81
 8006364:	f7fc face 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8006368:	2100      	movs	r1, #0
 800636a:	2082      	movs	r0, #130	; 0x82
 800636c:	f7fc faca 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8006370:	2100      	movs	r1, #0
 8006372:	2083      	movs	r0, #131	; 0x83
 8006374:	f7fc fac6 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8006378:	2100      	movs	r1, #0
 800637a:	2084      	movs	r0, #132	; 0x84
 800637c:	f7fc fac2 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8006380:	2100      	movs	r1, #0
 8006382:	2085      	movs	r0, #133	; 0x85
 8006384:	f7fc fabe 	bl	8002904 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8006388:	2110      	movs	r1, #16
 800638a:	2090      	movs	r0, #144	; 0x90
 800638c:	f7fc faba 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8006390:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006394:	2092      	movs	r0, #146	; 0x92
 8006396:	f7fc fab5 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 800639a:	f240 1133 	movw	r1, #307	; 0x133
 800639e:	2007      	movs	r0, #7
 80063a0:	f7fc fab0 	bl	8002904 <LCD_WriteReg>
 80063a4:	f001 b99e 	b.w	80076e4 <LCD_Init+0x3e34>
 80063a8:	200002f0 	.word	0x200002f0
	} else if (lcddev.id == 0x5408) {
 80063ac:	4be2      	ldr	r3, [pc, #904]	; (8006738 <LCD_Init+0x2e88>)
 80063ae:	889b      	ldrh	r3, [r3, #4]
 80063b0:	f245 4208 	movw	r2, #21512	; 0x5408
 80063b4:	4293      	cmp	r3, r2
 80063b6:	f040 80a3 	bne.w	8006500 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 80063ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063be:	2001      	movs	r0, #1
 80063c0:	f7fc faa0 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 80063c4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80063c8:	2002      	movs	r0, #2
 80063ca:	f7fc fa9b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 80063ce:	f241 0130 	movw	r1, #4144	; 0x1030
 80063d2:	2003      	movs	r0, #3
 80063d4:	f7fc fa96 	bl	8002904 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 80063d8:	2100      	movs	r1, #0
 80063da:	2004      	movs	r0, #4
 80063dc:	f7fc fa92 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 80063e0:	f240 2107 	movw	r1, #519	; 0x207
 80063e4:	2008      	movs	r0, #8
 80063e6:	f7fc fa8d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 80063ea:	2100      	movs	r1, #0
 80063ec:	2009      	movs	r0, #9
 80063ee:	f7fc fa89 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 80063f2:	2100      	movs	r1, #0
 80063f4:	200a      	movs	r0, #10
 80063f6:	f7fc fa85 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 80063fa:	2100      	movs	r1, #0
 80063fc:	200c      	movs	r0, #12
 80063fe:	f7fc fa81 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 8006402:	2100      	movs	r1, #0
 8006404:	200d      	movs	r0, #13
 8006406:	f7fc fa7d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 800640a:	2100      	movs	r1, #0
 800640c:	200f      	movs	r0, #15
 800640e:	f7fc fa79 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(20);
 8006412:	2014      	movs	r0, #20
 8006414:	f7fa feaa 	bl	800116c <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8006418:	f241 61b0 	movw	r1, #5808	; 0x16b0
 800641c:	2010      	movs	r0, #16
 800641e:	f7fc fa71 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 8006422:	2101      	movs	r1, #1
 8006424:	2011      	movs	r0, #17
 8006426:	f7fc fa6d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 800642a:	2101      	movs	r1, #1
 800642c:	2017      	movs	r0, #23
 800642e:	f7fc fa69 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 8006432:	f44f 719c 	mov.w	r1, #312	; 0x138
 8006436:	2012      	movs	r0, #18
 8006438:	f7fc fa64 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 800643c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006440:	2013      	movs	r0, #19
 8006442:	f7fc fa5f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 8006446:	2109      	movs	r1, #9
 8006448:	2029      	movs	r0, #41	; 0x29
 800644a:	f7fc fa5b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 800644e:	2109      	movs	r1, #9
 8006450:	202a      	movs	r0, #42	; 0x2a
 8006452:	f7fc fa57 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 8006456:	2100      	movs	r1, #0
 8006458:	20a4      	movs	r0, #164	; 0xa4
 800645a:	f7fc fa53 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 800645e:	2100      	movs	r1, #0
 8006460:	2050      	movs	r0, #80	; 0x50
 8006462:	f7fc fa4f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 8006466:	21ef      	movs	r1, #239	; 0xef
 8006468:	2051      	movs	r0, #81	; 0x51
 800646a:	f7fc fa4b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 800646e:	2100      	movs	r1, #0
 8006470:	2052      	movs	r0, #82	; 0x52
 8006472:	f7fc fa47 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8006476:	f240 113f 	movw	r1, #319	; 0x13f
 800647a:	2053      	movs	r0, #83	; 0x53
 800647c:	f7fc fa42 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8006480:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006484:	2060      	movs	r0, #96	; 0x60
 8006486:	f7fc fa3d 	bl	8002904 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 800648a:	2101      	movs	r1, #1
 800648c:	2061      	movs	r0, #97	; 0x61
 800648e:	f7fc fa39 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8006492:	2100      	movs	r1, #0
 8006494:	206a      	movs	r0, #106	; 0x6a
 8006496:	f7fc fa35 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 800649a:	2100      	movs	r1, #0
 800649c:	2080      	movs	r0, #128	; 0x80
 800649e:	f7fc fa31 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 80064a2:	2100      	movs	r1, #0
 80064a4:	2081      	movs	r0, #129	; 0x81
 80064a6:	f7fc fa2d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 80064aa:	2100      	movs	r1, #0
 80064ac:	2082      	movs	r0, #130	; 0x82
 80064ae:	f7fc fa29 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 80064b2:	2100      	movs	r1, #0
 80064b4:	2083      	movs	r0, #131	; 0x83
 80064b6:	f7fc fa25 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 80064ba:	2100      	movs	r1, #0
 80064bc:	2084      	movs	r0, #132	; 0x84
 80064be:	f7fc fa21 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 80064c2:	2100      	movs	r1, #0
 80064c4:	2085      	movs	r0, #133	; 0x85
 80064c6:	f7fc fa1d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 80064ca:	2113      	movs	r1, #19
 80064cc:	2090      	movs	r0, #144	; 0x90
 80064ce:	f7fc fa19 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 80064d2:	2100      	movs	r1, #0
 80064d4:	2092      	movs	r0, #146	; 0x92
 80064d6:	f7fc fa15 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 80064da:	2103      	movs	r1, #3
 80064dc:	2093      	movs	r0, #147	; 0x93
 80064de:	f7fc fa11 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 80064e2:	f44f 7188 	mov.w	r1, #272	; 0x110
 80064e6:	2095      	movs	r0, #149	; 0x95
 80064e8:	f7fc fa0c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 80064ec:	f240 1173 	movw	r1, #371	; 0x173
 80064f0:	2007      	movs	r0, #7
 80064f2:	f7fc fa07 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(50);
 80064f6:	2032      	movs	r0, #50	; 0x32
 80064f8:	f7fa fe38 	bl	800116c <HAL_Delay>
 80064fc:	f001 b8f2 	b.w	80076e4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8006500:	4b8d      	ldr	r3, [pc, #564]	; (8006738 <LCD_Init+0x2e88>)
 8006502:	889b      	ldrh	r3, [r3, #4]
 8006504:	f241 5205 	movw	r2, #5381	; 0x1505
 8006508:	4293      	cmp	r3, r2
 800650a:	f040 8117 	bne.w	800673c <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 800650e:	2100      	movs	r1, #0
 8006510:	2007      	movs	r0, #7
 8006512:	f7fc f9f7 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(50);
 8006516:	2032      	movs	r0, #50	; 0x32
 8006518:	f7fa fe28 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 800651c:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8006520:	2012      	movs	r0, #18
 8006522:	f7fc f9ef 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8006526:	2101      	movs	r1, #1
 8006528:	20a4      	movs	r0, #164	; 0xa4
 800652a:	f7fc f9eb 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 800652e:	210f      	movs	r1, #15
 8006530:	2008      	movs	r0, #8
 8006532:	f7fc f9e7 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8006536:	2108      	movs	r1, #8
 8006538:	200a      	movs	r0, #10
 800653a:	f7fc f9e3 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 800653e:	2108      	movs	r1, #8
 8006540:	200d      	movs	r0, #13
 8006542:	f7fc f9df 	bl	8002904 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8006546:	f240 7107 	movw	r1, #1799	; 0x707
 800654a:	2030      	movs	r0, #48	; 0x30
 800654c:	f7fc f9da 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8006550:	2107      	movs	r1, #7
 8006552:	2031      	movs	r0, #49	; 0x31
 8006554:	f7fc f9d6 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8006558:	f240 6103 	movw	r1, #1539	; 0x603
 800655c:	2032      	movs	r0, #50	; 0x32
 800655e:	f7fc f9d1 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8006562:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006566:	2033      	movs	r0, #51	; 0x33
 8006568:	f7fc f9cc 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 800656c:	f240 2102 	movw	r1, #514	; 0x202
 8006570:	2034      	movs	r0, #52	; 0x34
 8006572:	f7fc f9c7 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8006576:	2102      	movs	r1, #2
 8006578:	2035      	movs	r0, #53	; 0x35
 800657a:	f7fc f9c3 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 800657e:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8006582:	2036      	movs	r0, #54	; 0x36
 8006584:	f7fc f9be 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8006588:	f240 7107 	movw	r1, #1799	; 0x707
 800658c:	2037      	movs	r0, #55	; 0x37
 800658e:	f7fc f9b9 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8006592:	2100      	movs	r1, #0
 8006594:	2038      	movs	r0, #56	; 0x38
 8006596:	f7fc f9b5 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 800659a:	2100      	movs	r1, #0
 800659c:	2039      	movs	r0, #57	; 0x39
 800659e:	f7fc f9b1 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 80065a2:	f240 7107 	movw	r1, #1799	; 0x707
 80065a6:	203a      	movs	r0, #58	; 0x3a
 80065a8:	f7fc f9ac 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 80065ac:	2100      	movs	r1, #0
 80065ae:	203b      	movs	r0, #59	; 0x3b
 80065b0:	f7fc f9a8 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 80065b4:	2107      	movs	r1, #7
 80065b6:	203c      	movs	r0, #60	; 0x3c
 80065b8:	f7fc f9a4 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 80065bc:	2100      	movs	r1, #0
 80065be:	203d      	movs	r0, #61	; 0x3d
 80065c0:	f7fc f9a0 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(50);
 80065c4:	2032      	movs	r0, #50	; 0x32
 80065c6:	f7fa fdd1 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 80065ca:	2101      	movs	r1, #1
 80065cc:	2007      	movs	r0, #7
 80065ce:	f7fc f999 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 80065d2:	2101      	movs	r1, #1
 80065d4:	2017      	movs	r0, #23
 80065d6:	f7fc f995 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(50);
 80065da:	2032      	movs	r0, #50	; 0x32
 80065dc:	f7fa fdc6 	bl	800116c <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 80065e0:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 80065e4:	2010      	movs	r0, #16
 80065e6:	f7fc f98d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 80065ea:	f240 2117 	movw	r1, #535	; 0x217
 80065ee:	2011      	movs	r0, #17
 80065f0:	f7fc f988 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 80065f4:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80065f8:	2012      	movs	r0, #18
 80065fa:	f7fc f983 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 80065fe:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8006602:	2013      	movs	r0, #19
 8006604:	f7fc f97e 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8006608:	2100      	movs	r1, #0
 800660a:	202a      	movs	r0, #42	; 0x2a
 800660c:	f7fc f97a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8006610:	210a      	movs	r1, #10
 8006612:	2029      	movs	r0, #41	; 0x29
 8006614:	f7fc f976 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8006618:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800661c:	2012      	movs	r0, #18
 800661e:	f7fc f971 	bl	8002904 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8006622:	2100      	movs	r1, #0
 8006624:	2050      	movs	r0, #80	; 0x50
 8006626:	f7fc f96d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 800662a:	21ef      	movs	r1, #239	; 0xef
 800662c:	2051      	movs	r0, #81	; 0x51
 800662e:	f7fc f969 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8006632:	2100      	movs	r1, #0
 8006634:	2052      	movs	r0, #82	; 0x52
 8006636:	f7fc f965 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800663a:	f240 113f 	movw	r1, #319	; 0x13f
 800663e:	2053      	movs	r0, #83	; 0x53
 8006640:	f7fc f960 	bl	8002904 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8006644:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006648:	2060      	movs	r0, #96	; 0x60
 800664a:	f7fc f95b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 800664e:	2101      	movs	r1, #1
 8006650:	2061      	movs	r0, #97	; 0x61
 8006652:	f7fc f957 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8006656:	2100      	movs	r1, #0
 8006658:	206a      	movs	r0, #106	; 0x6a
 800665a:	f7fc f953 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 800665e:	2100      	movs	r1, #0
 8006660:	2080      	movs	r0, #128	; 0x80
 8006662:	f7fc f94f 	bl	8002904 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8006666:	2100      	movs	r1, #0
 8006668:	2081      	movs	r0, #129	; 0x81
 800666a:	f7fc f94b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 800666e:	2100      	movs	r1, #0
 8006670:	2082      	movs	r0, #130	; 0x82
 8006672:	f7fc f947 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8006676:	2100      	movs	r1, #0
 8006678:	2083      	movs	r0, #131	; 0x83
 800667a:	f7fc f943 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 800667e:	2100      	movs	r1, #0
 8006680:	2084      	movs	r0, #132	; 0x84
 8006682:	f7fc f93f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8006686:	2100      	movs	r1, #0
 8006688:	2085      	movs	r0, #133	; 0x85
 800668a:	f7fc f93b 	bl	8002904 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 800668e:	2113      	movs	r1, #19
 8006690:	2090      	movs	r0, #144	; 0x90
 8006692:	f7fc f937 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8006696:	f44f 7140 	mov.w	r1, #768	; 0x300
 800669a:	2092      	movs	r0, #146	; 0x92
 800669c:	f7fc f932 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 80066a0:	2105      	movs	r1, #5
 80066a2:	2093      	movs	r0, #147	; 0x93
 80066a4:	f7fc f92e 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 80066a8:	2100      	movs	r1, #0
 80066aa:	2095      	movs	r0, #149	; 0x95
 80066ac:	f7fc f92a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 80066b0:	2100      	movs	r1, #0
 80066b2:	2097      	movs	r0, #151	; 0x97
 80066b4:	f7fc f926 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 80066b8:	2100      	movs	r1, #0
 80066ba:	2098      	movs	r0, #152	; 0x98
 80066bc:	f7fc f922 	bl	8002904 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 80066c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066c4:	2001      	movs	r0, #1
 80066c6:	f7fc f91d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 80066ca:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80066ce:	2002      	movs	r0, #2
 80066d0:	f7fc f918 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 80066d4:	f241 0138 	movw	r1, #4152	; 0x1038
 80066d8:	2003      	movs	r0, #3
 80066da:	f7fc f913 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80066de:	2100      	movs	r1, #0
 80066e0:	2004      	movs	r0, #4
 80066e2:	f7fc f90f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80066e6:	2100      	movs	r1, #0
 80066e8:	200c      	movs	r0, #12
 80066ea:	f7fc f90b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80066ee:	2100      	movs	r1, #0
 80066f0:	200f      	movs	r0, #15
 80066f2:	f7fc f907 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 80066f6:	2100      	movs	r1, #0
 80066f8:	2020      	movs	r0, #32
 80066fa:	f7fc f903 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 80066fe:	2100      	movs	r1, #0
 8006700:	2021      	movs	r0, #33	; 0x21
 8006702:	f7fc f8ff 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8006706:	2121      	movs	r1, #33	; 0x21
 8006708:	2007      	movs	r0, #7
 800670a:	f7fc f8fb 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(20);
 800670e:	2014      	movs	r0, #20
 8006710:	f7fa fd2c 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8006714:	2161      	movs	r1, #97	; 0x61
 8006716:	2007      	movs	r0, #7
 8006718:	f7fc f8f4 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(20);
 800671c:	2014      	movs	r0, #20
 800671e:	f7fa fd25 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8006722:	f240 1173 	movw	r1, #371	; 0x173
 8006726:	2007      	movs	r0, #7
 8006728:	f7fc f8ec 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(20);
 800672c:	2014      	movs	r0, #20
 800672e:	f7fa fd1d 	bl	800116c <HAL_Delay>
 8006732:	f000 bfd7 	b.w	80076e4 <LCD_Init+0x3e34>
 8006736:	bf00      	nop
 8006738:	200002f0 	.word	0x200002f0
	} else if (lcddev.id == 0xB505) {
 800673c:	4bf0      	ldr	r3, [pc, #960]	; (8006b00 <LCD_Init+0x3250>)
 800673e:	889b      	ldrh	r3, [r3, #4]
 8006740:	f24b 5205 	movw	r2, #46341	; 0xb505
 8006744:	4293      	cmp	r3, r2
 8006746:	f040 8103 	bne.w	8006950 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 800674a:	2100      	movs	r1, #0
 800674c:	2000      	movs	r0, #0
 800674e:	f7fc f8d9 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8006752:	2100      	movs	r1, #0
 8006754:	2000      	movs	r0, #0
 8006756:	f7fc f8d5 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800675a:	2100      	movs	r1, #0
 800675c:	2000      	movs	r0, #0
 800675e:	f7fc f8d1 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8006762:	2100      	movs	r1, #0
 8006764:	2000      	movs	r0, #0
 8006766:	f7fc f8cd 	bl	8002904 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 800676a:	2101      	movs	r1, #1
 800676c:	20a4      	movs	r0, #164	; 0xa4
 800676e:	f7fc f8c9 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(20);
 8006772:	2014      	movs	r0, #20
 8006774:	f7fa fcfa 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8006778:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800677c:	2060      	movs	r0, #96	; 0x60
 800677e:	f7fc f8c1 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8006782:	f240 2102 	movw	r1, #514	; 0x202
 8006786:	2008      	movs	r0, #8
 8006788:	f7fc f8bc 	bl	8002904 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 800678c:	f44f 7105 	mov.w	r1, #532	; 0x214
 8006790:	2030      	movs	r0, #48	; 0x30
 8006792:	f7fc f8b7 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8006796:	f243 7115 	movw	r1, #14101	; 0x3715
 800679a:	2031      	movs	r0, #49	; 0x31
 800679c:	f7fc f8b2 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 80067a0:	f240 6104 	movw	r1, #1540	; 0x604
 80067a4:	2032      	movs	r0, #50	; 0x32
 80067a6:	f7fc f8ad 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 80067aa:	f640 6116 	movw	r1, #3606	; 0xe16
 80067ae:	2033      	movs	r0, #51	; 0x33
 80067b0:	f7fc f8a8 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 80067b4:	f242 2111 	movw	r1, #8721	; 0x2211
 80067b8:	2034      	movs	r0, #52	; 0x34
 80067ba:	f7fc f8a3 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 80067be:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 80067c2:	2035      	movs	r0, #53	; 0x35
 80067c4:	f7fc f89e 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 80067c8:	f248 5107 	movw	r1, #34055	; 0x8507
 80067cc:	2036      	movs	r0, #54	; 0x36
 80067ce:	f7fc f899 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 80067d2:	f241 4107 	movw	r1, #5127	; 0x1407
 80067d6:	2037      	movs	r0, #55	; 0x37
 80067d8:	f7fc f894 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 80067dc:	f241 4103 	movw	r1, #5123	; 0x1403
 80067e0:	2038      	movs	r0, #56	; 0x38
 80067e2:	f7fc f88f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 80067e6:	2120      	movs	r1, #32
 80067e8:	2039      	movs	r0, #57	; 0x39
 80067ea:	f7fc f88b 	bl	8002904 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 80067ee:	211a      	movs	r1, #26
 80067f0:	2090      	movs	r0, #144	; 0x90
 80067f2:	f7fc f887 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 80067f6:	2100      	movs	r1, #0
 80067f8:	2010      	movs	r0, #16
 80067fa:	f7fc f883 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80067fe:	2107      	movs	r1, #7
 8006800:	2011      	movs	r0, #17
 8006802:	f7fc f87f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8006806:	2100      	movs	r1, #0
 8006808:	2012      	movs	r0, #18
 800680a:	f7fc f87b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 800680e:	2100      	movs	r1, #0
 8006810:	2013      	movs	r0, #19
 8006812:	f7fc f877 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(20);
 8006816:	2014      	movs	r0, #20
 8006818:	f7fa fca8 	bl	800116c <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 800681c:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8006820:	2010      	movs	r0, #16
 8006822:	f7fc f86f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8006826:	f240 1137 	movw	r1, #311	; 0x137
 800682a:	2011      	movs	r0, #17
 800682c:	f7fc f86a 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(20);
 8006830:	2014      	movs	r0, #20
 8006832:	f7fa fc9b 	bl	800116c <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8006836:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800683a:	2012      	movs	r0, #18
 800683c:	f7fc f862 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(20);
 8006840:	2014      	movs	r0, #20
 8006842:	f7fa fc93 	bl	800116c <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 8006846:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800684a:	2013      	movs	r0, #19
 800684c:	f7fc f85a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8006850:	2180      	movs	r1, #128	; 0x80
 8006852:	202a      	movs	r0, #42	; 0x2a
 8006854:	f7fc f856 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8006858:	2148      	movs	r1, #72	; 0x48
 800685a:	2029      	movs	r0, #41	; 0x29
 800685c:	f7fc f852 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(20);
 8006860:	2014      	movs	r0, #20
 8006862:	f7fa fc83 	bl	800116c <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8006866:	f44f 7180 	mov.w	r1, #256	; 0x100
 800686a:	2001      	movs	r0, #1
 800686c:	f7fc f84a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8006870:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006874:	2002      	movs	r0, #2
 8006876:	f7fc f845 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 800687a:	f241 0138 	movw	r1, #4152	; 0x1038
 800687e:	2003      	movs	r0, #3
 8006880:	f7fc f840 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8006884:	f240 2102 	movw	r1, #514	; 0x202
 8006888:	2008      	movs	r0, #8
 800688a:	f7fc f83b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 800688e:	2100      	movs	r1, #0
 8006890:	200a      	movs	r0, #10
 8006892:	f7fc f837 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8006896:	2100      	movs	r1, #0
 8006898:	200c      	movs	r0, #12
 800689a:	f7fc f833 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 800689e:	2100      	movs	r1, #0
 80068a0:	200d      	movs	r0, #13
 80068a2:	f7fc f82f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 80068a6:	2130      	movs	r1, #48	; 0x30
 80068a8:	200e      	movs	r0, #14
 80068aa:	f7fc f82b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 80068ae:	2100      	movs	r1, #0
 80068b0:	2050      	movs	r0, #80	; 0x50
 80068b2:	f7fc f827 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 80068b6:	21ef      	movs	r1, #239	; 0xef
 80068b8:	2051      	movs	r0, #81	; 0x51
 80068ba:	f7fc f823 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80068be:	2100      	movs	r1, #0
 80068c0:	2052      	movs	r0, #82	; 0x52
 80068c2:	f7fc f81f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 80068c6:	f240 113f 	movw	r1, #319	; 0x13f
 80068ca:	2053      	movs	r0, #83	; 0x53
 80068cc:	f7fc f81a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 80068d0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80068d4:	2060      	movs	r0, #96	; 0x60
 80068d6:	f7fc f815 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80068da:	2101      	movs	r1, #1
 80068dc:	2061      	movs	r0, #97	; 0x61
 80068de:	f7fc f811 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 80068e2:	2100      	movs	r1, #0
 80068e4:	206a      	movs	r0, #106	; 0x6a
 80068e6:	f7fc f80d 	bl	8002904 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 80068ea:	2111      	movs	r1, #17
 80068ec:	2090      	movs	r0, #144	; 0x90
 80068ee:	f7fc f809 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80068f2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80068f6:	2092      	movs	r0, #146	; 0x92
 80068f8:	f7fc f804 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 80068fc:	f240 4102 	movw	r1, #1026	; 0x402
 8006900:	2093      	movs	r0, #147	; 0x93
 8006902:	f7fb ffff 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 8006906:	2102      	movs	r1, #2
 8006908:	2094      	movs	r0, #148	; 0x94
 800690a:	f7fb fffb 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(20);
 800690e:	2014      	movs	r0, #20
 8006910:	f7fa fc2c 	bl	800116c <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 8006914:	2101      	movs	r1, #1
 8006916:	2007      	movs	r0, #7
 8006918:	f7fb fff4 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(20);
 800691c:	2014      	movs	r0, #20
 800691e:	f7fa fc25 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8006922:	2161      	movs	r1, #97	; 0x61
 8006924:	2007      	movs	r0, #7
 8006926:	f7fb ffed 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 800692a:	f240 1173 	movw	r1, #371	; 0x173
 800692e:	2007      	movs	r0, #7
 8006930:	f7fb ffe8 	bl	8002904 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8006934:	2100      	movs	r1, #0
 8006936:	2020      	movs	r0, #32
 8006938:	f7fb ffe4 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 800693c:	2100      	movs	r1, #0
 800693e:	2021      	movs	r0, #33	; 0x21
 8006940:	f7fb ffe0 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 8006944:	2122      	movs	r1, #34	; 0x22
 8006946:	2000      	movs	r0, #0
 8006948:	f7fb ffdc 	bl	8002904 <LCD_WriteReg>
 800694c:	f000 beca 	b.w	80076e4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8006950:	4b6b      	ldr	r3, [pc, #428]	; (8006b00 <LCD_Init+0x3250>)
 8006952:	889b      	ldrh	r3, [r3, #4]
 8006954:	f24c 5205 	movw	r2, #50437	; 0xc505
 8006958:	4293      	cmp	r3, r2
 800695a:	f040 80d3 	bne.w	8006b04 <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 800695e:	2100      	movs	r1, #0
 8006960:	2000      	movs	r0, #0
 8006962:	f7fb ffcf 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8006966:	2100      	movs	r1, #0
 8006968:	2000      	movs	r0, #0
 800696a:	f7fb ffcb 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(20);
 800696e:	2014      	movs	r0, #20
 8006970:	f7fa fbfc 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 8006974:	2100      	movs	r1, #0
 8006976:	2000      	movs	r0, #0
 8006978:	f7fb ffc4 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800697c:	2100      	movs	r1, #0
 800697e:	2000      	movs	r0, #0
 8006980:	f7fb ffc0 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8006984:	2100      	movs	r1, #0
 8006986:	2000      	movs	r0, #0
 8006988:	f7fb ffbc 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800698c:	2100      	movs	r1, #0
 800698e:	2000      	movs	r0, #0
 8006990:	f7fb ffb8 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 8006994:	2101      	movs	r1, #1
 8006996:	20a4      	movs	r0, #164	; 0xa4
 8006998:	f7fb ffb4 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(20);
 800699c:	2014      	movs	r0, #20
 800699e:	f7fa fbe5 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 80069a2:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80069a6:	2060      	movs	r0, #96	; 0x60
 80069a8:	f7fb ffac 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 80069ac:	f640 0106 	movw	r1, #2054	; 0x806
 80069b0:	2008      	movs	r0, #8
 80069b2:	f7fb ffa7 	bl	8002904 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 80069b6:	f240 7103 	movw	r1, #1795	; 0x703
 80069ba:	2030      	movs	r0, #48	; 0x30
 80069bc:	f7fb ffa2 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 80069c0:	2101      	movs	r1, #1
 80069c2:	2031      	movs	r0, #49	; 0x31
 80069c4:	f7fb ff9e 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 80069c8:	2104      	movs	r1, #4
 80069ca:	2032      	movs	r0, #50	; 0x32
 80069cc:	f7fb ff9a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 80069d0:	f44f 7181 	mov.w	r1, #258	; 0x102
 80069d4:	2033      	movs	r0, #51	; 0x33
 80069d6:	f7fb ff95 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 80069da:	f44f 7140 	mov.w	r1, #768	; 0x300
 80069de:	2034      	movs	r0, #52	; 0x34
 80069e0:	f7fb ff90 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 80069e4:	f240 1103 	movw	r1, #259	; 0x103
 80069e8:	2035      	movs	r0, #53	; 0x35
 80069ea:	f7fb ff8b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 80069ee:	211f      	movs	r1, #31
 80069f0:	2036      	movs	r0, #54	; 0x36
 80069f2:	f7fb ff87 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 80069f6:	f240 7103 	movw	r1, #1795	; 0x703
 80069fa:	2037      	movs	r0, #55	; 0x37
 80069fc:	f7fb ff82 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 8006a00:	2101      	movs	r1, #1
 8006a02:	2038      	movs	r0, #56	; 0x38
 8006a04:	f7fb ff7e 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 8006a08:	2104      	movs	r1, #4
 8006a0a:	2039      	movs	r0, #57	; 0x39
 8006a0c:	f7fb ff7a 	bl	8002904 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8006a10:	2115      	movs	r1, #21
 8006a12:	2090      	movs	r0, #144	; 0x90
 8006a14:	f7fb ff76 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8006a18:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8006a1c:	2010      	movs	r0, #16
 8006a1e:	f7fb ff71 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 8006a22:	f240 2147 	movw	r1, #583	; 0x247
 8006a26:	2011      	movs	r0, #17
 8006a28:	f7fb ff6c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 8006a2c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8006a30:	2012      	movs	r0, #18
 8006a32:	f7fb ff67 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 8006a36:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8006a3a:	2013      	movs	r0, #19
 8006a3c:	f7fb ff62 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(120);
 8006a40:	2078      	movs	r0, #120	; 0x78
 8006a42:	f7fa fb93 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 8006a46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a4a:	2001      	movs	r0, #1
 8006a4c:	f7fb ff5a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8006a50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a54:	2002      	movs	r0, #2
 8006a56:	f7fb ff55 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8006a5a:	f241 0130 	movw	r1, #4144	; 0x1030
 8006a5e:	2003      	movs	r0, #3
 8006a60:	f7fb ff50 	bl	8002904 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8006a64:	2108      	movs	r1, #8
 8006a66:	200a      	movs	r0, #10
 8006a68:	f7fb ff4c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	200c      	movs	r0, #12
 8006a70:	f7fb ff48 	bl	8002904 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8006a74:	2120      	movs	r1, #32
 8006a76:	200e      	movs	r0, #14
 8006a78:	f7fb ff44 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	200f      	movs	r0, #15
 8006a80:	f7fb ff40 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8006a84:	2100      	movs	r1, #0
 8006a86:	2020      	movs	r0, #32
 8006a88:	f7fb ff3c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	2021      	movs	r0, #33	; 0x21
 8006a90:	f7fb ff38 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 8006a94:	213d      	movs	r1, #61	; 0x3d
 8006a96:	202a      	movs	r0, #42	; 0x2a
 8006a98:	f7fb ff34 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(20);
 8006a9c:	2014      	movs	r0, #20
 8006a9e:	f7fa fb65 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8006aa2:	212d      	movs	r1, #45	; 0x2d
 8006aa4:	2029      	movs	r0, #41	; 0x29
 8006aa6:	f7fb ff2d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8006aaa:	2100      	movs	r1, #0
 8006aac:	2050      	movs	r0, #80	; 0x50
 8006aae:	f7fb ff29 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8006ab2:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 8006ab6:	2051      	movs	r0, #81	; 0x51
 8006ab8:	f7fb ff24 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8006abc:	2100      	movs	r1, #0
 8006abe:	2052      	movs	r0, #82	; 0x52
 8006ac0:	f7fb ff20 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8006ac4:	f240 113f 	movw	r1, #319	; 0x13f
 8006ac8:	2053      	movs	r0, #83	; 0x53
 8006aca:	f7fb ff1b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8006ace:	2100      	movs	r1, #0
 8006ad0:	2061      	movs	r0, #97	; 0x61
 8006ad2:	f7fb ff17 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	206a      	movs	r0, #106	; 0x6a
 8006ada:	f7fb ff13 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8006ade:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006ae2:	2092      	movs	r0, #146	; 0x92
 8006ae4:	f7fb ff0e 	bl	8002904 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 8006ae8:	2105      	movs	r1, #5
 8006aea:	2093      	movs	r0, #147	; 0x93
 8006aec:	f7fb ff0a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8006af0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006af4:	2007      	movs	r0, #7
 8006af6:	f7fb ff05 	bl	8002904 <LCD_WriteReg>
 8006afa:	f000 bdf3 	b.w	80076e4 <LCD_Init+0x3e34>
 8006afe:	bf00      	nop
 8006b00:	200002f0 	.word	0x200002f0
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 8006b04:	4bc2      	ldr	r3, [pc, #776]	; (8006e10 <LCD_Init+0x3560>)
 8006b06:	889b      	ldrh	r3, [r3, #4]
 8006b08:	f648 1289 	movw	r2, #35209	; 0x8989
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	f040 80bc 	bne.w	8006c8a <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 8006b12:	2101      	movs	r1, #1
 8006b14:	2000      	movs	r0, #0
 8006b16:	f7fb fef5 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 8006b1a:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 8006b1e:	2003      	movs	r0, #3
 8006b20:	f7fb fef0 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8006b24:	2100      	movs	r1, #0
 8006b26:	200c      	movs	r0, #12
 8006b28:	f7fb feec 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 8006b2c:	f640 010c 	movw	r1, #2060	; 0x80c
 8006b30:	200d      	movs	r0, #13
 8006b32:	f7fb fee7 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 8006b36:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 8006b3a:	200e      	movs	r0, #14
 8006b3c:	f7fb fee2 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 8006b40:	21b0      	movs	r1, #176	; 0xb0
 8006b42:	201e      	movs	r0, #30
 8006b44:	f7fb fede 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8006b48:	f642 313f 	movw	r1, #11071	; 0x2b3f
 8006b4c:	2001      	movs	r0, #1
 8006b4e:	f7fb fed9 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 8006b52:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006b56:	2002      	movs	r0, #2
 8006b58:	f7fb fed4 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	2010      	movs	r0, #16
 8006b60:	f7fb fed0 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 8006b64:	f246 0178 	movw	r1, #24696	; 0x6078
 8006b68:	2011      	movs	r0, #17
 8006b6a:	f7fb fecb 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 8006b6e:	2100      	movs	r1, #0
 8006b70:	2005      	movs	r0, #5
 8006b72:	f7fb fec7 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 8006b76:	2100      	movs	r1, #0
 8006b78:	2006      	movs	r0, #6
 8006b7a:	f7fb fec3 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 8006b7e:	f64e 711c 	movw	r1, #61212	; 0xef1c
 8006b82:	2016      	movs	r0, #22
 8006b84:	f7fb febe 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8006b88:	2103      	movs	r1, #3
 8006b8a:	2017      	movs	r0, #23
 8006b8c:	f7fb feba 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8006b90:	f240 2133 	movw	r1, #563	; 0x233
 8006b94:	2007      	movs	r0, #7
 8006b96:	f7fb feb5 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	200b      	movs	r0, #11
 8006b9e:	f7fb feb1 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	200f      	movs	r0, #15
 8006ba6:	f7fb fead 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 8006baa:	2100      	movs	r1, #0
 8006bac:	2041      	movs	r0, #65	; 0x41
 8006bae:	f7fb fea9 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	2042      	movs	r0, #66	; 0x42
 8006bb6:	f7fb fea5 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 8006bba:	2100      	movs	r1, #0
 8006bbc:	2048      	movs	r0, #72	; 0x48
 8006bbe:	f7fb fea1 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 8006bc2:	f240 113f 	movw	r1, #319	; 0x13f
 8006bc6:	2049      	movs	r0, #73	; 0x49
 8006bc8:	f7fb fe9c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 8006bcc:	2100      	movs	r1, #0
 8006bce:	204a      	movs	r0, #74	; 0x4a
 8006bd0:	f7fb fe98 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	204b      	movs	r0, #75	; 0x4b
 8006bd8:	f7fb fe94 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 8006bdc:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8006be0:	2044      	movs	r0, #68	; 0x44
 8006be2:	f7fb fe8f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 8006be6:	2100      	movs	r1, #0
 8006be8:	2045      	movs	r0, #69	; 0x45
 8006bea:	f7fb fe8b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 8006bee:	f240 113f 	movw	r1, #319	; 0x13f
 8006bf2:	2046      	movs	r0, #70	; 0x46
 8006bf4:	f7fb fe86 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 8006bf8:	f240 7107 	movw	r1, #1799	; 0x707
 8006bfc:	2030      	movs	r0, #48	; 0x30
 8006bfe:	f7fb fe81 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 8006c02:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006c06:	2031      	movs	r0, #49	; 0x31
 8006c08:	f7fb fe7c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 8006c0c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006c10:	2032      	movs	r0, #50	; 0x32
 8006c12:	f7fb fe77 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 8006c16:	f240 5102 	movw	r1, #1282	; 0x502
 8006c1a:	2033      	movs	r0, #51	; 0x33
 8006c1c:	f7fb fe72 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 8006c20:	f240 5107 	movw	r1, #1287	; 0x507
 8006c24:	2034      	movs	r0, #52	; 0x34
 8006c26:	f7fb fe6d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8006c2a:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006c2e:	2035      	movs	r0, #53	; 0x35
 8006c30:	f7fb fe68 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 8006c34:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006c38:	2036      	movs	r0, #54	; 0x36
 8006c3a:	f7fb fe63 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 8006c3e:	f240 5102 	movw	r1, #1282	; 0x502
 8006c42:	2037      	movs	r0, #55	; 0x37
 8006c44:	f7fb fe5e 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8006c48:	f240 3102 	movw	r1, #770	; 0x302
 8006c4c:	203a      	movs	r0, #58	; 0x3a
 8006c4e:	f7fb fe59 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 8006c52:	f240 3102 	movw	r1, #770	; 0x302
 8006c56:	203b      	movs	r0, #59	; 0x3b
 8006c58:	f7fb fe54 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	2023      	movs	r0, #35	; 0x23
 8006c60:	f7fb fe50 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 8006c64:	2100      	movs	r1, #0
 8006c66:	2024      	movs	r0, #36	; 0x24
 8006c68:	f7fb fe4c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 8006c6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c70:	2025      	movs	r0, #37	; 0x25
 8006c72:	f7fb fe47 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 8006c76:	2100      	movs	r1, #0
 8006c78:	204f      	movs	r0, #79	; 0x4f
 8006c7a:	f7fb fe43 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 8006c7e:	2100      	movs	r1, #0
 8006c80:	204e      	movs	r0, #78	; 0x4e
 8006c82:	f7fb fe3f 	bl	8002904 <LCD_WriteReg>
 8006c86:	f000 bd2d 	b.w	80076e4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 8006c8a:	4b61      	ldr	r3, [pc, #388]	; (8006e10 <LCD_Init+0x3560>)
 8006c8c:	889b      	ldrh	r3, [r3, #4]
 8006c8e:	f244 5231 	movw	r2, #17713	; 0x4531
 8006c92:	4293      	cmp	r3, r2
 8006c94:	f040 80be 	bne.w	8006e14 <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8006c98:	2101      	movs	r1, #1
 8006c9a:	2000      	movs	r0, #0
 8006c9c:	f7fb fe32 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(10);
 8006ca0:	200a      	movs	r0, #10
 8006ca2:	f7fa fa63 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 8006ca6:	f241 6128 	movw	r1, #5672	; 0x1628
 8006caa:	2010      	movs	r0, #16
 8006cac:	f7fb fe2a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8006cb0:	210e      	movs	r1, #14
 8006cb2:	2012      	movs	r0, #18
 8006cb4:	f7fb fe26 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8006cb8:	f640 2139 	movw	r1, #2617	; 0xa39
 8006cbc:	2013      	movs	r0, #19
 8006cbe:	f7fb fe21 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(10);
 8006cc2:	200a      	movs	r0, #10
 8006cc4:	f7fa fa52 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8006cc8:	2140      	movs	r1, #64	; 0x40
 8006cca:	2011      	movs	r0, #17
 8006ccc:	f7fb fe1a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8006cd0:	2150      	movs	r1, #80	; 0x50
 8006cd2:	2015      	movs	r0, #21
 8006cd4:	f7fb fe16 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(10);
 8006cd8:	200a      	movs	r0, #10
 8006cda:	f7fa fa47 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 8006cde:	211e      	movs	r1, #30
 8006ce0:	2012      	movs	r0, #18
 8006ce2:	f7fb fe0f 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(10);
 8006ce6:	200a      	movs	r0, #10
 8006ce8:	f7fa fa40 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 8006cec:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8006cf0:	2010      	movs	r0, #16
 8006cf2:	f7fb fe07 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 8006cf6:	f642 2139 	movw	r1, #10809	; 0x2a39
 8006cfa:	2013      	movs	r0, #19
 8006cfc:	f7fb fe02 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(10);
 8006d00:	200a      	movs	r0, #10
 8006d02:	f7fa fa33 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 8006d06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d0a:	2001      	movs	r0, #1
 8006d0c:	f7fb fdfa 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8006d10:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006d14:	2002      	movs	r0, #2
 8006d16:	f7fb fdf5 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 8006d1a:	f241 0138 	movw	r1, #4152	; 0x1038
 8006d1e:	2003      	movs	r0, #3
 8006d20:	f7fb fdf0 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 8006d24:	f240 2102 	movw	r1, #514	; 0x202
 8006d28:	2008      	movs	r0, #8
 8006d2a:	f7fb fdeb 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8006d2e:	2108      	movs	r1, #8
 8006d30:	200a      	movs	r0, #10
 8006d32:	f7fb fde7 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 8006d36:	2100      	movs	r1, #0
 8006d38:	2030      	movs	r0, #48	; 0x30
 8006d3a:	f7fb fde3 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8006d3e:	f240 4102 	movw	r1, #1026	; 0x402
 8006d42:	2031      	movs	r0, #49	; 0x31
 8006d44:	f7fb fdde 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8006d48:	f44f 7183 	mov.w	r1, #262	; 0x106
 8006d4c:	2032      	movs	r0, #50	; 0x32
 8006d4e:	f7fb fdd9 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 8006d52:	f240 5103 	movw	r1, #1283	; 0x503
 8006d56:	2033      	movs	r0, #51	; 0x33
 8006d58:	f7fb fdd4 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 8006d5c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8006d60:	2034      	movs	r0, #52	; 0x34
 8006d62:	f7fb fdcf 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 8006d66:	f240 3101 	movw	r1, #769	; 0x301
 8006d6a:	2035      	movs	r0, #53	; 0x35
 8006d6c:	f7fb fdca 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8006d70:	f240 7107 	movw	r1, #1799	; 0x707
 8006d74:	2036      	movs	r0, #54	; 0x36
 8006d76:	f7fb fdc5 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8006d7a:	f240 3105 	movw	r1, #773	; 0x305
 8006d7e:	2037      	movs	r0, #55	; 0x37
 8006d80:	f7fb fdc0 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 8006d84:	f44f 7102 	mov.w	r1, #520	; 0x208
 8006d88:	2038      	movs	r0, #56	; 0x38
 8006d8a:	f7fb fdbb 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 8006d8e:	f640 710b 	movw	r1, #3851	; 0xf0b
 8006d92:	2039      	movs	r0, #57	; 0x39
 8006d94:	f7fb fdb6 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8006d98:	2102      	movs	r1, #2
 8006d9a:	2041      	movs	r0, #65	; 0x41
 8006d9c:	f7fb fdb2 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8006da0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006da4:	2060      	movs	r0, #96	; 0x60
 8006da6:	f7fb fdad 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8006daa:	2101      	movs	r1, #1
 8006dac:	2061      	movs	r0, #97	; 0x61
 8006dae:	f7fb fda9 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 8006db2:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006db6:	2090      	movs	r0, #144	; 0x90
 8006db8:	f7fb fda4 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 8006dbc:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8006dc0:	2092      	movs	r0, #146	; 0x92
 8006dc2:	f7fb fd9f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 8006dc6:	2104      	movs	r1, #4
 8006dc8:	2093      	movs	r0, #147	; 0x93
 8006dca:	f7fb fd9b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 8006dce:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006dd2:	20a0      	movs	r0, #160	; 0xa0
 8006dd4:	f7fb fd96 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8006dd8:	2101      	movs	r1, #1
 8006dda:	2007      	movs	r0, #7
 8006ddc:	f7fb fd92 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8006de0:	2121      	movs	r1, #33	; 0x21
 8006de2:	2007      	movs	r0, #7
 8006de4:	f7fb fd8e 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8006de8:	2123      	movs	r1, #35	; 0x23
 8006dea:	2007      	movs	r0, #7
 8006dec:	f7fb fd8a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8006df0:	2133      	movs	r1, #51	; 0x33
 8006df2:	2007      	movs	r0, #7
 8006df4:	f7fb fd86 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8006df8:	f240 1133 	movw	r1, #307	; 0x133
 8006dfc:	2007      	movs	r0, #7
 8006dfe:	f7fb fd81 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 8006e02:	2100      	movs	r1, #0
 8006e04:	20a0      	movs	r0, #160	; 0xa0
 8006e06:	f7fb fd7d 	bl	8002904 <LCD_WriteReg>
 8006e0a:	f000 bc6b 	b.w	80076e4 <LCD_Init+0x3e34>
 8006e0e:	bf00      	nop
 8006e10:	200002f0 	.word	0x200002f0
	} else if (lcddev.id == 0x4535) {
 8006e14:	4b5b      	ldr	r3, [pc, #364]	; (8006f84 <LCD_Init+0x36d4>)
 8006e16:	889b      	ldrh	r3, [r3, #4]
 8006e18:	f244 5235 	movw	r2, #17717	; 0x4535
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	f040 80b3 	bne.w	8006f88 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 8006e22:	2130      	movs	r1, #48	; 0x30
 8006e24:	2015      	movs	r0, #21
 8006e26:	f7fb fd6d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 8006e2a:	2110      	movs	r1, #16
 8006e2c:	209a      	movs	r0, #154	; 0x9a
 8006e2e:	f7fb fd69 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 8006e32:	2120      	movs	r1, #32
 8006e34:	2011      	movs	r0, #17
 8006e36:	f7fb fd65 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 8006e3a:	f243 4128 	movw	r1, #13352	; 0x3428
 8006e3e:	2010      	movs	r0, #16
 8006e40:	f7fb fd60 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 8006e44:	2102      	movs	r1, #2
 8006e46:	2012      	movs	r0, #18
 8006e48:	f7fb fd5c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 8006e4c:	f241 0138 	movw	r1, #4152	; 0x1038
 8006e50:	2013      	movs	r0, #19
 8006e52:	f7fb fd57 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(40);
 8006e56:	2028      	movs	r0, #40	; 0x28
 8006e58:	f7fa f988 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 8006e5c:	2112      	movs	r1, #18
 8006e5e:	2012      	movs	r0, #18
 8006e60:	f7fb fd50 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(40);
 8006e64:	2028      	movs	r0, #40	; 0x28
 8006e66:	f7fa f981 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 8006e6a:	f243 4120 	movw	r1, #13344	; 0x3420
 8006e6e:	2010      	movs	r0, #16
 8006e70:	f7fb fd48 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 8006e74:	f243 0138 	movw	r1, #12344	; 0x3038
 8006e78:	2013      	movs	r0, #19
 8006e7a:	f7fb fd43 	bl	8002904 <LCD_WriteReg>
		HAL_Delay(70);
 8006e7e:	2046      	movs	r0, #70	; 0x46
 8006e80:	f7fa f974 	bl	800116c <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 8006e84:	2100      	movs	r1, #0
 8006e86:	2030      	movs	r0, #48	; 0x30
 8006e88:	f7fb fd3c 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8006e8c:	f240 4102 	movw	r1, #1026	; 0x402
 8006e90:	2031      	movs	r0, #49	; 0x31
 8006e92:	f7fb fd37 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 8006e96:	f240 3107 	movw	r1, #775	; 0x307
 8006e9a:	2032      	movs	r0, #50	; 0x32
 8006e9c:	f7fb fd32 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8006ea0:	f44f 7141 	mov.w	r1, #772	; 0x304
 8006ea4:	2033      	movs	r0, #51	; 0x33
 8006ea6:	f7fb fd2d 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 8006eaa:	2104      	movs	r1, #4
 8006eac:	2034      	movs	r0, #52	; 0x34
 8006eae:	f7fb fd29 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 8006eb2:	f240 4101 	movw	r1, #1025	; 0x401
 8006eb6:	2035      	movs	r0, #53	; 0x35
 8006eb8:	f7fb fd24 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8006ebc:	f240 7107 	movw	r1, #1799	; 0x707
 8006ec0:	2036      	movs	r0, #54	; 0x36
 8006ec2:	f7fb fd1f 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8006ec6:	f240 3105 	movw	r1, #773	; 0x305
 8006eca:	2037      	movs	r0, #55	; 0x37
 8006ecc:	f7fb fd1a 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8006ed0:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8006ed4:	2038      	movs	r0, #56	; 0x38
 8006ed6:	f7fb fd15 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 8006eda:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8006ede:	2039      	movs	r0, #57	; 0x39
 8006ee0:	f7fb fd10 	bl	8002904 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 8006ee4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006ee8:	2001      	movs	r0, #1
 8006eea:	f7fb fd0b 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8006eee:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006ef2:	2002      	movs	r0, #2
 8006ef4:	f7fb fd06 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 8006ef8:	f241 0130 	movw	r1, #4144	; 0x1030
 8006efc:	2003      	movs	r0, #3
 8006efe:	f7fb fd01 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 8006f02:	f640 0108 	movw	r1, #2056	; 0x808
 8006f06:	2008      	movs	r0, #8
 8006f08:	f7fb fcfc 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8006f0c:	2108      	movs	r1, #8
 8006f0e:	200a      	movs	r0, #10
 8006f10:	f7fb fcf8 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8006f14:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006f18:	2060      	movs	r0, #96	; 0x60
 8006f1a:	f7fb fcf3 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8006f1e:	2101      	movs	r1, #1
 8006f20:	2061      	movs	r0, #97	; 0x61
 8006f22:	f7fb fcef 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 8006f26:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8006f2a:	2090      	movs	r0, #144	; 0x90
 8006f2c:	f7fb fcea 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 8006f30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f34:	2092      	movs	r0, #146	; 0x92
 8006f36:	f7fb fce5 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 8006f3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f3e:	2093      	movs	r0, #147	; 0x93
 8006f40:	f7fb fce0 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 8006f44:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006f48:	20a0      	movs	r0, #160	; 0xa0
 8006f4a:	f7fb fcdb 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 8006f4e:	2110      	movs	r1, #16
 8006f50:	20a3      	movs	r0, #163	; 0xa3
 8006f52:	f7fb fcd7 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8006f56:	2101      	movs	r1, #1
 8006f58:	2007      	movs	r0, #7
 8006f5a:	f7fb fcd3 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8006f5e:	2121      	movs	r1, #33	; 0x21
 8006f60:	2007      	movs	r0, #7
 8006f62:	f7fb fccf 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8006f66:	2123      	movs	r1, #35	; 0x23
 8006f68:	2007      	movs	r0, #7
 8006f6a:	f7fb fccb 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8006f6e:	2133      	movs	r1, #51	; 0x33
 8006f70:	2007      	movs	r0, #7
 8006f72:	f7fb fcc7 	bl	8002904 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8006f76:	f240 1133 	movw	r1, #307	; 0x133
 8006f7a:	2007      	movs	r0, #7
 8006f7c:	f7fb fcc2 	bl	8002904 <LCD_WriteReg>
 8006f80:	e3b0      	b.n	80076e4 <LCD_Init+0x3e34>
 8006f82:	bf00      	nop
 8006f84:	200002f0 	.word	0x200002f0
	} else if (lcddev.id == 0X1963) {
 8006f88:	4ba8      	ldr	r3, [pc, #672]	; (800722c <LCD_Init+0x397c>)
 8006f8a:	889b      	ldrh	r3, [r3, #4]
 8006f8c:	f641 1263 	movw	r2, #6499	; 0x1963
 8006f90:	4293      	cmp	r3, r2
 8006f92:	f040 83a7 	bne.w	80076e4 <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8006f96:	20e2      	movs	r0, #226	; 0xe2
 8006f98:	f7fb fc28 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 8006f9c:	4ba4      	ldr	r3, [pc, #656]	; (8007230 <LCD_Init+0x3980>)
 8006f9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fa2:	611a      	str	r2, [r3, #16]
 8006fa4:	4ba2      	ldr	r3, [pc, #648]	; (8007230 <LCD_Init+0x3980>)
 8006fa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006faa:	615a      	str	r2, [r3, #20]
 8006fac:	4ba1      	ldr	r3, [pc, #644]	; (8007234 <LCD_Init+0x3984>)
 8006fae:	221d      	movs	r2, #29
 8006fb0:	60da      	str	r2, [r3, #12]
 8006fb2:	4b9f      	ldr	r3, [pc, #636]	; (8007230 <LCD_Init+0x3980>)
 8006fb4:	2280      	movs	r2, #128	; 0x80
 8006fb6:	615a      	str	r2, [r3, #20]
 8006fb8:	4b9d      	ldr	r3, [pc, #628]	; (8007230 <LCD_Init+0x3980>)
 8006fba:	2280      	movs	r2, #128	; 0x80
 8006fbc:	611a      	str	r2, [r3, #16]
 8006fbe:	4b9c      	ldr	r3, [pc, #624]	; (8007230 <LCD_Init+0x3980>)
 8006fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fc4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8006fc6:	4b9a      	ldr	r3, [pc, #616]	; (8007230 <LCD_Init+0x3980>)
 8006fc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fcc:	611a      	str	r2, [r3, #16]
 8006fce:	4b98      	ldr	r3, [pc, #608]	; (8007230 <LCD_Init+0x3980>)
 8006fd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fd4:	615a      	str	r2, [r3, #20]
 8006fd6:	4b97      	ldr	r3, [pc, #604]	; (8007234 <LCD_Init+0x3984>)
 8006fd8:	2202      	movs	r2, #2
 8006fda:	60da      	str	r2, [r3, #12]
 8006fdc:	4b94      	ldr	r3, [pc, #592]	; (8007230 <LCD_Init+0x3980>)
 8006fde:	2280      	movs	r2, #128	; 0x80
 8006fe0:	615a      	str	r2, [r3, #20]
 8006fe2:	4b93      	ldr	r3, [pc, #588]	; (8007230 <LCD_Init+0x3980>)
 8006fe4:	2280      	movs	r2, #128	; 0x80
 8006fe6:	611a      	str	r2, [r3, #16]
 8006fe8:	4b91      	ldr	r3, [pc, #580]	; (8007230 <LCD_Init+0x3980>)
 8006fea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fee:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 8006ff0:	4b8f      	ldr	r3, [pc, #572]	; (8007230 <LCD_Init+0x3980>)
 8006ff2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ff6:	611a      	str	r2, [r3, #16]
 8006ff8:	4b8d      	ldr	r3, [pc, #564]	; (8007230 <LCD_Init+0x3980>)
 8006ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ffe:	615a      	str	r2, [r3, #20]
 8007000:	4b8c      	ldr	r3, [pc, #560]	; (8007234 <LCD_Init+0x3984>)
 8007002:	2204      	movs	r2, #4
 8007004:	60da      	str	r2, [r3, #12]
 8007006:	4b8a      	ldr	r3, [pc, #552]	; (8007230 <LCD_Init+0x3980>)
 8007008:	2280      	movs	r2, #128	; 0x80
 800700a:	615a      	str	r2, [r3, #20]
 800700c:	4b88      	ldr	r3, [pc, #544]	; (8007230 <LCD_Init+0x3980>)
 800700e:	2280      	movs	r2, #128	; 0x80
 8007010:	611a      	str	r2, [r3, #16]
 8007012:	4b87      	ldr	r3, [pc, #540]	; (8007230 <LCD_Init+0x3980>)
 8007014:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007018:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 800701a:	2001      	movs	r0, #1
 800701c:	f7fa f8a6 	bl	800116c <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8007020:	20e0      	movs	r0, #224	; 0xe0
 8007022:	f7fb fbe3 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8007026:	4b82      	ldr	r3, [pc, #520]	; (8007230 <LCD_Init+0x3980>)
 8007028:	f44f 7280 	mov.w	r2, #256	; 0x100
 800702c:	611a      	str	r2, [r3, #16]
 800702e:	4b80      	ldr	r3, [pc, #512]	; (8007230 <LCD_Init+0x3980>)
 8007030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007034:	615a      	str	r2, [r3, #20]
 8007036:	4b7f      	ldr	r3, [pc, #508]	; (8007234 <LCD_Init+0x3984>)
 8007038:	2201      	movs	r2, #1
 800703a:	60da      	str	r2, [r3, #12]
 800703c:	4b7c      	ldr	r3, [pc, #496]	; (8007230 <LCD_Init+0x3980>)
 800703e:	2280      	movs	r2, #128	; 0x80
 8007040:	615a      	str	r2, [r3, #20]
 8007042:	4b7b      	ldr	r3, [pc, #492]	; (8007230 <LCD_Init+0x3980>)
 8007044:	2280      	movs	r2, #128	; 0x80
 8007046:	611a      	str	r2, [r3, #16]
 8007048:	4b79      	ldr	r3, [pc, #484]	; (8007230 <LCD_Init+0x3980>)
 800704a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800704e:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8007050:	200a      	movs	r0, #10
 8007052:	f7fa f88b 	bl	800116c <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8007056:	20e0      	movs	r0, #224	; 0xe0
 8007058:	f7fb fbc8 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 800705c:	4b74      	ldr	r3, [pc, #464]	; (8007230 <LCD_Init+0x3980>)
 800705e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007062:	611a      	str	r2, [r3, #16]
 8007064:	4b72      	ldr	r3, [pc, #456]	; (8007230 <LCD_Init+0x3980>)
 8007066:	f44f 7200 	mov.w	r2, #512	; 0x200
 800706a:	615a      	str	r2, [r3, #20]
 800706c:	4b71      	ldr	r3, [pc, #452]	; (8007234 <LCD_Init+0x3984>)
 800706e:	2203      	movs	r2, #3
 8007070:	60da      	str	r2, [r3, #12]
 8007072:	4b6f      	ldr	r3, [pc, #444]	; (8007230 <LCD_Init+0x3980>)
 8007074:	2280      	movs	r2, #128	; 0x80
 8007076:	615a      	str	r2, [r3, #20]
 8007078:	4b6d      	ldr	r3, [pc, #436]	; (8007230 <LCD_Init+0x3980>)
 800707a:	2280      	movs	r2, #128	; 0x80
 800707c:	611a      	str	r2, [r3, #16]
 800707e:	4b6c      	ldr	r3, [pc, #432]	; (8007230 <LCD_Init+0x3980>)
 8007080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007084:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 8007086:	200c      	movs	r0, #12
 8007088:	f7fa f870 	bl	800116c <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 800708c:	2001      	movs	r0, #1
 800708e:	f7fb fbad 	bl	80027ec <LCD_WR_REG>
		HAL_Delay(10);
 8007092:	200a      	movs	r0, #10
 8007094:	f7fa f86a 	bl	800116c <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8007098:	20e6      	movs	r0, #230	; 0xe6
 800709a:	f7fb fba7 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 800709e:	4b64      	ldr	r3, [pc, #400]	; (8007230 <LCD_Init+0x3980>)
 80070a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070a4:	611a      	str	r2, [r3, #16]
 80070a6:	4b62      	ldr	r3, [pc, #392]	; (8007230 <LCD_Init+0x3980>)
 80070a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070ac:	615a      	str	r2, [r3, #20]
 80070ae:	4b61      	ldr	r3, [pc, #388]	; (8007234 <LCD_Init+0x3984>)
 80070b0:	222f      	movs	r2, #47	; 0x2f
 80070b2:	60da      	str	r2, [r3, #12]
 80070b4:	4b5e      	ldr	r3, [pc, #376]	; (8007230 <LCD_Init+0x3980>)
 80070b6:	2280      	movs	r2, #128	; 0x80
 80070b8:	615a      	str	r2, [r3, #20]
 80070ba:	4b5d      	ldr	r3, [pc, #372]	; (8007230 <LCD_Init+0x3980>)
 80070bc:	2280      	movs	r2, #128	; 0x80
 80070be:	611a      	str	r2, [r3, #16]
 80070c0:	4b5b      	ldr	r3, [pc, #364]	; (8007230 <LCD_Init+0x3980>)
 80070c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070c6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80070c8:	4b59      	ldr	r3, [pc, #356]	; (8007230 <LCD_Init+0x3980>)
 80070ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070ce:	611a      	str	r2, [r3, #16]
 80070d0:	4b57      	ldr	r3, [pc, #348]	; (8007230 <LCD_Init+0x3980>)
 80070d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070d6:	615a      	str	r2, [r3, #20]
 80070d8:	4b56      	ldr	r3, [pc, #344]	; (8007234 <LCD_Init+0x3984>)
 80070da:	22ff      	movs	r2, #255	; 0xff
 80070dc:	60da      	str	r2, [r3, #12]
 80070de:	4b54      	ldr	r3, [pc, #336]	; (8007230 <LCD_Init+0x3980>)
 80070e0:	2280      	movs	r2, #128	; 0x80
 80070e2:	615a      	str	r2, [r3, #20]
 80070e4:	4b52      	ldr	r3, [pc, #328]	; (8007230 <LCD_Init+0x3980>)
 80070e6:	2280      	movs	r2, #128	; 0x80
 80070e8:	611a      	str	r2, [r3, #16]
 80070ea:	4b51      	ldr	r3, [pc, #324]	; (8007230 <LCD_Init+0x3980>)
 80070ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070f0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80070f2:	4b4f      	ldr	r3, [pc, #316]	; (8007230 <LCD_Init+0x3980>)
 80070f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070f8:	611a      	str	r2, [r3, #16]
 80070fa:	4b4d      	ldr	r3, [pc, #308]	; (8007230 <LCD_Init+0x3980>)
 80070fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007100:	615a      	str	r2, [r3, #20]
 8007102:	4b4c      	ldr	r3, [pc, #304]	; (8007234 <LCD_Init+0x3984>)
 8007104:	22ff      	movs	r2, #255	; 0xff
 8007106:	60da      	str	r2, [r3, #12]
 8007108:	4b49      	ldr	r3, [pc, #292]	; (8007230 <LCD_Init+0x3980>)
 800710a:	2280      	movs	r2, #128	; 0x80
 800710c:	615a      	str	r2, [r3, #20]
 800710e:	4b48      	ldr	r3, [pc, #288]	; (8007230 <LCD_Init+0x3980>)
 8007110:	2280      	movs	r2, #128	; 0x80
 8007112:	611a      	str	r2, [r3, #16]
 8007114:	4b46      	ldr	r3, [pc, #280]	; (8007230 <LCD_Init+0x3980>)
 8007116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800711a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 800711c:	20b0      	movs	r0, #176	; 0xb0
 800711e:	f7fb fb65 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8007122:	4b43      	ldr	r3, [pc, #268]	; (8007230 <LCD_Init+0x3980>)
 8007124:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007128:	611a      	str	r2, [r3, #16]
 800712a:	4b41      	ldr	r3, [pc, #260]	; (8007230 <LCD_Init+0x3980>)
 800712c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007130:	615a      	str	r2, [r3, #20]
 8007132:	4b40      	ldr	r3, [pc, #256]	; (8007234 <LCD_Init+0x3984>)
 8007134:	2220      	movs	r2, #32
 8007136:	60da      	str	r2, [r3, #12]
 8007138:	4b3d      	ldr	r3, [pc, #244]	; (8007230 <LCD_Init+0x3980>)
 800713a:	2280      	movs	r2, #128	; 0x80
 800713c:	615a      	str	r2, [r3, #20]
 800713e:	4b3c      	ldr	r3, [pc, #240]	; (8007230 <LCD_Init+0x3980>)
 8007140:	2280      	movs	r2, #128	; 0x80
 8007142:	611a      	str	r2, [r3, #16]
 8007144:	4b3a      	ldr	r3, [pc, #232]	; (8007230 <LCD_Init+0x3980>)
 8007146:	f44f 7200 	mov.w	r2, #512	; 0x200
 800714a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 800714c:	4b38      	ldr	r3, [pc, #224]	; (8007230 <LCD_Init+0x3980>)
 800714e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007152:	611a      	str	r2, [r3, #16]
 8007154:	4b36      	ldr	r3, [pc, #216]	; (8007230 <LCD_Init+0x3980>)
 8007156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800715a:	615a      	str	r2, [r3, #20]
 800715c:	4b35      	ldr	r3, [pc, #212]	; (8007234 <LCD_Init+0x3984>)
 800715e:	2200      	movs	r2, #0
 8007160:	60da      	str	r2, [r3, #12]
 8007162:	4b33      	ldr	r3, [pc, #204]	; (8007230 <LCD_Init+0x3980>)
 8007164:	2280      	movs	r2, #128	; 0x80
 8007166:	615a      	str	r2, [r3, #20]
 8007168:	4b31      	ldr	r3, [pc, #196]	; (8007230 <LCD_Init+0x3980>)
 800716a:	2280      	movs	r2, #128	; 0x80
 800716c:	611a      	str	r2, [r3, #16]
 800716e:	4b30      	ldr	r3, [pc, #192]	; (8007230 <LCD_Init+0x3980>)
 8007170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007174:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 8007176:	4b2e      	ldr	r3, [pc, #184]	; (8007230 <LCD_Init+0x3980>)
 8007178:	f44f 7280 	mov.w	r2, #256	; 0x100
 800717c:	611a      	str	r2, [r3, #16]
 800717e:	4b2c      	ldr	r3, [pc, #176]	; (8007230 <LCD_Init+0x3980>)
 8007180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007184:	615a      	str	r2, [r3, #20]
 8007186:	4b2b      	ldr	r3, [pc, #172]	; (8007234 <LCD_Init+0x3984>)
 8007188:	2203      	movs	r2, #3
 800718a:	60da      	str	r2, [r3, #12]
 800718c:	4b28      	ldr	r3, [pc, #160]	; (8007230 <LCD_Init+0x3980>)
 800718e:	2280      	movs	r2, #128	; 0x80
 8007190:	615a      	str	r2, [r3, #20]
 8007192:	4b27      	ldr	r3, [pc, #156]	; (8007230 <LCD_Init+0x3980>)
 8007194:	2280      	movs	r2, #128	; 0x80
 8007196:	611a      	str	r2, [r3, #16]
 8007198:	4b25      	ldr	r3, [pc, #148]	; (8007230 <LCD_Init+0x3980>)
 800719a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800719e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 80071a0:	4b23      	ldr	r3, [pc, #140]	; (8007230 <LCD_Init+0x3980>)
 80071a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071a6:	611a      	str	r2, [r3, #16]
 80071a8:	4b21      	ldr	r3, [pc, #132]	; (8007230 <LCD_Init+0x3980>)
 80071aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071ae:	615a      	str	r2, [r3, #20]
 80071b0:	4b20      	ldr	r3, [pc, #128]	; (8007234 <LCD_Init+0x3984>)
 80071b2:	f240 321f 	movw	r2, #799	; 0x31f
 80071b6:	60da      	str	r2, [r3, #12]
 80071b8:	4b1d      	ldr	r3, [pc, #116]	; (8007230 <LCD_Init+0x3980>)
 80071ba:	2280      	movs	r2, #128	; 0x80
 80071bc:	615a      	str	r2, [r3, #20]
 80071be:	4b1c      	ldr	r3, [pc, #112]	; (8007230 <LCD_Init+0x3980>)
 80071c0:	2280      	movs	r2, #128	; 0x80
 80071c2:	611a      	str	r2, [r3, #16]
 80071c4:	4b1a      	ldr	r3, [pc, #104]	; (8007230 <LCD_Init+0x3980>)
 80071c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071ca:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 80071cc:	4b18      	ldr	r3, [pc, #96]	; (8007230 <LCD_Init+0x3980>)
 80071ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071d2:	611a      	str	r2, [r3, #16]
 80071d4:	4b16      	ldr	r3, [pc, #88]	; (8007230 <LCD_Init+0x3980>)
 80071d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071da:	615a      	str	r2, [r3, #20]
 80071dc:	4b15      	ldr	r3, [pc, #84]	; (8007234 <LCD_Init+0x3984>)
 80071de:	2201      	movs	r2, #1
 80071e0:	60da      	str	r2, [r3, #12]
 80071e2:	4b13      	ldr	r3, [pc, #76]	; (8007230 <LCD_Init+0x3980>)
 80071e4:	2280      	movs	r2, #128	; 0x80
 80071e6:	615a      	str	r2, [r3, #20]
 80071e8:	4b11      	ldr	r3, [pc, #68]	; (8007230 <LCD_Init+0x3980>)
 80071ea:	2280      	movs	r2, #128	; 0x80
 80071ec:	611a      	str	r2, [r3, #16]
 80071ee:	4b10      	ldr	r3, [pc, #64]	; (8007230 <LCD_Init+0x3980>)
 80071f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071f4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 80071f6:	4b0e      	ldr	r3, [pc, #56]	; (8007230 <LCD_Init+0x3980>)
 80071f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071fc:	611a      	str	r2, [r3, #16]
 80071fe:	4b0c      	ldr	r3, [pc, #48]	; (8007230 <LCD_Init+0x3980>)
 8007200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007204:	615a      	str	r2, [r3, #20]
 8007206:	4b0b      	ldr	r3, [pc, #44]	; (8007234 <LCD_Init+0x3984>)
 8007208:	f240 12df 	movw	r2, #479	; 0x1df
 800720c:	60da      	str	r2, [r3, #12]
 800720e:	4b08      	ldr	r3, [pc, #32]	; (8007230 <LCD_Init+0x3980>)
 8007210:	2280      	movs	r2, #128	; 0x80
 8007212:	615a      	str	r2, [r3, #20]
 8007214:	4b06      	ldr	r3, [pc, #24]	; (8007230 <LCD_Init+0x3980>)
 8007216:	2280      	movs	r2, #128	; 0x80
 8007218:	611a      	str	r2, [r3, #16]
 800721a:	4b05      	ldr	r3, [pc, #20]	; (8007230 <LCD_Init+0x3980>)
 800721c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007220:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 8007222:	4b03      	ldr	r3, [pc, #12]	; (8007230 <LCD_Init+0x3980>)
 8007224:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007228:	e006      	b.n	8007238 <LCD_Init+0x3988>
 800722a:	bf00      	nop
 800722c:	200002f0 	.word	0x200002f0
 8007230:	40011000 	.word	0x40011000
 8007234:	40010c00 	.word	0x40010c00
 8007238:	611a      	str	r2, [r3, #16]
 800723a:	4ba3      	ldr	r3, [pc, #652]	; (80074c8 <LCD_Init+0x3c18>)
 800723c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007240:	615a      	str	r2, [r3, #20]
 8007242:	4ba2      	ldr	r3, [pc, #648]	; (80074cc <LCD_Init+0x3c1c>)
 8007244:	2200      	movs	r2, #0
 8007246:	60da      	str	r2, [r3, #12]
 8007248:	4b9f      	ldr	r3, [pc, #636]	; (80074c8 <LCD_Init+0x3c18>)
 800724a:	2280      	movs	r2, #128	; 0x80
 800724c:	615a      	str	r2, [r3, #20]
 800724e:	4b9e      	ldr	r3, [pc, #632]	; (80074c8 <LCD_Init+0x3c18>)
 8007250:	2280      	movs	r2, #128	; 0x80
 8007252:	611a      	str	r2, [r3, #16]
 8007254:	4b9c      	ldr	r3, [pc, #624]	; (80074c8 <LCD_Init+0x3c18>)
 8007256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800725a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 800725c:	20b4      	movs	r0, #180	; 0xb4
 800725e:	f7fb fac5 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8007262:	4b99      	ldr	r3, [pc, #612]	; (80074c8 <LCD_Init+0x3c18>)
 8007264:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007268:	611a      	str	r2, [r3, #16]
 800726a:	4b97      	ldr	r3, [pc, #604]	; (80074c8 <LCD_Init+0x3c18>)
 800726c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007270:	615a      	str	r2, [r3, #20]
 8007272:	4b96      	ldr	r3, [pc, #600]	; (80074cc <LCD_Init+0x3c1c>)
 8007274:	2204      	movs	r2, #4
 8007276:	60da      	str	r2, [r3, #12]
 8007278:	4b93      	ldr	r3, [pc, #588]	; (80074c8 <LCD_Init+0x3c18>)
 800727a:	2280      	movs	r2, #128	; 0x80
 800727c:	615a      	str	r2, [r3, #20]
 800727e:	4b92      	ldr	r3, [pc, #584]	; (80074c8 <LCD_Init+0x3c18>)
 8007280:	2280      	movs	r2, #128	; 0x80
 8007282:	611a      	str	r2, [r3, #16]
 8007284:	4b90      	ldr	r3, [pc, #576]	; (80074c8 <LCD_Init+0x3c18>)
 8007286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800728a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 800728c:	4b8e      	ldr	r3, [pc, #568]	; (80074c8 <LCD_Init+0x3c18>)
 800728e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007292:	611a      	str	r2, [r3, #16]
 8007294:	4b8c      	ldr	r3, [pc, #560]	; (80074c8 <LCD_Init+0x3c18>)
 8007296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800729a:	615a      	str	r2, [r3, #20]
 800729c:	4b8b      	ldr	r3, [pc, #556]	; (80074cc <LCD_Init+0x3c1c>)
 800729e:	f240 421f 	movw	r2, #1055	; 0x41f
 80072a2:	60da      	str	r2, [r3, #12]
 80072a4:	4b88      	ldr	r3, [pc, #544]	; (80074c8 <LCD_Init+0x3c18>)
 80072a6:	2280      	movs	r2, #128	; 0x80
 80072a8:	615a      	str	r2, [r3, #20]
 80072aa:	4b87      	ldr	r3, [pc, #540]	; (80074c8 <LCD_Init+0x3c18>)
 80072ac:	2280      	movs	r2, #128	; 0x80
 80072ae:	611a      	str	r2, [r3, #16]
 80072b0:	4b85      	ldr	r3, [pc, #532]	; (80074c8 <LCD_Init+0x3c18>)
 80072b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072b6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 80072b8:	4b83      	ldr	r3, [pc, #524]	; (80074c8 <LCD_Init+0x3c18>)
 80072ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072be:	611a      	str	r2, [r3, #16]
 80072c0:	4b81      	ldr	r3, [pc, #516]	; (80074c8 <LCD_Init+0x3c18>)
 80072c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072c6:	615a      	str	r2, [r3, #20]
 80072c8:	4b80      	ldr	r3, [pc, #512]	; (80074cc <LCD_Init+0x3c1c>)
 80072ca:	2200      	movs	r2, #0
 80072cc:	60da      	str	r2, [r3, #12]
 80072ce:	4b7e      	ldr	r3, [pc, #504]	; (80074c8 <LCD_Init+0x3c18>)
 80072d0:	2280      	movs	r2, #128	; 0x80
 80072d2:	615a      	str	r2, [r3, #20]
 80072d4:	4b7c      	ldr	r3, [pc, #496]	; (80074c8 <LCD_Init+0x3c18>)
 80072d6:	2280      	movs	r2, #128	; 0x80
 80072d8:	611a      	str	r2, [r3, #16]
 80072da:	4b7b      	ldr	r3, [pc, #492]	; (80074c8 <LCD_Init+0x3c18>)
 80072dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072e0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 80072e2:	4b79      	ldr	r3, [pc, #484]	; (80074c8 <LCD_Init+0x3c18>)
 80072e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072e8:	611a      	str	r2, [r3, #16]
 80072ea:	4b77      	ldr	r3, [pc, #476]	; (80074c8 <LCD_Init+0x3c18>)
 80072ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072f0:	615a      	str	r2, [r3, #20]
 80072f2:	4b76      	ldr	r3, [pc, #472]	; (80074cc <LCD_Init+0x3c1c>)
 80072f4:	222e      	movs	r2, #46	; 0x2e
 80072f6:	60da      	str	r2, [r3, #12]
 80072f8:	4b73      	ldr	r3, [pc, #460]	; (80074c8 <LCD_Init+0x3c18>)
 80072fa:	2280      	movs	r2, #128	; 0x80
 80072fc:	615a      	str	r2, [r3, #20]
 80072fe:	4b72      	ldr	r3, [pc, #456]	; (80074c8 <LCD_Init+0x3c18>)
 8007300:	2280      	movs	r2, #128	; 0x80
 8007302:	611a      	str	r2, [r3, #16]
 8007304:	4b70      	ldr	r3, [pc, #448]	; (80074c8 <LCD_Init+0x3c18>)
 8007306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800730a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 800730c:	4b6e      	ldr	r3, [pc, #440]	; (80074c8 <LCD_Init+0x3c18>)
 800730e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007312:	611a      	str	r2, [r3, #16]
 8007314:	4b6c      	ldr	r3, [pc, #432]	; (80074c8 <LCD_Init+0x3c18>)
 8007316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800731a:	615a      	str	r2, [r3, #20]
 800731c:	4b6b      	ldr	r3, [pc, #428]	; (80074cc <LCD_Init+0x3c1c>)
 800731e:	2200      	movs	r2, #0
 8007320:	60da      	str	r2, [r3, #12]
 8007322:	4b69      	ldr	r3, [pc, #420]	; (80074c8 <LCD_Init+0x3c18>)
 8007324:	2280      	movs	r2, #128	; 0x80
 8007326:	615a      	str	r2, [r3, #20]
 8007328:	4b67      	ldr	r3, [pc, #412]	; (80074c8 <LCD_Init+0x3c18>)
 800732a:	2280      	movs	r2, #128	; 0x80
 800732c:	611a      	str	r2, [r3, #16]
 800732e:	4b66      	ldr	r3, [pc, #408]	; (80074c8 <LCD_Init+0x3c18>)
 8007330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007334:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8007336:	4b64      	ldr	r3, [pc, #400]	; (80074c8 <LCD_Init+0x3c18>)
 8007338:	f44f 7280 	mov.w	r2, #256	; 0x100
 800733c:	611a      	str	r2, [r3, #16]
 800733e:	4b62      	ldr	r3, [pc, #392]	; (80074c8 <LCD_Init+0x3c18>)
 8007340:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007344:	615a      	str	r2, [r3, #20]
 8007346:	4b61      	ldr	r3, [pc, #388]	; (80074cc <LCD_Init+0x3c1c>)
 8007348:	2200      	movs	r2, #0
 800734a:	60da      	str	r2, [r3, #12]
 800734c:	4b5e      	ldr	r3, [pc, #376]	; (80074c8 <LCD_Init+0x3c18>)
 800734e:	2280      	movs	r2, #128	; 0x80
 8007350:	615a      	str	r2, [r3, #20]
 8007352:	4b5d      	ldr	r3, [pc, #372]	; (80074c8 <LCD_Init+0x3c18>)
 8007354:	2280      	movs	r2, #128	; 0x80
 8007356:	611a      	str	r2, [r3, #16]
 8007358:	4b5b      	ldr	r3, [pc, #364]	; (80074c8 <LCD_Init+0x3c18>)
 800735a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800735e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8007360:	4b59      	ldr	r3, [pc, #356]	; (80074c8 <LCD_Init+0x3c18>)
 8007362:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007366:	611a      	str	r2, [r3, #16]
 8007368:	4b57      	ldr	r3, [pc, #348]	; (80074c8 <LCD_Init+0x3c18>)
 800736a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800736e:	615a      	str	r2, [r3, #20]
 8007370:	4b56      	ldr	r3, [pc, #344]	; (80074cc <LCD_Init+0x3c1c>)
 8007372:	2200      	movs	r2, #0
 8007374:	60da      	str	r2, [r3, #12]
 8007376:	4b54      	ldr	r3, [pc, #336]	; (80074c8 <LCD_Init+0x3c18>)
 8007378:	2280      	movs	r2, #128	; 0x80
 800737a:	615a      	str	r2, [r3, #20]
 800737c:	4b52      	ldr	r3, [pc, #328]	; (80074c8 <LCD_Init+0x3c18>)
 800737e:	2280      	movs	r2, #128	; 0x80
 8007380:	611a      	str	r2, [r3, #16]
 8007382:	4b51      	ldr	r3, [pc, #324]	; (80074c8 <LCD_Init+0x3c18>)
 8007384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007388:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 800738a:	4b4f      	ldr	r3, [pc, #316]	; (80074c8 <LCD_Init+0x3c18>)
 800738c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007390:	611a      	str	r2, [r3, #16]
 8007392:	4b4d      	ldr	r3, [pc, #308]	; (80074c8 <LCD_Init+0x3c18>)
 8007394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007398:	615a      	str	r2, [r3, #20]
 800739a:	4b4c      	ldr	r3, [pc, #304]	; (80074cc <LCD_Init+0x3c1c>)
 800739c:	2200      	movs	r2, #0
 800739e:	60da      	str	r2, [r3, #12]
 80073a0:	4b49      	ldr	r3, [pc, #292]	; (80074c8 <LCD_Init+0x3c18>)
 80073a2:	2280      	movs	r2, #128	; 0x80
 80073a4:	615a      	str	r2, [r3, #20]
 80073a6:	4b48      	ldr	r3, [pc, #288]	; (80074c8 <LCD_Init+0x3c18>)
 80073a8:	2280      	movs	r2, #128	; 0x80
 80073aa:	611a      	str	r2, [r3, #16]
 80073ac:	4b46      	ldr	r3, [pc, #280]	; (80074c8 <LCD_Init+0x3c18>)
 80073ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073b2:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 80073b4:	20b6      	movs	r0, #182	; 0xb6
 80073b6:	f7fb fa19 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 80073ba:	4b43      	ldr	r3, [pc, #268]	; (80074c8 <LCD_Init+0x3c18>)
 80073bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073c0:	611a      	str	r2, [r3, #16]
 80073c2:	4b41      	ldr	r3, [pc, #260]	; (80074c8 <LCD_Init+0x3c18>)
 80073c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073c8:	615a      	str	r2, [r3, #20]
 80073ca:	4b40      	ldr	r3, [pc, #256]	; (80074cc <LCD_Init+0x3c1c>)
 80073cc:	2202      	movs	r2, #2
 80073ce:	60da      	str	r2, [r3, #12]
 80073d0:	4b3d      	ldr	r3, [pc, #244]	; (80074c8 <LCD_Init+0x3c18>)
 80073d2:	2280      	movs	r2, #128	; 0x80
 80073d4:	615a      	str	r2, [r3, #20]
 80073d6:	4b3c      	ldr	r3, [pc, #240]	; (80074c8 <LCD_Init+0x3c18>)
 80073d8:	2280      	movs	r2, #128	; 0x80
 80073da:	611a      	str	r2, [r3, #16]
 80073dc:	4b3a      	ldr	r3, [pc, #232]	; (80074c8 <LCD_Init+0x3c18>)
 80073de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073e2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 80073e4:	4b38      	ldr	r3, [pc, #224]	; (80074c8 <LCD_Init+0x3c18>)
 80073e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073ea:	611a      	str	r2, [r3, #16]
 80073ec:	4b36      	ldr	r3, [pc, #216]	; (80074c8 <LCD_Init+0x3c18>)
 80073ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073f2:	615a      	str	r2, [r3, #20]
 80073f4:	4b35      	ldr	r3, [pc, #212]	; (80074cc <LCD_Init+0x3c1c>)
 80073f6:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80073fa:	60da      	str	r2, [r3, #12]
 80073fc:	4b32      	ldr	r3, [pc, #200]	; (80074c8 <LCD_Init+0x3c18>)
 80073fe:	2280      	movs	r2, #128	; 0x80
 8007400:	615a      	str	r2, [r3, #20]
 8007402:	4b31      	ldr	r3, [pc, #196]	; (80074c8 <LCD_Init+0x3c18>)
 8007404:	2280      	movs	r2, #128	; 0x80
 8007406:	611a      	str	r2, [r3, #16]
 8007408:	4b2f      	ldr	r3, [pc, #188]	; (80074c8 <LCD_Init+0x3c18>)
 800740a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800740e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8007410:	4b2d      	ldr	r3, [pc, #180]	; (80074c8 <LCD_Init+0x3c18>)
 8007412:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007416:	611a      	str	r2, [r3, #16]
 8007418:	4b2b      	ldr	r3, [pc, #172]	; (80074c8 <LCD_Init+0x3c18>)
 800741a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800741e:	615a      	str	r2, [r3, #20]
 8007420:	4b2a      	ldr	r3, [pc, #168]	; (80074cc <LCD_Init+0x3c1c>)
 8007422:	2200      	movs	r2, #0
 8007424:	60da      	str	r2, [r3, #12]
 8007426:	4b28      	ldr	r3, [pc, #160]	; (80074c8 <LCD_Init+0x3c18>)
 8007428:	2280      	movs	r2, #128	; 0x80
 800742a:	615a      	str	r2, [r3, #20]
 800742c:	4b26      	ldr	r3, [pc, #152]	; (80074c8 <LCD_Init+0x3c18>)
 800742e:	2280      	movs	r2, #128	; 0x80
 8007430:	611a      	str	r2, [r3, #16]
 8007432:	4b25      	ldr	r3, [pc, #148]	; (80074c8 <LCD_Init+0x3c18>)
 8007434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007438:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 800743a:	4b23      	ldr	r3, [pc, #140]	; (80074c8 <LCD_Init+0x3c18>)
 800743c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007440:	611a      	str	r2, [r3, #16]
 8007442:	4b21      	ldr	r3, [pc, #132]	; (80074c8 <LCD_Init+0x3c18>)
 8007444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007448:	615a      	str	r2, [r3, #20]
 800744a:	4b20      	ldr	r3, [pc, #128]	; (80074cc <LCD_Init+0x3c1c>)
 800744c:	2217      	movs	r2, #23
 800744e:	60da      	str	r2, [r3, #12]
 8007450:	4b1d      	ldr	r3, [pc, #116]	; (80074c8 <LCD_Init+0x3c18>)
 8007452:	2280      	movs	r2, #128	; 0x80
 8007454:	615a      	str	r2, [r3, #20]
 8007456:	4b1c      	ldr	r3, [pc, #112]	; (80074c8 <LCD_Init+0x3c18>)
 8007458:	2280      	movs	r2, #128	; 0x80
 800745a:	611a      	str	r2, [r3, #16]
 800745c:	4b1a      	ldr	r3, [pc, #104]	; (80074c8 <LCD_Init+0x3c18>)
 800745e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007462:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8007464:	4b18      	ldr	r3, [pc, #96]	; (80074c8 <LCD_Init+0x3c18>)
 8007466:	f44f 7280 	mov.w	r2, #256	; 0x100
 800746a:	611a      	str	r2, [r3, #16]
 800746c:	4b16      	ldr	r3, [pc, #88]	; (80074c8 <LCD_Init+0x3c18>)
 800746e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007472:	615a      	str	r2, [r3, #20]
 8007474:	4b15      	ldr	r3, [pc, #84]	; (80074cc <LCD_Init+0x3c1c>)
 8007476:	2215      	movs	r2, #21
 8007478:	60da      	str	r2, [r3, #12]
 800747a:	4b13      	ldr	r3, [pc, #76]	; (80074c8 <LCD_Init+0x3c18>)
 800747c:	2280      	movs	r2, #128	; 0x80
 800747e:	615a      	str	r2, [r3, #20]
 8007480:	4b11      	ldr	r3, [pc, #68]	; (80074c8 <LCD_Init+0x3c18>)
 8007482:	2280      	movs	r2, #128	; 0x80
 8007484:	611a      	str	r2, [r3, #16]
 8007486:	4b10      	ldr	r3, [pc, #64]	; (80074c8 <LCD_Init+0x3c18>)
 8007488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800748c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 800748e:	4b0e      	ldr	r3, [pc, #56]	; (80074c8 <LCD_Init+0x3c18>)
 8007490:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007494:	611a      	str	r2, [r3, #16]
 8007496:	4b0c      	ldr	r3, [pc, #48]	; (80074c8 <LCD_Init+0x3c18>)
 8007498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800749c:	615a      	str	r2, [r3, #20]
 800749e:	4b0b      	ldr	r3, [pc, #44]	; (80074cc <LCD_Init+0x3c1c>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	60da      	str	r2, [r3, #12]
 80074a4:	4b08      	ldr	r3, [pc, #32]	; (80074c8 <LCD_Init+0x3c18>)
 80074a6:	2280      	movs	r2, #128	; 0x80
 80074a8:	615a      	str	r2, [r3, #20]
 80074aa:	4b07      	ldr	r3, [pc, #28]	; (80074c8 <LCD_Init+0x3c18>)
 80074ac:	2280      	movs	r2, #128	; 0x80
 80074ae:	611a      	str	r2, [r3, #16]
 80074b0:	4b05      	ldr	r3, [pc, #20]	; (80074c8 <LCD_Init+0x3c18>)
 80074b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074b6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 80074b8:	4b03      	ldr	r3, [pc, #12]	; (80074c8 <LCD_Init+0x3c18>)
 80074ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074be:	611a      	str	r2, [r3, #16]
 80074c0:	4b01      	ldr	r3, [pc, #4]	; (80074c8 <LCD_Init+0x3c18>)
 80074c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074c6:	e003      	b.n	80074d0 <LCD_Init+0x3c20>
 80074c8:	40011000 	.word	0x40011000
 80074cc:	40010c00 	.word	0x40010c00
 80074d0:	615a      	str	r2, [r3, #20]
 80074d2:	4b8b      	ldr	r3, [pc, #556]	; (8007700 <LCD_Init+0x3e50>)
 80074d4:	2200      	movs	r2, #0
 80074d6:	60da      	str	r2, [r3, #12]
 80074d8:	4b8a      	ldr	r3, [pc, #552]	; (8007704 <LCD_Init+0x3e54>)
 80074da:	2280      	movs	r2, #128	; 0x80
 80074dc:	615a      	str	r2, [r3, #20]
 80074de:	4b89      	ldr	r3, [pc, #548]	; (8007704 <LCD_Init+0x3e54>)
 80074e0:	2280      	movs	r2, #128	; 0x80
 80074e2:	611a      	str	r2, [r3, #16]
 80074e4:	4b87      	ldr	r3, [pc, #540]	; (8007704 <LCD_Init+0x3e54>)
 80074e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074ea:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 80074ec:	20f0      	movs	r0, #240	; 0xf0
 80074ee:	f7fb f97d 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 80074f2:	4b84      	ldr	r3, [pc, #528]	; (8007704 <LCD_Init+0x3e54>)
 80074f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074f8:	611a      	str	r2, [r3, #16]
 80074fa:	4b82      	ldr	r3, [pc, #520]	; (8007704 <LCD_Init+0x3e54>)
 80074fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007500:	615a      	str	r2, [r3, #20]
 8007502:	4b7f      	ldr	r3, [pc, #508]	; (8007700 <LCD_Init+0x3e50>)
 8007504:	2203      	movs	r2, #3
 8007506:	60da      	str	r2, [r3, #12]
 8007508:	4b7e      	ldr	r3, [pc, #504]	; (8007704 <LCD_Init+0x3e54>)
 800750a:	2280      	movs	r2, #128	; 0x80
 800750c:	615a      	str	r2, [r3, #20]
 800750e:	4b7d      	ldr	r3, [pc, #500]	; (8007704 <LCD_Init+0x3e54>)
 8007510:	2280      	movs	r2, #128	; 0x80
 8007512:	611a      	str	r2, [r3, #16]
 8007514:	4b7b      	ldr	r3, [pc, #492]	; (8007704 <LCD_Init+0x3e54>)
 8007516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800751a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 800751c:	2029      	movs	r0, #41	; 0x29
 800751e:	f7fb f965 	bl	80027ec <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8007522:	20d0      	movs	r0, #208	; 0xd0
 8007524:	f7fb f962 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8007528:	4b76      	ldr	r3, [pc, #472]	; (8007704 <LCD_Init+0x3e54>)
 800752a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800752e:	611a      	str	r2, [r3, #16]
 8007530:	4b74      	ldr	r3, [pc, #464]	; (8007704 <LCD_Init+0x3e54>)
 8007532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007536:	615a      	str	r2, [r3, #20]
 8007538:	4b71      	ldr	r3, [pc, #452]	; (8007700 <LCD_Init+0x3e50>)
 800753a:	2200      	movs	r2, #0
 800753c:	60da      	str	r2, [r3, #12]
 800753e:	4b71      	ldr	r3, [pc, #452]	; (8007704 <LCD_Init+0x3e54>)
 8007540:	2280      	movs	r2, #128	; 0x80
 8007542:	615a      	str	r2, [r3, #20]
 8007544:	4b6f      	ldr	r3, [pc, #444]	; (8007704 <LCD_Init+0x3e54>)
 8007546:	2280      	movs	r2, #128	; 0x80
 8007548:	611a      	str	r2, [r3, #16]
 800754a:	4b6e      	ldr	r3, [pc, #440]	; (8007704 <LCD_Init+0x3e54>)
 800754c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007550:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 8007552:	20be      	movs	r0, #190	; 0xbe
 8007554:	f7fb f94a 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8007558:	4b6a      	ldr	r3, [pc, #424]	; (8007704 <LCD_Init+0x3e54>)
 800755a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800755e:	611a      	str	r2, [r3, #16]
 8007560:	4b68      	ldr	r3, [pc, #416]	; (8007704 <LCD_Init+0x3e54>)
 8007562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007566:	615a      	str	r2, [r3, #20]
 8007568:	4b65      	ldr	r3, [pc, #404]	; (8007700 <LCD_Init+0x3e50>)
 800756a:	2205      	movs	r2, #5
 800756c:	60da      	str	r2, [r3, #12]
 800756e:	4b65      	ldr	r3, [pc, #404]	; (8007704 <LCD_Init+0x3e54>)
 8007570:	2280      	movs	r2, #128	; 0x80
 8007572:	615a      	str	r2, [r3, #20]
 8007574:	4b63      	ldr	r3, [pc, #396]	; (8007704 <LCD_Init+0x3e54>)
 8007576:	2280      	movs	r2, #128	; 0x80
 8007578:	611a      	str	r2, [r3, #16]
 800757a:	4b62      	ldr	r3, [pc, #392]	; (8007704 <LCD_Init+0x3e54>)
 800757c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007580:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8007582:	4b60      	ldr	r3, [pc, #384]	; (8007704 <LCD_Init+0x3e54>)
 8007584:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007588:	611a      	str	r2, [r3, #16]
 800758a:	4b5e      	ldr	r3, [pc, #376]	; (8007704 <LCD_Init+0x3e54>)
 800758c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007590:	615a      	str	r2, [r3, #20]
 8007592:	4b5b      	ldr	r3, [pc, #364]	; (8007700 <LCD_Init+0x3e50>)
 8007594:	22fe      	movs	r2, #254	; 0xfe
 8007596:	60da      	str	r2, [r3, #12]
 8007598:	4b5a      	ldr	r3, [pc, #360]	; (8007704 <LCD_Init+0x3e54>)
 800759a:	2280      	movs	r2, #128	; 0x80
 800759c:	615a      	str	r2, [r3, #20]
 800759e:	4b59      	ldr	r3, [pc, #356]	; (8007704 <LCD_Init+0x3e54>)
 80075a0:	2280      	movs	r2, #128	; 0x80
 80075a2:	611a      	str	r2, [r3, #16]
 80075a4:	4b57      	ldr	r3, [pc, #348]	; (8007704 <LCD_Init+0x3e54>)
 80075a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075aa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 80075ac:	4b55      	ldr	r3, [pc, #340]	; (8007704 <LCD_Init+0x3e54>)
 80075ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075b2:	611a      	str	r2, [r3, #16]
 80075b4:	4b53      	ldr	r3, [pc, #332]	; (8007704 <LCD_Init+0x3e54>)
 80075b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075ba:	615a      	str	r2, [r3, #20]
 80075bc:	4b50      	ldr	r3, [pc, #320]	; (8007700 <LCD_Init+0x3e50>)
 80075be:	2201      	movs	r2, #1
 80075c0:	60da      	str	r2, [r3, #12]
 80075c2:	4b50      	ldr	r3, [pc, #320]	; (8007704 <LCD_Init+0x3e54>)
 80075c4:	2280      	movs	r2, #128	; 0x80
 80075c6:	615a      	str	r2, [r3, #20]
 80075c8:	4b4e      	ldr	r3, [pc, #312]	; (8007704 <LCD_Init+0x3e54>)
 80075ca:	2280      	movs	r2, #128	; 0x80
 80075cc:	611a      	str	r2, [r3, #16]
 80075ce:	4b4d      	ldr	r3, [pc, #308]	; (8007704 <LCD_Init+0x3e54>)
 80075d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075d4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 80075d6:	4b4b      	ldr	r3, [pc, #300]	; (8007704 <LCD_Init+0x3e54>)
 80075d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075dc:	611a      	str	r2, [r3, #16]
 80075de:	4b49      	ldr	r3, [pc, #292]	; (8007704 <LCD_Init+0x3e54>)
 80075e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075e4:	615a      	str	r2, [r3, #20]
 80075e6:	4b46      	ldr	r3, [pc, #280]	; (8007700 <LCD_Init+0x3e50>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	60da      	str	r2, [r3, #12]
 80075ec:	4b45      	ldr	r3, [pc, #276]	; (8007704 <LCD_Init+0x3e54>)
 80075ee:	2280      	movs	r2, #128	; 0x80
 80075f0:	615a      	str	r2, [r3, #20]
 80075f2:	4b44      	ldr	r3, [pc, #272]	; (8007704 <LCD_Init+0x3e54>)
 80075f4:	2280      	movs	r2, #128	; 0x80
 80075f6:	611a      	str	r2, [r3, #16]
 80075f8:	4b42      	ldr	r3, [pc, #264]	; (8007704 <LCD_Init+0x3e54>)
 80075fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075fe:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8007600:	4b40      	ldr	r3, [pc, #256]	; (8007704 <LCD_Init+0x3e54>)
 8007602:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007606:	611a      	str	r2, [r3, #16]
 8007608:	4b3e      	ldr	r3, [pc, #248]	; (8007704 <LCD_Init+0x3e54>)
 800760a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800760e:	615a      	str	r2, [r3, #20]
 8007610:	4b3b      	ldr	r3, [pc, #236]	; (8007700 <LCD_Init+0x3e50>)
 8007612:	2200      	movs	r2, #0
 8007614:	60da      	str	r2, [r3, #12]
 8007616:	4b3b      	ldr	r3, [pc, #236]	; (8007704 <LCD_Init+0x3e54>)
 8007618:	2280      	movs	r2, #128	; 0x80
 800761a:	615a      	str	r2, [r3, #20]
 800761c:	4b39      	ldr	r3, [pc, #228]	; (8007704 <LCD_Init+0x3e54>)
 800761e:	2280      	movs	r2, #128	; 0x80
 8007620:	611a      	str	r2, [r3, #16]
 8007622:	4b38      	ldr	r3, [pc, #224]	; (8007704 <LCD_Init+0x3e54>)
 8007624:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007628:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 800762a:	4b36      	ldr	r3, [pc, #216]	; (8007704 <LCD_Init+0x3e54>)
 800762c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007630:	611a      	str	r2, [r3, #16]
 8007632:	4b34      	ldr	r3, [pc, #208]	; (8007704 <LCD_Init+0x3e54>)
 8007634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007638:	615a      	str	r2, [r3, #20]
 800763a:	4b31      	ldr	r3, [pc, #196]	; (8007700 <LCD_Init+0x3e50>)
 800763c:	2200      	movs	r2, #0
 800763e:	60da      	str	r2, [r3, #12]
 8007640:	4b30      	ldr	r3, [pc, #192]	; (8007704 <LCD_Init+0x3e54>)
 8007642:	2280      	movs	r2, #128	; 0x80
 8007644:	615a      	str	r2, [r3, #20]
 8007646:	4b2f      	ldr	r3, [pc, #188]	; (8007704 <LCD_Init+0x3e54>)
 8007648:	2280      	movs	r2, #128	; 0x80
 800764a:	611a      	str	r2, [r3, #16]
 800764c:	4b2d      	ldr	r3, [pc, #180]	; (8007704 <LCD_Init+0x3e54>)
 800764e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007652:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8007654:	20b8      	movs	r0, #184	; 0xb8
 8007656:	f7fb f8c9 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 800765a:	4b2a      	ldr	r3, [pc, #168]	; (8007704 <LCD_Init+0x3e54>)
 800765c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007660:	611a      	str	r2, [r3, #16]
 8007662:	4b28      	ldr	r3, [pc, #160]	; (8007704 <LCD_Init+0x3e54>)
 8007664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007668:	615a      	str	r2, [r3, #20]
 800766a:	4b25      	ldr	r3, [pc, #148]	; (8007700 <LCD_Init+0x3e50>)
 800766c:	2203      	movs	r2, #3
 800766e:	60da      	str	r2, [r3, #12]
 8007670:	4b24      	ldr	r3, [pc, #144]	; (8007704 <LCD_Init+0x3e54>)
 8007672:	2280      	movs	r2, #128	; 0x80
 8007674:	615a      	str	r2, [r3, #20]
 8007676:	4b23      	ldr	r3, [pc, #140]	; (8007704 <LCD_Init+0x3e54>)
 8007678:	2280      	movs	r2, #128	; 0x80
 800767a:	611a      	str	r2, [r3, #16]
 800767c:	4b21      	ldr	r3, [pc, #132]	; (8007704 <LCD_Init+0x3e54>)
 800767e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007682:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8007684:	4b1f      	ldr	r3, [pc, #124]	; (8007704 <LCD_Init+0x3e54>)
 8007686:	f44f 7280 	mov.w	r2, #256	; 0x100
 800768a:	611a      	str	r2, [r3, #16]
 800768c:	4b1d      	ldr	r3, [pc, #116]	; (8007704 <LCD_Init+0x3e54>)
 800768e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007692:	615a      	str	r2, [r3, #20]
 8007694:	4b1a      	ldr	r3, [pc, #104]	; (8007700 <LCD_Init+0x3e50>)
 8007696:	2201      	movs	r2, #1
 8007698:	60da      	str	r2, [r3, #12]
 800769a:	4b1a      	ldr	r3, [pc, #104]	; (8007704 <LCD_Init+0x3e54>)
 800769c:	2280      	movs	r2, #128	; 0x80
 800769e:	615a      	str	r2, [r3, #20]
 80076a0:	4b18      	ldr	r3, [pc, #96]	; (8007704 <LCD_Init+0x3e54>)
 80076a2:	2280      	movs	r2, #128	; 0x80
 80076a4:	611a      	str	r2, [r3, #16]
 80076a6:	4b17      	ldr	r3, [pc, #92]	; (8007704 <LCD_Init+0x3e54>)
 80076a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076ac:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 80076ae:	20ba      	movs	r0, #186	; 0xba
 80076b0:	f7fb f89c 	bl	80027ec <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 80076b4:	4b13      	ldr	r3, [pc, #76]	; (8007704 <LCD_Init+0x3e54>)
 80076b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076ba:	611a      	str	r2, [r3, #16]
 80076bc:	4b11      	ldr	r3, [pc, #68]	; (8007704 <LCD_Init+0x3e54>)
 80076be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076c2:	615a      	str	r2, [r3, #20]
 80076c4:	4b0e      	ldr	r3, [pc, #56]	; (8007700 <LCD_Init+0x3e50>)
 80076c6:	2201      	movs	r2, #1
 80076c8:	60da      	str	r2, [r3, #12]
 80076ca:	4b0e      	ldr	r3, [pc, #56]	; (8007704 <LCD_Init+0x3e54>)
 80076cc:	2280      	movs	r2, #128	; 0x80
 80076ce:	615a      	str	r2, [r3, #20]
 80076d0:	4b0c      	ldr	r3, [pc, #48]	; (8007704 <LCD_Init+0x3e54>)
 80076d2:	2280      	movs	r2, #128	; 0x80
 80076d4:	611a      	str	r2, [r3, #16]
 80076d6:	4b0b      	ldr	r3, [pc, #44]	; (8007704 <LCD_Init+0x3e54>)
 80076d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076dc:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 80076de:	2064      	movs	r0, #100	; 0x64
 80076e0:	f7fb ff36 	bl	8003550 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 80076e4:	2000      	movs	r0, #0
 80076e6:	f7fb ffd7 	bl	8003698 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 80076ea:	4b07      	ldr	r3, [pc, #28]	; (8007708 <LCD_Init+0x3e58>)
 80076ec:	2201      	movs	r2, #1
 80076ee:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 80076f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80076f4:	f000 f80a 	bl	800770c <LCD_Clear>
}
 80076f8:	bf00      	nop
 80076fa:	3718      	adds	r7, #24
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	40010c00 	.word	0x40010c00
 8007704:	40011000 	.word	0x40011000
 8007708:	422201a8 	.word	0x422201a8

0800770c <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	4603      	mov	r3, r0
 8007714:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8007716:	2300      	movs	r3, #0
 8007718:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 800771a:	4b2a      	ldr	r3, [pc, #168]	; (80077c4 <LCD_Clear+0xb8>)
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8007720:	4b28      	ldr	r3, [pc, #160]	; (80077c4 <LCD_Clear+0xb8>)
 8007722:	885b      	ldrh	r3, [r3, #2]
 8007724:	461a      	mov	r2, r3
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	fb02 f303 	mul.w	r3, r2, r3
 800772c:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 800772e:	4b25      	ldr	r3, [pc, #148]	; (80077c4 <LCD_Clear+0xb8>)
 8007730:	889b      	ldrh	r3, [r3, #4]
 8007732:	f646 0204 	movw	r2, #26628	; 0x6804
 8007736:	4293      	cmp	r3, r2
 8007738:	d11a      	bne.n	8007770 <LCD_Clear+0x64>
 800773a:	4b22      	ldr	r3, [pc, #136]	; (80077c4 <LCD_Clear+0xb8>)
 800773c:	799b      	ldrb	r3, [r3, #6]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d116      	bne.n	8007770 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8007742:	4b20      	ldr	r3, [pc, #128]	; (80077c4 <LCD_Clear+0xb8>)
 8007744:	2200      	movs	r2, #0
 8007746:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8007748:	4b1e      	ldr	r3, [pc, #120]	; (80077c4 <LCD_Clear+0xb8>)
 800774a:	222a      	movs	r2, #42	; 0x2a
 800774c:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 800774e:	4b1d      	ldr	r3, [pc, #116]	; (80077c4 <LCD_Clear+0xb8>)
 8007750:	222b      	movs	r2, #43	; 0x2b
 8007752:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 8007754:	2100      	movs	r1, #0
 8007756:	2000      	movs	r0, #0
 8007758:	f7fb f91a 	bl	8002990 <LCD_SetCursor>
		lcddev.dir = 1;
 800775c:	4b19      	ldr	r3, [pc, #100]	; (80077c4 <LCD_Clear+0xb8>)
 800775e:	2201      	movs	r2, #1
 8007760:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8007762:	4b18      	ldr	r3, [pc, #96]	; (80077c4 <LCD_Clear+0xb8>)
 8007764:	222b      	movs	r2, #43	; 0x2b
 8007766:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8007768:	4b16      	ldr	r3, [pc, #88]	; (80077c4 <LCD_Clear+0xb8>)
 800776a:	222a      	movs	r2, #42	; 0x2a
 800776c:	819a      	strh	r2, [r3, #12]
 800776e:	e003      	b.n	8007778 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8007770:	2100      	movs	r1, #0
 8007772:	2000      	movs	r0, #0
 8007774:	f7fb f90c 	bl	8002990 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8007778:	f7fb f8fe 	bl	8002978 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 800777c:	2300      	movs	r3, #0
 800777e:	60fb      	str	r3, [r7, #12]
 8007780:	e017      	b.n	80077b2 <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8007782:	4b11      	ldr	r3, [pc, #68]	; (80077c8 <LCD_Clear+0xbc>)
 8007784:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007788:	611a      	str	r2, [r3, #16]
 800778a:	4b0f      	ldr	r3, [pc, #60]	; (80077c8 <LCD_Clear+0xbc>)
 800778c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007790:	615a      	str	r2, [r3, #20]
 8007792:	4a0e      	ldr	r2, [pc, #56]	; (80077cc <LCD_Clear+0xc0>)
 8007794:	88fb      	ldrh	r3, [r7, #6]
 8007796:	60d3      	str	r3, [r2, #12]
 8007798:	4b0b      	ldr	r3, [pc, #44]	; (80077c8 <LCD_Clear+0xbc>)
 800779a:	2280      	movs	r2, #128	; 0x80
 800779c:	615a      	str	r2, [r3, #20]
 800779e:	4b0a      	ldr	r3, [pc, #40]	; (80077c8 <LCD_Clear+0xbc>)
 80077a0:	2280      	movs	r2, #128	; 0x80
 80077a2:	611a      	str	r2, [r3, #16]
 80077a4:	4b08      	ldr	r3, [pc, #32]	; (80077c8 <LCD_Clear+0xbc>)
 80077a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077aa:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	3301      	adds	r3, #1
 80077b0:	60fb      	str	r3, [r7, #12]
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d3e3      	bcc.n	8007782 <LCD_Clear+0x76>
}
 80077ba:	bf00      	nop
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	200002f0 	.word	0x200002f0
 80077c8:	40011000 	.word	0x40011000
 80077cc:	40010c00 	.word	0x40010c00

080077d0 <LCD_Fill>:
// Fill the area with color
// :(xend-xsta+1)*(yend-ysta+1)
void LCD_Fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey,
		uint16_t color) {
 80077d0:	b590      	push	{r4, r7, lr}
 80077d2:	b087      	sub	sp, #28
 80077d4:	af02      	add	r7, sp, #8
 80077d6:	4604      	mov	r4, r0
 80077d8:	4608      	mov	r0, r1
 80077da:	4611      	mov	r1, r2
 80077dc:	461a      	mov	r2, r3
 80077de:	4623      	mov	r3, r4
 80077e0:	80fb      	strh	r3, [r7, #6]
 80077e2:	4603      	mov	r3, r0
 80077e4:	80bb      	strh	r3, [r7, #4]
 80077e6:	460b      	mov	r3, r1
 80077e8:	807b      	strh	r3, [r7, #2]
 80077ea:	4613      	mov	r3, r2
 80077ec:	803b      	strh	r3, [r7, #0]
	uint16_t i, j;
	uint16_t xlen = 0;
 80077ee:	2300      	movs	r3, #0
 80077f0:	817b      	strh	r3, [r7, #10]
	uint16_t temp;
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1))	//6804横屏的时候特殊处理
 80077f2:	4b3a      	ldr	r3, [pc, #232]	; (80078dc <LCD_Fill+0x10c>)
 80077f4:	889b      	ldrh	r3, [r3, #4]
 80077f6:	f646 0204 	movw	r2, #26628	; 0x6804
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d133      	bne.n	8007866 <LCD_Fill+0x96>
 80077fe:	4b37      	ldr	r3, [pc, #220]	; (80078dc <LCD_Fill+0x10c>)
 8007800:	799b      	ldrb	r3, [r3, #6]
 8007802:	2b01      	cmp	r3, #1
 8007804:	d12f      	bne.n	8007866 <LCD_Fill+0x96>
			{
		temp = sx;
 8007806:	88fb      	ldrh	r3, [r7, #6]
 8007808:	813b      	strh	r3, [r7, #8]
		sx = sy;
 800780a:	88bb      	ldrh	r3, [r7, #4]
 800780c:	80fb      	strh	r3, [r7, #6]
		sy = lcddev.width - ex - 1;
 800780e:	4b33      	ldr	r3, [pc, #204]	; (80078dc <LCD_Fill+0x10c>)
 8007810:	881a      	ldrh	r2, [r3, #0]
 8007812:	887b      	ldrh	r3, [r7, #2]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	b29b      	uxth	r3, r3
 8007818:	3b01      	subs	r3, #1
 800781a:	80bb      	strh	r3, [r7, #4]
		ex = ey;
 800781c:	883b      	ldrh	r3, [r7, #0]
 800781e:	807b      	strh	r3, [r7, #2]
		ey = lcddev.width - temp - 1;
 8007820:	4b2e      	ldr	r3, [pc, #184]	; (80078dc <LCD_Fill+0x10c>)
 8007822:	881a      	ldrh	r2, [r3, #0]
 8007824:	893b      	ldrh	r3, [r7, #8]
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	b29b      	uxth	r3, r3
 800782a:	3b01      	subs	r3, #1
 800782c:	803b      	strh	r3, [r7, #0]
		lcddev.dir = 0;
 800782e:	4b2b      	ldr	r3, [pc, #172]	; (80078dc <LCD_Fill+0x10c>)
 8007830:	2200      	movs	r2, #0
 8007832:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8007834:	4b29      	ldr	r3, [pc, #164]	; (80078dc <LCD_Fill+0x10c>)
 8007836:	222a      	movs	r2, #42	; 0x2a
 8007838:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 800783a:	4b28      	ldr	r3, [pc, #160]	; (80078dc <LCD_Fill+0x10c>)
 800783c:	222b      	movs	r2, #43	; 0x2b
 800783e:	819a      	strh	r2, [r3, #12]
		LCD_Fill(sx, sy, ex, ey, color);
 8007840:	883c      	ldrh	r4, [r7, #0]
 8007842:	887a      	ldrh	r2, [r7, #2]
 8007844:	88b9      	ldrh	r1, [r7, #4]
 8007846:	88f8      	ldrh	r0, [r7, #6]
 8007848:	8c3b      	ldrh	r3, [r7, #32]
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	4623      	mov	r3, r4
 800784e:	f7ff ffbf 	bl	80077d0 <LCD_Fill>
		lcddev.dir = 1;
 8007852:	4b22      	ldr	r3, [pc, #136]	; (80078dc <LCD_Fill+0x10c>)
 8007854:	2201      	movs	r2, #1
 8007856:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8007858:	4b20      	ldr	r3, [pc, #128]	; (80078dc <LCD_Fill+0x10c>)
 800785a:	222b      	movs	r2, #43	; 0x2b
 800785c:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 800785e:	4b1f      	ldr	r3, [pc, #124]	; (80078dc <LCD_Fill+0x10c>)
 8007860:	222a      	movs	r2, #42	; 0x2a
 8007862:	819a      	strh	r2, [r3, #12]
 8007864:	e036      	b.n	80078d4 <LCD_Fill+0x104>
	} else {
		xlen = ex - sx + 1;
 8007866:	887a      	ldrh	r2, [r7, #2]
 8007868:	88fb      	ldrh	r3, [r7, #6]
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	b29b      	uxth	r3, r3
 800786e:	3301      	adds	r3, #1
 8007870:	817b      	strh	r3, [r7, #10]
		for (i = sy; i <= ey; i++) {
 8007872:	88bb      	ldrh	r3, [r7, #4]
 8007874:	81fb      	strh	r3, [r7, #14]
 8007876:	e029      	b.n	80078cc <LCD_Fill+0xfc>
			LCD_SetCursor(sx, i);      				//设置光标位置
 8007878:	89fa      	ldrh	r2, [r7, #14]
 800787a:	88fb      	ldrh	r3, [r7, #6]
 800787c:	4611      	mov	r1, r2
 800787e:	4618      	mov	r0, r3
 8007880:	f7fb f886 	bl	8002990 <LCD_SetCursor>
			LCD_WriteRAM_Prepare();     			//开始写入GRAM	  
 8007884:	f7fb f878 	bl	8002978 <LCD_WriteRAM_Prepare>
			for (j = 0; j < xlen; j++)
 8007888:	2300      	movs	r3, #0
 800788a:	81bb      	strh	r3, [r7, #12]
 800788c:	e017      	b.n	80078be <LCD_Fill+0xee>
				LCD_WR_DATA(color);	//设置光标位置
 800788e:	4b14      	ldr	r3, [pc, #80]	; (80078e0 <LCD_Fill+0x110>)
 8007890:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007894:	611a      	str	r2, [r3, #16]
 8007896:	4b12      	ldr	r3, [pc, #72]	; (80078e0 <LCD_Fill+0x110>)
 8007898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800789c:	615a      	str	r2, [r3, #20]
 800789e:	4a11      	ldr	r2, [pc, #68]	; (80078e4 <LCD_Fill+0x114>)
 80078a0:	8c3b      	ldrh	r3, [r7, #32]
 80078a2:	60d3      	str	r3, [r2, #12]
 80078a4:	4b0e      	ldr	r3, [pc, #56]	; (80078e0 <LCD_Fill+0x110>)
 80078a6:	2280      	movs	r2, #128	; 0x80
 80078a8:	615a      	str	r2, [r3, #20]
 80078aa:	4b0d      	ldr	r3, [pc, #52]	; (80078e0 <LCD_Fill+0x110>)
 80078ac:	2280      	movs	r2, #128	; 0x80
 80078ae:	611a      	str	r2, [r3, #16]
 80078b0:	4b0b      	ldr	r3, [pc, #44]	; (80078e0 <LCD_Fill+0x110>)
 80078b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078b6:	611a      	str	r2, [r3, #16]
			for (j = 0; j < xlen; j++)
 80078b8:	89bb      	ldrh	r3, [r7, #12]
 80078ba:	3301      	adds	r3, #1
 80078bc:	81bb      	strh	r3, [r7, #12]
 80078be:	89ba      	ldrh	r2, [r7, #12]
 80078c0:	897b      	ldrh	r3, [r7, #10]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d3e3      	bcc.n	800788e <LCD_Fill+0xbe>
		for (i = sy; i <= ey; i++) {
 80078c6:	89fb      	ldrh	r3, [r7, #14]
 80078c8:	3301      	adds	r3, #1
 80078ca:	81fb      	strh	r3, [r7, #14]
 80078cc:	89fa      	ldrh	r2, [r7, #14]
 80078ce:	883b      	ldrh	r3, [r7, #0]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d9d1      	bls.n	8007878 <LCD_Fill+0xa8>
		}
	}
}
 80078d4:	bf00      	nop
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd90      	pop	{r4, r7, pc}
 80078dc:	200002f0 	.word	0x200002f0
 80078e0:	40011000 	.word	0x40011000
 80078e4:	40010c00 	.word	0x40010c00

080078e8 <Demo4_Routine>:
#include "Demo1_GameObject_Self.h"
#include "Img_TestImages.h"
#include "GameEvent.h"
#include "GameEngine.h"

void Demo4_Routine(){
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b088      	sub	sp, #32
 80078ec:	af06      	add	r7, sp, #24

	Demo1_GameObject_Self *self = malloc(sizeof(GameObject_Self));
 80078ee:	2024      	movs	r0, #36	; 0x24
 80078f0:	f000 fd06 	bl	8008300 <malloc>
 80078f4:	4603      	mov	r3, r0
 80078f6:	607b      	str	r3, [r7, #4]

	Demo1_Init(self, 1, 15, 20, 10, 10, 10, Img_GreenBlock_10x10, "Demo1");
 80078f8:	4b16      	ldr	r3, [pc, #88]	; (8007954 <Demo4_Routine+0x6c>)
 80078fa:	9304      	str	r3, [sp, #16]
 80078fc:	4b16      	ldr	r3, [pc, #88]	; (8007958 <Demo4_Routine+0x70>)
 80078fe:	9303      	str	r3, [sp, #12]
 8007900:	230a      	movs	r3, #10
 8007902:	9302      	str	r3, [sp, #8]
 8007904:	230a      	movs	r3, #10
 8007906:	9301      	str	r3, [sp, #4]
 8007908:	230a      	movs	r3, #10
 800790a:	9300      	str	r3, [sp, #0]
 800790c:	2314      	movs	r3, #20
 800790e:	220f      	movs	r2, #15
 8007910:	2101      	movs	r1, #1
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fa54 	bl	8007dc0 <Demo1_Init>

	GameEvent *event = RegistGameEvent(
 8007918:	4b10      	ldr	r3, [pc, #64]	; (800795c <Demo4_Routine+0x74>)
 800791a:	9302      	str	r3, [sp, #8]
 800791c:	4b10      	ldr	r3, [pc, #64]	; (8007960 <Demo4_Routine+0x78>)
 800791e:	9301      	str	r3, [sp, #4]
 8007920:	4b10      	ldr	r3, [pc, #64]	; (8007964 <Demo4_Routine+0x7c>)
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	4b10      	ldr	r3, [pc, #64]	; (8007968 <Demo4_Routine+0x80>)
 8007926:	4a11      	ldr	r2, [pc, #68]	; (800796c <Demo4_Routine+0x84>)
 8007928:	4911      	ldr	r1, [pc, #68]	; (8007970 <Demo4_Routine+0x88>)
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7fa fdb8 	bl	80024a0 <RegistGameEvent>
 8007930:	6038      	str	r0, [r7, #0]
							self,
							Demo1_OnCreate, Demo1_OnUpdate, Demo1_OnDestroy,
							Demo1_OnRender, __Demo1_Created, __Demo1_ToDestroy
						);

	println("regested");
 8007932:	4810      	ldr	r0, [pc, #64]	; (8007974 <Demo4_Routine+0x8c>)
 8007934:	f000 f8c4 	bl	8007ac0 <println>

	Push(&objects, event);
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	480f      	ldr	r0, [pc, #60]	; (8007978 <Demo4_Routine+0x90>)
 800793c:	f000 faac 	bl	8007e98 <Push>

	println("pushed");
 8007940:	480e      	ldr	r0, [pc, #56]	; (800797c <Demo4_Routine+0x94>)
 8007942:	f000 f8bd 	bl	8007ac0 <println>

	GameEngineLoop();
 8007946:	f7fa fd31 	bl	80023ac <GameEngineLoop>
}
 800794a:	bf00      	nop
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	0800a42c 	.word	0x0800a42c
 8007958:	20000008 	.word	0x20000008
 800795c:	08007e7f 	.word	0x08007e7f
 8007960:	08007e65 	.word	0x08007e65
 8007964:	08007e49 	.word	0x08007e49
 8007968:	08007e33 	.word	0x08007e33
 800796c:	08007e1b 	.word	0x08007e1b
 8007970:	08007e03 	.word	0x08007e03
 8007974:	0800a434 	.word	0x0800a434
 8007978:	200002e4 	.word	0x200002e4
 800797c:	0800a440 	.word	0x0800a440

08007980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007984:	f7f9 fb90 	bl	80010a8 <HAL_Init>

  /* USER CODE BEGIN Init */
	LCD_Init();
 8007988:	f7fb ff92 	bl	80038b0 <LCD_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800798c:	f000 f807 	bl	800799e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007990:	f7fa fe8a 	bl	80026a8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8007994:	f000 f99e 	bl	8007cd4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // 开启场景
  Demo4_Routine();
 8007998:	f7ff ffa6 	bl	80078e8 <Demo4_Routine>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 800799c:	e7fe      	b.n	800799c <main+0x1c>

0800799e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b090      	sub	sp, #64	; 0x40
 80079a2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80079a4:	f107 0318 	add.w	r3, r7, #24
 80079a8:	2228      	movs	r2, #40	; 0x28
 80079aa:	2100      	movs	r1, #0
 80079ac:	4618      	mov	r0, r3
 80079ae:	f000 fcb7 	bl	8008320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80079b2:	1d3b      	adds	r3, r7, #4
 80079b4:	2200      	movs	r2, #0
 80079b6:	601a      	str	r2, [r3, #0]
 80079b8:	605a      	str	r2, [r3, #4]
 80079ba:	609a      	str	r2, [r3, #8]
 80079bc:	60da      	str	r2, [r3, #12]
 80079be:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80079c0:	2302      	movs	r3, #2
 80079c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80079c4:	2301      	movs	r3, #1
 80079c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80079c8:	2310      	movs	r3, #16
 80079ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80079cc:	2300      	movs	r3, #0
 80079ce:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80079d0:	f107 0318 	add.w	r3, r7, #24
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7f9 fec3 	bl	8001760 <HAL_RCC_OscConfig>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d001      	beq.n	80079e4 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80079e0:	f000 f864 	bl	8007aac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80079e4:	230f      	movs	r3, #15
 80079e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80079e8:	2300      	movs	r3, #0
 80079ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80079ec:	2300      	movs	r3, #0
 80079ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80079f0:	2300      	movs	r3, #0
 80079f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80079f4:	2300      	movs	r3, #0
 80079f6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80079f8:	1d3b      	adds	r3, r7, #4
 80079fa:	2100      	movs	r1, #0
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7fa f92f 	bl	8001c60 <HAL_RCC_ClockConfig>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d001      	beq.n	8007a0c <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8007a08:	f000 f850 	bl	8007aac <Error_Handler>
  }
}
 8007a0c:	bf00      	nop
 8007a0e:	3740      	adds	r7, #64	; 0x40
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	80fb      	strh	r3, [r7, #6]
HAL_Delay(100);
 8007a1e:	2064      	movs	r0, #100	; 0x64
 8007a20:	f7f9 fba4 	bl	800116c <HAL_Delay>
switch (GPIO_Pin) {
 8007a24:	88fb      	ldrh	r3, [r7, #6]
 8007a26:	2b20      	cmp	r3, #32
 8007a28:	d005      	beq.n	8007a36 <HAL_GPIO_EXTI_Callback+0x22>
 8007a2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a2e:	d00f      	beq.n	8007a50 <HAL_GPIO_EXTI_Callback+0x3c>
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d01a      	beq.n	8007a6a <HAL_GPIO_EXTI_Callback+0x56>
HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
}
break;
default:
break;
 8007a34:	e02f      	b.n	8007a96 <HAL_GPIO_EXTI_Callback+0x82>
if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET) {
 8007a36:	2120      	movs	r1, #32
 8007a38:	4819      	ldr	r0, [pc, #100]	; (8007aa0 <HAL_GPIO_EXTI_Callback+0x8c>)
 8007a3a:	f7f9 fe31 	bl	80016a0 <HAL_GPIO_ReadPin>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d123      	bne.n	8007a8c <HAL_GPIO_EXTI_Callback+0x78>
HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8007a44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a48:	4816      	ldr	r0, [pc, #88]	; (8007aa4 <HAL_GPIO_EXTI_Callback+0x90>)
 8007a4a:	f7f9 fe58 	bl	80016fe <HAL_GPIO_TogglePin>
break;
 8007a4e:	e01d      	b.n	8007a8c <HAL_GPIO_EXTI_Callback+0x78>
if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET) {
 8007a50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a54:	4813      	ldr	r0, [pc, #76]	; (8007aa4 <HAL_GPIO_EXTI_Callback+0x90>)
 8007a56:	f7f9 fe23 	bl	80016a0 <HAL_GPIO_ReadPin>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d117      	bne.n	8007a90 <HAL_GPIO_EXTI_Callback+0x7c>
HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8007a60:	2104      	movs	r1, #4
 8007a62:	4811      	ldr	r0, [pc, #68]	; (8007aa8 <HAL_GPIO_EXTI_Callback+0x94>)
 8007a64:	f7f9 fe4b 	bl	80016fe <HAL_GPIO_TogglePin>
break;
 8007a68:	e012      	b.n	8007a90 <HAL_GPIO_EXTI_Callback+0x7c>
if (HAL_GPIO_ReadPin(KEY_WK_GPIO_Port, KEY_WK_Pin) == GPIO_PIN_SET) {
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	480d      	ldr	r0, [pc, #52]	; (8007aa4 <HAL_GPIO_EXTI_Callback+0x90>)
 8007a6e:	f7f9 fe17 	bl	80016a0 <HAL_GPIO_ReadPin>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d10d      	bne.n	8007a94 <HAL_GPIO_EXTI_Callback+0x80>
HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8007a78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a7c:	4809      	ldr	r0, [pc, #36]	; (8007aa4 <HAL_GPIO_EXTI_Callback+0x90>)
 8007a7e:	f7f9 fe3e 	bl	80016fe <HAL_GPIO_TogglePin>
HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8007a82:	2104      	movs	r1, #4
 8007a84:	4808      	ldr	r0, [pc, #32]	; (8007aa8 <HAL_GPIO_EXTI_Callback+0x94>)
 8007a86:	f7f9 fe3a 	bl	80016fe <HAL_GPIO_TogglePin>
break;
 8007a8a:	e003      	b.n	8007a94 <HAL_GPIO_EXTI_Callback+0x80>
break;
 8007a8c:	bf00      	nop
 8007a8e:	e002      	b.n	8007a96 <HAL_GPIO_EXTI_Callback+0x82>
break;
 8007a90:	bf00      	nop
 8007a92:	e000      	b.n	8007a96 <HAL_GPIO_EXTI_Callback+0x82>
break;
 8007a94:	bf00      	nop
}}
 8007a96:	bf00      	nop
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	40011000 	.word	0x40011000
 8007aa4:	40010800 	.word	0x40010800
 8007aa8:	40011400 	.word	0x40011400

08007aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	printlnf("error");
 8007ab0:	4802      	ldr	r0, [pc, #8]	; (8007abc <Error_Handler+0x10>)
 8007ab2:	f000 f823 	bl	8007afc <printlnf>
	/* User can add his own implementation to report the HAL error return state */
  /* USER CODE END Error_Handler_Debug */
}
 8007ab6:	bf00      	nop
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	0800a448 	.word	0x0800a448

08007ac0 <println>:
#include <stdarg.h>

char __msg[50];

void println(const char* str)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
	sprintf(__msg, "%s\n", str);
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	4909      	ldr	r1, [pc, #36]	; (8007af0 <println+0x30>)
 8007acc:	4809      	ldr	r0, [pc, #36]	; (8007af4 <println+0x34>)
 8007ace:	f001 f943 	bl	8008d58 <siprintf>
	HAL_UART_Transmit(&huart1, (unsigned char*)__msg, strlen(__msg), 0xffff);
 8007ad2:	4808      	ldr	r0, [pc, #32]	; (8007af4 <println+0x34>)
 8007ad4:	f7f8 fba8 	bl	8000228 <strlen>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007ae0:	4904      	ldr	r1, [pc, #16]	; (8007af4 <println+0x34>)
 8007ae2:	4805      	ldr	r0, [pc, #20]	; (8007af8 <println+0x38>)
 8007ae4:	f7fa faa5 	bl	8002032 <HAL_UART_Transmit>
}
 8007ae8:	bf00      	nop
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	0800a450 	.word	0x0800a450
 8007af4:	20000300 	.word	0x20000300
 8007af8:	20000334 	.word	0x20000334

08007afc <printlnf>:

void printlnf(const char* fmt, ...)
{
 8007afc:	b40f      	push	{r0, r1, r2, r3}
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b082      	sub	sp, #8
 8007b02:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, fmt);
 8007b04:	f107 0314 	add.w	r3, r7, #20
 8007b08:	607b      	str	r3, [r7, #4]
	vsprintf(__msg, fmt, args);
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	6939      	ldr	r1, [r7, #16]
 8007b0e:	4806      	ldr	r0, [pc, #24]	; (8007b28 <printlnf+0x2c>)
 8007b10:	f001 f958 	bl	8008dc4 <vsiprintf>
	va_end(args);

	println(__msg);
 8007b14:	4804      	ldr	r0, [pc, #16]	; (8007b28 <printlnf+0x2c>)
 8007b16:	f7ff ffd3 	bl	8007ac0 <println>
}
 8007b1a:	bf00      	nop
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b24:	b004      	add	sp, #16
 8007b26:	4770      	bx	lr
 8007b28:	20000300 	.word	0x20000300

08007b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007b32:	4b16      	ldr	r3, [pc, #88]	; (8007b8c <HAL_MspInit+0x60>)
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	4a15      	ldr	r2, [pc, #84]	; (8007b8c <HAL_MspInit+0x60>)
 8007b38:	f043 0301 	orr.w	r3, r3, #1
 8007b3c:	6193      	str	r3, [r2, #24]
 8007b3e:	4b13      	ldr	r3, [pc, #76]	; (8007b8c <HAL_MspInit+0x60>)
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	60bb      	str	r3, [r7, #8]
 8007b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007b4a:	4b10      	ldr	r3, [pc, #64]	; (8007b8c <HAL_MspInit+0x60>)
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	4a0f      	ldr	r2, [pc, #60]	; (8007b8c <HAL_MspInit+0x60>)
 8007b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b54:	61d3      	str	r3, [r2, #28]
 8007b56:	4b0d      	ldr	r3, [pc, #52]	; (8007b8c <HAL_MspInit+0x60>)
 8007b58:	69db      	ldr	r3, [r3, #28]
 8007b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b5e:	607b      	str	r3, [r7, #4]
 8007b60:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8007b62:	2005      	movs	r0, #5
 8007b64:	f7f9 fbf0 	bl	8001348 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007b68:	4b09      	ldr	r3, [pc, #36]	; (8007b90 <HAL_MspInit+0x64>)
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	60fb      	str	r3, [r7, #12]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007b74:	60fb      	str	r3, [r7, #12]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007b7c:	60fb      	str	r3, [r7, #12]
 8007b7e:	4a04      	ldr	r2, [pc, #16]	; (8007b90 <HAL_MspInit+0x64>)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007b84:	bf00      	nop
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	40021000 	.word	0x40021000
 8007b90:	40010000 	.word	0x40010000

08007b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007b94:	b480      	push	{r7}
 8007b96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007b98:	bf00      	nop
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bc80      	pop	{r7}
 8007b9e:	4770      	bx	lr

08007ba0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007ba4:	e7fe      	b.n	8007ba4 <HardFault_Handler+0x4>

08007ba6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007baa:	e7fe      	b.n	8007baa <MemManage_Handler+0x4>

08007bac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007bac:	b480      	push	{r7}
 8007bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007bb0:	e7fe      	b.n	8007bb0 <BusFault_Handler+0x4>

08007bb2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007bb6:	e7fe      	b.n	8007bb6 <UsageFault_Handler+0x4>

08007bb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007bbc:	bf00      	nop
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bc80      	pop	{r7}
 8007bc2:	4770      	bx	lr

08007bc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007bc8:	bf00      	nop
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bc80      	pop	{r7}
 8007bce:	4770      	bx	lr

08007bd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007bd4:	bf00      	nop
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bc80      	pop	{r7}
 8007bda:	4770      	bx	lr

08007bdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007be0:	f7f9 faa8 	bl	8001134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007be4:	bf00      	nop
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8007bec:	2001      	movs	r0, #1
 8007bee:	f7f9 fd9f 	bl	8001730 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007bf2:	bf00      	nop
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8007bfa:	2020      	movs	r0, #32
 8007bfc:	f7f9 fd98 	bl	8001730 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007c00:	bf00      	nop
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8007c08:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007c0c:	f7f9 fd90 	bl	8001730 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007c10:	bf00      	nop
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007c1c:	4b11      	ldr	r3, [pc, #68]	; (8007c64 <_sbrk+0x50>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d102      	bne.n	8007c2a <_sbrk+0x16>
		heap_end = &end;
 8007c24:	4b0f      	ldr	r3, [pc, #60]	; (8007c64 <_sbrk+0x50>)
 8007c26:	4a10      	ldr	r2, [pc, #64]	; (8007c68 <_sbrk+0x54>)
 8007c28:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007c2a:	4b0e      	ldr	r3, [pc, #56]	; (8007c64 <_sbrk+0x50>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007c30:	4b0c      	ldr	r3, [pc, #48]	; (8007c64 <_sbrk+0x50>)
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4413      	add	r3, r2
 8007c38:	466a      	mov	r2, sp
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d907      	bls.n	8007c4e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007c3e:	f000 fb35 	bl	80082ac <__errno>
 8007c42:	4602      	mov	r2, r0
 8007c44:	230c      	movs	r3, #12
 8007c46:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007c48:	f04f 33ff 	mov.w	r3, #4294967295
 8007c4c:	e006      	b.n	8007c5c <_sbrk+0x48>
	}

	heap_end += incr;
 8007c4e:	4b05      	ldr	r3, [pc, #20]	; (8007c64 <_sbrk+0x50>)
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4413      	add	r3, r2
 8007c56:	4a03      	ldr	r2, [pc, #12]	; (8007c64 <_sbrk+0x50>)
 8007c58:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3710      	adds	r7, #16
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	200002c0 	.word	0x200002c0
 8007c68:	20000378 	.word	0x20000378

08007c6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8007c70:	4b15      	ldr	r3, [pc, #84]	; (8007cc8 <SystemInit+0x5c>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a14      	ldr	r2, [pc, #80]	; (8007cc8 <SystemInit+0x5c>)
 8007c76:	f043 0301 	orr.w	r3, r3, #1
 8007c7a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8007c7c:	4b12      	ldr	r3, [pc, #72]	; (8007cc8 <SystemInit+0x5c>)
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	4911      	ldr	r1, [pc, #68]	; (8007cc8 <SystemInit+0x5c>)
 8007c82:	4b12      	ldr	r3, [pc, #72]	; (8007ccc <SystemInit+0x60>)
 8007c84:	4013      	ands	r3, r2
 8007c86:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8007c88:	4b0f      	ldr	r3, [pc, #60]	; (8007cc8 <SystemInit+0x5c>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a0e      	ldr	r2, [pc, #56]	; (8007cc8 <SystemInit+0x5c>)
 8007c8e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c96:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007c98:	4b0b      	ldr	r3, [pc, #44]	; (8007cc8 <SystemInit+0x5c>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a0a      	ldr	r2, [pc, #40]	; (8007cc8 <SystemInit+0x5c>)
 8007c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ca2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8007ca4:	4b08      	ldr	r3, [pc, #32]	; (8007cc8 <SystemInit+0x5c>)
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	4a07      	ldr	r2, [pc, #28]	; (8007cc8 <SystemInit+0x5c>)
 8007caa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8007cae:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8007cb0:	4b05      	ldr	r3, [pc, #20]	; (8007cc8 <SystemInit+0x5c>)
 8007cb2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8007cb6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8007cb8:	4b05      	ldr	r3, [pc, #20]	; (8007cd0 <SystemInit+0x64>)
 8007cba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007cbe:	609a      	str	r2, [r3, #8]
#endif 
}
 8007cc0:	bf00      	nop
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bc80      	pop	{r7}
 8007cc6:	4770      	bx	lr
 8007cc8:	40021000 	.word	0x40021000
 8007ccc:	f8ff0000 	.word	0xf8ff0000
 8007cd0:	e000ed00 	.word	0xe000ed00

08007cd4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8007cd8:	4b11      	ldr	r3, [pc, #68]	; (8007d20 <MX_USART1_UART_Init+0x4c>)
 8007cda:	4a12      	ldr	r2, [pc, #72]	; (8007d24 <MX_USART1_UART_Init+0x50>)
 8007cdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007cde:	4b10      	ldr	r3, [pc, #64]	; (8007d20 <MX_USART1_UART_Init+0x4c>)
 8007ce0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007ce4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007ce6:	4b0e      	ldr	r3, [pc, #56]	; (8007d20 <MX_USART1_UART_Init+0x4c>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007cec:	4b0c      	ldr	r3, [pc, #48]	; (8007d20 <MX_USART1_UART_Init+0x4c>)
 8007cee:	2200      	movs	r2, #0
 8007cf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007cf2:	4b0b      	ldr	r3, [pc, #44]	; (8007d20 <MX_USART1_UART_Init+0x4c>)
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007cf8:	4b09      	ldr	r3, [pc, #36]	; (8007d20 <MX_USART1_UART_Init+0x4c>)
 8007cfa:	220c      	movs	r2, #12
 8007cfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007cfe:	4b08      	ldr	r3, [pc, #32]	; (8007d20 <MX_USART1_UART_Init+0x4c>)
 8007d00:	2200      	movs	r2, #0
 8007d02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007d04:	4b06      	ldr	r3, [pc, #24]	; (8007d20 <MX_USART1_UART_Init+0x4c>)
 8007d06:	2200      	movs	r2, #0
 8007d08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007d0a:	4805      	ldr	r0, [pc, #20]	; (8007d20 <MX_USART1_UART_Init+0x4c>)
 8007d0c:	f7fa f944 	bl	8001f98 <HAL_UART_Init>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d001      	beq.n	8007d1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007d16:	f7ff fec9 	bl	8007aac <Error_Handler>
  }

}
 8007d1a:	bf00      	nop
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	20000334 	.word	0x20000334
 8007d24:	40013800 	.word	0x40013800

08007d28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b088      	sub	sp, #32
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d30:	f107 0310 	add.w	r3, r7, #16
 8007d34:	2200      	movs	r2, #0
 8007d36:	601a      	str	r2, [r3, #0]
 8007d38:	605a      	str	r2, [r3, #4]
 8007d3a:	609a      	str	r2, [r3, #8]
 8007d3c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a1c      	ldr	r2, [pc, #112]	; (8007db4 <HAL_UART_MspInit+0x8c>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d131      	bne.n	8007dac <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007d48:	4b1b      	ldr	r3, [pc, #108]	; (8007db8 <HAL_UART_MspInit+0x90>)
 8007d4a:	699b      	ldr	r3, [r3, #24]
 8007d4c:	4a1a      	ldr	r2, [pc, #104]	; (8007db8 <HAL_UART_MspInit+0x90>)
 8007d4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d52:	6193      	str	r3, [r2, #24]
 8007d54:	4b18      	ldr	r3, [pc, #96]	; (8007db8 <HAL_UART_MspInit+0x90>)
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d5c:	60fb      	str	r3, [r7, #12]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d60:	4b15      	ldr	r3, [pc, #84]	; (8007db8 <HAL_UART_MspInit+0x90>)
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	4a14      	ldr	r2, [pc, #80]	; (8007db8 <HAL_UART_MspInit+0x90>)
 8007d66:	f043 0304 	orr.w	r3, r3, #4
 8007d6a:	6193      	str	r3, [r2, #24]
 8007d6c:	4b12      	ldr	r3, [pc, #72]	; (8007db8 <HAL_UART_MspInit+0x90>)
 8007d6e:	699b      	ldr	r3, [r3, #24]
 8007d70:	f003 0304 	and.w	r3, r3, #4
 8007d74:	60bb      	str	r3, [r7, #8]
 8007d76:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007d78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d7e:	2302      	movs	r3, #2
 8007d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007d82:	2303      	movs	r3, #3
 8007d84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d86:	f107 0310 	add.w	r3, r7, #16
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	480b      	ldr	r0, [pc, #44]	; (8007dbc <HAL_UART_MspInit+0x94>)
 8007d8e:	f7f9 fb1d 	bl	80013cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007da0:	f107 0310 	add.w	r3, r7, #16
 8007da4:	4619      	mov	r1, r3
 8007da6:	4805      	ldr	r0, [pc, #20]	; (8007dbc <HAL_UART_MspInit+0x94>)
 8007da8:	f7f9 fb10 	bl	80013cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8007dac:	bf00      	nop
 8007dae:	3720      	adds	r7, #32
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	40013800 	.word	0x40013800
 8007db8:	40021000 	.word	0x40021000
 8007dbc:	40010800 	.word	0x40010800

08007dc0 <Demo1_Init>:
	uint16_t pos_x, uint16_t pos_y,
	uint16_t collider,
	uint16_t width, uint16_t height,
	Color* img,
	char* name
){
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b088      	sub	sp, #32
 8007dc4:	af04      	add	r7, sp, #16
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	4611      	mov	r1, r2
 8007dcc:	461a      	mov	r2, r3
 8007dce:	460b      	mov	r3, r1
 8007dd0:	80fb      	strh	r3, [r7, #6]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	80bb      	strh	r3, [r7, #4]
	// 调用父类初始化方法(不用做修改)
	GameObject_Self_Init(
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	88b9      	ldrh	r1, [r7, #4]
 8007dda:	88fa      	ldrh	r2, [r7, #6]
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dde:	9303      	str	r3, [sp, #12]
 8007de0:	8c3b      	ldrh	r3, [r7, #32]
 8007de2:	9302      	str	r3, [sp, #8]
 8007de4:	8bbb      	ldrh	r3, [r7, #28]
 8007de6:	9301      	str	r3, [sp, #4]
 8007de8:	8b3b      	ldrh	r3, [r7, #24]
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	460b      	mov	r3, r1
 8007dee:	68b9      	ldr	r1, [r7, #8]
 8007df0:	f7fa fbff 	bl	80025f2 <GameObject_Self_Init>
		collider,
		width, height,
		img
	);
	// 初始化自定义属性
	self->name = name;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007df8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007dfa:	bf00      	nop
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <Demo1_OnCreate>:

void Demo1_OnCreate(Demo1_GameObject_Self* self)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b082      	sub	sp, #8
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
	// 在这里写的脚本会在物体被创建时执行

	// 之后记得调用一下父类的OnCreate
	GameObject_Self_OnCreate(&self->base);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7fa fc0f 	bl	8002630 <GameObject_Self_OnCreate>
}
 8007e12:	bf00      	nop
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <Demo1_OnUpdate>:

void Demo1_OnUpdate(Demo1_GameObject_Self* self)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b082      	sub	sp, #8
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
	// 在这里写的脚本每一帧都会执行

	// 之后记得调用一下父类的OnUpdate,
	// 父类的OnUpdate会根据当前速度移动物体,
	// 也就是说不需要自己实现物体的移动
	GameObject_Self_OnUpdate(&self->base);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7fa fc0f 	bl	8002648 <GameObject_Self_OnUpdate>
}
 8007e2a:	bf00      	nop
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <Demo1_OnDestroy>:

void Demo1_OnDestroy(Demo1_GameObject_Self* self)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b082      	sub	sp, #8
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
	// 在这里写的脚本会在物体销毁时被执行

	// 记得释放内存
	free(self);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 fa68 	bl	8008310 <free>
}
 8007e40:	bf00      	nop
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <Demo1_OnRender>:

void Demo1_OnRender(Demo1_GameObject_Self* self, Color** screen)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
	// 定义渲染器行为
	// 直接调用就好，没有特殊需求不用修改
	GameObject_Self_OnRender(&self->base, screen);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fa fc02 	bl	8002660 <GameObject_Self_OnRender>
}
 8007e5c:	bf00      	nop
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <__Demo1_Created>:

bool __Demo1_Created(Demo1_GameObject_Self* self)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
	return __GameObject_Self_Created(&self->base);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fa fc04 	bl	800267c <__GameObject_Self_Created>
 8007e74:	4603      	mov	r3, r0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <__Demo1_ToDestroy>:

bool __Demo1_ToDestroy(Demo1_GameObject_Self* self)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b082      	sub	sp, #8
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
	return __GameObject_Self_ToDestroy(&self->base);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7fa fc02 	bl	8002692 <__GameObject_Self_ToDestroy>
 8007e8e:	4603      	mov	r3, r0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <Push>:
#include "LinkedList.h"

Node* Push(LinkedList *linked_list, void *object)
{
 8007e98:	b590      	push	{r4, r7, lr}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
	if (!linked_list->head)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d117      	bne.n	8007eda <Push+0x42>
	{
		linked_list->head = malloc(sizeof(Node));
 8007eaa:	200c      	movs	r0, #12
 8007eac:	f000 fa28 	bl	8008300 <malloc>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	601a      	str	r2, [r3, #0]
		linked_list->head->object = object;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	683a      	ldr	r2, [r7, #0]
 8007ebe:	601a      	str	r2, [r3, #0]
		linked_list->head->prev = NULL;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	605a      	str	r2, [r3, #4]
		linked_list->tail = linked_list->head;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	605a      	str	r2, [r3, #4]
		linked_list->tail->next = NULL;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	609a      	str	r2, [r3, #8]
 8007ed8:	e01a      	b.n	8007f10 <Push+0x78>
	}
	else
	{
		Node *temp = linked_list->tail;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	60fb      	str	r3, [r7, #12]
		linked_list->tail->next = malloc(sizeof(Node));
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685c      	ldr	r4, [r3, #4]
 8007ee4:	200c      	movs	r0, #12
 8007ee6:	f000 fa0b 	bl	8008300 <malloc>
 8007eea:	4603      	mov	r3, r0
 8007eec:	60a3      	str	r3, [r4, #8]
		linked_list->tail = linked_list->tail->next;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	689a      	ldr	r2, [r3, #8]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	605a      	str	r2, [r3, #4]
		linked_list->tail->object = object;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	683a      	ldr	r2, [r7, #0]
 8007efe:	601a      	str	r2, [r3, #0]
		linked_list->tail->prev = temp;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	605a      	str	r2, [r3, #4]
		linked_list->tail->next = NULL;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	609a      	str	r2, [r3, #8]
	}
	return linked_list->tail;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd90      	pop	{r4, r7, pc}

08007f1c <RemoveNode>:

void RemoveNode(Node *node)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	6852      	ldr	r2, [r2, #4]
 8007f2c:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	6892      	ldr	r2, [r2, #8]
 8007f36:	609a      	str	r2, [r3, #8]
	free(node);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f9e9 	bl	8008310 <free>
 8007f3e:	bf00      	nop
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <Render>:
#define __SCALE 6

Color **__last_screen = NULL;

void Render(GameObject* game_object, Color** screen)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b08c      	sub	sp, #48	; 0x30
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	6039      	str	r1, [r7, #0]
	int sx, sy, ex, ey;
	uint16_t rsx, rsy, rex, rey;
	int i, j;
	Color c;

	sx = (int)game_object->pos_x - (game_object->width + 1) / 2;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7f9 f881 	bl	800105c <__aeabi_f2iz>
 8007f5a:	4601      	mov	r1, r0
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	8a5b      	ldrh	r3, [r3, #18]
 8007f60:	3301      	adds	r3, #1
 8007f62:	0fda      	lsrs	r2, r3, #31
 8007f64:	4413      	add	r3, r2
 8007f66:	105b      	asrs	r3, r3, #1
 8007f68:	425b      	negs	r3, r3
 8007f6a:	440b      	add	r3, r1
 8007f6c:	627b      	str	r3, [r7, #36]	; 0x24
	sy = (int)game_object->pos_y - (game_object->height + 1) / 2;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7f9 f872 	bl	800105c <__aeabi_f2iz>
 8007f78:	4601      	mov	r1, r0
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	8a9b      	ldrh	r3, [r3, #20]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	0fda      	lsrs	r2, r3, #31
 8007f82:	4413      	add	r3, r2
 8007f84:	105b      	asrs	r3, r3, #1
 8007f86:	425b      	negs	r3, r3
 8007f88:	440b      	add	r3, r1
 8007f8a:	623b      	str	r3, [r7, #32]
	ex = (int)game_object->pos_x + game_object->width / 2;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7f9 f863 	bl	800105c <__aeabi_f2iz>
 8007f96:	4602      	mov	r2, r0
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	8a5b      	ldrh	r3, [r3, #18]
 8007f9c:	085b      	lsrs	r3, r3, #1
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	4413      	add	r3, r2
 8007fa2:	61fb      	str	r3, [r7, #28]
	ey = (int)game_object->pos_y + game_object->height / 2;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7f9 f857 	bl	800105c <__aeabi_f2iz>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	8a9b      	ldrh	r3, [r3, #20]
 8007fb4:	085b      	lsrs	r3, r3, #1
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	4413      	add	r3, r2
 8007fba:	61bb      	str	r3, [r7, #24]

	rsx = (uint16_t)MAX(sx, 0);
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	dd02      	ble.n	8007fc8 <Render+0x82>
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	e000      	b.n	8007fca <Render+0x84>
 8007fc8:	2300      	movs	r3, #0
 8007fca:	82fb      	strh	r3, [r7, #22]
	rsy = (uint16_t)MAX(sy, 0);
 8007fcc:	6a3b      	ldr	r3, [r7, #32]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	dd02      	ble.n	8007fd8 <Render+0x92>
 8007fd2:	6a3b      	ldr	r3, [r7, #32]
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	e000      	b.n	8007fda <Render+0x94>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	82bb      	strh	r3, [r7, #20]
	rex = (uint16_t)MIN(ex, __WIDTH);
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	2b25      	cmp	r3, #37	; 0x25
 8007fe0:	dc02      	bgt.n	8007fe8 <Render+0xa2>
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	e000      	b.n	8007fea <Render+0xa4>
 8007fe8:	2326      	movs	r3, #38	; 0x26
 8007fea:	827b      	strh	r3, [r7, #18]
	rey = (uint16_t)MIN(ey, __HEIGHT);
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	2b2f      	cmp	r3, #47	; 0x2f
 8007ff0:	dc02      	bgt.n	8007ff8 <Render+0xb2>
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	e000      	b.n	8007ffa <Render+0xb4>
 8007ff8:	2330      	movs	r3, #48	; 0x30
 8007ffa:	823b      	strh	r3, [r7, #16]
	
	for (i = 0; i < rey - rsy; i++)
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008000:	e02d      	b.n	800805e <Render+0x118>
		for (j = 0; j < rex - rsx; j++)
 8008002:	2300      	movs	r3, #0
 8008004:	62bb      	str	r3, [r7, #40]	; 0x28
 8008006:	e021      	b.n	800804c <Render+0x106>
		{
			c = game_object->img[i * (rex - rsx) + j];
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	699a      	ldr	r2, [r3, #24]
 800800c:	8a79      	ldrh	r1, [r7, #18]
 800800e:	8afb      	ldrh	r3, [r7, #22]
 8008010:	1acb      	subs	r3, r1, r3
 8008012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008014:	fb01 f103 	mul.w	r1, r1, r3
 8008018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801a:	440b      	add	r3, r1
 800801c:	005b      	lsls	r3, r3, #1
 800801e:	4413      	add	r3, r2
 8008020:	881b      	ldrh	r3, [r3, #0]
 8008022:	81fb      	strh	r3, [r7, #14]
			if (c != TRANSPARENT)
 8008024:	89fb      	ldrh	r3, [r7, #14]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00d      	beq.n	8008046 <Render+0x100>
				screen[i + rsy][j + rsx] = c;
 800802a:	8aba      	ldrh	r2, [r7, #20]
 800802c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802e:	4413      	add	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	683a      	ldr	r2, [r7, #0]
 8008034:	4413      	add	r3, r2
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	8af9      	ldrh	r1, [r7, #22]
 800803a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803c:	440b      	add	r3, r1
 800803e:	005b      	lsls	r3, r3, #1
 8008040:	4413      	add	r3, r2
 8008042:	89fa      	ldrh	r2, [r7, #14]
 8008044:	801a      	strh	r2, [r3, #0]
		for (j = 0; j < rex - rsx; j++)
 8008046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008048:	3301      	adds	r3, #1
 800804a:	62bb      	str	r3, [r7, #40]	; 0x28
 800804c:	8a7a      	ldrh	r2, [r7, #18]
 800804e:	8afb      	ldrh	r3, [r7, #22]
 8008050:	1ad3      	subs	r3, r2, r3
 8008052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008054:	429a      	cmp	r2, r3
 8008056:	dbd7      	blt.n	8008008 <Render+0xc2>
	for (i = 0; i < rey - rsy; i++)
 8008058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805a:	3301      	adds	r3, #1
 800805c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800805e:	8a3a      	ldrh	r2, [r7, #16]
 8008060:	8abb      	ldrh	r3, [r7, #20]
 8008062:	1ad3      	subs	r3, r2, r3
 8008064:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008066:	429a      	cmp	r2, r3
 8008068:	dbcb      	blt.n	8008002 <Render+0xbc>
		}
}
 800806a:	bf00      	nop
 800806c:	3730      	adds	r7, #48	; 0x30
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <InitScreen>:

Color** InitScreen(Color** screen)
{
 8008072:	b590      	push	{r4, r7, lr}
 8008074:	b085      	sub	sp, #20
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
	uint16_t i, j;

	if(!screen)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d118      	bne.n	80080b2 <InitScreen+0x40>
	{
		screen = calloc(sizeof(Color*), __HEIGHT);
 8008080:	2130      	movs	r1, #48	; 0x30
 8008082:	2004      	movs	r0, #4
 8008084:	f000 f90a 	bl	800829c <calloc>
 8008088:	4603      	mov	r3, r0
 800808a:	607b      	str	r3, [r7, #4]

		for (i = 0; i < __HEIGHT; i++)
 800808c:	2300      	movs	r3, #0
 800808e:	81fb      	strh	r3, [r7, #14]
 8008090:	e00c      	b.n	80080ac <InitScreen+0x3a>
		screen[i] = calloc(sizeof(Color), __WIDTH);
 8008092:	89fb      	ldrh	r3, [r7, #14]
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	18d4      	adds	r4, r2, r3
 800809a:	2126      	movs	r1, #38	; 0x26
 800809c:	2002      	movs	r0, #2
 800809e:	f000 f8fd 	bl	800829c <calloc>
 80080a2:	4603      	mov	r3, r0
 80080a4:	6023      	str	r3, [r4, #0]
		for (i = 0; i < __HEIGHT; i++)
 80080a6:	89fb      	ldrh	r3, [r7, #14]
 80080a8:	3301      	adds	r3, #1
 80080aa:	81fb      	strh	r3, [r7, #14]
 80080ac:	89fb      	ldrh	r3, [r7, #14]
 80080ae:	2b2f      	cmp	r3, #47	; 0x2f
 80080b0:	d9ef      	bls.n	8008092 <InitScreen+0x20>
	}

	for (i = 0; i < __HEIGHT; i++)
 80080b2:	2300      	movs	r3, #0
 80080b4:	81fb      	strh	r3, [r7, #14]
 80080b6:	e015      	b.n	80080e4 <InitScreen+0x72>
		for (j = 0; j < __WIDTH; j++)
 80080b8:	2300      	movs	r3, #0
 80080ba:	81bb      	strh	r3, [r7, #12]
 80080bc:	e00c      	b.n	80080d8 <InitScreen+0x66>
			screen[i][j] = TRANSPARENT;
 80080be:	89fb      	ldrh	r3, [r7, #14]
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	4413      	add	r3, r2
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	89bb      	ldrh	r3, [r7, #12]
 80080ca:	005b      	lsls	r3, r3, #1
 80080cc:	4413      	add	r3, r2
 80080ce:	2200      	movs	r2, #0
 80080d0:	801a      	strh	r2, [r3, #0]
		for (j = 0; j < __WIDTH; j++)
 80080d2:	89bb      	ldrh	r3, [r7, #12]
 80080d4:	3301      	adds	r3, #1
 80080d6:	81bb      	strh	r3, [r7, #12]
 80080d8:	89bb      	ldrh	r3, [r7, #12]
 80080da:	2b25      	cmp	r3, #37	; 0x25
 80080dc:	d9ef      	bls.n	80080be <InitScreen+0x4c>
	for (i = 0; i < __HEIGHT; i++)
 80080de:	89fb      	ldrh	r3, [r7, #14]
 80080e0:	3301      	adds	r3, #1
 80080e2:	81fb      	strh	r3, [r7, #14]
 80080e4:	89fb      	ldrh	r3, [r7, #14]
 80080e6:	2b2f      	cmp	r3, #47	; 0x2f
 80080e8:	d9e6      	bls.n	80080b8 <InitScreen+0x46>

	return screen;
 80080ea:	687b      	ldr	r3, [r7, #4]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3714      	adds	r7, #20
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd90      	pop	{r4, r7, pc}

080080f4 <Flush>:

Color** Flush(Color **screen)
{
 80080f4:	b590      	push	{r4, r7, lr}
 80080f6:	b089      	sub	sp, #36	; 0x24
 80080f8:	af02      	add	r7, sp, #8
 80080fa:	6078      	str	r0, [r7, #4]
	uint16_t i, j;
	uint16_t sx, sy, ex, ey;
	Color **temp;
	// init
	if (!__last_screen)
 80080fc:	4b36      	ldr	r3, [pc, #216]	; (80081d8 <Flush+0xe4>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10d      	bne.n	8008120 <Flush+0x2c>
	{
		LCD_Clear(BLACK);
 8008104:	2000      	movs	r0, #0
 8008106:	f7ff fb01 	bl	800770c <LCD_Clear>
		__last_screen = InitScreen(__last_screen);
 800810a:	4b33      	ldr	r3, [pc, #204]	; (80081d8 <Flush+0xe4>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4618      	mov	r0, r3
 8008110:	f7ff ffaf 	bl	8008072 <InitScreen>
 8008114:	4602      	mov	r2, r0
 8008116:	4b30      	ldr	r3, [pc, #192]	; (80081d8 <Flush+0xe4>)
 8008118:	601a      	str	r2, [r3, #0]
		println("Render init finished");
 800811a:	4830      	ldr	r0, [pc, #192]	; (80081dc <Flush+0xe8>)
 800811c:	f7ff fcd0 	bl	8007ac0 <println>
	}
	// flush
	for (i = 0; i < __HEIGHT; i++)
 8008120:	2300      	movs	r3, #0
 8008122:	82fb      	strh	r3, [r7, #22]
 8008124:	e049      	b.n	80081ba <Flush+0xc6>
		for (j = 0; j < __WIDTH; j++)
 8008126:	2300      	movs	r3, #0
 8008128:	82bb      	strh	r3, [r7, #20]
 800812a:	e040      	b.n	80081ae <Flush+0xba>
		{
			if (screen[i][j] != __last_screen[i][j])
 800812c:	8afb      	ldrh	r3, [r7, #22]
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	4413      	add	r3, r2
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	8abb      	ldrh	r3, [r7, #20]
 8008138:	005b      	lsls	r3, r3, #1
 800813a:	4413      	add	r3, r2
 800813c:	881a      	ldrh	r2, [r3, #0]
 800813e:	4b26      	ldr	r3, [pc, #152]	; (80081d8 <Flush+0xe4>)
 8008140:	6819      	ldr	r1, [r3, #0]
 8008142:	8afb      	ldrh	r3, [r7, #22]
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	440b      	add	r3, r1
 8008148:	6819      	ldr	r1, [r3, #0]
 800814a:	8abb      	ldrh	r3, [r7, #20]
 800814c:	005b      	lsls	r3, r3, #1
 800814e:	440b      	add	r3, r1
 8008150:	881b      	ldrh	r3, [r3, #0]
 8008152:	429a      	cmp	r2, r3
 8008154:	d028      	beq.n	80081a8 <Flush+0xb4>
			{
				sx = j * __SCALE;
 8008156:	8abb      	ldrh	r3, [r7, #20]
 8008158:	461a      	mov	r2, r3
 800815a:	0052      	lsls	r2, r2, #1
 800815c:	4413      	add	r3, r2
 800815e:	005b      	lsls	r3, r3, #1
 8008160:	81fb      	strh	r3, [r7, #14]
				sy = i * __SCALE;
 8008162:	8afb      	ldrh	r3, [r7, #22]
 8008164:	461a      	mov	r2, r3
 8008166:	0052      	lsls	r2, r2, #1
 8008168:	4413      	add	r3, r2
 800816a:	005b      	lsls	r3, r3, #1
 800816c:	81bb      	strh	r3, [r7, #12]
				ex = sx + __SCALE;
 800816e:	89fb      	ldrh	r3, [r7, #14]
 8008170:	3306      	adds	r3, #6
 8008172:	817b      	strh	r3, [r7, #10]
				ey = sy + __SCALE;
 8008174:	89bb      	ldrh	r3, [r7, #12]
 8008176:	3306      	adds	r3, #6
 8008178:	813b      	strh	r3, [r7, #8]
				LCD_Fill(sx, sy, ex, ey, screen[i][j]);
 800817a:	8afb      	ldrh	r3, [r7, #22]
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	4413      	add	r3, r2
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	8abb      	ldrh	r3, [r7, #20]
 8008186:	005b      	lsls	r3, r3, #1
 8008188:	4413      	add	r3, r2
 800818a:	881b      	ldrh	r3, [r3, #0]
 800818c:	893c      	ldrh	r4, [r7, #8]
 800818e:	897a      	ldrh	r2, [r7, #10]
 8008190:	89b9      	ldrh	r1, [r7, #12]
 8008192:	89f8      	ldrh	r0, [r7, #14]
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	4623      	mov	r3, r4
 8008198:	f7ff fb1a 	bl	80077d0 <LCD_Fill>
				printlnf("flushing %hu, %hu", j, i);
 800819c:	8abb      	ldrh	r3, [r7, #20]
 800819e:	8afa      	ldrh	r2, [r7, #22]
 80081a0:	4619      	mov	r1, r3
 80081a2:	480f      	ldr	r0, [pc, #60]	; (80081e0 <Flush+0xec>)
 80081a4:	f7ff fcaa 	bl	8007afc <printlnf>
		for (j = 0; j < __WIDTH; j++)
 80081a8:	8abb      	ldrh	r3, [r7, #20]
 80081aa:	3301      	adds	r3, #1
 80081ac:	82bb      	strh	r3, [r7, #20]
 80081ae:	8abb      	ldrh	r3, [r7, #20]
 80081b0:	2b25      	cmp	r3, #37	; 0x25
 80081b2:	d9bb      	bls.n	800812c <Flush+0x38>
	for (i = 0; i < __HEIGHT; i++)
 80081b4:	8afb      	ldrh	r3, [r7, #22]
 80081b6:	3301      	adds	r3, #1
 80081b8:	82fb      	strh	r3, [r7, #22]
 80081ba:	8afb      	ldrh	r3, [r7, #22]
 80081bc:	2b2f      	cmp	r3, #47	; 0x2f
 80081be:	d9b2      	bls.n	8008126 <Flush+0x32>
			}
		}
	// cache
	temp = __last_screen;
 80081c0:	4b05      	ldr	r3, [pc, #20]	; (80081d8 <Flush+0xe4>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	613b      	str	r3, [r7, #16]
	__last_screen = screen;
 80081c6:	4a04      	ldr	r2, [pc, #16]	; (80081d8 <Flush+0xe4>)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6013      	str	r3, [r2, #0]
	return temp;
 80081cc:	693b      	ldr	r3, [r7, #16]

	println("Flushed");
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	371c      	adds	r7, #28
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd90      	pop	{r4, r7, pc}
 80081d6:	bf00      	nop
 80081d8:	200002c4 	.word	0x200002c4
 80081dc:	0800a454 	.word	0x0800a454
 80081e0:	0800a46c 	.word	0x0800a46c

080081e4 <GetTime>:
#include "Time.h"

float __Time_Last_Update = 0;

float GetTime()
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	af00      	add	r7, sp, #0
	return __Time_Last_Update + 1;
 80081e8:	4b04      	ldr	r3, [pc, #16]	; (80081fc <GetTime+0x18>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7f8 fcdb 	bl	8000bac <__addsf3>
 80081f6:	4603      	mov	r3, r0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	200002c8 	.word	0x200002c8

08008200 <Time_OnStart>:

void Time_OnStart()
{
 8008200:	b580      	push	{r7, lr}
 8008202:	af00      	add	r7, sp, #0
	__Time_Last_Update = GetTime();
 8008204:	f7ff ffee 	bl	80081e4 <GetTime>
 8008208:	4602      	mov	r2, r0
 800820a:	4b02      	ldr	r3, [pc, #8]	; (8008214 <Time_OnStart+0x14>)
 800820c:	601a      	str	r2, [r3, #0]
}
 800820e:	bf00      	nop
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	200002c8 	.word	0x200002c8

08008218 <Time_OnUpdate>:

void Time_OnUpdate()
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
	float temp = GetTime();
 800821e:	f7ff ffe1 	bl	80081e4 <GetTime>
 8008222:	6078      	str	r0, [r7, #4]
	delta_time = temp - __Time_Last_Update;
 8008224:	4b08      	ldr	r3, [pc, #32]	; (8008248 <Time_OnUpdate+0x30>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4619      	mov	r1, r3
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f7f8 fcbc 	bl	8000ba8 <__aeabi_fsub>
 8008230:	4603      	mov	r3, r0
 8008232:	461a      	mov	r2, r3
 8008234:	4b05      	ldr	r3, [pc, #20]	; (800824c <Time_OnUpdate+0x34>)
 8008236:	601a      	str	r2, [r3, #0]
	__Time_Last_Update = temp;
 8008238:	4a03      	ldr	r2, [pc, #12]	; (8008248 <Time_OnUpdate+0x30>)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6013      	str	r3, [r2, #0]
}
 800823e:	bf00      	nop
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	200002c8 	.word	0x200002c8
 800824c:	200002ec 	.word	0x200002ec

08008250 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8008250:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8008252:	e003      	b.n	800825c <LoopCopyDataInit>

08008254 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8008254:	4b0b      	ldr	r3, [pc, #44]	; (8008284 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8008256:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8008258:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800825a:	3104      	adds	r1, #4

0800825c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800825c:	480a      	ldr	r0, [pc, #40]	; (8008288 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800825e:	4b0b      	ldr	r3, [pc, #44]	; (800828c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8008260:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8008262:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8008264:	d3f6      	bcc.n	8008254 <CopyDataInit>
  ldr r2, =_sbss
 8008266:	4a0a      	ldr	r2, [pc, #40]	; (8008290 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8008268:	e002      	b.n	8008270 <LoopFillZerobss>

0800826a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800826a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800826c:	f842 3b04 	str.w	r3, [r2], #4

08008270 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8008270:	4b08      	ldr	r3, [pc, #32]	; (8008294 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8008272:	429a      	cmp	r2, r3
  bcc FillZerobss
 8008274:	d3f9      	bcc.n	800826a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008276:	f7ff fcf9 	bl	8007c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800827a:	f000 f81d 	bl	80082b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800827e:	f7ff fb7f 	bl	8007980 <main>
  bx lr
 8008282:	4770      	bx	lr
  ldr r3, =_sidata
 8008284:	0800a700 	.word	0x0800a700
  ldr r0, =_sdata
 8008288:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800828c:	200002a4 	.word	0x200002a4
  ldr r2, =_sbss
 8008290:	200002a4 	.word	0x200002a4
  ldr r3, = _ebss
 8008294:	20000378 	.word	0x20000378

08008298 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008298:	e7fe      	b.n	8008298 <ADC1_2_IRQHandler>
	...

0800829c <calloc>:
 800829c:	4b02      	ldr	r3, [pc, #8]	; (80082a8 <calloc+0xc>)
 800829e:	460a      	mov	r2, r1
 80082a0:	4601      	mov	r1, r0
 80082a2:	6818      	ldr	r0, [r3, #0]
 80082a4:	f000 b844 	b.w	8008330 <_calloc_r>
 80082a8:	200000d4 	.word	0x200000d4

080082ac <__errno>:
 80082ac:	4b01      	ldr	r3, [pc, #4]	; (80082b4 <__errno+0x8>)
 80082ae:	6818      	ldr	r0, [r3, #0]
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	200000d4 	.word	0x200000d4

080082b8 <__libc_init_array>:
 80082b8:	b570      	push	{r4, r5, r6, lr}
 80082ba:	2500      	movs	r5, #0
 80082bc:	4e0c      	ldr	r6, [pc, #48]	; (80082f0 <__libc_init_array+0x38>)
 80082be:	4c0d      	ldr	r4, [pc, #52]	; (80082f4 <__libc_init_array+0x3c>)
 80082c0:	1ba4      	subs	r4, r4, r6
 80082c2:	10a4      	asrs	r4, r4, #2
 80082c4:	42a5      	cmp	r5, r4
 80082c6:	d109      	bne.n	80082dc <__libc_init_array+0x24>
 80082c8:	f002 f888 	bl	800a3dc <_init>
 80082cc:	2500      	movs	r5, #0
 80082ce:	4e0a      	ldr	r6, [pc, #40]	; (80082f8 <__libc_init_array+0x40>)
 80082d0:	4c0a      	ldr	r4, [pc, #40]	; (80082fc <__libc_init_array+0x44>)
 80082d2:	1ba4      	subs	r4, r4, r6
 80082d4:	10a4      	asrs	r4, r4, #2
 80082d6:	42a5      	cmp	r5, r4
 80082d8:	d105      	bne.n	80082e6 <__libc_init_array+0x2e>
 80082da:	bd70      	pop	{r4, r5, r6, pc}
 80082dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80082e0:	4798      	blx	r3
 80082e2:	3501      	adds	r5, #1
 80082e4:	e7ee      	b.n	80082c4 <__libc_init_array+0xc>
 80082e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80082ea:	4798      	blx	r3
 80082ec:	3501      	adds	r5, #1
 80082ee:	e7f2      	b.n	80082d6 <__libc_init_array+0x1e>
 80082f0:	0800a6f8 	.word	0x0800a6f8
 80082f4:	0800a6f8 	.word	0x0800a6f8
 80082f8:	0800a6f8 	.word	0x0800a6f8
 80082fc:	0800a6fc 	.word	0x0800a6fc

08008300 <malloc>:
 8008300:	4b02      	ldr	r3, [pc, #8]	; (800830c <malloc+0xc>)
 8008302:	4601      	mov	r1, r0
 8008304:	6818      	ldr	r0, [r3, #0]
 8008306:	f000 b86d 	b.w	80083e4 <_malloc_r>
 800830a:	bf00      	nop
 800830c:	200000d4 	.word	0x200000d4

08008310 <free>:
 8008310:	4b02      	ldr	r3, [pc, #8]	; (800831c <free+0xc>)
 8008312:	4601      	mov	r1, r0
 8008314:	6818      	ldr	r0, [r3, #0]
 8008316:	f000 b819 	b.w	800834c <_free_r>
 800831a:	bf00      	nop
 800831c:	200000d4 	.word	0x200000d4

08008320 <memset>:
 8008320:	4603      	mov	r3, r0
 8008322:	4402      	add	r2, r0
 8008324:	4293      	cmp	r3, r2
 8008326:	d100      	bne.n	800832a <memset+0xa>
 8008328:	4770      	bx	lr
 800832a:	f803 1b01 	strb.w	r1, [r3], #1
 800832e:	e7f9      	b.n	8008324 <memset+0x4>

08008330 <_calloc_r>:
 8008330:	b538      	push	{r3, r4, r5, lr}
 8008332:	fb02 f401 	mul.w	r4, r2, r1
 8008336:	4621      	mov	r1, r4
 8008338:	f000 f854 	bl	80083e4 <_malloc_r>
 800833c:	4605      	mov	r5, r0
 800833e:	b118      	cbz	r0, 8008348 <_calloc_r+0x18>
 8008340:	4622      	mov	r2, r4
 8008342:	2100      	movs	r1, #0
 8008344:	f7ff ffec 	bl	8008320 <memset>
 8008348:	4628      	mov	r0, r5
 800834a:	bd38      	pop	{r3, r4, r5, pc}

0800834c <_free_r>:
 800834c:	b538      	push	{r3, r4, r5, lr}
 800834e:	4605      	mov	r5, r0
 8008350:	2900      	cmp	r1, #0
 8008352:	d043      	beq.n	80083dc <_free_r+0x90>
 8008354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008358:	1f0c      	subs	r4, r1, #4
 800835a:	2b00      	cmp	r3, #0
 800835c:	bfb8      	it	lt
 800835e:	18e4      	addlt	r4, r4, r3
 8008360:	f001 fba5 	bl	8009aae <__malloc_lock>
 8008364:	4a1e      	ldr	r2, [pc, #120]	; (80083e0 <_free_r+0x94>)
 8008366:	6813      	ldr	r3, [r2, #0]
 8008368:	4610      	mov	r0, r2
 800836a:	b933      	cbnz	r3, 800837a <_free_r+0x2e>
 800836c:	6063      	str	r3, [r4, #4]
 800836e:	6014      	str	r4, [r2, #0]
 8008370:	4628      	mov	r0, r5
 8008372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008376:	f001 bb9b 	b.w	8009ab0 <__malloc_unlock>
 800837a:	42a3      	cmp	r3, r4
 800837c:	d90b      	bls.n	8008396 <_free_r+0x4a>
 800837e:	6821      	ldr	r1, [r4, #0]
 8008380:	1862      	adds	r2, r4, r1
 8008382:	4293      	cmp	r3, r2
 8008384:	bf01      	itttt	eq
 8008386:	681a      	ldreq	r2, [r3, #0]
 8008388:	685b      	ldreq	r3, [r3, #4]
 800838a:	1852      	addeq	r2, r2, r1
 800838c:	6022      	streq	r2, [r4, #0]
 800838e:	6063      	str	r3, [r4, #4]
 8008390:	6004      	str	r4, [r0, #0]
 8008392:	e7ed      	b.n	8008370 <_free_r+0x24>
 8008394:	4613      	mov	r3, r2
 8008396:	685a      	ldr	r2, [r3, #4]
 8008398:	b10a      	cbz	r2, 800839e <_free_r+0x52>
 800839a:	42a2      	cmp	r2, r4
 800839c:	d9fa      	bls.n	8008394 <_free_r+0x48>
 800839e:	6819      	ldr	r1, [r3, #0]
 80083a0:	1858      	adds	r0, r3, r1
 80083a2:	42a0      	cmp	r0, r4
 80083a4:	d10b      	bne.n	80083be <_free_r+0x72>
 80083a6:	6820      	ldr	r0, [r4, #0]
 80083a8:	4401      	add	r1, r0
 80083aa:	1858      	adds	r0, r3, r1
 80083ac:	4282      	cmp	r2, r0
 80083ae:	6019      	str	r1, [r3, #0]
 80083b0:	d1de      	bne.n	8008370 <_free_r+0x24>
 80083b2:	6810      	ldr	r0, [r2, #0]
 80083b4:	6852      	ldr	r2, [r2, #4]
 80083b6:	4401      	add	r1, r0
 80083b8:	6019      	str	r1, [r3, #0]
 80083ba:	605a      	str	r2, [r3, #4]
 80083bc:	e7d8      	b.n	8008370 <_free_r+0x24>
 80083be:	d902      	bls.n	80083c6 <_free_r+0x7a>
 80083c0:	230c      	movs	r3, #12
 80083c2:	602b      	str	r3, [r5, #0]
 80083c4:	e7d4      	b.n	8008370 <_free_r+0x24>
 80083c6:	6820      	ldr	r0, [r4, #0]
 80083c8:	1821      	adds	r1, r4, r0
 80083ca:	428a      	cmp	r2, r1
 80083cc:	bf01      	itttt	eq
 80083ce:	6811      	ldreq	r1, [r2, #0]
 80083d0:	6852      	ldreq	r2, [r2, #4]
 80083d2:	1809      	addeq	r1, r1, r0
 80083d4:	6021      	streq	r1, [r4, #0]
 80083d6:	6062      	str	r2, [r4, #4]
 80083d8:	605c      	str	r4, [r3, #4]
 80083da:	e7c9      	b.n	8008370 <_free_r+0x24>
 80083dc:	bd38      	pop	{r3, r4, r5, pc}
 80083de:	bf00      	nop
 80083e0:	200002cc 	.word	0x200002cc

080083e4 <_malloc_r>:
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	1ccd      	adds	r5, r1, #3
 80083e8:	f025 0503 	bic.w	r5, r5, #3
 80083ec:	3508      	adds	r5, #8
 80083ee:	2d0c      	cmp	r5, #12
 80083f0:	bf38      	it	cc
 80083f2:	250c      	movcc	r5, #12
 80083f4:	2d00      	cmp	r5, #0
 80083f6:	4606      	mov	r6, r0
 80083f8:	db01      	blt.n	80083fe <_malloc_r+0x1a>
 80083fa:	42a9      	cmp	r1, r5
 80083fc:	d903      	bls.n	8008406 <_malloc_r+0x22>
 80083fe:	230c      	movs	r3, #12
 8008400:	6033      	str	r3, [r6, #0]
 8008402:	2000      	movs	r0, #0
 8008404:	bd70      	pop	{r4, r5, r6, pc}
 8008406:	f001 fb52 	bl	8009aae <__malloc_lock>
 800840a:	4a21      	ldr	r2, [pc, #132]	; (8008490 <_malloc_r+0xac>)
 800840c:	6814      	ldr	r4, [r2, #0]
 800840e:	4621      	mov	r1, r4
 8008410:	b991      	cbnz	r1, 8008438 <_malloc_r+0x54>
 8008412:	4c20      	ldr	r4, [pc, #128]	; (8008494 <_malloc_r+0xb0>)
 8008414:	6823      	ldr	r3, [r4, #0]
 8008416:	b91b      	cbnz	r3, 8008420 <_malloc_r+0x3c>
 8008418:	4630      	mov	r0, r6
 800841a:	f000 fc8d 	bl	8008d38 <_sbrk_r>
 800841e:	6020      	str	r0, [r4, #0]
 8008420:	4629      	mov	r1, r5
 8008422:	4630      	mov	r0, r6
 8008424:	f000 fc88 	bl	8008d38 <_sbrk_r>
 8008428:	1c43      	adds	r3, r0, #1
 800842a:	d124      	bne.n	8008476 <_malloc_r+0x92>
 800842c:	230c      	movs	r3, #12
 800842e:	4630      	mov	r0, r6
 8008430:	6033      	str	r3, [r6, #0]
 8008432:	f001 fb3d 	bl	8009ab0 <__malloc_unlock>
 8008436:	e7e4      	b.n	8008402 <_malloc_r+0x1e>
 8008438:	680b      	ldr	r3, [r1, #0]
 800843a:	1b5b      	subs	r3, r3, r5
 800843c:	d418      	bmi.n	8008470 <_malloc_r+0x8c>
 800843e:	2b0b      	cmp	r3, #11
 8008440:	d90f      	bls.n	8008462 <_malloc_r+0x7e>
 8008442:	600b      	str	r3, [r1, #0]
 8008444:	18cc      	adds	r4, r1, r3
 8008446:	50cd      	str	r5, [r1, r3]
 8008448:	4630      	mov	r0, r6
 800844a:	f001 fb31 	bl	8009ab0 <__malloc_unlock>
 800844e:	f104 000b 	add.w	r0, r4, #11
 8008452:	1d23      	adds	r3, r4, #4
 8008454:	f020 0007 	bic.w	r0, r0, #7
 8008458:	1ac3      	subs	r3, r0, r3
 800845a:	d0d3      	beq.n	8008404 <_malloc_r+0x20>
 800845c:	425a      	negs	r2, r3
 800845e:	50e2      	str	r2, [r4, r3]
 8008460:	e7d0      	b.n	8008404 <_malloc_r+0x20>
 8008462:	684b      	ldr	r3, [r1, #4]
 8008464:	428c      	cmp	r4, r1
 8008466:	bf16      	itet	ne
 8008468:	6063      	strne	r3, [r4, #4]
 800846a:	6013      	streq	r3, [r2, #0]
 800846c:	460c      	movne	r4, r1
 800846e:	e7eb      	b.n	8008448 <_malloc_r+0x64>
 8008470:	460c      	mov	r4, r1
 8008472:	6849      	ldr	r1, [r1, #4]
 8008474:	e7cc      	b.n	8008410 <_malloc_r+0x2c>
 8008476:	1cc4      	adds	r4, r0, #3
 8008478:	f024 0403 	bic.w	r4, r4, #3
 800847c:	42a0      	cmp	r0, r4
 800847e:	d005      	beq.n	800848c <_malloc_r+0xa8>
 8008480:	1a21      	subs	r1, r4, r0
 8008482:	4630      	mov	r0, r6
 8008484:	f000 fc58 	bl	8008d38 <_sbrk_r>
 8008488:	3001      	adds	r0, #1
 800848a:	d0cf      	beq.n	800842c <_malloc_r+0x48>
 800848c:	6025      	str	r5, [r4, #0]
 800848e:	e7db      	b.n	8008448 <_malloc_r+0x64>
 8008490:	200002cc 	.word	0x200002cc
 8008494:	200002d0 	.word	0x200002d0

08008498 <__cvt>:
 8008498:	2b00      	cmp	r3, #0
 800849a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800849e:	461e      	mov	r6, r3
 80084a0:	bfbb      	ittet	lt
 80084a2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80084a6:	461e      	movlt	r6, r3
 80084a8:	2300      	movge	r3, #0
 80084aa:	232d      	movlt	r3, #45	; 0x2d
 80084ac:	b088      	sub	sp, #32
 80084ae:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80084b0:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80084b4:	f027 0720 	bic.w	r7, r7, #32
 80084b8:	2f46      	cmp	r7, #70	; 0x46
 80084ba:	4614      	mov	r4, r2
 80084bc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80084be:	700b      	strb	r3, [r1, #0]
 80084c0:	d004      	beq.n	80084cc <__cvt+0x34>
 80084c2:	2f45      	cmp	r7, #69	; 0x45
 80084c4:	d100      	bne.n	80084c8 <__cvt+0x30>
 80084c6:	3501      	adds	r5, #1
 80084c8:	2302      	movs	r3, #2
 80084ca:	e000      	b.n	80084ce <__cvt+0x36>
 80084cc:	2303      	movs	r3, #3
 80084ce:	aa07      	add	r2, sp, #28
 80084d0:	9204      	str	r2, [sp, #16]
 80084d2:	aa06      	add	r2, sp, #24
 80084d4:	e9cd a202 	strd	sl, r2, [sp, #8]
 80084d8:	e9cd 3500 	strd	r3, r5, [sp]
 80084dc:	4622      	mov	r2, r4
 80084de:	4633      	mov	r3, r6
 80084e0:	f000 fd0a 	bl	8008ef8 <_dtoa_r>
 80084e4:	2f47      	cmp	r7, #71	; 0x47
 80084e6:	4680      	mov	r8, r0
 80084e8:	d102      	bne.n	80084f0 <__cvt+0x58>
 80084ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084ec:	07db      	lsls	r3, r3, #31
 80084ee:	d526      	bpl.n	800853e <__cvt+0xa6>
 80084f0:	2f46      	cmp	r7, #70	; 0x46
 80084f2:	eb08 0905 	add.w	r9, r8, r5
 80084f6:	d111      	bne.n	800851c <__cvt+0x84>
 80084f8:	f898 3000 	ldrb.w	r3, [r8]
 80084fc:	2b30      	cmp	r3, #48	; 0x30
 80084fe:	d10a      	bne.n	8008516 <__cvt+0x7e>
 8008500:	2200      	movs	r2, #0
 8008502:	2300      	movs	r3, #0
 8008504:	4620      	mov	r0, r4
 8008506:	4631      	mov	r1, r6
 8008508:	f7f8 faba 	bl	8000a80 <__aeabi_dcmpeq>
 800850c:	b918      	cbnz	r0, 8008516 <__cvt+0x7e>
 800850e:	f1c5 0501 	rsb	r5, r5, #1
 8008512:	f8ca 5000 	str.w	r5, [sl]
 8008516:	f8da 3000 	ldr.w	r3, [sl]
 800851a:	4499      	add	r9, r3
 800851c:	2200      	movs	r2, #0
 800851e:	2300      	movs	r3, #0
 8008520:	4620      	mov	r0, r4
 8008522:	4631      	mov	r1, r6
 8008524:	f7f8 faac 	bl	8000a80 <__aeabi_dcmpeq>
 8008528:	b938      	cbnz	r0, 800853a <__cvt+0xa2>
 800852a:	2230      	movs	r2, #48	; 0x30
 800852c:	9b07      	ldr	r3, [sp, #28]
 800852e:	454b      	cmp	r3, r9
 8008530:	d205      	bcs.n	800853e <__cvt+0xa6>
 8008532:	1c59      	adds	r1, r3, #1
 8008534:	9107      	str	r1, [sp, #28]
 8008536:	701a      	strb	r2, [r3, #0]
 8008538:	e7f8      	b.n	800852c <__cvt+0x94>
 800853a:	f8cd 901c 	str.w	r9, [sp, #28]
 800853e:	4640      	mov	r0, r8
 8008540:	9b07      	ldr	r3, [sp, #28]
 8008542:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008544:	eba3 0308 	sub.w	r3, r3, r8
 8008548:	6013      	str	r3, [r2, #0]
 800854a:	b008      	add	sp, #32
 800854c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008550 <__exponent>:
 8008550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008552:	2900      	cmp	r1, #0
 8008554:	bfb4      	ite	lt
 8008556:	232d      	movlt	r3, #45	; 0x2d
 8008558:	232b      	movge	r3, #43	; 0x2b
 800855a:	4604      	mov	r4, r0
 800855c:	bfb8      	it	lt
 800855e:	4249      	neglt	r1, r1
 8008560:	2909      	cmp	r1, #9
 8008562:	f804 2b02 	strb.w	r2, [r4], #2
 8008566:	7043      	strb	r3, [r0, #1]
 8008568:	dd21      	ble.n	80085ae <__exponent+0x5e>
 800856a:	f10d 0307 	add.w	r3, sp, #7
 800856e:	461f      	mov	r7, r3
 8008570:	260a      	movs	r6, #10
 8008572:	fb91 f5f6 	sdiv	r5, r1, r6
 8008576:	fb06 1115 	mls	r1, r6, r5, r1
 800857a:	2d09      	cmp	r5, #9
 800857c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8008580:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008584:	f103 32ff 	add.w	r2, r3, #4294967295
 8008588:	4629      	mov	r1, r5
 800858a:	dc09      	bgt.n	80085a0 <__exponent+0x50>
 800858c:	3130      	adds	r1, #48	; 0x30
 800858e:	3b02      	subs	r3, #2
 8008590:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008594:	42bb      	cmp	r3, r7
 8008596:	4622      	mov	r2, r4
 8008598:	d304      	bcc.n	80085a4 <__exponent+0x54>
 800859a:	1a10      	subs	r0, r2, r0
 800859c:	b003      	add	sp, #12
 800859e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085a0:	4613      	mov	r3, r2
 80085a2:	e7e6      	b.n	8008572 <__exponent+0x22>
 80085a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085a8:	f804 2b01 	strb.w	r2, [r4], #1
 80085ac:	e7f2      	b.n	8008594 <__exponent+0x44>
 80085ae:	2330      	movs	r3, #48	; 0x30
 80085b0:	4419      	add	r1, r3
 80085b2:	7083      	strb	r3, [r0, #2]
 80085b4:	1d02      	adds	r2, r0, #4
 80085b6:	70c1      	strb	r1, [r0, #3]
 80085b8:	e7ef      	b.n	800859a <__exponent+0x4a>
	...

080085bc <_printf_float>:
 80085bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c0:	b091      	sub	sp, #68	; 0x44
 80085c2:	460c      	mov	r4, r1
 80085c4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80085c6:	4693      	mov	fp, r2
 80085c8:	461e      	mov	r6, r3
 80085ca:	4605      	mov	r5, r0
 80085cc:	f001 fa48 	bl	8009a60 <_localeconv_r>
 80085d0:	6803      	ldr	r3, [r0, #0]
 80085d2:	4618      	mov	r0, r3
 80085d4:	9309      	str	r3, [sp, #36]	; 0x24
 80085d6:	f7f7 fe27 	bl	8000228 <strlen>
 80085da:	2300      	movs	r3, #0
 80085dc:	930e      	str	r3, [sp, #56]	; 0x38
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	900a      	str	r0, [sp, #40]	; 0x28
 80085e2:	3307      	adds	r3, #7
 80085e4:	f023 0307 	bic.w	r3, r3, #7
 80085e8:	f103 0208 	add.w	r2, r3, #8
 80085ec:	f894 8018 	ldrb.w	r8, [r4, #24]
 80085f0:	f8d4 a000 	ldr.w	sl, [r4]
 80085f4:	603a      	str	r2, [r7, #0]
 80085f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80085fe:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8008602:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008606:	930b      	str	r3, [sp, #44]	; 0x2c
 8008608:	f04f 32ff 	mov.w	r2, #4294967295
 800860c:	4ba6      	ldr	r3, [pc, #664]	; (80088a8 <_printf_float+0x2ec>)
 800860e:	4638      	mov	r0, r7
 8008610:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008612:	f7f8 fa67 	bl	8000ae4 <__aeabi_dcmpun>
 8008616:	bb68      	cbnz	r0, 8008674 <_printf_float+0xb8>
 8008618:	f04f 32ff 	mov.w	r2, #4294967295
 800861c:	4ba2      	ldr	r3, [pc, #648]	; (80088a8 <_printf_float+0x2ec>)
 800861e:	4638      	mov	r0, r7
 8008620:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008622:	f7f8 fa41 	bl	8000aa8 <__aeabi_dcmple>
 8008626:	bb28      	cbnz	r0, 8008674 <_printf_float+0xb8>
 8008628:	2200      	movs	r2, #0
 800862a:	2300      	movs	r3, #0
 800862c:	4638      	mov	r0, r7
 800862e:	4649      	mov	r1, r9
 8008630:	f7f8 fa30 	bl	8000a94 <__aeabi_dcmplt>
 8008634:	b110      	cbz	r0, 800863c <_printf_float+0x80>
 8008636:	232d      	movs	r3, #45	; 0x2d
 8008638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800863c:	4f9b      	ldr	r7, [pc, #620]	; (80088ac <_printf_float+0x2f0>)
 800863e:	4b9c      	ldr	r3, [pc, #624]	; (80088b0 <_printf_float+0x2f4>)
 8008640:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008644:	bf98      	it	ls
 8008646:	461f      	movls	r7, r3
 8008648:	2303      	movs	r3, #3
 800864a:	f04f 0900 	mov.w	r9, #0
 800864e:	6123      	str	r3, [r4, #16]
 8008650:	f02a 0304 	bic.w	r3, sl, #4
 8008654:	6023      	str	r3, [r4, #0]
 8008656:	9600      	str	r6, [sp, #0]
 8008658:	465b      	mov	r3, fp
 800865a:	aa0f      	add	r2, sp, #60	; 0x3c
 800865c:	4621      	mov	r1, r4
 800865e:	4628      	mov	r0, r5
 8008660:	f000 f9e2 	bl	8008a28 <_printf_common>
 8008664:	3001      	adds	r0, #1
 8008666:	f040 8090 	bne.w	800878a <_printf_float+0x1ce>
 800866a:	f04f 30ff 	mov.w	r0, #4294967295
 800866e:	b011      	add	sp, #68	; 0x44
 8008670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008674:	463a      	mov	r2, r7
 8008676:	464b      	mov	r3, r9
 8008678:	4638      	mov	r0, r7
 800867a:	4649      	mov	r1, r9
 800867c:	f7f8 fa32 	bl	8000ae4 <__aeabi_dcmpun>
 8008680:	b110      	cbz	r0, 8008688 <_printf_float+0xcc>
 8008682:	4f8c      	ldr	r7, [pc, #560]	; (80088b4 <_printf_float+0x2f8>)
 8008684:	4b8c      	ldr	r3, [pc, #560]	; (80088b8 <_printf_float+0x2fc>)
 8008686:	e7db      	b.n	8008640 <_printf_float+0x84>
 8008688:	6863      	ldr	r3, [r4, #4]
 800868a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800868e:	1c59      	adds	r1, r3, #1
 8008690:	a80d      	add	r0, sp, #52	; 0x34
 8008692:	a90e      	add	r1, sp, #56	; 0x38
 8008694:	d140      	bne.n	8008718 <_printf_float+0x15c>
 8008696:	2306      	movs	r3, #6
 8008698:	6063      	str	r3, [r4, #4]
 800869a:	f04f 0c00 	mov.w	ip, #0
 800869e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80086a2:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80086a6:	6863      	ldr	r3, [r4, #4]
 80086a8:	6022      	str	r2, [r4, #0]
 80086aa:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	463a      	mov	r2, r7
 80086b2:	464b      	mov	r3, r9
 80086b4:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80086b8:	4628      	mov	r0, r5
 80086ba:	f7ff feed 	bl	8008498 <__cvt>
 80086be:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80086c2:	2b47      	cmp	r3, #71	; 0x47
 80086c4:	4607      	mov	r7, r0
 80086c6:	d109      	bne.n	80086dc <_printf_float+0x120>
 80086c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086ca:	1cd8      	adds	r0, r3, #3
 80086cc:	db02      	blt.n	80086d4 <_printf_float+0x118>
 80086ce:	6862      	ldr	r2, [r4, #4]
 80086d0:	4293      	cmp	r3, r2
 80086d2:	dd47      	ble.n	8008764 <_printf_float+0x1a8>
 80086d4:	f1a8 0802 	sub.w	r8, r8, #2
 80086d8:	fa5f f888 	uxtb.w	r8, r8
 80086dc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80086e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80086e2:	d824      	bhi.n	800872e <_printf_float+0x172>
 80086e4:	3901      	subs	r1, #1
 80086e6:	4642      	mov	r2, r8
 80086e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80086ec:	910d      	str	r1, [sp, #52]	; 0x34
 80086ee:	f7ff ff2f 	bl	8008550 <__exponent>
 80086f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086f4:	4681      	mov	r9, r0
 80086f6:	1813      	adds	r3, r2, r0
 80086f8:	2a01      	cmp	r2, #1
 80086fa:	6123      	str	r3, [r4, #16]
 80086fc:	dc02      	bgt.n	8008704 <_printf_float+0x148>
 80086fe:	6822      	ldr	r2, [r4, #0]
 8008700:	07d1      	lsls	r1, r2, #31
 8008702:	d501      	bpl.n	8008708 <_printf_float+0x14c>
 8008704:	3301      	adds	r3, #1
 8008706:	6123      	str	r3, [r4, #16]
 8008708:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800870c:	2b00      	cmp	r3, #0
 800870e:	d0a2      	beq.n	8008656 <_printf_float+0x9a>
 8008710:	232d      	movs	r3, #45	; 0x2d
 8008712:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008716:	e79e      	b.n	8008656 <_printf_float+0x9a>
 8008718:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800871c:	f000 816e 	beq.w	80089fc <_printf_float+0x440>
 8008720:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008724:	d1b9      	bne.n	800869a <_printf_float+0xde>
 8008726:	2b00      	cmp	r3, #0
 8008728:	d1b7      	bne.n	800869a <_printf_float+0xde>
 800872a:	2301      	movs	r3, #1
 800872c:	e7b4      	b.n	8008698 <_printf_float+0xdc>
 800872e:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8008732:	d119      	bne.n	8008768 <_printf_float+0x1ac>
 8008734:	2900      	cmp	r1, #0
 8008736:	6863      	ldr	r3, [r4, #4]
 8008738:	dd0c      	ble.n	8008754 <_printf_float+0x198>
 800873a:	6121      	str	r1, [r4, #16]
 800873c:	b913      	cbnz	r3, 8008744 <_printf_float+0x188>
 800873e:	6822      	ldr	r2, [r4, #0]
 8008740:	07d2      	lsls	r2, r2, #31
 8008742:	d502      	bpl.n	800874a <_printf_float+0x18e>
 8008744:	3301      	adds	r3, #1
 8008746:	440b      	add	r3, r1
 8008748:	6123      	str	r3, [r4, #16]
 800874a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800874c:	f04f 0900 	mov.w	r9, #0
 8008750:	65a3      	str	r3, [r4, #88]	; 0x58
 8008752:	e7d9      	b.n	8008708 <_printf_float+0x14c>
 8008754:	b913      	cbnz	r3, 800875c <_printf_float+0x1a0>
 8008756:	6822      	ldr	r2, [r4, #0]
 8008758:	07d0      	lsls	r0, r2, #31
 800875a:	d501      	bpl.n	8008760 <_printf_float+0x1a4>
 800875c:	3302      	adds	r3, #2
 800875e:	e7f3      	b.n	8008748 <_printf_float+0x18c>
 8008760:	2301      	movs	r3, #1
 8008762:	e7f1      	b.n	8008748 <_printf_float+0x18c>
 8008764:	f04f 0867 	mov.w	r8, #103	; 0x67
 8008768:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800876c:	4293      	cmp	r3, r2
 800876e:	db05      	blt.n	800877c <_printf_float+0x1c0>
 8008770:	6822      	ldr	r2, [r4, #0]
 8008772:	6123      	str	r3, [r4, #16]
 8008774:	07d1      	lsls	r1, r2, #31
 8008776:	d5e8      	bpl.n	800874a <_printf_float+0x18e>
 8008778:	3301      	adds	r3, #1
 800877a:	e7e5      	b.n	8008748 <_printf_float+0x18c>
 800877c:	2b00      	cmp	r3, #0
 800877e:	bfcc      	ite	gt
 8008780:	2301      	movgt	r3, #1
 8008782:	f1c3 0302 	rsble	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	e7de      	b.n	8008748 <_printf_float+0x18c>
 800878a:	6823      	ldr	r3, [r4, #0]
 800878c:	055a      	lsls	r2, r3, #21
 800878e:	d407      	bmi.n	80087a0 <_printf_float+0x1e4>
 8008790:	6923      	ldr	r3, [r4, #16]
 8008792:	463a      	mov	r2, r7
 8008794:	4659      	mov	r1, fp
 8008796:	4628      	mov	r0, r5
 8008798:	47b0      	blx	r6
 800879a:	3001      	adds	r0, #1
 800879c:	d129      	bne.n	80087f2 <_printf_float+0x236>
 800879e:	e764      	b.n	800866a <_printf_float+0xae>
 80087a0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80087a4:	f240 80d7 	bls.w	8008956 <_printf_float+0x39a>
 80087a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80087ac:	2200      	movs	r2, #0
 80087ae:	2300      	movs	r3, #0
 80087b0:	f7f8 f966 	bl	8000a80 <__aeabi_dcmpeq>
 80087b4:	b388      	cbz	r0, 800881a <_printf_float+0x25e>
 80087b6:	2301      	movs	r3, #1
 80087b8:	4a40      	ldr	r2, [pc, #256]	; (80088bc <_printf_float+0x300>)
 80087ba:	4659      	mov	r1, fp
 80087bc:	4628      	mov	r0, r5
 80087be:	47b0      	blx	r6
 80087c0:	3001      	adds	r0, #1
 80087c2:	f43f af52 	beq.w	800866a <_printf_float+0xae>
 80087c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80087ca:	429a      	cmp	r2, r3
 80087cc:	db02      	blt.n	80087d4 <_printf_float+0x218>
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	07d8      	lsls	r0, r3, #31
 80087d2:	d50e      	bpl.n	80087f2 <_printf_float+0x236>
 80087d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087d8:	4659      	mov	r1, fp
 80087da:	4628      	mov	r0, r5
 80087dc:	47b0      	blx	r6
 80087de:	3001      	adds	r0, #1
 80087e0:	f43f af43 	beq.w	800866a <_printf_float+0xae>
 80087e4:	2700      	movs	r7, #0
 80087e6:	f104 081a 	add.w	r8, r4, #26
 80087ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087ec:	3b01      	subs	r3, #1
 80087ee:	42bb      	cmp	r3, r7
 80087f0:	dc09      	bgt.n	8008806 <_printf_float+0x24a>
 80087f2:	6823      	ldr	r3, [r4, #0]
 80087f4:	079f      	lsls	r7, r3, #30
 80087f6:	f100 80fd 	bmi.w	80089f4 <_printf_float+0x438>
 80087fa:	68e0      	ldr	r0, [r4, #12]
 80087fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087fe:	4298      	cmp	r0, r3
 8008800:	bfb8      	it	lt
 8008802:	4618      	movlt	r0, r3
 8008804:	e733      	b.n	800866e <_printf_float+0xb2>
 8008806:	2301      	movs	r3, #1
 8008808:	4642      	mov	r2, r8
 800880a:	4659      	mov	r1, fp
 800880c:	4628      	mov	r0, r5
 800880e:	47b0      	blx	r6
 8008810:	3001      	adds	r0, #1
 8008812:	f43f af2a 	beq.w	800866a <_printf_float+0xae>
 8008816:	3701      	adds	r7, #1
 8008818:	e7e7      	b.n	80087ea <_printf_float+0x22e>
 800881a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800881c:	2b00      	cmp	r3, #0
 800881e:	dc2b      	bgt.n	8008878 <_printf_float+0x2bc>
 8008820:	2301      	movs	r3, #1
 8008822:	4a26      	ldr	r2, [pc, #152]	; (80088bc <_printf_float+0x300>)
 8008824:	4659      	mov	r1, fp
 8008826:	4628      	mov	r0, r5
 8008828:	47b0      	blx	r6
 800882a:	3001      	adds	r0, #1
 800882c:	f43f af1d 	beq.w	800866a <_printf_float+0xae>
 8008830:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008832:	b923      	cbnz	r3, 800883e <_printf_float+0x282>
 8008834:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008836:	b913      	cbnz	r3, 800883e <_printf_float+0x282>
 8008838:	6823      	ldr	r3, [r4, #0]
 800883a:	07d9      	lsls	r1, r3, #31
 800883c:	d5d9      	bpl.n	80087f2 <_printf_float+0x236>
 800883e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008842:	4659      	mov	r1, fp
 8008844:	4628      	mov	r0, r5
 8008846:	47b0      	blx	r6
 8008848:	3001      	adds	r0, #1
 800884a:	f43f af0e 	beq.w	800866a <_printf_float+0xae>
 800884e:	f04f 0800 	mov.w	r8, #0
 8008852:	f104 091a 	add.w	r9, r4, #26
 8008856:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008858:	425b      	negs	r3, r3
 800885a:	4543      	cmp	r3, r8
 800885c:	dc01      	bgt.n	8008862 <_printf_float+0x2a6>
 800885e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008860:	e797      	b.n	8008792 <_printf_float+0x1d6>
 8008862:	2301      	movs	r3, #1
 8008864:	464a      	mov	r2, r9
 8008866:	4659      	mov	r1, fp
 8008868:	4628      	mov	r0, r5
 800886a:	47b0      	blx	r6
 800886c:	3001      	adds	r0, #1
 800886e:	f43f aefc 	beq.w	800866a <_printf_float+0xae>
 8008872:	f108 0801 	add.w	r8, r8, #1
 8008876:	e7ee      	b.n	8008856 <_printf_float+0x29a>
 8008878:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800887a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800887c:	429a      	cmp	r2, r3
 800887e:	bfa8      	it	ge
 8008880:	461a      	movge	r2, r3
 8008882:	2a00      	cmp	r2, #0
 8008884:	4690      	mov	r8, r2
 8008886:	dd07      	ble.n	8008898 <_printf_float+0x2dc>
 8008888:	4613      	mov	r3, r2
 800888a:	4659      	mov	r1, fp
 800888c:	463a      	mov	r2, r7
 800888e:	4628      	mov	r0, r5
 8008890:	47b0      	blx	r6
 8008892:	3001      	adds	r0, #1
 8008894:	f43f aee9 	beq.w	800866a <_printf_float+0xae>
 8008898:	f104 031a 	add.w	r3, r4, #26
 800889c:	f04f 0a00 	mov.w	sl, #0
 80088a0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80088a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80088a6:	e015      	b.n	80088d4 <_printf_float+0x318>
 80088a8:	7fefffff 	.word	0x7fefffff
 80088ac:	0800a49c 	.word	0x0800a49c
 80088b0:	0800a498 	.word	0x0800a498
 80088b4:	0800a4a4 	.word	0x0800a4a4
 80088b8:	0800a4a0 	.word	0x0800a4a0
 80088bc:	0800a4a8 	.word	0x0800a4a8
 80088c0:	2301      	movs	r3, #1
 80088c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088c4:	4659      	mov	r1, fp
 80088c6:	4628      	mov	r0, r5
 80088c8:	47b0      	blx	r6
 80088ca:	3001      	adds	r0, #1
 80088cc:	f43f aecd 	beq.w	800866a <_printf_float+0xae>
 80088d0:	f10a 0a01 	add.w	sl, sl, #1
 80088d4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80088d8:	eba9 0308 	sub.w	r3, r9, r8
 80088dc:	4553      	cmp	r3, sl
 80088de:	dcef      	bgt.n	80088c0 <_printf_float+0x304>
 80088e0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80088e4:	429a      	cmp	r2, r3
 80088e6:	444f      	add	r7, r9
 80088e8:	db14      	blt.n	8008914 <_printf_float+0x358>
 80088ea:	6823      	ldr	r3, [r4, #0]
 80088ec:	07da      	lsls	r2, r3, #31
 80088ee:	d411      	bmi.n	8008914 <_printf_float+0x358>
 80088f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80088f4:	eba3 0209 	sub.w	r2, r3, r9
 80088f8:	eba3 0901 	sub.w	r9, r3, r1
 80088fc:	4591      	cmp	r9, r2
 80088fe:	bfa8      	it	ge
 8008900:	4691      	movge	r9, r2
 8008902:	f1b9 0f00 	cmp.w	r9, #0
 8008906:	dc0d      	bgt.n	8008924 <_printf_float+0x368>
 8008908:	2700      	movs	r7, #0
 800890a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800890e:	f104 081a 	add.w	r8, r4, #26
 8008912:	e018      	b.n	8008946 <_printf_float+0x38a>
 8008914:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008918:	4659      	mov	r1, fp
 800891a:	4628      	mov	r0, r5
 800891c:	47b0      	blx	r6
 800891e:	3001      	adds	r0, #1
 8008920:	d1e6      	bne.n	80088f0 <_printf_float+0x334>
 8008922:	e6a2      	b.n	800866a <_printf_float+0xae>
 8008924:	464b      	mov	r3, r9
 8008926:	463a      	mov	r2, r7
 8008928:	4659      	mov	r1, fp
 800892a:	4628      	mov	r0, r5
 800892c:	47b0      	blx	r6
 800892e:	3001      	adds	r0, #1
 8008930:	d1ea      	bne.n	8008908 <_printf_float+0x34c>
 8008932:	e69a      	b.n	800866a <_printf_float+0xae>
 8008934:	2301      	movs	r3, #1
 8008936:	4642      	mov	r2, r8
 8008938:	4659      	mov	r1, fp
 800893a:	4628      	mov	r0, r5
 800893c:	47b0      	blx	r6
 800893e:	3001      	adds	r0, #1
 8008940:	f43f ae93 	beq.w	800866a <_printf_float+0xae>
 8008944:	3701      	adds	r7, #1
 8008946:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800894a:	1a9b      	subs	r3, r3, r2
 800894c:	eba3 0309 	sub.w	r3, r3, r9
 8008950:	42bb      	cmp	r3, r7
 8008952:	dcef      	bgt.n	8008934 <_printf_float+0x378>
 8008954:	e74d      	b.n	80087f2 <_printf_float+0x236>
 8008956:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008958:	2a01      	cmp	r2, #1
 800895a:	dc01      	bgt.n	8008960 <_printf_float+0x3a4>
 800895c:	07db      	lsls	r3, r3, #31
 800895e:	d538      	bpl.n	80089d2 <_printf_float+0x416>
 8008960:	2301      	movs	r3, #1
 8008962:	463a      	mov	r2, r7
 8008964:	4659      	mov	r1, fp
 8008966:	4628      	mov	r0, r5
 8008968:	47b0      	blx	r6
 800896a:	3001      	adds	r0, #1
 800896c:	f43f ae7d 	beq.w	800866a <_printf_float+0xae>
 8008970:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008974:	4659      	mov	r1, fp
 8008976:	4628      	mov	r0, r5
 8008978:	47b0      	blx	r6
 800897a:	3001      	adds	r0, #1
 800897c:	f107 0701 	add.w	r7, r7, #1
 8008980:	f43f ae73 	beq.w	800866a <_printf_float+0xae>
 8008984:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008988:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800898a:	2200      	movs	r2, #0
 800898c:	f103 38ff 	add.w	r8, r3, #4294967295
 8008990:	2300      	movs	r3, #0
 8008992:	f7f8 f875 	bl	8000a80 <__aeabi_dcmpeq>
 8008996:	b9c0      	cbnz	r0, 80089ca <_printf_float+0x40e>
 8008998:	4643      	mov	r3, r8
 800899a:	463a      	mov	r2, r7
 800899c:	4659      	mov	r1, fp
 800899e:	4628      	mov	r0, r5
 80089a0:	47b0      	blx	r6
 80089a2:	3001      	adds	r0, #1
 80089a4:	d10d      	bne.n	80089c2 <_printf_float+0x406>
 80089a6:	e660      	b.n	800866a <_printf_float+0xae>
 80089a8:	2301      	movs	r3, #1
 80089aa:	4642      	mov	r2, r8
 80089ac:	4659      	mov	r1, fp
 80089ae:	4628      	mov	r0, r5
 80089b0:	47b0      	blx	r6
 80089b2:	3001      	adds	r0, #1
 80089b4:	f43f ae59 	beq.w	800866a <_printf_float+0xae>
 80089b8:	3701      	adds	r7, #1
 80089ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089bc:	3b01      	subs	r3, #1
 80089be:	42bb      	cmp	r3, r7
 80089c0:	dcf2      	bgt.n	80089a8 <_printf_float+0x3ec>
 80089c2:	464b      	mov	r3, r9
 80089c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80089c8:	e6e4      	b.n	8008794 <_printf_float+0x1d8>
 80089ca:	2700      	movs	r7, #0
 80089cc:	f104 081a 	add.w	r8, r4, #26
 80089d0:	e7f3      	b.n	80089ba <_printf_float+0x3fe>
 80089d2:	2301      	movs	r3, #1
 80089d4:	e7e1      	b.n	800899a <_printf_float+0x3de>
 80089d6:	2301      	movs	r3, #1
 80089d8:	4642      	mov	r2, r8
 80089da:	4659      	mov	r1, fp
 80089dc:	4628      	mov	r0, r5
 80089de:	47b0      	blx	r6
 80089e0:	3001      	adds	r0, #1
 80089e2:	f43f ae42 	beq.w	800866a <_printf_float+0xae>
 80089e6:	3701      	adds	r7, #1
 80089e8:	68e3      	ldr	r3, [r4, #12]
 80089ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80089ec:	1a9b      	subs	r3, r3, r2
 80089ee:	42bb      	cmp	r3, r7
 80089f0:	dcf1      	bgt.n	80089d6 <_printf_float+0x41a>
 80089f2:	e702      	b.n	80087fa <_printf_float+0x23e>
 80089f4:	2700      	movs	r7, #0
 80089f6:	f104 0819 	add.w	r8, r4, #25
 80089fa:	e7f5      	b.n	80089e8 <_printf_float+0x42c>
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f43f ae94 	beq.w	800872a <_printf_float+0x16e>
 8008a02:	f04f 0c00 	mov.w	ip, #0
 8008a06:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8008a0a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8008a0e:	6022      	str	r2, [r4, #0]
 8008a10:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8008a14:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	463a      	mov	r2, r7
 8008a1c:	464b      	mov	r3, r9
 8008a1e:	4628      	mov	r0, r5
 8008a20:	f7ff fd3a 	bl	8008498 <__cvt>
 8008a24:	4607      	mov	r7, r0
 8008a26:	e64f      	b.n	80086c8 <_printf_float+0x10c>

08008a28 <_printf_common>:
 8008a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a2c:	4691      	mov	r9, r2
 8008a2e:	461f      	mov	r7, r3
 8008a30:	688a      	ldr	r2, [r1, #8]
 8008a32:	690b      	ldr	r3, [r1, #16]
 8008a34:	4606      	mov	r6, r0
 8008a36:	4293      	cmp	r3, r2
 8008a38:	bfb8      	it	lt
 8008a3a:	4613      	movlt	r3, r2
 8008a3c:	f8c9 3000 	str.w	r3, [r9]
 8008a40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a44:	460c      	mov	r4, r1
 8008a46:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a4a:	b112      	cbz	r2, 8008a52 <_printf_common+0x2a>
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	f8c9 3000 	str.w	r3, [r9]
 8008a52:	6823      	ldr	r3, [r4, #0]
 8008a54:	0699      	lsls	r1, r3, #26
 8008a56:	bf42      	ittt	mi
 8008a58:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008a5c:	3302      	addmi	r3, #2
 8008a5e:	f8c9 3000 	strmi.w	r3, [r9]
 8008a62:	6825      	ldr	r5, [r4, #0]
 8008a64:	f015 0506 	ands.w	r5, r5, #6
 8008a68:	d107      	bne.n	8008a7a <_printf_common+0x52>
 8008a6a:	f104 0a19 	add.w	sl, r4, #25
 8008a6e:	68e3      	ldr	r3, [r4, #12]
 8008a70:	f8d9 2000 	ldr.w	r2, [r9]
 8008a74:	1a9b      	subs	r3, r3, r2
 8008a76:	42ab      	cmp	r3, r5
 8008a78:	dc29      	bgt.n	8008ace <_printf_common+0xa6>
 8008a7a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008a7e:	6822      	ldr	r2, [r4, #0]
 8008a80:	3300      	adds	r3, #0
 8008a82:	bf18      	it	ne
 8008a84:	2301      	movne	r3, #1
 8008a86:	0692      	lsls	r2, r2, #26
 8008a88:	d42e      	bmi.n	8008ae8 <_printf_common+0xc0>
 8008a8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a8e:	4639      	mov	r1, r7
 8008a90:	4630      	mov	r0, r6
 8008a92:	47c0      	blx	r8
 8008a94:	3001      	adds	r0, #1
 8008a96:	d021      	beq.n	8008adc <_printf_common+0xb4>
 8008a98:	6823      	ldr	r3, [r4, #0]
 8008a9a:	68e5      	ldr	r5, [r4, #12]
 8008a9c:	f003 0306 	and.w	r3, r3, #6
 8008aa0:	2b04      	cmp	r3, #4
 8008aa2:	bf18      	it	ne
 8008aa4:	2500      	movne	r5, #0
 8008aa6:	f8d9 2000 	ldr.w	r2, [r9]
 8008aaa:	f04f 0900 	mov.w	r9, #0
 8008aae:	bf08      	it	eq
 8008ab0:	1aad      	subeq	r5, r5, r2
 8008ab2:	68a3      	ldr	r3, [r4, #8]
 8008ab4:	6922      	ldr	r2, [r4, #16]
 8008ab6:	bf08      	it	eq
 8008ab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008abc:	4293      	cmp	r3, r2
 8008abe:	bfc4      	itt	gt
 8008ac0:	1a9b      	subgt	r3, r3, r2
 8008ac2:	18ed      	addgt	r5, r5, r3
 8008ac4:	341a      	adds	r4, #26
 8008ac6:	454d      	cmp	r5, r9
 8008ac8:	d11a      	bne.n	8008b00 <_printf_common+0xd8>
 8008aca:	2000      	movs	r0, #0
 8008acc:	e008      	b.n	8008ae0 <_printf_common+0xb8>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	4652      	mov	r2, sl
 8008ad2:	4639      	mov	r1, r7
 8008ad4:	4630      	mov	r0, r6
 8008ad6:	47c0      	blx	r8
 8008ad8:	3001      	adds	r0, #1
 8008ada:	d103      	bne.n	8008ae4 <_printf_common+0xbc>
 8008adc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ae4:	3501      	adds	r5, #1
 8008ae6:	e7c2      	b.n	8008a6e <_printf_common+0x46>
 8008ae8:	2030      	movs	r0, #48	; 0x30
 8008aea:	18e1      	adds	r1, r4, r3
 8008aec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008af0:	1c5a      	adds	r2, r3, #1
 8008af2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008af6:	4422      	add	r2, r4
 8008af8:	3302      	adds	r3, #2
 8008afa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008afe:	e7c4      	b.n	8008a8a <_printf_common+0x62>
 8008b00:	2301      	movs	r3, #1
 8008b02:	4622      	mov	r2, r4
 8008b04:	4639      	mov	r1, r7
 8008b06:	4630      	mov	r0, r6
 8008b08:	47c0      	blx	r8
 8008b0a:	3001      	adds	r0, #1
 8008b0c:	d0e6      	beq.n	8008adc <_printf_common+0xb4>
 8008b0e:	f109 0901 	add.w	r9, r9, #1
 8008b12:	e7d8      	b.n	8008ac6 <_printf_common+0x9e>

08008b14 <_printf_i>:
 8008b14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b18:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008b1c:	460c      	mov	r4, r1
 8008b1e:	7e09      	ldrb	r1, [r1, #24]
 8008b20:	b085      	sub	sp, #20
 8008b22:	296e      	cmp	r1, #110	; 0x6e
 8008b24:	4617      	mov	r7, r2
 8008b26:	4606      	mov	r6, r0
 8008b28:	4698      	mov	r8, r3
 8008b2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b2c:	f000 80b3 	beq.w	8008c96 <_printf_i+0x182>
 8008b30:	d822      	bhi.n	8008b78 <_printf_i+0x64>
 8008b32:	2963      	cmp	r1, #99	; 0x63
 8008b34:	d036      	beq.n	8008ba4 <_printf_i+0x90>
 8008b36:	d80a      	bhi.n	8008b4e <_printf_i+0x3a>
 8008b38:	2900      	cmp	r1, #0
 8008b3a:	f000 80b9 	beq.w	8008cb0 <_printf_i+0x19c>
 8008b3e:	2958      	cmp	r1, #88	; 0x58
 8008b40:	f000 8083 	beq.w	8008c4a <_printf_i+0x136>
 8008b44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b48:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008b4c:	e032      	b.n	8008bb4 <_printf_i+0xa0>
 8008b4e:	2964      	cmp	r1, #100	; 0x64
 8008b50:	d001      	beq.n	8008b56 <_printf_i+0x42>
 8008b52:	2969      	cmp	r1, #105	; 0x69
 8008b54:	d1f6      	bne.n	8008b44 <_printf_i+0x30>
 8008b56:	6820      	ldr	r0, [r4, #0]
 8008b58:	6813      	ldr	r3, [r2, #0]
 8008b5a:	0605      	lsls	r5, r0, #24
 8008b5c:	f103 0104 	add.w	r1, r3, #4
 8008b60:	d52a      	bpl.n	8008bb8 <_printf_i+0xa4>
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6011      	str	r1, [r2, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	da03      	bge.n	8008b72 <_printf_i+0x5e>
 8008b6a:	222d      	movs	r2, #45	; 0x2d
 8008b6c:	425b      	negs	r3, r3
 8008b6e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008b72:	486f      	ldr	r0, [pc, #444]	; (8008d30 <_printf_i+0x21c>)
 8008b74:	220a      	movs	r2, #10
 8008b76:	e039      	b.n	8008bec <_printf_i+0xd8>
 8008b78:	2973      	cmp	r1, #115	; 0x73
 8008b7a:	f000 809d 	beq.w	8008cb8 <_printf_i+0x1a4>
 8008b7e:	d808      	bhi.n	8008b92 <_printf_i+0x7e>
 8008b80:	296f      	cmp	r1, #111	; 0x6f
 8008b82:	d020      	beq.n	8008bc6 <_printf_i+0xb2>
 8008b84:	2970      	cmp	r1, #112	; 0x70
 8008b86:	d1dd      	bne.n	8008b44 <_printf_i+0x30>
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	f043 0320 	orr.w	r3, r3, #32
 8008b8e:	6023      	str	r3, [r4, #0]
 8008b90:	e003      	b.n	8008b9a <_printf_i+0x86>
 8008b92:	2975      	cmp	r1, #117	; 0x75
 8008b94:	d017      	beq.n	8008bc6 <_printf_i+0xb2>
 8008b96:	2978      	cmp	r1, #120	; 0x78
 8008b98:	d1d4      	bne.n	8008b44 <_printf_i+0x30>
 8008b9a:	2378      	movs	r3, #120	; 0x78
 8008b9c:	4865      	ldr	r0, [pc, #404]	; (8008d34 <_printf_i+0x220>)
 8008b9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ba2:	e055      	b.n	8008c50 <_printf_i+0x13c>
 8008ba4:	6813      	ldr	r3, [r2, #0]
 8008ba6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008baa:	1d19      	adds	r1, r3, #4
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	6011      	str	r1, [r2, #0]
 8008bb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e08c      	b.n	8008cd2 <_printf_i+0x1be>
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008bbe:	6011      	str	r1, [r2, #0]
 8008bc0:	bf18      	it	ne
 8008bc2:	b21b      	sxthne	r3, r3
 8008bc4:	e7cf      	b.n	8008b66 <_printf_i+0x52>
 8008bc6:	6813      	ldr	r3, [r2, #0]
 8008bc8:	6825      	ldr	r5, [r4, #0]
 8008bca:	1d18      	adds	r0, r3, #4
 8008bcc:	6010      	str	r0, [r2, #0]
 8008bce:	0628      	lsls	r0, r5, #24
 8008bd0:	d501      	bpl.n	8008bd6 <_printf_i+0xc2>
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	e002      	b.n	8008bdc <_printf_i+0xc8>
 8008bd6:	0668      	lsls	r0, r5, #25
 8008bd8:	d5fb      	bpl.n	8008bd2 <_printf_i+0xbe>
 8008bda:	881b      	ldrh	r3, [r3, #0]
 8008bdc:	296f      	cmp	r1, #111	; 0x6f
 8008bde:	bf14      	ite	ne
 8008be0:	220a      	movne	r2, #10
 8008be2:	2208      	moveq	r2, #8
 8008be4:	4852      	ldr	r0, [pc, #328]	; (8008d30 <_printf_i+0x21c>)
 8008be6:	2100      	movs	r1, #0
 8008be8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bec:	6865      	ldr	r5, [r4, #4]
 8008bee:	2d00      	cmp	r5, #0
 8008bf0:	60a5      	str	r5, [r4, #8]
 8008bf2:	f2c0 8095 	blt.w	8008d20 <_printf_i+0x20c>
 8008bf6:	6821      	ldr	r1, [r4, #0]
 8008bf8:	f021 0104 	bic.w	r1, r1, #4
 8008bfc:	6021      	str	r1, [r4, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d13d      	bne.n	8008c7e <_printf_i+0x16a>
 8008c02:	2d00      	cmp	r5, #0
 8008c04:	f040 808e 	bne.w	8008d24 <_printf_i+0x210>
 8008c08:	4665      	mov	r5, ip
 8008c0a:	2a08      	cmp	r2, #8
 8008c0c:	d10b      	bne.n	8008c26 <_printf_i+0x112>
 8008c0e:	6823      	ldr	r3, [r4, #0]
 8008c10:	07db      	lsls	r3, r3, #31
 8008c12:	d508      	bpl.n	8008c26 <_printf_i+0x112>
 8008c14:	6923      	ldr	r3, [r4, #16]
 8008c16:	6862      	ldr	r2, [r4, #4]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	bfde      	ittt	le
 8008c1c:	2330      	movle	r3, #48	; 0x30
 8008c1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c22:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c26:	ebac 0305 	sub.w	r3, ip, r5
 8008c2a:	6123      	str	r3, [r4, #16]
 8008c2c:	f8cd 8000 	str.w	r8, [sp]
 8008c30:	463b      	mov	r3, r7
 8008c32:	aa03      	add	r2, sp, #12
 8008c34:	4621      	mov	r1, r4
 8008c36:	4630      	mov	r0, r6
 8008c38:	f7ff fef6 	bl	8008a28 <_printf_common>
 8008c3c:	3001      	adds	r0, #1
 8008c3e:	d14d      	bne.n	8008cdc <_printf_i+0x1c8>
 8008c40:	f04f 30ff 	mov.w	r0, #4294967295
 8008c44:	b005      	add	sp, #20
 8008c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c4a:	4839      	ldr	r0, [pc, #228]	; (8008d30 <_printf_i+0x21c>)
 8008c4c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008c50:	6813      	ldr	r3, [r2, #0]
 8008c52:	6821      	ldr	r1, [r4, #0]
 8008c54:	1d1d      	adds	r5, r3, #4
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6015      	str	r5, [r2, #0]
 8008c5a:	060a      	lsls	r2, r1, #24
 8008c5c:	d50b      	bpl.n	8008c76 <_printf_i+0x162>
 8008c5e:	07ca      	lsls	r2, r1, #31
 8008c60:	bf44      	itt	mi
 8008c62:	f041 0120 	orrmi.w	r1, r1, #32
 8008c66:	6021      	strmi	r1, [r4, #0]
 8008c68:	b91b      	cbnz	r3, 8008c72 <_printf_i+0x15e>
 8008c6a:	6822      	ldr	r2, [r4, #0]
 8008c6c:	f022 0220 	bic.w	r2, r2, #32
 8008c70:	6022      	str	r2, [r4, #0]
 8008c72:	2210      	movs	r2, #16
 8008c74:	e7b7      	b.n	8008be6 <_printf_i+0xd2>
 8008c76:	064d      	lsls	r5, r1, #25
 8008c78:	bf48      	it	mi
 8008c7a:	b29b      	uxthmi	r3, r3
 8008c7c:	e7ef      	b.n	8008c5e <_printf_i+0x14a>
 8008c7e:	4665      	mov	r5, ip
 8008c80:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c84:	fb02 3311 	mls	r3, r2, r1, r3
 8008c88:	5cc3      	ldrb	r3, [r0, r3]
 8008c8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008c8e:	460b      	mov	r3, r1
 8008c90:	2900      	cmp	r1, #0
 8008c92:	d1f5      	bne.n	8008c80 <_printf_i+0x16c>
 8008c94:	e7b9      	b.n	8008c0a <_printf_i+0xf6>
 8008c96:	6813      	ldr	r3, [r2, #0]
 8008c98:	6825      	ldr	r5, [r4, #0]
 8008c9a:	1d18      	adds	r0, r3, #4
 8008c9c:	6961      	ldr	r1, [r4, #20]
 8008c9e:	6010      	str	r0, [r2, #0]
 8008ca0:	0628      	lsls	r0, r5, #24
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	d501      	bpl.n	8008caa <_printf_i+0x196>
 8008ca6:	6019      	str	r1, [r3, #0]
 8008ca8:	e002      	b.n	8008cb0 <_printf_i+0x19c>
 8008caa:	066a      	lsls	r2, r5, #25
 8008cac:	d5fb      	bpl.n	8008ca6 <_printf_i+0x192>
 8008cae:	8019      	strh	r1, [r3, #0]
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	4665      	mov	r5, ip
 8008cb4:	6123      	str	r3, [r4, #16]
 8008cb6:	e7b9      	b.n	8008c2c <_printf_i+0x118>
 8008cb8:	6813      	ldr	r3, [r2, #0]
 8008cba:	1d19      	adds	r1, r3, #4
 8008cbc:	6011      	str	r1, [r2, #0]
 8008cbe:	681d      	ldr	r5, [r3, #0]
 8008cc0:	6862      	ldr	r2, [r4, #4]
 8008cc2:	2100      	movs	r1, #0
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	f000 fed9 	bl	8009a7c <memchr>
 8008cca:	b108      	cbz	r0, 8008cd0 <_printf_i+0x1bc>
 8008ccc:	1b40      	subs	r0, r0, r5
 8008cce:	6060      	str	r0, [r4, #4]
 8008cd0:	6863      	ldr	r3, [r4, #4]
 8008cd2:	6123      	str	r3, [r4, #16]
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cda:	e7a7      	b.n	8008c2c <_printf_i+0x118>
 8008cdc:	6923      	ldr	r3, [r4, #16]
 8008cde:	462a      	mov	r2, r5
 8008ce0:	4639      	mov	r1, r7
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	47c0      	blx	r8
 8008ce6:	3001      	adds	r0, #1
 8008ce8:	d0aa      	beq.n	8008c40 <_printf_i+0x12c>
 8008cea:	6823      	ldr	r3, [r4, #0]
 8008cec:	079b      	lsls	r3, r3, #30
 8008cee:	d413      	bmi.n	8008d18 <_printf_i+0x204>
 8008cf0:	68e0      	ldr	r0, [r4, #12]
 8008cf2:	9b03      	ldr	r3, [sp, #12]
 8008cf4:	4298      	cmp	r0, r3
 8008cf6:	bfb8      	it	lt
 8008cf8:	4618      	movlt	r0, r3
 8008cfa:	e7a3      	b.n	8008c44 <_printf_i+0x130>
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	464a      	mov	r2, r9
 8008d00:	4639      	mov	r1, r7
 8008d02:	4630      	mov	r0, r6
 8008d04:	47c0      	blx	r8
 8008d06:	3001      	adds	r0, #1
 8008d08:	d09a      	beq.n	8008c40 <_printf_i+0x12c>
 8008d0a:	3501      	adds	r5, #1
 8008d0c:	68e3      	ldr	r3, [r4, #12]
 8008d0e:	9a03      	ldr	r2, [sp, #12]
 8008d10:	1a9b      	subs	r3, r3, r2
 8008d12:	42ab      	cmp	r3, r5
 8008d14:	dcf2      	bgt.n	8008cfc <_printf_i+0x1e8>
 8008d16:	e7eb      	b.n	8008cf0 <_printf_i+0x1dc>
 8008d18:	2500      	movs	r5, #0
 8008d1a:	f104 0919 	add.w	r9, r4, #25
 8008d1e:	e7f5      	b.n	8008d0c <_printf_i+0x1f8>
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1ac      	bne.n	8008c7e <_printf_i+0x16a>
 8008d24:	7803      	ldrb	r3, [r0, #0]
 8008d26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d2e:	e76c      	b.n	8008c0a <_printf_i+0xf6>
 8008d30:	0800a4aa 	.word	0x0800a4aa
 8008d34:	0800a4bb 	.word	0x0800a4bb

08008d38 <_sbrk_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	4c05      	ldr	r4, [pc, #20]	; (8008d54 <_sbrk_r+0x1c>)
 8008d3e:	4605      	mov	r5, r0
 8008d40:	4608      	mov	r0, r1
 8008d42:	6023      	str	r3, [r4, #0]
 8008d44:	f7fe ff66 	bl	8007c14 <_sbrk>
 8008d48:	1c43      	adds	r3, r0, #1
 8008d4a:	d102      	bne.n	8008d52 <_sbrk_r+0x1a>
 8008d4c:	6823      	ldr	r3, [r4, #0]
 8008d4e:	b103      	cbz	r3, 8008d52 <_sbrk_r+0x1a>
 8008d50:	602b      	str	r3, [r5, #0]
 8008d52:	bd38      	pop	{r3, r4, r5, pc}
 8008d54:	20000374 	.word	0x20000374

08008d58 <siprintf>:
 8008d58:	b40e      	push	{r1, r2, r3}
 8008d5a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d5e:	b500      	push	{lr}
 8008d60:	b09c      	sub	sp, #112	; 0x70
 8008d62:	ab1d      	add	r3, sp, #116	; 0x74
 8008d64:	9002      	str	r0, [sp, #8]
 8008d66:	9006      	str	r0, [sp, #24]
 8008d68:	9107      	str	r1, [sp, #28]
 8008d6a:	9104      	str	r1, [sp, #16]
 8008d6c:	4808      	ldr	r0, [pc, #32]	; (8008d90 <siprintf+0x38>)
 8008d6e:	4909      	ldr	r1, [pc, #36]	; (8008d94 <siprintf+0x3c>)
 8008d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d74:	9105      	str	r1, [sp, #20]
 8008d76:	6800      	ldr	r0, [r0, #0]
 8008d78:	a902      	add	r1, sp, #8
 8008d7a:	9301      	str	r3, [sp, #4]
 8008d7c:	f001 f9d0 	bl	800a120 <_svfiprintf_r>
 8008d80:	2200      	movs	r2, #0
 8008d82:	9b02      	ldr	r3, [sp, #8]
 8008d84:	701a      	strb	r2, [r3, #0]
 8008d86:	b01c      	add	sp, #112	; 0x70
 8008d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d8c:	b003      	add	sp, #12
 8008d8e:	4770      	bx	lr
 8008d90:	200000d4 	.word	0x200000d4
 8008d94:	ffff0208 	.word	0xffff0208

08008d98 <_vsiprintf_r>:
 8008d98:	b500      	push	{lr}
 8008d9a:	b09b      	sub	sp, #108	; 0x6c
 8008d9c:	9100      	str	r1, [sp, #0]
 8008d9e:	9104      	str	r1, [sp, #16]
 8008da0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008da4:	9105      	str	r1, [sp, #20]
 8008da6:	9102      	str	r1, [sp, #8]
 8008da8:	4905      	ldr	r1, [pc, #20]	; (8008dc0 <_vsiprintf_r+0x28>)
 8008daa:	9103      	str	r1, [sp, #12]
 8008dac:	4669      	mov	r1, sp
 8008dae:	f001 f9b7 	bl	800a120 <_svfiprintf_r>
 8008db2:	2200      	movs	r2, #0
 8008db4:	9b00      	ldr	r3, [sp, #0]
 8008db6:	701a      	strb	r2, [r3, #0]
 8008db8:	b01b      	add	sp, #108	; 0x6c
 8008dba:	f85d fb04 	ldr.w	pc, [sp], #4
 8008dbe:	bf00      	nop
 8008dc0:	ffff0208 	.word	0xffff0208

08008dc4 <vsiprintf>:
 8008dc4:	4613      	mov	r3, r2
 8008dc6:	460a      	mov	r2, r1
 8008dc8:	4601      	mov	r1, r0
 8008dca:	4802      	ldr	r0, [pc, #8]	; (8008dd4 <vsiprintf+0x10>)
 8008dcc:	6800      	ldr	r0, [r0, #0]
 8008dce:	f7ff bfe3 	b.w	8008d98 <_vsiprintf_r>
 8008dd2:	bf00      	nop
 8008dd4:	200000d4 	.word	0x200000d4

08008dd8 <quorem>:
 8008dd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ddc:	6903      	ldr	r3, [r0, #16]
 8008dde:	690c      	ldr	r4, [r1, #16]
 8008de0:	4680      	mov	r8, r0
 8008de2:	42a3      	cmp	r3, r4
 8008de4:	f2c0 8084 	blt.w	8008ef0 <quorem+0x118>
 8008de8:	3c01      	subs	r4, #1
 8008dea:	f101 0714 	add.w	r7, r1, #20
 8008dee:	f100 0614 	add.w	r6, r0, #20
 8008df2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008df6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008dfa:	3501      	adds	r5, #1
 8008dfc:	fbb0 f5f5 	udiv	r5, r0, r5
 8008e00:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008e04:	eb06 030c 	add.w	r3, r6, ip
 8008e08:	eb07 090c 	add.w	r9, r7, ip
 8008e0c:	9301      	str	r3, [sp, #4]
 8008e0e:	b39d      	cbz	r5, 8008e78 <quorem+0xa0>
 8008e10:	f04f 0a00 	mov.w	sl, #0
 8008e14:	4638      	mov	r0, r7
 8008e16:	46b6      	mov	lr, r6
 8008e18:	46d3      	mov	fp, sl
 8008e1a:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e1e:	b293      	uxth	r3, r2
 8008e20:	fb05 a303 	mla	r3, r5, r3, sl
 8008e24:	0c12      	lsrs	r2, r2, #16
 8008e26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e2a:	fb05 a202 	mla	r2, r5, r2, sl
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	ebab 0303 	sub.w	r3, fp, r3
 8008e34:	f8de b000 	ldr.w	fp, [lr]
 8008e38:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008e3c:	fa1f fb8b 	uxth.w	fp, fp
 8008e40:	445b      	add	r3, fp
 8008e42:	fa1f fb82 	uxth.w	fp, r2
 8008e46:	f8de 2000 	ldr.w	r2, [lr]
 8008e4a:	4581      	cmp	r9, r0
 8008e4c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008e50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e5a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008e5e:	f84e 3b04 	str.w	r3, [lr], #4
 8008e62:	d2da      	bcs.n	8008e1a <quorem+0x42>
 8008e64:	f856 300c 	ldr.w	r3, [r6, ip]
 8008e68:	b933      	cbnz	r3, 8008e78 <quorem+0xa0>
 8008e6a:	9b01      	ldr	r3, [sp, #4]
 8008e6c:	3b04      	subs	r3, #4
 8008e6e:	429e      	cmp	r6, r3
 8008e70:	461a      	mov	r2, r3
 8008e72:	d331      	bcc.n	8008ed8 <quorem+0x100>
 8008e74:	f8c8 4010 	str.w	r4, [r8, #16]
 8008e78:	4640      	mov	r0, r8
 8008e7a:	f001 f82f 	bl	8009edc <__mcmp>
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	db26      	blt.n	8008ed0 <quorem+0xf8>
 8008e82:	4630      	mov	r0, r6
 8008e84:	f04f 0c00 	mov.w	ip, #0
 8008e88:	3501      	adds	r5, #1
 8008e8a:	f857 1b04 	ldr.w	r1, [r7], #4
 8008e8e:	f8d0 e000 	ldr.w	lr, [r0]
 8008e92:	b28b      	uxth	r3, r1
 8008e94:	ebac 0303 	sub.w	r3, ip, r3
 8008e98:	fa1f f28e 	uxth.w	r2, lr
 8008e9c:	4413      	add	r3, r2
 8008e9e:	0c0a      	lsrs	r2, r1, #16
 8008ea0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008ea4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008eae:	45b9      	cmp	r9, r7
 8008eb0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008eb4:	f840 3b04 	str.w	r3, [r0], #4
 8008eb8:	d2e7      	bcs.n	8008e8a <quorem+0xb2>
 8008eba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008ebe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008ec2:	b92a      	cbnz	r2, 8008ed0 <quorem+0xf8>
 8008ec4:	3b04      	subs	r3, #4
 8008ec6:	429e      	cmp	r6, r3
 8008ec8:	461a      	mov	r2, r3
 8008eca:	d30b      	bcc.n	8008ee4 <quorem+0x10c>
 8008ecc:	f8c8 4010 	str.w	r4, [r8, #16]
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	b003      	add	sp, #12
 8008ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed8:	6812      	ldr	r2, [r2, #0]
 8008eda:	3b04      	subs	r3, #4
 8008edc:	2a00      	cmp	r2, #0
 8008ede:	d1c9      	bne.n	8008e74 <quorem+0x9c>
 8008ee0:	3c01      	subs	r4, #1
 8008ee2:	e7c4      	b.n	8008e6e <quorem+0x96>
 8008ee4:	6812      	ldr	r2, [r2, #0]
 8008ee6:	3b04      	subs	r3, #4
 8008ee8:	2a00      	cmp	r2, #0
 8008eea:	d1ef      	bne.n	8008ecc <quorem+0xf4>
 8008eec:	3c01      	subs	r4, #1
 8008eee:	e7ea      	b.n	8008ec6 <quorem+0xee>
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	e7ee      	b.n	8008ed2 <quorem+0xfa>
 8008ef4:	0000      	movs	r0, r0
	...

08008ef8 <_dtoa_r>:
 8008ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efc:	4616      	mov	r6, r2
 8008efe:	461f      	mov	r7, r3
 8008f00:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008f02:	b095      	sub	sp, #84	; 0x54
 8008f04:	4604      	mov	r4, r0
 8008f06:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8008f0a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008f0e:	b93d      	cbnz	r5, 8008f20 <_dtoa_r+0x28>
 8008f10:	2010      	movs	r0, #16
 8008f12:	f7ff f9f5 	bl	8008300 <malloc>
 8008f16:	6260      	str	r0, [r4, #36]	; 0x24
 8008f18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f1c:	6005      	str	r5, [r0, #0]
 8008f1e:	60c5      	str	r5, [r0, #12]
 8008f20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f22:	6819      	ldr	r1, [r3, #0]
 8008f24:	b151      	cbz	r1, 8008f3c <_dtoa_r+0x44>
 8008f26:	685a      	ldr	r2, [r3, #4]
 8008f28:	2301      	movs	r3, #1
 8008f2a:	4093      	lsls	r3, r2
 8008f2c:	604a      	str	r2, [r1, #4]
 8008f2e:	608b      	str	r3, [r1, #8]
 8008f30:	4620      	mov	r0, r4
 8008f32:	f000 fdf2 	bl	8009b1a <_Bfree>
 8008f36:	2200      	movs	r2, #0
 8008f38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f3a:	601a      	str	r2, [r3, #0]
 8008f3c:	1e3b      	subs	r3, r7, #0
 8008f3e:	bfaf      	iteee	ge
 8008f40:	2300      	movge	r3, #0
 8008f42:	2201      	movlt	r2, #1
 8008f44:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008f48:	9303      	strlt	r3, [sp, #12]
 8008f4a:	bfac      	ite	ge
 8008f4c:	f8c8 3000 	strge.w	r3, [r8]
 8008f50:	f8c8 2000 	strlt.w	r2, [r8]
 8008f54:	4bae      	ldr	r3, [pc, #696]	; (8009210 <_dtoa_r+0x318>)
 8008f56:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008f5a:	ea33 0308 	bics.w	r3, r3, r8
 8008f5e:	d11b      	bne.n	8008f98 <_dtoa_r+0xa0>
 8008f60:	f242 730f 	movw	r3, #9999	; 0x270f
 8008f64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008f66:	6013      	str	r3, [r2, #0]
 8008f68:	9b02      	ldr	r3, [sp, #8]
 8008f6a:	b923      	cbnz	r3, 8008f76 <_dtoa_r+0x7e>
 8008f6c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008f70:	2800      	cmp	r0, #0
 8008f72:	f000 8545 	beq.w	8009a00 <_dtoa_r+0xb08>
 8008f76:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f78:	b953      	cbnz	r3, 8008f90 <_dtoa_r+0x98>
 8008f7a:	4ba6      	ldr	r3, [pc, #664]	; (8009214 <_dtoa_r+0x31c>)
 8008f7c:	e021      	b.n	8008fc2 <_dtoa_r+0xca>
 8008f7e:	4ba6      	ldr	r3, [pc, #664]	; (8009218 <_dtoa_r+0x320>)
 8008f80:	9306      	str	r3, [sp, #24]
 8008f82:	3308      	adds	r3, #8
 8008f84:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008f86:	6013      	str	r3, [r2, #0]
 8008f88:	9806      	ldr	r0, [sp, #24]
 8008f8a:	b015      	add	sp, #84	; 0x54
 8008f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f90:	4ba0      	ldr	r3, [pc, #640]	; (8009214 <_dtoa_r+0x31c>)
 8008f92:	9306      	str	r3, [sp, #24]
 8008f94:	3303      	adds	r3, #3
 8008f96:	e7f5      	b.n	8008f84 <_dtoa_r+0x8c>
 8008f98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	4639      	mov	r1, r7
 8008fa4:	f7f7 fd6c 	bl	8000a80 <__aeabi_dcmpeq>
 8008fa8:	4682      	mov	sl, r0
 8008faa:	b160      	cbz	r0, 8008fc6 <_dtoa_r+0xce>
 8008fac:	2301      	movs	r3, #1
 8008fae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008fb0:	6013      	str	r3, [r2, #0]
 8008fb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f000 8520 	beq.w	80099fa <_dtoa_r+0xb02>
 8008fba:	4b98      	ldr	r3, [pc, #608]	; (800921c <_dtoa_r+0x324>)
 8008fbc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008fbe:	6013      	str	r3, [r2, #0]
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	9306      	str	r3, [sp, #24]
 8008fc4:	e7e0      	b.n	8008f88 <_dtoa_r+0x90>
 8008fc6:	ab12      	add	r3, sp, #72	; 0x48
 8008fc8:	9301      	str	r3, [sp, #4]
 8008fca:	ab13      	add	r3, sp, #76	; 0x4c
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	4632      	mov	r2, r6
 8008fd0:	463b      	mov	r3, r7
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	f000 fffa 	bl	8009fcc <__d2b>
 8008fd8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008fdc:	4683      	mov	fp, r0
 8008fde:	2d00      	cmp	r5, #0
 8008fe0:	d07d      	beq.n	80090de <_dtoa_r+0x1e6>
 8008fe2:	46b0      	mov	r8, r6
 8008fe4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008fe8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8008fec:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8008ff0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008ff4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	4b89      	ldr	r3, [pc, #548]	; (8009220 <_dtoa_r+0x328>)
 8008ffc:	4640      	mov	r0, r8
 8008ffe:	4649      	mov	r1, r9
 8009000:	f7f7 f91e 	bl	8000240 <__aeabi_dsub>
 8009004:	a37c      	add	r3, pc, #496	; (adr r3, 80091f8 <_dtoa_r+0x300>)
 8009006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900a:	f7f7 fad1 	bl	80005b0 <__aeabi_dmul>
 800900e:	a37c      	add	r3, pc, #496	; (adr r3, 8009200 <_dtoa_r+0x308>)
 8009010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009014:	f7f7 f916 	bl	8000244 <__adddf3>
 8009018:	4606      	mov	r6, r0
 800901a:	4628      	mov	r0, r5
 800901c:	460f      	mov	r7, r1
 800901e:	f7f7 fa5d 	bl	80004dc <__aeabi_i2d>
 8009022:	a379      	add	r3, pc, #484	; (adr r3, 8009208 <_dtoa_r+0x310>)
 8009024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009028:	f7f7 fac2 	bl	80005b0 <__aeabi_dmul>
 800902c:	4602      	mov	r2, r0
 800902e:	460b      	mov	r3, r1
 8009030:	4630      	mov	r0, r6
 8009032:	4639      	mov	r1, r7
 8009034:	f7f7 f906 	bl	8000244 <__adddf3>
 8009038:	4606      	mov	r6, r0
 800903a:	460f      	mov	r7, r1
 800903c:	f7f7 fd68 	bl	8000b10 <__aeabi_d2iz>
 8009040:	2200      	movs	r2, #0
 8009042:	4682      	mov	sl, r0
 8009044:	2300      	movs	r3, #0
 8009046:	4630      	mov	r0, r6
 8009048:	4639      	mov	r1, r7
 800904a:	f7f7 fd23 	bl	8000a94 <__aeabi_dcmplt>
 800904e:	b148      	cbz	r0, 8009064 <_dtoa_r+0x16c>
 8009050:	4650      	mov	r0, sl
 8009052:	f7f7 fa43 	bl	80004dc <__aeabi_i2d>
 8009056:	4632      	mov	r2, r6
 8009058:	463b      	mov	r3, r7
 800905a:	f7f7 fd11 	bl	8000a80 <__aeabi_dcmpeq>
 800905e:	b908      	cbnz	r0, 8009064 <_dtoa_r+0x16c>
 8009060:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009064:	f1ba 0f16 	cmp.w	sl, #22
 8009068:	d85a      	bhi.n	8009120 <_dtoa_r+0x228>
 800906a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800906e:	496d      	ldr	r1, [pc, #436]	; (8009224 <_dtoa_r+0x32c>)
 8009070:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009074:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009078:	f7f7 fd2a 	bl	8000ad0 <__aeabi_dcmpgt>
 800907c:	2800      	cmp	r0, #0
 800907e:	d051      	beq.n	8009124 <_dtoa_r+0x22c>
 8009080:	2300      	movs	r3, #0
 8009082:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009086:	930d      	str	r3, [sp, #52]	; 0x34
 8009088:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800908a:	1b5d      	subs	r5, r3, r5
 800908c:	1e6b      	subs	r3, r5, #1
 800908e:	9307      	str	r3, [sp, #28]
 8009090:	bf43      	ittte	mi
 8009092:	2300      	movmi	r3, #0
 8009094:	f1c5 0901 	rsbmi	r9, r5, #1
 8009098:	9307      	strmi	r3, [sp, #28]
 800909a:	f04f 0900 	movpl.w	r9, #0
 800909e:	f1ba 0f00 	cmp.w	sl, #0
 80090a2:	db41      	blt.n	8009128 <_dtoa_r+0x230>
 80090a4:	9b07      	ldr	r3, [sp, #28]
 80090a6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80090aa:	4453      	add	r3, sl
 80090ac:	9307      	str	r3, [sp, #28]
 80090ae:	2300      	movs	r3, #0
 80090b0:	9308      	str	r3, [sp, #32]
 80090b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80090b4:	2b09      	cmp	r3, #9
 80090b6:	f200 808f 	bhi.w	80091d8 <_dtoa_r+0x2e0>
 80090ba:	2b05      	cmp	r3, #5
 80090bc:	bfc4      	itt	gt
 80090be:	3b04      	subgt	r3, #4
 80090c0:	931e      	strgt	r3, [sp, #120]	; 0x78
 80090c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80090c4:	bfc8      	it	gt
 80090c6:	2500      	movgt	r5, #0
 80090c8:	f1a3 0302 	sub.w	r3, r3, #2
 80090cc:	bfd8      	it	le
 80090ce:	2501      	movle	r5, #1
 80090d0:	2b03      	cmp	r3, #3
 80090d2:	f200 808d 	bhi.w	80091f0 <_dtoa_r+0x2f8>
 80090d6:	e8df f003 	tbb	[pc, r3]
 80090da:	7d7b      	.short	0x7d7b
 80090dc:	6f2f      	.short	0x6f2f
 80090de:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80090e2:	441d      	add	r5, r3
 80090e4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80090e8:	2820      	cmp	r0, #32
 80090ea:	dd13      	ble.n	8009114 <_dtoa_r+0x21c>
 80090ec:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80090f0:	9b02      	ldr	r3, [sp, #8]
 80090f2:	fa08 f800 	lsl.w	r8, r8, r0
 80090f6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80090fa:	fa23 f000 	lsr.w	r0, r3, r0
 80090fe:	ea48 0000 	orr.w	r0, r8, r0
 8009102:	f7f7 f9db 	bl	80004bc <__aeabi_ui2d>
 8009106:	2301      	movs	r3, #1
 8009108:	4680      	mov	r8, r0
 800910a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800910e:	3d01      	subs	r5, #1
 8009110:	9310      	str	r3, [sp, #64]	; 0x40
 8009112:	e771      	b.n	8008ff8 <_dtoa_r+0x100>
 8009114:	9b02      	ldr	r3, [sp, #8]
 8009116:	f1c0 0020 	rsb	r0, r0, #32
 800911a:	fa03 f000 	lsl.w	r0, r3, r0
 800911e:	e7f0      	b.n	8009102 <_dtoa_r+0x20a>
 8009120:	2301      	movs	r3, #1
 8009122:	e7b0      	b.n	8009086 <_dtoa_r+0x18e>
 8009124:	900d      	str	r0, [sp, #52]	; 0x34
 8009126:	e7af      	b.n	8009088 <_dtoa_r+0x190>
 8009128:	f1ca 0300 	rsb	r3, sl, #0
 800912c:	9308      	str	r3, [sp, #32]
 800912e:	2300      	movs	r3, #0
 8009130:	eba9 090a 	sub.w	r9, r9, sl
 8009134:	930c      	str	r3, [sp, #48]	; 0x30
 8009136:	e7bc      	b.n	80090b2 <_dtoa_r+0x1ba>
 8009138:	2301      	movs	r3, #1
 800913a:	9309      	str	r3, [sp, #36]	; 0x24
 800913c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800913e:	2b00      	cmp	r3, #0
 8009140:	dd74      	ble.n	800922c <_dtoa_r+0x334>
 8009142:	4698      	mov	r8, r3
 8009144:	9304      	str	r3, [sp, #16]
 8009146:	2200      	movs	r2, #0
 8009148:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800914a:	6072      	str	r2, [r6, #4]
 800914c:	2204      	movs	r2, #4
 800914e:	f102 0014 	add.w	r0, r2, #20
 8009152:	4298      	cmp	r0, r3
 8009154:	6871      	ldr	r1, [r6, #4]
 8009156:	d96e      	bls.n	8009236 <_dtoa_r+0x33e>
 8009158:	4620      	mov	r0, r4
 800915a:	f000 fcaa 	bl	8009ab2 <_Balloc>
 800915e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009160:	6030      	str	r0, [r6, #0]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f1b8 0f0e 	cmp.w	r8, #14
 8009168:	9306      	str	r3, [sp, #24]
 800916a:	f200 80ed 	bhi.w	8009348 <_dtoa_r+0x450>
 800916e:	2d00      	cmp	r5, #0
 8009170:	f000 80ea 	beq.w	8009348 <_dtoa_r+0x450>
 8009174:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009178:	f1ba 0f00 	cmp.w	sl, #0
 800917c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009180:	dd77      	ble.n	8009272 <_dtoa_r+0x37a>
 8009182:	4a28      	ldr	r2, [pc, #160]	; (8009224 <_dtoa_r+0x32c>)
 8009184:	f00a 030f 	and.w	r3, sl, #15
 8009188:	ea4f 162a 	mov.w	r6, sl, asr #4
 800918c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009190:	06f0      	lsls	r0, r6, #27
 8009192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009196:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800919a:	d568      	bpl.n	800926e <_dtoa_r+0x376>
 800919c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80091a0:	4b21      	ldr	r3, [pc, #132]	; (8009228 <_dtoa_r+0x330>)
 80091a2:	2503      	movs	r5, #3
 80091a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80091a8:	f7f7 fb2c 	bl	8000804 <__aeabi_ddiv>
 80091ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091b0:	f006 060f 	and.w	r6, r6, #15
 80091b4:	4f1c      	ldr	r7, [pc, #112]	; (8009228 <_dtoa_r+0x330>)
 80091b6:	e04f      	b.n	8009258 <_dtoa_r+0x360>
 80091b8:	2301      	movs	r3, #1
 80091ba:	9309      	str	r3, [sp, #36]	; 0x24
 80091bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80091be:	4453      	add	r3, sl
 80091c0:	f103 0801 	add.w	r8, r3, #1
 80091c4:	9304      	str	r3, [sp, #16]
 80091c6:	4643      	mov	r3, r8
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	bfb8      	it	lt
 80091cc:	2301      	movlt	r3, #1
 80091ce:	e7ba      	b.n	8009146 <_dtoa_r+0x24e>
 80091d0:	2300      	movs	r3, #0
 80091d2:	e7b2      	b.n	800913a <_dtoa_r+0x242>
 80091d4:	2300      	movs	r3, #0
 80091d6:	e7f0      	b.n	80091ba <_dtoa_r+0x2c2>
 80091d8:	2501      	movs	r5, #1
 80091da:	2300      	movs	r3, #0
 80091dc:	9509      	str	r5, [sp, #36]	; 0x24
 80091de:	931e      	str	r3, [sp, #120]	; 0x78
 80091e0:	f04f 33ff 	mov.w	r3, #4294967295
 80091e4:	2200      	movs	r2, #0
 80091e6:	9304      	str	r3, [sp, #16]
 80091e8:	4698      	mov	r8, r3
 80091ea:	2312      	movs	r3, #18
 80091ec:	921f      	str	r2, [sp, #124]	; 0x7c
 80091ee:	e7aa      	b.n	8009146 <_dtoa_r+0x24e>
 80091f0:	2301      	movs	r3, #1
 80091f2:	9309      	str	r3, [sp, #36]	; 0x24
 80091f4:	e7f4      	b.n	80091e0 <_dtoa_r+0x2e8>
 80091f6:	bf00      	nop
 80091f8:	636f4361 	.word	0x636f4361
 80091fc:	3fd287a7 	.word	0x3fd287a7
 8009200:	8b60c8b3 	.word	0x8b60c8b3
 8009204:	3fc68a28 	.word	0x3fc68a28
 8009208:	509f79fb 	.word	0x509f79fb
 800920c:	3fd34413 	.word	0x3fd34413
 8009210:	7ff00000 	.word	0x7ff00000
 8009214:	0800a4d5 	.word	0x0800a4d5
 8009218:	0800a4cc 	.word	0x0800a4cc
 800921c:	0800a4a9 	.word	0x0800a4a9
 8009220:	3ff80000 	.word	0x3ff80000
 8009224:	0800a508 	.word	0x0800a508
 8009228:	0800a4e0 	.word	0x0800a4e0
 800922c:	2301      	movs	r3, #1
 800922e:	9304      	str	r3, [sp, #16]
 8009230:	4698      	mov	r8, r3
 8009232:	461a      	mov	r2, r3
 8009234:	e7da      	b.n	80091ec <_dtoa_r+0x2f4>
 8009236:	3101      	adds	r1, #1
 8009238:	6071      	str	r1, [r6, #4]
 800923a:	0052      	lsls	r2, r2, #1
 800923c:	e787      	b.n	800914e <_dtoa_r+0x256>
 800923e:	07f1      	lsls	r1, r6, #31
 8009240:	d508      	bpl.n	8009254 <_dtoa_r+0x35c>
 8009242:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009246:	e9d7 2300 	ldrd	r2, r3, [r7]
 800924a:	f7f7 f9b1 	bl	80005b0 <__aeabi_dmul>
 800924e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009252:	3501      	adds	r5, #1
 8009254:	1076      	asrs	r6, r6, #1
 8009256:	3708      	adds	r7, #8
 8009258:	2e00      	cmp	r6, #0
 800925a:	d1f0      	bne.n	800923e <_dtoa_r+0x346>
 800925c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009260:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009264:	f7f7 face 	bl	8000804 <__aeabi_ddiv>
 8009268:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800926c:	e01b      	b.n	80092a6 <_dtoa_r+0x3ae>
 800926e:	2502      	movs	r5, #2
 8009270:	e7a0      	b.n	80091b4 <_dtoa_r+0x2bc>
 8009272:	f000 80a4 	beq.w	80093be <_dtoa_r+0x4c6>
 8009276:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800927a:	f1ca 0600 	rsb	r6, sl, #0
 800927e:	4ba0      	ldr	r3, [pc, #640]	; (8009500 <_dtoa_r+0x608>)
 8009280:	f006 020f 	and.w	r2, r6, #15
 8009284:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928c:	f7f7 f990 	bl	80005b0 <__aeabi_dmul>
 8009290:	2502      	movs	r5, #2
 8009292:	2300      	movs	r3, #0
 8009294:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009298:	4f9a      	ldr	r7, [pc, #616]	; (8009504 <_dtoa_r+0x60c>)
 800929a:	1136      	asrs	r6, r6, #4
 800929c:	2e00      	cmp	r6, #0
 800929e:	f040 8083 	bne.w	80093a8 <_dtoa_r+0x4b0>
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d1e0      	bne.n	8009268 <_dtoa_r+0x370>
 80092a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f000 808a 	beq.w	80093c2 <_dtoa_r+0x4ca>
 80092ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092b2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80092b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80092ba:	2200      	movs	r2, #0
 80092bc:	4b92      	ldr	r3, [pc, #584]	; (8009508 <_dtoa_r+0x610>)
 80092be:	f7f7 fbe9 	bl	8000a94 <__aeabi_dcmplt>
 80092c2:	2800      	cmp	r0, #0
 80092c4:	d07d      	beq.n	80093c2 <_dtoa_r+0x4ca>
 80092c6:	f1b8 0f00 	cmp.w	r8, #0
 80092ca:	d07a      	beq.n	80093c2 <_dtoa_r+0x4ca>
 80092cc:	9b04      	ldr	r3, [sp, #16]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	dd36      	ble.n	8009340 <_dtoa_r+0x448>
 80092d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80092d6:	2200      	movs	r2, #0
 80092d8:	4b8c      	ldr	r3, [pc, #560]	; (800950c <_dtoa_r+0x614>)
 80092da:	f7f7 f969 	bl	80005b0 <__aeabi_dmul>
 80092de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092e2:	9e04      	ldr	r6, [sp, #16]
 80092e4:	f10a 37ff 	add.w	r7, sl, #4294967295
 80092e8:	3501      	adds	r5, #1
 80092ea:	4628      	mov	r0, r5
 80092ec:	f7f7 f8f6 	bl	80004dc <__aeabi_i2d>
 80092f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092f4:	f7f7 f95c 	bl	80005b0 <__aeabi_dmul>
 80092f8:	2200      	movs	r2, #0
 80092fa:	4b85      	ldr	r3, [pc, #532]	; (8009510 <_dtoa_r+0x618>)
 80092fc:	f7f6 ffa2 	bl	8000244 <__adddf3>
 8009300:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8009304:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009308:	950b      	str	r5, [sp, #44]	; 0x2c
 800930a:	2e00      	cmp	r6, #0
 800930c:	d15c      	bne.n	80093c8 <_dtoa_r+0x4d0>
 800930e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009312:	2200      	movs	r2, #0
 8009314:	4b7f      	ldr	r3, [pc, #508]	; (8009514 <_dtoa_r+0x61c>)
 8009316:	f7f6 ff93 	bl	8000240 <__aeabi_dsub>
 800931a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800931c:	462b      	mov	r3, r5
 800931e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009322:	f7f7 fbd5 	bl	8000ad0 <__aeabi_dcmpgt>
 8009326:	2800      	cmp	r0, #0
 8009328:	f040 8281 	bne.w	800982e <_dtoa_r+0x936>
 800932c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009330:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009332:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009336:	f7f7 fbad 	bl	8000a94 <__aeabi_dcmplt>
 800933a:	2800      	cmp	r0, #0
 800933c:	f040 8275 	bne.w	800982a <_dtoa_r+0x932>
 8009340:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009344:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009348:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800934a:	2b00      	cmp	r3, #0
 800934c:	f2c0 814b 	blt.w	80095e6 <_dtoa_r+0x6ee>
 8009350:	f1ba 0f0e 	cmp.w	sl, #14
 8009354:	f300 8147 	bgt.w	80095e6 <_dtoa_r+0x6ee>
 8009358:	4b69      	ldr	r3, [pc, #420]	; (8009500 <_dtoa_r+0x608>)
 800935a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800935e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009362:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009366:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009368:	2b00      	cmp	r3, #0
 800936a:	f280 80d7 	bge.w	800951c <_dtoa_r+0x624>
 800936e:	f1b8 0f00 	cmp.w	r8, #0
 8009372:	f300 80d3 	bgt.w	800951c <_dtoa_r+0x624>
 8009376:	f040 8257 	bne.w	8009828 <_dtoa_r+0x930>
 800937a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800937e:	2200      	movs	r2, #0
 8009380:	4b64      	ldr	r3, [pc, #400]	; (8009514 <_dtoa_r+0x61c>)
 8009382:	f7f7 f915 	bl	80005b0 <__aeabi_dmul>
 8009386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800938a:	f7f7 fb97 	bl	8000abc <__aeabi_dcmpge>
 800938e:	4646      	mov	r6, r8
 8009390:	4647      	mov	r7, r8
 8009392:	2800      	cmp	r0, #0
 8009394:	f040 822d 	bne.w	80097f2 <_dtoa_r+0x8fa>
 8009398:	9b06      	ldr	r3, [sp, #24]
 800939a:	9a06      	ldr	r2, [sp, #24]
 800939c:	1c5d      	adds	r5, r3, #1
 800939e:	2331      	movs	r3, #49	; 0x31
 80093a0:	f10a 0a01 	add.w	sl, sl, #1
 80093a4:	7013      	strb	r3, [r2, #0]
 80093a6:	e228      	b.n	80097fa <_dtoa_r+0x902>
 80093a8:	07f2      	lsls	r2, r6, #31
 80093aa:	d505      	bpl.n	80093b8 <_dtoa_r+0x4c0>
 80093ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093b0:	f7f7 f8fe 	bl	80005b0 <__aeabi_dmul>
 80093b4:	2301      	movs	r3, #1
 80093b6:	3501      	adds	r5, #1
 80093b8:	1076      	asrs	r6, r6, #1
 80093ba:	3708      	adds	r7, #8
 80093bc:	e76e      	b.n	800929c <_dtoa_r+0x3a4>
 80093be:	2502      	movs	r5, #2
 80093c0:	e771      	b.n	80092a6 <_dtoa_r+0x3ae>
 80093c2:	4657      	mov	r7, sl
 80093c4:	4646      	mov	r6, r8
 80093c6:	e790      	b.n	80092ea <_dtoa_r+0x3f2>
 80093c8:	4b4d      	ldr	r3, [pc, #308]	; (8009500 <_dtoa_r+0x608>)
 80093ca:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80093ce:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80093d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d048      	beq.n	800946a <_dtoa_r+0x572>
 80093d8:	4602      	mov	r2, r0
 80093da:	460b      	mov	r3, r1
 80093dc:	2000      	movs	r0, #0
 80093de:	494e      	ldr	r1, [pc, #312]	; (8009518 <_dtoa_r+0x620>)
 80093e0:	f7f7 fa10 	bl	8000804 <__aeabi_ddiv>
 80093e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80093e8:	f7f6 ff2a 	bl	8000240 <__aeabi_dsub>
 80093ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80093f0:	9d06      	ldr	r5, [sp, #24]
 80093f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093f6:	f7f7 fb8b 	bl	8000b10 <__aeabi_d2iz>
 80093fa:	9011      	str	r0, [sp, #68]	; 0x44
 80093fc:	f7f7 f86e 	bl	80004dc <__aeabi_i2d>
 8009400:	4602      	mov	r2, r0
 8009402:	460b      	mov	r3, r1
 8009404:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009408:	f7f6 ff1a 	bl	8000240 <__aeabi_dsub>
 800940c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800940e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009412:	3330      	adds	r3, #48	; 0x30
 8009414:	f805 3b01 	strb.w	r3, [r5], #1
 8009418:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800941c:	f7f7 fb3a 	bl	8000a94 <__aeabi_dcmplt>
 8009420:	2800      	cmp	r0, #0
 8009422:	d163      	bne.n	80094ec <_dtoa_r+0x5f4>
 8009424:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009428:	2000      	movs	r0, #0
 800942a:	4937      	ldr	r1, [pc, #220]	; (8009508 <_dtoa_r+0x610>)
 800942c:	f7f6 ff08 	bl	8000240 <__aeabi_dsub>
 8009430:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009434:	f7f7 fb2e 	bl	8000a94 <__aeabi_dcmplt>
 8009438:	2800      	cmp	r0, #0
 800943a:	f040 80b5 	bne.w	80095a8 <_dtoa_r+0x6b0>
 800943e:	9b06      	ldr	r3, [sp, #24]
 8009440:	1aeb      	subs	r3, r5, r3
 8009442:	429e      	cmp	r6, r3
 8009444:	f77f af7c 	ble.w	8009340 <_dtoa_r+0x448>
 8009448:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800944c:	2200      	movs	r2, #0
 800944e:	4b2f      	ldr	r3, [pc, #188]	; (800950c <_dtoa_r+0x614>)
 8009450:	f7f7 f8ae 	bl	80005b0 <__aeabi_dmul>
 8009454:	2200      	movs	r2, #0
 8009456:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800945a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800945e:	4b2b      	ldr	r3, [pc, #172]	; (800950c <_dtoa_r+0x614>)
 8009460:	f7f7 f8a6 	bl	80005b0 <__aeabi_dmul>
 8009464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009468:	e7c3      	b.n	80093f2 <_dtoa_r+0x4fa>
 800946a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800946e:	f7f7 f89f 	bl	80005b0 <__aeabi_dmul>
 8009472:	9b06      	ldr	r3, [sp, #24]
 8009474:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009478:	199d      	adds	r5, r3, r6
 800947a:	461e      	mov	r6, r3
 800947c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009480:	f7f7 fb46 	bl	8000b10 <__aeabi_d2iz>
 8009484:	9011      	str	r0, [sp, #68]	; 0x44
 8009486:	f7f7 f829 	bl	80004dc <__aeabi_i2d>
 800948a:	4602      	mov	r2, r0
 800948c:	460b      	mov	r3, r1
 800948e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009492:	f7f6 fed5 	bl	8000240 <__aeabi_dsub>
 8009496:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009498:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800949c:	3330      	adds	r3, #48	; 0x30
 800949e:	f806 3b01 	strb.w	r3, [r6], #1
 80094a2:	42ae      	cmp	r6, r5
 80094a4:	f04f 0200 	mov.w	r2, #0
 80094a8:	d124      	bne.n	80094f4 <_dtoa_r+0x5fc>
 80094aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80094ae:	4b1a      	ldr	r3, [pc, #104]	; (8009518 <_dtoa_r+0x620>)
 80094b0:	f7f6 fec8 	bl	8000244 <__adddf3>
 80094b4:	4602      	mov	r2, r0
 80094b6:	460b      	mov	r3, r1
 80094b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094bc:	f7f7 fb08 	bl	8000ad0 <__aeabi_dcmpgt>
 80094c0:	2800      	cmp	r0, #0
 80094c2:	d171      	bne.n	80095a8 <_dtoa_r+0x6b0>
 80094c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80094c8:	2000      	movs	r0, #0
 80094ca:	4913      	ldr	r1, [pc, #76]	; (8009518 <_dtoa_r+0x620>)
 80094cc:	f7f6 feb8 	bl	8000240 <__aeabi_dsub>
 80094d0:	4602      	mov	r2, r0
 80094d2:	460b      	mov	r3, r1
 80094d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094d8:	f7f7 fadc 	bl	8000a94 <__aeabi_dcmplt>
 80094dc:	2800      	cmp	r0, #0
 80094de:	f43f af2f 	beq.w	8009340 <_dtoa_r+0x448>
 80094e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80094e6:	1e6a      	subs	r2, r5, #1
 80094e8:	2b30      	cmp	r3, #48	; 0x30
 80094ea:	d001      	beq.n	80094f0 <_dtoa_r+0x5f8>
 80094ec:	46ba      	mov	sl, r7
 80094ee:	e04a      	b.n	8009586 <_dtoa_r+0x68e>
 80094f0:	4615      	mov	r5, r2
 80094f2:	e7f6      	b.n	80094e2 <_dtoa_r+0x5ea>
 80094f4:	4b05      	ldr	r3, [pc, #20]	; (800950c <_dtoa_r+0x614>)
 80094f6:	f7f7 f85b 	bl	80005b0 <__aeabi_dmul>
 80094fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094fe:	e7bd      	b.n	800947c <_dtoa_r+0x584>
 8009500:	0800a508 	.word	0x0800a508
 8009504:	0800a4e0 	.word	0x0800a4e0
 8009508:	3ff00000 	.word	0x3ff00000
 800950c:	40240000 	.word	0x40240000
 8009510:	401c0000 	.word	0x401c0000
 8009514:	40140000 	.word	0x40140000
 8009518:	3fe00000 	.word	0x3fe00000
 800951c:	9d06      	ldr	r5, [sp, #24]
 800951e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009522:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009526:	4630      	mov	r0, r6
 8009528:	4639      	mov	r1, r7
 800952a:	f7f7 f96b 	bl	8000804 <__aeabi_ddiv>
 800952e:	f7f7 faef 	bl	8000b10 <__aeabi_d2iz>
 8009532:	4681      	mov	r9, r0
 8009534:	f7f6 ffd2 	bl	80004dc <__aeabi_i2d>
 8009538:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800953c:	f7f7 f838 	bl	80005b0 <__aeabi_dmul>
 8009540:	4602      	mov	r2, r0
 8009542:	460b      	mov	r3, r1
 8009544:	4630      	mov	r0, r6
 8009546:	4639      	mov	r1, r7
 8009548:	f7f6 fe7a 	bl	8000240 <__aeabi_dsub>
 800954c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8009550:	f805 6b01 	strb.w	r6, [r5], #1
 8009554:	9e06      	ldr	r6, [sp, #24]
 8009556:	4602      	mov	r2, r0
 8009558:	1bae      	subs	r6, r5, r6
 800955a:	45b0      	cmp	r8, r6
 800955c:	460b      	mov	r3, r1
 800955e:	d135      	bne.n	80095cc <_dtoa_r+0x6d4>
 8009560:	f7f6 fe70 	bl	8000244 <__adddf3>
 8009564:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009568:	4606      	mov	r6, r0
 800956a:	460f      	mov	r7, r1
 800956c:	f7f7 fab0 	bl	8000ad0 <__aeabi_dcmpgt>
 8009570:	b9c8      	cbnz	r0, 80095a6 <_dtoa_r+0x6ae>
 8009572:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009576:	4630      	mov	r0, r6
 8009578:	4639      	mov	r1, r7
 800957a:	f7f7 fa81 	bl	8000a80 <__aeabi_dcmpeq>
 800957e:	b110      	cbz	r0, 8009586 <_dtoa_r+0x68e>
 8009580:	f019 0f01 	tst.w	r9, #1
 8009584:	d10f      	bne.n	80095a6 <_dtoa_r+0x6ae>
 8009586:	4659      	mov	r1, fp
 8009588:	4620      	mov	r0, r4
 800958a:	f000 fac6 	bl	8009b1a <_Bfree>
 800958e:	2300      	movs	r3, #0
 8009590:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009592:	702b      	strb	r3, [r5, #0]
 8009594:	f10a 0301 	add.w	r3, sl, #1
 8009598:	6013      	str	r3, [r2, #0]
 800959a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800959c:	2b00      	cmp	r3, #0
 800959e:	f43f acf3 	beq.w	8008f88 <_dtoa_r+0x90>
 80095a2:	601d      	str	r5, [r3, #0]
 80095a4:	e4f0      	b.n	8008f88 <_dtoa_r+0x90>
 80095a6:	4657      	mov	r7, sl
 80095a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80095ac:	1e6b      	subs	r3, r5, #1
 80095ae:	2a39      	cmp	r2, #57	; 0x39
 80095b0:	d106      	bne.n	80095c0 <_dtoa_r+0x6c8>
 80095b2:	9a06      	ldr	r2, [sp, #24]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d107      	bne.n	80095c8 <_dtoa_r+0x6d0>
 80095b8:	2330      	movs	r3, #48	; 0x30
 80095ba:	7013      	strb	r3, [r2, #0]
 80095bc:	4613      	mov	r3, r2
 80095be:	3701      	adds	r7, #1
 80095c0:	781a      	ldrb	r2, [r3, #0]
 80095c2:	3201      	adds	r2, #1
 80095c4:	701a      	strb	r2, [r3, #0]
 80095c6:	e791      	b.n	80094ec <_dtoa_r+0x5f4>
 80095c8:	461d      	mov	r5, r3
 80095ca:	e7ed      	b.n	80095a8 <_dtoa_r+0x6b0>
 80095cc:	2200      	movs	r2, #0
 80095ce:	4b99      	ldr	r3, [pc, #612]	; (8009834 <_dtoa_r+0x93c>)
 80095d0:	f7f6 ffee 	bl	80005b0 <__aeabi_dmul>
 80095d4:	2200      	movs	r2, #0
 80095d6:	2300      	movs	r3, #0
 80095d8:	4606      	mov	r6, r0
 80095da:	460f      	mov	r7, r1
 80095dc:	f7f7 fa50 	bl	8000a80 <__aeabi_dcmpeq>
 80095e0:	2800      	cmp	r0, #0
 80095e2:	d09e      	beq.n	8009522 <_dtoa_r+0x62a>
 80095e4:	e7cf      	b.n	8009586 <_dtoa_r+0x68e>
 80095e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095e8:	2a00      	cmp	r2, #0
 80095ea:	f000 8088 	beq.w	80096fe <_dtoa_r+0x806>
 80095ee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80095f0:	2a01      	cmp	r2, #1
 80095f2:	dc6d      	bgt.n	80096d0 <_dtoa_r+0x7d8>
 80095f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80095f6:	2a00      	cmp	r2, #0
 80095f8:	d066      	beq.n	80096c8 <_dtoa_r+0x7d0>
 80095fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80095fe:	464d      	mov	r5, r9
 8009600:	9e08      	ldr	r6, [sp, #32]
 8009602:	9a07      	ldr	r2, [sp, #28]
 8009604:	2101      	movs	r1, #1
 8009606:	441a      	add	r2, r3
 8009608:	4620      	mov	r0, r4
 800960a:	4499      	add	r9, r3
 800960c:	9207      	str	r2, [sp, #28]
 800960e:	f000 fb24 	bl	8009c5a <__i2b>
 8009612:	4607      	mov	r7, r0
 8009614:	2d00      	cmp	r5, #0
 8009616:	dd0b      	ble.n	8009630 <_dtoa_r+0x738>
 8009618:	9b07      	ldr	r3, [sp, #28]
 800961a:	2b00      	cmp	r3, #0
 800961c:	dd08      	ble.n	8009630 <_dtoa_r+0x738>
 800961e:	42ab      	cmp	r3, r5
 8009620:	bfa8      	it	ge
 8009622:	462b      	movge	r3, r5
 8009624:	9a07      	ldr	r2, [sp, #28]
 8009626:	eba9 0903 	sub.w	r9, r9, r3
 800962a:	1aed      	subs	r5, r5, r3
 800962c:	1ad3      	subs	r3, r2, r3
 800962e:	9307      	str	r3, [sp, #28]
 8009630:	9b08      	ldr	r3, [sp, #32]
 8009632:	b1eb      	cbz	r3, 8009670 <_dtoa_r+0x778>
 8009634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009636:	2b00      	cmp	r3, #0
 8009638:	d065      	beq.n	8009706 <_dtoa_r+0x80e>
 800963a:	b18e      	cbz	r6, 8009660 <_dtoa_r+0x768>
 800963c:	4639      	mov	r1, r7
 800963e:	4632      	mov	r2, r6
 8009640:	4620      	mov	r0, r4
 8009642:	f000 fba9 	bl	8009d98 <__pow5mult>
 8009646:	465a      	mov	r2, fp
 8009648:	4601      	mov	r1, r0
 800964a:	4607      	mov	r7, r0
 800964c:	4620      	mov	r0, r4
 800964e:	f000 fb0d 	bl	8009c6c <__multiply>
 8009652:	4659      	mov	r1, fp
 8009654:	900a      	str	r0, [sp, #40]	; 0x28
 8009656:	4620      	mov	r0, r4
 8009658:	f000 fa5f 	bl	8009b1a <_Bfree>
 800965c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800965e:	469b      	mov	fp, r3
 8009660:	9b08      	ldr	r3, [sp, #32]
 8009662:	1b9a      	subs	r2, r3, r6
 8009664:	d004      	beq.n	8009670 <_dtoa_r+0x778>
 8009666:	4659      	mov	r1, fp
 8009668:	4620      	mov	r0, r4
 800966a:	f000 fb95 	bl	8009d98 <__pow5mult>
 800966e:	4683      	mov	fp, r0
 8009670:	2101      	movs	r1, #1
 8009672:	4620      	mov	r0, r4
 8009674:	f000 faf1 	bl	8009c5a <__i2b>
 8009678:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800967a:	4606      	mov	r6, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	f000 81c6 	beq.w	8009a0e <_dtoa_r+0xb16>
 8009682:	461a      	mov	r2, r3
 8009684:	4601      	mov	r1, r0
 8009686:	4620      	mov	r0, r4
 8009688:	f000 fb86 	bl	8009d98 <__pow5mult>
 800968c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800968e:	4606      	mov	r6, r0
 8009690:	2b01      	cmp	r3, #1
 8009692:	dc3e      	bgt.n	8009712 <_dtoa_r+0x81a>
 8009694:	9b02      	ldr	r3, [sp, #8]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d137      	bne.n	800970a <_dtoa_r+0x812>
 800969a:	9b03      	ldr	r3, [sp, #12]
 800969c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d134      	bne.n	800970e <_dtoa_r+0x816>
 80096a4:	9b03      	ldr	r3, [sp, #12]
 80096a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096aa:	0d1b      	lsrs	r3, r3, #20
 80096ac:	051b      	lsls	r3, r3, #20
 80096ae:	b12b      	cbz	r3, 80096bc <_dtoa_r+0x7c4>
 80096b0:	9b07      	ldr	r3, [sp, #28]
 80096b2:	f109 0901 	add.w	r9, r9, #1
 80096b6:	3301      	adds	r3, #1
 80096b8:	9307      	str	r3, [sp, #28]
 80096ba:	2301      	movs	r3, #1
 80096bc:	9308      	str	r3, [sp, #32]
 80096be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d128      	bne.n	8009716 <_dtoa_r+0x81e>
 80096c4:	2001      	movs	r0, #1
 80096c6:	e02e      	b.n	8009726 <_dtoa_r+0x82e>
 80096c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80096ca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80096ce:	e796      	b.n	80095fe <_dtoa_r+0x706>
 80096d0:	9b08      	ldr	r3, [sp, #32]
 80096d2:	f108 36ff 	add.w	r6, r8, #4294967295
 80096d6:	42b3      	cmp	r3, r6
 80096d8:	bfb7      	itett	lt
 80096da:	9b08      	ldrlt	r3, [sp, #32]
 80096dc:	1b9e      	subge	r6, r3, r6
 80096de:	1af2      	sublt	r2, r6, r3
 80096e0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80096e2:	bfbf      	itttt	lt
 80096e4:	9608      	strlt	r6, [sp, #32]
 80096e6:	189b      	addlt	r3, r3, r2
 80096e8:	930c      	strlt	r3, [sp, #48]	; 0x30
 80096ea:	2600      	movlt	r6, #0
 80096ec:	f1b8 0f00 	cmp.w	r8, #0
 80096f0:	bfb9      	ittee	lt
 80096f2:	eba9 0508 	sublt.w	r5, r9, r8
 80096f6:	2300      	movlt	r3, #0
 80096f8:	464d      	movge	r5, r9
 80096fa:	4643      	movge	r3, r8
 80096fc:	e781      	b.n	8009602 <_dtoa_r+0x70a>
 80096fe:	9e08      	ldr	r6, [sp, #32]
 8009700:	464d      	mov	r5, r9
 8009702:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009704:	e786      	b.n	8009614 <_dtoa_r+0x71c>
 8009706:	9a08      	ldr	r2, [sp, #32]
 8009708:	e7ad      	b.n	8009666 <_dtoa_r+0x76e>
 800970a:	2300      	movs	r3, #0
 800970c:	e7d6      	b.n	80096bc <_dtoa_r+0x7c4>
 800970e:	9b02      	ldr	r3, [sp, #8]
 8009710:	e7d4      	b.n	80096bc <_dtoa_r+0x7c4>
 8009712:	2300      	movs	r3, #0
 8009714:	9308      	str	r3, [sp, #32]
 8009716:	6933      	ldr	r3, [r6, #16]
 8009718:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800971c:	6918      	ldr	r0, [r3, #16]
 800971e:	f000 fa4e 	bl	8009bbe <__hi0bits>
 8009722:	f1c0 0020 	rsb	r0, r0, #32
 8009726:	9b07      	ldr	r3, [sp, #28]
 8009728:	4418      	add	r0, r3
 800972a:	f010 001f 	ands.w	r0, r0, #31
 800972e:	d047      	beq.n	80097c0 <_dtoa_r+0x8c8>
 8009730:	f1c0 0320 	rsb	r3, r0, #32
 8009734:	2b04      	cmp	r3, #4
 8009736:	dd3b      	ble.n	80097b0 <_dtoa_r+0x8b8>
 8009738:	9b07      	ldr	r3, [sp, #28]
 800973a:	f1c0 001c 	rsb	r0, r0, #28
 800973e:	4481      	add	r9, r0
 8009740:	4405      	add	r5, r0
 8009742:	4403      	add	r3, r0
 8009744:	9307      	str	r3, [sp, #28]
 8009746:	f1b9 0f00 	cmp.w	r9, #0
 800974a:	dd05      	ble.n	8009758 <_dtoa_r+0x860>
 800974c:	4659      	mov	r1, fp
 800974e:	464a      	mov	r2, r9
 8009750:	4620      	mov	r0, r4
 8009752:	f000 fb6f 	bl	8009e34 <__lshift>
 8009756:	4683      	mov	fp, r0
 8009758:	9b07      	ldr	r3, [sp, #28]
 800975a:	2b00      	cmp	r3, #0
 800975c:	dd05      	ble.n	800976a <_dtoa_r+0x872>
 800975e:	4631      	mov	r1, r6
 8009760:	461a      	mov	r2, r3
 8009762:	4620      	mov	r0, r4
 8009764:	f000 fb66 	bl	8009e34 <__lshift>
 8009768:	4606      	mov	r6, r0
 800976a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800976c:	b353      	cbz	r3, 80097c4 <_dtoa_r+0x8cc>
 800976e:	4631      	mov	r1, r6
 8009770:	4658      	mov	r0, fp
 8009772:	f000 fbb3 	bl	8009edc <__mcmp>
 8009776:	2800      	cmp	r0, #0
 8009778:	da24      	bge.n	80097c4 <_dtoa_r+0x8cc>
 800977a:	2300      	movs	r3, #0
 800977c:	4659      	mov	r1, fp
 800977e:	220a      	movs	r2, #10
 8009780:	4620      	mov	r0, r4
 8009782:	f000 f9e1 	bl	8009b48 <__multadd>
 8009786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009788:	f10a 3aff 	add.w	sl, sl, #4294967295
 800978c:	4683      	mov	fp, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	f000 8144 	beq.w	8009a1c <_dtoa_r+0xb24>
 8009794:	2300      	movs	r3, #0
 8009796:	4639      	mov	r1, r7
 8009798:	220a      	movs	r2, #10
 800979a:	4620      	mov	r0, r4
 800979c:	f000 f9d4 	bl	8009b48 <__multadd>
 80097a0:	9b04      	ldr	r3, [sp, #16]
 80097a2:	4607      	mov	r7, r0
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	dc4d      	bgt.n	8009844 <_dtoa_r+0x94c>
 80097a8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	dd4a      	ble.n	8009844 <_dtoa_r+0x94c>
 80097ae:	e011      	b.n	80097d4 <_dtoa_r+0x8dc>
 80097b0:	d0c9      	beq.n	8009746 <_dtoa_r+0x84e>
 80097b2:	9a07      	ldr	r2, [sp, #28]
 80097b4:	331c      	adds	r3, #28
 80097b6:	441a      	add	r2, r3
 80097b8:	4499      	add	r9, r3
 80097ba:	441d      	add	r5, r3
 80097bc:	4613      	mov	r3, r2
 80097be:	e7c1      	b.n	8009744 <_dtoa_r+0x84c>
 80097c0:	4603      	mov	r3, r0
 80097c2:	e7f6      	b.n	80097b2 <_dtoa_r+0x8ba>
 80097c4:	f1b8 0f00 	cmp.w	r8, #0
 80097c8:	dc36      	bgt.n	8009838 <_dtoa_r+0x940>
 80097ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80097cc:	2b02      	cmp	r3, #2
 80097ce:	dd33      	ble.n	8009838 <_dtoa_r+0x940>
 80097d0:	f8cd 8010 	str.w	r8, [sp, #16]
 80097d4:	9b04      	ldr	r3, [sp, #16]
 80097d6:	b963      	cbnz	r3, 80097f2 <_dtoa_r+0x8fa>
 80097d8:	4631      	mov	r1, r6
 80097da:	2205      	movs	r2, #5
 80097dc:	4620      	mov	r0, r4
 80097de:	f000 f9b3 	bl	8009b48 <__multadd>
 80097e2:	4601      	mov	r1, r0
 80097e4:	4606      	mov	r6, r0
 80097e6:	4658      	mov	r0, fp
 80097e8:	f000 fb78 	bl	8009edc <__mcmp>
 80097ec:	2800      	cmp	r0, #0
 80097ee:	f73f add3 	bgt.w	8009398 <_dtoa_r+0x4a0>
 80097f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80097f4:	9d06      	ldr	r5, [sp, #24]
 80097f6:	ea6f 0a03 	mvn.w	sl, r3
 80097fa:	f04f 0900 	mov.w	r9, #0
 80097fe:	4631      	mov	r1, r6
 8009800:	4620      	mov	r0, r4
 8009802:	f000 f98a 	bl	8009b1a <_Bfree>
 8009806:	2f00      	cmp	r7, #0
 8009808:	f43f aebd 	beq.w	8009586 <_dtoa_r+0x68e>
 800980c:	f1b9 0f00 	cmp.w	r9, #0
 8009810:	d005      	beq.n	800981e <_dtoa_r+0x926>
 8009812:	45b9      	cmp	r9, r7
 8009814:	d003      	beq.n	800981e <_dtoa_r+0x926>
 8009816:	4649      	mov	r1, r9
 8009818:	4620      	mov	r0, r4
 800981a:	f000 f97e 	bl	8009b1a <_Bfree>
 800981e:	4639      	mov	r1, r7
 8009820:	4620      	mov	r0, r4
 8009822:	f000 f97a 	bl	8009b1a <_Bfree>
 8009826:	e6ae      	b.n	8009586 <_dtoa_r+0x68e>
 8009828:	2600      	movs	r6, #0
 800982a:	4637      	mov	r7, r6
 800982c:	e7e1      	b.n	80097f2 <_dtoa_r+0x8fa>
 800982e:	46ba      	mov	sl, r7
 8009830:	4637      	mov	r7, r6
 8009832:	e5b1      	b.n	8009398 <_dtoa_r+0x4a0>
 8009834:	40240000 	.word	0x40240000
 8009838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800983a:	f8cd 8010 	str.w	r8, [sp, #16]
 800983e:	2b00      	cmp	r3, #0
 8009840:	f000 80f3 	beq.w	8009a2a <_dtoa_r+0xb32>
 8009844:	2d00      	cmp	r5, #0
 8009846:	dd05      	ble.n	8009854 <_dtoa_r+0x95c>
 8009848:	4639      	mov	r1, r7
 800984a:	462a      	mov	r2, r5
 800984c:	4620      	mov	r0, r4
 800984e:	f000 faf1 	bl	8009e34 <__lshift>
 8009852:	4607      	mov	r7, r0
 8009854:	9b08      	ldr	r3, [sp, #32]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d04c      	beq.n	80098f4 <_dtoa_r+0x9fc>
 800985a:	6879      	ldr	r1, [r7, #4]
 800985c:	4620      	mov	r0, r4
 800985e:	f000 f928 	bl	8009ab2 <_Balloc>
 8009862:	4605      	mov	r5, r0
 8009864:	693a      	ldr	r2, [r7, #16]
 8009866:	f107 010c 	add.w	r1, r7, #12
 800986a:	3202      	adds	r2, #2
 800986c:	0092      	lsls	r2, r2, #2
 800986e:	300c      	adds	r0, #12
 8009870:	f000 f912 	bl	8009a98 <memcpy>
 8009874:	2201      	movs	r2, #1
 8009876:	4629      	mov	r1, r5
 8009878:	4620      	mov	r0, r4
 800987a:	f000 fadb 	bl	8009e34 <__lshift>
 800987e:	46b9      	mov	r9, r7
 8009880:	4607      	mov	r7, r0
 8009882:	9b06      	ldr	r3, [sp, #24]
 8009884:	9307      	str	r3, [sp, #28]
 8009886:	9b02      	ldr	r3, [sp, #8]
 8009888:	f003 0301 	and.w	r3, r3, #1
 800988c:	9308      	str	r3, [sp, #32]
 800988e:	4631      	mov	r1, r6
 8009890:	4658      	mov	r0, fp
 8009892:	f7ff faa1 	bl	8008dd8 <quorem>
 8009896:	4649      	mov	r1, r9
 8009898:	4605      	mov	r5, r0
 800989a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800989e:	4658      	mov	r0, fp
 80098a0:	f000 fb1c 	bl	8009edc <__mcmp>
 80098a4:	463a      	mov	r2, r7
 80098a6:	9002      	str	r0, [sp, #8]
 80098a8:	4631      	mov	r1, r6
 80098aa:	4620      	mov	r0, r4
 80098ac:	f000 fb30 	bl	8009f10 <__mdiff>
 80098b0:	68c3      	ldr	r3, [r0, #12]
 80098b2:	4602      	mov	r2, r0
 80098b4:	bb03      	cbnz	r3, 80098f8 <_dtoa_r+0xa00>
 80098b6:	4601      	mov	r1, r0
 80098b8:	9009      	str	r0, [sp, #36]	; 0x24
 80098ba:	4658      	mov	r0, fp
 80098bc:	f000 fb0e 	bl	8009edc <__mcmp>
 80098c0:	4603      	mov	r3, r0
 80098c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098c4:	4611      	mov	r1, r2
 80098c6:	4620      	mov	r0, r4
 80098c8:	9309      	str	r3, [sp, #36]	; 0x24
 80098ca:	f000 f926 	bl	8009b1a <_Bfree>
 80098ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098d0:	b9a3      	cbnz	r3, 80098fc <_dtoa_r+0xa04>
 80098d2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80098d4:	b992      	cbnz	r2, 80098fc <_dtoa_r+0xa04>
 80098d6:	9a08      	ldr	r2, [sp, #32]
 80098d8:	b982      	cbnz	r2, 80098fc <_dtoa_r+0xa04>
 80098da:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80098de:	d029      	beq.n	8009934 <_dtoa_r+0xa3c>
 80098e0:	9b02      	ldr	r3, [sp, #8]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	dd01      	ble.n	80098ea <_dtoa_r+0x9f2>
 80098e6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80098ea:	9b07      	ldr	r3, [sp, #28]
 80098ec:	1c5d      	adds	r5, r3, #1
 80098ee:	f883 8000 	strb.w	r8, [r3]
 80098f2:	e784      	b.n	80097fe <_dtoa_r+0x906>
 80098f4:	4638      	mov	r0, r7
 80098f6:	e7c2      	b.n	800987e <_dtoa_r+0x986>
 80098f8:	2301      	movs	r3, #1
 80098fa:	e7e3      	b.n	80098c4 <_dtoa_r+0x9cc>
 80098fc:	9a02      	ldr	r2, [sp, #8]
 80098fe:	2a00      	cmp	r2, #0
 8009900:	db04      	blt.n	800990c <_dtoa_r+0xa14>
 8009902:	d123      	bne.n	800994c <_dtoa_r+0xa54>
 8009904:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009906:	bb0a      	cbnz	r2, 800994c <_dtoa_r+0xa54>
 8009908:	9a08      	ldr	r2, [sp, #32]
 800990a:	b9fa      	cbnz	r2, 800994c <_dtoa_r+0xa54>
 800990c:	2b00      	cmp	r3, #0
 800990e:	ddec      	ble.n	80098ea <_dtoa_r+0x9f2>
 8009910:	4659      	mov	r1, fp
 8009912:	2201      	movs	r2, #1
 8009914:	4620      	mov	r0, r4
 8009916:	f000 fa8d 	bl	8009e34 <__lshift>
 800991a:	4631      	mov	r1, r6
 800991c:	4683      	mov	fp, r0
 800991e:	f000 fadd 	bl	8009edc <__mcmp>
 8009922:	2800      	cmp	r0, #0
 8009924:	dc03      	bgt.n	800992e <_dtoa_r+0xa36>
 8009926:	d1e0      	bne.n	80098ea <_dtoa_r+0x9f2>
 8009928:	f018 0f01 	tst.w	r8, #1
 800992c:	d0dd      	beq.n	80098ea <_dtoa_r+0x9f2>
 800992e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009932:	d1d8      	bne.n	80098e6 <_dtoa_r+0x9ee>
 8009934:	9b07      	ldr	r3, [sp, #28]
 8009936:	9a07      	ldr	r2, [sp, #28]
 8009938:	1c5d      	adds	r5, r3, #1
 800993a:	2339      	movs	r3, #57	; 0x39
 800993c:	7013      	strb	r3, [r2, #0]
 800993e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009942:	1e6a      	subs	r2, r5, #1
 8009944:	2b39      	cmp	r3, #57	; 0x39
 8009946:	d04d      	beq.n	80099e4 <_dtoa_r+0xaec>
 8009948:	3301      	adds	r3, #1
 800994a:	e052      	b.n	80099f2 <_dtoa_r+0xafa>
 800994c:	9a07      	ldr	r2, [sp, #28]
 800994e:	2b00      	cmp	r3, #0
 8009950:	f102 0501 	add.w	r5, r2, #1
 8009954:	dd06      	ble.n	8009964 <_dtoa_r+0xa6c>
 8009956:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800995a:	d0eb      	beq.n	8009934 <_dtoa_r+0xa3c>
 800995c:	f108 0801 	add.w	r8, r8, #1
 8009960:	9b07      	ldr	r3, [sp, #28]
 8009962:	e7c4      	b.n	80098ee <_dtoa_r+0x9f6>
 8009964:	9b06      	ldr	r3, [sp, #24]
 8009966:	9a04      	ldr	r2, [sp, #16]
 8009968:	1aeb      	subs	r3, r5, r3
 800996a:	4293      	cmp	r3, r2
 800996c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009970:	d021      	beq.n	80099b6 <_dtoa_r+0xabe>
 8009972:	4659      	mov	r1, fp
 8009974:	2300      	movs	r3, #0
 8009976:	220a      	movs	r2, #10
 8009978:	4620      	mov	r0, r4
 800997a:	f000 f8e5 	bl	8009b48 <__multadd>
 800997e:	45b9      	cmp	r9, r7
 8009980:	4683      	mov	fp, r0
 8009982:	f04f 0300 	mov.w	r3, #0
 8009986:	f04f 020a 	mov.w	r2, #10
 800998a:	4649      	mov	r1, r9
 800998c:	4620      	mov	r0, r4
 800998e:	d105      	bne.n	800999c <_dtoa_r+0xaa4>
 8009990:	f000 f8da 	bl	8009b48 <__multadd>
 8009994:	4681      	mov	r9, r0
 8009996:	4607      	mov	r7, r0
 8009998:	9507      	str	r5, [sp, #28]
 800999a:	e778      	b.n	800988e <_dtoa_r+0x996>
 800999c:	f000 f8d4 	bl	8009b48 <__multadd>
 80099a0:	4639      	mov	r1, r7
 80099a2:	4681      	mov	r9, r0
 80099a4:	2300      	movs	r3, #0
 80099a6:	220a      	movs	r2, #10
 80099a8:	4620      	mov	r0, r4
 80099aa:	f000 f8cd 	bl	8009b48 <__multadd>
 80099ae:	4607      	mov	r7, r0
 80099b0:	e7f2      	b.n	8009998 <_dtoa_r+0xaa0>
 80099b2:	f04f 0900 	mov.w	r9, #0
 80099b6:	4659      	mov	r1, fp
 80099b8:	2201      	movs	r2, #1
 80099ba:	4620      	mov	r0, r4
 80099bc:	f000 fa3a 	bl	8009e34 <__lshift>
 80099c0:	4631      	mov	r1, r6
 80099c2:	4683      	mov	fp, r0
 80099c4:	f000 fa8a 	bl	8009edc <__mcmp>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	dcb8      	bgt.n	800993e <_dtoa_r+0xa46>
 80099cc:	d102      	bne.n	80099d4 <_dtoa_r+0xadc>
 80099ce:	f018 0f01 	tst.w	r8, #1
 80099d2:	d1b4      	bne.n	800993e <_dtoa_r+0xa46>
 80099d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80099d8:	1e6a      	subs	r2, r5, #1
 80099da:	2b30      	cmp	r3, #48	; 0x30
 80099dc:	f47f af0f 	bne.w	80097fe <_dtoa_r+0x906>
 80099e0:	4615      	mov	r5, r2
 80099e2:	e7f7      	b.n	80099d4 <_dtoa_r+0xadc>
 80099e4:	9b06      	ldr	r3, [sp, #24]
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d105      	bne.n	80099f6 <_dtoa_r+0xafe>
 80099ea:	2331      	movs	r3, #49	; 0x31
 80099ec:	9a06      	ldr	r2, [sp, #24]
 80099ee:	f10a 0a01 	add.w	sl, sl, #1
 80099f2:	7013      	strb	r3, [r2, #0]
 80099f4:	e703      	b.n	80097fe <_dtoa_r+0x906>
 80099f6:	4615      	mov	r5, r2
 80099f8:	e7a1      	b.n	800993e <_dtoa_r+0xa46>
 80099fa:	4b17      	ldr	r3, [pc, #92]	; (8009a58 <_dtoa_r+0xb60>)
 80099fc:	f7ff bae1 	b.w	8008fc2 <_dtoa_r+0xca>
 8009a00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f47f aabb 	bne.w	8008f7e <_dtoa_r+0x86>
 8009a08:	4b14      	ldr	r3, [pc, #80]	; (8009a5c <_dtoa_r+0xb64>)
 8009a0a:	f7ff bada 	b.w	8008fc2 <_dtoa_r+0xca>
 8009a0e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	f77f ae3f 	ble.w	8009694 <_dtoa_r+0x79c>
 8009a16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a18:	9308      	str	r3, [sp, #32]
 8009a1a:	e653      	b.n	80096c4 <_dtoa_r+0x7cc>
 8009a1c:	9b04      	ldr	r3, [sp, #16]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	dc03      	bgt.n	8009a2a <_dtoa_r+0xb32>
 8009a22:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009a24:	2b02      	cmp	r3, #2
 8009a26:	f73f aed5 	bgt.w	80097d4 <_dtoa_r+0x8dc>
 8009a2a:	9d06      	ldr	r5, [sp, #24]
 8009a2c:	4631      	mov	r1, r6
 8009a2e:	4658      	mov	r0, fp
 8009a30:	f7ff f9d2 	bl	8008dd8 <quorem>
 8009a34:	9b06      	ldr	r3, [sp, #24]
 8009a36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009a3a:	f805 8b01 	strb.w	r8, [r5], #1
 8009a3e:	9a04      	ldr	r2, [sp, #16]
 8009a40:	1aeb      	subs	r3, r5, r3
 8009a42:	429a      	cmp	r2, r3
 8009a44:	ddb5      	ble.n	80099b2 <_dtoa_r+0xaba>
 8009a46:	4659      	mov	r1, fp
 8009a48:	2300      	movs	r3, #0
 8009a4a:	220a      	movs	r2, #10
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	f000 f87b 	bl	8009b48 <__multadd>
 8009a52:	4683      	mov	fp, r0
 8009a54:	e7ea      	b.n	8009a2c <_dtoa_r+0xb34>
 8009a56:	bf00      	nop
 8009a58:	0800a4a8 	.word	0x0800a4a8
 8009a5c:	0800a4cc 	.word	0x0800a4cc

08009a60 <_localeconv_r>:
 8009a60:	4b04      	ldr	r3, [pc, #16]	; (8009a74 <_localeconv_r+0x14>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	6a18      	ldr	r0, [r3, #32]
 8009a66:	4b04      	ldr	r3, [pc, #16]	; (8009a78 <_localeconv_r+0x18>)
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	bf08      	it	eq
 8009a6c:	4618      	moveq	r0, r3
 8009a6e:	30f0      	adds	r0, #240	; 0xf0
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	200000d4 	.word	0x200000d4
 8009a78:	20000138 	.word	0x20000138

08009a7c <memchr>:
 8009a7c:	b510      	push	{r4, lr}
 8009a7e:	b2c9      	uxtb	r1, r1
 8009a80:	4402      	add	r2, r0
 8009a82:	4290      	cmp	r0, r2
 8009a84:	4603      	mov	r3, r0
 8009a86:	d101      	bne.n	8009a8c <memchr+0x10>
 8009a88:	2300      	movs	r3, #0
 8009a8a:	e003      	b.n	8009a94 <memchr+0x18>
 8009a8c:	781c      	ldrb	r4, [r3, #0]
 8009a8e:	3001      	adds	r0, #1
 8009a90:	428c      	cmp	r4, r1
 8009a92:	d1f6      	bne.n	8009a82 <memchr+0x6>
 8009a94:	4618      	mov	r0, r3
 8009a96:	bd10      	pop	{r4, pc}

08009a98 <memcpy>:
 8009a98:	b510      	push	{r4, lr}
 8009a9a:	1e43      	subs	r3, r0, #1
 8009a9c:	440a      	add	r2, r1
 8009a9e:	4291      	cmp	r1, r2
 8009aa0:	d100      	bne.n	8009aa4 <memcpy+0xc>
 8009aa2:	bd10      	pop	{r4, pc}
 8009aa4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009aac:	e7f7      	b.n	8009a9e <memcpy+0x6>

08009aae <__malloc_lock>:
 8009aae:	4770      	bx	lr

08009ab0 <__malloc_unlock>:
 8009ab0:	4770      	bx	lr

08009ab2 <_Balloc>:
 8009ab2:	b570      	push	{r4, r5, r6, lr}
 8009ab4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	460e      	mov	r6, r1
 8009aba:	b93d      	cbnz	r5, 8009acc <_Balloc+0x1a>
 8009abc:	2010      	movs	r0, #16
 8009abe:	f7fe fc1f 	bl	8008300 <malloc>
 8009ac2:	6260      	str	r0, [r4, #36]	; 0x24
 8009ac4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009ac8:	6005      	str	r5, [r0, #0]
 8009aca:	60c5      	str	r5, [r0, #12]
 8009acc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009ace:	68eb      	ldr	r3, [r5, #12]
 8009ad0:	b183      	cbz	r3, 8009af4 <_Balloc+0x42>
 8009ad2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009ada:	b9b8      	cbnz	r0, 8009b0c <_Balloc+0x5a>
 8009adc:	2101      	movs	r1, #1
 8009ade:	fa01 f506 	lsl.w	r5, r1, r6
 8009ae2:	1d6a      	adds	r2, r5, #5
 8009ae4:	0092      	lsls	r2, r2, #2
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	f7fe fc22 	bl	8008330 <_calloc_r>
 8009aec:	b160      	cbz	r0, 8009b08 <_Balloc+0x56>
 8009aee:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009af2:	e00e      	b.n	8009b12 <_Balloc+0x60>
 8009af4:	2221      	movs	r2, #33	; 0x21
 8009af6:	2104      	movs	r1, #4
 8009af8:	4620      	mov	r0, r4
 8009afa:	f7fe fc19 	bl	8008330 <_calloc_r>
 8009afe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b00:	60e8      	str	r0, [r5, #12]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1e4      	bne.n	8009ad2 <_Balloc+0x20>
 8009b08:	2000      	movs	r0, #0
 8009b0a:	bd70      	pop	{r4, r5, r6, pc}
 8009b0c:	6802      	ldr	r2, [r0, #0]
 8009b0e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009b12:	2300      	movs	r3, #0
 8009b14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b18:	e7f7      	b.n	8009b0a <_Balloc+0x58>

08009b1a <_Bfree>:
 8009b1a:	b570      	push	{r4, r5, r6, lr}
 8009b1c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009b1e:	4606      	mov	r6, r0
 8009b20:	460d      	mov	r5, r1
 8009b22:	b93c      	cbnz	r4, 8009b34 <_Bfree+0x1a>
 8009b24:	2010      	movs	r0, #16
 8009b26:	f7fe fbeb 	bl	8008300 <malloc>
 8009b2a:	6270      	str	r0, [r6, #36]	; 0x24
 8009b2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b30:	6004      	str	r4, [r0, #0]
 8009b32:	60c4      	str	r4, [r0, #12]
 8009b34:	b13d      	cbz	r5, 8009b46 <_Bfree+0x2c>
 8009b36:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009b38:	686a      	ldr	r2, [r5, #4]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b40:	6029      	str	r1, [r5, #0]
 8009b42:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009b46:	bd70      	pop	{r4, r5, r6, pc}

08009b48 <__multadd>:
 8009b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b4c:	461f      	mov	r7, r3
 8009b4e:	4606      	mov	r6, r0
 8009b50:	460c      	mov	r4, r1
 8009b52:	2300      	movs	r3, #0
 8009b54:	690d      	ldr	r5, [r1, #16]
 8009b56:	f101 0c14 	add.w	ip, r1, #20
 8009b5a:	f8dc 0000 	ldr.w	r0, [ip]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	b281      	uxth	r1, r0
 8009b62:	fb02 7101 	mla	r1, r2, r1, r7
 8009b66:	0c00      	lsrs	r0, r0, #16
 8009b68:	0c0f      	lsrs	r7, r1, #16
 8009b6a:	fb02 7000 	mla	r0, r2, r0, r7
 8009b6e:	b289      	uxth	r1, r1
 8009b70:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009b74:	429d      	cmp	r5, r3
 8009b76:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009b7a:	f84c 1b04 	str.w	r1, [ip], #4
 8009b7e:	dcec      	bgt.n	8009b5a <__multadd+0x12>
 8009b80:	b1d7      	cbz	r7, 8009bb8 <__multadd+0x70>
 8009b82:	68a3      	ldr	r3, [r4, #8]
 8009b84:	42ab      	cmp	r3, r5
 8009b86:	dc12      	bgt.n	8009bae <__multadd+0x66>
 8009b88:	6861      	ldr	r1, [r4, #4]
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	3101      	adds	r1, #1
 8009b8e:	f7ff ff90 	bl	8009ab2 <_Balloc>
 8009b92:	4680      	mov	r8, r0
 8009b94:	6922      	ldr	r2, [r4, #16]
 8009b96:	f104 010c 	add.w	r1, r4, #12
 8009b9a:	3202      	adds	r2, #2
 8009b9c:	0092      	lsls	r2, r2, #2
 8009b9e:	300c      	adds	r0, #12
 8009ba0:	f7ff ff7a 	bl	8009a98 <memcpy>
 8009ba4:	4621      	mov	r1, r4
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	f7ff ffb7 	bl	8009b1a <_Bfree>
 8009bac:	4644      	mov	r4, r8
 8009bae:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009bb2:	3501      	adds	r5, #1
 8009bb4:	615f      	str	r7, [r3, #20]
 8009bb6:	6125      	str	r5, [r4, #16]
 8009bb8:	4620      	mov	r0, r4
 8009bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009bbe <__hi0bits>:
 8009bbe:	0c02      	lsrs	r2, r0, #16
 8009bc0:	0412      	lsls	r2, r2, #16
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	b9b2      	cbnz	r2, 8009bf4 <__hi0bits+0x36>
 8009bc6:	0403      	lsls	r3, r0, #16
 8009bc8:	2010      	movs	r0, #16
 8009bca:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009bce:	bf04      	itt	eq
 8009bd0:	021b      	lsleq	r3, r3, #8
 8009bd2:	3008      	addeq	r0, #8
 8009bd4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009bd8:	bf04      	itt	eq
 8009bda:	011b      	lsleq	r3, r3, #4
 8009bdc:	3004      	addeq	r0, #4
 8009bde:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009be2:	bf04      	itt	eq
 8009be4:	009b      	lsleq	r3, r3, #2
 8009be6:	3002      	addeq	r0, #2
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	db06      	blt.n	8009bfa <__hi0bits+0x3c>
 8009bec:	005b      	lsls	r3, r3, #1
 8009bee:	d503      	bpl.n	8009bf8 <__hi0bits+0x3a>
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	4770      	bx	lr
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	e7e8      	b.n	8009bca <__hi0bits+0xc>
 8009bf8:	2020      	movs	r0, #32
 8009bfa:	4770      	bx	lr

08009bfc <__lo0bits>:
 8009bfc:	6803      	ldr	r3, [r0, #0]
 8009bfe:	4601      	mov	r1, r0
 8009c00:	f013 0207 	ands.w	r2, r3, #7
 8009c04:	d00b      	beq.n	8009c1e <__lo0bits+0x22>
 8009c06:	07da      	lsls	r2, r3, #31
 8009c08:	d423      	bmi.n	8009c52 <__lo0bits+0x56>
 8009c0a:	0798      	lsls	r0, r3, #30
 8009c0c:	bf49      	itett	mi
 8009c0e:	085b      	lsrmi	r3, r3, #1
 8009c10:	089b      	lsrpl	r3, r3, #2
 8009c12:	2001      	movmi	r0, #1
 8009c14:	600b      	strmi	r3, [r1, #0]
 8009c16:	bf5c      	itt	pl
 8009c18:	600b      	strpl	r3, [r1, #0]
 8009c1a:	2002      	movpl	r0, #2
 8009c1c:	4770      	bx	lr
 8009c1e:	b298      	uxth	r0, r3
 8009c20:	b9a8      	cbnz	r0, 8009c4e <__lo0bits+0x52>
 8009c22:	2010      	movs	r0, #16
 8009c24:	0c1b      	lsrs	r3, r3, #16
 8009c26:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009c2a:	bf04      	itt	eq
 8009c2c:	0a1b      	lsreq	r3, r3, #8
 8009c2e:	3008      	addeq	r0, #8
 8009c30:	071a      	lsls	r2, r3, #28
 8009c32:	bf04      	itt	eq
 8009c34:	091b      	lsreq	r3, r3, #4
 8009c36:	3004      	addeq	r0, #4
 8009c38:	079a      	lsls	r2, r3, #30
 8009c3a:	bf04      	itt	eq
 8009c3c:	089b      	lsreq	r3, r3, #2
 8009c3e:	3002      	addeq	r0, #2
 8009c40:	07da      	lsls	r2, r3, #31
 8009c42:	d402      	bmi.n	8009c4a <__lo0bits+0x4e>
 8009c44:	085b      	lsrs	r3, r3, #1
 8009c46:	d006      	beq.n	8009c56 <__lo0bits+0x5a>
 8009c48:	3001      	adds	r0, #1
 8009c4a:	600b      	str	r3, [r1, #0]
 8009c4c:	4770      	bx	lr
 8009c4e:	4610      	mov	r0, r2
 8009c50:	e7e9      	b.n	8009c26 <__lo0bits+0x2a>
 8009c52:	2000      	movs	r0, #0
 8009c54:	4770      	bx	lr
 8009c56:	2020      	movs	r0, #32
 8009c58:	4770      	bx	lr

08009c5a <__i2b>:
 8009c5a:	b510      	push	{r4, lr}
 8009c5c:	460c      	mov	r4, r1
 8009c5e:	2101      	movs	r1, #1
 8009c60:	f7ff ff27 	bl	8009ab2 <_Balloc>
 8009c64:	2201      	movs	r2, #1
 8009c66:	6144      	str	r4, [r0, #20]
 8009c68:	6102      	str	r2, [r0, #16]
 8009c6a:	bd10      	pop	{r4, pc}

08009c6c <__multiply>:
 8009c6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c70:	4614      	mov	r4, r2
 8009c72:	690a      	ldr	r2, [r1, #16]
 8009c74:	6923      	ldr	r3, [r4, #16]
 8009c76:	4688      	mov	r8, r1
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	bfbe      	ittt	lt
 8009c7c:	460b      	movlt	r3, r1
 8009c7e:	46a0      	movlt	r8, r4
 8009c80:	461c      	movlt	r4, r3
 8009c82:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c86:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009c8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c8e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c92:	eb07 0609 	add.w	r6, r7, r9
 8009c96:	42b3      	cmp	r3, r6
 8009c98:	bfb8      	it	lt
 8009c9a:	3101      	addlt	r1, #1
 8009c9c:	f7ff ff09 	bl	8009ab2 <_Balloc>
 8009ca0:	f100 0514 	add.w	r5, r0, #20
 8009ca4:	462b      	mov	r3, r5
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009cac:	4573      	cmp	r3, lr
 8009cae:	d316      	bcc.n	8009cde <__multiply+0x72>
 8009cb0:	f104 0214 	add.w	r2, r4, #20
 8009cb4:	f108 0114 	add.w	r1, r8, #20
 8009cb8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009cbc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009cc0:	9300      	str	r3, [sp, #0]
 8009cc2:	9b00      	ldr	r3, [sp, #0]
 8009cc4:	9201      	str	r2, [sp, #4]
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d80c      	bhi.n	8009ce4 <__multiply+0x78>
 8009cca:	2e00      	cmp	r6, #0
 8009ccc:	dd03      	ble.n	8009cd6 <__multiply+0x6a>
 8009cce:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d05d      	beq.n	8009d92 <__multiply+0x126>
 8009cd6:	6106      	str	r6, [r0, #16]
 8009cd8:	b003      	add	sp, #12
 8009cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cde:	f843 2b04 	str.w	r2, [r3], #4
 8009ce2:	e7e3      	b.n	8009cac <__multiply+0x40>
 8009ce4:	f8b2 b000 	ldrh.w	fp, [r2]
 8009ce8:	f1bb 0f00 	cmp.w	fp, #0
 8009cec:	d023      	beq.n	8009d36 <__multiply+0xca>
 8009cee:	4689      	mov	r9, r1
 8009cf0:	46ac      	mov	ip, r5
 8009cf2:	f04f 0800 	mov.w	r8, #0
 8009cf6:	f859 4b04 	ldr.w	r4, [r9], #4
 8009cfa:	f8dc a000 	ldr.w	sl, [ip]
 8009cfe:	b2a3      	uxth	r3, r4
 8009d00:	fa1f fa8a 	uxth.w	sl, sl
 8009d04:	fb0b a303 	mla	r3, fp, r3, sl
 8009d08:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009d0c:	f8dc 4000 	ldr.w	r4, [ip]
 8009d10:	4443      	add	r3, r8
 8009d12:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009d16:	fb0b 840a 	mla	r4, fp, sl, r8
 8009d1a:	46e2      	mov	sl, ip
 8009d1c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009d26:	454f      	cmp	r7, r9
 8009d28:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009d2c:	f84a 3b04 	str.w	r3, [sl], #4
 8009d30:	d82b      	bhi.n	8009d8a <__multiply+0x11e>
 8009d32:	f8cc 8004 	str.w	r8, [ip, #4]
 8009d36:	9b01      	ldr	r3, [sp, #4]
 8009d38:	3204      	adds	r2, #4
 8009d3a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009d3e:	f1ba 0f00 	cmp.w	sl, #0
 8009d42:	d020      	beq.n	8009d86 <__multiply+0x11a>
 8009d44:	4689      	mov	r9, r1
 8009d46:	46a8      	mov	r8, r5
 8009d48:	f04f 0b00 	mov.w	fp, #0
 8009d4c:	682b      	ldr	r3, [r5, #0]
 8009d4e:	f8b9 c000 	ldrh.w	ip, [r9]
 8009d52:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	fb0a 440c 	mla	r4, sl, ip, r4
 8009d5c:	46c4      	mov	ip, r8
 8009d5e:	445c      	add	r4, fp
 8009d60:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009d64:	f84c 3b04 	str.w	r3, [ip], #4
 8009d68:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d6c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009d70:	0c1b      	lsrs	r3, r3, #16
 8009d72:	fb0a b303 	mla	r3, sl, r3, fp
 8009d76:	454f      	cmp	r7, r9
 8009d78:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009d7c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009d80:	d805      	bhi.n	8009d8e <__multiply+0x122>
 8009d82:	f8c8 3004 	str.w	r3, [r8, #4]
 8009d86:	3504      	adds	r5, #4
 8009d88:	e79b      	b.n	8009cc2 <__multiply+0x56>
 8009d8a:	46d4      	mov	ip, sl
 8009d8c:	e7b3      	b.n	8009cf6 <__multiply+0x8a>
 8009d8e:	46e0      	mov	r8, ip
 8009d90:	e7dd      	b.n	8009d4e <__multiply+0xe2>
 8009d92:	3e01      	subs	r6, #1
 8009d94:	e799      	b.n	8009cca <__multiply+0x5e>
	...

08009d98 <__pow5mult>:
 8009d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d9c:	4615      	mov	r5, r2
 8009d9e:	f012 0203 	ands.w	r2, r2, #3
 8009da2:	4606      	mov	r6, r0
 8009da4:	460f      	mov	r7, r1
 8009da6:	d007      	beq.n	8009db8 <__pow5mult+0x20>
 8009da8:	4c21      	ldr	r4, [pc, #132]	; (8009e30 <__pow5mult+0x98>)
 8009daa:	3a01      	subs	r2, #1
 8009dac:	2300      	movs	r3, #0
 8009dae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009db2:	f7ff fec9 	bl	8009b48 <__multadd>
 8009db6:	4607      	mov	r7, r0
 8009db8:	10ad      	asrs	r5, r5, #2
 8009dba:	d035      	beq.n	8009e28 <__pow5mult+0x90>
 8009dbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009dbe:	b93c      	cbnz	r4, 8009dd0 <__pow5mult+0x38>
 8009dc0:	2010      	movs	r0, #16
 8009dc2:	f7fe fa9d 	bl	8008300 <malloc>
 8009dc6:	6270      	str	r0, [r6, #36]	; 0x24
 8009dc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009dcc:	6004      	str	r4, [r0, #0]
 8009dce:	60c4      	str	r4, [r0, #12]
 8009dd0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009dd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009dd8:	b94c      	cbnz	r4, 8009dee <__pow5mult+0x56>
 8009dda:	f240 2171 	movw	r1, #625	; 0x271
 8009dde:	4630      	mov	r0, r6
 8009de0:	f7ff ff3b 	bl	8009c5a <__i2b>
 8009de4:	2300      	movs	r3, #0
 8009de6:	4604      	mov	r4, r0
 8009de8:	f8c8 0008 	str.w	r0, [r8, #8]
 8009dec:	6003      	str	r3, [r0, #0]
 8009dee:	f04f 0800 	mov.w	r8, #0
 8009df2:	07eb      	lsls	r3, r5, #31
 8009df4:	d50a      	bpl.n	8009e0c <__pow5mult+0x74>
 8009df6:	4639      	mov	r1, r7
 8009df8:	4622      	mov	r2, r4
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	f7ff ff36 	bl	8009c6c <__multiply>
 8009e00:	4681      	mov	r9, r0
 8009e02:	4639      	mov	r1, r7
 8009e04:	4630      	mov	r0, r6
 8009e06:	f7ff fe88 	bl	8009b1a <_Bfree>
 8009e0a:	464f      	mov	r7, r9
 8009e0c:	106d      	asrs	r5, r5, #1
 8009e0e:	d00b      	beq.n	8009e28 <__pow5mult+0x90>
 8009e10:	6820      	ldr	r0, [r4, #0]
 8009e12:	b938      	cbnz	r0, 8009e24 <__pow5mult+0x8c>
 8009e14:	4622      	mov	r2, r4
 8009e16:	4621      	mov	r1, r4
 8009e18:	4630      	mov	r0, r6
 8009e1a:	f7ff ff27 	bl	8009c6c <__multiply>
 8009e1e:	6020      	str	r0, [r4, #0]
 8009e20:	f8c0 8000 	str.w	r8, [r0]
 8009e24:	4604      	mov	r4, r0
 8009e26:	e7e4      	b.n	8009df2 <__pow5mult+0x5a>
 8009e28:	4638      	mov	r0, r7
 8009e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e2e:	bf00      	nop
 8009e30:	0800a5d0 	.word	0x0800a5d0

08009e34 <__lshift>:
 8009e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e38:	460c      	mov	r4, r1
 8009e3a:	4607      	mov	r7, r0
 8009e3c:	4616      	mov	r6, r2
 8009e3e:	6923      	ldr	r3, [r4, #16]
 8009e40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e44:	eb0a 0903 	add.w	r9, sl, r3
 8009e48:	6849      	ldr	r1, [r1, #4]
 8009e4a:	68a3      	ldr	r3, [r4, #8]
 8009e4c:	f109 0501 	add.w	r5, r9, #1
 8009e50:	42ab      	cmp	r3, r5
 8009e52:	db32      	blt.n	8009eba <__lshift+0x86>
 8009e54:	4638      	mov	r0, r7
 8009e56:	f7ff fe2c 	bl	8009ab2 <_Balloc>
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	4680      	mov	r8, r0
 8009e5e:	461a      	mov	r2, r3
 8009e60:	f100 0114 	add.w	r1, r0, #20
 8009e64:	4553      	cmp	r3, sl
 8009e66:	db2b      	blt.n	8009ec0 <__lshift+0x8c>
 8009e68:	6920      	ldr	r0, [r4, #16]
 8009e6a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e6e:	f104 0314 	add.w	r3, r4, #20
 8009e72:	f016 021f 	ands.w	r2, r6, #31
 8009e76:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e7a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009e7e:	d025      	beq.n	8009ecc <__lshift+0x98>
 8009e80:	2000      	movs	r0, #0
 8009e82:	f1c2 0e20 	rsb	lr, r2, #32
 8009e86:	468a      	mov	sl, r1
 8009e88:	681e      	ldr	r6, [r3, #0]
 8009e8a:	4096      	lsls	r6, r2
 8009e8c:	4330      	orrs	r0, r6
 8009e8e:	f84a 0b04 	str.w	r0, [sl], #4
 8009e92:	f853 0b04 	ldr.w	r0, [r3], #4
 8009e96:	459c      	cmp	ip, r3
 8009e98:	fa20 f00e 	lsr.w	r0, r0, lr
 8009e9c:	d814      	bhi.n	8009ec8 <__lshift+0x94>
 8009e9e:	6048      	str	r0, [r1, #4]
 8009ea0:	b108      	cbz	r0, 8009ea6 <__lshift+0x72>
 8009ea2:	f109 0502 	add.w	r5, r9, #2
 8009ea6:	3d01      	subs	r5, #1
 8009ea8:	4638      	mov	r0, r7
 8009eaa:	f8c8 5010 	str.w	r5, [r8, #16]
 8009eae:	4621      	mov	r1, r4
 8009eb0:	f7ff fe33 	bl	8009b1a <_Bfree>
 8009eb4:	4640      	mov	r0, r8
 8009eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eba:	3101      	adds	r1, #1
 8009ebc:	005b      	lsls	r3, r3, #1
 8009ebe:	e7c7      	b.n	8009e50 <__lshift+0x1c>
 8009ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	e7cd      	b.n	8009e64 <__lshift+0x30>
 8009ec8:	4651      	mov	r1, sl
 8009eca:	e7dc      	b.n	8009e86 <__lshift+0x52>
 8009ecc:	3904      	subs	r1, #4
 8009ece:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ed2:	459c      	cmp	ip, r3
 8009ed4:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ed8:	d8f9      	bhi.n	8009ece <__lshift+0x9a>
 8009eda:	e7e4      	b.n	8009ea6 <__lshift+0x72>

08009edc <__mcmp>:
 8009edc:	6903      	ldr	r3, [r0, #16]
 8009ede:	690a      	ldr	r2, [r1, #16]
 8009ee0:	b530      	push	{r4, r5, lr}
 8009ee2:	1a9b      	subs	r3, r3, r2
 8009ee4:	d10c      	bne.n	8009f00 <__mcmp+0x24>
 8009ee6:	0092      	lsls	r2, r2, #2
 8009ee8:	3014      	adds	r0, #20
 8009eea:	3114      	adds	r1, #20
 8009eec:	1884      	adds	r4, r0, r2
 8009eee:	4411      	add	r1, r2
 8009ef0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009ef4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009ef8:	4295      	cmp	r5, r2
 8009efa:	d003      	beq.n	8009f04 <__mcmp+0x28>
 8009efc:	d305      	bcc.n	8009f0a <__mcmp+0x2e>
 8009efe:	2301      	movs	r3, #1
 8009f00:	4618      	mov	r0, r3
 8009f02:	bd30      	pop	{r4, r5, pc}
 8009f04:	42a0      	cmp	r0, r4
 8009f06:	d3f3      	bcc.n	8009ef0 <__mcmp+0x14>
 8009f08:	e7fa      	b.n	8009f00 <__mcmp+0x24>
 8009f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f0e:	e7f7      	b.n	8009f00 <__mcmp+0x24>

08009f10 <__mdiff>:
 8009f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f14:	460d      	mov	r5, r1
 8009f16:	4607      	mov	r7, r0
 8009f18:	4611      	mov	r1, r2
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	4614      	mov	r4, r2
 8009f1e:	f7ff ffdd 	bl	8009edc <__mcmp>
 8009f22:	1e06      	subs	r6, r0, #0
 8009f24:	d108      	bne.n	8009f38 <__mdiff+0x28>
 8009f26:	4631      	mov	r1, r6
 8009f28:	4638      	mov	r0, r7
 8009f2a:	f7ff fdc2 	bl	8009ab2 <_Balloc>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f38:	bfa4      	itt	ge
 8009f3a:	4623      	movge	r3, r4
 8009f3c:	462c      	movge	r4, r5
 8009f3e:	4638      	mov	r0, r7
 8009f40:	6861      	ldr	r1, [r4, #4]
 8009f42:	bfa6      	itte	ge
 8009f44:	461d      	movge	r5, r3
 8009f46:	2600      	movge	r6, #0
 8009f48:	2601      	movlt	r6, #1
 8009f4a:	f7ff fdb2 	bl	8009ab2 <_Balloc>
 8009f4e:	f04f 0e00 	mov.w	lr, #0
 8009f52:	60c6      	str	r6, [r0, #12]
 8009f54:	692b      	ldr	r3, [r5, #16]
 8009f56:	6926      	ldr	r6, [r4, #16]
 8009f58:	f104 0214 	add.w	r2, r4, #20
 8009f5c:	f105 0914 	add.w	r9, r5, #20
 8009f60:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009f64:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009f68:	f100 0114 	add.w	r1, r0, #20
 8009f6c:	f852 ab04 	ldr.w	sl, [r2], #4
 8009f70:	f859 5b04 	ldr.w	r5, [r9], #4
 8009f74:	fa1f f38a 	uxth.w	r3, sl
 8009f78:	4473      	add	r3, lr
 8009f7a:	b2ac      	uxth	r4, r5
 8009f7c:	1b1b      	subs	r3, r3, r4
 8009f7e:	0c2c      	lsrs	r4, r5, #16
 8009f80:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8009f84:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8009f8e:	45c8      	cmp	r8, r9
 8009f90:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8009f94:	4694      	mov	ip, r2
 8009f96:	f841 4b04 	str.w	r4, [r1], #4
 8009f9a:	d8e7      	bhi.n	8009f6c <__mdiff+0x5c>
 8009f9c:	45bc      	cmp	ip, r7
 8009f9e:	d304      	bcc.n	8009faa <__mdiff+0x9a>
 8009fa0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009fa4:	b183      	cbz	r3, 8009fc8 <__mdiff+0xb8>
 8009fa6:	6106      	str	r6, [r0, #16]
 8009fa8:	e7c4      	b.n	8009f34 <__mdiff+0x24>
 8009faa:	f85c 4b04 	ldr.w	r4, [ip], #4
 8009fae:	b2a2      	uxth	r2, r4
 8009fb0:	4472      	add	r2, lr
 8009fb2:	1413      	asrs	r3, r2, #16
 8009fb4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009fb8:	b292      	uxth	r2, r2
 8009fba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009fbe:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009fc2:	f841 2b04 	str.w	r2, [r1], #4
 8009fc6:	e7e9      	b.n	8009f9c <__mdiff+0x8c>
 8009fc8:	3e01      	subs	r6, #1
 8009fca:	e7e9      	b.n	8009fa0 <__mdiff+0x90>

08009fcc <__d2b>:
 8009fcc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009fd0:	461c      	mov	r4, r3
 8009fd2:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8009fd6:	2101      	movs	r1, #1
 8009fd8:	4690      	mov	r8, r2
 8009fda:	f7ff fd6a 	bl	8009ab2 <_Balloc>
 8009fde:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8009fe2:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009fe6:	4607      	mov	r7, r0
 8009fe8:	bb34      	cbnz	r4, 800a038 <__d2b+0x6c>
 8009fea:	9201      	str	r2, [sp, #4]
 8009fec:	f1b8 0200 	subs.w	r2, r8, #0
 8009ff0:	d027      	beq.n	800a042 <__d2b+0x76>
 8009ff2:	a802      	add	r0, sp, #8
 8009ff4:	f840 2d08 	str.w	r2, [r0, #-8]!
 8009ff8:	f7ff fe00 	bl	8009bfc <__lo0bits>
 8009ffc:	9900      	ldr	r1, [sp, #0]
 8009ffe:	b1f0      	cbz	r0, 800a03e <__d2b+0x72>
 800a000:	9a01      	ldr	r2, [sp, #4]
 800a002:	f1c0 0320 	rsb	r3, r0, #32
 800a006:	fa02 f303 	lsl.w	r3, r2, r3
 800a00a:	430b      	orrs	r3, r1
 800a00c:	40c2      	lsrs	r2, r0
 800a00e:	617b      	str	r3, [r7, #20]
 800a010:	9201      	str	r2, [sp, #4]
 800a012:	9b01      	ldr	r3, [sp, #4]
 800a014:	2b00      	cmp	r3, #0
 800a016:	bf14      	ite	ne
 800a018:	2102      	movne	r1, #2
 800a01a:	2101      	moveq	r1, #1
 800a01c:	61bb      	str	r3, [r7, #24]
 800a01e:	6139      	str	r1, [r7, #16]
 800a020:	b1c4      	cbz	r4, 800a054 <__d2b+0x88>
 800a022:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a026:	4404      	add	r4, r0
 800a028:	6034      	str	r4, [r6, #0]
 800a02a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a02e:	6028      	str	r0, [r5, #0]
 800a030:	4638      	mov	r0, r7
 800a032:	b002      	add	sp, #8
 800a034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a038:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a03c:	e7d5      	b.n	8009fea <__d2b+0x1e>
 800a03e:	6179      	str	r1, [r7, #20]
 800a040:	e7e7      	b.n	800a012 <__d2b+0x46>
 800a042:	a801      	add	r0, sp, #4
 800a044:	f7ff fdda 	bl	8009bfc <__lo0bits>
 800a048:	2101      	movs	r1, #1
 800a04a:	9b01      	ldr	r3, [sp, #4]
 800a04c:	6139      	str	r1, [r7, #16]
 800a04e:	617b      	str	r3, [r7, #20]
 800a050:	3020      	adds	r0, #32
 800a052:	e7e5      	b.n	800a020 <__d2b+0x54>
 800a054:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a058:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a05c:	6030      	str	r0, [r6, #0]
 800a05e:	6918      	ldr	r0, [r3, #16]
 800a060:	f7ff fdad 	bl	8009bbe <__hi0bits>
 800a064:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a068:	e7e1      	b.n	800a02e <__d2b+0x62>

0800a06a <__ssputs_r>:
 800a06a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a06e:	688e      	ldr	r6, [r1, #8]
 800a070:	4682      	mov	sl, r0
 800a072:	429e      	cmp	r6, r3
 800a074:	460c      	mov	r4, r1
 800a076:	4690      	mov	r8, r2
 800a078:	4699      	mov	r9, r3
 800a07a:	d837      	bhi.n	800a0ec <__ssputs_r+0x82>
 800a07c:	898a      	ldrh	r2, [r1, #12]
 800a07e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a082:	d031      	beq.n	800a0e8 <__ssputs_r+0x7e>
 800a084:	2302      	movs	r3, #2
 800a086:	6825      	ldr	r5, [r4, #0]
 800a088:	6909      	ldr	r1, [r1, #16]
 800a08a:	1a6f      	subs	r7, r5, r1
 800a08c:	6965      	ldr	r5, [r4, #20]
 800a08e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a092:	fb95 f5f3 	sdiv	r5, r5, r3
 800a096:	f109 0301 	add.w	r3, r9, #1
 800a09a:	443b      	add	r3, r7
 800a09c:	429d      	cmp	r5, r3
 800a09e:	bf38      	it	cc
 800a0a0:	461d      	movcc	r5, r3
 800a0a2:	0553      	lsls	r3, r2, #21
 800a0a4:	d530      	bpl.n	800a108 <__ssputs_r+0x9e>
 800a0a6:	4629      	mov	r1, r5
 800a0a8:	f7fe f99c 	bl	80083e4 <_malloc_r>
 800a0ac:	4606      	mov	r6, r0
 800a0ae:	b950      	cbnz	r0, 800a0c6 <__ssputs_r+0x5c>
 800a0b0:	230c      	movs	r3, #12
 800a0b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b6:	f8ca 3000 	str.w	r3, [sl]
 800a0ba:	89a3      	ldrh	r3, [r4, #12]
 800a0bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0c0:	81a3      	strh	r3, [r4, #12]
 800a0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0c6:	463a      	mov	r2, r7
 800a0c8:	6921      	ldr	r1, [r4, #16]
 800a0ca:	f7ff fce5 	bl	8009a98 <memcpy>
 800a0ce:	89a3      	ldrh	r3, [r4, #12]
 800a0d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0d8:	81a3      	strh	r3, [r4, #12]
 800a0da:	6126      	str	r6, [r4, #16]
 800a0dc:	443e      	add	r6, r7
 800a0de:	6026      	str	r6, [r4, #0]
 800a0e0:	464e      	mov	r6, r9
 800a0e2:	6165      	str	r5, [r4, #20]
 800a0e4:	1bed      	subs	r5, r5, r7
 800a0e6:	60a5      	str	r5, [r4, #8]
 800a0e8:	454e      	cmp	r6, r9
 800a0ea:	d900      	bls.n	800a0ee <__ssputs_r+0x84>
 800a0ec:	464e      	mov	r6, r9
 800a0ee:	4632      	mov	r2, r6
 800a0f0:	4641      	mov	r1, r8
 800a0f2:	6820      	ldr	r0, [r4, #0]
 800a0f4:	f000 f91e 	bl	800a334 <memmove>
 800a0f8:	68a3      	ldr	r3, [r4, #8]
 800a0fa:	2000      	movs	r0, #0
 800a0fc:	1b9b      	subs	r3, r3, r6
 800a0fe:	60a3      	str	r3, [r4, #8]
 800a100:	6823      	ldr	r3, [r4, #0]
 800a102:	441e      	add	r6, r3
 800a104:	6026      	str	r6, [r4, #0]
 800a106:	e7dc      	b.n	800a0c2 <__ssputs_r+0x58>
 800a108:	462a      	mov	r2, r5
 800a10a:	f000 f92c 	bl	800a366 <_realloc_r>
 800a10e:	4606      	mov	r6, r0
 800a110:	2800      	cmp	r0, #0
 800a112:	d1e2      	bne.n	800a0da <__ssputs_r+0x70>
 800a114:	6921      	ldr	r1, [r4, #16]
 800a116:	4650      	mov	r0, sl
 800a118:	f7fe f918 	bl	800834c <_free_r>
 800a11c:	e7c8      	b.n	800a0b0 <__ssputs_r+0x46>
	...

0800a120 <_svfiprintf_r>:
 800a120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a124:	461d      	mov	r5, r3
 800a126:	898b      	ldrh	r3, [r1, #12]
 800a128:	b09d      	sub	sp, #116	; 0x74
 800a12a:	061f      	lsls	r7, r3, #24
 800a12c:	4680      	mov	r8, r0
 800a12e:	460c      	mov	r4, r1
 800a130:	4616      	mov	r6, r2
 800a132:	d50f      	bpl.n	800a154 <_svfiprintf_r+0x34>
 800a134:	690b      	ldr	r3, [r1, #16]
 800a136:	b96b      	cbnz	r3, 800a154 <_svfiprintf_r+0x34>
 800a138:	2140      	movs	r1, #64	; 0x40
 800a13a:	f7fe f953 	bl	80083e4 <_malloc_r>
 800a13e:	6020      	str	r0, [r4, #0]
 800a140:	6120      	str	r0, [r4, #16]
 800a142:	b928      	cbnz	r0, 800a150 <_svfiprintf_r+0x30>
 800a144:	230c      	movs	r3, #12
 800a146:	f8c8 3000 	str.w	r3, [r8]
 800a14a:	f04f 30ff 	mov.w	r0, #4294967295
 800a14e:	e0c8      	b.n	800a2e2 <_svfiprintf_r+0x1c2>
 800a150:	2340      	movs	r3, #64	; 0x40
 800a152:	6163      	str	r3, [r4, #20]
 800a154:	2300      	movs	r3, #0
 800a156:	9309      	str	r3, [sp, #36]	; 0x24
 800a158:	2320      	movs	r3, #32
 800a15a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a15e:	2330      	movs	r3, #48	; 0x30
 800a160:	f04f 0b01 	mov.w	fp, #1
 800a164:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a168:	9503      	str	r5, [sp, #12]
 800a16a:	4637      	mov	r7, r6
 800a16c:	463d      	mov	r5, r7
 800a16e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a172:	b10b      	cbz	r3, 800a178 <_svfiprintf_r+0x58>
 800a174:	2b25      	cmp	r3, #37	; 0x25
 800a176:	d13e      	bne.n	800a1f6 <_svfiprintf_r+0xd6>
 800a178:	ebb7 0a06 	subs.w	sl, r7, r6
 800a17c:	d00b      	beq.n	800a196 <_svfiprintf_r+0x76>
 800a17e:	4653      	mov	r3, sl
 800a180:	4632      	mov	r2, r6
 800a182:	4621      	mov	r1, r4
 800a184:	4640      	mov	r0, r8
 800a186:	f7ff ff70 	bl	800a06a <__ssputs_r>
 800a18a:	3001      	adds	r0, #1
 800a18c:	f000 80a4 	beq.w	800a2d8 <_svfiprintf_r+0x1b8>
 800a190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a192:	4453      	add	r3, sl
 800a194:	9309      	str	r3, [sp, #36]	; 0x24
 800a196:	783b      	ldrb	r3, [r7, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f000 809d 	beq.w	800a2d8 <_svfiprintf_r+0x1b8>
 800a19e:	2300      	movs	r3, #0
 800a1a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1a8:	9304      	str	r3, [sp, #16]
 800a1aa:	9307      	str	r3, [sp, #28]
 800a1ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1b0:	931a      	str	r3, [sp, #104]	; 0x68
 800a1b2:	462f      	mov	r7, r5
 800a1b4:	2205      	movs	r2, #5
 800a1b6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a1ba:	4850      	ldr	r0, [pc, #320]	; (800a2fc <_svfiprintf_r+0x1dc>)
 800a1bc:	f7ff fc5e 	bl	8009a7c <memchr>
 800a1c0:	9b04      	ldr	r3, [sp, #16]
 800a1c2:	b9d0      	cbnz	r0, 800a1fa <_svfiprintf_r+0xda>
 800a1c4:	06d9      	lsls	r1, r3, #27
 800a1c6:	bf44      	itt	mi
 800a1c8:	2220      	movmi	r2, #32
 800a1ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a1ce:	071a      	lsls	r2, r3, #28
 800a1d0:	bf44      	itt	mi
 800a1d2:	222b      	movmi	r2, #43	; 0x2b
 800a1d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a1d8:	782a      	ldrb	r2, [r5, #0]
 800a1da:	2a2a      	cmp	r2, #42	; 0x2a
 800a1dc:	d015      	beq.n	800a20a <_svfiprintf_r+0xea>
 800a1de:	462f      	mov	r7, r5
 800a1e0:	2000      	movs	r0, #0
 800a1e2:	250a      	movs	r5, #10
 800a1e4:	9a07      	ldr	r2, [sp, #28]
 800a1e6:	4639      	mov	r1, r7
 800a1e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1ec:	3b30      	subs	r3, #48	; 0x30
 800a1ee:	2b09      	cmp	r3, #9
 800a1f0:	d94d      	bls.n	800a28e <_svfiprintf_r+0x16e>
 800a1f2:	b1b8      	cbz	r0, 800a224 <_svfiprintf_r+0x104>
 800a1f4:	e00f      	b.n	800a216 <_svfiprintf_r+0xf6>
 800a1f6:	462f      	mov	r7, r5
 800a1f8:	e7b8      	b.n	800a16c <_svfiprintf_r+0x4c>
 800a1fa:	4a40      	ldr	r2, [pc, #256]	; (800a2fc <_svfiprintf_r+0x1dc>)
 800a1fc:	463d      	mov	r5, r7
 800a1fe:	1a80      	subs	r0, r0, r2
 800a200:	fa0b f000 	lsl.w	r0, fp, r0
 800a204:	4318      	orrs	r0, r3
 800a206:	9004      	str	r0, [sp, #16]
 800a208:	e7d3      	b.n	800a1b2 <_svfiprintf_r+0x92>
 800a20a:	9a03      	ldr	r2, [sp, #12]
 800a20c:	1d11      	adds	r1, r2, #4
 800a20e:	6812      	ldr	r2, [r2, #0]
 800a210:	9103      	str	r1, [sp, #12]
 800a212:	2a00      	cmp	r2, #0
 800a214:	db01      	blt.n	800a21a <_svfiprintf_r+0xfa>
 800a216:	9207      	str	r2, [sp, #28]
 800a218:	e004      	b.n	800a224 <_svfiprintf_r+0x104>
 800a21a:	4252      	negs	r2, r2
 800a21c:	f043 0302 	orr.w	r3, r3, #2
 800a220:	9207      	str	r2, [sp, #28]
 800a222:	9304      	str	r3, [sp, #16]
 800a224:	783b      	ldrb	r3, [r7, #0]
 800a226:	2b2e      	cmp	r3, #46	; 0x2e
 800a228:	d10c      	bne.n	800a244 <_svfiprintf_r+0x124>
 800a22a:	787b      	ldrb	r3, [r7, #1]
 800a22c:	2b2a      	cmp	r3, #42	; 0x2a
 800a22e:	d133      	bne.n	800a298 <_svfiprintf_r+0x178>
 800a230:	9b03      	ldr	r3, [sp, #12]
 800a232:	3702      	adds	r7, #2
 800a234:	1d1a      	adds	r2, r3, #4
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	9203      	str	r2, [sp, #12]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	bfb8      	it	lt
 800a23e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a242:	9305      	str	r3, [sp, #20]
 800a244:	4d2e      	ldr	r5, [pc, #184]	; (800a300 <_svfiprintf_r+0x1e0>)
 800a246:	2203      	movs	r2, #3
 800a248:	7839      	ldrb	r1, [r7, #0]
 800a24a:	4628      	mov	r0, r5
 800a24c:	f7ff fc16 	bl	8009a7c <memchr>
 800a250:	b138      	cbz	r0, 800a262 <_svfiprintf_r+0x142>
 800a252:	2340      	movs	r3, #64	; 0x40
 800a254:	1b40      	subs	r0, r0, r5
 800a256:	fa03 f000 	lsl.w	r0, r3, r0
 800a25a:	9b04      	ldr	r3, [sp, #16]
 800a25c:	3701      	adds	r7, #1
 800a25e:	4303      	orrs	r3, r0
 800a260:	9304      	str	r3, [sp, #16]
 800a262:	7839      	ldrb	r1, [r7, #0]
 800a264:	2206      	movs	r2, #6
 800a266:	4827      	ldr	r0, [pc, #156]	; (800a304 <_svfiprintf_r+0x1e4>)
 800a268:	1c7e      	adds	r6, r7, #1
 800a26a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a26e:	f7ff fc05 	bl	8009a7c <memchr>
 800a272:	2800      	cmp	r0, #0
 800a274:	d038      	beq.n	800a2e8 <_svfiprintf_r+0x1c8>
 800a276:	4b24      	ldr	r3, [pc, #144]	; (800a308 <_svfiprintf_r+0x1e8>)
 800a278:	bb13      	cbnz	r3, 800a2c0 <_svfiprintf_r+0x1a0>
 800a27a:	9b03      	ldr	r3, [sp, #12]
 800a27c:	3307      	adds	r3, #7
 800a27e:	f023 0307 	bic.w	r3, r3, #7
 800a282:	3308      	adds	r3, #8
 800a284:	9303      	str	r3, [sp, #12]
 800a286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a288:	444b      	add	r3, r9
 800a28a:	9309      	str	r3, [sp, #36]	; 0x24
 800a28c:	e76d      	b.n	800a16a <_svfiprintf_r+0x4a>
 800a28e:	fb05 3202 	mla	r2, r5, r2, r3
 800a292:	2001      	movs	r0, #1
 800a294:	460f      	mov	r7, r1
 800a296:	e7a6      	b.n	800a1e6 <_svfiprintf_r+0xc6>
 800a298:	2300      	movs	r3, #0
 800a29a:	250a      	movs	r5, #10
 800a29c:	4619      	mov	r1, r3
 800a29e:	3701      	adds	r7, #1
 800a2a0:	9305      	str	r3, [sp, #20]
 800a2a2:	4638      	mov	r0, r7
 800a2a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2a8:	3a30      	subs	r2, #48	; 0x30
 800a2aa:	2a09      	cmp	r2, #9
 800a2ac:	d903      	bls.n	800a2b6 <_svfiprintf_r+0x196>
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d0c8      	beq.n	800a244 <_svfiprintf_r+0x124>
 800a2b2:	9105      	str	r1, [sp, #20]
 800a2b4:	e7c6      	b.n	800a244 <_svfiprintf_r+0x124>
 800a2b6:	fb05 2101 	mla	r1, r5, r1, r2
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	4607      	mov	r7, r0
 800a2be:	e7f0      	b.n	800a2a2 <_svfiprintf_r+0x182>
 800a2c0:	ab03      	add	r3, sp, #12
 800a2c2:	9300      	str	r3, [sp, #0]
 800a2c4:	4622      	mov	r2, r4
 800a2c6:	4b11      	ldr	r3, [pc, #68]	; (800a30c <_svfiprintf_r+0x1ec>)
 800a2c8:	a904      	add	r1, sp, #16
 800a2ca:	4640      	mov	r0, r8
 800a2cc:	f7fe f976 	bl	80085bc <_printf_float>
 800a2d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a2d4:	4681      	mov	r9, r0
 800a2d6:	d1d6      	bne.n	800a286 <_svfiprintf_r+0x166>
 800a2d8:	89a3      	ldrh	r3, [r4, #12]
 800a2da:	065b      	lsls	r3, r3, #25
 800a2dc:	f53f af35 	bmi.w	800a14a <_svfiprintf_r+0x2a>
 800a2e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2e2:	b01d      	add	sp, #116	; 0x74
 800a2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e8:	ab03      	add	r3, sp, #12
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	4622      	mov	r2, r4
 800a2ee:	4b07      	ldr	r3, [pc, #28]	; (800a30c <_svfiprintf_r+0x1ec>)
 800a2f0:	a904      	add	r1, sp, #16
 800a2f2:	4640      	mov	r0, r8
 800a2f4:	f7fe fc0e 	bl	8008b14 <_printf_i>
 800a2f8:	e7ea      	b.n	800a2d0 <_svfiprintf_r+0x1b0>
 800a2fa:	bf00      	nop
 800a2fc:	0800a5dc 	.word	0x0800a5dc
 800a300:	0800a5e2 	.word	0x0800a5e2
 800a304:	0800a5e6 	.word	0x0800a5e6
 800a308:	080085bd 	.word	0x080085bd
 800a30c:	0800a06b 	.word	0x0800a06b

0800a310 <__ascii_mbtowc>:
 800a310:	b082      	sub	sp, #8
 800a312:	b901      	cbnz	r1, 800a316 <__ascii_mbtowc+0x6>
 800a314:	a901      	add	r1, sp, #4
 800a316:	b142      	cbz	r2, 800a32a <__ascii_mbtowc+0x1a>
 800a318:	b14b      	cbz	r3, 800a32e <__ascii_mbtowc+0x1e>
 800a31a:	7813      	ldrb	r3, [r2, #0]
 800a31c:	600b      	str	r3, [r1, #0]
 800a31e:	7812      	ldrb	r2, [r2, #0]
 800a320:	1c10      	adds	r0, r2, #0
 800a322:	bf18      	it	ne
 800a324:	2001      	movne	r0, #1
 800a326:	b002      	add	sp, #8
 800a328:	4770      	bx	lr
 800a32a:	4610      	mov	r0, r2
 800a32c:	e7fb      	b.n	800a326 <__ascii_mbtowc+0x16>
 800a32e:	f06f 0001 	mvn.w	r0, #1
 800a332:	e7f8      	b.n	800a326 <__ascii_mbtowc+0x16>

0800a334 <memmove>:
 800a334:	4288      	cmp	r0, r1
 800a336:	b510      	push	{r4, lr}
 800a338:	eb01 0302 	add.w	r3, r1, r2
 800a33c:	d807      	bhi.n	800a34e <memmove+0x1a>
 800a33e:	1e42      	subs	r2, r0, #1
 800a340:	4299      	cmp	r1, r3
 800a342:	d00a      	beq.n	800a35a <memmove+0x26>
 800a344:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a348:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a34c:	e7f8      	b.n	800a340 <memmove+0xc>
 800a34e:	4283      	cmp	r3, r0
 800a350:	d9f5      	bls.n	800a33e <memmove+0xa>
 800a352:	1881      	adds	r1, r0, r2
 800a354:	1ad2      	subs	r2, r2, r3
 800a356:	42d3      	cmn	r3, r2
 800a358:	d100      	bne.n	800a35c <memmove+0x28>
 800a35a:	bd10      	pop	{r4, pc}
 800a35c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a360:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a364:	e7f7      	b.n	800a356 <memmove+0x22>

0800a366 <_realloc_r>:
 800a366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a368:	4607      	mov	r7, r0
 800a36a:	4614      	mov	r4, r2
 800a36c:	460e      	mov	r6, r1
 800a36e:	b921      	cbnz	r1, 800a37a <_realloc_r+0x14>
 800a370:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a374:	4611      	mov	r1, r2
 800a376:	f7fe b835 	b.w	80083e4 <_malloc_r>
 800a37a:	b922      	cbnz	r2, 800a386 <_realloc_r+0x20>
 800a37c:	f7fd ffe6 	bl	800834c <_free_r>
 800a380:	4625      	mov	r5, r4
 800a382:	4628      	mov	r0, r5
 800a384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a386:	f000 f821 	bl	800a3cc <_malloc_usable_size_r>
 800a38a:	42a0      	cmp	r0, r4
 800a38c:	d20f      	bcs.n	800a3ae <_realloc_r+0x48>
 800a38e:	4621      	mov	r1, r4
 800a390:	4638      	mov	r0, r7
 800a392:	f7fe f827 	bl	80083e4 <_malloc_r>
 800a396:	4605      	mov	r5, r0
 800a398:	2800      	cmp	r0, #0
 800a39a:	d0f2      	beq.n	800a382 <_realloc_r+0x1c>
 800a39c:	4631      	mov	r1, r6
 800a39e:	4622      	mov	r2, r4
 800a3a0:	f7ff fb7a 	bl	8009a98 <memcpy>
 800a3a4:	4631      	mov	r1, r6
 800a3a6:	4638      	mov	r0, r7
 800a3a8:	f7fd ffd0 	bl	800834c <_free_r>
 800a3ac:	e7e9      	b.n	800a382 <_realloc_r+0x1c>
 800a3ae:	4635      	mov	r5, r6
 800a3b0:	e7e7      	b.n	800a382 <_realloc_r+0x1c>

0800a3b2 <__ascii_wctomb>:
 800a3b2:	b149      	cbz	r1, 800a3c8 <__ascii_wctomb+0x16>
 800a3b4:	2aff      	cmp	r2, #255	; 0xff
 800a3b6:	bf8b      	itete	hi
 800a3b8:	238a      	movhi	r3, #138	; 0x8a
 800a3ba:	700a      	strbls	r2, [r1, #0]
 800a3bc:	6003      	strhi	r3, [r0, #0]
 800a3be:	2001      	movls	r0, #1
 800a3c0:	bf88      	it	hi
 800a3c2:	f04f 30ff 	movhi.w	r0, #4294967295
 800a3c6:	4770      	bx	lr
 800a3c8:	4608      	mov	r0, r1
 800a3ca:	4770      	bx	lr

0800a3cc <_malloc_usable_size_r>:
 800a3cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3d0:	1f18      	subs	r0, r3, #4
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	bfbc      	itt	lt
 800a3d6:	580b      	ldrlt	r3, [r1, r0]
 800a3d8:	18c0      	addlt	r0, r0, r3
 800a3da:	4770      	bx	lr

0800a3dc <_init>:
 800a3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3de:	bf00      	nop
 800a3e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3e2:	bc08      	pop	{r3}
 800a3e4:	469e      	mov	lr, r3
 800a3e6:	4770      	bx	lr

0800a3e8 <_fini>:
 800a3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ea:	bf00      	nop
 800a3ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ee:	bc08      	pop	{r3}
 800a3f0:	469e      	mov	lr, r3
 800a3f2:	4770      	bx	lr
