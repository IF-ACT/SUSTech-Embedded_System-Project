
LCD_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008718  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08008900  08008900  00018900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a10  08008a10  00020138  2**0
                  CONTENTS
  4 .ARM          00000000  08008a10  08008a10  00020138  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a10  08008a10  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a10  08008a10  00018a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a14  08008a14  00018a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  08008a18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000138  08008b50  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08008b50  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cfdb  00000000  00000000  00020161  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000255d  00000000  00000000  0002d13c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008b8  00000000  00000000  0002f6a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000760  00000000  00000000  0002ff58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017869  00000000  00000000  000306b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aadb  00000000  00000000  00047f21  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007999a  00000000  00000000  000529fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cc396  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002548  00000000  00000000  000cc414  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000138 	.word	0x20000138
 8000204:	00000000 	.word	0x00000000
 8000208:	080088e8 	.word	0x080088e8

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000013c 	.word	0x2000013c
 8000224:	080088e8 	.word	0x080088e8

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__aeabi_d2uiz>:
 80009d4:	004a      	lsls	r2, r1, #1
 80009d6:	d211      	bcs.n	80009fc <__aeabi_d2uiz+0x28>
 80009d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009dc:	d211      	bcs.n	8000a02 <__aeabi_d2uiz+0x2e>
 80009de:	d50d      	bpl.n	80009fc <__aeabi_d2uiz+0x28>
 80009e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e8:	d40e      	bmi.n	8000a08 <__aeabi_d2uiz+0x34>
 80009ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009f6:	fa23 f002 	lsr.w	r0, r3, r2
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a06:	d102      	bne.n	8000a0e <__aeabi_d2uiz+0x3a>
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	4770      	bx	lr
 8000a0e:	f04f 0000 	mov.w	r0, #0
 8000a12:	4770      	bx	lr

08000a14 <__aeabi_frsub>:
 8000a14:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a18:	e002      	b.n	8000a20 <__addsf3>
 8000a1a:	bf00      	nop

08000a1c <__aeabi_fsub>:
 8000a1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a20 <__addsf3>:
 8000a20:	0042      	lsls	r2, r0, #1
 8000a22:	bf1f      	itttt	ne
 8000a24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a28:	ea92 0f03 	teqne	r2, r3
 8000a2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a34:	d06a      	beq.n	8000b0c <__addsf3+0xec>
 8000a36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a3e:	bfc1      	itttt	gt
 8000a40:	18d2      	addgt	r2, r2, r3
 8000a42:	4041      	eorgt	r1, r0
 8000a44:	4048      	eorgt	r0, r1
 8000a46:	4041      	eorgt	r1, r0
 8000a48:	bfb8      	it	lt
 8000a4a:	425b      	neglt	r3, r3
 8000a4c:	2b19      	cmp	r3, #25
 8000a4e:	bf88      	it	hi
 8000a50:	4770      	bxhi	lr
 8000a52:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a66:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a6a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a6e:	bf18      	it	ne
 8000a70:	4249      	negne	r1, r1
 8000a72:	ea92 0f03 	teq	r2, r3
 8000a76:	d03f      	beq.n	8000af8 <__addsf3+0xd8>
 8000a78:	f1a2 0201 	sub.w	r2, r2, #1
 8000a7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a80:	eb10 000c 	adds.w	r0, r0, ip
 8000a84:	f1c3 0320 	rsb	r3, r3, #32
 8000a88:	fa01 f103 	lsl.w	r1, r1, r3
 8000a8c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a90:	d502      	bpl.n	8000a98 <__addsf3+0x78>
 8000a92:	4249      	negs	r1, r1
 8000a94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a98:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a9c:	d313      	bcc.n	8000ac6 <__addsf3+0xa6>
 8000a9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000aa2:	d306      	bcc.n	8000ab2 <__addsf3+0x92>
 8000aa4:	0840      	lsrs	r0, r0, #1
 8000aa6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aaa:	f102 0201 	add.w	r2, r2, #1
 8000aae:	2afe      	cmp	r2, #254	; 0xfe
 8000ab0:	d251      	bcs.n	8000b56 <__addsf3+0x136>
 8000ab2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ab6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aba:	bf08      	it	eq
 8000abc:	f020 0001 	biceq.w	r0, r0, #1
 8000ac0:	ea40 0003 	orr.w	r0, r0, r3
 8000ac4:	4770      	bx	lr
 8000ac6:	0049      	lsls	r1, r1, #1
 8000ac8:	eb40 0000 	adc.w	r0, r0, r0
 8000acc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ad0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ad4:	d1ed      	bne.n	8000ab2 <__addsf3+0x92>
 8000ad6:	fab0 fc80 	clz	ip, r0
 8000ada:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ade:	ebb2 020c 	subs.w	r2, r2, ip
 8000ae2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ae6:	bfaa      	itet	ge
 8000ae8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aec:	4252      	neglt	r2, r2
 8000aee:	4318      	orrge	r0, r3
 8000af0:	bfbc      	itt	lt
 8000af2:	40d0      	lsrlt	r0, r2
 8000af4:	4318      	orrlt	r0, r3
 8000af6:	4770      	bx	lr
 8000af8:	f092 0f00 	teq	r2, #0
 8000afc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b00:	bf06      	itte	eq
 8000b02:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b06:	3201      	addeq	r2, #1
 8000b08:	3b01      	subne	r3, #1
 8000b0a:	e7b5      	b.n	8000a78 <__addsf3+0x58>
 8000b0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b14:	bf18      	it	ne
 8000b16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1a:	d021      	beq.n	8000b60 <__addsf3+0x140>
 8000b1c:	ea92 0f03 	teq	r2, r3
 8000b20:	d004      	beq.n	8000b2c <__addsf3+0x10c>
 8000b22:	f092 0f00 	teq	r2, #0
 8000b26:	bf08      	it	eq
 8000b28:	4608      	moveq	r0, r1
 8000b2a:	4770      	bx	lr
 8000b2c:	ea90 0f01 	teq	r0, r1
 8000b30:	bf1c      	itt	ne
 8000b32:	2000      	movne	r0, #0
 8000b34:	4770      	bxne	lr
 8000b36:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b3a:	d104      	bne.n	8000b46 <__addsf3+0x126>
 8000b3c:	0040      	lsls	r0, r0, #1
 8000b3e:	bf28      	it	cs
 8000b40:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b44:	4770      	bx	lr
 8000b46:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b4a:	bf3c      	itt	cc
 8000b4c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b50:	4770      	bxcc	lr
 8000b52:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b56:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	4770      	bx	lr
 8000b60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b64:	bf16      	itet	ne
 8000b66:	4608      	movne	r0, r1
 8000b68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b6c:	4601      	movne	r1, r0
 8000b6e:	0242      	lsls	r2, r0, #9
 8000b70:	bf06      	itte	eq
 8000b72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b76:	ea90 0f01 	teqeq	r0, r1
 8000b7a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_ui2f>:
 8000b80:	f04f 0300 	mov.w	r3, #0
 8000b84:	e004      	b.n	8000b90 <__aeabi_i2f+0x8>
 8000b86:	bf00      	nop

08000b88 <__aeabi_i2f>:
 8000b88:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b8c:	bf48      	it	mi
 8000b8e:	4240      	negmi	r0, r0
 8000b90:	ea5f 0c00 	movs.w	ip, r0
 8000b94:	bf08      	it	eq
 8000b96:	4770      	bxeq	lr
 8000b98:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b9c:	4601      	mov	r1, r0
 8000b9e:	f04f 0000 	mov.w	r0, #0
 8000ba2:	e01c      	b.n	8000bde <__aeabi_l2f+0x2a>

08000ba4 <__aeabi_ul2f>:
 8000ba4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba8:	bf08      	it	eq
 8000baa:	4770      	bxeq	lr
 8000bac:	f04f 0300 	mov.w	r3, #0
 8000bb0:	e00a      	b.n	8000bc8 <__aeabi_l2f+0x14>
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_l2f>:
 8000bb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bb8:	bf08      	it	eq
 8000bba:	4770      	bxeq	lr
 8000bbc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bc0:	d502      	bpl.n	8000bc8 <__aeabi_l2f+0x14>
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc8:	ea5f 0c01 	movs.w	ip, r1
 8000bcc:	bf02      	ittt	eq
 8000bce:	4684      	moveq	ip, r0
 8000bd0:	4601      	moveq	r1, r0
 8000bd2:	2000      	moveq	r0, #0
 8000bd4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bd8:	bf08      	it	eq
 8000bda:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bde:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000be2:	fabc f28c 	clz	r2, ip
 8000be6:	3a08      	subs	r2, #8
 8000be8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bec:	db10      	blt.n	8000c10 <__aeabi_l2f+0x5c>
 8000bee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bf2:	4463      	add	r3, ip
 8000bf4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bf8:	f1c2 0220 	rsb	r2, r2, #32
 8000bfc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c00:	fa20 f202 	lsr.w	r2, r0, r2
 8000c04:	eb43 0002 	adc.w	r0, r3, r2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f102 0220 	add.w	r2, r2, #32
 8000c14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c18:	f1c2 0220 	rsb	r2, r2, #32
 8000c1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c20:	fa21 f202 	lsr.w	r2, r1, r2
 8000c24:	eb43 0002 	adc.w	r0, r3, r2
 8000c28:	bf08      	it	eq
 8000c2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_fmul>:
 8000c30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c38:	bf1e      	ittt	ne
 8000c3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c3e:	ea92 0f0c 	teqne	r2, ip
 8000c42:	ea93 0f0c 	teqne	r3, ip
 8000c46:	d06f      	beq.n	8000d28 <__aeabi_fmul+0xf8>
 8000c48:	441a      	add	r2, r3
 8000c4a:	ea80 0c01 	eor.w	ip, r0, r1
 8000c4e:	0240      	lsls	r0, r0, #9
 8000c50:	bf18      	it	ne
 8000c52:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c56:	d01e      	beq.n	8000c96 <__aeabi_fmul+0x66>
 8000c58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c5c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c60:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c64:	fba0 3101 	umull	r3, r1, r0, r1
 8000c68:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c6c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c70:	bf3e      	ittt	cc
 8000c72:	0049      	lslcc	r1, r1, #1
 8000c74:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c78:	005b      	lslcc	r3, r3, #1
 8000c7a:	ea40 0001 	orr.w	r0, r0, r1
 8000c7e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c82:	2afd      	cmp	r2, #253	; 0xfd
 8000c84:	d81d      	bhi.n	8000cc2 <__aeabi_fmul+0x92>
 8000c86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c8e:	bf08      	it	eq
 8000c90:	f020 0001 	biceq.w	r0, r0, #1
 8000c94:	4770      	bx	lr
 8000c96:	f090 0f00 	teq	r0, #0
 8000c9a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c9e:	bf08      	it	eq
 8000ca0:	0249      	lsleq	r1, r1, #9
 8000ca2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ca6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000caa:	3a7f      	subs	r2, #127	; 0x7f
 8000cac:	bfc2      	ittt	gt
 8000cae:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cb2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cb6:	4770      	bxgt	lr
 8000cb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	3a01      	subs	r2, #1
 8000cc2:	dc5d      	bgt.n	8000d80 <__aeabi_fmul+0x150>
 8000cc4:	f112 0f19 	cmn.w	r2, #25
 8000cc8:	bfdc      	itt	le
 8000cca:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cce:	4770      	bxle	lr
 8000cd0:	f1c2 0200 	rsb	r2, r2, #0
 8000cd4:	0041      	lsls	r1, r0, #1
 8000cd6:	fa21 f102 	lsr.w	r1, r1, r2
 8000cda:	f1c2 0220 	rsb	r2, r2, #32
 8000cde:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ce6:	f140 0000 	adc.w	r0, r0, #0
 8000cea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cee:	bf08      	it	eq
 8000cf0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf4:	4770      	bx	lr
 8000cf6:	f092 0f00 	teq	r2, #0
 8000cfa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cfe:	bf02      	ittt	eq
 8000d00:	0040      	lsleq	r0, r0, #1
 8000d02:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d06:	3a01      	subeq	r2, #1
 8000d08:	d0f9      	beq.n	8000cfe <__aeabi_fmul+0xce>
 8000d0a:	ea40 000c 	orr.w	r0, r0, ip
 8000d0e:	f093 0f00 	teq	r3, #0
 8000d12:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d16:	bf02      	ittt	eq
 8000d18:	0049      	lsleq	r1, r1, #1
 8000d1a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d1e:	3b01      	subeq	r3, #1
 8000d20:	d0f9      	beq.n	8000d16 <__aeabi_fmul+0xe6>
 8000d22:	ea41 010c 	orr.w	r1, r1, ip
 8000d26:	e78f      	b.n	8000c48 <__aeabi_fmul+0x18>
 8000d28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	bf18      	it	ne
 8000d32:	ea93 0f0c 	teqne	r3, ip
 8000d36:	d00a      	beq.n	8000d4e <__aeabi_fmul+0x11e>
 8000d38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d3c:	bf18      	it	ne
 8000d3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d42:	d1d8      	bne.n	8000cf6 <__aeabi_fmul+0xc6>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d4c:	4770      	bx	lr
 8000d4e:	f090 0f00 	teq	r0, #0
 8000d52:	bf17      	itett	ne
 8000d54:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d58:	4608      	moveq	r0, r1
 8000d5a:	f091 0f00 	teqne	r1, #0
 8000d5e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d62:	d014      	beq.n	8000d8e <__aeabi_fmul+0x15e>
 8000d64:	ea92 0f0c 	teq	r2, ip
 8000d68:	d101      	bne.n	8000d6e <__aeabi_fmul+0x13e>
 8000d6a:	0242      	lsls	r2, r0, #9
 8000d6c:	d10f      	bne.n	8000d8e <__aeabi_fmul+0x15e>
 8000d6e:	ea93 0f0c 	teq	r3, ip
 8000d72:	d103      	bne.n	8000d7c <__aeabi_fmul+0x14c>
 8000d74:	024b      	lsls	r3, r1, #9
 8000d76:	bf18      	it	ne
 8000d78:	4608      	movne	r0, r1
 8000d7a:	d108      	bne.n	8000d8e <__aeabi_fmul+0x15e>
 8000d7c:	ea80 0001 	eor.w	r0, r0, r1
 8000d80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8c:	4770      	bx	lr
 8000d8e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d92:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fdiv>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d069      	beq.n	8000e84 <__aeabi_fdiv+0xec>
 8000db0:	eba2 0203 	sub.w	r2, r2, r3
 8000db4:	ea80 0c01 	eor.w	ip, r0, r1
 8000db8:	0249      	lsls	r1, r1, #9
 8000dba:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000dbe:	d037      	beq.n	8000e30 <__aeabi_fdiv+0x98>
 8000dc0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dc4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000dc8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000dcc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd0:	428b      	cmp	r3, r1
 8000dd2:	bf38      	it	cc
 8000dd4:	005b      	lslcc	r3, r3, #1
 8000dd6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dda:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000dde:	428b      	cmp	r3, r1
 8000de0:	bf24      	itt	cs
 8000de2:	1a5b      	subcs	r3, r3, r1
 8000de4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000de8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000dec:	bf24      	itt	cs
 8000dee:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000df2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000df6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dfa:	bf24      	itt	cs
 8000dfc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e04:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e08:	bf24      	itt	cs
 8000e0a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e0e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e12:	011b      	lsls	r3, r3, #4
 8000e14:	bf18      	it	ne
 8000e16:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e1a:	d1e0      	bne.n	8000dde <__aeabi_fdiv+0x46>
 8000e1c:	2afd      	cmp	r2, #253	; 0xfd
 8000e1e:	f63f af50 	bhi.w	8000cc2 <__aeabi_fmul+0x92>
 8000e22:	428b      	cmp	r3, r1
 8000e24:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e28:	bf08      	it	eq
 8000e2a:	f020 0001 	biceq.w	r0, r0, #1
 8000e2e:	4770      	bx	lr
 8000e30:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e34:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e38:	327f      	adds	r2, #127	; 0x7f
 8000e3a:	bfc2      	ittt	gt
 8000e3c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e40:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e44:	4770      	bxgt	lr
 8000e46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e4a:	f04f 0300 	mov.w	r3, #0
 8000e4e:	3a01      	subs	r2, #1
 8000e50:	e737      	b.n	8000cc2 <__aeabi_fmul+0x92>
 8000e52:	f092 0f00 	teq	r2, #0
 8000e56:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0040      	lsleq	r0, r0, #1
 8000e5e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e62:	3a01      	subeq	r2, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fdiv+0xc2>
 8000e66:	ea40 000c 	orr.w	r0, r0, ip
 8000e6a:	f093 0f00 	teq	r3, #0
 8000e6e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e72:	bf02      	ittt	eq
 8000e74:	0049      	lsleq	r1, r1, #1
 8000e76:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e7a:	3b01      	subeq	r3, #1
 8000e7c:	d0f9      	beq.n	8000e72 <__aeabi_fdiv+0xda>
 8000e7e:	ea41 010c 	orr.w	r1, r1, ip
 8000e82:	e795      	b.n	8000db0 <__aeabi_fdiv+0x18>
 8000e84:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e88:	ea92 0f0c 	teq	r2, ip
 8000e8c:	d108      	bne.n	8000ea0 <__aeabi_fdiv+0x108>
 8000e8e:	0242      	lsls	r2, r0, #9
 8000e90:	f47f af7d 	bne.w	8000d8e <__aeabi_fmul+0x15e>
 8000e94:	ea93 0f0c 	teq	r3, ip
 8000e98:	f47f af70 	bne.w	8000d7c <__aeabi_fmul+0x14c>
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	e776      	b.n	8000d8e <__aeabi_fmul+0x15e>
 8000ea0:	ea93 0f0c 	teq	r3, ip
 8000ea4:	d104      	bne.n	8000eb0 <__aeabi_fdiv+0x118>
 8000ea6:	024b      	lsls	r3, r1, #9
 8000ea8:	f43f af4c 	beq.w	8000d44 <__aeabi_fmul+0x114>
 8000eac:	4608      	mov	r0, r1
 8000eae:	e76e      	b.n	8000d8e <__aeabi_fmul+0x15e>
 8000eb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eb4:	bf18      	it	ne
 8000eb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eba:	d1ca      	bne.n	8000e52 <__aeabi_fdiv+0xba>
 8000ebc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ec0:	f47f af5c 	bne.w	8000d7c <__aeabi_fmul+0x14c>
 8000ec4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ec8:	f47f af3c 	bne.w	8000d44 <__aeabi_fmul+0x114>
 8000ecc:	e75f      	b.n	8000d8e <__aeabi_fmul+0x15e>
 8000ece:	bf00      	nop

08000ed0 <__aeabi_f2uiz>:
 8000ed0:	0042      	lsls	r2, r0, #1
 8000ed2:	d20e      	bcs.n	8000ef2 <__aeabi_f2uiz+0x22>
 8000ed4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ed8:	d30b      	bcc.n	8000ef2 <__aeabi_f2uiz+0x22>
 8000eda:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ede:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ee2:	d409      	bmi.n	8000ef8 <__aeabi_f2uiz+0x28>
 8000ee4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ee8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000eec:	fa23 f002 	lsr.w	r0, r3, r2
 8000ef0:	4770      	bx	lr
 8000ef2:	f04f 0000 	mov.w	r0, #0
 8000ef6:	4770      	bx	lr
 8000ef8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000efc:	d101      	bne.n	8000f02 <__aeabi_f2uiz+0x32>
 8000efe:	0242      	lsls	r2, r0, #9
 8000f00:	d102      	bne.n	8000f08 <__aeabi_f2uiz+0x38>
 8000f02:	f04f 30ff 	mov.w	r0, #4294967295
 8000f06:	4770      	bx	lr
 8000f08:	f04f 0000 	mov.w	r0, #0
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <HAL_Init+0x28>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <HAL_Init+0x28>)
 8000f1a:	f043 0310 	orr.w	r3, r3, #16
 8000f1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 f945 	bl	80011b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f000 f808 	bl	8000f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f2c:	f006 fc2c 	bl	8007788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40022000 	.word	0x40022000

08000f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_InitTick+0x54>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_InitTick+0x58>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f95d 	bl	800121a <HAL_SYSTICK_Config>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00e      	b.n	8000f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b0f      	cmp	r3, #15
 8000f6e:	d80a      	bhi.n	8000f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f70:	2200      	movs	r2, #0
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f000 f925 	bl	80011c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f7c:	4a06      	ldr	r2, [pc, #24]	; (8000f98 <HAL_InitTick+0x5c>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e000      	b.n	8000f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000008 	.word	0x20000008
 8000f94:	20000004 	.word	0x20000004
 8000f98:	20000000 	.word	0x20000000

08000f9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <HAL_IncTick+0x1c>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <HAL_IncTick+0x20>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	4a03      	ldr	r2, [pc, #12]	; (8000fbc <HAL_IncTick+0x20>)
 8000fae:	6013      	str	r3, [r2, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	20000004 	.word	0x20000004
 8000fbc:	20000168 	.word	0x20000168

08000fc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc4:	4b02      	ldr	r3, [pc, #8]	; (8000fd0 <HAL_GetTick+0x10>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	20000168 	.word	0x20000168

08000fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fdc:	f7ff fff0 	bl	8000fc0 <HAL_GetTick>
 8000fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fec:	d005      	beq.n	8000ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <HAL_Delay+0x40>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ffa:	bf00      	nop
 8000ffc:	f7ff ffe0 	bl	8000fc0 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	429a      	cmp	r2, r3
 800100a:	d8f7      	bhi.n	8000ffc <HAL_Delay+0x28>
  {
  }
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000004 	.word	0x20000004

08001018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	60d3      	str	r3, [r2, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <__NVIC_GetPriorityGrouping+0x18>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	f003 0307 	and.w	r3, r3, #7
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	2b00      	cmp	r3, #0
 800108c:	db0b      	blt.n	80010a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 021f 	and.w	r2, r3, #31
 8001094:	4906      	ldr	r1, [pc, #24]	; (80010b0 <__NVIC_EnableIRQ+0x34>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	095b      	lsrs	r3, r3, #5
 800109c:	2001      	movs	r0, #1
 800109e:	fa00 f202 	lsl.w	r2, r0, r2
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	e000e100 	.word	0xe000e100

080010b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	db0a      	blt.n	80010de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	490c      	ldr	r1, [pc, #48]	; (8001100 <__NVIC_SetPriority+0x4c>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	0112      	lsls	r2, r2, #4
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	440b      	add	r3, r1
 80010d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010dc:	e00a      	b.n	80010f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4908      	ldr	r1, [pc, #32]	; (8001104 <__NVIC_SetPriority+0x50>)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	3b04      	subs	r3, #4
 80010ec:	0112      	lsls	r2, r2, #4
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	440b      	add	r3, r1
 80010f2:	761a      	strb	r2, [r3, #24]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000e100 	.word	0xe000e100
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	; 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f1c3 0307 	rsb	r3, r3, #7
 8001122:	2b04      	cmp	r3, #4
 8001124:	bf28      	it	cs
 8001126:	2304      	movcs	r3, #4
 8001128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3304      	adds	r3, #4
 800112e:	2b06      	cmp	r3, #6
 8001130:	d902      	bls.n	8001138 <NVIC_EncodePriority+0x30>
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3b03      	subs	r3, #3
 8001136:	e000      	b.n	800113a <NVIC_EncodePriority+0x32>
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	f04f 32ff 	mov.w	r2, #4294967295
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43da      	mvns	r2, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	401a      	ands	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001150:	f04f 31ff 	mov.w	r1, #4294967295
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa01 f303 	lsl.w	r3, r1, r3
 800115a:	43d9      	mvns	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	4313      	orrs	r3, r2
         );
}
 8001162:	4618      	mov	r0, r3
 8001164:	3724      	adds	r7, #36	; 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800117c:	d301      	bcc.n	8001182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117e:	2301      	movs	r3, #1
 8001180:	e00f      	b.n	80011a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <SysTick_Config+0x40>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118a:	210f      	movs	r1, #15
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	f7ff ff90 	bl	80010b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <SysTick_Config+0x40>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <SysTick_Config+0x40>)
 800119c:	2207      	movs	r2, #7
 800119e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	e000e010 	.word	0xe000e010

080011b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff2d 	bl	8001018 <__NVIC_SetPriorityGrouping>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d8:	f7ff ff42 	bl	8001060 <__NVIC_GetPriorityGrouping>
 80011dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	6978      	ldr	r0, [r7, #20]
 80011e4:	f7ff ff90 	bl	8001108 <NVIC_EncodePriority>
 80011e8:	4602      	mov	r2, r0
 80011ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff5f 	bl	80010b4 <__NVIC_SetPriority>
}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff35 	bl	800107c <__NVIC_EnableIRQ>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffa2 	bl	800116c <SysTick_Config>
 8001228:	4603      	mov	r3, r0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	b480      	push	{r7}
 8001236:	b08b      	sub	sp, #44	; 0x2c
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001246:	e133      	b.n	80014b0 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001248:	2201      	movs	r2, #1
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	69fa      	ldr	r2, [r7, #28]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	429a      	cmp	r2, r3
 8001262:	f040 8122 	bne.w	80014aa <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b12      	cmp	r3, #18
 800126c:	d034      	beq.n	80012d8 <HAL_GPIO_Init+0xa4>
 800126e:	2b12      	cmp	r3, #18
 8001270:	d80d      	bhi.n	800128e <HAL_GPIO_Init+0x5a>
 8001272:	2b02      	cmp	r3, #2
 8001274:	d02b      	beq.n	80012ce <HAL_GPIO_Init+0x9a>
 8001276:	2b02      	cmp	r3, #2
 8001278:	d804      	bhi.n	8001284 <HAL_GPIO_Init+0x50>
 800127a:	2b00      	cmp	r3, #0
 800127c:	d031      	beq.n	80012e2 <HAL_GPIO_Init+0xae>
 800127e:	2b01      	cmp	r3, #1
 8001280:	d01c      	beq.n	80012bc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001282:	e048      	b.n	8001316 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001284:	2b03      	cmp	r3, #3
 8001286:	d043      	beq.n	8001310 <HAL_GPIO_Init+0xdc>
 8001288:	2b11      	cmp	r3, #17
 800128a:	d01b      	beq.n	80012c4 <HAL_GPIO_Init+0x90>
          break;
 800128c:	e043      	b.n	8001316 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800128e:	4a8f      	ldr	r2, [pc, #572]	; (80014cc <HAL_GPIO_Init+0x298>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d026      	beq.n	80012e2 <HAL_GPIO_Init+0xae>
 8001294:	4a8d      	ldr	r2, [pc, #564]	; (80014cc <HAL_GPIO_Init+0x298>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d806      	bhi.n	80012a8 <HAL_GPIO_Init+0x74>
 800129a:	4a8d      	ldr	r2, [pc, #564]	; (80014d0 <HAL_GPIO_Init+0x29c>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d020      	beq.n	80012e2 <HAL_GPIO_Init+0xae>
 80012a0:	4a8c      	ldr	r2, [pc, #560]	; (80014d4 <HAL_GPIO_Init+0x2a0>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d01d      	beq.n	80012e2 <HAL_GPIO_Init+0xae>
          break;
 80012a6:	e036      	b.n	8001316 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012a8:	4a8b      	ldr	r2, [pc, #556]	; (80014d8 <HAL_GPIO_Init+0x2a4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d019      	beq.n	80012e2 <HAL_GPIO_Init+0xae>
 80012ae:	4a8b      	ldr	r2, [pc, #556]	; (80014dc <HAL_GPIO_Init+0x2a8>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d016      	beq.n	80012e2 <HAL_GPIO_Init+0xae>
 80012b4:	4a8a      	ldr	r2, [pc, #552]	; (80014e0 <HAL_GPIO_Init+0x2ac>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0xae>
          break;
 80012ba:	e02c      	b.n	8001316 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	623b      	str	r3, [r7, #32]
          break;
 80012c2:	e028      	b.n	8001316 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	3304      	adds	r3, #4
 80012ca:	623b      	str	r3, [r7, #32]
          break;
 80012cc:	e023      	b.n	8001316 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	3308      	adds	r3, #8
 80012d4:	623b      	str	r3, [r7, #32]
          break;
 80012d6:	e01e      	b.n	8001316 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	330c      	adds	r3, #12
 80012de:	623b      	str	r3, [r7, #32]
          break;
 80012e0:	e019      	b.n	8001316 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012ea:	2304      	movs	r3, #4
 80012ec:	623b      	str	r3, [r7, #32]
          break;
 80012ee:	e012      	b.n	8001316 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d105      	bne.n	8001304 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f8:	2308      	movs	r3, #8
 80012fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69fa      	ldr	r2, [r7, #28]
 8001300:	611a      	str	r2, [r3, #16]
          break;
 8001302:	e008      	b.n	8001316 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001304:	2308      	movs	r3, #8
 8001306:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69fa      	ldr	r2, [r7, #28]
 800130c:	615a      	str	r2, [r3, #20]
          break;
 800130e:	e002      	b.n	8001316 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001310:	2300      	movs	r3, #0
 8001312:	623b      	str	r3, [r7, #32]
          break;
 8001314:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	2bff      	cmp	r3, #255	; 0xff
 800131a:	d801      	bhi.n	8001320 <HAL_GPIO_Init+0xec>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	e001      	b.n	8001324 <HAL_GPIO_Init+0xf0>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3304      	adds	r3, #4
 8001324:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	2bff      	cmp	r3, #255	; 0xff
 800132a:	d802      	bhi.n	8001332 <HAL_GPIO_Init+0xfe>
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	e002      	b.n	8001338 <HAL_GPIO_Init+0x104>
 8001332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001334:	3b08      	subs	r3, #8
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	210f      	movs	r1, #15
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43db      	mvns	r3, r3
 8001348:	401a      	ands	r2, r3
 800134a:	6a39      	ldr	r1, [r7, #32]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	fa01 f303 	lsl.w	r3, r1, r3
 8001352:	431a      	orrs	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 80a2 	beq.w	80014aa <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001366:	4b5f      	ldr	r3, [pc, #380]	; (80014e4 <HAL_GPIO_Init+0x2b0>)
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	4a5e      	ldr	r2, [pc, #376]	; (80014e4 <HAL_GPIO_Init+0x2b0>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6193      	str	r3, [r2, #24]
 8001372:	4b5c      	ldr	r3, [pc, #368]	; (80014e4 <HAL_GPIO_Init+0x2b0>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800137e:	4a5a      	ldr	r2, [pc, #360]	; (80014e8 <HAL_GPIO_Init+0x2b4>)
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	089b      	lsrs	r3, r3, #2
 8001384:	3302      	adds	r3, #2
 8001386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	220f      	movs	r2, #15
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	4013      	ands	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a51      	ldr	r2, [pc, #324]	; (80014ec <HAL_GPIO_Init+0x2b8>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d01f      	beq.n	80013ea <HAL_GPIO_Init+0x1b6>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a50      	ldr	r2, [pc, #320]	; (80014f0 <HAL_GPIO_Init+0x2bc>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d019      	beq.n	80013e6 <HAL_GPIO_Init+0x1b2>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4f      	ldr	r2, [pc, #316]	; (80014f4 <HAL_GPIO_Init+0x2c0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d013      	beq.n	80013e2 <HAL_GPIO_Init+0x1ae>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4e      	ldr	r2, [pc, #312]	; (80014f8 <HAL_GPIO_Init+0x2c4>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d00d      	beq.n	80013de <HAL_GPIO_Init+0x1aa>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4d      	ldr	r2, [pc, #308]	; (80014fc <HAL_GPIO_Init+0x2c8>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d007      	beq.n	80013da <HAL_GPIO_Init+0x1a6>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4c      	ldr	r2, [pc, #304]	; (8001500 <HAL_GPIO_Init+0x2cc>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d101      	bne.n	80013d6 <HAL_GPIO_Init+0x1a2>
 80013d2:	2305      	movs	r3, #5
 80013d4:	e00a      	b.n	80013ec <HAL_GPIO_Init+0x1b8>
 80013d6:	2306      	movs	r3, #6
 80013d8:	e008      	b.n	80013ec <HAL_GPIO_Init+0x1b8>
 80013da:	2304      	movs	r3, #4
 80013dc:	e006      	b.n	80013ec <HAL_GPIO_Init+0x1b8>
 80013de:	2303      	movs	r3, #3
 80013e0:	e004      	b.n	80013ec <HAL_GPIO_Init+0x1b8>
 80013e2:	2302      	movs	r3, #2
 80013e4:	e002      	b.n	80013ec <HAL_GPIO_Init+0x1b8>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <HAL_GPIO_Init+0x1b8>
 80013ea:	2300      	movs	r3, #0
 80013ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ee:	f002 0203 	and.w	r2, r2, #3
 80013f2:	0092      	lsls	r2, r2, #2
 80013f4:	4093      	lsls	r3, r2
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013fc:	493a      	ldr	r1, [pc, #232]	; (80014e8 <HAL_GPIO_Init+0x2b4>)
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	089b      	lsrs	r3, r3, #2
 8001402:	3302      	adds	r3, #2
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d006      	beq.n	8001424 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001416:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	493a      	ldr	r1, [pc, #232]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	4313      	orrs	r3, r2
 8001420:	600b      	str	r3, [r1, #0]
 8001422:	e006      	b.n	8001432 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001424:	4b37      	ldr	r3, [pc, #220]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	43db      	mvns	r3, r3
 800142c:	4935      	ldr	r1, [pc, #212]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 800142e:	4013      	ands	r3, r2
 8001430:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d006      	beq.n	800144c <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800143e:	4b31      	ldr	r3, [pc, #196]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	4930      	ldr	r1, [pc, #192]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	604b      	str	r3, [r1, #4]
 800144a:	e006      	b.n	800145a <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800144c:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	43db      	mvns	r3, r3
 8001454:	492b      	ldr	r1, [pc, #172]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 8001456:	4013      	ands	r3, r2
 8001458:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d006      	beq.n	8001474 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001466:	4b27      	ldr	r3, [pc, #156]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	4926      	ldr	r1, [pc, #152]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	4313      	orrs	r3, r2
 8001470:	608b      	str	r3, [r1, #8]
 8001472:	e006      	b.n	8001482 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001474:	4b23      	ldr	r3, [pc, #140]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	43db      	mvns	r3, r3
 800147c:	4921      	ldr	r1, [pc, #132]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 800147e:	4013      	ands	r3, r2
 8001480:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d006      	beq.n	800149c <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 8001490:	68da      	ldr	r2, [r3, #12]
 8001492:	491c      	ldr	r1, [pc, #112]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	60cb      	str	r3, [r1, #12]
 800149a:	e006      	b.n	80014aa <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800149c:	4b19      	ldr	r3, [pc, #100]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	4917      	ldr	r1, [pc, #92]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 80014a6:	4013      	ands	r3, r2
 80014a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	3301      	adds	r3, #1
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f47f aec4 	bne.w	8001248 <HAL_GPIO_Init+0x14>
  }
}
 80014c0:	bf00      	nop
 80014c2:	372c      	adds	r7, #44	; 0x2c
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	10210000 	.word	0x10210000
 80014d0:	10110000 	.word	0x10110000
 80014d4:	10120000 	.word	0x10120000
 80014d8:	10310000 	.word	0x10310000
 80014dc:	10320000 	.word	0x10320000
 80014e0:	10220000 	.word	0x10220000
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010000 	.word	0x40010000
 80014ec:	40010800 	.word	0x40010800
 80014f0:	40010c00 	.word	0x40010c00
 80014f4:	40011000 	.word	0x40011000
 80014f8:	40011400 	.word	0x40011400
 80014fc:	40011800 	.word	0x40011800
 8001500:	40011c00 	.word	0x40011c00
 8001504:	40010400 	.word	0x40010400

08001508 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	887b      	ldrh	r3, [r7, #2]
 800151a:	4013      	ands	r3, r2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d002      	beq.n	8001526 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	e001      	b.n	800152a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800152a:	7bfb      	ldrb	r3, [r7, #15]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	460b      	mov	r3, r1
 8001540:	807b      	strh	r3, [r7, #2]
 8001542:	4613      	mov	r3, r2
 8001544:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001546:	787b      	ldrb	r3, [r7, #1]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800154c:	887a      	ldrh	r2, [r7, #2]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001552:	e003      	b.n	800155c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001554:	887b      	ldrh	r3, [r7, #2]
 8001556:	041a      	lsls	r2, r3, #16
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	611a      	str	r2, [r3, #16]
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr

08001566 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	460b      	mov	r3, r1
 8001570:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68da      	ldr	r2, [r3, #12]
 8001576:	887b      	ldrh	r3, [r7, #2]
 8001578:	4013      	ands	r3, r2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800157e:	887a      	ldrh	r2, [r7, #2]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001584:	e002      	b.n	800158c <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001586:	887a      	ldrh	r2, [r7, #2]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	611a      	str	r2, [r3, #16]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
	...

08001598 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015a4:	695a      	ldr	r2, [r3, #20]
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	4013      	ands	r3, r2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d006      	beq.n	80015bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015ae:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015b4:	88fb      	ldrh	r3, [r7, #6]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f006 f85a 	bl	8007670 <HAL_GPIO_EXTI_Callback>
  }
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40010400 	.word	0x40010400

080015c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e26c      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 8087 	beq.w	80016f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015e8:	4b92      	ldr	r3, [pc, #584]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 030c 	and.w	r3, r3, #12
 80015f0:	2b04      	cmp	r3, #4
 80015f2:	d00c      	beq.n	800160e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015f4:	4b8f      	ldr	r3, [pc, #572]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 030c 	and.w	r3, r3, #12
 80015fc:	2b08      	cmp	r3, #8
 80015fe:	d112      	bne.n	8001626 <HAL_RCC_OscConfig+0x5e>
 8001600:	4b8c      	ldr	r3, [pc, #560]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800160c:	d10b      	bne.n	8001626 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160e:	4b89      	ldr	r3, [pc, #548]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d06c      	beq.n	80016f4 <HAL_RCC_OscConfig+0x12c>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d168      	bne.n	80016f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e246      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800162e:	d106      	bne.n	800163e <HAL_RCC_OscConfig+0x76>
 8001630:	4b80      	ldr	r3, [pc, #512]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a7f      	ldr	r2, [pc, #508]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	e02e      	b.n	800169c <HAL_RCC_OscConfig+0xd4>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10c      	bne.n	8001660 <HAL_RCC_OscConfig+0x98>
 8001646:	4b7b      	ldr	r3, [pc, #492]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a7a      	ldr	r2, [pc, #488]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 800164c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	4b78      	ldr	r3, [pc, #480]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a77      	ldr	r2, [pc, #476]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001658:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	e01d      	b.n	800169c <HAL_RCC_OscConfig+0xd4>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001668:	d10c      	bne.n	8001684 <HAL_RCC_OscConfig+0xbc>
 800166a:	4b72      	ldr	r3, [pc, #456]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a71      	ldr	r2, [pc, #452]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	4b6f      	ldr	r3, [pc, #444]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a6e      	ldr	r2, [pc, #440]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 800167c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	e00b      	b.n	800169c <HAL_RCC_OscConfig+0xd4>
 8001684:	4b6b      	ldr	r3, [pc, #428]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a6a      	ldr	r2, [pc, #424]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 800168a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	4b68      	ldr	r3, [pc, #416]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a67      	ldr	r2, [pc, #412]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800169a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d013      	beq.n	80016cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fc8c 	bl	8000fc0 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ac:	f7ff fc88 	bl	8000fc0 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	; 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e1fa      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016be:	4b5d      	ldr	r3, [pc, #372]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0xe4>
 80016ca:	e014      	b.n	80016f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff fc78 	bl	8000fc0 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff fc74 	bl	8000fc0 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	; 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e1e6      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e6:	4b53      	ldr	r3, [pc, #332]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x10c>
 80016f2:	e000      	b.n	80016f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d063      	beq.n	80017ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001702:	4b4c      	ldr	r3, [pc, #304]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 030c 	and.w	r3, r3, #12
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00b      	beq.n	8001726 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800170e:	4b49      	ldr	r3, [pc, #292]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	2b08      	cmp	r3, #8
 8001718:	d11c      	bne.n	8001754 <HAL_RCC_OscConfig+0x18c>
 800171a:	4b46      	ldr	r3, [pc, #280]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d116      	bne.n	8001754 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001726:	4b43      	ldr	r3, [pc, #268]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d005      	beq.n	800173e <HAL_RCC_OscConfig+0x176>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d001      	beq.n	800173e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e1ba      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173e:	4b3d      	ldr	r3, [pc, #244]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	4939      	ldr	r1, [pc, #228]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 800174e:	4313      	orrs	r3, r2
 8001750:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001752:	e03a      	b.n	80017ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d020      	beq.n	800179e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800175c:	4b36      	ldr	r3, [pc, #216]	; (8001838 <HAL_RCC_OscConfig+0x270>)
 800175e:	2201      	movs	r2, #1
 8001760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001762:	f7ff fc2d 	bl	8000fc0 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800176a:	f7ff fc29 	bl	8000fc0 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e19b      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177c:	4b2d      	ldr	r3, [pc, #180]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f0      	beq.n	800176a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001788:	4b2a      	ldr	r3, [pc, #168]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	4927      	ldr	r1, [pc, #156]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001798:	4313      	orrs	r3, r2
 800179a:	600b      	str	r3, [r1, #0]
 800179c:	e015      	b.n	80017ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800179e:	4b26      	ldr	r3, [pc, #152]	; (8001838 <HAL_RCC_OscConfig+0x270>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff fc0c 	bl	8000fc0 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ac:	f7ff fc08 	bl	8000fc0 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e17a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017be:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d03a      	beq.n	800184c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d019      	beq.n	8001812 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <HAL_RCC_OscConfig+0x274>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e4:	f7ff fbec 	bl	8000fc0 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ec:	f7ff fbe8 	bl	8000fc0 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e15a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017fe:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <HAL_RCC_OscConfig+0x26c>)
 8001800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800180a:	2001      	movs	r0, #1
 800180c:	f000 fada 	bl	8001dc4 <RCC_Delay>
 8001810:	e01c      	b.n	800184c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001812:	4b0a      	ldr	r3, [pc, #40]	; (800183c <HAL_RCC_OscConfig+0x274>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001818:	f7ff fbd2 	bl	8000fc0 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800181e:	e00f      	b.n	8001840 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001820:	f7ff fbce 	bl	8000fc0 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d908      	bls.n	8001840 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e140      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000
 8001838:	42420000 	.word	0x42420000
 800183c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001840:	4b9e      	ldr	r3, [pc, #632]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1e9      	bne.n	8001820 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 80a6 	beq.w	80019a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800185a:	2300      	movs	r3, #0
 800185c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800185e:	4b97      	ldr	r3, [pc, #604]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10d      	bne.n	8001886 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	4b94      	ldr	r3, [pc, #592]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	4a93      	ldr	r2, [pc, #588]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001874:	61d3      	str	r3, [r2, #28]
 8001876:	4b91      	ldr	r3, [pc, #580]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001882:	2301      	movs	r3, #1
 8001884:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001886:	4b8e      	ldr	r3, [pc, #568]	; (8001ac0 <HAL_RCC_OscConfig+0x4f8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188e:	2b00      	cmp	r3, #0
 8001890:	d118      	bne.n	80018c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001892:	4b8b      	ldr	r3, [pc, #556]	; (8001ac0 <HAL_RCC_OscConfig+0x4f8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a8a      	ldr	r2, [pc, #552]	; (8001ac0 <HAL_RCC_OscConfig+0x4f8>)
 8001898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189e:	f7ff fb8f 	bl	8000fc0 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a6:	f7ff fb8b 	bl	8000fc0 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b64      	cmp	r3, #100	; 0x64
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e0fd      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b8:	4b81      	ldr	r3, [pc, #516]	; (8001ac0 <HAL_RCC_OscConfig+0x4f8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d106      	bne.n	80018da <HAL_RCC_OscConfig+0x312>
 80018cc:	4b7b      	ldr	r3, [pc, #492]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	4a7a      	ldr	r2, [pc, #488]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	6213      	str	r3, [r2, #32]
 80018d8:	e02d      	b.n	8001936 <HAL_RCC_OscConfig+0x36e>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10c      	bne.n	80018fc <HAL_RCC_OscConfig+0x334>
 80018e2:	4b76      	ldr	r3, [pc, #472]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	4a75      	ldr	r2, [pc, #468]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 80018e8:	f023 0301 	bic.w	r3, r3, #1
 80018ec:	6213      	str	r3, [r2, #32]
 80018ee:	4b73      	ldr	r3, [pc, #460]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	4a72      	ldr	r2, [pc, #456]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 80018f4:	f023 0304 	bic.w	r3, r3, #4
 80018f8:	6213      	str	r3, [r2, #32]
 80018fa:	e01c      	b.n	8001936 <HAL_RCC_OscConfig+0x36e>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	2b05      	cmp	r3, #5
 8001902:	d10c      	bne.n	800191e <HAL_RCC_OscConfig+0x356>
 8001904:	4b6d      	ldr	r3, [pc, #436]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	4a6c      	ldr	r2, [pc, #432]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 800190a:	f043 0304 	orr.w	r3, r3, #4
 800190e:	6213      	str	r3, [r2, #32]
 8001910:	4b6a      	ldr	r3, [pc, #424]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	4a69      	ldr	r2, [pc, #420]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6213      	str	r3, [r2, #32]
 800191c:	e00b      	b.n	8001936 <HAL_RCC_OscConfig+0x36e>
 800191e:	4b67      	ldr	r3, [pc, #412]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	4a66      	ldr	r2, [pc, #408]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001924:	f023 0301 	bic.w	r3, r3, #1
 8001928:	6213      	str	r3, [r2, #32]
 800192a:	4b64      	ldr	r3, [pc, #400]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	4a63      	ldr	r2, [pc, #396]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001930:	f023 0304 	bic.w	r3, r3, #4
 8001934:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d015      	beq.n	800196a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193e:	f7ff fb3f 	bl	8000fc0 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001944:	e00a      	b.n	800195c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001946:	f7ff fb3b 	bl	8000fc0 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	f241 3288 	movw	r2, #5000	; 0x1388
 8001954:	4293      	cmp	r3, r2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e0ab      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195c:	4b57      	ldr	r3, [pc, #348]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0ee      	beq.n	8001946 <HAL_RCC_OscConfig+0x37e>
 8001968:	e014      	b.n	8001994 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196a:	f7ff fb29 	bl	8000fc0 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001970:	e00a      	b.n	8001988 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001972:	f7ff fb25 	bl	8000fc0 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001980:	4293      	cmp	r3, r2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e095      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001988:	4b4c      	ldr	r3, [pc, #304]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1ee      	bne.n	8001972 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001994:	7dfb      	ldrb	r3, [r7, #23]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d105      	bne.n	80019a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800199a:	4b48      	ldr	r3, [pc, #288]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	4a47      	ldr	r2, [pc, #284]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 80019a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 8081 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019b0:	4b42      	ldr	r3, [pc, #264]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 030c 	and.w	r3, r3, #12
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d061      	beq.n	8001a80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69db      	ldr	r3, [r3, #28]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d146      	bne.n	8001a52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c4:	4b3f      	ldr	r3, [pc, #252]	; (8001ac4 <HAL_RCC_OscConfig+0x4fc>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ca:	f7ff faf9 	bl	8000fc0 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d2:	f7ff faf5 	bl	8000fc0 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e067      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e4:	4b35      	ldr	r3, [pc, #212]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f0      	bne.n	80019d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f8:	d108      	bne.n	8001a0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019fa:	4b30      	ldr	r3, [pc, #192]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	492d      	ldr	r1, [pc, #180]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a0c:	4b2b      	ldr	r3, [pc, #172]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a19      	ldr	r1, [r3, #32]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	430b      	orrs	r3, r1
 8001a1e:	4927      	ldr	r1, [pc, #156]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a24:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <HAL_RCC_OscConfig+0x4fc>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2a:	f7ff fac9 	bl	8000fc0 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a32:	f7ff fac5 	bl	8000fc0 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e037      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a44:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x46a>
 8001a50:	e02f      	b.n	8001ab2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a52:	4b1c      	ldr	r3, [pc, #112]	; (8001ac4 <HAL_RCC_OscConfig+0x4fc>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7ff fab2 	bl	8000fc0 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a60:	f7ff faae 	bl	8000fc0 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e020      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x498>
 8001a7e:	e018      	b.n	8001ab2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d101      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e013      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_RCC_OscConfig+0x4f4>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d106      	bne.n	8001aae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d001      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40007000 	.word	0x40007000
 8001ac4:	42420060 	.word	0x42420060

08001ac8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0d0      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001adc:	4b6a      	ldr	r3, [pc, #424]	; (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d910      	bls.n	8001b0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aea:	4b67      	ldr	r3, [pc, #412]	; (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f023 0207 	bic.w	r2, r3, #7
 8001af2:	4965      	ldr	r1, [pc, #404]	; (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afa:	4b63      	ldr	r3, [pc, #396]	; (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0b8      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d020      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b24:	4b59      	ldr	r3, [pc, #356]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	4a58      	ldr	r2, [pc, #352]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b3c:	4b53      	ldr	r3, [pc, #332]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	4a52      	ldr	r2, [pc, #328]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b48:	4b50      	ldr	r3, [pc, #320]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	494d      	ldr	r1, [pc, #308]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d040      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6e:	4b47      	ldr	r3, [pc, #284]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d115      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e07f      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b86:	4b41      	ldr	r3, [pc, #260]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d109      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e073      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b96:	4b3d      	ldr	r3, [pc, #244]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e06b      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ba6:	4b39      	ldr	r3, [pc, #228]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f023 0203 	bic.w	r2, r3, #3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	4936      	ldr	r1, [pc, #216]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bb8:	f7ff fa02 	bl	8000fc0 <HAL_GetTick>
 8001bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bbe:	e00a      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc0:	f7ff f9fe 	bl	8000fc0 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e053      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd6:	4b2d      	ldr	r3, [pc, #180]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 020c 	and.w	r2, r3, #12
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d1eb      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001be8:	4b27      	ldr	r3, [pc, #156]	; (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d210      	bcs.n	8001c18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf6:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 0207 	bic.w	r2, r3, #7
 8001bfe:	4922      	ldr	r1, [pc, #136]	; (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c06:	4b20      	ldr	r3, [pc, #128]	; (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e032      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d008      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c24:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	4916      	ldr	r1, [pc, #88]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d009      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c42:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	490e      	ldr	r1, [pc, #56]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c56:	f000 f821 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 8001c5a:	4601      	mov	r1, r0
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <HAL_RCC_ClockConfig+0x1c8>)
 8001c68:	5cd3      	ldrb	r3, [r2, r3]
 8001c6a:	fa21 f303 	lsr.w	r3, r1, r3
 8001c6e:	4a09      	ldr	r2, [pc, #36]	; (8001c94 <HAL_RCC_ClockConfig+0x1cc>)
 8001c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <HAL_RCC_ClockConfig+0x1d0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff f960 	bl	8000f3c <HAL_InitTick>

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40022000 	.word	0x40022000
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	080089c4 	.word	0x080089c4
 8001c94:	20000008 	.word	0x20000008
 8001c98:	20000000 	.word	0x20000000

08001c9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c9c:	b490      	push	{r4, r7}
 8001c9e:	b08a      	sub	sp, #40	; 0x28
 8001ca0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ca2:	4b2a      	ldr	r3, [pc, #168]	; (8001d4c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ca4:	1d3c      	adds	r4, r7, #4
 8001ca6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ca8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cac:	4b28      	ldr	r3, [pc, #160]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cc6:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d002      	beq.n	8001cdc <HAL_RCC_GetSysClockFreq+0x40>
 8001cd6:	2b08      	cmp	r3, #8
 8001cd8:	d003      	beq.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x46>
 8001cda:	e02d      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cdc:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cde:	623b      	str	r3, [r7, #32]
      break;
 8001ce0:	e02d      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	0c9b      	lsrs	r3, r3, #18
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cee:	4413      	add	r3, r2
 8001cf0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cf4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d013      	beq.n	8001d28 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d00:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	0c5b      	lsrs	r3, r3, #17
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d0e:	4413      	add	r3, r2
 8001d10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d14:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	4a0f      	ldr	r2, [pc, #60]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d1a:	fb02 f203 	mul.w	r2, r2, r3
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
 8001d26:	e004      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	4a0c      	ldr	r2, [pc, #48]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d2c:	fb02 f303 	mul.w	r3, r2, r3
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d34:	623b      	str	r3, [r7, #32]
      break;
 8001d36:	e002      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d3a:	623b      	str	r3, [r7, #32]
      break;
 8001d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3728      	adds	r7, #40	; 0x28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc90      	pop	{r4, r7}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	08008900 	.word	0x08008900
 8001d50:	08008910 	.word	0x08008910
 8001d54:	40021000 	.word	0x40021000
 8001d58:	007a1200 	.word	0x007a1200
 8001d5c:	003d0900 	.word	0x003d0900

08001d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d64:	4b02      	ldr	r3, [pc, #8]	; (8001d70 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d66:	681b      	ldr	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	20000008 	.word	0x20000008

08001d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d78:	f7ff fff2 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 8001d7c:	4601      	mov	r1, r0
 8001d7e:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	0a1b      	lsrs	r3, r3, #8
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	4a03      	ldr	r2, [pc, #12]	; (8001d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d8a:	5cd3      	ldrb	r3, [r2, r3]
 8001d8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40021000 	.word	0x40021000
 8001d98:	080089d4 	.word	0x080089d4

08001d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001da0:	f7ff ffde 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 8001da4:	4601      	mov	r1, r0
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	0adb      	lsrs	r3, r3, #11
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	4a03      	ldr	r2, [pc, #12]	; (8001dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001db2:	5cd3      	ldrb	r3, [r2, r3]
 8001db4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	080089d4 	.word	0x080089d4

08001dc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <RCC_Delay+0x34>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <RCC_Delay+0x38>)
 8001dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd6:	0a5b      	lsrs	r3, r3, #9
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	fb02 f303 	mul.w	r3, r2, r3
 8001dde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001de0:	bf00      	nop
  }
  while (Delay --);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	1e5a      	subs	r2, r3, #1
 8001de6:	60fa      	str	r2, [r7, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1f9      	bne.n	8001de0 <RCC_Delay+0x1c>
}
 8001dec:	bf00      	nop
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	20000008 	.word	0x20000008
 8001dfc:	10624dd3 	.word	0x10624dd3

08001e00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e03f      	b.n	8001e92 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d106      	bne.n	8001e2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f005 fdac 	bl	8007984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2224      	movs	r2, #36	; 0x24
 8001e30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f90b 	bl	8002060 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695a      	ldr	r2, [r3, #20]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2220      	movs	r2, #32
 8001e84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b088      	sub	sp, #32
 8001e9e:	af02      	add	r7, sp, #8
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b20      	cmp	r3, #32
 8001eb8:	f040 8083 	bne.w	8001fc2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d002      	beq.n	8001ec8 <HAL_UART_Transmit+0x2e>
 8001ec2:	88fb      	ldrh	r3, [r7, #6]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e07b      	b.n	8001fc4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_UART_Transmit+0x40>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e074      	b.n	8001fc4 <HAL_UART_Transmit+0x12a>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2221      	movs	r2, #33	; 0x21
 8001eec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001ef0:	f7ff f866 	bl	8000fc0 <HAL_GetTick>
 8001ef4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	88fa      	ldrh	r2, [r7, #6]
 8001efa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	88fa      	ldrh	r2, [r7, #6]
 8001f00:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f02:	e042      	b.n	8001f8a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f1a:	d122      	bne.n	8001f62 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	2200      	movs	r2, #0
 8001f24:	2180      	movs	r1, #128	; 0x80
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f000 f850 	bl	8001fcc <UART_WaitOnFlagUntilTimeout>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e046      	b.n	8001fc4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f48:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d103      	bne.n	8001f5a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	3302      	adds	r3, #2
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	e017      	b.n	8001f8a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	e013      	b.n	8001f8a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2180      	movs	r1, #128	; 0x80
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 f82d 	bl	8001fcc <UART_WaitOnFlagUntilTimeout>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e023      	b.n	8001fc4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	60ba      	str	r2, [r7, #8]
 8001f82:	781a      	ldrb	r2, [r3, #0]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1b7      	bne.n	8001f04 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2140      	movs	r1, #64	; 0x40
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 f814 	bl	8001fcc <UART_WaitOnFlagUntilTimeout>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e00a      	b.n	8001fc4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	e000      	b.n	8001fc4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001fc2:	2302      	movs	r3, #2
  }
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	603b      	str	r3, [r7, #0]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fdc:	e02c      	b.n	8002038 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe4:	d028      	beq.n	8002038 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d007      	beq.n	8001ffc <UART_WaitOnFlagUntilTimeout+0x30>
 8001fec:	f7fe ffe8 	bl	8000fc0 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d21d      	bcs.n	8002038 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800200a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	695a      	ldr	r2, [r3, #20]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0201 	bic.w	r2, r2, #1
 800201a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2220      	movs	r2, #32
 8002020:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2220      	movs	r2, #32
 8002028:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e00f      	b.n	8002058 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	4013      	ands	r3, r2
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	429a      	cmp	r2, r3
 8002046:	bf0c      	ite	eq
 8002048:	2301      	moveq	r3, #1
 800204a:	2300      	movne	r3, #0
 800204c:	b2db      	uxtb	r3, r3
 800204e:	461a      	mov	r2, r3
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	429a      	cmp	r2, r3
 8002054:	d0c3      	beq.n	8001fde <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	4313      	orrs	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800209a:	f023 030c 	bic.w	r3, r3, #12
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6812      	ldr	r2, [r2, #0]
 80020a2:	68f9      	ldr	r1, [r7, #12]
 80020a4:	430b      	orrs	r3, r1
 80020a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699a      	ldr	r2, [r3, #24]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a52      	ldr	r2, [pc, #328]	; (800220c <UART_SetConfig+0x1ac>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d14e      	bne.n	8002166 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80020c8:	f7ff fe68 	bl	8001d9c <HAL_RCC_GetPCLK2Freq>
 80020cc:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	009a      	lsls	r2, r3, #2
 80020d8:	441a      	add	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e4:	4a4a      	ldr	r2, [pc, #296]	; (8002210 <UART_SetConfig+0x1b0>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	095b      	lsrs	r3, r3, #5
 80020ec:	0119      	lsls	r1, r3, #4
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	009a      	lsls	r2, r3, #2
 80020f8:	441a      	add	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	fbb2 f2f3 	udiv	r2, r2, r3
 8002104:	4b42      	ldr	r3, [pc, #264]	; (8002210 <UART_SetConfig+0x1b0>)
 8002106:	fba3 0302 	umull	r0, r3, r3, r2
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	2064      	movs	r0, #100	; 0x64
 800210e:	fb00 f303 	mul.w	r3, r0, r3
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	3332      	adds	r3, #50	; 0x32
 8002118:	4a3d      	ldr	r2, [pc, #244]	; (8002210 <UART_SetConfig+0x1b0>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002124:	4419      	add	r1, r3
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	009a      	lsls	r2, r3, #2
 8002130:	441a      	add	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	fbb2 f2f3 	udiv	r2, r2, r3
 800213c:	4b34      	ldr	r3, [pc, #208]	; (8002210 <UART_SetConfig+0x1b0>)
 800213e:	fba3 0302 	umull	r0, r3, r3, r2
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	2064      	movs	r0, #100	; 0x64
 8002146:	fb00 f303 	mul.w	r3, r0, r3
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	3332      	adds	r3, #50	; 0x32
 8002150:	4a2f      	ldr	r2, [pc, #188]	; (8002210 <UART_SetConfig+0x1b0>)
 8002152:	fba2 2303 	umull	r2, r3, r2, r3
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	f003 020f 	and.w	r2, r3, #15
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	440a      	add	r2, r1
 8002162:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002164:	e04d      	b.n	8002202 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002166:	f7ff fe05 	bl	8001d74 <HAL_RCC_GetPCLK1Freq>
 800216a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	009a      	lsls	r2, r3, #2
 8002176:	441a      	add	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002182:	4a23      	ldr	r2, [pc, #140]	; (8002210 <UART_SetConfig+0x1b0>)
 8002184:	fba2 2303 	umull	r2, r3, r2, r3
 8002188:	095b      	lsrs	r3, r3, #5
 800218a:	0119      	lsls	r1, r3, #4
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	009a      	lsls	r2, r3, #2
 8002196:	441a      	add	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	fbb2 f2f3 	udiv	r2, r2, r3
 80021a2:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <UART_SetConfig+0x1b0>)
 80021a4:	fba3 0302 	umull	r0, r3, r3, r2
 80021a8:	095b      	lsrs	r3, r3, #5
 80021aa:	2064      	movs	r0, #100	; 0x64
 80021ac:	fb00 f303 	mul.w	r3, r0, r3
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	3332      	adds	r3, #50	; 0x32
 80021b6:	4a16      	ldr	r2, [pc, #88]	; (8002210 <UART_SetConfig+0x1b0>)
 80021b8:	fba2 2303 	umull	r2, r3, r2, r3
 80021bc:	095b      	lsrs	r3, r3, #5
 80021be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021c2:	4419      	add	r1, r3
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	009a      	lsls	r2, r3, #2
 80021ce:	441a      	add	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80021da:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <UART_SetConfig+0x1b0>)
 80021dc:	fba3 0302 	umull	r0, r3, r3, r2
 80021e0:	095b      	lsrs	r3, r3, #5
 80021e2:	2064      	movs	r0, #100	; 0x64
 80021e4:	fb00 f303 	mul.w	r3, r0, r3
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	3332      	adds	r3, #50	; 0x32
 80021ee:	4a08      	ldr	r2, [pc, #32]	; (8002210 <UART_SetConfig+0x1b0>)
 80021f0:	fba2 2303 	umull	r2, r3, r2, r3
 80021f4:	095b      	lsrs	r3, r3, #5
 80021f6:	f003 020f 	and.w	r2, r3, #15
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	440a      	add	r2, r1
 8002200:	609a      	str	r2, [r3, #8]
}
 8002202:	bf00      	nop
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40013800 	.word	0x40013800
 8002210:	51eb851f 	.word	0x51eb851f

08002214 <GameEngineLoop>:
#include "Renderer.h"
#include "Time.h"
#include "mygpio.h"

void GameEngineLoop()
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
	Node *it;
	GameEvent *event;
	void *game_object;
	unsigned i, j;

	Time_OnStart();
 800221a:	f005 fe8d 	bl	8007f38 <Time_OnStart>

	while (true)
	{
		i = 0; j = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
		// object loop
		for (it = objects.head; it; it = it->next)
 8002226:	4b3a      	ldr	r3, [pc, #232]	; (8002310 <GameEngineLoop+0xfc>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	e051      	b.n	80022d2 <GameEngineLoop+0xbe>
		{
			event = ((GameEvent*)it->object);
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	60bb      	str	r3, [r7, #8]
			game_object = event->game_object;
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	607b      	str	r3, [r7, #4]
			screen = InitScreen(screen);
 800223a:	4b36      	ldr	r3, [pc, #216]	; (8002314 <GameEngineLoop+0x100>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f005 fdb3 	bl	8007daa <InitScreen>
 8002244:	4602      	mov	r2, r0
 8002246:	4b33      	ldr	r3, [pc, #204]	; (8002314 <GameEngineLoop+0x100>)
 8002248:	601a      	str	r2, [r3, #0]
			Time_OnUpdate();
 800224a:	f005 fe81 	bl	8007f50 <Time_OnUpdate>

			println("creating");
 800224e:	4832      	ldr	r0, [pc, #200]	; (8002318 <GameEngineLoop+0x104>)
 8002250:	f005 fa64 	bl	800771c <println>
			// Create
			if (!event->__Created(game_object))
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	4798      	blx	r3
 800225c:	4603      	mov	r3, r0
 800225e:	f083 0301 	eor.w	r3, r3, #1
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <GameEngineLoop+0x5c>
			{
				event->OnCreate(game_object);
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	4798      	blx	r3
			}

			println("updating");
 8002270:	482a      	ldr	r0, [pc, #168]	; (800231c <GameEngineLoop+0x108>)
 8002272:	f005 fa53 	bl	800771c <println>
			// Update
			event->OnUpdate(game_object);
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	4798      	blx	r3

			// Destroy
			if (event->__ToDestroy(game_object))
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	4798      	blx	r3
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d012      	beq.n	80022b2 <GameEngineLoop+0x9e>
			{
				println("destroying");
 800228c:	4824      	ldr	r0, [pc, #144]	; (8002320 <GameEngineLoop+0x10c>)
 800228e:	f005 fa45 	bl	800771c <println>
				event->OnDestroy(game_object);
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	4798      	blx	r3

				free(event);
 800229a:	68b8      	ldr	r0, [r7, #8]
 800229c:	f005 fed4 	bl	8008048 <free>
				it = it->prev;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	617b      	str	r3, [r7, #20]
				RemoveNode(it->next);
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f005 fcfe 	bl	8007cac <RemoveNode>
 80022b0:	e00c      	b.n	80022cc <GameEngineLoop+0xb8>
			}
			// Render
			else
			{
				println("rendering");
 80022b2:	481c      	ldr	r0, [pc, #112]	; (8002324 <GameEngineLoop+0x110>)
 80022b4:	f005 fa32 	bl	800771c <println>
				event->OnRender(game_object, screen);
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	4a15      	ldr	r2, [pc, #84]	; (8002314 <GameEngineLoop+0x100>)
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	4611      	mov	r1, r2
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	4798      	blx	r3
				i++;
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	3301      	adds	r3, #1
 80022ca:	613b      	str	r3, [r7, #16]
		for (it = objects.head; it; it = it->next)
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1aa      	bne.n	800222e <GameEngineLoop+0x1a>
			}
		}
		// UI loop
		for (it = UI.head; it; it = it->next)
 80022d8:	4b13      	ldr	r3, [pc, #76]	; (8002328 <GameEngineLoop+0x114>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	e005      	b.n	80022ec <GameEngineLoop+0xd8>
		{
			j++;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	3301      	adds	r3, #1
 80022e4:	60fb      	str	r3, [r7, #12]
		for (it = UI.head; it; it = it->next)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f6      	bne.n	80022e0 <GameEngineLoop+0xcc>
			// TODO
		}
		// Flush
		screen = Flush(screen);
 80022f2:	4b08      	ldr	r3, [pc, #32]	; (8002314 <GameEngineLoop+0x100>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f005 fd98 	bl	8007e2c <Flush>
 80022fc:	4602      	mov	r2, r0
 80022fe:	4b05      	ldr	r3, [pc, #20]	; (8002314 <GameEngineLoop+0x100>)
 8002300:	601a      	str	r2, [r3, #0]

		printlnf("%u gameobject and %u UI freshed", i, j);
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	6939      	ldr	r1, [r7, #16]
 8002306:	4809      	ldr	r0, [pc, #36]	; (800232c <GameEngineLoop+0x118>)
 8002308:	f005 fa26 	bl	8007758 <printlnf>
		i = 0; j = 0;
 800230c:	e787      	b.n	800221e <GameEngineLoop+0xa>
 800230e:	bf00      	nop
 8002310:	2000017c 	.word	0x2000017c
 8002314:	2000016c 	.word	0x2000016c
 8002318:	08008914 	.word	0x08008914
 800231c:	08008920 	.word	0x08008920
 8002320:	0800892c 	.word	0x0800892c
 8002324:	08008938 	.word	0x08008938
 8002328:	20000170 	.word	0x20000170
 800232c:	08008944 	.word	0x08008944

08002330 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002336:	f107 0310 	add.w	r3, r7, #16
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002344:	4b46      	ldr	r3, [pc, #280]	; (8002460 <MX_GPIO_Init+0x130>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	4a45      	ldr	r2, [pc, #276]	; (8002460 <MX_GPIO_Init+0x130>)
 800234a:	f043 0320 	orr.w	r3, r3, #32
 800234e:	6193      	str	r3, [r2, #24]
 8002350:	4b43      	ldr	r3, [pc, #268]	; (8002460 <MX_GPIO_Init+0x130>)
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	f003 0320 	and.w	r3, r3, #32
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800235c:	4b40      	ldr	r3, [pc, #256]	; (8002460 <MX_GPIO_Init+0x130>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	4a3f      	ldr	r2, [pc, #252]	; (8002460 <MX_GPIO_Init+0x130>)
 8002362:	f043 0304 	orr.w	r3, r3, #4
 8002366:	6193      	str	r3, [r2, #24]
 8002368:	4b3d      	ldr	r3, [pc, #244]	; (8002460 <MX_GPIO_Init+0x130>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002374:	4b3a      	ldr	r3, [pc, #232]	; (8002460 <MX_GPIO_Init+0x130>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	4a39      	ldr	r2, [pc, #228]	; (8002460 <MX_GPIO_Init+0x130>)
 800237a:	f043 0310 	orr.w	r3, r3, #16
 800237e:	6193      	str	r3, [r2, #24]
 8002380:	4b37      	ldr	r3, [pc, #220]	; (8002460 <MX_GPIO_Init+0x130>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	607b      	str	r3, [r7, #4]
 800238a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 800238c:	2200      	movs	r2, #0
 800238e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002392:	4834      	ldr	r0, [pc, #208]	; (8002464 <MX_GPIO_Init+0x134>)
 8002394:	f7ff f8cf 	bl	8001536 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002398:	2200      	movs	r2, #0
 800239a:	2104      	movs	r1, #4
 800239c:	4832      	ldr	r0, [pc, #200]	; (8002468 <MX_GPIO_Init+0x138>)
 800239e:	f7ff f8ca 	bl	8001536 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_WK_Pin;
 80023a2:	2301      	movs	r3, #1
 80023a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023a6:	4b31      	ldr	r3, [pc, #196]	; (800246c <MX_GPIO_Init+0x13c>)
 80023a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023aa:	2302      	movs	r3, #2
 80023ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 80023ae:	f107 0310 	add.w	r3, r7, #16
 80023b2:	4619      	mov	r1, r3
 80023b4:	482b      	ldr	r0, [pc, #172]	; (8002464 <MX_GPIO_Init+0x134>)
 80023b6:	f7fe ff3d 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 80023ba:	2320      	movs	r3, #32
 80023bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023be:	4b2b      	ldr	r3, [pc, #172]	; (800246c <MX_GPIO_Init+0x13c>)
 80023c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023c2:	2301      	movs	r3, #1
 80023c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80023c6:	f107 0310 	add.w	r3, r7, #16
 80023ca:	4619      	mov	r1, r3
 80023cc:	4828      	ldr	r0, [pc, #160]	; (8002470 <MX_GPIO_Init+0x140>)
 80023ce:	f7fe ff31 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80023d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d8:	2301      	movs	r3, #1
 80023da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e0:	2302      	movs	r3, #2
 80023e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80023e4:	f107 0310 	add.w	r3, r7, #16
 80023e8:	4619      	mov	r1, r3
 80023ea:	481e      	ldr	r0, [pc, #120]	; (8002464 <MX_GPIO_Init+0x134>)
 80023ec:	f7fe ff22 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80023f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023f6:	4b1d      	ldr	r3, [pc, #116]	; (800246c <MX_GPIO_Init+0x13c>)
 80023f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023fa:	2301      	movs	r3, #1
 80023fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80023fe:	f107 0310 	add.w	r3, r7, #16
 8002402:	4619      	mov	r1, r3
 8002404:	4817      	ldr	r0, [pc, #92]	; (8002464 <MX_GPIO_Init+0x134>)
 8002406:	f7fe ff15 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800240a:	2304      	movs	r3, #4
 800240c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800240e:	2301      	movs	r3, #1
 8002410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002416:	2302      	movs	r3, #2
 8002418:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800241a:	f107 0310 	add.w	r3, r7, #16
 800241e:	4619      	mov	r1, r3
 8002420:	4811      	ldr	r0, [pc, #68]	; (8002468 <MX_GPIO_Init+0x138>)
 8002422:	f7fe ff07 	bl	8001234 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8002426:	2200      	movs	r2, #0
 8002428:	2101      	movs	r1, #1
 800242a:	2006      	movs	r0, #6
 800242c:	f7fe fecb 	bl	80011c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002430:	2006      	movs	r0, #6
 8002432:	f7fe fee4 	bl	80011fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1);
 8002436:	2201      	movs	r2, #1
 8002438:	2101      	movs	r1, #1
 800243a:	2017      	movs	r0, #23
 800243c:	f7fe fec3 	bl	80011c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002440:	2017      	movs	r0, #23
 8002442:	f7fe fedc 	bl	80011fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 2);
 8002446:	2202      	movs	r2, #2
 8002448:	2101      	movs	r1, #1
 800244a:	2028      	movs	r0, #40	; 0x28
 800244c:	f7fe febb 	bl	80011c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002450:	2028      	movs	r0, #40	; 0x28
 8002452:	f7fe fed4 	bl	80011fe <HAL_NVIC_EnableIRQ>

}
 8002456:	bf00      	nop
 8002458:	3720      	adds	r7, #32
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40021000 	.word	0x40021000
 8002464:	40010800 	.word	0x40010800
 8002468:	40011400 	.word	0x40011400
 800246c:	10110000 	.word	0x10110000
 8002470:	40011000 	.word	0x40011000

08002474 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 800247e:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <LCD_WR_REG+0x40>)
 8002480:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002484:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8002486:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <LCD_WR_REG+0x40>)
 8002488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800248c:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 800248e:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <LCD_WR_REG+0x44>)
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8002494:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <LCD_WR_REG+0x40>)
 8002496:	2280      	movs	r2, #128	; 0x80
 8002498:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <LCD_WR_REG+0x40>)
 800249c:	2280      	movs	r2, #128	; 0x80
 800249e:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80024a0:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <LCD_WR_REG+0x40>)
 80024a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024a6:	611a      	str	r2, [r3, #16]
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40011000 	.word	0x40011000
 80024b8:	40010c00 	.word	0x40010c00

080024bc <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 80024c6:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <LCD_WR_DATAX+0x40>)
 80024c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024cc:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 80024ce:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <LCD_WR_DATAX+0x40>)
 80024d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024d4:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 80024d6:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <LCD_WR_DATAX+0x44>)
 80024d8:	88fb      	ldrh	r3, [r7, #6]
 80024da:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 80024dc:	4b07      	ldr	r3, [pc, #28]	; (80024fc <LCD_WR_DATAX+0x40>)
 80024de:	2280      	movs	r2, #128	; 0x80
 80024e0:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <LCD_WR_DATAX+0x40>)
 80024e4:	2280      	movs	r2, #128	; 0x80
 80024e6:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80024e8:	4b04      	ldr	r3, [pc, #16]	; (80024fc <LCD_WR_DATAX+0x40>)
 80024ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ee:	611a      	str	r2, [r3, #16]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40011000 	.word	0x40011000
 8002500:	40010c00 	.word	0x40010c00

08002504 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 800250a:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <LCD_RD_DATA+0x7c>)
 800250c:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8002510:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8002512:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <LCD_RD_DATA+0x7c>)
 8002514:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8002518:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 800251a:	4b19      	ldr	r3, [pc, #100]	; (8002580 <LCD_RD_DATA+0x7c>)
 800251c:	2200      	movs	r2, #0
 800251e:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8002520:	4b18      	ldr	r3, [pc, #96]	; (8002584 <LCD_RD_DATA+0x80>)
 8002522:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002526:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8002528:	4b16      	ldr	r3, [pc, #88]	; (8002584 <LCD_RD_DATA+0x80>)
 800252a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800252e:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8002530:	4b14      	ldr	r3, [pc, #80]	; (8002584 <LCD_RD_DATA+0x80>)
 8002532:	2240      	movs	r2, #64	; 0x40
 8002534:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8002536:	4b14      	ldr	r3, [pc, #80]	; (8002588 <LCD_RD_DATA+0x84>)
 8002538:	889b      	ldrh	r3, [r3, #4]
 800253a:	f648 1289 	movw	r2, #35209	; 0x8989
 800253e:	4293      	cmp	r3, r2
 8002540:	d102      	bne.n	8002548 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8002542:	2001      	movs	r0, #1
 8002544:	f7fe fd46 	bl	8000fd4 <HAL_Delay>
	t = DATAIN
 8002548:	4b0d      	ldr	r3, [pc, #52]	; (8002580 <LCD_RD_DATA+0x7c>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 800254e:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <LCD_RD_DATA+0x80>)
 8002550:	2240      	movs	r2, #64	; 0x40
 8002552:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8002554:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <LCD_RD_DATA+0x80>)
 8002556:	f44f 7200 	mov.w	r2, #512	; 0x200
 800255a:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 800255c:	4b08      	ldr	r3, [pc, #32]	; (8002580 <LCD_RD_DATA+0x7c>)
 800255e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8002562:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8002564:	4b06      	ldr	r3, [pc, #24]	; (8002580 <LCD_RD_DATA+0x7c>)
 8002566:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800256a:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <LCD_RD_DATA+0x7c>)
 800256e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002572:	60da      	str	r2, [r3, #12]
	return t;
 8002574:	88fb      	ldrh	r3, [r7, #6]
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40010c00 	.word	0x40010c00
 8002584:	40011000 	.word	0x40011000
 8002588:	2000018c 	.word	0x2000018c

0800258c <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	460a      	mov	r2, r1
 8002596:	80fb      	strh	r3, [r7, #6]
 8002598:	4613      	mov	r3, r2
 800259a:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 800259c:	88fb      	ldrh	r3, [r7, #6]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff ff68 	bl	8002474 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <LCD_WriteReg+0x4c>)
 80025a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025aa:	611a      	str	r2, [r3, #16]
 80025ac:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <LCD_WriteReg+0x4c>)
 80025ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025b2:	615a      	str	r2, [r3, #20]
 80025b4:	4a09      	ldr	r2, [pc, #36]	; (80025dc <LCD_WriteReg+0x50>)
 80025b6:	88bb      	ldrh	r3, [r7, #4]
 80025b8:	60d3      	str	r3, [r2, #12]
 80025ba:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <LCD_WriteReg+0x4c>)
 80025bc:	2280      	movs	r2, #128	; 0x80
 80025be:	615a      	str	r2, [r3, #20]
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <LCD_WriteReg+0x4c>)
 80025c2:	2280      	movs	r2, #128	; 0x80
 80025c4:	611a      	str	r2, [r3, #16]
 80025c6:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <LCD_WriteReg+0x4c>)
 80025c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025cc:	611a      	str	r2, [r3, #16]
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40011000 	.word	0x40011000
 80025dc:	40010c00 	.word	0x40010c00

080025e0 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff41 	bl	8002474 <LCD_WR_REG>
	return LCD_RD_DATA();
 80025f2:	f7ff ff87 	bl	8002504 <LCD_RD_DATA>
 80025f6:	4603      	mov	r3, r0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8002604:	4b03      	ldr	r3, [pc, #12]	; (8002614 <LCD_WriteRAM_Prepare+0x14>)
 8002606:	891b      	ldrh	r3, [r3, #8]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff33 	bl	8002474 <LCD_WR_REG>
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	2000018c 	.word	0x2000018c

08002618 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	460a      	mov	r2, r1
 8002622:	80fb      	strh	r3, [r7, #6]
 8002624:	4613      	mov	r3, r2
 8002626:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8002628:	4b73      	ldr	r3, [pc, #460]	; (80027f8 <LCD_SetCursor+0x1e0>)
 800262a:	889b      	ldrh	r3, [r3, #4]
 800262c:	f249 3241 	movw	r2, #37697	; 0x9341
 8002630:	4293      	cmp	r3, r2
 8002632:	d005      	beq.n	8002640 <LCD_SetCursor+0x28>
 8002634:	4b70      	ldr	r3, [pc, #448]	; (80027f8 <LCD_SetCursor+0x1e0>)
 8002636:	889b      	ldrh	r3, [r3, #4]
 8002638:	f245 3210 	movw	r2, #21264	; 0x5310
 800263c:	4293      	cmp	r3, r2
 800263e:	d164      	bne.n	800270a <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8002640:	4b6d      	ldr	r3, [pc, #436]	; (80027f8 <LCD_SetCursor+0x1e0>)
 8002642:	895b      	ldrh	r3, [r3, #10]
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff ff15 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 800264a:	4b6c      	ldr	r3, [pc, #432]	; (80027fc <LCD_SetCursor+0x1e4>)
 800264c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002650:	611a      	str	r2, [r3, #16]
 8002652:	4b6a      	ldr	r3, [pc, #424]	; (80027fc <LCD_SetCursor+0x1e4>)
 8002654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002658:	615a      	str	r2, [r3, #20]
 800265a:	88fb      	ldrh	r3, [r7, #6]
 800265c:	0a1b      	lsrs	r3, r3, #8
 800265e:	b29a      	uxth	r2, r3
 8002660:	4b67      	ldr	r3, [pc, #412]	; (8002800 <LCD_SetCursor+0x1e8>)
 8002662:	60da      	str	r2, [r3, #12]
 8002664:	4b65      	ldr	r3, [pc, #404]	; (80027fc <LCD_SetCursor+0x1e4>)
 8002666:	2280      	movs	r2, #128	; 0x80
 8002668:	615a      	str	r2, [r3, #20]
 800266a:	4b64      	ldr	r3, [pc, #400]	; (80027fc <LCD_SetCursor+0x1e4>)
 800266c:	2280      	movs	r2, #128	; 0x80
 800266e:	611a      	str	r2, [r3, #16]
 8002670:	4b62      	ldr	r3, [pc, #392]	; (80027fc <LCD_SetCursor+0x1e4>)
 8002672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002676:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8002678:	4b60      	ldr	r3, [pc, #384]	; (80027fc <LCD_SetCursor+0x1e4>)
 800267a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800267e:	611a      	str	r2, [r3, #16]
 8002680:	4b5e      	ldr	r3, [pc, #376]	; (80027fc <LCD_SetCursor+0x1e4>)
 8002682:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002686:	615a      	str	r2, [r3, #20]
 8002688:	88fb      	ldrh	r3, [r7, #6]
 800268a:	4a5d      	ldr	r2, [pc, #372]	; (8002800 <LCD_SetCursor+0x1e8>)
 800268c:	b2db      	uxtb	r3, r3
 800268e:	60d3      	str	r3, [r2, #12]
 8002690:	4b5a      	ldr	r3, [pc, #360]	; (80027fc <LCD_SetCursor+0x1e4>)
 8002692:	2280      	movs	r2, #128	; 0x80
 8002694:	615a      	str	r2, [r3, #20]
 8002696:	4b59      	ldr	r3, [pc, #356]	; (80027fc <LCD_SetCursor+0x1e4>)
 8002698:	2280      	movs	r2, #128	; 0x80
 800269a:	611a      	str	r2, [r3, #16]
 800269c:	4b57      	ldr	r3, [pc, #348]	; (80027fc <LCD_SetCursor+0x1e4>)
 800269e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026a2:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80026a4:	4b54      	ldr	r3, [pc, #336]	; (80027f8 <LCD_SetCursor+0x1e0>)
 80026a6:	899b      	ldrh	r3, [r3, #12]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff fee3 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 80026ae:	4b53      	ldr	r3, [pc, #332]	; (80027fc <LCD_SetCursor+0x1e4>)
 80026b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026b4:	611a      	str	r2, [r3, #16]
 80026b6:	4b51      	ldr	r3, [pc, #324]	; (80027fc <LCD_SetCursor+0x1e4>)
 80026b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026bc:	615a      	str	r2, [r3, #20]
 80026be:	88bb      	ldrh	r3, [r7, #4]
 80026c0:	0a1b      	lsrs	r3, r3, #8
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	4b4e      	ldr	r3, [pc, #312]	; (8002800 <LCD_SetCursor+0x1e8>)
 80026c6:	60da      	str	r2, [r3, #12]
 80026c8:	4b4c      	ldr	r3, [pc, #304]	; (80027fc <LCD_SetCursor+0x1e4>)
 80026ca:	2280      	movs	r2, #128	; 0x80
 80026cc:	615a      	str	r2, [r3, #20]
 80026ce:	4b4b      	ldr	r3, [pc, #300]	; (80027fc <LCD_SetCursor+0x1e4>)
 80026d0:	2280      	movs	r2, #128	; 0x80
 80026d2:	611a      	str	r2, [r3, #16]
 80026d4:	4b49      	ldr	r3, [pc, #292]	; (80027fc <LCD_SetCursor+0x1e4>)
 80026d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026da:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 80026dc:	4b47      	ldr	r3, [pc, #284]	; (80027fc <LCD_SetCursor+0x1e4>)
 80026de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026e2:	611a      	str	r2, [r3, #16]
 80026e4:	4b45      	ldr	r3, [pc, #276]	; (80027fc <LCD_SetCursor+0x1e4>)
 80026e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ea:	615a      	str	r2, [r3, #20]
 80026ec:	88bb      	ldrh	r3, [r7, #4]
 80026ee:	4a44      	ldr	r2, [pc, #272]	; (8002800 <LCD_SetCursor+0x1e8>)
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	60d3      	str	r3, [r2, #12]
 80026f4:	4b41      	ldr	r3, [pc, #260]	; (80027fc <LCD_SetCursor+0x1e4>)
 80026f6:	2280      	movs	r2, #128	; 0x80
 80026f8:	615a      	str	r2, [r3, #20]
 80026fa:	4b40      	ldr	r3, [pc, #256]	; (80027fc <LCD_SetCursor+0x1e4>)
 80026fc:	2280      	movs	r2, #128	; 0x80
 80026fe:	611a      	str	r2, [r3, #16]
 8002700:	4b3e      	ldr	r3, [pc, #248]	; (80027fc <LCD_SetCursor+0x1e4>)
 8002702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002706:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8002708:	e248      	b.n	8002b9c <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 800270a:	4b3b      	ldr	r3, [pc, #236]	; (80027f8 <LCD_SetCursor+0x1e0>)
 800270c:	889b      	ldrh	r3, [r3, #4]
 800270e:	f646 0204 	movw	r2, #26628	; 0x6804
 8002712:	4293      	cmp	r3, r2
 8002714:	d176      	bne.n	8002804 <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8002716:	4b38      	ldr	r3, [pc, #224]	; (80027f8 <LCD_SetCursor+0x1e0>)
 8002718:	799b      	ldrb	r3, [r3, #6]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d106      	bne.n	800272c <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 800271e:	4b36      	ldr	r3, [pc, #216]	; (80027f8 <LCD_SetCursor+0x1e0>)
 8002720:	881a      	ldrh	r2, [r3, #0]
 8002722:	88fb      	ldrh	r3, [r7, #6]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	b29b      	uxth	r3, r3
 8002728:	3b01      	subs	r3, #1
 800272a:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 800272c:	4b32      	ldr	r3, [pc, #200]	; (80027f8 <LCD_SetCursor+0x1e0>)
 800272e:	895b      	ldrh	r3, [r3, #10]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fe9f 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8002736:	4b31      	ldr	r3, [pc, #196]	; (80027fc <LCD_SetCursor+0x1e4>)
 8002738:	f44f 7280 	mov.w	r2, #256	; 0x100
 800273c:	611a      	str	r2, [r3, #16]
 800273e:	4b2f      	ldr	r3, [pc, #188]	; (80027fc <LCD_SetCursor+0x1e4>)
 8002740:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002744:	615a      	str	r2, [r3, #20]
 8002746:	88fb      	ldrh	r3, [r7, #6]
 8002748:	0a1b      	lsrs	r3, r3, #8
 800274a:	b29a      	uxth	r2, r3
 800274c:	4b2c      	ldr	r3, [pc, #176]	; (8002800 <LCD_SetCursor+0x1e8>)
 800274e:	60da      	str	r2, [r3, #12]
 8002750:	4b2a      	ldr	r3, [pc, #168]	; (80027fc <LCD_SetCursor+0x1e4>)
 8002752:	2280      	movs	r2, #128	; 0x80
 8002754:	615a      	str	r2, [r3, #20]
 8002756:	4b29      	ldr	r3, [pc, #164]	; (80027fc <LCD_SetCursor+0x1e4>)
 8002758:	2280      	movs	r2, #128	; 0x80
 800275a:	611a      	str	r2, [r3, #16]
 800275c:	4b27      	ldr	r3, [pc, #156]	; (80027fc <LCD_SetCursor+0x1e4>)
 800275e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002762:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8002764:	4b25      	ldr	r3, [pc, #148]	; (80027fc <LCD_SetCursor+0x1e4>)
 8002766:	f44f 7280 	mov.w	r2, #256	; 0x100
 800276a:	611a      	str	r2, [r3, #16]
 800276c:	4b23      	ldr	r3, [pc, #140]	; (80027fc <LCD_SetCursor+0x1e4>)
 800276e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002772:	615a      	str	r2, [r3, #20]
 8002774:	88fb      	ldrh	r3, [r7, #6]
 8002776:	4a22      	ldr	r2, [pc, #136]	; (8002800 <LCD_SetCursor+0x1e8>)
 8002778:	b2db      	uxtb	r3, r3
 800277a:	60d3      	str	r3, [r2, #12]
 800277c:	4b1f      	ldr	r3, [pc, #124]	; (80027fc <LCD_SetCursor+0x1e4>)
 800277e:	2280      	movs	r2, #128	; 0x80
 8002780:	615a      	str	r2, [r3, #20]
 8002782:	4b1e      	ldr	r3, [pc, #120]	; (80027fc <LCD_SetCursor+0x1e4>)
 8002784:	2280      	movs	r2, #128	; 0x80
 8002786:	611a      	str	r2, [r3, #16]
 8002788:	4b1c      	ldr	r3, [pc, #112]	; (80027fc <LCD_SetCursor+0x1e4>)
 800278a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800278e:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8002790:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <LCD_SetCursor+0x1e0>)
 8002792:	899b      	ldrh	r3, [r3, #12]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fe6d 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 800279a:	4b18      	ldr	r3, [pc, #96]	; (80027fc <LCD_SetCursor+0x1e4>)
 800279c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027a0:	611a      	str	r2, [r3, #16]
 80027a2:	4b16      	ldr	r3, [pc, #88]	; (80027fc <LCD_SetCursor+0x1e4>)
 80027a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027a8:	615a      	str	r2, [r3, #20]
 80027aa:	88bb      	ldrh	r3, [r7, #4]
 80027ac:	0a1b      	lsrs	r3, r3, #8
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	4b13      	ldr	r3, [pc, #76]	; (8002800 <LCD_SetCursor+0x1e8>)
 80027b2:	60da      	str	r2, [r3, #12]
 80027b4:	4b11      	ldr	r3, [pc, #68]	; (80027fc <LCD_SetCursor+0x1e4>)
 80027b6:	2280      	movs	r2, #128	; 0x80
 80027b8:	615a      	str	r2, [r3, #20]
 80027ba:	4b10      	ldr	r3, [pc, #64]	; (80027fc <LCD_SetCursor+0x1e4>)
 80027bc:	2280      	movs	r2, #128	; 0x80
 80027be:	611a      	str	r2, [r3, #16]
 80027c0:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <LCD_SetCursor+0x1e4>)
 80027c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027c6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <LCD_SetCursor+0x1e4>)
 80027ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027ce:	611a      	str	r2, [r3, #16]
 80027d0:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <LCD_SetCursor+0x1e4>)
 80027d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027d6:	615a      	str	r2, [r3, #20]
 80027d8:	88bb      	ldrh	r3, [r7, #4]
 80027da:	4a09      	ldr	r2, [pc, #36]	; (8002800 <LCD_SetCursor+0x1e8>)
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	60d3      	str	r3, [r2, #12]
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <LCD_SetCursor+0x1e4>)
 80027e2:	2280      	movs	r2, #128	; 0x80
 80027e4:	615a      	str	r2, [r3, #20]
 80027e6:	4b05      	ldr	r3, [pc, #20]	; (80027fc <LCD_SetCursor+0x1e4>)
 80027e8:	2280      	movs	r2, #128	; 0x80
 80027ea:	611a      	str	r2, [r3, #16]
 80027ec:	4b03      	ldr	r3, [pc, #12]	; (80027fc <LCD_SetCursor+0x1e4>)
 80027ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027f2:	611a      	str	r2, [r3, #16]
}
 80027f4:	e1d2      	b.n	8002b9c <LCD_SetCursor+0x584>
 80027f6:	bf00      	nop
 80027f8:	2000018c 	.word	0x2000018c
 80027fc:	40011000 	.word	0x40011000
 8002800:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8002804:	4b99      	ldr	r3, [pc, #612]	; (8002a6c <LCD_SetCursor+0x454>)
 8002806:	889b      	ldrh	r3, [r3, #4]
 8002808:	f641 1263 	movw	r2, #6499	; 0x1963
 800280c:	4293      	cmp	r3, r2
 800280e:	f040 8133 	bne.w	8002a78 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8002812:	4b96      	ldr	r3, [pc, #600]	; (8002a6c <LCD_SetCursor+0x454>)
 8002814:	799b      	ldrb	r3, [r3, #6]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d163      	bne.n	80028e2 <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 800281a:	4b94      	ldr	r3, [pc, #592]	; (8002a6c <LCD_SetCursor+0x454>)
 800281c:	881a      	ldrh	r2, [r3, #0]
 800281e:	88fb      	ldrh	r3, [r7, #6]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	b29b      	uxth	r3, r3
 8002824:	3b01      	subs	r3, #1
 8002826:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8002828:	4b90      	ldr	r3, [pc, #576]	; (8002a6c <LCD_SetCursor+0x454>)
 800282a:	895b      	ldrh	r3, [r3, #10]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fe21 	bl	8002474 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8002832:	4b8f      	ldr	r3, [pc, #572]	; (8002a70 <LCD_SetCursor+0x458>)
 8002834:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002838:	611a      	str	r2, [r3, #16]
 800283a:	4b8d      	ldr	r3, [pc, #564]	; (8002a70 <LCD_SetCursor+0x458>)
 800283c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002840:	615a      	str	r2, [r3, #20]
 8002842:	4b8c      	ldr	r3, [pc, #560]	; (8002a74 <LCD_SetCursor+0x45c>)
 8002844:	2200      	movs	r2, #0
 8002846:	60da      	str	r2, [r3, #12]
 8002848:	4b89      	ldr	r3, [pc, #548]	; (8002a70 <LCD_SetCursor+0x458>)
 800284a:	2280      	movs	r2, #128	; 0x80
 800284c:	615a      	str	r2, [r3, #20]
 800284e:	4b88      	ldr	r3, [pc, #544]	; (8002a70 <LCD_SetCursor+0x458>)
 8002850:	2280      	movs	r2, #128	; 0x80
 8002852:	611a      	str	r2, [r3, #16]
 8002854:	4b86      	ldr	r3, [pc, #536]	; (8002a70 <LCD_SetCursor+0x458>)
 8002856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800285a:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 800285c:	4b84      	ldr	r3, [pc, #528]	; (8002a70 <LCD_SetCursor+0x458>)
 800285e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002862:	611a      	str	r2, [r3, #16]
 8002864:	4b82      	ldr	r3, [pc, #520]	; (8002a70 <LCD_SetCursor+0x458>)
 8002866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800286a:	615a      	str	r2, [r3, #20]
 800286c:	4b81      	ldr	r3, [pc, #516]	; (8002a74 <LCD_SetCursor+0x45c>)
 800286e:	2200      	movs	r2, #0
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	4b7f      	ldr	r3, [pc, #508]	; (8002a70 <LCD_SetCursor+0x458>)
 8002874:	2280      	movs	r2, #128	; 0x80
 8002876:	615a      	str	r2, [r3, #20]
 8002878:	4b7d      	ldr	r3, [pc, #500]	; (8002a70 <LCD_SetCursor+0x458>)
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	611a      	str	r2, [r3, #16]
 800287e:	4b7c      	ldr	r3, [pc, #496]	; (8002a70 <LCD_SetCursor+0x458>)
 8002880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002884:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8002886:	4b7a      	ldr	r3, [pc, #488]	; (8002a70 <LCD_SetCursor+0x458>)
 8002888:	f44f 7280 	mov.w	r2, #256	; 0x100
 800288c:	611a      	str	r2, [r3, #16]
 800288e:	4b78      	ldr	r3, [pc, #480]	; (8002a70 <LCD_SetCursor+0x458>)
 8002890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002894:	615a      	str	r2, [r3, #20]
 8002896:	88fb      	ldrh	r3, [r7, #6]
 8002898:	0a1b      	lsrs	r3, r3, #8
 800289a:	b29a      	uxth	r2, r3
 800289c:	4b75      	ldr	r3, [pc, #468]	; (8002a74 <LCD_SetCursor+0x45c>)
 800289e:	60da      	str	r2, [r3, #12]
 80028a0:	4b73      	ldr	r3, [pc, #460]	; (8002a70 <LCD_SetCursor+0x458>)
 80028a2:	2280      	movs	r2, #128	; 0x80
 80028a4:	615a      	str	r2, [r3, #20]
 80028a6:	4b72      	ldr	r3, [pc, #456]	; (8002a70 <LCD_SetCursor+0x458>)
 80028a8:	2280      	movs	r2, #128	; 0x80
 80028aa:	611a      	str	r2, [r3, #16]
 80028ac:	4b70      	ldr	r3, [pc, #448]	; (8002a70 <LCD_SetCursor+0x458>)
 80028ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028b2:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 80028b4:	4b6e      	ldr	r3, [pc, #440]	; (8002a70 <LCD_SetCursor+0x458>)
 80028b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028ba:	611a      	str	r2, [r3, #16]
 80028bc:	4b6c      	ldr	r3, [pc, #432]	; (8002a70 <LCD_SetCursor+0x458>)
 80028be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028c2:	615a      	str	r2, [r3, #20]
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	4a6b      	ldr	r2, [pc, #428]	; (8002a74 <LCD_SetCursor+0x45c>)
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	60d3      	str	r3, [r2, #12]
 80028cc:	4b68      	ldr	r3, [pc, #416]	; (8002a70 <LCD_SetCursor+0x458>)
 80028ce:	2280      	movs	r2, #128	; 0x80
 80028d0:	615a      	str	r2, [r3, #20]
 80028d2:	4b67      	ldr	r3, [pc, #412]	; (8002a70 <LCD_SetCursor+0x458>)
 80028d4:	2280      	movs	r2, #128	; 0x80
 80028d6:	611a      	str	r2, [r3, #16]
 80028d8:	4b65      	ldr	r3, [pc, #404]	; (8002a70 <LCD_SetCursor+0x458>)
 80028da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028de:	611a      	str	r2, [r3, #16]
 80028e0:	e061      	b.n	80029a6 <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 80028e2:	4b62      	ldr	r3, [pc, #392]	; (8002a6c <LCD_SetCursor+0x454>)
 80028e4:	895b      	ldrh	r3, [r3, #10]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff fdc4 	bl	8002474 <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 80028ec:	4b60      	ldr	r3, [pc, #384]	; (8002a70 <LCD_SetCursor+0x458>)
 80028ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028f2:	611a      	str	r2, [r3, #16]
 80028f4:	4b5e      	ldr	r3, [pc, #376]	; (8002a70 <LCD_SetCursor+0x458>)
 80028f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028fa:	615a      	str	r2, [r3, #20]
 80028fc:	88fb      	ldrh	r3, [r7, #6]
 80028fe:	0a1b      	lsrs	r3, r3, #8
 8002900:	b29a      	uxth	r2, r3
 8002902:	4b5c      	ldr	r3, [pc, #368]	; (8002a74 <LCD_SetCursor+0x45c>)
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	4b5a      	ldr	r3, [pc, #360]	; (8002a70 <LCD_SetCursor+0x458>)
 8002908:	2280      	movs	r2, #128	; 0x80
 800290a:	615a      	str	r2, [r3, #20]
 800290c:	4b58      	ldr	r3, [pc, #352]	; (8002a70 <LCD_SetCursor+0x458>)
 800290e:	2280      	movs	r2, #128	; 0x80
 8002910:	611a      	str	r2, [r3, #16]
 8002912:	4b57      	ldr	r3, [pc, #348]	; (8002a70 <LCD_SetCursor+0x458>)
 8002914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002918:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 800291a:	4b55      	ldr	r3, [pc, #340]	; (8002a70 <LCD_SetCursor+0x458>)
 800291c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002920:	611a      	str	r2, [r3, #16]
 8002922:	4b53      	ldr	r3, [pc, #332]	; (8002a70 <LCD_SetCursor+0x458>)
 8002924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002928:	615a      	str	r2, [r3, #20]
 800292a:	88fb      	ldrh	r3, [r7, #6]
 800292c:	4a51      	ldr	r2, [pc, #324]	; (8002a74 <LCD_SetCursor+0x45c>)
 800292e:	b2db      	uxtb	r3, r3
 8002930:	60d3      	str	r3, [r2, #12]
 8002932:	4b4f      	ldr	r3, [pc, #316]	; (8002a70 <LCD_SetCursor+0x458>)
 8002934:	2280      	movs	r2, #128	; 0x80
 8002936:	615a      	str	r2, [r3, #20]
 8002938:	4b4d      	ldr	r3, [pc, #308]	; (8002a70 <LCD_SetCursor+0x458>)
 800293a:	2280      	movs	r2, #128	; 0x80
 800293c:	611a      	str	r2, [r3, #16]
 800293e:	4b4c      	ldr	r3, [pc, #304]	; (8002a70 <LCD_SetCursor+0x458>)
 8002940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002944:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8002946:	4b4a      	ldr	r3, [pc, #296]	; (8002a70 <LCD_SetCursor+0x458>)
 8002948:	f44f 7280 	mov.w	r2, #256	; 0x100
 800294c:	611a      	str	r2, [r3, #16]
 800294e:	4b48      	ldr	r3, [pc, #288]	; (8002a70 <LCD_SetCursor+0x458>)
 8002950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002954:	615a      	str	r2, [r3, #20]
 8002956:	4b45      	ldr	r3, [pc, #276]	; (8002a6c <LCD_SetCursor+0x454>)
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	3b01      	subs	r3, #1
 800295c:	121a      	asrs	r2, r3, #8
 800295e:	4b45      	ldr	r3, [pc, #276]	; (8002a74 <LCD_SetCursor+0x45c>)
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	4b43      	ldr	r3, [pc, #268]	; (8002a70 <LCD_SetCursor+0x458>)
 8002964:	2280      	movs	r2, #128	; 0x80
 8002966:	615a      	str	r2, [r3, #20]
 8002968:	4b41      	ldr	r3, [pc, #260]	; (8002a70 <LCD_SetCursor+0x458>)
 800296a:	2280      	movs	r2, #128	; 0x80
 800296c:	611a      	str	r2, [r3, #16]
 800296e:	4b40      	ldr	r3, [pc, #256]	; (8002a70 <LCD_SetCursor+0x458>)
 8002970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002974:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8002976:	4b3e      	ldr	r3, [pc, #248]	; (8002a70 <LCD_SetCursor+0x458>)
 8002978:	f44f 7280 	mov.w	r2, #256	; 0x100
 800297c:	611a      	str	r2, [r3, #16]
 800297e:	4b3c      	ldr	r3, [pc, #240]	; (8002a70 <LCD_SetCursor+0x458>)
 8002980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002984:	615a      	str	r2, [r3, #20]
 8002986:	4b39      	ldr	r3, [pc, #228]	; (8002a6c <LCD_SetCursor+0x454>)
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	3b01      	subs	r3, #1
 800298c:	4a39      	ldr	r2, [pc, #228]	; (8002a74 <LCD_SetCursor+0x45c>)
 800298e:	b2db      	uxtb	r3, r3
 8002990:	60d3      	str	r3, [r2, #12]
 8002992:	4b37      	ldr	r3, [pc, #220]	; (8002a70 <LCD_SetCursor+0x458>)
 8002994:	2280      	movs	r2, #128	; 0x80
 8002996:	615a      	str	r2, [r3, #20]
 8002998:	4b35      	ldr	r3, [pc, #212]	; (8002a70 <LCD_SetCursor+0x458>)
 800299a:	2280      	movs	r2, #128	; 0x80
 800299c:	611a      	str	r2, [r3, #16]
 800299e:	4b34      	ldr	r3, [pc, #208]	; (8002a70 <LCD_SetCursor+0x458>)
 80029a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029a4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80029a6:	4b31      	ldr	r3, [pc, #196]	; (8002a6c <LCD_SetCursor+0x454>)
 80029a8:	899b      	ldrh	r3, [r3, #12]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fd62 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 80029b0:	4b2f      	ldr	r3, [pc, #188]	; (8002a70 <LCD_SetCursor+0x458>)
 80029b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029b6:	611a      	str	r2, [r3, #16]
 80029b8:	4b2d      	ldr	r3, [pc, #180]	; (8002a70 <LCD_SetCursor+0x458>)
 80029ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029be:	615a      	str	r2, [r3, #20]
 80029c0:	88bb      	ldrh	r3, [r7, #4]
 80029c2:	0a1b      	lsrs	r3, r3, #8
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	4b2b      	ldr	r3, [pc, #172]	; (8002a74 <LCD_SetCursor+0x45c>)
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	4b29      	ldr	r3, [pc, #164]	; (8002a70 <LCD_SetCursor+0x458>)
 80029cc:	2280      	movs	r2, #128	; 0x80
 80029ce:	615a      	str	r2, [r3, #20]
 80029d0:	4b27      	ldr	r3, [pc, #156]	; (8002a70 <LCD_SetCursor+0x458>)
 80029d2:	2280      	movs	r2, #128	; 0x80
 80029d4:	611a      	str	r2, [r3, #16]
 80029d6:	4b26      	ldr	r3, [pc, #152]	; (8002a70 <LCD_SetCursor+0x458>)
 80029d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029dc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 80029de:	4b24      	ldr	r3, [pc, #144]	; (8002a70 <LCD_SetCursor+0x458>)
 80029e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029e4:	611a      	str	r2, [r3, #16]
 80029e6:	4b22      	ldr	r3, [pc, #136]	; (8002a70 <LCD_SetCursor+0x458>)
 80029e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ec:	615a      	str	r2, [r3, #20]
 80029ee:	88bb      	ldrh	r3, [r7, #4]
 80029f0:	4a20      	ldr	r2, [pc, #128]	; (8002a74 <LCD_SetCursor+0x45c>)
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	60d3      	str	r3, [r2, #12]
 80029f6:	4b1e      	ldr	r3, [pc, #120]	; (8002a70 <LCD_SetCursor+0x458>)
 80029f8:	2280      	movs	r2, #128	; 0x80
 80029fa:	615a      	str	r2, [r3, #20]
 80029fc:	4b1c      	ldr	r3, [pc, #112]	; (8002a70 <LCD_SetCursor+0x458>)
 80029fe:	2280      	movs	r2, #128	; 0x80
 8002a00:	611a      	str	r2, [r3, #16]
 8002a02:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <LCD_SetCursor+0x458>)
 8002a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a08:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8002a0a:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <LCD_SetCursor+0x458>)
 8002a0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a10:	611a      	str	r2, [r3, #16]
 8002a12:	4b17      	ldr	r3, [pc, #92]	; (8002a70 <LCD_SetCursor+0x458>)
 8002a14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a18:	615a      	str	r2, [r3, #20]
 8002a1a:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <LCD_SetCursor+0x454>)
 8002a1c:	885b      	ldrh	r3, [r3, #2]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	121a      	asrs	r2, r3, #8
 8002a22:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <LCD_SetCursor+0x45c>)
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <LCD_SetCursor+0x458>)
 8002a28:	2280      	movs	r2, #128	; 0x80
 8002a2a:	615a      	str	r2, [r3, #20]
 8002a2c:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <LCD_SetCursor+0x458>)
 8002a2e:	2280      	movs	r2, #128	; 0x80
 8002a30:	611a      	str	r2, [r3, #16]
 8002a32:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <LCD_SetCursor+0x458>)
 8002a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a38:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <LCD_SetCursor+0x458>)
 8002a3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a40:	611a      	str	r2, [r3, #16]
 8002a42:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <LCD_SetCursor+0x458>)
 8002a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a48:	615a      	str	r2, [r3, #20]
 8002a4a:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <LCD_SetCursor+0x454>)
 8002a4c:	885b      	ldrh	r3, [r3, #2]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	4a08      	ldr	r2, [pc, #32]	; (8002a74 <LCD_SetCursor+0x45c>)
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	60d3      	str	r3, [r2, #12]
 8002a56:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <LCD_SetCursor+0x458>)
 8002a58:	2280      	movs	r2, #128	; 0x80
 8002a5a:	615a      	str	r2, [r3, #20]
 8002a5c:	4b04      	ldr	r3, [pc, #16]	; (8002a70 <LCD_SetCursor+0x458>)
 8002a5e:	2280      	movs	r2, #128	; 0x80
 8002a60:	611a      	str	r2, [r3, #16]
 8002a62:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <LCD_SetCursor+0x458>)
 8002a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a68:	611a      	str	r2, [r3, #16]
}
 8002a6a:	e097      	b.n	8002b9c <LCD_SetCursor+0x584>
 8002a6c:	2000018c 	.word	0x2000018c
 8002a70:	40011000 	.word	0x40011000
 8002a74:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8002a78:	4b4a      	ldr	r3, [pc, #296]	; (8002ba4 <LCD_SetCursor+0x58c>)
 8002a7a:	889b      	ldrh	r3, [r3, #4]
 8002a7c:	f245 5210 	movw	r2, #21776	; 0x5510
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d172      	bne.n	8002b6a <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8002a84:	4b47      	ldr	r3, [pc, #284]	; (8002ba4 <LCD_SetCursor+0x58c>)
 8002a86:	895b      	ldrh	r3, [r3, #10]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fcf3 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8002a8e:	4b46      	ldr	r3, [pc, #280]	; (8002ba8 <LCD_SetCursor+0x590>)
 8002a90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a94:	611a      	str	r2, [r3, #16]
 8002a96:	4b44      	ldr	r3, [pc, #272]	; (8002ba8 <LCD_SetCursor+0x590>)
 8002a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a9c:	615a      	str	r2, [r3, #20]
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	0a1b      	lsrs	r3, r3, #8
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	4b41      	ldr	r3, [pc, #260]	; (8002bac <LCD_SetCursor+0x594>)
 8002aa6:	60da      	str	r2, [r3, #12]
 8002aa8:	4b3f      	ldr	r3, [pc, #252]	; (8002ba8 <LCD_SetCursor+0x590>)
 8002aaa:	2280      	movs	r2, #128	; 0x80
 8002aac:	615a      	str	r2, [r3, #20]
 8002aae:	4b3e      	ldr	r3, [pc, #248]	; (8002ba8 <LCD_SetCursor+0x590>)
 8002ab0:	2280      	movs	r2, #128	; 0x80
 8002ab2:	611a      	str	r2, [r3, #16]
 8002ab4:	4b3c      	ldr	r3, [pc, #240]	; (8002ba8 <LCD_SetCursor+0x590>)
 8002ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aba:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8002abc:	4b39      	ldr	r3, [pc, #228]	; (8002ba4 <LCD_SetCursor+0x58c>)
 8002abe:	895b      	ldrh	r3, [r3, #10]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff fcd5 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 8002aca:	4b37      	ldr	r3, [pc, #220]	; (8002ba8 <LCD_SetCursor+0x590>)
 8002acc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ad0:	611a      	str	r2, [r3, #16]
 8002ad2:	4b35      	ldr	r3, [pc, #212]	; (8002ba8 <LCD_SetCursor+0x590>)
 8002ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ad8:	615a      	str	r2, [r3, #20]
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	4a33      	ldr	r2, [pc, #204]	; (8002bac <LCD_SetCursor+0x594>)
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	60d3      	str	r3, [r2, #12]
 8002ae2:	4b31      	ldr	r3, [pc, #196]	; (8002ba8 <LCD_SetCursor+0x590>)
 8002ae4:	2280      	movs	r2, #128	; 0x80
 8002ae6:	615a      	str	r2, [r3, #20]
 8002ae8:	4b2f      	ldr	r3, [pc, #188]	; (8002ba8 <LCD_SetCursor+0x590>)
 8002aea:	2280      	movs	r2, #128	; 0x80
 8002aec:	611a      	str	r2, [r3, #16]
 8002aee:	4b2e      	ldr	r3, [pc, #184]	; (8002ba8 <LCD_SetCursor+0x590>)
 8002af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002af4:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8002af6:	4b2b      	ldr	r3, [pc, #172]	; (8002ba4 <LCD_SetCursor+0x58c>)
 8002af8:	899b      	ldrh	r3, [r3, #12]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fcba 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8002b00:	4b29      	ldr	r3, [pc, #164]	; (8002ba8 <LCD_SetCursor+0x590>)
 8002b02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b06:	611a      	str	r2, [r3, #16]
 8002b08:	4b27      	ldr	r3, [pc, #156]	; (8002ba8 <LCD_SetCursor+0x590>)
 8002b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b0e:	615a      	str	r2, [r3, #20]
 8002b10:	88bb      	ldrh	r3, [r7, #4]
 8002b12:	0a1b      	lsrs	r3, r3, #8
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	4b25      	ldr	r3, [pc, #148]	; (8002bac <LCD_SetCursor+0x594>)
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	4b23      	ldr	r3, [pc, #140]	; (8002ba8 <LCD_SetCursor+0x590>)
 8002b1c:	2280      	movs	r2, #128	; 0x80
 8002b1e:	615a      	str	r2, [r3, #20]
 8002b20:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <LCD_SetCursor+0x590>)
 8002b22:	2280      	movs	r2, #128	; 0x80
 8002b24:	611a      	str	r2, [r3, #16]
 8002b26:	4b20      	ldr	r3, [pc, #128]	; (8002ba8 <LCD_SetCursor+0x590>)
 8002b28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b2c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8002b2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <LCD_SetCursor+0x58c>)
 8002b30:	899b      	ldrh	r3, [r3, #12]
 8002b32:	3301      	adds	r3, #1
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff fc9c 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8002b3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <LCD_SetCursor+0x590>)
 8002b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b42:	611a      	str	r2, [r3, #16]
 8002b44:	4b18      	ldr	r3, [pc, #96]	; (8002ba8 <LCD_SetCursor+0x590>)
 8002b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b4a:	615a      	str	r2, [r3, #20]
 8002b4c:	88bb      	ldrh	r3, [r7, #4]
 8002b4e:	4a17      	ldr	r2, [pc, #92]	; (8002bac <LCD_SetCursor+0x594>)
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	60d3      	str	r3, [r2, #12]
 8002b54:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <LCD_SetCursor+0x590>)
 8002b56:	2280      	movs	r2, #128	; 0x80
 8002b58:	615a      	str	r2, [r3, #20]
 8002b5a:	4b13      	ldr	r3, [pc, #76]	; (8002ba8 <LCD_SetCursor+0x590>)
 8002b5c:	2280      	movs	r2, #128	; 0x80
 8002b5e:	611a      	str	r2, [r3, #16]
 8002b60:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <LCD_SetCursor+0x590>)
 8002b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b66:	611a      	str	r2, [r3, #16]
}
 8002b68:	e018      	b.n	8002b9c <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8002b6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ba4 <LCD_SetCursor+0x58c>)
 8002b6c:	799b      	ldrb	r3, [r3, #6]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d106      	bne.n	8002b80 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 8002b72:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <LCD_SetCursor+0x58c>)
 8002b74:	881a      	ldrh	r2, [r3, #0]
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8002b80:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <LCD_SetCursor+0x58c>)
 8002b82:	895b      	ldrh	r3, [r3, #10]
 8002b84:	88fa      	ldrh	r2, [r7, #6]
 8002b86:	4611      	mov	r1, r2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff fcff 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8002b8e:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <LCD_SetCursor+0x58c>)
 8002b90:	899b      	ldrh	r3, [r3, #12]
 8002b92:	88ba      	ldrh	r2, [r7, #4]
 8002b94:	4611      	mov	r1, r2
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fcf8 	bl	800258c <LCD_WriteReg>
}
 8002b9c:	bf00      	nop
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	2000018c 	.word	0x2000018c
 8002ba8:	40011000 	.word	0x40011000
 8002bac:	40010c00 	.word	0x40010c00

08002bb0 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 8002bc2:	4b78      	ldr	r3, [pc, #480]	; (8002da4 <LCD_Scan_Dir+0x1f4>)
 8002bc4:	799b      	ldrb	r3, [r3, #6]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d10b      	bne.n	8002be2 <LCD_Scan_Dir+0x32>
 8002bca:	4b76      	ldr	r3, [pc, #472]	; (8002da4 <LCD_Scan_Dir+0x1f4>)
 8002bcc:	889b      	ldrh	r3, [r3, #4]
 8002bce:	f646 0204 	movw	r2, #26628	; 0x6804
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d005      	beq.n	8002be2 <LCD_Scan_Dir+0x32>
 8002bd6:	4b73      	ldr	r3, [pc, #460]	; (8002da4 <LCD_Scan_Dir+0x1f4>)
 8002bd8:	889b      	ldrh	r3, [r3, #4]
 8002bda:	f641 1263 	movw	r2, #6499	; 0x1963
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d109      	bne.n	8002bf6 <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 8002be2:	4b70      	ldr	r3, [pc, #448]	; (8002da4 <LCD_Scan_Dir+0x1f4>)
 8002be4:	799b      	ldrb	r3, [r3, #6]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d134      	bne.n	8002c54 <LCD_Scan_Dir+0xa4>
 8002bea:	4b6e      	ldr	r3, [pc, #440]	; (8002da4 <LCD_Scan_Dir+0x1f4>)
 8002bec:	889b      	ldrh	r3, [r3, #4]
 8002bee:	f641 1263 	movw	r2, #6499	; 0x1963
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d12e      	bne.n	8002c54 <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	2b07      	cmp	r3, #7
 8002bfa:	d82b      	bhi.n	8002c54 <LCD_Scan_Dir+0xa4>
 8002bfc:	a201      	add	r2, pc, #4	; (adr r2, 8002c04 <LCD_Scan_Dir+0x54>)
 8002bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c02:	bf00      	nop
 8002c04:	08002c25 	.word	0x08002c25
 8002c08:	08002c2b 	.word	0x08002c2b
 8002c0c:	08002c31 	.word	0x08002c31
 8002c10:	08002c37 	.word	0x08002c37
 8002c14:	08002c3d 	.word	0x08002c3d
 8002c18:	08002c43 	.word	0x08002c43
 8002c1c:	08002c49 	.word	0x08002c49
 8002c20:	08002c4f 	.word	0x08002c4f
		{
		case 0:
			dir = 6;
 8002c24:	2306      	movs	r3, #6
 8002c26:	71fb      	strb	r3, [r7, #7]
			break;
 8002c28:	e014      	b.n	8002c54 <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 8002c2a:	2307      	movs	r3, #7
 8002c2c:	71fb      	strb	r3, [r7, #7]
			break;
 8002c2e:	e011      	b.n	8002c54 <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 8002c30:	2304      	movs	r3, #4
 8002c32:	71fb      	strb	r3, [r7, #7]
			break;
 8002c34:	e00e      	b.n	8002c54 <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 8002c36:	2305      	movs	r3, #5
 8002c38:	71fb      	strb	r3, [r7, #7]
			break;
 8002c3a:	e00b      	b.n	8002c54 <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	71fb      	strb	r3, [r7, #7]
			break;
 8002c40:	e008      	b.n	8002c54 <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	71fb      	strb	r3, [r7, #7]
			break;
 8002c46:	e005      	b.n	8002c54 <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	71fb      	strb	r3, [r7, #7]
			break;
 8002c4c:	e002      	b.n	8002c54 <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	71fb      	strb	r3, [r7, #7]
			break;
 8002c52:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 8002c54:	4b53      	ldr	r3, [pc, #332]	; (8002da4 <LCD_Scan_Dir+0x1f4>)
 8002c56:	889b      	ldrh	r3, [r3, #4]
 8002c58:	f249 3241 	movw	r2, #37697	; 0x9341
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d018      	beq.n	8002c92 <LCD_Scan_Dir+0xe2>
 8002c60:	4b50      	ldr	r3, [pc, #320]	; (8002da4 <LCD_Scan_Dir+0x1f4>)
 8002c62:	889b      	ldrh	r3, [r3, #4]
 8002c64:	f646 0204 	movw	r2, #26628	; 0x6804
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d012      	beq.n	8002c92 <LCD_Scan_Dir+0xe2>
 8002c6c:	4b4d      	ldr	r3, [pc, #308]	; (8002da4 <LCD_Scan_Dir+0x1f4>)
 8002c6e:	889b      	ldrh	r3, [r3, #4]
 8002c70:	f245 3210 	movw	r2, #21264	; 0x5310
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d00c      	beq.n	8002c92 <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 8002c78:	4b4a      	ldr	r3, [pc, #296]	; (8002da4 <LCD_Scan_Dir+0x1f4>)
 8002c7a:	889b      	ldrh	r3, [r3, #4]
 8002c7c:	f245 5210 	movw	r2, #21776	; 0x5510
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d006      	beq.n	8002c92 <LCD_Scan_Dir+0xe2>
 8002c84:	4b47      	ldr	r3, [pc, #284]	; (8002da4 <LCD_Scan_Dir+0x1f4>)
 8002c86:	889b      	ldrh	r3, [r3, #4]
 8002c88:	f641 1263 	movw	r2, #6499	; 0x1963
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	f040 8250 	bne.w	8003132 <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	2b07      	cmp	r3, #7
 8002c96:	d836      	bhi.n	8002d06 <LCD_Scan_Dir+0x156>
 8002c98:	a201      	add	r2, pc, #4	; (adr r2, 8002ca0 <LCD_Scan_Dir+0xf0>)
 8002c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9e:	bf00      	nop
 8002ca0:	08002d07 	.word	0x08002d07
 8002ca4:	08002cc1 	.word	0x08002cc1
 8002ca8:	08002ccb 	.word	0x08002ccb
 8002cac:	08002cd5 	.word	0x08002cd5
 8002cb0:	08002cdf 	.word	0x08002cdf
 8002cb4:	08002ce9 	.word	0x08002ce9
 8002cb8:	08002cf3 	.word	0x08002cf3
 8002cbc:	08002cfd 	.word	0x08002cfd
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8002cc0:	89fb      	ldrh	r3, [r7, #14]
 8002cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cc6:	81fb      	strh	r3, [r7, #14]
			break;
 8002cc8:	e01d      	b.n	8002d06 <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 8002cca:	89fb      	ldrh	r3, [r7, #14]
 8002ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cd0:	81fb      	strh	r3, [r7, #14]
			break;
 8002cd2:	e018      	b.n	8002d06 <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8002cd4:	89fb      	ldrh	r3, [r7, #14]
 8002cd6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cda:	81fb      	strh	r3, [r7, #14]
			break;
 8002cdc:	e013      	b.n	8002d06 <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 8002cde:	89fb      	ldrh	r3, [r7, #14]
 8002ce0:	f043 0320 	orr.w	r3, r3, #32
 8002ce4:	81fb      	strh	r3, [r7, #14]
			break;
 8002ce6:	e00e      	b.n	8002d06 <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8002ce8:	89fb      	ldrh	r3, [r7, #14]
 8002cea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002cee:	81fb      	strh	r3, [r7, #14]
			break;
 8002cf0:	e009      	b.n	8002d06 <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 8002cf2:	89fb      	ldrh	r3, [r7, #14]
 8002cf4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8002cf8:	81fb      	strh	r3, [r7, #14]
			break;
 8002cfa:	e004      	b.n	8002d06 <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8002cfc:	89fb      	ldrh	r3, [r7, #14]
 8002cfe:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002d02:	81fb      	strh	r3, [r7, #14]
			break;
 8002d04:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 8002d06:	4b27      	ldr	r3, [pc, #156]	; (8002da4 <LCD_Scan_Dir+0x1f4>)
 8002d08:	889b      	ldrh	r3, [r3, #4]
 8002d0a:	f245 5210 	movw	r2, #21776	; 0x5510
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d103      	bne.n	8002d1a <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 8002d12:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8002d16:	81bb      	strh	r3, [r7, #12]
 8002d18:	e001      	b.n	8002d1e <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 8002d1a:	2336      	movs	r3, #54	; 0x36
 8002d1c:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 8002d1e:	4b21      	ldr	r3, [pc, #132]	; (8002da4 <LCD_Scan_Dir+0x1f4>)
 8002d20:	889b      	ldrh	r3, [r3, #4]
 8002d22:	f245 3210 	movw	r2, #21264	; 0x5310
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d00f      	beq.n	8002d4a <LCD_Scan_Dir+0x19a>
 8002d2a:	4b1e      	ldr	r3, [pc, #120]	; (8002da4 <LCD_Scan_Dir+0x1f4>)
 8002d2c:	889b      	ldrh	r3, [r3, #4]
 8002d2e:	f245 5210 	movw	r2, #21776	; 0x5510
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d009      	beq.n	8002d4a <LCD_Scan_Dir+0x19a>
 8002d36:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <LCD_Scan_Dir+0x1f4>)
 8002d38:	889b      	ldrh	r3, [r3, #4]
 8002d3a:	f641 1263 	movw	r2, #6499	; 0x1963
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d003      	beq.n	8002d4a <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 8002d42:	89fb      	ldrh	r3, [r7, #14]
 8002d44:	f043 0308 	orr.w	r3, r3, #8
 8002d48:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 8002d4a:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <LCD_Scan_Dir+0x1f4>)
 8002d4c:	889b      	ldrh	r3, [r3, #4]
 8002d4e:	f646 0204 	movw	r2, #26628	; 0x6804
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d103      	bne.n	8002d5e <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 8002d56:	89fb      	ldrh	r3, [r7, #14]
 8002d58:	f043 0302 	orr.w	r3, r3, #2
 8002d5c:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8002d5e:	89fa      	ldrh	r2, [r7, #14]
 8002d60:	89bb      	ldrh	r3, [r7, #12]
 8002d62:	4611      	mov	r1, r2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff fc11 	bl	800258c <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 8002d6a:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <LCD_Scan_Dir+0x1f4>)
 8002d6c:	889b      	ldrh	r3, [r3, #4]
 8002d6e:	f641 1263 	movw	r2, #6499	; 0x1963
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d028      	beq.n	8002dc8 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 8002d76:	89fb      	ldrh	r3, [r7, #14]
 8002d78:	f003 0320 	and.w	r3, r3, #32
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d013      	beq.n	8002da8 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 8002d80:	4b08      	ldr	r3, [pc, #32]	; (8002da4 <LCD_Scan_Dir+0x1f4>)
 8002d82:	881a      	ldrh	r2, [r3, #0]
 8002d84:	4b07      	ldr	r3, [pc, #28]	; (8002da4 <LCD_Scan_Dir+0x1f4>)
 8002d86:	885b      	ldrh	r3, [r3, #2]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d21d      	bcs.n	8002dc8 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <LCD_Scan_Dir+0x1f4>)
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8002d92:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <LCD_Scan_Dir+0x1f4>)
 8002d94:	885a      	ldrh	r2, [r3, #2]
 8002d96:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <LCD_Scan_Dir+0x1f4>)
 8002d98:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8002d9a:	4a02      	ldr	r2, [pc, #8]	; (8002da4 <LCD_Scan_Dir+0x1f4>)
 8002d9c:	897b      	ldrh	r3, [r7, #10]
 8002d9e:	8053      	strh	r3, [r2, #2]
 8002da0:	e012      	b.n	8002dc8 <LCD_Scan_Dir+0x218>
 8002da2:	bf00      	nop
 8002da4:	2000018c 	.word	0x2000018c
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 8002da8:	4b7f      	ldr	r3, [pc, #508]	; (8002fa8 <LCD_Scan_Dir+0x3f8>)
 8002daa:	881a      	ldrh	r2, [r3, #0]
 8002dac:	4b7e      	ldr	r3, [pc, #504]	; (8002fa8 <LCD_Scan_Dir+0x3f8>)
 8002dae:	885b      	ldrh	r3, [r3, #2]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d909      	bls.n	8002dc8 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8002db4:	4b7c      	ldr	r3, [pc, #496]	; (8002fa8 <LCD_Scan_Dir+0x3f8>)
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8002dba:	4b7b      	ldr	r3, [pc, #492]	; (8002fa8 <LCD_Scan_Dir+0x3f8>)
 8002dbc:	885a      	ldrh	r2, [r3, #2]
 8002dbe:	4b7a      	ldr	r3, [pc, #488]	; (8002fa8 <LCD_Scan_Dir+0x3f8>)
 8002dc0:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8002dc2:	4a79      	ldr	r2, [pc, #484]	; (8002fa8 <LCD_Scan_Dir+0x3f8>)
 8002dc4:	897b      	ldrh	r3, [r7, #10]
 8002dc6:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 8002dc8:	4b77      	ldr	r3, [pc, #476]	; (8002fa8 <LCD_Scan_Dir+0x3f8>)
 8002dca:	889b      	ldrh	r3, [r3, #4]
 8002dcc:	f245 5210 	movw	r2, #21776	; 0x5510
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	f040 80ef 	bne.w	8002fb4 <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 8002dd6:	4b74      	ldr	r3, [pc, #464]	; (8002fa8 <LCD_Scan_Dir+0x3f8>)
 8002dd8:	895b      	ldrh	r3, [r3, #10]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff fb4a 	bl	8002474 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8002de0:	4b72      	ldr	r3, [pc, #456]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002de2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002de6:	611a      	str	r2, [r3, #16]
 8002de8:	4b70      	ldr	r3, [pc, #448]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dee:	615a      	str	r2, [r3, #20]
 8002df0:	4b6f      	ldr	r3, [pc, #444]	; (8002fb0 <LCD_Scan_Dir+0x400>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	4b6d      	ldr	r3, [pc, #436]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002df8:	2280      	movs	r2, #128	; 0x80
 8002dfa:	615a      	str	r2, [r3, #20]
 8002dfc:	4b6b      	ldr	r3, [pc, #428]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002dfe:	2280      	movs	r2, #128	; 0x80
 8002e00:	611a      	str	r2, [r3, #16]
 8002e02:	4b6a      	ldr	r3, [pc, #424]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e08:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 8002e0a:	4b67      	ldr	r3, [pc, #412]	; (8002fa8 <LCD_Scan_Dir+0x3f8>)
 8002e0c:	895b      	ldrh	r3, [r3, #10]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff fb2e 	bl	8002474 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8002e18:	4b64      	ldr	r3, [pc, #400]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002e1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e1e:	611a      	str	r2, [r3, #16]
 8002e20:	4b62      	ldr	r3, [pc, #392]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e26:	615a      	str	r2, [r3, #20]
 8002e28:	4b61      	ldr	r3, [pc, #388]	; (8002fb0 <LCD_Scan_Dir+0x400>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	60da      	str	r2, [r3, #12]
 8002e2e:	4b5f      	ldr	r3, [pc, #380]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002e30:	2280      	movs	r2, #128	; 0x80
 8002e32:	615a      	str	r2, [r3, #20]
 8002e34:	4b5d      	ldr	r3, [pc, #372]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002e36:	2280      	movs	r2, #128	; 0x80
 8002e38:	611a      	str	r2, [r3, #16]
 8002e3a:	4b5c      	ldr	r3, [pc, #368]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e40:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 8002e42:	4b59      	ldr	r3, [pc, #356]	; (8002fa8 <LCD_Scan_Dir+0x3f8>)
 8002e44:	895b      	ldrh	r3, [r3, #10]
 8002e46:	3302      	adds	r3, #2
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff fb12 	bl	8002474 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8002e50:	4b56      	ldr	r3, [pc, #344]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002e52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e56:	611a      	str	r2, [r3, #16]
 8002e58:	4b54      	ldr	r3, [pc, #336]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002e5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e5e:	615a      	str	r2, [r3, #20]
 8002e60:	4b51      	ldr	r3, [pc, #324]	; (8002fa8 <LCD_Scan_Dir+0x3f8>)
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	3b01      	subs	r3, #1
 8002e66:	121a      	asrs	r2, r3, #8
 8002e68:	4b51      	ldr	r3, [pc, #324]	; (8002fb0 <LCD_Scan_Dir+0x400>)
 8002e6a:	60da      	str	r2, [r3, #12]
 8002e6c:	4b4f      	ldr	r3, [pc, #316]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002e6e:	2280      	movs	r2, #128	; 0x80
 8002e70:	615a      	str	r2, [r3, #20]
 8002e72:	4b4e      	ldr	r3, [pc, #312]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002e74:	2280      	movs	r2, #128	; 0x80
 8002e76:	611a      	str	r2, [r3, #16]
 8002e78:	4b4c      	ldr	r3, [pc, #304]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002e7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e7e:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 8002e80:	4b49      	ldr	r3, [pc, #292]	; (8002fa8 <LCD_Scan_Dir+0x3f8>)
 8002e82:	895b      	ldrh	r3, [r3, #10]
 8002e84:	3303      	adds	r3, #3
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff faf3 	bl	8002474 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8002e8e:	4b47      	ldr	r3, [pc, #284]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002e90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e94:	611a      	str	r2, [r3, #16]
 8002e96:	4b45      	ldr	r3, [pc, #276]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e9c:	615a      	str	r2, [r3, #20]
 8002e9e:	4b42      	ldr	r3, [pc, #264]	; (8002fa8 <LCD_Scan_Dir+0x3f8>)
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	4a42      	ldr	r2, [pc, #264]	; (8002fb0 <LCD_Scan_Dir+0x400>)
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	60d3      	str	r3, [r2, #12]
 8002eaa:	4b40      	ldr	r3, [pc, #256]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002eac:	2280      	movs	r2, #128	; 0x80
 8002eae:	615a      	str	r2, [r3, #20]
 8002eb0:	4b3e      	ldr	r3, [pc, #248]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002eb2:	2280      	movs	r2, #128	; 0x80
 8002eb4:	611a      	str	r2, [r3, #16]
 8002eb6:	4b3d      	ldr	r3, [pc, #244]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002eb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ebc:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8002ebe:	4b3a      	ldr	r3, [pc, #232]	; (8002fa8 <LCD_Scan_Dir+0x3f8>)
 8002ec0:	899b      	ldrh	r3, [r3, #12]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fad6 	bl	8002474 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8002ec8:	4b38      	ldr	r3, [pc, #224]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002eca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ece:	611a      	str	r2, [r3, #16]
 8002ed0:	4b36      	ldr	r3, [pc, #216]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ed6:	615a      	str	r2, [r3, #20]
 8002ed8:	4b35      	ldr	r3, [pc, #212]	; (8002fb0 <LCD_Scan_Dir+0x400>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	4b33      	ldr	r3, [pc, #204]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002ee0:	2280      	movs	r2, #128	; 0x80
 8002ee2:	615a      	str	r2, [r3, #20]
 8002ee4:	4b31      	ldr	r3, [pc, #196]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002ee6:	2280      	movs	r2, #128	; 0x80
 8002ee8:	611a      	str	r2, [r3, #16]
 8002eea:	4b30      	ldr	r3, [pc, #192]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ef0:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 8002ef2:	4b2d      	ldr	r3, [pc, #180]	; (8002fa8 <LCD_Scan_Dir+0x3f8>)
 8002ef4:	899b      	ldrh	r3, [r3, #12]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff faba 	bl	8002474 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8002f00:	4b2a      	ldr	r3, [pc, #168]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002f02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f06:	611a      	str	r2, [r3, #16]
 8002f08:	4b28      	ldr	r3, [pc, #160]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f0e:	615a      	str	r2, [r3, #20]
 8002f10:	4b27      	ldr	r3, [pc, #156]	; (8002fb0 <LCD_Scan_Dir+0x400>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	60da      	str	r2, [r3, #12]
 8002f16:	4b25      	ldr	r3, [pc, #148]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002f18:	2280      	movs	r2, #128	; 0x80
 8002f1a:	615a      	str	r2, [r3, #20]
 8002f1c:	4b23      	ldr	r3, [pc, #140]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002f1e:	2280      	movs	r2, #128	; 0x80
 8002f20:	611a      	str	r2, [r3, #16]
 8002f22:	4b22      	ldr	r3, [pc, #136]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f28:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 8002f2a:	4b1f      	ldr	r3, [pc, #124]	; (8002fa8 <LCD_Scan_Dir+0x3f8>)
 8002f2c:	899b      	ldrh	r3, [r3, #12]
 8002f2e:	3302      	adds	r3, #2
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff fa9e 	bl	8002474 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8002f38:	4b1c      	ldr	r3, [pc, #112]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002f3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f3e:	611a      	str	r2, [r3, #16]
 8002f40:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f46:	615a      	str	r2, [r3, #20]
 8002f48:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <LCD_Scan_Dir+0x3f8>)
 8002f4a:	885b      	ldrh	r3, [r3, #2]
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	121a      	asrs	r2, r3, #8
 8002f50:	4b17      	ldr	r3, [pc, #92]	; (8002fb0 <LCD_Scan_Dir+0x400>)
 8002f52:	60da      	str	r2, [r3, #12]
 8002f54:	4b15      	ldr	r3, [pc, #84]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002f56:	2280      	movs	r2, #128	; 0x80
 8002f58:	615a      	str	r2, [r3, #20]
 8002f5a:	4b14      	ldr	r3, [pc, #80]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002f5c:	2280      	movs	r2, #128	; 0x80
 8002f5e:	611a      	str	r2, [r3, #16]
 8002f60:	4b12      	ldr	r3, [pc, #72]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002f62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f66:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 8002f68:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <LCD_Scan_Dir+0x3f8>)
 8002f6a:	899b      	ldrh	r3, [r3, #12]
 8002f6c:	3303      	adds	r3, #3
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fa7f 	bl	8002474 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8002f76:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002f78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f7c:	611a      	str	r2, [r3, #16]
 8002f7e:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002f80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f84:	615a      	str	r2, [r3, #20]
 8002f86:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <LCD_Scan_Dir+0x3f8>)
 8002f88:	885b      	ldrh	r3, [r3, #2]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	4a08      	ldr	r2, [pc, #32]	; (8002fb0 <LCD_Scan_Dir+0x400>)
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	60d3      	str	r3, [r2, #12]
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002f94:	2280      	movs	r2, #128	; 0x80
 8002f96:	615a      	str	r2, [r3, #20]
 8002f98:	4b04      	ldr	r3, [pc, #16]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002f9a:	2280      	movs	r2, #128	; 0x80
 8002f9c:	611a      	str	r2, [r3, #16]
 8002f9e:	4b03      	ldr	r3, [pc, #12]	; (8002fac <LCD_Scan_Dir+0x3fc>)
 8002fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fa4:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8002fa6:	e10a      	b.n	80031be <LCD_Scan_Dir+0x60e>
 8002fa8:	2000018c 	.word	0x2000018c
 8002fac:	40011000 	.word	0x40011000
 8002fb0:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 8002fb4:	4b84      	ldr	r3, [pc, #528]	; (80031c8 <LCD_Scan_Dir+0x618>)
 8002fb6:	895b      	ldrh	r3, [r3, #10]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff fa5b 	bl	8002474 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8002fbe:	4b83      	ldr	r3, [pc, #524]	; (80031cc <LCD_Scan_Dir+0x61c>)
 8002fc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fc4:	611a      	str	r2, [r3, #16]
 8002fc6:	4b81      	ldr	r3, [pc, #516]	; (80031cc <LCD_Scan_Dir+0x61c>)
 8002fc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fcc:	615a      	str	r2, [r3, #20]
 8002fce:	4b80      	ldr	r3, [pc, #512]	; (80031d0 <LCD_Scan_Dir+0x620>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	60da      	str	r2, [r3, #12]
 8002fd4:	4b7d      	ldr	r3, [pc, #500]	; (80031cc <LCD_Scan_Dir+0x61c>)
 8002fd6:	2280      	movs	r2, #128	; 0x80
 8002fd8:	615a      	str	r2, [r3, #20]
 8002fda:	4b7c      	ldr	r3, [pc, #496]	; (80031cc <LCD_Scan_Dir+0x61c>)
 8002fdc:	2280      	movs	r2, #128	; 0x80
 8002fde:	611a      	str	r2, [r3, #16]
 8002fe0:	4b7a      	ldr	r3, [pc, #488]	; (80031cc <LCD_Scan_Dir+0x61c>)
 8002fe2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fe6:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8002fe8:	4b78      	ldr	r3, [pc, #480]	; (80031cc <LCD_Scan_Dir+0x61c>)
 8002fea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fee:	611a      	str	r2, [r3, #16]
 8002ff0:	4b76      	ldr	r3, [pc, #472]	; (80031cc <LCD_Scan_Dir+0x61c>)
 8002ff2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ff6:	615a      	str	r2, [r3, #20]
 8002ff8:	4b75      	ldr	r3, [pc, #468]	; (80031d0 <LCD_Scan_Dir+0x620>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	60da      	str	r2, [r3, #12]
 8002ffe:	4b73      	ldr	r3, [pc, #460]	; (80031cc <LCD_Scan_Dir+0x61c>)
 8003000:	2280      	movs	r2, #128	; 0x80
 8003002:	615a      	str	r2, [r3, #20]
 8003004:	4b71      	ldr	r3, [pc, #452]	; (80031cc <LCD_Scan_Dir+0x61c>)
 8003006:	2280      	movs	r2, #128	; 0x80
 8003008:	611a      	str	r2, [r3, #16]
 800300a:	4b70      	ldr	r3, [pc, #448]	; (80031cc <LCD_Scan_Dir+0x61c>)
 800300c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003010:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8003012:	4b6e      	ldr	r3, [pc, #440]	; (80031cc <LCD_Scan_Dir+0x61c>)
 8003014:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003018:	611a      	str	r2, [r3, #16]
 800301a:	4b6c      	ldr	r3, [pc, #432]	; (80031cc <LCD_Scan_Dir+0x61c>)
 800301c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003020:	615a      	str	r2, [r3, #20]
 8003022:	4b69      	ldr	r3, [pc, #420]	; (80031c8 <LCD_Scan_Dir+0x618>)
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	3b01      	subs	r3, #1
 8003028:	121a      	asrs	r2, r3, #8
 800302a:	4b69      	ldr	r3, [pc, #420]	; (80031d0 <LCD_Scan_Dir+0x620>)
 800302c:	60da      	str	r2, [r3, #12]
 800302e:	4b67      	ldr	r3, [pc, #412]	; (80031cc <LCD_Scan_Dir+0x61c>)
 8003030:	2280      	movs	r2, #128	; 0x80
 8003032:	615a      	str	r2, [r3, #20]
 8003034:	4b65      	ldr	r3, [pc, #404]	; (80031cc <LCD_Scan_Dir+0x61c>)
 8003036:	2280      	movs	r2, #128	; 0x80
 8003038:	611a      	str	r2, [r3, #16]
 800303a:	4b64      	ldr	r3, [pc, #400]	; (80031cc <LCD_Scan_Dir+0x61c>)
 800303c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003040:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8003042:	4b62      	ldr	r3, [pc, #392]	; (80031cc <LCD_Scan_Dir+0x61c>)
 8003044:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003048:	611a      	str	r2, [r3, #16]
 800304a:	4b60      	ldr	r3, [pc, #384]	; (80031cc <LCD_Scan_Dir+0x61c>)
 800304c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003050:	615a      	str	r2, [r3, #20]
 8003052:	4b5d      	ldr	r3, [pc, #372]	; (80031c8 <LCD_Scan_Dir+0x618>)
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	3b01      	subs	r3, #1
 8003058:	4a5d      	ldr	r2, [pc, #372]	; (80031d0 <LCD_Scan_Dir+0x620>)
 800305a:	b2db      	uxtb	r3, r3
 800305c:	60d3      	str	r3, [r2, #12]
 800305e:	4b5b      	ldr	r3, [pc, #364]	; (80031cc <LCD_Scan_Dir+0x61c>)
 8003060:	2280      	movs	r2, #128	; 0x80
 8003062:	615a      	str	r2, [r3, #20]
 8003064:	4b59      	ldr	r3, [pc, #356]	; (80031cc <LCD_Scan_Dir+0x61c>)
 8003066:	2280      	movs	r2, #128	; 0x80
 8003068:	611a      	str	r2, [r3, #16]
 800306a:	4b58      	ldr	r3, [pc, #352]	; (80031cc <LCD_Scan_Dir+0x61c>)
 800306c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003070:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8003072:	4b55      	ldr	r3, [pc, #340]	; (80031c8 <LCD_Scan_Dir+0x618>)
 8003074:	899b      	ldrh	r3, [r3, #12]
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff f9fc 	bl	8002474 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800307c:	4b53      	ldr	r3, [pc, #332]	; (80031cc <LCD_Scan_Dir+0x61c>)
 800307e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003082:	611a      	str	r2, [r3, #16]
 8003084:	4b51      	ldr	r3, [pc, #324]	; (80031cc <LCD_Scan_Dir+0x61c>)
 8003086:	f44f 7200 	mov.w	r2, #512	; 0x200
 800308a:	615a      	str	r2, [r3, #20]
 800308c:	4b50      	ldr	r3, [pc, #320]	; (80031d0 <LCD_Scan_Dir+0x620>)
 800308e:	2200      	movs	r2, #0
 8003090:	60da      	str	r2, [r3, #12]
 8003092:	4b4e      	ldr	r3, [pc, #312]	; (80031cc <LCD_Scan_Dir+0x61c>)
 8003094:	2280      	movs	r2, #128	; 0x80
 8003096:	615a      	str	r2, [r3, #20]
 8003098:	4b4c      	ldr	r3, [pc, #304]	; (80031cc <LCD_Scan_Dir+0x61c>)
 800309a:	2280      	movs	r2, #128	; 0x80
 800309c:	611a      	str	r2, [r3, #16]
 800309e:	4b4b      	ldr	r3, [pc, #300]	; (80031cc <LCD_Scan_Dir+0x61c>)
 80030a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030a4:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80030a6:	4b49      	ldr	r3, [pc, #292]	; (80031cc <LCD_Scan_Dir+0x61c>)
 80030a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030ac:	611a      	str	r2, [r3, #16]
 80030ae:	4b47      	ldr	r3, [pc, #284]	; (80031cc <LCD_Scan_Dir+0x61c>)
 80030b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030b4:	615a      	str	r2, [r3, #20]
 80030b6:	4b46      	ldr	r3, [pc, #280]	; (80031d0 <LCD_Scan_Dir+0x620>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	60da      	str	r2, [r3, #12]
 80030bc:	4b43      	ldr	r3, [pc, #268]	; (80031cc <LCD_Scan_Dir+0x61c>)
 80030be:	2280      	movs	r2, #128	; 0x80
 80030c0:	615a      	str	r2, [r3, #20]
 80030c2:	4b42      	ldr	r3, [pc, #264]	; (80031cc <LCD_Scan_Dir+0x61c>)
 80030c4:	2280      	movs	r2, #128	; 0x80
 80030c6:	611a      	str	r2, [r3, #16]
 80030c8:	4b40      	ldr	r3, [pc, #256]	; (80031cc <LCD_Scan_Dir+0x61c>)
 80030ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ce:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80030d0:	4b3e      	ldr	r3, [pc, #248]	; (80031cc <LCD_Scan_Dir+0x61c>)
 80030d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030d6:	611a      	str	r2, [r3, #16]
 80030d8:	4b3c      	ldr	r3, [pc, #240]	; (80031cc <LCD_Scan_Dir+0x61c>)
 80030da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030de:	615a      	str	r2, [r3, #20]
 80030e0:	4b39      	ldr	r3, [pc, #228]	; (80031c8 <LCD_Scan_Dir+0x618>)
 80030e2:	885b      	ldrh	r3, [r3, #2]
 80030e4:	3b01      	subs	r3, #1
 80030e6:	121a      	asrs	r2, r3, #8
 80030e8:	4b39      	ldr	r3, [pc, #228]	; (80031d0 <LCD_Scan_Dir+0x620>)
 80030ea:	60da      	str	r2, [r3, #12]
 80030ec:	4b37      	ldr	r3, [pc, #220]	; (80031cc <LCD_Scan_Dir+0x61c>)
 80030ee:	2280      	movs	r2, #128	; 0x80
 80030f0:	615a      	str	r2, [r3, #20]
 80030f2:	4b36      	ldr	r3, [pc, #216]	; (80031cc <LCD_Scan_Dir+0x61c>)
 80030f4:	2280      	movs	r2, #128	; 0x80
 80030f6:	611a      	str	r2, [r3, #16]
 80030f8:	4b34      	ldr	r3, [pc, #208]	; (80031cc <LCD_Scan_Dir+0x61c>)
 80030fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030fe:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8003100:	4b32      	ldr	r3, [pc, #200]	; (80031cc <LCD_Scan_Dir+0x61c>)
 8003102:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003106:	611a      	str	r2, [r3, #16]
 8003108:	4b30      	ldr	r3, [pc, #192]	; (80031cc <LCD_Scan_Dir+0x61c>)
 800310a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800310e:	615a      	str	r2, [r3, #20]
 8003110:	4b2d      	ldr	r3, [pc, #180]	; (80031c8 <LCD_Scan_Dir+0x618>)
 8003112:	885b      	ldrh	r3, [r3, #2]
 8003114:	3b01      	subs	r3, #1
 8003116:	4a2e      	ldr	r2, [pc, #184]	; (80031d0 <LCD_Scan_Dir+0x620>)
 8003118:	b2db      	uxtb	r3, r3
 800311a:	60d3      	str	r3, [r2, #12]
 800311c:	4b2b      	ldr	r3, [pc, #172]	; (80031cc <LCD_Scan_Dir+0x61c>)
 800311e:	2280      	movs	r2, #128	; 0x80
 8003120:	615a      	str	r2, [r3, #20]
 8003122:	4b2a      	ldr	r3, [pc, #168]	; (80031cc <LCD_Scan_Dir+0x61c>)
 8003124:	2280      	movs	r2, #128	; 0x80
 8003126:	611a      	str	r2, [r3, #16]
 8003128:	4b28      	ldr	r3, [pc, #160]	; (80031cc <LCD_Scan_Dir+0x61c>)
 800312a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800312e:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8003130:	e045      	b.n	80031be <LCD_Scan_Dir+0x60e>
		}
	} else {
		switch (dir) {
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	2b07      	cmp	r3, #7
 8003136:	d836      	bhi.n	80031a6 <LCD_Scan_Dir+0x5f6>
 8003138:	a201      	add	r2, pc, #4	; (adr r2, 8003140 <LCD_Scan_Dir+0x590>)
 800313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313e:	bf00      	nop
 8003140:	08003161 	.word	0x08003161
 8003144:	0800316b 	.word	0x0800316b
 8003148:	08003175 	.word	0x08003175
 800314c:	080031a7 	.word	0x080031a7
 8003150:	0800317f 	.word	0x0800317f
 8003154:	08003189 	.word	0x08003189
 8003158:	08003193 	.word	0x08003193
 800315c:	0800319d 	.word	0x0800319d
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 8003160:	89fb      	ldrh	r3, [r7, #14]
 8003162:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003166:	81fb      	strh	r3, [r7, #14]
			break;
 8003168:	e01d      	b.n	80031a6 <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 800316a:	89fb      	ldrh	r3, [r7, #14]
 800316c:	f043 0310 	orr.w	r3, r3, #16
 8003170:	81fb      	strh	r3, [r7, #14]
			break;
 8003172:	e018      	b.n	80031a6 <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 8003174:	89fb      	ldrh	r3, [r7, #14]
 8003176:	f043 0320 	orr.w	r3, r3, #32
 800317a:	81fb      	strh	r3, [r7, #14]
			break;
 800317c:	e013      	b.n	80031a6 <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 800317e:	89fb      	ldrh	r3, [r7, #14]
 8003180:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003184:	81fb      	strh	r3, [r7, #14]
			break;
 8003186:	e00e      	b.n	80031a6 <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 8003188:	89fb      	ldrh	r3, [r7, #14]
 800318a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800318e:	81fb      	strh	r3, [r7, #14]
			break;
 8003190:	e009      	b.n	80031a6 <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 8003192:	89fb      	ldrh	r3, [r7, #14]
 8003194:	f043 0318 	orr.w	r3, r3, #24
 8003198:	81fb      	strh	r3, [r7, #14]
			break;
 800319a:	e004      	b.n	80031a6 <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 800319c:	89fb      	ldrh	r3, [r7, #14]
 800319e:	f043 0308 	orr.w	r3, r3, #8
 80031a2:	81fb      	strh	r3, [r7, #14]
			break;
 80031a4:	bf00      	nop
		}
		dirreg = 0X03;
 80031a6:	2303      	movs	r3, #3
 80031a8:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 80031aa:	89fb      	ldrh	r3, [r7, #14]
 80031ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031b0:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80031b2:	89fa      	ldrh	r2, [r7, #14]
 80031b4:	89bb      	ldrh	r3, [r7, #12]
 80031b6:	4611      	mov	r1, r2
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff f9e7 	bl	800258c <LCD_WriteReg>
	}
}
 80031be:	bf00      	nop
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	2000018c 	.word	0x2000018c
 80031cc:	40011000 	.word	0x40011000
 80031d0:	40010c00 	.word	0x40010c00
 80031d4:	00000000 	.word	0x00000000

080031d8 <LCD_SSD_BackLightSet>:
	LCD_CS_SET;
	LCD_WR_DATA(color);		//写数据
}
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 80031d8:	b590      	push	{r4, r7, lr}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	4603      	mov	r3, r0
 80031e0:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 80031e2:	20be      	movs	r0, #190	; 0xbe
 80031e4:	f7ff f946 	bl	8002474 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 80031e8:	4b4b      	ldr	r3, [pc, #300]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 80031ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031ee:	611a      	str	r2, [r3, #16]
 80031f0:	4b49      	ldr	r3, [pc, #292]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 80031f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031f6:	615a      	str	r2, [r3, #20]
 80031f8:	4b48      	ldr	r3, [pc, #288]	; (800331c <LCD_SSD_BackLightSet+0x144>)
 80031fa:	2205      	movs	r2, #5
 80031fc:	60da      	str	r2, [r3, #12]
 80031fe:	4b46      	ldr	r3, [pc, #280]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 8003200:	2280      	movs	r2, #128	; 0x80
 8003202:	615a      	str	r2, [r3, #20]
 8003204:	4b44      	ldr	r3, [pc, #272]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 8003206:	2280      	movs	r2, #128	; 0x80
 8003208:	611a      	str	r2, [r3, #16]
 800320a:	4b43      	ldr	r3, [pc, #268]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 800320c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003210:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8003212:	4b41      	ldr	r3, [pc, #260]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 8003214:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003218:	611a      	str	r2, [r3, #16]
 800321a:	4b3f      	ldr	r3, [pc, #252]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 800321c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003220:	615a      	str	r2, [r3, #20]
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	4618      	mov	r0, r3
 8003226:	f7fd f959 	bl	80004dc <__aeabi_i2d>
 800322a:	a339      	add	r3, pc, #228	; (adr r3, 8003310 <LCD_SSD_BackLightSet+0x138>)
 800322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003230:	f7fd f9be 	bl	80005b0 <__aeabi_dmul>
 8003234:	4603      	mov	r3, r0
 8003236:	460c      	mov	r4, r1
 8003238:	461a      	mov	r2, r3
 800323a:	4623      	mov	r3, r4
 800323c:	4c37      	ldr	r4, [pc, #220]	; (800331c <LCD_SSD_BackLightSet+0x144>)
 800323e:	4610      	mov	r0, r2
 8003240:	4619      	mov	r1, r3
 8003242:	f7fd fbc7 	bl	80009d4 <__aeabi_d2uiz>
 8003246:	4603      	mov	r3, r0
 8003248:	60e3      	str	r3, [r4, #12]
 800324a:	4b33      	ldr	r3, [pc, #204]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 800324c:	2280      	movs	r2, #128	; 0x80
 800324e:	615a      	str	r2, [r3, #20]
 8003250:	4b31      	ldr	r3, [pc, #196]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 8003252:	2280      	movs	r2, #128	; 0x80
 8003254:	611a      	str	r2, [r3, #16]
 8003256:	4b30      	ldr	r3, [pc, #192]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 8003258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800325c:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 800325e:	4b2e      	ldr	r3, [pc, #184]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 8003260:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003264:	611a      	str	r2, [r3, #16]
 8003266:	4b2c      	ldr	r3, [pc, #176]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 8003268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800326c:	615a      	str	r2, [r3, #20]
 800326e:	4b2b      	ldr	r3, [pc, #172]	; (800331c <LCD_SSD_BackLightSet+0x144>)
 8003270:	2201      	movs	r2, #1
 8003272:	60da      	str	r2, [r3, #12]
 8003274:	4b28      	ldr	r3, [pc, #160]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 8003276:	2280      	movs	r2, #128	; 0x80
 8003278:	615a      	str	r2, [r3, #20]
 800327a:	4b27      	ldr	r3, [pc, #156]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 800327c:	2280      	movs	r2, #128	; 0x80
 800327e:	611a      	str	r2, [r3, #16]
 8003280:	4b25      	ldr	r3, [pc, #148]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 8003282:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003286:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8003288:	4b23      	ldr	r3, [pc, #140]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 800328a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800328e:	611a      	str	r2, [r3, #16]
 8003290:	4b21      	ldr	r3, [pc, #132]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 8003292:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003296:	615a      	str	r2, [r3, #20]
 8003298:	4b20      	ldr	r3, [pc, #128]	; (800331c <LCD_SSD_BackLightSet+0x144>)
 800329a:	22ff      	movs	r2, #255	; 0xff
 800329c:	60da      	str	r2, [r3, #12]
 800329e:	4b1e      	ldr	r3, [pc, #120]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 80032a0:	2280      	movs	r2, #128	; 0x80
 80032a2:	615a      	str	r2, [r3, #20]
 80032a4:	4b1c      	ldr	r3, [pc, #112]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 80032a6:	2280      	movs	r2, #128	; 0x80
 80032a8:	611a      	str	r2, [r3, #16]
 80032aa:	4b1b      	ldr	r3, [pc, #108]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 80032ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032b0:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 80032b2:	4b19      	ldr	r3, [pc, #100]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 80032b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032b8:	611a      	str	r2, [r3, #16]
 80032ba:	4b17      	ldr	r3, [pc, #92]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 80032bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032c0:	615a      	str	r2, [r3, #20]
 80032c2:	4b16      	ldr	r3, [pc, #88]	; (800331c <LCD_SSD_BackLightSet+0x144>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	60da      	str	r2, [r3, #12]
 80032c8:	4b13      	ldr	r3, [pc, #76]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 80032ca:	2280      	movs	r2, #128	; 0x80
 80032cc:	615a      	str	r2, [r3, #20]
 80032ce:	4b12      	ldr	r3, [pc, #72]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 80032d0:	2280      	movs	r2, #128	; 0x80
 80032d2:	611a      	str	r2, [r3, #16]
 80032d4:	4b10      	ldr	r3, [pc, #64]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 80032d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032da:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 80032dc:	4b0e      	ldr	r3, [pc, #56]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 80032de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032e2:	611a      	str	r2, [r3, #16]
 80032e4:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 80032e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ea:	615a      	str	r2, [r3, #20]
 80032ec:	4b0b      	ldr	r3, [pc, #44]	; (800331c <LCD_SSD_BackLightSet+0x144>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	4b09      	ldr	r3, [pc, #36]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 80032f4:	2280      	movs	r2, #128	; 0x80
 80032f6:	615a      	str	r2, [r3, #20]
 80032f8:	4b07      	ldr	r3, [pc, #28]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 80032fa:	2280      	movs	r2, #128	; 0x80
 80032fc:	611a      	str	r2, [r3, #16]
 80032fe:	4b06      	ldr	r3, [pc, #24]	; (8003318 <LCD_SSD_BackLightSet+0x140>)
 8003300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003304:	611a      	str	r2, [r3, #16]
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	bd90      	pop	{r4, r7, pc}
 800330e:	bf00      	nop
 8003310:	66666666 	.word	0x66666666
 8003314:	40046666 	.word	0x40046666
 8003318:	40011000 	.word	0x40011000
 800331c:	40010c00 	.word	0x40010c00

08003320 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d177      	bne.n	8003420 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8003330:	4b80      	ldr	r3, [pc, #512]	; (8003534 <LCD_Display_Dir+0x214>)
 8003332:	2200      	movs	r2, #0
 8003334:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8003336:	4b7f      	ldr	r3, [pc, #508]	; (8003534 <LCD_Display_Dir+0x214>)
 8003338:	22f0      	movs	r2, #240	; 0xf0
 800333a:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 800333c:	4b7d      	ldr	r3, [pc, #500]	; (8003534 <LCD_Display_Dir+0x214>)
 800333e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003342:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8003344:	4b7b      	ldr	r3, [pc, #492]	; (8003534 <LCD_Display_Dir+0x214>)
 8003346:	889b      	ldrh	r3, [r3, #4]
 8003348:	f249 3241 	movw	r2, #37697	; 0x9341
 800334c:	4293      	cmp	r3, r2
 800334e:	d00b      	beq.n	8003368 <LCD_Display_Dir+0x48>
 8003350:	4b78      	ldr	r3, [pc, #480]	; (8003534 <LCD_Display_Dir+0x214>)
 8003352:	889b      	ldrh	r3, [r3, #4]
 8003354:	f646 0204 	movw	r2, #26628	; 0x6804
 8003358:	4293      	cmp	r3, r2
 800335a:	d005      	beq.n	8003368 <LCD_Display_Dir+0x48>
 800335c:	4b75      	ldr	r3, [pc, #468]	; (8003534 <LCD_Display_Dir+0x214>)
 800335e:	889b      	ldrh	r3, [r3, #4]
 8003360:	f245 3210 	movw	r2, #21264	; 0x5310
 8003364:	4293      	cmp	r3, r2
 8003366:	d11e      	bne.n	80033a6 <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8003368:	4b72      	ldr	r3, [pc, #456]	; (8003534 <LCD_Display_Dir+0x214>)
 800336a:	222c      	movs	r2, #44	; 0x2c
 800336c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 800336e:	4b71      	ldr	r3, [pc, #452]	; (8003534 <LCD_Display_Dir+0x214>)
 8003370:	222a      	movs	r2, #42	; 0x2a
 8003372:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8003374:	4b6f      	ldr	r3, [pc, #444]	; (8003534 <LCD_Display_Dir+0x214>)
 8003376:	222b      	movs	r2, #43	; 0x2b
 8003378:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 800337a:	4b6e      	ldr	r3, [pc, #440]	; (8003534 <LCD_Display_Dir+0x214>)
 800337c:	889b      	ldrh	r3, [r3, #4]
 800337e:	f646 0204 	movw	r2, #26628	; 0x6804
 8003382:	4293      	cmp	r3, r2
 8003384:	d006      	beq.n	8003394 <LCD_Display_Dir+0x74>
 8003386:	4b6b      	ldr	r3, [pc, #428]	; (8003534 <LCD_Display_Dir+0x214>)
 8003388:	889b      	ldrh	r3, [r3, #4]
 800338a:	f245 3210 	movw	r2, #21264	; 0x5310
 800338e:	4293      	cmp	r3, r2
 8003390:	f040 80c7 	bne.w	8003522 <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8003394:	4b67      	ldr	r3, [pc, #412]	; (8003534 <LCD_Display_Dir+0x214>)
 8003396:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800339a:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 800339c:	4b65      	ldr	r3, [pc, #404]	; (8003534 <LCD_Display_Dir+0x214>)
 800339e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80033a2:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 80033a4:	e0bd      	b.n	8003522 <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 80033a6:	4b63      	ldr	r3, [pc, #396]	; (8003534 <LCD_Display_Dir+0x214>)
 80033a8:	889b      	ldrh	r3, [r3, #4]
 80033aa:	f245 5210 	movw	r2, #21776	; 0x5510
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d114      	bne.n	80033dc <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 80033b2:	4b60      	ldr	r3, [pc, #384]	; (8003534 <LCD_Display_Dir+0x214>)
 80033b4:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80033b8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 80033ba:	4b5e      	ldr	r3, [pc, #376]	; (8003534 <LCD_Display_Dir+0x214>)
 80033bc:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80033c0:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 80033c2:	4b5c      	ldr	r3, [pc, #368]	; (8003534 <LCD_Display_Dir+0x214>)
 80033c4:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 80033c8:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 80033ca:	4b5a      	ldr	r3, [pc, #360]	; (8003534 <LCD_Display_Dir+0x214>)
 80033cc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80033d0:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 80033d2:	4b58      	ldr	r3, [pc, #352]	; (8003534 <LCD_Display_Dir+0x214>)
 80033d4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80033d8:	805a      	strh	r2, [r3, #2]
 80033da:	e0a3      	b.n	8003524 <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 80033dc:	4b55      	ldr	r3, [pc, #340]	; (8003534 <LCD_Display_Dir+0x214>)
 80033de:	889b      	ldrh	r3, [r3, #4]
 80033e0:	f641 1263 	movw	r2, #6499	; 0x1963
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d111      	bne.n	800340c <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 80033e8:	4b52      	ldr	r3, [pc, #328]	; (8003534 <LCD_Display_Dir+0x214>)
 80033ea:	222c      	movs	r2, #44	; 0x2c
 80033ec:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 80033ee:	4b51      	ldr	r3, [pc, #324]	; (8003534 <LCD_Display_Dir+0x214>)
 80033f0:	222b      	movs	r2, #43	; 0x2b
 80033f2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 80033f4:	4b4f      	ldr	r3, [pc, #316]	; (8003534 <LCD_Display_Dir+0x214>)
 80033f6:	222a      	movs	r2, #42	; 0x2a
 80033f8:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 80033fa:	4b4e      	ldr	r3, [pc, #312]	; (8003534 <LCD_Display_Dir+0x214>)
 80033fc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003400:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8003402:	4b4c      	ldr	r3, [pc, #304]	; (8003534 <LCD_Display_Dir+0x214>)
 8003404:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003408:	805a      	strh	r2, [r3, #2]
 800340a:	e08b      	b.n	8003524 <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 800340c:	4b49      	ldr	r3, [pc, #292]	; (8003534 <LCD_Display_Dir+0x214>)
 800340e:	2222      	movs	r2, #34	; 0x22
 8003410:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8003412:	4b48      	ldr	r3, [pc, #288]	; (8003534 <LCD_Display_Dir+0x214>)
 8003414:	2220      	movs	r2, #32
 8003416:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8003418:	4b46      	ldr	r3, [pc, #280]	; (8003534 <LCD_Display_Dir+0x214>)
 800341a:	2221      	movs	r2, #33	; 0x21
 800341c:	819a      	strh	r2, [r3, #12]
 800341e:	e081      	b.n	8003524 <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8003420:	4b44      	ldr	r3, [pc, #272]	; (8003534 <LCD_Display_Dir+0x214>)
 8003422:	2201      	movs	r2, #1
 8003424:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 8003426:	4b43      	ldr	r3, [pc, #268]	; (8003534 <LCD_Display_Dir+0x214>)
 8003428:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800342c:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 800342e:	4b41      	ldr	r3, [pc, #260]	; (8003534 <LCD_Display_Dir+0x214>)
 8003430:	22f0      	movs	r2, #240	; 0xf0
 8003432:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8003434:	4b3f      	ldr	r3, [pc, #252]	; (8003534 <LCD_Display_Dir+0x214>)
 8003436:	889b      	ldrh	r3, [r3, #4]
 8003438:	f249 3241 	movw	r2, #37697	; 0x9341
 800343c:	4293      	cmp	r3, r2
 800343e:	d005      	beq.n	800344c <LCD_Display_Dir+0x12c>
 8003440:	4b3c      	ldr	r3, [pc, #240]	; (8003534 <LCD_Display_Dir+0x214>)
 8003442:	889b      	ldrh	r3, [r3, #4]
 8003444:	f245 3210 	movw	r2, #21264	; 0x5310
 8003448:	4293      	cmp	r3, r2
 800344a:	d109      	bne.n	8003460 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 800344c:	4b39      	ldr	r3, [pc, #228]	; (8003534 <LCD_Display_Dir+0x214>)
 800344e:	222c      	movs	r2, #44	; 0x2c
 8003450:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8003452:	4b38      	ldr	r3, [pc, #224]	; (8003534 <LCD_Display_Dir+0x214>)
 8003454:	222a      	movs	r2, #42	; 0x2a
 8003456:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8003458:	4b36      	ldr	r3, [pc, #216]	; (8003534 <LCD_Display_Dir+0x214>)
 800345a:	222b      	movs	r2, #43	; 0x2b
 800345c:	819a      	strh	r2, [r3, #12]
 800345e:	e04b      	b.n	80034f8 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8003460:	4b34      	ldr	r3, [pc, #208]	; (8003534 <LCD_Display_Dir+0x214>)
 8003462:	889b      	ldrh	r3, [r3, #4]
 8003464:	f646 0204 	movw	r2, #26628	; 0x6804
 8003468:	4293      	cmp	r3, r2
 800346a:	d109      	bne.n	8003480 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 800346c:	4b31      	ldr	r3, [pc, #196]	; (8003534 <LCD_Display_Dir+0x214>)
 800346e:	222c      	movs	r2, #44	; 0x2c
 8003470:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 8003472:	4b30      	ldr	r3, [pc, #192]	; (8003534 <LCD_Display_Dir+0x214>)
 8003474:	222b      	movs	r2, #43	; 0x2b
 8003476:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8003478:	4b2e      	ldr	r3, [pc, #184]	; (8003534 <LCD_Display_Dir+0x214>)
 800347a:	222a      	movs	r2, #42	; 0x2a
 800347c:	819a      	strh	r2, [r3, #12]
 800347e:	e03b      	b.n	80034f8 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8003480:	4b2c      	ldr	r3, [pc, #176]	; (8003534 <LCD_Display_Dir+0x214>)
 8003482:	889b      	ldrh	r3, [r3, #4]
 8003484:	f245 5210 	movw	r2, #21776	; 0x5510
 8003488:	4293      	cmp	r3, r2
 800348a:	d114      	bne.n	80034b6 <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 800348c:	4b29      	ldr	r3, [pc, #164]	; (8003534 <LCD_Display_Dir+0x214>)
 800348e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8003492:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8003494:	4b27      	ldr	r3, [pc, #156]	; (8003534 <LCD_Display_Dir+0x214>)
 8003496:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 800349a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 800349c:	4b25      	ldr	r3, [pc, #148]	; (8003534 <LCD_Display_Dir+0x214>)
 800349e:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 80034a2:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 80034a4:	4b23      	ldr	r3, [pc, #140]	; (8003534 <LCD_Display_Dir+0x214>)
 80034a6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80034aa:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 80034ac:	4b21      	ldr	r3, [pc, #132]	; (8003534 <LCD_Display_Dir+0x214>)
 80034ae:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80034b2:	805a      	strh	r2, [r3, #2]
 80034b4:	e020      	b.n	80034f8 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 80034b6:	4b1f      	ldr	r3, [pc, #124]	; (8003534 <LCD_Display_Dir+0x214>)
 80034b8:	889b      	ldrh	r3, [r3, #4]
 80034ba:	f641 1263 	movw	r2, #6499	; 0x1963
 80034be:	4293      	cmp	r3, r2
 80034c0:	d111      	bne.n	80034e6 <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 80034c2:	4b1c      	ldr	r3, [pc, #112]	; (8003534 <LCD_Display_Dir+0x214>)
 80034c4:	222c      	movs	r2, #44	; 0x2c
 80034c6:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 80034c8:	4b1a      	ldr	r3, [pc, #104]	; (8003534 <LCD_Display_Dir+0x214>)
 80034ca:	222a      	movs	r2, #42	; 0x2a
 80034cc:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 80034ce:	4b19      	ldr	r3, [pc, #100]	; (8003534 <LCD_Display_Dir+0x214>)
 80034d0:	222b      	movs	r2, #43	; 0x2b
 80034d2:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 80034d4:	4b17      	ldr	r3, [pc, #92]	; (8003534 <LCD_Display_Dir+0x214>)
 80034d6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80034da:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 80034dc:	4b15      	ldr	r3, [pc, #84]	; (8003534 <LCD_Display_Dir+0x214>)
 80034de:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80034e2:	805a      	strh	r2, [r3, #2]
 80034e4:	e008      	b.n	80034f8 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 80034e6:	4b13      	ldr	r3, [pc, #76]	; (8003534 <LCD_Display_Dir+0x214>)
 80034e8:	2222      	movs	r2, #34	; 0x22
 80034ea:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 80034ec:	4b11      	ldr	r3, [pc, #68]	; (8003534 <LCD_Display_Dir+0x214>)
 80034ee:	2221      	movs	r2, #33	; 0x21
 80034f0:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 80034f2:	4b10      	ldr	r3, [pc, #64]	; (8003534 <LCD_Display_Dir+0x214>)
 80034f4:	2220      	movs	r2, #32
 80034f6:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 80034f8:	4b0e      	ldr	r3, [pc, #56]	; (8003534 <LCD_Display_Dir+0x214>)
 80034fa:	889b      	ldrh	r3, [r3, #4]
 80034fc:	f646 0204 	movw	r2, #26628	; 0x6804
 8003500:	4293      	cmp	r3, r2
 8003502:	d005      	beq.n	8003510 <LCD_Display_Dir+0x1f0>
 8003504:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <LCD_Display_Dir+0x214>)
 8003506:	889b      	ldrh	r3, [r3, #4]
 8003508:	f245 3210 	movw	r2, #21264	; 0x5310
 800350c:	4293      	cmp	r3, r2
 800350e:	d109      	bne.n	8003524 <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8003510:	4b08      	ldr	r3, [pc, #32]	; (8003534 <LCD_Display_Dir+0x214>)
 8003512:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003516:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8003518:	4b06      	ldr	r3, [pc, #24]	; (8003534 <LCD_Display_Dir+0x214>)
 800351a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800351e:	805a      	strh	r2, [r3, #2]
 8003520:	e000      	b.n	8003524 <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8003522:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8003524:	2000      	movs	r0, #0
 8003526:	f7ff fb43 	bl	8002bb0 <LCD_Scan_Dir>
}
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	2000018c 	.word	0x2000018c

08003538 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 800353e:	4b90      	ldr	r3, [pc, #576]	; (8003780 <LCD_Init+0x248>)
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	4a8f      	ldr	r2, [pc, #572]	; (8003780 <LCD_Init+0x248>)
 8003544:	f043 0308 	orr.w	r3, r3, #8
 8003548:	6193      	str	r3, [r2, #24]
 800354a:	4b8d      	ldr	r3, [pc, #564]	; (8003780 <LCD_Init+0x248>)
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	607b      	str	r3, [r7, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8003556:	4b8a      	ldr	r3, [pc, #552]	; (8003780 <LCD_Init+0x248>)
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	4a89      	ldr	r2, [pc, #548]	; (8003780 <LCD_Init+0x248>)
 800355c:	f043 0310 	orr.w	r3, r3, #16
 8003560:	6193      	str	r3, [r2, #24]
 8003562:	4b87      	ldr	r3, [pc, #540]	; (8003780 <LCD_Init+0x248>)
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f003 0310 	and.w	r3, r3, #16
 800356a:	603b      	str	r3, [r7, #0]
 800356c:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 800356e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8003572:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 8003574:	2301      	movs	r3, #1
 8003576:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8003578:	2301      	movs	r3, #1
 800357a:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 800357c:	2303      	movs	r3, #3
 800357e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8003580:	f107 0308 	add.w	r3, r7, #8
 8003584:	4619      	mov	r1, r3
 8003586:	487f      	ldr	r0, [pc, #508]	; (8003784 <LCD_Init+0x24c>)
 8003588:	f7fd fe54 	bl	8001234 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 800358c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003590:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 8003592:	f107 0308 	add.w	r3, r7, #8
 8003596:	4619      	mov	r1, r3
 8003598:	487b      	ldr	r0, [pc, #492]	; (8003788 <LCD_Init+0x250>)
 800359a:	f7fd fe4b 	bl	8001234 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 800359e:	2032      	movs	r0, #50	; 0x32
 80035a0:	f7fd fd18 	bl	8000fd4 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 80035a4:	2101      	movs	r1, #1
 80035a6:	2000      	movs	r0, #0
 80035a8:	f7fe fff0 	bl	800258c <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 80035ac:	2032      	movs	r0, #50	; 0x32
 80035ae:	f7fd fd11 	bl	8000fd4 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 80035b2:	2000      	movs	r0, #0
 80035b4:	f7ff f814 	bl	80025e0 <LCD_ReadReg>
 80035b8:	4603      	mov	r3, r0
 80035ba:	461a      	mov	r2, r3
 80035bc:	4b73      	ldr	r3, [pc, #460]	; (800378c <LCD_Init+0x254>)
 80035be:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 80035c0:	4b72      	ldr	r3, [pc, #456]	; (800378c <LCD_Init+0x254>)
 80035c2:	889b      	ldrh	r3, [r3, #4]
 80035c4:	2bfe      	cmp	r3, #254	; 0xfe
 80035c6:	d90b      	bls.n	80035e0 <LCD_Init+0xa8>
 80035c8:	4b70      	ldr	r3, [pc, #448]	; (800378c <LCD_Init+0x254>)
 80035ca:	889b      	ldrh	r3, [r3, #4]
 80035cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d005      	beq.n	80035e0 <LCD_Init+0xa8>
 80035d4:	4b6d      	ldr	r3, [pc, #436]	; (800378c <LCD_Init+0x254>)
 80035d6:	889b      	ldrh	r3, [r3, #4]
 80035d8:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 80035dc:	f040 80c8 	bne.w	8003770 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 80035e0:	20d3      	movs	r0, #211	; 0xd3
 80035e2:	f7fe ff47 	bl	8002474 <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 80035e6:	f7fe ff8d 	bl	8002504 <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 80035ea:	f7fe ff8b 	bl	8002504 <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 80035ee:	f7fe ff89 	bl	8002504 <LCD_RD_DATA>
 80035f2:	4603      	mov	r3, r0
 80035f4:	461a      	mov	r2, r3
 80035f6:	4b65      	ldr	r3, [pc, #404]	; (800378c <LCD_Init+0x254>)
 80035f8:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 80035fa:	4b64      	ldr	r3, [pc, #400]	; (800378c <LCD_Init+0x254>)
 80035fc:	889b      	ldrh	r3, [r3, #4]
 80035fe:	021b      	lsls	r3, r3, #8
 8003600:	b29a      	uxth	r2, r3
 8003602:	4b62      	ldr	r3, [pc, #392]	; (800378c <LCD_Init+0x254>)
 8003604:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 8003606:	f7fe ff7d 	bl	8002504 <LCD_RD_DATA>
 800360a:	4603      	mov	r3, r0
 800360c:	461a      	mov	r2, r3
 800360e:	4b5f      	ldr	r3, [pc, #380]	; (800378c <LCD_Init+0x254>)
 8003610:	889b      	ldrh	r3, [r3, #4]
 8003612:	4313      	orrs	r3, r2
 8003614:	b29a      	uxth	r2, r3
 8003616:	4b5d      	ldr	r3, [pc, #372]	; (800378c <LCD_Init+0x254>)
 8003618:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 800361a:	4b5c      	ldr	r3, [pc, #368]	; (800378c <LCD_Init+0x254>)
 800361c:	889b      	ldrh	r3, [r3, #4]
 800361e:	f249 3241 	movw	r2, #37697	; 0x9341
 8003622:	4293      	cmp	r3, r2
 8003624:	f000 80a4 	beq.w	8003770 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8003628:	20bf      	movs	r0, #191	; 0xbf
 800362a:	f7fe ff23 	bl	8002474 <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 800362e:	f7fe ff69 	bl	8002504 <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 8003632:	f7fe ff67 	bl	8002504 <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 8003636:	f7fe ff65 	bl	8002504 <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 800363a:	f7fe ff63 	bl	8002504 <LCD_RD_DATA>
 800363e:	4603      	mov	r3, r0
 8003640:	461a      	mov	r2, r3
 8003642:	4b52      	ldr	r3, [pc, #328]	; (800378c <LCD_Init+0x254>)
 8003644:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 8003646:	4b51      	ldr	r3, [pc, #324]	; (800378c <LCD_Init+0x254>)
 8003648:	889b      	ldrh	r3, [r3, #4]
 800364a:	021b      	lsls	r3, r3, #8
 800364c:	b29a      	uxth	r2, r3
 800364e:	4b4f      	ldr	r3, [pc, #316]	; (800378c <LCD_Init+0x254>)
 8003650:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 8003652:	f7fe ff57 	bl	8002504 <LCD_RD_DATA>
 8003656:	4603      	mov	r3, r0
 8003658:	461a      	mov	r2, r3
 800365a:	4b4c      	ldr	r3, [pc, #304]	; (800378c <LCD_Init+0x254>)
 800365c:	889b      	ldrh	r3, [r3, #4]
 800365e:	4313      	orrs	r3, r2
 8003660:	b29a      	uxth	r2, r3
 8003662:	4b4a      	ldr	r3, [pc, #296]	; (800378c <LCD_Init+0x254>)
 8003664:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 8003666:	4b49      	ldr	r3, [pc, #292]	; (800378c <LCD_Init+0x254>)
 8003668:	889b      	ldrh	r3, [r3, #4]
 800366a:	f646 0204 	movw	r2, #26628	; 0x6804
 800366e:	4293      	cmp	r3, r2
 8003670:	d07e      	beq.n	8003770 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 8003672:	20d4      	movs	r0, #212	; 0xd4
 8003674:	f7fe fefe 	bl	8002474 <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 8003678:	f7fe ff44 	bl	8002504 <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 800367c:	f7fe ff42 	bl	8002504 <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 8003680:	f7fe ff40 	bl	8002504 <LCD_RD_DATA>
 8003684:	4603      	mov	r3, r0
 8003686:	461a      	mov	r2, r3
 8003688:	4b40      	ldr	r3, [pc, #256]	; (800378c <LCD_Init+0x254>)
 800368a:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 800368c:	4b3f      	ldr	r3, [pc, #252]	; (800378c <LCD_Init+0x254>)
 800368e:	889b      	ldrh	r3, [r3, #4]
 8003690:	021b      	lsls	r3, r3, #8
 8003692:	b29a      	uxth	r2, r3
 8003694:	4b3d      	ldr	r3, [pc, #244]	; (800378c <LCD_Init+0x254>)
 8003696:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 8003698:	f7fe ff34 	bl	8002504 <LCD_RD_DATA>
 800369c:	4603      	mov	r3, r0
 800369e:	461a      	mov	r2, r3
 80036a0:	4b3a      	ldr	r3, [pc, #232]	; (800378c <LCD_Init+0x254>)
 80036a2:	889b      	ldrh	r3, [r3, #4]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	4b38      	ldr	r3, [pc, #224]	; (800378c <LCD_Init+0x254>)
 80036aa:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 80036ac:	4b37      	ldr	r3, [pc, #220]	; (800378c <LCD_Init+0x254>)
 80036ae:	889b      	ldrh	r3, [r3, #4]
 80036b0:	f245 3210 	movw	r2, #21264	; 0x5310
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d05b      	beq.n	8003770 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 80036b8:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 80036bc:	f7fe feda 	bl	8002474 <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 80036c0:	f7fe ff20 	bl	8002504 <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 80036c4:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 80036c8:	f7fe fed4 	bl	8002474 <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 80036cc:	f7fe ff1a 	bl	8002504 <LCD_RD_DATA>
 80036d0:	4603      	mov	r3, r0
 80036d2:	461a      	mov	r2, r3
 80036d4:	4b2d      	ldr	r3, [pc, #180]	; (800378c <LCD_Init+0x254>)
 80036d6:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 80036d8:	4b2c      	ldr	r3, [pc, #176]	; (800378c <LCD_Init+0x254>)
 80036da:	889b      	ldrh	r3, [r3, #4]
 80036dc:	021b      	lsls	r3, r3, #8
 80036de:	b29a      	uxth	r2, r3
 80036e0:	4b2a      	ldr	r3, [pc, #168]	; (800378c <LCD_Init+0x254>)
 80036e2:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 80036e4:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 80036e8:	f7fe fec4 	bl	8002474 <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 80036ec:	f7fe ff0a 	bl	8002504 <LCD_RD_DATA>
 80036f0:	4603      	mov	r3, r0
 80036f2:	461a      	mov	r2, r3
 80036f4:	4b25      	ldr	r3, [pc, #148]	; (800378c <LCD_Init+0x254>)
 80036f6:	889b      	ldrh	r3, [r3, #4]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	4b23      	ldr	r3, [pc, #140]	; (800378c <LCD_Init+0x254>)
 80036fe:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8003700:	4b22      	ldr	r3, [pc, #136]	; (800378c <LCD_Init+0x254>)
 8003702:	889b      	ldrh	r3, [r3, #4]
 8003704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003708:	d103      	bne.n	8003712 <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 800370a:	4b20      	ldr	r3, [pc, #128]	; (800378c <LCD_Init+0x254>)
 800370c:	f245 5210 	movw	r2, #21776	; 0x5510
 8003710:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8003712:	4b1e      	ldr	r3, [pc, #120]	; (800378c <LCD_Init+0x254>)
 8003714:	889b      	ldrh	r3, [r3, #4]
 8003716:	f245 5210 	movw	r2, #21776	; 0x5510
 800371a:	4293      	cmp	r3, r2
 800371c:	d028      	beq.n	8003770 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 800371e:	20a1      	movs	r0, #161	; 0xa1
 8003720:	f7fe fea8 	bl	8002474 <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 8003724:	f7fe feee 	bl	8002504 <LCD_RD_DATA>
 8003728:	4603      	mov	r3, r0
 800372a:	461a      	mov	r2, r3
 800372c:	4b17      	ldr	r3, [pc, #92]	; (800378c <LCD_Init+0x254>)
 800372e:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8003730:	f7fe fee8 	bl	8002504 <LCD_RD_DATA>
 8003734:	4603      	mov	r3, r0
 8003736:	461a      	mov	r2, r3
 8003738:	4b14      	ldr	r3, [pc, #80]	; (800378c <LCD_Init+0x254>)
 800373a:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 800373c:	4b13      	ldr	r3, [pc, #76]	; (800378c <LCD_Init+0x254>)
 800373e:	889b      	ldrh	r3, [r3, #4]
 8003740:	021b      	lsls	r3, r3, #8
 8003742:	b29a      	uxth	r2, r3
 8003744:	4b11      	ldr	r3, [pc, #68]	; (800378c <LCD_Init+0x254>)
 8003746:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8003748:	f7fe fedc 	bl	8002504 <LCD_RD_DATA>
 800374c:	4603      	mov	r3, r0
 800374e:	461a      	mov	r2, r3
 8003750:	4b0e      	ldr	r3, [pc, #56]	; (800378c <LCD_Init+0x254>)
 8003752:	889b      	ldrh	r3, [r3, #4]
 8003754:	4313      	orrs	r3, r2
 8003756:	b29a      	uxth	r2, r3
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <LCD_Init+0x254>)
 800375a:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 800375c:	4b0b      	ldr	r3, [pc, #44]	; (800378c <LCD_Init+0x254>)
 800375e:	889b      	ldrh	r3, [r3, #4]
 8003760:	f245 7261 	movw	r2, #22369	; 0x5761
 8003764:	4293      	cmp	r3, r2
 8003766:	d103      	bne.n	8003770 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8003768:	4b08      	ldr	r3, [pc, #32]	; (800378c <LCD_Init+0x254>)
 800376a:	f641 1263 	movw	r2, #6499	; 0x1963
 800376e:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 8003770:	4b06      	ldr	r3, [pc, #24]	; (800378c <LCD_Init+0x254>)
 8003772:	889b      	ldrh	r3, [r3, #4]
 8003774:	f249 3241 	movw	r2, #37697	; 0x9341
 8003778:	4293      	cmp	r3, r2
 800377a:	f040 811f 	bne.w	80039bc <LCD_Init+0x484>
 800377e:	e007      	b.n	8003790 <LCD_Init+0x258>
 8003780:	40021000 	.word	0x40021000
 8003784:	40011000 	.word	0x40011000
 8003788:	40010c00 	.word	0x40010c00
 800378c:	2000018c 	.word	0x2000018c
			{
		LCD_WR_REG(0xCF);
 8003790:	20cf      	movs	r0, #207	; 0xcf
 8003792:	f7fe fe6f 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003796:	2000      	movs	r0, #0
 8003798:	f7fe fe90 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 800379c:	20c1      	movs	r0, #193	; 0xc1
 800379e:	f7fe fe8d 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 80037a2:	2030      	movs	r0, #48	; 0x30
 80037a4:	f7fe fe8a 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 80037a8:	20ed      	movs	r0, #237	; 0xed
 80037aa:	f7fe fe63 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 80037ae:	2064      	movs	r0, #100	; 0x64
 80037b0:	f7fe fe84 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80037b4:	2003      	movs	r0, #3
 80037b6:	f7fe fe81 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 80037ba:	2012      	movs	r0, #18
 80037bc:	f7fe fe7e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 80037c0:	2081      	movs	r0, #129	; 0x81
 80037c2:	f7fe fe7b 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 80037c6:	20e8      	movs	r0, #232	; 0xe8
 80037c8:	f7fe fe54 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 80037cc:	2085      	movs	r0, #133	; 0x85
 80037ce:	f7fe fe75 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80037d2:	2010      	movs	r0, #16
 80037d4:	f7fe fe72 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 80037d8:	207a      	movs	r0, #122	; 0x7a
 80037da:	f7fe fe6f 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 80037de:	20cb      	movs	r0, #203	; 0xcb
 80037e0:	f7fe fe48 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 80037e4:	2039      	movs	r0, #57	; 0x39
 80037e6:	f7fe fe69 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80037ea:	202c      	movs	r0, #44	; 0x2c
 80037ec:	f7fe fe66 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037f0:	2000      	movs	r0, #0
 80037f2:	f7fe fe63 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80037f6:	2034      	movs	r0, #52	; 0x34
 80037f8:	f7fe fe60 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80037fc:	2002      	movs	r0, #2
 80037fe:	f7fe fe5d 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 8003802:	20f7      	movs	r0, #247	; 0xf7
 8003804:	f7fe fe36 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8003808:	2020      	movs	r0, #32
 800380a:	f7fe fe57 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 800380e:	20ea      	movs	r0, #234	; 0xea
 8003810:	f7fe fe30 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003814:	2000      	movs	r0, #0
 8003816:	f7fe fe51 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800381a:	2000      	movs	r0, #0
 800381c:	f7fe fe4e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8003820:	20c0      	movs	r0, #192	; 0xc0
 8003822:	f7fe fe27 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 8003826:	201b      	movs	r0, #27
 8003828:	f7fe fe48 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 800382c:	20c1      	movs	r0, #193	; 0xc1
 800382e:	f7fe fe21 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 8003832:	2001      	movs	r0, #1
 8003834:	f7fe fe42 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8003838:	20c5      	movs	r0, #197	; 0xc5
 800383a:	f7fe fe1b 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 800383e:	2030      	movs	r0, #48	; 0x30
 8003840:	f7fe fe3c 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 8003844:	2030      	movs	r0, #48	; 0x30
 8003846:	f7fe fe39 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 800384a:	20c7      	movs	r0, #199	; 0xc7
 800384c:	f7fe fe12 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8003850:	20b7      	movs	r0, #183	; 0xb7
 8003852:	f7fe fe33 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 8003856:	2036      	movs	r0, #54	; 0x36
 8003858:	f7fe fe0c 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 800385c:	2048      	movs	r0, #72	; 0x48
 800385e:	f7fe fe2d 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 8003862:	203a      	movs	r0, #58	; 0x3a
 8003864:	f7fe fe06 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8003868:	2055      	movs	r0, #85	; 0x55
 800386a:	f7fe fe27 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 800386e:	20b1      	movs	r0, #177	; 0xb1
 8003870:	f7fe fe00 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003874:	2000      	movs	r0, #0
 8003876:	f7fe fe21 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 800387a:	201a      	movs	r0, #26
 800387c:	f7fe fe1e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 8003880:	20b6      	movs	r0, #182	; 0xb6
 8003882:	f7fe fdf7 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8003886:	200a      	movs	r0, #10
 8003888:	f7fe fe18 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 800388c:	20a2      	movs	r0, #162	; 0xa2
 800388e:	f7fe fe15 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 8003892:	20f2      	movs	r0, #242	; 0xf2
 8003894:	f7fe fdee 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003898:	2000      	movs	r0, #0
 800389a:	f7fe fe0f 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 800389e:	2026      	movs	r0, #38	; 0x26
 80038a0:	f7fe fde8 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80038a4:	2001      	movs	r0, #1
 80038a6:	f7fe fe09 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 80038aa:	20e0      	movs	r0, #224	; 0xe0
 80038ac:	f7fe fde2 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 80038b0:	200f      	movs	r0, #15
 80038b2:	f7fe fe03 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 80038b6:	202a      	movs	r0, #42	; 0x2a
 80038b8:	f7fe fe00 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 80038bc:	2028      	movs	r0, #40	; 0x28
 80038be:	f7fe fdfd 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80038c2:	2008      	movs	r0, #8
 80038c4:	f7fe fdfa 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 80038c8:	200e      	movs	r0, #14
 80038ca:	f7fe fdf7 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80038ce:	2008      	movs	r0, #8
 80038d0:	f7fe fdf4 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 80038d4:	2054      	movs	r0, #84	; 0x54
 80038d6:	f7fe fdf1 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 80038da:	20a9      	movs	r0, #169	; 0xa9
 80038dc:	f7fe fdee 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 80038e0:	2043      	movs	r0, #67	; 0x43
 80038e2:	f7fe fdeb 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 80038e6:	200a      	movs	r0, #10
 80038e8:	f7fe fde8 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80038ec:	200f      	movs	r0, #15
 80038ee:	f7fe fde5 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038f2:	2000      	movs	r0, #0
 80038f4:	f7fe fde2 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038f8:	2000      	movs	r0, #0
 80038fa:	f7fe fddf 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038fe:	2000      	movs	r0, #0
 8003900:	f7fe fddc 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003904:	2000      	movs	r0, #0
 8003906:	f7fe fdd9 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 800390a:	20e1      	movs	r0, #225	; 0xe1
 800390c:	f7fe fdb2 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003910:	2000      	movs	r0, #0
 8003912:	f7fe fdd3 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 8003916:	2015      	movs	r0, #21
 8003918:	f7fe fdd0 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 800391c:	2017      	movs	r0, #23
 800391e:	f7fe fdcd 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 8003922:	2007      	movs	r0, #7
 8003924:	f7fe fdca 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8003928:	2011      	movs	r0, #17
 800392a:	f7fe fdc7 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 800392e:	2006      	movs	r0, #6
 8003930:	f7fe fdc4 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 8003934:	202b      	movs	r0, #43	; 0x2b
 8003936:	f7fe fdc1 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 800393a:	2056      	movs	r0, #86	; 0x56
 800393c:	f7fe fdbe 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8003940:	203c      	movs	r0, #60	; 0x3c
 8003942:	f7fe fdbb 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8003946:	2005      	movs	r0, #5
 8003948:	f7fe fdb8 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 800394c:	2010      	movs	r0, #16
 800394e:	f7fe fdb5 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8003952:	200f      	movs	r0, #15
 8003954:	f7fe fdb2 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8003958:	203f      	movs	r0, #63	; 0x3f
 800395a:	f7fe fdaf 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 800395e:	203f      	movs	r0, #63	; 0x3f
 8003960:	f7fe fdac 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8003964:	200f      	movs	r0, #15
 8003966:	f7fe fda9 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 800396a:	202b      	movs	r0, #43	; 0x2b
 800396c:	f7fe fd82 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003970:	2000      	movs	r0, #0
 8003972:	f7fe fda3 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003976:	2000      	movs	r0, #0
 8003978:	f7fe fda0 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 800397c:	2001      	movs	r0, #1
 800397e:	f7fe fd9d 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 8003982:	203f      	movs	r0, #63	; 0x3f
 8003984:	f7fe fd9a 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 8003988:	202a      	movs	r0, #42	; 0x2a
 800398a:	f7fe fd73 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800398e:	2000      	movs	r0, #0
 8003990:	f7fe fd94 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003994:	2000      	movs	r0, #0
 8003996:	f7fe fd91 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800399a:	2000      	movs	r0, #0
 800399c:	f7fe fd8e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 80039a0:	20ef      	movs	r0, #239	; 0xef
 80039a2:	f7fe fd8b 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 80039a6:	2011      	movs	r0, #17
 80039a8:	f7fe fd64 	bl	8002474 <LCD_WR_REG>
		HAL_Delay(120);
 80039ac:	2078      	movs	r0, #120	; 0x78
 80039ae:	f7fd fb11 	bl	8000fd4 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 80039b2:	2029      	movs	r0, #41	; 0x29
 80039b4:	f7fe fd5e 	bl	8002474 <LCD_WR_REG>
 80039b8:	f003 bcd8 	b.w	800736c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 80039bc:	4b58      	ldr	r3, [pc, #352]	; (8003b20 <LCD_Init+0x5e8>)
 80039be:	889b      	ldrh	r3, [r3, #4]
 80039c0:	f646 0204 	movw	r2, #26628	; 0x6804
 80039c4:	4293      	cmp	r3, r2
 80039c6:	f040 80ad 	bne.w	8003b24 <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 80039ca:	2011      	movs	r0, #17
 80039cc:	f7fe fd52 	bl	8002474 <LCD_WR_REG>
		HAL_Delay(20);
 80039d0:	2014      	movs	r0, #20
 80039d2:	f7fd faff 	bl	8000fd4 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 80039d6:	20d0      	movs	r0, #208	; 0xd0
 80039d8:	f7fe fd4c 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 80039dc:	2007      	movs	r0, #7
 80039de:	f7fe fd6d 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 80039e2:	2042      	movs	r0, #66	; 0x42
 80039e4:	f7fe fd6a 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 80039e8:	201d      	movs	r0, #29
 80039ea:	f7fe fd67 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 80039ee:	20d1      	movs	r0, #209	; 0xd1
 80039f0:	f7fe fd40 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80039f4:	2000      	movs	r0, #0
 80039f6:	f7fe fd61 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 80039fa:	201a      	movs	r0, #26
 80039fc:	f7fe fd5e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8003a00:	2009      	movs	r0, #9
 8003a02:	f7fe fd5b 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8003a06:	20d2      	movs	r0, #210	; 0xd2
 8003a08:	f7fe fd34 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8003a0c:	2001      	movs	r0, #1
 8003a0e:	f7fe fd55 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 8003a12:	2022      	movs	r0, #34	; 0x22
 8003a14:	f7fe fd52 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8003a18:	20c0      	movs	r0, #192	; 0xc0
 8003a1a:	f7fe fd2b 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 8003a1e:	2010      	movs	r0, #16
 8003a20:	f7fe fd4c 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 8003a24:	203b      	movs	r0, #59	; 0x3b
 8003a26:	f7fe fd49 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	f7fe fd46 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8003a30:	2002      	movs	r0, #2
 8003a32:	f7fe fd43 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 8003a36:	2011      	movs	r0, #17
 8003a38:	f7fe fd40 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 8003a3c:	20c5      	movs	r0, #197	; 0xc5
 8003a3e:	f7fe fd19 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 8003a42:	2003      	movs	r0, #3
 8003a44:	f7fe fd3a 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8003a48:	20c8      	movs	r0, #200	; 0xc8
 8003a4a:	f7fe fd13 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8003a4e:	2000      	movs	r0, #0
 8003a50:	f7fe fd34 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8003a54:	2025      	movs	r0, #37	; 0x25
 8003a56:	f7fe fd31 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 8003a5a:	2021      	movs	r0, #33	; 0x21
 8003a5c:	f7fe fd2e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8003a60:	2005      	movs	r0, #5
 8003a62:	f7fe fd2b 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8003a66:	2000      	movs	r0, #0
 8003a68:	f7fe fd28 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 8003a6c:	200a      	movs	r0, #10
 8003a6e:	f7fe fd25 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 8003a72:	2065      	movs	r0, #101	; 0x65
 8003a74:	f7fe fd22 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8003a78:	2025      	movs	r0, #37	; 0x25
 8003a7a:	f7fe fd1f 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 8003a7e:	2077      	movs	r0, #119	; 0x77
 8003a80:	f7fe fd1c 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 8003a84:	2050      	movs	r0, #80	; 0x50
 8003a86:	f7fe fd19 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 8003a8a:	200f      	movs	r0, #15
 8003a8c:	f7fe fd16 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8003a90:	2000      	movs	r0, #0
 8003a92:	f7fe fd13 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 8003a96:	20f8      	movs	r0, #248	; 0xf8
 8003a98:	f7fe fcec 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	f7fe fd0d 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 8003aa2:	20fe      	movs	r0, #254	; 0xfe
 8003aa4:	f7fe fce6 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	f7fe fd07 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8003aae:	2002      	movs	r0, #2
 8003ab0:	f7fe fd04 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 8003ab4:	2020      	movs	r0, #32
 8003ab6:	f7fe fcdd 	bl	8002474 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 8003aba:	2036      	movs	r0, #54	; 0x36
 8003abc:	f7fe fcda 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8003ac0:	2008      	movs	r0, #8
 8003ac2:	f7fe fcfb 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 8003ac6:	203a      	movs	r0, #58	; 0x3a
 8003ac8:	f7fe fcd4 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 8003acc:	2055      	movs	r0, #85	; 0x55
 8003ace:	f7fe fcf5 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 8003ad2:	202b      	movs	r0, #43	; 0x2b
 8003ad4:	f7fe fcce 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8003ad8:	2000      	movs	r0, #0
 8003ada:	f7fe fcef 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8003ade:	2000      	movs	r0, #0
 8003ae0:	f7fe fcec 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	f7fe fce9 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 8003aea:	203f      	movs	r0, #63	; 0x3f
 8003aec:	f7fe fce6 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8003af0:	202a      	movs	r0, #42	; 0x2a
 8003af2:	f7fe fcbf 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8003af6:	2000      	movs	r0, #0
 8003af8:	f7fe fce0 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8003afc:	2000      	movs	r0, #0
 8003afe:	f7fe fcdd 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 8003b02:	2001      	movs	r0, #1
 8003b04:	f7fe fcda 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8003b08:	20df      	movs	r0, #223	; 0xdf
 8003b0a:	f7fe fcd7 	bl	80024bc <LCD_WR_DATAX>
		HAL_Delay(120);
 8003b0e:	2078      	movs	r0, #120	; 0x78
 8003b10:	f7fd fa60 	bl	8000fd4 <HAL_Delay>
		LCD_WR_REG(0X29);
 8003b14:	2029      	movs	r0, #41	; 0x29
 8003b16:	f7fe fcad 	bl	8002474 <LCD_WR_REG>
 8003b1a:	f003 bc27 	b.w	800736c <LCD_Init+0x3e34>
 8003b1e:	bf00      	nop
 8003b20:	2000018c 	.word	0x2000018c
	} else if (lcddev.id == 0x5310) {
 8003b24:	4b03      	ldr	r3, [pc, #12]	; (8003b34 <LCD_Init+0x5fc>)
 8003b26:	889b      	ldrh	r3, [r3, #4]
 8003b28:	f245 3210 	movw	r2, #21264	; 0x5310
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	f040 877c 	bne.w	8004a2a <LCD_Init+0x14f2>
 8003b32:	e001      	b.n	8003b38 <LCD_Init+0x600>
 8003b34:	2000018c 	.word	0x2000018c
		LCD_WR_REG(0xED);
 8003b38:	20ed      	movs	r0, #237	; 0xed
 8003b3a:	f7fe fc9b 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8003b3e:	2001      	movs	r0, #1
 8003b40:	f7fe fcbc 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 8003b44:	20fe      	movs	r0, #254	; 0xfe
 8003b46:	f7fe fcb9 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 8003b4a:	20ee      	movs	r0, #238	; 0xee
 8003b4c:	f7fe fc92 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8003b50:	20de      	movs	r0, #222	; 0xde
 8003b52:	f7fe fcb3 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8003b56:	2021      	movs	r0, #33	; 0x21
 8003b58:	f7fe fcb0 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 8003b5c:	20f1      	movs	r0, #241	; 0xf1
 8003b5e:	f7fe fc89 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8003b62:	2001      	movs	r0, #1
 8003b64:	f7fe fcaa 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 8003b68:	20df      	movs	r0, #223	; 0xdf
 8003b6a:	f7fe fc83 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 8003b6e:	2010      	movs	r0, #16
 8003b70:	f7fe fca4 	bl	80024bc <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 8003b74:	20c4      	movs	r0, #196	; 0xc4
 8003b76:	f7fe fc7d 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 8003b7a:	208f      	movs	r0, #143	; 0x8f
 8003b7c:	f7fe fc9e 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8003b80:	20c6      	movs	r0, #198	; 0xc6
 8003b82:	f7fe fc77 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003b86:	2000      	movs	r0, #0
 8003b88:	f7fe fc98 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8003b8c:	20e2      	movs	r0, #226	; 0xe2
 8003b8e:	f7fe fc95 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8003b92:	20e2      	movs	r0, #226	; 0xe2
 8003b94:	f7fe fc92 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8003b98:	20e2      	movs	r0, #226	; 0xe2
 8003b9a:	f7fe fc8f 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 8003b9e:	20bf      	movs	r0, #191	; 0xbf
 8003ba0:	f7fe fc68 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8003ba4:	20aa      	movs	r0, #170	; 0xaa
 8003ba6:	f7fe fc89 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 8003baa:	20b0      	movs	r0, #176	; 0xb0
 8003bac:	f7fe fc62 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 8003bb0:	200d      	movs	r0, #13
 8003bb2:	f7fe fc83 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	f7fe fc80 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 8003bbc:	200d      	movs	r0, #13
 8003bbe:	f7fe fc7d 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	f7fe fc7a 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8003bc8:	2011      	movs	r0, #17
 8003bca:	f7fe fc77 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bce:	2000      	movs	r0, #0
 8003bd0:	f7fe fc74 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 8003bd4:	2019      	movs	r0, #25
 8003bd6:	f7fe fc71 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bda:	2000      	movs	r0, #0
 8003bdc:	f7fe fc6e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8003be0:	2021      	movs	r0, #33	; 0x21
 8003be2:	f7fe fc6b 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003be6:	2000      	movs	r0, #0
 8003be8:	f7fe fc68 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 8003bec:	202d      	movs	r0, #45	; 0x2d
 8003bee:	f7fe fc65 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	f7fe fc62 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8003bf8:	203d      	movs	r0, #61	; 0x3d
 8003bfa:	f7fe fc5f 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bfe:	2000      	movs	r0, #0
 8003c00:	f7fe fc5c 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8003c04:	205d      	movs	r0, #93	; 0x5d
 8003c06:	f7fe fc59 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c0a:	2000      	movs	r0, #0
 8003c0c:	f7fe fc56 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8003c10:	205d      	movs	r0, #93	; 0x5d
 8003c12:	f7fe fc53 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c16:	2000      	movs	r0, #0
 8003c18:	f7fe fc50 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 8003c1c:	20b1      	movs	r0, #177	; 0xb1
 8003c1e:	f7fe fc29 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 8003c22:	2080      	movs	r0, #128	; 0x80
 8003c24:	f7fe fc4a 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c28:	2000      	movs	r0, #0
 8003c2a:	f7fe fc47 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8003c2e:	208b      	movs	r0, #139	; 0x8b
 8003c30:	f7fe fc44 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c34:	2000      	movs	r0, #0
 8003c36:	f7fe fc41 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8003c3a:	2096      	movs	r0, #150	; 0x96
 8003c3c:	f7fe fc3e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c40:	2000      	movs	r0, #0
 8003c42:	f7fe fc3b 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 8003c46:	20b2      	movs	r0, #178	; 0xb2
 8003c48:	f7fe fc14 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	f7fe fc35 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c52:	2000      	movs	r0, #0
 8003c54:	f7fe fc32 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8003c58:	2002      	movs	r0, #2
 8003c5a:	f7fe fc2f 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c5e:	2000      	movs	r0, #0
 8003c60:	f7fe fc2c 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8003c64:	2003      	movs	r0, #3
 8003c66:	f7fe fc29 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c6a:	2000      	movs	r0, #0
 8003c6c:	f7fe fc26 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 8003c70:	20b3      	movs	r0, #179	; 0xb3
 8003c72:	f7fe fbff 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003c76:	2000      	movs	r0, #0
 8003c78:	f7fe fc20 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	f7fe fc1d 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c82:	2000      	movs	r0, #0
 8003c84:	f7fe fc1a 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c88:	2000      	movs	r0, #0
 8003c8a:	f7fe fc17 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c8e:	2000      	movs	r0, #0
 8003c90:	f7fe fc14 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c94:	2000      	movs	r0, #0
 8003c96:	f7fe fc11 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	f7fe fc0e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	f7fe fc0b 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	f7fe fc08 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003cac:	2000      	movs	r0, #0
 8003cae:	f7fe fc05 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	f7fe fc02 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003cb8:	2000      	movs	r0, #0
 8003cba:	f7fe fbff 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	f7fe fbfc 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	f7fe fbf9 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003cca:	2000      	movs	r0, #0
 8003ccc:	f7fe fbf6 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	f7fe fbf3 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003cd6:	2000      	movs	r0, #0
 8003cd8:	f7fe fbf0 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003cdc:	2000      	movs	r0, #0
 8003cde:	f7fe fbed 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	f7fe fbea 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ce8:	2000      	movs	r0, #0
 8003cea:	f7fe fbe7 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003cee:	2000      	movs	r0, #0
 8003cf0:	f7fe fbe4 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	f7fe fbe1 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	f7fe fbde 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d00:	2000      	movs	r0, #0
 8003d02:	f7fe fbdb 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 8003d06:	20b4      	movs	r0, #180	; 0xb4
 8003d08:	f7fe fbb4 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 8003d0c:	208b      	movs	r0, #139	; 0x8b
 8003d0e:	f7fe fbd5 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d12:	2000      	movs	r0, #0
 8003d14:	f7fe fbd2 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8003d18:	2096      	movs	r0, #150	; 0x96
 8003d1a:	f7fe fbcf 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d1e:	2000      	movs	r0, #0
 8003d20:	f7fe fbcc 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 8003d24:	20a1      	movs	r0, #161	; 0xa1
 8003d26:	f7fe fbc9 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d2a:	2000      	movs	r0, #0
 8003d2c:	f7fe fbc6 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8003d30:	20b5      	movs	r0, #181	; 0xb5
 8003d32:	f7fe fb9f 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 8003d36:	2002      	movs	r0, #2
 8003d38:	f7fe fbc0 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	f7fe fbbd 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 8003d42:	2003      	movs	r0, #3
 8003d44:	f7fe fbba 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d48:	2000      	movs	r0, #0
 8003d4a:	f7fe fbb7 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8003d4e:	2004      	movs	r0, #4
 8003d50:	f7fe fbb4 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d54:	2000      	movs	r0, #0
 8003d56:	f7fe fbb1 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 8003d5a:	20b6      	movs	r0, #182	; 0xb6
 8003d5c:	f7fe fb8a 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003d60:	2000      	movs	r0, #0
 8003d62:	f7fe fbab 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d66:	2000      	movs	r0, #0
 8003d68:	f7fe fba8 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 8003d6c:	20b7      	movs	r0, #183	; 0xb7
 8003d6e:	f7fe fb81 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003d72:	2000      	movs	r0, #0
 8003d74:	f7fe fba2 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d78:	2000      	movs	r0, #0
 8003d7a:	f7fe fb9f 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8003d7e:	203f      	movs	r0, #63	; 0x3f
 8003d80:	f7fe fb9c 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d84:	2000      	movs	r0, #0
 8003d86:	f7fe fb99 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 8003d8a:	205e      	movs	r0, #94	; 0x5e
 8003d8c:	f7fe fb96 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d90:	2000      	movs	r0, #0
 8003d92:	f7fe fb93 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8003d96:	2064      	movs	r0, #100	; 0x64
 8003d98:	f7fe fb90 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	f7fe fb8d 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 8003da2:	208c      	movs	r0, #140	; 0x8c
 8003da4:	f7fe fb8a 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003da8:	2000      	movs	r0, #0
 8003daa:	f7fe fb87 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 8003dae:	20ac      	movs	r0, #172	; 0xac
 8003db0:	f7fe fb84 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003db4:	2000      	movs	r0, #0
 8003db6:	f7fe fb81 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8003dba:	20dc      	movs	r0, #220	; 0xdc
 8003dbc:	f7fe fb7e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	f7fe fb7b 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 8003dc6:	2070      	movs	r0, #112	; 0x70
 8003dc8:	f7fe fb78 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003dcc:	2000      	movs	r0, #0
 8003dce:	f7fe fb75 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 8003dd2:	2090      	movs	r0, #144	; 0x90
 8003dd4:	f7fe fb72 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003dd8:	2000      	movs	r0, #0
 8003dda:	f7fe fb6f 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 8003dde:	20eb      	movs	r0, #235	; 0xeb
 8003de0:	f7fe fb6c 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003de4:	2000      	movs	r0, #0
 8003de6:	f7fe fb69 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8003dea:	20dc      	movs	r0, #220	; 0xdc
 8003dec:	f7fe fb66 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003df0:	2000      	movs	r0, #0
 8003df2:	f7fe fb63 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 8003df6:	20b8      	movs	r0, #184	; 0xb8
 8003df8:	f7fe fb3c 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	f7fe fb5d 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e02:	2000      	movs	r0, #0
 8003e04:	f7fe fb5a 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e08:	2000      	movs	r0, #0
 8003e0a:	f7fe fb57 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e0e:	2000      	movs	r0, #0
 8003e10:	f7fe fb54 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e14:	2000      	movs	r0, #0
 8003e16:	f7fe fb51 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	f7fe fb4e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e20:	2000      	movs	r0, #0
 8003e22:	f7fe fb4b 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e26:	2000      	movs	r0, #0
 8003e28:	f7fe fb48 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 8003e2c:	20ba      	movs	r0, #186	; 0xba
 8003e2e:	f7fe fb21 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 8003e32:	2024      	movs	r0, #36	; 0x24
 8003e34:	f7fe fb42 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e38:	2000      	movs	r0, #0
 8003e3a:	f7fe fb3f 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e3e:	2000      	movs	r0, #0
 8003e40:	f7fe fb3c 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e44:	2000      	movs	r0, #0
 8003e46:	f7fe fb39 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 8003e4a:	20c1      	movs	r0, #193	; 0xc1
 8003e4c:	f7fe fb12 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8003e50:	2020      	movs	r0, #32
 8003e52:	f7fe fb33 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e56:	2000      	movs	r0, #0
 8003e58:	f7fe fb30 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8003e5c:	2054      	movs	r0, #84	; 0x54
 8003e5e:	f7fe fb2d 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e62:	2000      	movs	r0, #0
 8003e64:	f7fe fb2a 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8003e68:	20ff      	movs	r0, #255	; 0xff
 8003e6a:	f7fe fb27 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e6e:	2000      	movs	r0, #0
 8003e70:	f7fe fb24 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 8003e74:	20c2      	movs	r0, #194	; 0xc2
 8003e76:	f7fe fafd 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8003e7a:	200a      	movs	r0, #10
 8003e7c:	f7fe fb1e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e80:	2000      	movs	r0, #0
 8003e82:	f7fe fb1b 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8003e86:	2004      	movs	r0, #4
 8003e88:	f7fe fb18 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	f7fe fb15 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 8003e92:	20c3      	movs	r0, #195	; 0xc3
 8003e94:	f7fe faee 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8003e98:	203c      	movs	r0, #60	; 0x3c
 8003e9a:	f7fe fb0f 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e9e:	2000      	movs	r0, #0
 8003ea0:	f7fe fb0c 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 8003ea4:	203a      	movs	r0, #58	; 0x3a
 8003ea6:	f7fe fb09 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003eaa:	2000      	movs	r0, #0
 8003eac:	f7fe fb06 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8003eb0:	2039      	movs	r0, #57	; 0x39
 8003eb2:	f7fe fb03 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003eb6:	2000      	movs	r0, #0
 8003eb8:	f7fe fb00 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 8003ebc:	2037      	movs	r0, #55	; 0x37
 8003ebe:	f7fe fafd 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	f7fe fafa 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8003ec8:	203c      	movs	r0, #60	; 0x3c
 8003eca:	f7fe faf7 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ece:	2000      	movs	r0, #0
 8003ed0:	f7fe faf4 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8003ed4:	2036      	movs	r0, #54	; 0x36
 8003ed6:	f7fe faf1 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003eda:	2000      	movs	r0, #0
 8003edc:	f7fe faee 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8003ee0:	2032      	movs	r0, #50	; 0x32
 8003ee2:	f7fe faeb 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ee6:	2000      	movs	r0, #0
 8003ee8:	f7fe fae8 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8003eec:	202f      	movs	r0, #47	; 0x2f
 8003eee:	f7fe fae5 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	f7fe fae2 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8003ef8:	202c      	movs	r0, #44	; 0x2c
 8003efa:	f7fe fadf 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003efe:	2000      	movs	r0, #0
 8003f00:	f7fe fadc 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003f04:	2029      	movs	r0, #41	; 0x29
 8003f06:	f7fe fad9 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f0a:	2000      	movs	r0, #0
 8003f0c:	f7fe fad6 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8003f10:	2026      	movs	r0, #38	; 0x26
 8003f12:	f7fe fad3 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f16:	2000      	movs	r0, #0
 8003f18:	f7fe fad0 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8003f1c:	2024      	movs	r0, #36	; 0x24
 8003f1e:	f7fe facd 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f22:	2000      	movs	r0, #0
 8003f24:	f7fe faca 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8003f28:	2024      	movs	r0, #36	; 0x24
 8003f2a:	f7fe fac7 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f2e:	2000      	movs	r0, #0
 8003f30:	f7fe fac4 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8003f34:	2023      	movs	r0, #35	; 0x23
 8003f36:	f7fe fac1 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f3a:	2000      	movs	r0, #0
 8003f3c:	f7fe fabe 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8003f40:	203c      	movs	r0, #60	; 0x3c
 8003f42:	f7fe fabb 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f46:	2000      	movs	r0, #0
 8003f48:	f7fe fab8 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8003f4c:	2036      	movs	r0, #54	; 0x36
 8003f4e:	f7fe fab5 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f52:	2000      	movs	r0, #0
 8003f54:	f7fe fab2 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8003f58:	2032      	movs	r0, #50	; 0x32
 8003f5a:	f7fe faaf 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f5e:	2000      	movs	r0, #0
 8003f60:	f7fe faac 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8003f64:	202f      	movs	r0, #47	; 0x2f
 8003f66:	f7fe faa9 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	f7fe faa6 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8003f70:	202c      	movs	r0, #44	; 0x2c
 8003f72:	f7fe faa3 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f76:	2000      	movs	r0, #0
 8003f78:	f7fe faa0 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003f7c:	2029      	movs	r0, #41	; 0x29
 8003f7e:	f7fe fa9d 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f82:	2000      	movs	r0, #0
 8003f84:	f7fe fa9a 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8003f88:	2026      	movs	r0, #38	; 0x26
 8003f8a:	f7fe fa97 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f8e:	2000      	movs	r0, #0
 8003f90:	f7fe fa94 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8003f94:	2024      	movs	r0, #36	; 0x24
 8003f96:	f7fe fa91 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	f7fe fa8e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8003fa0:	2024      	movs	r0, #36	; 0x24
 8003fa2:	f7fe fa8b 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	f7fe fa88 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8003fac:	2023      	movs	r0, #35	; 0x23
 8003fae:	f7fe fa85 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	f7fe fa82 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8003fb8:	20c4      	movs	r0, #196	; 0xc4
 8003fba:	f7fe fa5b 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 8003fbe:	2062      	movs	r0, #98	; 0x62
 8003fc0:	f7fe fa7c 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	f7fe fa79 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8003fca:	2005      	movs	r0, #5
 8003fcc:	f7fe fa76 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	f7fe fa73 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8003fd6:	2084      	movs	r0, #132	; 0x84
 8003fd8:	f7fe fa70 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003fdc:	2000      	movs	r0, #0
 8003fde:	f7fe fa6d 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8003fe2:	20f0      	movs	r0, #240	; 0xf0
 8003fe4:	f7fe fa6a 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003fe8:	2000      	movs	r0, #0
 8003fea:	f7fe fa67 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8003fee:	2018      	movs	r0, #24
 8003ff0:	f7fe fa64 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ff4:	2000      	movs	r0, #0
 8003ff6:	f7fe fa61 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 8003ffa:	20a4      	movs	r0, #164	; 0xa4
 8003ffc:	f7fe fa5e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004000:	2000      	movs	r0, #0
 8004002:	f7fe fa5b 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8004006:	2018      	movs	r0, #24
 8004008:	f7fe fa58 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800400c:	2000      	movs	r0, #0
 800400e:	f7fe fa55 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8004012:	2050      	movs	r0, #80	; 0x50
 8004014:	f7fe fa52 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004018:	2000      	movs	r0, #0
 800401a:	f7fe fa4f 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 800401e:	200c      	movs	r0, #12
 8004020:	f7fe fa4c 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004024:	2000      	movs	r0, #0
 8004026:	f7fe fa49 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 800402a:	2017      	movs	r0, #23
 800402c:	f7fe fa46 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004030:	2000      	movs	r0, #0
 8004032:	f7fe fa43 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 8004036:	2095      	movs	r0, #149	; 0x95
 8004038:	f7fe fa40 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800403c:	2000      	movs	r0, #0
 800403e:	f7fe fa3d 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8004042:	20f3      	movs	r0, #243	; 0xf3
 8004044:	f7fe fa3a 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004048:	2000      	movs	r0, #0
 800404a:	f7fe fa37 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 800404e:	20e6      	movs	r0, #230	; 0xe6
 8004050:	f7fe fa34 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004054:	2000      	movs	r0, #0
 8004056:	f7fe fa31 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 800405a:	20c5      	movs	r0, #197	; 0xc5
 800405c:	f7fe fa0a 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8004060:	2032      	movs	r0, #50	; 0x32
 8004062:	f7fe fa2b 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004066:	2000      	movs	r0, #0
 8004068:	f7fe fa28 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800406c:	2044      	movs	r0, #68	; 0x44
 800406e:	f7fe fa25 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004072:	2000      	movs	r0, #0
 8004074:	f7fe fa22 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8004078:	2065      	movs	r0, #101	; 0x65
 800407a:	f7fe fa1f 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800407e:	2000      	movs	r0, #0
 8004080:	f7fe fa1c 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8004084:	2076      	movs	r0, #118	; 0x76
 8004086:	f7fe fa19 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800408a:	2000      	movs	r0, #0
 800408c:	f7fe fa16 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8004090:	2088      	movs	r0, #136	; 0x88
 8004092:	f7fe fa13 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004096:	2000      	movs	r0, #0
 8004098:	f7fe fa10 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 800409c:	20c6      	movs	r0, #198	; 0xc6
 800409e:	f7fe f9e9 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 80040a2:	2020      	movs	r0, #32
 80040a4:	f7fe fa0a 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80040a8:	2000      	movs	r0, #0
 80040aa:	f7fe fa07 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 80040ae:	2017      	movs	r0, #23
 80040b0:	f7fe fa04 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80040b4:	2000      	movs	r0, #0
 80040b6:	f7fe fa01 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80040ba:	2001      	movs	r0, #1
 80040bc:	f7fe f9fe 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80040c0:	2000      	movs	r0, #0
 80040c2:	f7fe f9fb 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 80040c6:	20c7      	movs	r0, #199	; 0xc7
 80040c8:	f7fe f9d4 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80040cc:	2000      	movs	r0, #0
 80040ce:	f7fe f9f5 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80040d2:	2000      	movs	r0, #0
 80040d4:	f7fe f9f2 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80040d8:	2000      	movs	r0, #0
 80040da:	f7fe f9ef 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80040de:	2000      	movs	r0, #0
 80040e0:	f7fe f9ec 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 80040e4:	20c8      	movs	r0, #200	; 0xc8
 80040e6:	f7fe f9c5 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80040ea:	2000      	movs	r0, #0
 80040ec:	f7fe f9e6 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80040f0:	2000      	movs	r0, #0
 80040f2:	f7fe f9e3 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80040f6:	2000      	movs	r0, #0
 80040f8:	f7fe f9e0 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80040fc:	2000      	movs	r0, #0
 80040fe:	f7fe f9dd 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8004102:	20c9      	movs	r0, #201	; 0xc9
 8004104:	f7fe f9b6 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004108:	2000      	movs	r0, #0
 800410a:	f7fe f9d7 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800410e:	2000      	movs	r0, #0
 8004110:	f7fe f9d4 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004114:	2000      	movs	r0, #0
 8004116:	f7fe f9d1 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800411a:	2000      	movs	r0, #0
 800411c:	f7fe f9ce 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004120:	2000      	movs	r0, #0
 8004122:	f7fe f9cb 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004126:	2000      	movs	r0, #0
 8004128:	f7fe f9c8 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800412c:	2000      	movs	r0, #0
 800412e:	f7fe f9c5 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004132:	2000      	movs	r0, #0
 8004134:	f7fe f9c2 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004138:	2000      	movs	r0, #0
 800413a:	f7fe f9bf 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800413e:	2000      	movs	r0, #0
 8004140:	f7fe f9bc 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004144:	2000      	movs	r0, #0
 8004146:	f7fe f9b9 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800414a:	2000      	movs	r0, #0
 800414c:	f7fe f9b6 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004150:	2000      	movs	r0, #0
 8004152:	f7fe f9b3 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004156:	2000      	movs	r0, #0
 8004158:	f7fe f9b0 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800415c:	2000      	movs	r0, #0
 800415e:	f7fe f9ad 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004162:	2000      	movs	r0, #0
 8004164:	f7fe f9aa 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8004168:	20e0      	movs	r0, #224	; 0xe0
 800416a:	f7fe f983 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 800416e:	2016      	movs	r0, #22
 8004170:	f7fe f9a4 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004174:	2000      	movs	r0, #0
 8004176:	f7fe f9a1 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 800417a:	201c      	movs	r0, #28
 800417c:	f7fe f99e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004180:	2000      	movs	r0, #0
 8004182:	f7fe f99b 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8004186:	2021      	movs	r0, #33	; 0x21
 8004188:	f7fe f998 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800418c:	2000      	movs	r0, #0
 800418e:	f7fe f995 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8004192:	2036      	movs	r0, #54	; 0x36
 8004194:	f7fe f992 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004198:	2000      	movs	r0, #0
 800419a:	f7fe f98f 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 800419e:	2046      	movs	r0, #70	; 0x46
 80041a0:	f7fe f98c 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80041a4:	2000      	movs	r0, #0
 80041a6:	f7fe f989 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 80041aa:	2052      	movs	r0, #82	; 0x52
 80041ac:	f7fe f986 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80041b0:	2000      	movs	r0, #0
 80041b2:	f7fe f983 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 80041b6:	2064      	movs	r0, #100	; 0x64
 80041b8:	f7fe f980 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80041bc:	2000      	movs	r0, #0
 80041be:	f7fe f97d 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 80041c2:	207a      	movs	r0, #122	; 0x7a
 80041c4:	f7fe f97a 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80041c8:	2000      	movs	r0, #0
 80041ca:	f7fe f977 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 80041ce:	208b      	movs	r0, #139	; 0x8b
 80041d0:	f7fe f974 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80041d4:	2000      	movs	r0, #0
 80041d6:	f7fe f971 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80041da:	2099      	movs	r0, #153	; 0x99
 80041dc:	f7fe f96e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80041e0:	2000      	movs	r0, #0
 80041e2:	f7fe f96b 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 80041e6:	20a8      	movs	r0, #168	; 0xa8
 80041e8:	f7fe f968 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80041ec:	2000      	movs	r0, #0
 80041ee:	f7fe f965 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 80041f2:	20b9      	movs	r0, #185	; 0xb9
 80041f4:	f7fe f962 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80041f8:	2000      	movs	r0, #0
 80041fa:	f7fe f95f 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80041fe:	20c4      	movs	r0, #196	; 0xc4
 8004200:	f7fe f95c 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004204:	2000      	movs	r0, #0
 8004206:	f7fe f959 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 800420a:	20ca      	movs	r0, #202	; 0xca
 800420c:	f7fe f956 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004210:	2000      	movs	r0, #0
 8004212:	f7fe f953 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8004216:	20d2      	movs	r0, #210	; 0xd2
 8004218:	f7fe f950 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800421c:	2000      	movs	r0, #0
 800421e:	f7fe f94d 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8004222:	20d9      	movs	r0, #217	; 0xd9
 8004224:	f7fe f94a 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004228:	2000      	movs	r0, #0
 800422a:	f7fe f947 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 800422e:	20e0      	movs	r0, #224	; 0xe0
 8004230:	f7fe f944 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004234:	2000      	movs	r0, #0
 8004236:	f7fe f941 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 800423a:	20f3      	movs	r0, #243	; 0xf3
 800423c:	f7fe f93e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004240:	2000      	movs	r0, #0
 8004242:	f7fe f93b 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8004246:	20e1      	movs	r0, #225	; 0xe1
 8004248:	f7fe f914 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 800424c:	2016      	movs	r0, #22
 800424e:	f7fe f935 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004252:	2000      	movs	r0, #0
 8004254:	f7fe f932 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8004258:	201c      	movs	r0, #28
 800425a:	f7fe f92f 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800425e:	2000      	movs	r0, #0
 8004260:	f7fe f92c 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8004264:	2022      	movs	r0, #34	; 0x22
 8004266:	f7fe f929 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800426a:	2000      	movs	r0, #0
 800426c:	f7fe f926 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8004270:	2036      	movs	r0, #54	; 0x36
 8004272:	f7fe f923 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004276:	2000      	movs	r0, #0
 8004278:	f7fe f920 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800427c:	2045      	movs	r0, #69	; 0x45
 800427e:	f7fe f91d 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004282:	2000      	movs	r0, #0
 8004284:	f7fe f91a 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8004288:	2052      	movs	r0, #82	; 0x52
 800428a:	f7fe f917 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800428e:	2000      	movs	r0, #0
 8004290:	f7fe f914 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8004294:	2064      	movs	r0, #100	; 0x64
 8004296:	f7fe f911 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800429a:	2000      	movs	r0, #0
 800429c:	f7fe f90e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 80042a0:	207a      	movs	r0, #122	; 0x7a
 80042a2:	f7fe f90b 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80042a6:	2000      	movs	r0, #0
 80042a8:	f7fe f908 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 80042ac:	208b      	movs	r0, #139	; 0x8b
 80042ae:	f7fe f905 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80042b2:	2000      	movs	r0, #0
 80042b4:	f7fe f902 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80042b8:	2099      	movs	r0, #153	; 0x99
 80042ba:	f7fe f8ff 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80042be:	2000      	movs	r0, #0
 80042c0:	f7fe f8fc 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 80042c4:	20a8      	movs	r0, #168	; 0xa8
 80042c6:	f7fe f8f9 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80042ca:	2000      	movs	r0, #0
 80042cc:	f7fe f8f6 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 80042d0:	20b9      	movs	r0, #185	; 0xb9
 80042d2:	f7fe f8f3 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80042d6:	2000      	movs	r0, #0
 80042d8:	f7fe f8f0 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80042dc:	20c4      	movs	r0, #196	; 0xc4
 80042de:	f7fe f8ed 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80042e2:	2000      	movs	r0, #0
 80042e4:	f7fe f8ea 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 80042e8:	20ca      	movs	r0, #202	; 0xca
 80042ea:	f7fe f8e7 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80042ee:	2000      	movs	r0, #0
 80042f0:	f7fe f8e4 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 80042f4:	20d2      	movs	r0, #210	; 0xd2
 80042f6:	f7fe f8e1 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80042fa:	2000      	movs	r0, #0
 80042fc:	f7fe f8de 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8004300:	20d8      	movs	r0, #216	; 0xd8
 8004302:	f7fe f8db 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004306:	2000      	movs	r0, #0
 8004308:	f7fe f8d8 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 800430c:	20e0      	movs	r0, #224	; 0xe0
 800430e:	f7fe f8d5 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004312:	2000      	movs	r0, #0
 8004314:	f7fe f8d2 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8004318:	20f3      	movs	r0, #243	; 0xf3
 800431a:	f7fe f8cf 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800431e:	2000      	movs	r0, #0
 8004320:	f7fe f8cc 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8004324:	20e2      	movs	r0, #226	; 0xe2
 8004326:	f7fe f8a5 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 800432a:	2005      	movs	r0, #5
 800432c:	f7fe f8c6 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004330:	2000      	movs	r0, #0
 8004332:	f7fe f8c3 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8004336:	200b      	movs	r0, #11
 8004338:	f7fe f8c0 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800433c:	2000      	movs	r0, #0
 800433e:	f7fe f8bd 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8004342:	201b      	movs	r0, #27
 8004344:	f7fe f8ba 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004348:	2000      	movs	r0, #0
 800434a:	f7fe f8b7 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 800434e:	2034      	movs	r0, #52	; 0x34
 8004350:	f7fe f8b4 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004354:	2000      	movs	r0, #0
 8004356:	f7fe f8b1 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800435a:	2044      	movs	r0, #68	; 0x44
 800435c:	f7fe f8ae 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004360:	2000      	movs	r0, #0
 8004362:	f7fe f8ab 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8004366:	204f      	movs	r0, #79	; 0x4f
 8004368:	f7fe f8a8 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800436c:	2000      	movs	r0, #0
 800436e:	f7fe f8a5 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8004372:	2061      	movs	r0, #97	; 0x61
 8004374:	f7fe f8a2 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004378:	2000      	movs	r0, #0
 800437a:	f7fe f89f 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 800437e:	2079      	movs	r0, #121	; 0x79
 8004380:	f7fe f89c 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004384:	2000      	movs	r0, #0
 8004386:	f7fe f899 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800438a:	2088      	movs	r0, #136	; 0x88
 800438c:	f7fe f896 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004390:	2000      	movs	r0, #0
 8004392:	f7fe f893 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8004396:	2097      	movs	r0, #151	; 0x97
 8004398:	f7fe f890 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800439c:	2000      	movs	r0, #0
 800439e:	f7fe f88d 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 80043a2:	20a6      	movs	r0, #166	; 0xa6
 80043a4:	f7fe f88a 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80043a8:	2000      	movs	r0, #0
 80043aa:	f7fe f887 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 80043ae:	20b7      	movs	r0, #183	; 0xb7
 80043b0:	f7fe f884 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80043b4:	2000      	movs	r0, #0
 80043b6:	f7fe f881 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 80043ba:	20c2      	movs	r0, #194	; 0xc2
 80043bc:	f7fe f87e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80043c0:	2000      	movs	r0, #0
 80043c2:	f7fe f87b 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 80043c6:	20c7      	movs	r0, #199	; 0xc7
 80043c8:	f7fe f878 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80043cc:	2000      	movs	r0, #0
 80043ce:	f7fe f875 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 80043d2:	20d1      	movs	r0, #209	; 0xd1
 80043d4:	f7fe f872 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80043d8:	2000      	movs	r0, #0
 80043da:	f7fe f86f 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 80043de:	20d6      	movs	r0, #214	; 0xd6
 80043e0:	f7fe f86c 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80043e4:	2000      	movs	r0, #0
 80043e6:	f7fe f869 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80043ea:	20dd      	movs	r0, #221	; 0xdd
 80043ec:	f7fe f866 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80043f0:	2000      	movs	r0, #0
 80043f2:	f7fe f863 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80043f6:	20f3      	movs	r0, #243	; 0xf3
 80043f8:	f7fe f860 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80043fc:	2000      	movs	r0, #0
 80043fe:	f7fe f85d 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8004402:	20e3      	movs	r0, #227	; 0xe3
 8004404:	f7fe f836 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8004408:	2005      	movs	r0, #5
 800440a:	f7fe f857 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800440e:	2000      	movs	r0, #0
 8004410:	f7fe f854 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8004414:	200a      	movs	r0, #10
 8004416:	f7fe f851 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800441a:	2000      	movs	r0, #0
 800441c:	f7fe f84e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8004420:	201c      	movs	r0, #28
 8004422:	f7fe f84b 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004426:	2000      	movs	r0, #0
 8004428:	f7fe f848 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 800442c:	2033      	movs	r0, #51	; 0x33
 800442e:	f7fe f845 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004432:	2000      	movs	r0, #0
 8004434:	f7fe f842 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8004438:	2044      	movs	r0, #68	; 0x44
 800443a:	f7fe f83f 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800443e:	2000      	movs	r0, #0
 8004440:	f7fe f83c 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8004444:	2050      	movs	r0, #80	; 0x50
 8004446:	f7fe f839 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800444a:	2000      	movs	r0, #0
 800444c:	f7fe f836 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8004450:	2062      	movs	r0, #98	; 0x62
 8004452:	f7fe f833 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004456:	2000      	movs	r0, #0
 8004458:	f7fe f830 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 800445c:	2078      	movs	r0, #120	; 0x78
 800445e:	f7fe f82d 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004462:	2000      	movs	r0, #0
 8004464:	f7fe f82a 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8004468:	2088      	movs	r0, #136	; 0x88
 800446a:	f7fe f827 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800446e:	2000      	movs	r0, #0
 8004470:	f7fe f824 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8004474:	2097      	movs	r0, #151	; 0x97
 8004476:	f7fe f821 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800447a:	2000      	movs	r0, #0
 800447c:	f7fe f81e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8004480:	20a6      	movs	r0, #166	; 0xa6
 8004482:	f7fe f81b 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004486:	2000      	movs	r0, #0
 8004488:	f7fe f818 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 800448c:	20b7      	movs	r0, #183	; 0xb7
 800448e:	f7fe f815 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004492:	2000      	movs	r0, #0
 8004494:	f7fe f812 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8004498:	20c2      	movs	r0, #194	; 0xc2
 800449a:	f7fe f80f 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800449e:	2000      	movs	r0, #0
 80044a0:	f7fe f80c 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 80044a4:	20c7      	movs	r0, #199	; 0xc7
 80044a6:	f7fe f809 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80044aa:	2000      	movs	r0, #0
 80044ac:	f7fe f806 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 80044b0:	20d1      	movs	r0, #209	; 0xd1
 80044b2:	f7fe f803 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80044b6:	2000      	movs	r0, #0
 80044b8:	f7fe f800 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 80044bc:	20d5      	movs	r0, #213	; 0xd5
 80044be:	f7fd fffd 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80044c2:	2000      	movs	r0, #0
 80044c4:	f7fd fffa 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80044c8:	20dd      	movs	r0, #221	; 0xdd
 80044ca:	f7fd fff7 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80044ce:	2000      	movs	r0, #0
 80044d0:	f7fd fff4 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80044d4:	20f3      	movs	r0, #243	; 0xf3
 80044d6:	f7fd fff1 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80044da:	2000      	movs	r0, #0
 80044dc:	f7fd ffee 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 80044e0:	20e4      	movs	r0, #228	; 0xe4
 80044e2:	f7fd ffc7 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80044e6:	2001      	movs	r0, #1
 80044e8:	f7fd ffe8 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80044ec:	2000      	movs	r0, #0
 80044ee:	f7fd ffe5 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80044f2:	2001      	movs	r0, #1
 80044f4:	f7fd ffe2 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80044f8:	2000      	movs	r0, #0
 80044fa:	f7fd ffdf 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80044fe:	2002      	movs	r0, #2
 8004500:	f7fd ffdc 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004504:	2000      	movs	r0, #0
 8004506:	f7fd ffd9 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 800450a:	202a      	movs	r0, #42	; 0x2a
 800450c:	f7fd ffd6 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004510:	2000      	movs	r0, #0
 8004512:	f7fd ffd3 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8004516:	203c      	movs	r0, #60	; 0x3c
 8004518:	f7fd ffd0 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800451c:	2000      	movs	r0, #0
 800451e:	f7fd ffcd 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8004522:	204b      	movs	r0, #75	; 0x4b
 8004524:	f7fd ffca 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004528:	2000      	movs	r0, #0
 800452a:	f7fd ffc7 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 800452e:	205d      	movs	r0, #93	; 0x5d
 8004530:	f7fd ffc4 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004534:	2000      	movs	r0, #0
 8004536:	f7fd ffc1 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 800453a:	2074      	movs	r0, #116	; 0x74
 800453c:	f7fd ffbe 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004540:	2000      	movs	r0, #0
 8004542:	f7fd ffbb 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8004546:	2084      	movs	r0, #132	; 0x84
 8004548:	f7fd ffb8 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800454c:	2000      	movs	r0, #0
 800454e:	f7fd ffb5 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8004552:	2093      	movs	r0, #147	; 0x93
 8004554:	f7fd ffb2 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004558:	2000      	movs	r0, #0
 800455a:	f7fd ffaf 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 800455e:	20a2      	movs	r0, #162	; 0xa2
 8004560:	f7fd ffac 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004564:	2000      	movs	r0, #0
 8004566:	f7fd ffa9 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 800456a:	20b3      	movs	r0, #179	; 0xb3
 800456c:	f7fd ffa6 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004570:	2000      	movs	r0, #0
 8004572:	f7fd ffa3 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8004576:	20be      	movs	r0, #190	; 0xbe
 8004578:	f7fd ffa0 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800457c:	2000      	movs	r0, #0
 800457e:	f7fd ff9d 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8004582:	20c4      	movs	r0, #196	; 0xc4
 8004584:	f7fd ff9a 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004588:	2000      	movs	r0, #0
 800458a:	f7fd ff97 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 800458e:	20cd      	movs	r0, #205	; 0xcd
 8004590:	f7fd ff94 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004594:	2000      	movs	r0, #0
 8004596:	f7fd ff91 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 800459a:	20d3      	movs	r0, #211	; 0xd3
 800459c:	f7fd ff8e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045a0:	2000      	movs	r0, #0
 80045a2:	f7fd ff8b 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80045a6:	20dd      	movs	r0, #221	; 0xdd
 80045a8:	f7fd ff88 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045ac:	2000      	movs	r0, #0
 80045ae:	f7fd ff85 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80045b2:	20f3      	movs	r0, #243	; 0xf3
 80045b4:	f7fd ff82 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045b8:	2000      	movs	r0, #0
 80045ba:	f7fd ff7f 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 80045be:	20e5      	movs	r0, #229	; 0xe5
 80045c0:	f7fd ff58 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80045c4:	2000      	movs	r0, #0
 80045c6:	f7fd ff79 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045ca:	2000      	movs	r0, #0
 80045cc:	f7fd ff76 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045d0:	2000      	movs	r0, #0
 80045d2:	f7fd ff73 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045d6:	2000      	movs	r0, #0
 80045d8:	f7fd ff70 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80045dc:	2002      	movs	r0, #2
 80045de:	f7fd ff6d 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045e2:	2000      	movs	r0, #0
 80045e4:	f7fd ff6a 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80045e8:	2029      	movs	r0, #41	; 0x29
 80045ea:	f7fd ff67 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045ee:	2000      	movs	r0, #0
 80045f0:	f7fd ff64 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80045f4:	203c      	movs	r0, #60	; 0x3c
 80045f6:	f7fd ff61 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045fa:	2000      	movs	r0, #0
 80045fc:	f7fd ff5e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8004600:	204b      	movs	r0, #75	; 0x4b
 8004602:	f7fd ff5b 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004606:	2000      	movs	r0, #0
 8004608:	f7fd ff58 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 800460c:	205d      	movs	r0, #93	; 0x5d
 800460e:	f7fd ff55 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004612:	2000      	movs	r0, #0
 8004614:	f7fd ff52 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8004618:	2074      	movs	r0, #116	; 0x74
 800461a:	f7fd ff4f 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800461e:	2000      	movs	r0, #0
 8004620:	f7fd ff4c 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8004624:	2084      	movs	r0, #132	; 0x84
 8004626:	f7fd ff49 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800462a:	2000      	movs	r0, #0
 800462c:	f7fd ff46 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8004630:	2093      	movs	r0, #147	; 0x93
 8004632:	f7fd ff43 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004636:	2000      	movs	r0, #0
 8004638:	f7fd ff40 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 800463c:	20a2      	movs	r0, #162	; 0xa2
 800463e:	f7fd ff3d 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004642:	2000      	movs	r0, #0
 8004644:	f7fd ff3a 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8004648:	20b3      	movs	r0, #179	; 0xb3
 800464a:	f7fd ff37 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800464e:	2000      	movs	r0, #0
 8004650:	f7fd ff34 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8004654:	20be      	movs	r0, #190	; 0xbe
 8004656:	f7fd ff31 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800465a:	2000      	movs	r0, #0
 800465c:	f7fd ff2e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8004660:	20c4      	movs	r0, #196	; 0xc4
 8004662:	f7fd ff2b 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004666:	2000      	movs	r0, #0
 8004668:	f7fd ff28 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 800466c:	20cd      	movs	r0, #205	; 0xcd
 800466e:	f7fd ff25 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004672:	2000      	movs	r0, #0
 8004674:	f7fd ff22 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8004678:	20d3      	movs	r0, #211	; 0xd3
 800467a:	f7fd ff1f 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800467e:	2000      	movs	r0, #0
 8004680:	f7fd ff1c 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8004684:	20dc      	movs	r0, #220	; 0xdc
 8004686:	f7fd ff19 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800468a:	2000      	movs	r0, #0
 800468c:	f7fd ff16 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8004690:	20f3      	movs	r0, #243	; 0xf3
 8004692:	f7fd ff13 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004696:	2000      	movs	r0, #0
 8004698:	f7fd ff10 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 800469c:	20e6      	movs	r0, #230	; 0xe6
 800469e:	f7fd fee9 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 80046a2:	2011      	movs	r0, #17
 80046a4:	f7fd ff0a 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046a8:	2000      	movs	r0, #0
 80046aa:	f7fd ff07 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80046ae:	2034      	movs	r0, #52	; 0x34
 80046b0:	f7fd ff04 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046b4:	2000      	movs	r0, #0
 80046b6:	f7fd ff01 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80046ba:	2056      	movs	r0, #86	; 0x56
 80046bc:	f7fd fefe 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046c0:	2000      	movs	r0, #0
 80046c2:	f7fd fefb 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80046c6:	2076      	movs	r0, #118	; 0x76
 80046c8:	f7fd fef8 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046cc:	2000      	movs	r0, #0
 80046ce:	f7fd fef5 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80046d2:	2077      	movs	r0, #119	; 0x77
 80046d4:	f7fd fef2 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046d8:	2000      	movs	r0, #0
 80046da:	f7fd feef 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80046de:	2066      	movs	r0, #102	; 0x66
 80046e0:	f7fd feec 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046e4:	2000      	movs	r0, #0
 80046e6:	f7fd fee9 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80046ea:	2088      	movs	r0, #136	; 0x88
 80046ec:	f7fd fee6 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046f0:	2000      	movs	r0, #0
 80046f2:	f7fd fee3 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80046f6:	2099      	movs	r0, #153	; 0x99
 80046f8:	f7fd fee0 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046fc:	2000      	movs	r0, #0
 80046fe:	f7fd fedd 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8004702:	20bb      	movs	r0, #187	; 0xbb
 8004704:	f7fd feda 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004708:	2000      	movs	r0, #0
 800470a:	f7fd fed7 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800470e:	2099      	movs	r0, #153	; 0x99
 8004710:	f7fd fed4 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004714:	2000      	movs	r0, #0
 8004716:	f7fd fed1 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800471a:	2066      	movs	r0, #102	; 0x66
 800471c:	f7fd fece 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004720:	2000      	movs	r0, #0
 8004722:	f7fd fecb 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8004726:	2055      	movs	r0, #85	; 0x55
 8004728:	f7fd fec8 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800472c:	2000      	movs	r0, #0
 800472e:	f7fd fec5 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8004732:	2055      	movs	r0, #85	; 0x55
 8004734:	f7fd fec2 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004738:	2000      	movs	r0, #0
 800473a:	f7fd febf 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800473e:	2045      	movs	r0, #69	; 0x45
 8004740:	f7fd febc 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004744:	2000      	movs	r0, #0
 8004746:	f7fd feb9 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 800474a:	2043      	movs	r0, #67	; 0x43
 800474c:	f7fd feb6 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004750:	2000      	movs	r0, #0
 8004752:	f7fd feb3 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8004756:	2044      	movs	r0, #68	; 0x44
 8004758:	f7fd feb0 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800475c:	2000      	movs	r0, #0
 800475e:	f7fd fead 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 8004762:	20e7      	movs	r0, #231	; 0xe7
 8004764:	f7fd fe86 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8004768:	2032      	movs	r0, #50	; 0x32
 800476a:	f7fd fea7 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800476e:	2000      	movs	r0, #0
 8004770:	f7fd fea4 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8004774:	2055      	movs	r0, #85	; 0x55
 8004776:	f7fd fea1 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800477a:	2000      	movs	r0, #0
 800477c:	f7fd fe9e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8004780:	2076      	movs	r0, #118	; 0x76
 8004782:	f7fd fe9b 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004786:	2000      	movs	r0, #0
 8004788:	f7fd fe98 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800478c:	2066      	movs	r0, #102	; 0x66
 800478e:	f7fd fe95 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004792:	2000      	movs	r0, #0
 8004794:	f7fd fe92 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8004798:	2067      	movs	r0, #103	; 0x67
 800479a:	f7fd fe8f 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800479e:	2000      	movs	r0, #0
 80047a0:	f7fd fe8c 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80047a4:	2067      	movs	r0, #103	; 0x67
 80047a6:	f7fd fe89 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047aa:	2000      	movs	r0, #0
 80047ac:	f7fd fe86 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 80047b0:	2087      	movs	r0, #135	; 0x87
 80047b2:	f7fd fe83 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047b6:	2000      	movs	r0, #0
 80047b8:	f7fd fe80 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80047bc:	2099      	movs	r0, #153	; 0x99
 80047be:	f7fd fe7d 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047c2:	2000      	movs	r0, #0
 80047c4:	f7fd fe7a 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80047c8:	20bb      	movs	r0, #187	; 0xbb
 80047ca:	f7fd fe77 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047ce:	2000      	movs	r0, #0
 80047d0:	f7fd fe74 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80047d4:	2099      	movs	r0, #153	; 0x99
 80047d6:	f7fd fe71 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047da:	2000      	movs	r0, #0
 80047dc:	f7fd fe6e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80047e0:	2077      	movs	r0, #119	; 0x77
 80047e2:	f7fd fe6b 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047e6:	2000      	movs	r0, #0
 80047e8:	f7fd fe68 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80047ec:	2044      	movs	r0, #68	; 0x44
 80047ee:	f7fd fe65 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047f2:	2000      	movs	r0, #0
 80047f4:	f7fd fe62 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80047f8:	2056      	movs	r0, #86	; 0x56
 80047fa:	f7fd fe5f 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047fe:	2000      	movs	r0, #0
 8004800:	f7fd fe5c 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8004804:	2023      	movs	r0, #35	; 0x23
 8004806:	f7fd fe59 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800480a:	2000      	movs	r0, #0
 800480c:	f7fd fe56 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8004810:	2033      	movs	r0, #51	; 0x33
 8004812:	f7fd fe53 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004816:	2000      	movs	r0, #0
 8004818:	f7fd fe50 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 800481c:	2045      	movs	r0, #69	; 0x45
 800481e:	f7fd fe4d 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004822:	2000      	movs	r0, #0
 8004824:	f7fd fe4a 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8004828:	20e8      	movs	r0, #232	; 0xe8
 800482a:	f7fd fe23 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800482e:	2000      	movs	r0, #0
 8004830:	f7fd fe44 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004834:	2000      	movs	r0, #0
 8004836:	f7fd fe41 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800483a:	2099      	movs	r0, #153	; 0x99
 800483c:	f7fd fe3e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004840:	2000      	movs	r0, #0
 8004842:	f7fd fe3b 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8004846:	2087      	movs	r0, #135	; 0x87
 8004848:	f7fd fe38 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800484c:	2000      	movs	r0, #0
 800484e:	f7fd fe35 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8004852:	2088      	movs	r0, #136	; 0x88
 8004854:	f7fd fe32 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004858:	2000      	movs	r0, #0
 800485a:	f7fd fe2f 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 800485e:	2077      	movs	r0, #119	; 0x77
 8004860:	f7fd fe2c 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004864:	2000      	movs	r0, #0
 8004866:	f7fd fe29 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800486a:	2066      	movs	r0, #102	; 0x66
 800486c:	f7fd fe26 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004870:	2000      	movs	r0, #0
 8004872:	f7fd fe23 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8004876:	2088      	movs	r0, #136	; 0x88
 8004878:	f7fd fe20 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800487c:	2000      	movs	r0, #0
 800487e:	f7fd fe1d 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 8004882:	20aa      	movs	r0, #170	; 0xaa
 8004884:	f7fd fe1a 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004888:	2000      	movs	r0, #0
 800488a:	f7fd fe17 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 800488e:	20bb      	movs	r0, #187	; 0xbb
 8004890:	f7fd fe14 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004894:	2000      	movs	r0, #0
 8004896:	f7fd fe11 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800489a:	2099      	movs	r0, #153	; 0x99
 800489c:	f7fd fe0e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048a0:	2000      	movs	r0, #0
 80048a2:	f7fd fe0b 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80048a6:	2066      	movs	r0, #102	; 0x66
 80048a8:	f7fd fe08 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048ac:	2000      	movs	r0, #0
 80048ae:	f7fd fe05 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80048b2:	2055      	movs	r0, #85	; 0x55
 80048b4:	f7fd fe02 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048b8:	2000      	movs	r0, #0
 80048ba:	f7fd fdff 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80048be:	2055      	movs	r0, #85	; 0x55
 80048c0:	f7fd fdfc 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048c4:	2000      	movs	r0, #0
 80048c6:	f7fd fdf9 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80048ca:	2044      	movs	r0, #68	; 0x44
 80048cc:	f7fd fdf6 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048d0:	2000      	movs	r0, #0
 80048d2:	f7fd fdf3 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80048d6:	2044      	movs	r0, #68	; 0x44
 80048d8:	f7fd fdf0 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048dc:	2000      	movs	r0, #0
 80048de:	f7fd fded 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80048e2:	2055      	movs	r0, #85	; 0x55
 80048e4:	f7fd fdea 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048e8:	2000      	movs	r0, #0
 80048ea:	f7fd fde7 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 80048ee:	20e9      	movs	r0, #233	; 0xe9
 80048f0:	f7fd fdc0 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80048f4:	20aa      	movs	r0, #170	; 0xaa
 80048f6:	f7fd fde1 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048fa:	2000      	movs	r0, #0
 80048fc:	f7fd fdde 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004900:	2000      	movs	r0, #0
 8004902:	f7fd fddb 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004906:	2000      	movs	r0, #0
 8004908:	f7fd fdd8 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 800490c:	2000      	movs	r0, #0
 800490e:	f7fd fdb1 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 8004912:	20aa      	movs	r0, #170	; 0xaa
 8004914:	f7fd fdd2 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8004918:	20cf      	movs	r0, #207	; 0xcf
 800491a:	f7fd fdab 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800491e:	2000      	movs	r0, #0
 8004920:	f7fd fdcc 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004924:	2000      	movs	r0, #0
 8004926:	f7fd fdc9 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800492a:	2000      	movs	r0, #0
 800492c:	f7fd fdc6 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004930:	2000      	movs	r0, #0
 8004932:	f7fd fdc3 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004936:	2000      	movs	r0, #0
 8004938:	f7fd fdc0 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800493c:	2000      	movs	r0, #0
 800493e:	f7fd fdbd 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004942:	2000      	movs	r0, #0
 8004944:	f7fd fdba 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004948:	2000      	movs	r0, #0
 800494a:	f7fd fdb7 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800494e:	2000      	movs	r0, #0
 8004950:	f7fd fdb4 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004954:	2000      	movs	r0, #0
 8004956:	f7fd fdb1 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800495a:	2000      	movs	r0, #0
 800495c:	f7fd fdae 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004960:	2000      	movs	r0, #0
 8004962:	f7fd fdab 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004966:	2000      	movs	r0, #0
 8004968:	f7fd fda8 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800496c:	2000      	movs	r0, #0
 800496e:	f7fd fda5 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004972:	2000      	movs	r0, #0
 8004974:	f7fd fda2 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004978:	2000      	movs	r0, #0
 800497a:	f7fd fd9f 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800497e:	2000      	movs	r0, #0
 8004980:	f7fd fd9c 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 8004984:	20f0      	movs	r0, #240	; 0xf0
 8004986:	f7fd fd75 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800498a:	2000      	movs	r0, #0
 800498c:	f7fd fd96 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8004990:	2050      	movs	r0, #80	; 0x50
 8004992:	f7fd fd93 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004996:	2000      	movs	r0, #0
 8004998:	f7fd fd90 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800499c:	2000      	movs	r0, #0
 800499e:	f7fd fd8d 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049a2:	2000      	movs	r0, #0
 80049a4:	f7fd fd8a 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 80049a8:	20f3      	movs	r0, #243	; 0xf3
 80049aa:	f7fd fd63 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80049ae:	2000      	movs	r0, #0
 80049b0:	f7fd fd84 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 80049b4:	20f9      	movs	r0, #249	; 0xf9
 80049b6:	f7fd fd5d 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 80049ba:	2006      	movs	r0, #6
 80049bc:	f7fd fd7e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80049c0:	2010      	movs	r0, #16
 80049c2:	f7fd fd7b 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80049c6:	2029      	movs	r0, #41	; 0x29
 80049c8:	f7fd fd78 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049cc:	2000      	movs	r0, #0
 80049ce:	f7fd fd75 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 80049d2:	203a      	movs	r0, #58	; 0x3a
 80049d4:	f7fd fd4e 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 80049d8:	2055      	movs	r0, #85	; 0x55
 80049da:	f7fd fd6f 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 80049de:	2011      	movs	r0, #17
 80049e0:	f7fd fd48 	bl	8002474 <LCD_WR_REG>
		HAL_Delay(100);
 80049e4:	2064      	movs	r0, #100	; 0x64
 80049e6:	f7fc faf5 	bl	8000fd4 <HAL_Delay>
		LCD_WR_REG(0x29);
 80049ea:	2029      	movs	r0, #41	; 0x29
 80049ec:	f7fd fd42 	bl	8002474 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 80049f0:	2035      	movs	r0, #53	; 0x35
 80049f2:	f7fd fd3f 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80049f6:	2000      	movs	r0, #0
 80049f8:	f7fd fd60 	bl	80024bc <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 80049fc:	2051      	movs	r0, #81	; 0x51
 80049fe:	f7fd fd39 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 8004a02:	20ff      	movs	r0, #255	; 0xff
 8004a04:	f7fd fd5a 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8004a08:	2053      	movs	r0, #83	; 0x53
 8004a0a:	f7fd fd33 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 8004a0e:	202c      	movs	r0, #44	; 0x2c
 8004a10:	f7fd fd54 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 8004a14:	2055      	movs	r0, #85	; 0x55
 8004a16:	f7fd fd2d 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 8004a1a:	2082      	movs	r0, #130	; 0x82
 8004a1c:	f7fd fd4e 	bl	80024bc <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8004a20:	202c      	movs	r0, #44	; 0x2c
 8004a22:	f7fd fd27 	bl	8002474 <LCD_WR_REG>
 8004a26:	f002 bca1 	b.w	800736c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 8004a2a:	4b04      	ldr	r3, [pc, #16]	; (8004a3c <LCD_Init+0x1504>)
 8004a2c:	889b      	ldrh	r3, [r3, #4]
 8004a2e:	f245 5210 	movw	r2, #21776	; 0x5510
 8004a32:	4293      	cmp	r3, r2
 8004a34:	f040 8782 	bne.w	800593c <LCD_Init+0x2404>
 8004a38:	e002      	b.n	8004a40 <LCD_Init+0x1508>
 8004a3a:	bf00      	nop
 8004a3c:	2000018c 	.word	0x2000018c
		LCD_WriteReg(0xF000, 0x55);
 8004a40:	2155      	movs	r1, #85	; 0x55
 8004a42:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8004a46:	f7fd fda1 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8004a4a:	21aa      	movs	r1, #170	; 0xaa
 8004a4c:	f24f 0001 	movw	r0, #61441	; 0xf001
 8004a50:	f7fd fd9c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8004a54:	2152      	movs	r1, #82	; 0x52
 8004a56:	f24f 0002 	movw	r0, #61442	; 0xf002
 8004a5a:	f7fd fd97 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8004a5e:	2108      	movs	r1, #8
 8004a60:	f24f 0003 	movw	r0, #61443	; 0xf003
 8004a64:	f7fd fd92 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 8004a68:	2101      	movs	r1, #1
 8004a6a:	f24f 0004 	movw	r0, #61444	; 0xf004
 8004a6e:	f7fd fd8d 	bl	800258c <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 8004a72:	210d      	movs	r1, #13
 8004a74:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8004a78:	f7fd fd88 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 8004a7c:	210d      	movs	r1, #13
 8004a7e:	f24b 0001 	movw	r0, #45057	; 0xb001
 8004a82:	f7fd fd83 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 8004a86:	210d      	movs	r1, #13
 8004a88:	f24b 0002 	movw	r0, #45058	; 0xb002
 8004a8c:	f7fd fd7e 	bl	800258c <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 8004a90:	2134      	movs	r1, #52	; 0x34
 8004a92:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8004a96:	f7fd fd79 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 8004a9a:	2134      	movs	r1, #52	; 0x34
 8004a9c:	f24b 6001 	movw	r0, #46593	; 0xb601
 8004aa0:	f7fd fd74 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 8004aa4:	2134      	movs	r1, #52	; 0x34
 8004aa6:	f24b 6002 	movw	r0, #46594	; 0xb602
 8004aaa:	f7fd fd6f 	bl	800258c <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 8004aae:	210d      	movs	r1, #13
 8004ab0:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8004ab4:	f7fd fd6a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 8004ab8:	210d      	movs	r1, #13
 8004aba:	f24b 1001 	movw	r0, #45313	; 0xb101
 8004abe:	f7fd fd65 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 8004ac2:	210d      	movs	r1, #13
 8004ac4:	f24b 1002 	movw	r0, #45314	; 0xb102
 8004ac8:	f7fd fd60 	bl	800258c <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 8004acc:	2134      	movs	r1, #52	; 0x34
 8004ace:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8004ad2:	f7fd fd5b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 8004ad6:	2134      	movs	r1, #52	; 0x34
 8004ad8:	f24b 7001 	movw	r0, #46849	; 0xb701
 8004adc:	f7fd fd56 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8004ae0:	2134      	movs	r1, #52	; 0x34
 8004ae2:	f24b 7002 	movw	r0, #46850	; 0xb702
 8004ae6:	f7fd fd51 	bl	800258c <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 8004aea:	2100      	movs	r1, #0
 8004aec:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8004af0:	f7fd fd4c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 8004af4:	2100      	movs	r1, #0
 8004af6:	f24b 2001 	movw	r0, #45569	; 0xb201
 8004afa:	f7fd fd47 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 8004afe:	2100      	movs	r1, #0
 8004b00:	f24b 2002 	movw	r0, #45570	; 0xb202
 8004b04:	f7fd fd42 	bl	800258c <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8004b08:	2124      	movs	r1, #36	; 0x24
 8004b0a:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8004b0e:	f7fd fd3d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 8004b12:	2124      	movs	r1, #36	; 0x24
 8004b14:	f64b 0001 	movw	r0, #47105	; 0xb801
 8004b18:	f7fd fd38 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 8004b1c:	2124      	movs	r1, #36	; 0x24
 8004b1e:	f64b 0002 	movw	r0, #47106	; 0xb802
 8004b22:	f7fd fd33 	bl	800258c <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 8004b26:	2101      	movs	r1, #1
 8004b28:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8004b2c:	f7fd fd2e 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8004b30:	210f      	movs	r1, #15
 8004b32:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8004b36:	f7fd fd29 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 8004b3a:	210f      	movs	r1, #15
 8004b3c:	f24b 3001 	movw	r0, #45825	; 0xb301
 8004b40:	f7fd fd24 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 8004b44:	210f      	movs	r1, #15
 8004b46:	f24b 3002 	movw	r0, #45826	; 0xb302
 8004b4a:	f7fd fd1f 	bl	800258c <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 8004b4e:	2134      	movs	r1, #52	; 0x34
 8004b50:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8004b54:	f7fd fd1a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8004b58:	2134      	movs	r1, #52	; 0x34
 8004b5a:	f64b 1001 	movw	r0, #47361	; 0xb901
 8004b5e:	f7fd fd15 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 8004b62:	2134      	movs	r1, #52	; 0x34
 8004b64:	f64b 1002 	movw	r0, #47362	; 0xb902
 8004b68:	f7fd fd10 	bl	800258c <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 8004b6c:	2108      	movs	r1, #8
 8004b6e:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8004b72:	f7fd fd0b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 8004b76:	2108      	movs	r1, #8
 8004b78:	f24b 5001 	movw	r0, #46337	; 0xb501
 8004b7c:	f7fd fd06 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 8004b80:	2108      	movs	r1, #8
 8004b82:	f24b 5002 	movw	r0, #46338	; 0xb502
 8004b86:	f7fd fd01 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 8004b8a:	2103      	movs	r1, #3
 8004b8c:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8004b90:	f7fd fcfc 	bl	800258c <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 8004b94:	2124      	movs	r1, #36	; 0x24
 8004b96:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8004b9a:	f7fd fcf7 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 8004b9e:	2124      	movs	r1, #36	; 0x24
 8004ba0:	f64b 2001 	movw	r0, #47617	; 0xba01
 8004ba4:	f7fd fcf2 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 8004ba8:	2124      	movs	r1, #36	; 0x24
 8004baa:	f64b 2002 	movw	r0, #47618	; 0xba02
 8004bae:	f7fd fced 	bl	800258c <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8004bb8:	f7fd fce8 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 8004bbc:	2178      	movs	r1, #120	; 0x78
 8004bbe:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8004bc2:	f7fd fce3 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004bcc:	f7fd fcde 	bl	800258c <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8004bd6:	f7fd fcd9 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 8004bda:	2178      	movs	r1, #120	; 0x78
 8004bdc:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8004be0:	f7fd fcd4 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 8004be4:	2100      	movs	r1, #0
 8004be6:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8004bea:	f7fd fccf 	bl	800258c <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 8004bee:	2100      	movs	r1, #0
 8004bf0:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8004bf4:	f7fd fcca 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8004bf8:	2164      	movs	r1, #100	; 0x64
 8004bfa:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8004bfe:	f7fd fcc5 	bl	800258c <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 8004c02:	2100      	movs	r1, #0
 8004c04:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8004c08:	f7fd fcc0 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 8004c0c:	2133      	movs	r1, #51	; 0x33
 8004c0e:	f24d 1001 	movw	r0, #53505	; 0xd101
 8004c12:	f7fd fcbb 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 8004c16:	2100      	movs	r1, #0
 8004c18:	f24d 1002 	movw	r0, #53506	; 0xd102
 8004c1c:	f7fd fcb6 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8004c20:	2134      	movs	r1, #52	; 0x34
 8004c22:	f24d 1003 	movw	r0, #53507	; 0xd103
 8004c26:	f7fd fcb1 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	f24d 1004 	movw	r0, #53508	; 0xd104
 8004c30:	f7fd fcac 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 8004c34:	213a      	movs	r1, #58	; 0x3a
 8004c36:	f24d 1005 	movw	r0, #53509	; 0xd105
 8004c3a:	f7fd fca7 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 8004c3e:	2100      	movs	r1, #0
 8004c40:	f24d 1006 	movw	r0, #53510	; 0xd106
 8004c44:	f7fd fca2 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8004c48:	214a      	movs	r1, #74	; 0x4a
 8004c4a:	f24d 1007 	movw	r0, #53511	; 0xd107
 8004c4e:	f7fd fc9d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 8004c52:	2100      	movs	r1, #0
 8004c54:	f24d 1008 	movw	r0, #53512	; 0xd108
 8004c58:	f7fd fc98 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 8004c5c:	215c      	movs	r1, #92	; 0x5c
 8004c5e:	f24d 1009 	movw	r0, #53513	; 0xd109
 8004c62:	f7fd fc93 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 8004c66:	2100      	movs	r1, #0
 8004c68:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8004c6c:	f7fd fc8e 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 8004c70:	2181      	movs	r1, #129	; 0x81
 8004c72:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8004c76:	f7fd fc89 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8004c80:	f7fd fc84 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 8004c84:	21a6      	movs	r1, #166	; 0xa6
 8004c86:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8004c8a:	f7fd fc7f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 8004c8e:	2100      	movs	r1, #0
 8004c90:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8004c94:	f7fd fc7a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 8004c98:	21e5      	movs	r1, #229	; 0xe5
 8004c9a:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8004c9e:	f7fd fc75 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	f24d 1010 	movw	r0, #53520	; 0xd110
 8004ca8:	f7fd fc70 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 8004cac:	2113      	movs	r1, #19
 8004cae:	f24d 1011 	movw	r0, #53521	; 0xd111
 8004cb2:	f7fd fc6b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	f24d 1012 	movw	r0, #53522	; 0xd112
 8004cbc:	f7fd fc66 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8004cc0:	2154      	movs	r1, #84	; 0x54
 8004cc2:	f24d 1013 	movw	r0, #53523	; 0xd113
 8004cc6:	f7fd fc61 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 8004cca:	2101      	movs	r1, #1
 8004ccc:	f24d 1014 	movw	r0, #53524	; 0xd114
 8004cd0:	f7fd fc5c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 8004cd4:	2182      	movs	r1, #130	; 0x82
 8004cd6:	f24d 1015 	movw	r0, #53525	; 0xd115
 8004cda:	f7fd fc57 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 8004cde:	2101      	movs	r1, #1
 8004ce0:	f24d 1016 	movw	r0, #53526	; 0xd116
 8004ce4:	f7fd fc52 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8004ce8:	21ca      	movs	r1, #202	; 0xca
 8004cea:	f24d 1017 	movw	r0, #53527	; 0xd117
 8004cee:	f7fd fc4d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 8004cf2:	2102      	movs	r1, #2
 8004cf4:	f24d 1018 	movw	r0, #53528	; 0xd118
 8004cf8:	f7fd fc48 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	f24d 1019 	movw	r0, #53529	; 0xd119
 8004d02:	f7fd fc43 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 8004d06:	2102      	movs	r1, #2
 8004d08:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8004d0c:	f7fd fc3e 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8004d10:	2101      	movs	r1, #1
 8004d12:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8004d16:	f7fd fc39 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 8004d1a:	2102      	movs	r1, #2
 8004d1c:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8004d20:	f7fd fc34 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 8004d24:	2134      	movs	r1, #52	; 0x34
 8004d26:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8004d2a:	f7fd fc2f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 8004d2e:	2102      	movs	r1, #2
 8004d30:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8004d34:	f7fd fc2a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8004d38:	2167      	movs	r1, #103	; 0x67
 8004d3a:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8004d3e:	f7fd fc25 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 8004d42:	2102      	movs	r1, #2
 8004d44:	f24d 1020 	movw	r0, #53536	; 0xd120
 8004d48:	f7fd fc20 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 8004d4c:	2184      	movs	r1, #132	; 0x84
 8004d4e:	f24d 1021 	movw	r0, #53537	; 0xd121
 8004d52:	f7fd fc1b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 8004d56:	2102      	movs	r1, #2
 8004d58:	f24d 1022 	movw	r0, #53538	; 0xd122
 8004d5c:	f7fd fc16 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 8004d60:	21a4      	movs	r1, #164	; 0xa4
 8004d62:	f24d 1023 	movw	r0, #53539	; 0xd123
 8004d66:	f7fd fc11 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 8004d6a:	2102      	movs	r1, #2
 8004d6c:	f24d 1024 	movw	r0, #53540	; 0xd124
 8004d70:	f7fd fc0c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 8004d74:	21b7      	movs	r1, #183	; 0xb7
 8004d76:	f24d 1025 	movw	r0, #53541	; 0xd125
 8004d7a:	f7fd fc07 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 8004d7e:	2102      	movs	r1, #2
 8004d80:	f24d 1026 	movw	r0, #53542	; 0xd126
 8004d84:	f7fd fc02 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 8004d88:	21cf      	movs	r1, #207	; 0xcf
 8004d8a:	f24d 1027 	movw	r0, #53543	; 0xd127
 8004d8e:	f7fd fbfd 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 8004d92:	2102      	movs	r1, #2
 8004d94:	f24d 1028 	movw	r0, #53544	; 0xd128
 8004d98:	f7fd fbf8 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 8004d9c:	21de      	movs	r1, #222	; 0xde
 8004d9e:	f24d 1029 	movw	r0, #53545	; 0xd129
 8004da2:	f7fd fbf3 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 8004da6:	2102      	movs	r1, #2
 8004da8:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8004dac:	f7fd fbee 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 8004db0:	21f2      	movs	r1, #242	; 0xf2
 8004db2:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8004db6:	f7fd fbe9 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 8004dba:	2102      	movs	r1, #2
 8004dbc:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8004dc0:	f7fd fbe4 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 8004dc4:	21fe      	movs	r1, #254	; 0xfe
 8004dc6:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8004dca:	f7fd fbdf 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 8004dce:	2103      	movs	r1, #3
 8004dd0:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8004dd4:	f7fd fbda 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8004dd8:	2110      	movs	r1, #16
 8004dda:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8004dde:	f7fd fbd5 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 8004de2:	2103      	movs	r1, #3
 8004de4:	f24d 1030 	movw	r0, #53552	; 0xd130
 8004de8:	f7fd fbd0 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 8004dec:	2133      	movs	r1, #51	; 0x33
 8004dee:	f24d 1031 	movw	r0, #53553	; 0xd131
 8004df2:	f7fd fbcb 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 8004df6:	2103      	movs	r1, #3
 8004df8:	f24d 1032 	movw	r0, #53554	; 0xd132
 8004dfc:	f7fd fbc6 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8004e00:	216d      	movs	r1, #109	; 0x6d
 8004e02:	f24d 1033 	movw	r0, #53555	; 0xd133
 8004e06:	f7fd fbc1 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8004e10:	f7fd fbbc 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 8004e14:	2133      	movs	r1, #51	; 0x33
 8004e16:	f24d 2001 	movw	r0, #53761	; 0xd201
 8004e1a:	f7fd fbb7 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 8004e1e:	2100      	movs	r1, #0
 8004e20:	f24d 2002 	movw	r0, #53762	; 0xd202
 8004e24:	f7fd fbb2 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8004e28:	2134      	movs	r1, #52	; 0x34
 8004e2a:	f24d 2003 	movw	r0, #53763	; 0xd203
 8004e2e:	f7fd fbad 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 8004e32:	2100      	movs	r1, #0
 8004e34:	f24d 2004 	movw	r0, #53764	; 0xd204
 8004e38:	f7fd fba8 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 8004e3c:	213a      	movs	r1, #58	; 0x3a
 8004e3e:	f24d 2005 	movw	r0, #53765	; 0xd205
 8004e42:	f7fd fba3 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 8004e46:	2100      	movs	r1, #0
 8004e48:	f24d 2006 	movw	r0, #53766	; 0xd206
 8004e4c:	f7fd fb9e 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8004e50:	214a      	movs	r1, #74	; 0x4a
 8004e52:	f24d 2007 	movw	r0, #53767	; 0xd207
 8004e56:	f7fd fb99 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	f24d 2008 	movw	r0, #53768	; 0xd208
 8004e60:	f7fd fb94 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 8004e64:	215c      	movs	r1, #92	; 0x5c
 8004e66:	f24d 2009 	movw	r0, #53769	; 0xd209
 8004e6a:	f7fd fb8f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 8004e6e:	2100      	movs	r1, #0
 8004e70:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8004e74:	f7fd fb8a 	bl	800258c <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8004e78:	2181      	movs	r1, #129	; 0x81
 8004e7a:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8004e7e:	f7fd fb85 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 8004e82:	2100      	movs	r1, #0
 8004e84:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8004e88:	f7fd fb80 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 8004e8c:	21a6      	movs	r1, #166	; 0xa6
 8004e8e:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8004e92:	f7fd fb7b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 8004e96:	2100      	movs	r1, #0
 8004e98:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8004e9c:	f7fd fb76 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8004ea0:	21e5      	movs	r1, #229	; 0xe5
 8004ea2:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8004ea6:	f7fd fb71 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 8004eaa:	2101      	movs	r1, #1
 8004eac:	f24d 2010 	movw	r0, #53776	; 0xd210
 8004eb0:	f7fd fb6c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 8004eb4:	2113      	movs	r1, #19
 8004eb6:	f24d 2011 	movw	r0, #53777	; 0xd211
 8004eba:	f7fd fb67 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	f24d 2012 	movw	r0, #53778	; 0xd212
 8004ec4:	f7fd fb62 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8004ec8:	2154      	movs	r1, #84	; 0x54
 8004eca:	f24d 2013 	movw	r0, #53779	; 0xd213
 8004ece:	f7fd fb5d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	f24d 2014 	movw	r0, #53780	; 0xd214
 8004ed8:	f7fd fb58 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 8004edc:	2182      	movs	r1, #130	; 0x82
 8004ede:	f24d 2015 	movw	r0, #53781	; 0xd215
 8004ee2:	f7fd fb53 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	f24d 2016 	movw	r0, #53782	; 0xd216
 8004eec:	f7fd fb4e 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8004ef0:	21ca      	movs	r1, #202	; 0xca
 8004ef2:	f24d 2017 	movw	r0, #53783	; 0xd217
 8004ef6:	f7fd fb49 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 8004efa:	2102      	movs	r1, #2
 8004efc:	f24d 2018 	movw	r0, #53784	; 0xd218
 8004f00:	f7fd fb44 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 8004f04:	2100      	movs	r1, #0
 8004f06:	f24d 2019 	movw	r0, #53785	; 0xd219
 8004f0a:	f7fd fb3f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 8004f0e:	2102      	movs	r1, #2
 8004f10:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8004f14:	f7fd fb3a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8004f18:	2101      	movs	r1, #1
 8004f1a:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8004f1e:	f7fd fb35 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 8004f22:	2102      	movs	r1, #2
 8004f24:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8004f28:	f7fd fb30 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 8004f2c:	2134      	movs	r1, #52	; 0x34
 8004f2e:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8004f32:	f7fd fb2b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 8004f36:	2102      	movs	r1, #2
 8004f38:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8004f3c:	f7fd fb26 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8004f40:	2167      	movs	r1, #103	; 0x67
 8004f42:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8004f46:	f7fd fb21 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 8004f4a:	2102      	movs	r1, #2
 8004f4c:	f24d 2020 	movw	r0, #53792	; 0xd220
 8004f50:	f7fd fb1c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 8004f54:	2184      	movs	r1, #132	; 0x84
 8004f56:	f24d 2021 	movw	r0, #53793	; 0xd221
 8004f5a:	f7fd fb17 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 8004f5e:	2102      	movs	r1, #2
 8004f60:	f24d 2022 	movw	r0, #53794	; 0xd222
 8004f64:	f7fd fb12 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8004f68:	21a4      	movs	r1, #164	; 0xa4
 8004f6a:	f24d 2023 	movw	r0, #53795	; 0xd223
 8004f6e:	f7fd fb0d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 8004f72:	2102      	movs	r1, #2
 8004f74:	f24d 2024 	movw	r0, #53796	; 0xd224
 8004f78:	f7fd fb08 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 8004f7c:	21b7      	movs	r1, #183	; 0xb7
 8004f7e:	f24d 2025 	movw	r0, #53797	; 0xd225
 8004f82:	f7fd fb03 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 8004f86:	2102      	movs	r1, #2
 8004f88:	f24d 2026 	movw	r0, #53798	; 0xd226
 8004f8c:	f7fd fafe 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8004f90:	21cf      	movs	r1, #207	; 0xcf
 8004f92:	f24d 2027 	movw	r0, #53799	; 0xd227
 8004f96:	f7fd faf9 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 8004f9a:	2102      	movs	r1, #2
 8004f9c:	f24d 2028 	movw	r0, #53800	; 0xd228
 8004fa0:	f7fd faf4 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 8004fa4:	21de      	movs	r1, #222	; 0xde
 8004fa6:	f24d 2029 	movw	r0, #53801	; 0xd229
 8004faa:	f7fd faef 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 8004fae:	2102      	movs	r1, #2
 8004fb0:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8004fb4:	f7fd faea 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8004fb8:	21f2      	movs	r1, #242	; 0xf2
 8004fba:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8004fbe:	f7fd fae5 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 8004fc2:	2102      	movs	r1, #2
 8004fc4:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8004fc8:	f7fd fae0 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 8004fcc:	21fe      	movs	r1, #254	; 0xfe
 8004fce:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8004fd2:	f7fd fadb 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8004fd6:	2103      	movs	r1, #3
 8004fd8:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8004fdc:	f7fd fad6 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8004fe0:	2110      	movs	r1, #16
 8004fe2:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8004fe6:	f7fd fad1 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 8004fea:	2103      	movs	r1, #3
 8004fec:	f24d 2030 	movw	r0, #53808	; 0xd230
 8004ff0:	f7fd facc 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8004ff4:	2133      	movs	r1, #51	; 0x33
 8004ff6:	f24d 2031 	movw	r0, #53809	; 0xd231
 8004ffa:	f7fd fac7 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 8004ffe:	2103      	movs	r1, #3
 8005000:	f24d 2032 	movw	r0, #53810	; 0xd232
 8005004:	f7fd fac2 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8005008:	216d      	movs	r1, #109	; 0x6d
 800500a:	f24d 2033 	movw	r0, #53811	; 0xd233
 800500e:	f7fd fabd 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8005012:	2100      	movs	r1, #0
 8005014:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8005018:	f7fd fab8 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 800501c:	2133      	movs	r1, #51	; 0x33
 800501e:	f24d 3001 	movw	r0, #54017	; 0xd301
 8005022:	f7fd fab3 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 8005026:	2100      	movs	r1, #0
 8005028:	f24d 3002 	movw	r0, #54018	; 0xd302
 800502c:	f7fd faae 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8005030:	2134      	movs	r1, #52	; 0x34
 8005032:	f24d 3003 	movw	r0, #54019	; 0xd303
 8005036:	f7fd faa9 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 800503a:	2100      	movs	r1, #0
 800503c:	f24d 3004 	movw	r0, #54020	; 0xd304
 8005040:	f7fd faa4 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 8005044:	213a      	movs	r1, #58	; 0x3a
 8005046:	f24d 3005 	movw	r0, #54021	; 0xd305
 800504a:	f7fd fa9f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 800504e:	2100      	movs	r1, #0
 8005050:	f24d 3006 	movw	r0, #54022	; 0xd306
 8005054:	f7fd fa9a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8005058:	214a      	movs	r1, #74	; 0x4a
 800505a:	f24d 3007 	movw	r0, #54023	; 0xd307
 800505e:	f7fd fa95 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 8005062:	2100      	movs	r1, #0
 8005064:	f24d 3008 	movw	r0, #54024	; 0xd308
 8005068:	f7fd fa90 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 800506c:	215c      	movs	r1, #92	; 0x5c
 800506e:	f24d 3009 	movw	r0, #54025	; 0xd309
 8005072:	f7fd fa8b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 8005076:	2100      	movs	r1, #0
 8005078:	f24d 300a 	movw	r0, #54026	; 0xd30a
 800507c:	f7fd fa86 	bl	800258c <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8005080:	2181      	movs	r1, #129	; 0x81
 8005082:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8005086:	f7fd fa81 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 800508a:	2100      	movs	r1, #0
 800508c:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8005090:	f7fd fa7c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8005094:	21a6      	movs	r1, #166	; 0xa6
 8005096:	f24d 300d 	movw	r0, #54029	; 0xd30d
 800509a:	f7fd fa77 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 800509e:	2100      	movs	r1, #0
 80050a0:	f24d 300e 	movw	r0, #54030	; 0xd30e
 80050a4:	f7fd fa72 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 80050a8:	21e5      	movs	r1, #229	; 0xe5
 80050aa:	f24d 300f 	movw	r0, #54031	; 0xd30f
 80050ae:	f7fd fa6d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 80050b2:	2101      	movs	r1, #1
 80050b4:	f24d 3010 	movw	r0, #54032	; 0xd310
 80050b8:	f7fd fa68 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 80050bc:	2113      	movs	r1, #19
 80050be:	f24d 3011 	movw	r0, #54033	; 0xd311
 80050c2:	f7fd fa63 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 80050c6:	2101      	movs	r1, #1
 80050c8:	f24d 3012 	movw	r0, #54034	; 0xd312
 80050cc:	f7fd fa5e 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 80050d0:	2154      	movs	r1, #84	; 0x54
 80050d2:	f24d 3013 	movw	r0, #54035	; 0xd313
 80050d6:	f7fd fa59 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 80050da:	2101      	movs	r1, #1
 80050dc:	f24d 3014 	movw	r0, #54036	; 0xd314
 80050e0:	f7fd fa54 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 80050e4:	2182      	movs	r1, #130	; 0x82
 80050e6:	f24d 3015 	movw	r0, #54037	; 0xd315
 80050ea:	f7fd fa4f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 80050ee:	2101      	movs	r1, #1
 80050f0:	f24d 3016 	movw	r0, #54038	; 0xd316
 80050f4:	f7fd fa4a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 80050f8:	21ca      	movs	r1, #202	; 0xca
 80050fa:	f24d 3017 	movw	r0, #54039	; 0xd317
 80050fe:	f7fd fa45 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8005102:	2102      	movs	r1, #2
 8005104:	f24d 3018 	movw	r0, #54040	; 0xd318
 8005108:	f7fd fa40 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 800510c:	2100      	movs	r1, #0
 800510e:	f24d 3019 	movw	r0, #54041	; 0xd319
 8005112:	f7fd fa3b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8005116:	2102      	movs	r1, #2
 8005118:	f24d 301a 	movw	r0, #54042	; 0xd31a
 800511c:	f7fd fa36 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8005120:	2101      	movs	r1, #1
 8005122:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8005126:	f7fd fa31 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 800512a:	2102      	movs	r1, #2
 800512c:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8005130:	f7fd fa2c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8005134:	2134      	movs	r1, #52	; 0x34
 8005136:	f24d 301d 	movw	r0, #54045	; 0xd31d
 800513a:	f7fd fa27 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 800513e:	2102      	movs	r1, #2
 8005140:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8005144:	f7fd fa22 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8005148:	2167      	movs	r1, #103	; 0x67
 800514a:	f24d 301f 	movw	r0, #54047	; 0xd31f
 800514e:	f7fd fa1d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8005152:	2102      	movs	r1, #2
 8005154:	f24d 3020 	movw	r0, #54048	; 0xd320
 8005158:	f7fd fa18 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 800515c:	2184      	movs	r1, #132	; 0x84
 800515e:	f24d 3021 	movw	r0, #54049	; 0xd321
 8005162:	f7fd fa13 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8005166:	2102      	movs	r1, #2
 8005168:	f24d 3022 	movw	r0, #54050	; 0xd322
 800516c:	f7fd fa0e 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8005170:	21a4      	movs	r1, #164	; 0xa4
 8005172:	f24d 3023 	movw	r0, #54051	; 0xd323
 8005176:	f7fd fa09 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 800517a:	2102      	movs	r1, #2
 800517c:	f24d 3024 	movw	r0, #54052	; 0xd324
 8005180:	f7fd fa04 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8005184:	21b7      	movs	r1, #183	; 0xb7
 8005186:	f24d 3025 	movw	r0, #54053	; 0xd325
 800518a:	f7fd f9ff 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 800518e:	2102      	movs	r1, #2
 8005190:	f24d 3026 	movw	r0, #54054	; 0xd326
 8005194:	f7fd f9fa 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8005198:	21cf      	movs	r1, #207	; 0xcf
 800519a:	f24d 3027 	movw	r0, #54055	; 0xd327
 800519e:	f7fd f9f5 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 80051a2:	2102      	movs	r1, #2
 80051a4:	f24d 3028 	movw	r0, #54056	; 0xd328
 80051a8:	f7fd f9f0 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 80051ac:	21de      	movs	r1, #222	; 0xde
 80051ae:	f24d 3029 	movw	r0, #54057	; 0xd329
 80051b2:	f7fd f9eb 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 80051b6:	2102      	movs	r1, #2
 80051b8:	f24d 302a 	movw	r0, #54058	; 0xd32a
 80051bc:	f7fd f9e6 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 80051c0:	21f2      	movs	r1, #242	; 0xf2
 80051c2:	f24d 302b 	movw	r0, #54059	; 0xd32b
 80051c6:	f7fd f9e1 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 80051ca:	2102      	movs	r1, #2
 80051cc:	f24d 302c 	movw	r0, #54060	; 0xd32c
 80051d0:	f7fd f9dc 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 80051d4:	21fe      	movs	r1, #254	; 0xfe
 80051d6:	f24d 302d 	movw	r0, #54061	; 0xd32d
 80051da:	f7fd f9d7 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 80051de:	2103      	movs	r1, #3
 80051e0:	f24d 302e 	movw	r0, #54062	; 0xd32e
 80051e4:	f7fd f9d2 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 80051e8:	2110      	movs	r1, #16
 80051ea:	f24d 302f 	movw	r0, #54063	; 0xd32f
 80051ee:	f7fd f9cd 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 80051f2:	2103      	movs	r1, #3
 80051f4:	f24d 3030 	movw	r0, #54064	; 0xd330
 80051f8:	f7fd f9c8 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 80051fc:	2133      	movs	r1, #51	; 0x33
 80051fe:	f24d 3031 	movw	r0, #54065	; 0xd331
 8005202:	f7fd f9c3 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8005206:	2103      	movs	r1, #3
 8005208:	f24d 3032 	movw	r0, #54066	; 0xd332
 800520c:	f7fd f9be 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8005210:	216d      	movs	r1, #109	; 0x6d
 8005212:	f24d 3033 	movw	r0, #54067	; 0xd333
 8005216:	f7fd f9b9 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 800521a:	2100      	movs	r1, #0
 800521c:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8005220:	f7fd f9b4 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8005224:	2133      	movs	r1, #51	; 0x33
 8005226:	f24d 4001 	movw	r0, #54273	; 0xd401
 800522a:	f7fd f9af 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 800522e:	2100      	movs	r1, #0
 8005230:	f24d 4002 	movw	r0, #54274	; 0xd402
 8005234:	f7fd f9aa 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8005238:	2134      	movs	r1, #52	; 0x34
 800523a:	f24d 4003 	movw	r0, #54275	; 0xd403
 800523e:	f7fd f9a5 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8005242:	2100      	movs	r1, #0
 8005244:	f24d 4004 	movw	r0, #54276	; 0xd404
 8005248:	f7fd f9a0 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 800524c:	213a      	movs	r1, #58	; 0x3a
 800524e:	f24d 4005 	movw	r0, #54277	; 0xd405
 8005252:	f7fd f99b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8005256:	2100      	movs	r1, #0
 8005258:	f24d 4006 	movw	r0, #54278	; 0xd406
 800525c:	f7fd f996 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8005260:	214a      	movs	r1, #74	; 0x4a
 8005262:	f24d 4007 	movw	r0, #54279	; 0xd407
 8005266:	f7fd f991 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 800526a:	2100      	movs	r1, #0
 800526c:	f24d 4008 	movw	r0, #54280	; 0xd408
 8005270:	f7fd f98c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8005274:	215c      	movs	r1, #92	; 0x5c
 8005276:	f24d 4009 	movw	r0, #54281	; 0xd409
 800527a:	f7fd f987 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 800527e:	2100      	movs	r1, #0
 8005280:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8005284:	f7fd f982 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8005288:	2181      	movs	r1, #129	; 0x81
 800528a:	f24d 400b 	movw	r0, #54283	; 0xd40b
 800528e:	f7fd f97d 	bl	800258c <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8005292:	2100      	movs	r1, #0
 8005294:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8005298:	f7fd f978 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 800529c:	21a6      	movs	r1, #166	; 0xa6
 800529e:	f24d 400d 	movw	r0, #54285	; 0xd40d
 80052a2:	f7fd f973 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 80052a6:	2100      	movs	r1, #0
 80052a8:	f24d 400e 	movw	r0, #54286	; 0xd40e
 80052ac:	f7fd f96e 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 80052b0:	21e5      	movs	r1, #229	; 0xe5
 80052b2:	f24d 400f 	movw	r0, #54287	; 0xd40f
 80052b6:	f7fd f969 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 80052ba:	2101      	movs	r1, #1
 80052bc:	f24d 4010 	movw	r0, #54288	; 0xd410
 80052c0:	f7fd f964 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 80052c4:	2113      	movs	r1, #19
 80052c6:	f24d 4011 	movw	r0, #54289	; 0xd411
 80052ca:	f7fd f95f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 80052ce:	2101      	movs	r1, #1
 80052d0:	f24d 4012 	movw	r0, #54290	; 0xd412
 80052d4:	f7fd f95a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 80052d8:	2154      	movs	r1, #84	; 0x54
 80052da:	f24d 4013 	movw	r0, #54291	; 0xd413
 80052de:	f7fd f955 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 80052e2:	2101      	movs	r1, #1
 80052e4:	f24d 4014 	movw	r0, #54292	; 0xd414
 80052e8:	f7fd f950 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 80052ec:	2182      	movs	r1, #130	; 0x82
 80052ee:	f24d 4015 	movw	r0, #54293	; 0xd415
 80052f2:	f7fd f94b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 80052f6:	2101      	movs	r1, #1
 80052f8:	f24d 4016 	movw	r0, #54294	; 0xd416
 80052fc:	f7fd f946 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8005300:	21ca      	movs	r1, #202	; 0xca
 8005302:	f24d 4017 	movw	r0, #54295	; 0xd417
 8005306:	f7fd f941 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 800530a:	2102      	movs	r1, #2
 800530c:	f24d 4018 	movw	r0, #54296	; 0xd418
 8005310:	f7fd f93c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8005314:	2100      	movs	r1, #0
 8005316:	f24d 4019 	movw	r0, #54297	; 0xd419
 800531a:	f7fd f937 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 800531e:	2102      	movs	r1, #2
 8005320:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8005324:	f7fd f932 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8005328:	2101      	movs	r1, #1
 800532a:	f24d 401b 	movw	r0, #54299	; 0xd41b
 800532e:	f7fd f92d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8005332:	2102      	movs	r1, #2
 8005334:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8005338:	f7fd f928 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 800533c:	2134      	movs	r1, #52	; 0x34
 800533e:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8005342:	f7fd f923 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8005346:	2102      	movs	r1, #2
 8005348:	f24d 401e 	movw	r0, #54302	; 0xd41e
 800534c:	f7fd f91e 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8005350:	2167      	movs	r1, #103	; 0x67
 8005352:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8005356:	f7fd f919 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 800535a:	2102      	movs	r1, #2
 800535c:	f24d 4020 	movw	r0, #54304	; 0xd420
 8005360:	f7fd f914 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8005364:	2184      	movs	r1, #132	; 0x84
 8005366:	f24d 4021 	movw	r0, #54305	; 0xd421
 800536a:	f7fd f90f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 800536e:	2102      	movs	r1, #2
 8005370:	f24d 4022 	movw	r0, #54306	; 0xd422
 8005374:	f7fd f90a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8005378:	21a4      	movs	r1, #164	; 0xa4
 800537a:	f24d 4023 	movw	r0, #54307	; 0xd423
 800537e:	f7fd f905 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8005382:	2102      	movs	r1, #2
 8005384:	f24d 4024 	movw	r0, #54308	; 0xd424
 8005388:	f7fd f900 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 800538c:	21b7      	movs	r1, #183	; 0xb7
 800538e:	f24d 4025 	movw	r0, #54309	; 0xd425
 8005392:	f7fd f8fb 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8005396:	2102      	movs	r1, #2
 8005398:	f24d 4026 	movw	r0, #54310	; 0xd426
 800539c:	f7fd f8f6 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 80053a0:	21cf      	movs	r1, #207	; 0xcf
 80053a2:	f24d 4027 	movw	r0, #54311	; 0xd427
 80053a6:	f7fd f8f1 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 80053aa:	2102      	movs	r1, #2
 80053ac:	f24d 4028 	movw	r0, #54312	; 0xd428
 80053b0:	f7fd f8ec 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 80053b4:	21de      	movs	r1, #222	; 0xde
 80053b6:	f24d 4029 	movw	r0, #54313	; 0xd429
 80053ba:	f7fd f8e7 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 80053be:	2102      	movs	r1, #2
 80053c0:	f24d 402a 	movw	r0, #54314	; 0xd42a
 80053c4:	f7fd f8e2 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 80053c8:	21f2      	movs	r1, #242	; 0xf2
 80053ca:	f24d 402b 	movw	r0, #54315	; 0xd42b
 80053ce:	f7fd f8dd 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 80053d2:	2102      	movs	r1, #2
 80053d4:	f24d 402c 	movw	r0, #54316	; 0xd42c
 80053d8:	f7fd f8d8 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 80053dc:	21fe      	movs	r1, #254	; 0xfe
 80053de:	f24d 402d 	movw	r0, #54317	; 0xd42d
 80053e2:	f7fd f8d3 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 80053e6:	2103      	movs	r1, #3
 80053e8:	f24d 402e 	movw	r0, #54318	; 0xd42e
 80053ec:	f7fd f8ce 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 80053f0:	2110      	movs	r1, #16
 80053f2:	f24d 402f 	movw	r0, #54319	; 0xd42f
 80053f6:	f7fd f8c9 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 80053fa:	2103      	movs	r1, #3
 80053fc:	f24d 4030 	movw	r0, #54320	; 0xd430
 8005400:	f7fd f8c4 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8005404:	2133      	movs	r1, #51	; 0x33
 8005406:	f24d 4031 	movw	r0, #54321	; 0xd431
 800540a:	f7fd f8bf 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 800540e:	2103      	movs	r1, #3
 8005410:	f24d 4032 	movw	r0, #54322	; 0xd432
 8005414:	f7fd f8ba 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8005418:	216d      	movs	r1, #109	; 0x6d
 800541a:	f24d 4033 	movw	r0, #54323	; 0xd433
 800541e:	f7fd f8b5 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 8005422:	2100      	movs	r1, #0
 8005424:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8005428:	f7fd f8b0 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 800542c:	2133      	movs	r1, #51	; 0x33
 800542e:	f24d 5001 	movw	r0, #54529	; 0xd501
 8005432:	f7fd f8ab 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 8005436:	2100      	movs	r1, #0
 8005438:	f24d 5002 	movw	r0, #54530	; 0xd502
 800543c:	f7fd f8a6 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8005440:	2134      	movs	r1, #52	; 0x34
 8005442:	f24d 5003 	movw	r0, #54531	; 0xd503
 8005446:	f7fd f8a1 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 800544a:	2100      	movs	r1, #0
 800544c:	f24d 5004 	movw	r0, #54532	; 0xd504
 8005450:	f7fd f89c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8005454:	213a      	movs	r1, #58	; 0x3a
 8005456:	f24d 5005 	movw	r0, #54533	; 0xd505
 800545a:	f7fd f897 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 800545e:	2100      	movs	r1, #0
 8005460:	f24d 5006 	movw	r0, #54534	; 0xd506
 8005464:	f7fd f892 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8005468:	214a      	movs	r1, #74	; 0x4a
 800546a:	f24d 5007 	movw	r0, #54535	; 0xd507
 800546e:	f7fd f88d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 8005472:	2100      	movs	r1, #0
 8005474:	f24d 5008 	movw	r0, #54536	; 0xd508
 8005478:	f7fd f888 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 800547c:	215c      	movs	r1, #92	; 0x5c
 800547e:	f24d 5009 	movw	r0, #54537	; 0xd509
 8005482:	f7fd f883 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 8005486:	2100      	movs	r1, #0
 8005488:	f24d 500a 	movw	r0, #54538	; 0xd50a
 800548c:	f7fd f87e 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8005490:	2181      	movs	r1, #129	; 0x81
 8005492:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8005496:	f7fd f879 	bl	800258c <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 800549a:	2100      	movs	r1, #0
 800549c:	f24d 500c 	movw	r0, #54540	; 0xd50c
 80054a0:	f7fd f874 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 80054a4:	21a6      	movs	r1, #166	; 0xa6
 80054a6:	f24d 500d 	movw	r0, #54541	; 0xd50d
 80054aa:	f7fd f86f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 80054ae:	2100      	movs	r1, #0
 80054b0:	f24d 500e 	movw	r0, #54542	; 0xd50e
 80054b4:	f7fd f86a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 80054b8:	21e5      	movs	r1, #229	; 0xe5
 80054ba:	f24d 500f 	movw	r0, #54543	; 0xd50f
 80054be:	f7fd f865 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 80054c2:	2101      	movs	r1, #1
 80054c4:	f24d 5010 	movw	r0, #54544	; 0xd510
 80054c8:	f7fd f860 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 80054cc:	2113      	movs	r1, #19
 80054ce:	f24d 5011 	movw	r0, #54545	; 0xd511
 80054d2:	f7fd f85b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 80054d6:	2101      	movs	r1, #1
 80054d8:	f24d 5012 	movw	r0, #54546	; 0xd512
 80054dc:	f7fd f856 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 80054e0:	2154      	movs	r1, #84	; 0x54
 80054e2:	f24d 5013 	movw	r0, #54547	; 0xd513
 80054e6:	f7fd f851 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 80054ea:	2101      	movs	r1, #1
 80054ec:	f24d 5014 	movw	r0, #54548	; 0xd514
 80054f0:	f7fd f84c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 80054f4:	2182      	movs	r1, #130	; 0x82
 80054f6:	f24d 5015 	movw	r0, #54549	; 0xd515
 80054fa:	f7fd f847 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 80054fe:	2101      	movs	r1, #1
 8005500:	f24d 5016 	movw	r0, #54550	; 0xd516
 8005504:	f7fd f842 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8005508:	21ca      	movs	r1, #202	; 0xca
 800550a:	f24d 5017 	movw	r0, #54551	; 0xd517
 800550e:	f7fd f83d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8005512:	2102      	movs	r1, #2
 8005514:	f24d 5018 	movw	r0, #54552	; 0xd518
 8005518:	f7fd f838 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 800551c:	2100      	movs	r1, #0
 800551e:	f24d 5019 	movw	r0, #54553	; 0xd519
 8005522:	f7fd f833 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 8005526:	2102      	movs	r1, #2
 8005528:	f24d 501a 	movw	r0, #54554	; 0xd51a
 800552c:	f7fd f82e 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8005530:	2101      	movs	r1, #1
 8005532:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8005536:	f7fd f829 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 800553a:	2102      	movs	r1, #2
 800553c:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8005540:	f7fd f824 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8005544:	2134      	movs	r1, #52	; 0x34
 8005546:	f24d 501d 	movw	r0, #54557	; 0xd51d
 800554a:	f7fd f81f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 800554e:	2102      	movs	r1, #2
 8005550:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8005554:	f7fd f81a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8005558:	2167      	movs	r1, #103	; 0x67
 800555a:	f24d 501f 	movw	r0, #54559	; 0xd51f
 800555e:	f7fd f815 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 8005562:	2102      	movs	r1, #2
 8005564:	f24d 5020 	movw	r0, #54560	; 0xd520
 8005568:	f7fd f810 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 800556c:	2184      	movs	r1, #132	; 0x84
 800556e:	f24d 5021 	movw	r0, #54561	; 0xd521
 8005572:	f7fd f80b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 8005576:	2102      	movs	r1, #2
 8005578:	f24d 5022 	movw	r0, #54562	; 0xd522
 800557c:	f7fd f806 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8005580:	21a4      	movs	r1, #164	; 0xa4
 8005582:	f24d 5023 	movw	r0, #54563	; 0xd523
 8005586:	f7fd f801 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 800558a:	2102      	movs	r1, #2
 800558c:	f24d 5024 	movw	r0, #54564	; 0xd524
 8005590:	f7fc fffc 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 8005594:	21b7      	movs	r1, #183	; 0xb7
 8005596:	f24d 5025 	movw	r0, #54565	; 0xd525
 800559a:	f7fc fff7 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 800559e:	2102      	movs	r1, #2
 80055a0:	f24d 5026 	movw	r0, #54566	; 0xd526
 80055a4:	f7fc fff2 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 80055a8:	21cf      	movs	r1, #207	; 0xcf
 80055aa:	f24d 5027 	movw	r0, #54567	; 0xd527
 80055ae:	f7fc ffed 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 80055b2:	2102      	movs	r1, #2
 80055b4:	f24d 5028 	movw	r0, #54568	; 0xd528
 80055b8:	f7fc ffe8 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 80055bc:	21de      	movs	r1, #222	; 0xde
 80055be:	f24d 5029 	movw	r0, #54569	; 0xd529
 80055c2:	f7fc ffe3 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 80055c6:	2102      	movs	r1, #2
 80055c8:	f24d 502a 	movw	r0, #54570	; 0xd52a
 80055cc:	f7fc ffde 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 80055d0:	21f2      	movs	r1, #242	; 0xf2
 80055d2:	f24d 502b 	movw	r0, #54571	; 0xd52b
 80055d6:	f7fc ffd9 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 80055da:	2102      	movs	r1, #2
 80055dc:	f24d 502c 	movw	r0, #54572	; 0xd52c
 80055e0:	f7fc ffd4 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 80055e4:	21fe      	movs	r1, #254	; 0xfe
 80055e6:	f24d 502d 	movw	r0, #54573	; 0xd52d
 80055ea:	f7fc ffcf 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 80055ee:	2103      	movs	r1, #3
 80055f0:	f24d 502e 	movw	r0, #54574	; 0xd52e
 80055f4:	f7fc ffca 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 80055f8:	2110      	movs	r1, #16
 80055fa:	f24d 502f 	movw	r0, #54575	; 0xd52f
 80055fe:	f7fc ffc5 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 8005602:	2103      	movs	r1, #3
 8005604:	f24d 5030 	movw	r0, #54576	; 0xd530
 8005608:	f7fc ffc0 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 800560c:	2133      	movs	r1, #51	; 0x33
 800560e:	f24d 5031 	movw	r0, #54577	; 0xd531
 8005612:	f7fc ffbb 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 8005616:	2103      	movs	r1, #3
 8005618:	f24d 5032 	movw	r0, #54578	; 0xd532
 800561c:	f7fc ffb6 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8005620:	216d      	movs	r1, #109	; 0x6d
 8005622:	f24d 5033 	movw	r0, #54579	; 0xd533
 8005626:	f7fc ffb1 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 800562a:	2100      	movs	r1, #0
 800562c:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8005630:	f7fc ffac 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 8005634:	2133      	movs	r1, #51	; 0x33
 8005636:	f24d 6001 	movw	r0, #54785	; 0xd601
 800563a:	f7fc ffa7 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 800563e:	2100      	movs	r1, #0
 8005640:	f24d 6002 	movw	r0, #54786	; 0xd602
 8005644:	f7fc ffa2 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8005648:	2134      	movs	r1, #52	; 0x34
 800564a:	f24d 6003 	movw	r0, #54787	; 0xd603
 800564e:	f7fc ff9d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 8005652:	2100      	movs	r1, #0
 8005654:	f24d 6004 	movw	r0, #54788	; 0xd604
 8005658:	f7fc ff98 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 800565c:	213a      	movs	r1, #58	; 0x3a
 800565e:	f24d 6005 	movw	r0, #54789	; 0xd605
 8005662:	f7fc ff93 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 8005666:	2100      	movs	r1, #0
 8005668:	f24d 6006 	movw	r0, #54790	; 0xd606
 800566c:	f7fc ff8e 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 8005670:	214a      	movs	r1, #74	; 0x4a
 8005672:	f24d 6007 	movw	r0, #54791	; 0xd607
 8005676:	f7fc ff89 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 800567a:	2100      	movs	r1, #0
 800567c:	f24d 6008 	movw	r0, #54792	; 0xd608
 8005680:	f7fc ff84 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 8005684:	215c      	movs	r1, #92	; 0x5c
 8005686:	f24d 6009 	movw	r0, #54793	; 0xd609
 800568a:	f7fc ff7f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 800568e:	2100      	movs	r1, #0
 8005690:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8005694:	f7fc ff7a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 8005698:	2181      	movs	r1, #129	; 0x81
 800569a:	f24d 600b 	movw	r0, #54795	; 0xd60b
 800569e:	f7fc ff75 	bl	800258c <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 80056a2:	2100      	movs	r1, #0
 80056a4:	f24d 600c 	movw	r0, #54796	; 0xd60c
 80056a8:	f7fc ff70 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 80056ac:	21a6      	movs	r1, #166	; 0xa6
 80056ae:	f24d 600d 	movw	r0, #54797	; 0xd60d
 80056b2:	f7fc ff6b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 80056b6:	2100      	movs	r1, #0
 80056b8:	f24d 600e 	movw	r0, #54798	; 0xd60e
 80056bc:	f7fc ff66 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 80056c0:	21e5      	movs	r1, #229	; 0xe5
 80056c2:	f24d 600f 	movw	r0, #54799	; 0xd60f
 80056c6:	f7fc ff61 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 80056ca:	2101      	movs	r1, #1
 80056cc:	f24d 6010 	movw	r0, #54800	; 0xd610
 80056d0:	f7fc ff5c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 80056d4:	2113      	movs	r1, #19
 80056d6:	f24d 6011 	movw	r0, #54801	; 0xd611
 80056da:	f7fc ff57 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 80056de:	2101      	movs	r1, #1
 80056e0:	f24d 6012 	movw	r0, #54802	; 0xd612
 80056e4:	f7fc ff52 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 80056e8:	2154      	movs	r1, #84	; 0x54
 80056ea:	f24d 6013 	movw	r0, #54803	; 0xd613
 80056ee:	f7fc ff4d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 80056f2:	2101      	movs	r1, #1
 80056f4:	f24d 6014 	movw	r0, #54804	; 0xd614
 80056f8:	f7fc ff48 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 80056fc:	2182      	movs	r1, #130	; 0x82
 80056fe:	f24d 6015 	movw	r0, #54805	; 0xd615
 8005702:	f7fc ff43 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 8005706:	2101      	movs	r1, #1
 8005708:	f24d 6016 	movw	r0, #54806	; 0xd616
 800570c:	f7fc ff3e 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8005710:	21ca      	movs	r1, #202	; 0xca
 8005712:	f24d 6017 	movw	r0, #54807	; 0xd617
 8005716:	f7fc ff39 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 800571a:	2102      	movs	r1, #2
 800571c:	f24d 6018 	movw	r0, #54808	; 0xd618
 8005720:	f7fc ff34 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 8005724:	2100      	movs	r1, #0
 8005726:	f24d 6019 	movw	r0, #54809	; 0xd619
 800572a:	f7fc ff2f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 800572e:	2102      	movs	r1, #2
 8005730:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8005734:	f7fc ff2a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8005738:	2101      	movs	r1, #1
 800573a:	f24d 601b 	movw	r0, #54811	; 0xd61b
 800573e:	f7fc ff25 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 8005742:	2102      	movs	r1, #2
 8005744:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8005748:	f7fc ff20 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 800574c:	2134      	movs	r1, #52	; 0x34
 800574e:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8005752:	f7fc ff1b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 8005756:	2102      	movs	r1, #2
 8005758:	f24d 601e 	movw	r0, #54814	; 0xd61e
 800575c:	f7fc ff16 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8005760:	2167      	movs	r1, #103	; 0x67
 8005762:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8005766:	f7fc ff11 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 800576a:	2102      	movs	r1, #2
 800576c:	f24d 6020 	movw	r0, #54816	; 0xd620
 8005770:	f7fc ff0c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 8005774:	2184      	movs	r1, #132	; 0x84
 8005776:	f24d 6021 	movw	r0, #54817	; 0xd621
 800577a:	f7fc ff07 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 800577e:	2102      	movs	r1, #2
 8005780:	f24d 6022 	movw	r0, #54818	; 0xd622
 8005784:	f7fc ff02 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 8005788:	21a4      	movs	r1, #164	; 0xa4
 800578a:	f24d 6023 	movw	r0, #54819	; 0xd623
 800578e:	f7fc fefd 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 8005792:	2102      	movs	r1, #2
 8005794:	f24d 6024 	movw	r0, #54820	; 0xd624
 8005798:	f7fc fef8 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 800579c:	21b7      	movs	r1, #183	; 0xb7
 800579e:	f24d 6025 	movw	r0, #54821	; 0xd625
 80057a2:	f7fc fef3 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 80057a6:	2102      	movs	r1, #2
 80057a8:	f24d 6026 	movw	r0, #54822	; 0xd626
 80057ac:	f7fc feee 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 80057b0:	21cf      	movs	r1, #207	; 0xcf
 80057b2:	f24d 6027 	movw	r0, #54823	; 0xd627
 80057b6:	f7fc fee9 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 80057ba:	2102      	movs	r1, #2
 80057bc:	f24d 6028 	movw	r0, #54824	; 0xd628
 80057c0:	f7fc fee4 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 80057c4:	21de      	movs	r1, #222	; 0xde
 80057c6:	f24d 6029 	movw	r0, #54825	; 0xd629
 80057ca:	f7fc fedf 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 80057ce:	2102      	movs	r1, #2
 80057d0:	f24d 602a 	movw	r0, #54826	; 0xd62a
 80057d4:	f7fc feda 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 80057d8:	21f2      	movs	r1, #242	; 0xf2
 80057da:	f24d 602b 	movw	r0, #54827	; 0xd62b
 80057de:	f7fc fed5 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 80057e2:	2102      	movs	r1, #2
 80057e4:	f24d 602c 	movw	r0, #54828	; 0xd62c
 80057e8:	f7fc fed0 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 80057ec:	21fe      	movs	r1, #254	; 0xfe
 80057ee:	f24d 602d 	movw	r0, #54829	; 0xd62d
 80057f2:	f7fc fecb 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 80057f6:	2103      	movs	r1, #3
 80057f8:	f24d 602e 	movw	r0, #54830	; 0xd62e
 80057fc:	f7fc fec6 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8005800:	2110      	movs	r1, #16
 8005802:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8005806:	f7fc fec1 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 800580a:	2103      	movs	r1, #3
 800580c:	f24d 6030 	movw	r0, #54832	; 0xd630
 8005810:	f7fc febc 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 8005814:	2133      	movs	r1, #51	; 0x33
 8005816:	f24d 6031 	movw	r0, #54833	; 0xd631
 800581a:	f7fc feb7 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 800581e:	2103      	movs	r1, #3
 8005820:	f24d 6032 	movw	r0, #54834	; 0xd632
 8005824:	f7fc feb2 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8005828:	216d      	movs	r1, #109	; 0x6d
 800582a:	f24d 6033 	movw	r0, #54835	; 0xd633
 800582e:	f7fc fead 	bl	800258c <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 8005832:	2155      	movs	r1, #85	; 0x55
 8005834:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8005838:	f7fc fea8 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 800583c:	21aa      	movs	r1, #170	; 0xaa
 800583e:	f24f 0001 	movw	r0, #61441	; 0xf001
 8005842:	f7fc fea3 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 8005846:	2152      	movs	r1, #82	; 0x52
 8005848:	f24f 0002 	movw	r0, #61442	; 0xf002
 800584c:	f7fc fe9e 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8005850:	2108      	movs	r1, #8
 8005852:	f24f 0003 	movw	r0, #61443	; 0xf003
 8005856:	f7fc fe99 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 800585a:	2100      	movs	r1, #0
 800585c:	f24f 0004 	movw	r0, #61444	; 0xf004
 8005860:	f7fc fe94 	bl	800258c <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8005864:	21cc      	movs	r1, #204	; 0xcc
 8005866:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800586a:	f7fc fe8f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 800586e:	2100      	movs	r1, #0
 8005870:	f24b 1001 	movw	r0, #45313	; 0xb101
 8005874:	f7fc fe8a 	bl	800258c <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 8005878:	2105      	movs	r1, #5
 800587a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 800587e:	f7fc fe85 	bl	800258c <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 8005882:	2170      	movs	r1, #112	; 0x70
 8005884:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8005888:	f7fc fe80 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 800588c:	2170      	movs	r1, #112	; 0x70
 800588e:	f24b 7001 	movw	r0, #46849	; 0xb701
 8005892:	f7fc fe7b 	bl	800258c <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 8005896:	2101      	movs	r1, #1
 8005898:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800589c:	f7fc fe76 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 80058a0:	2103      	movs	r1, #3
 80058a2:	f64b 0001 	movw	r0, #47105	; 0xb801
 80058a6:	f7fc fe71 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 80058aa:	2103      	movs	r1, #3
 80058ac:	f64b 0002 	movw	r0, #47106	; 0xb802
 80058b0:	f7fc fe6c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 80058b4:	2103      	movs	r1, #3
 80058b6:	f64b 0003 	movw	r0, #47107	; 0xb803
 80058ba:	f7fc fe67 	bl	800258c <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 80058be:	2102      	movs	r1, #2
 80058c0:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80058c4:	f7fc fe62 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 80058c8:	2100      	movs	r1, #0
 80058ca:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80058ce:	f7fc fe5d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 80058d2:	2100      	movs	r1, #0
 80058d4:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80058d8:	f7fc fe58 	bl	800258c <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 80058dc:	21d0      	movs	r1, #208	; 0xd0
 80058de:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 80058e2:	f7fc fe53 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 80058e6:	2102      	movs	r1, #2
 80058e8:	f64c 1001 	movw	r0, #51457	; 0xc901
 80058ec:	f7fc fe4e 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 80058f0:	2150      	movs	r1, #80	; 0x50
 80058f2:	f64c 1002 	movw	r0, #51458	; 0xc902
 80058f6:	f7fc fe49 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 80058fa:	2150      	movs	r1, #80	; 0x50
 80058fc:	f64c 1003 	movw	r0, #51459	; 0xc903
 8005900:	f7fc fe44 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 8005904:	2150      	movs	r1, #80	; 0x50
 8005906:	f64c 1004 	movw	r0, #51460	; 0xc904
 800590a:	f7fc fe3f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 800590e:	2100      	movs	r1, #0
 8005910:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8005914:	f7fc fe3a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8005918:	2155      	movs	r1, #85	; 0x55
 800591a:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 800591e:	f7fc fe35 	bl	800258c <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8005922:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8005926:	f7fc fda5 	bl	8002474 <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 800592a:	2001      	movs	r0, #1
 800592c:	f7fb fb52 	bl	8000fd4 <HAL_Delay>
		LCD_WR_REG(0x2900);
 8005930:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8005934:	f7fc fd9e 	bl	8002474 <LCD_WR_REG>
 8005938:	f001 bd18 	b.w	800736c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 800593c:	4bec      	ldr	r3, [pc, #944]	; (8005cf0 <LCD_Init+0x27b8>)
 800593e:	889b      	ldrh	r3, [r3, #4]
 8005940:	f249 3225 	movw	r2, #37669	; 0x9325
 8005944:	4293      	cmp	r3, r2
 8005946:	f040 80d7 	bne.w	8005af8 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 800594a:	f647 01f0 	movw	r1, #30960	; 0x78f0
 800594e:	20e5      	movs	r0, #229	; 0xe5
 8005950:	f7fc fe1c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 8005954:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005958:	2001      	movs	r0, #1
 800595a:	f7fc fe17 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 800595e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005962:	2002      	movs	r0, #2
 8005964:	f7fc fe12 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8005968:	f241 0130 	movw	r1, #4144	; 0x1030
 800596c:	2003      	movs	r0, #3
 800596e:	f7fc fe0d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8005972:	2100      	movs	r1, #0
 8005974:	2004      	movs	r0, #4
 8005976:	f7fc fe09 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 800597a:	f240 2102 	movw	r1, #514	; 0x202
 800597e:	2008      	movs	r0, #8
 8005980:	f7fc fe04 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8005984:	2100      	movs	r1, #0
 8005986:	2009      	movs	r0, #9
 8005988:	f7fc fe00 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 800598c:	2100      	movs	r1, #0
 800598e:	200a      	movs	r0, #10
 8005990:	f7fc fdfc 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005994:	2100      	movs	r1, #0
 8005996:	200c      	movs	r0, #12
 8005998:	f7fc fdf8 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 800599c:	2100      	movs	r1, #0
 800599e:	200d      	movs	r0, #13
 80059a0:	f7fc fdf4 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80059a4:	2100      	movs	r1, #0
 80059a6:	200f      	movs	r0, #15
 80059a8:	f7fc fdf0 	bl	800258c <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 80059ac:	2100      	movs	r1, #0
 80059ae:	2010      	movs	r0, #16
 80059b0:	f7fc fdec 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80059b4:	2107      	movs	r1, #7
 80059b6:	2011      	movs	r0, #17
 80059b8:	f7fc fde8 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80059bc:	2100      	movs	r1, #0
 80059be:	2012      	movs	r0, #18
 80059c0:	f7fc fde4 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80059c4:	2100      	movs	r1, #0
 80059c6:	2013      	movs	r0, #19
 80059c8:	f7fc fde0 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 80059cc:	2100      	movs	r1, #0
 80059ce:	2007      	movs	r0, #7
 80059d0:	f7fc fddc 	bl	800258c <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 80059d4:	f241 6190 	movw	r1, #5776	; 0x1690
 80059d8:	2010      	movs	r0, #16
 80059da:	f7fc fdd7 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 80059de:	f240 2127 	movw	r1, #551	; 0x227
 80059e2:	2011      	movs	r0, #17
 80059e4:	f7fc fdd2 	bl	800258c <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 80059e8:	219d      	movs	r1, #157	; 0x9d
 80059ea:	2012      	movs	r0, #18
 80059ec:	f7fc fdce 	bl	800258c <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 80059f0:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 80059f4:	2013      	movs	r0, #19
 80059f6:	f7fc fdc9 	bl	800258c <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 80059fa:	2125      	movs	r1, #37	; 0x25
 80059fc:	2029      	movs	r0, #41	; 0x29
 80059fe:	f7fc fdc5 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 8005a02:	210d      	movs	r1, #13
 8005a04:	202b      	movs	r0, #43	; 0x2b
 8005a06:	f7fc fdc1 	bl	800258c <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 8005a0a:	2107      	movs	r1, #7
 8005a0c:	2030      	movs	r0, #48	; 0x30
 8005a0e:	f7fc fdbd 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 8005a12:	f240 3103 	movw	r1, #771	; 0x303
 8005a16:	2031      	movs	r0, #49	; 0x31
 8005a18:	f7fc fdb8 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 8005a1c:	2103      	movs	r1, #3
 8005a1e:	2032      	movs	r0, #50	; 0x32
 8005a20:	f7fc fdb4 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 8005a24:	f240 2106 	movw	r1, #518	; 0x206
 8005a28:	2035      	movs	r0, #53	; 0x35
 8005a2a:	f7fc fdaf 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 8005a2e:	2108      	movs	r1, #8
 8005a30:	2036      	movs	r0, #54	; 0x36
 8005a32:	f7fc fdab 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 8005a36:	f240 4106 	movw	r1, #1030	; 0x406
 8005a3a:	2037      	movs	r0, #55	; 0x37
 8005a3c:	f7fc fda6 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8005a40:	f44f 7141 	mov.w	r1, #772	; 0x304
 8005a44:	2038      	movs	r0, #56	; 0x38
 8005a46:	f7fc fda1 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 8005a4a:	2107      	movs	r1, #7
 8005a4c:	2039      	movs	r0, #57	; 0x39
 8005a4e:	f7fc fd9d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 8005a52:	f240 6102 	movw	r1, #1538	; 0x602
 8005a56:	203c      	movs	r0, #60	; 0x3c
 8005a58:	f7fc fd98 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 8005a5c:	2108      	movs	r1, #8
 8005a5e:	203d      	movs	r0, #61	; 0x3d
 8005a60:	f7fc fd94 	bl	800258c <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 8005a64:	2100      	movs	r1, #0
 8005a66:	2050      	movs	r0, #80	; 0x50
 8005a68:	f7fc fd90 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8005a6c:	21ef      	movs	r1, #239	; 0xef
 8005a6e:	2051      	movs	r0, #81	; 0x51
 8005a70:	f7fc fd8c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8005a74:	2100      	movs	r1, #0
 8005a76:	2052      	movs	r0, #82	; 0x52
 8005a78:	f7fc fd88 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8005a7c:	f240 113f 	movw	r1, #319	; 0x13f
 8005a80:	2053      	movs	r0, #83	; 0x53
 8005a82:	f7fc fd83 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 8005a86:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8005a8a:	2060      	movs	r0, #96	; 0x60
 8005a8c:	f7fc fd7e 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8005a90:	2101      	movs	r1, #1
 8005a92:	2061      	movs	r0, #97	; 0x61
 8005a94:	f7fc fd7a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8005a98:	2100      	movs	r1, #0
 8005a9a:	206a      	movs	r0, #106	; 0x6a
 8005a9c:	f7fc fd76 	bl	800258c <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	2080      	movs	r0, #128	; 0x80
 8005aa4:	f7fc fd72 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	2081      	movs	r0, #129	; 0x81
 8005aac:	f7fc fd6e 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	2082      	movs	r0, #130	; 0x82
 8005ab4:	f7fc fd6a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8005ab8:	2100      	movs	r1, #0
 8005aba:	2083      	movs	r0, #131	; 0x83
 8005abc:	f7fc fd66 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	2084      	movs	r0, #132	; 0x84
 8005ac4:	f7fc fd62 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8005ac8:	2100      	movs	r1, #0
 8005aca:	2085      	movs	r0, #133	; 0x85
 8005acc:	f7fc fd5e 	bl	800258c <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8005ad0:	2110      	movs	r1, #16
 8005ad2:	2090      	movs	r0, #144	; 0x90
 8005ad4:	f7fc fd5a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8005ad8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005adc:	2092      	movs	r0, #146	; 0x92
 8005ade:	f7fc fd55 	bl	800258c <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 8005ae2:	f240 1133 	movw	r1, #307	; 0x133
 8005ae6:	2007      	movs	r0, #7
 8005ae8:	f7fc fd50 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 8005aec:	2122      	movs	r1, #34	; 0x22
 8005aee:	2000      	movs	r0, #0
 8005af0:	f7fc fd4c 	bl	800258c <LCD_WriteReg>
 8005af4:	f001 bc3a 	b.w	800736c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8005af8:	4b7d      	ldr	r3, [pc, #500]	; (8005cf0 <LCD_Init+0x27b8>)
 8005afa:	889b      	ldrh	r3, [r3, #4]
 8005afc:	f249 3228 	movw	r2, #37672	; 0x9328
 8005b00:	4293      	cmp	r3, r2
 8005b02:	f040 80f7 	bne.w	8005cf4 <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 8005b06:	f241 018f 	movw	r1, #4239	; 0x108f
 8005b0a:	20ec      	movs	r0, #236	; 0xec
 8005b0c:	f7fc fd3e 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8005b10:	f241 2134 	movw	r1, #4660	; 0x1234
 8005b14:	20ef      	movs	r0, #239	; 0xef
 8005b16:	f7fc fd39 	bl	800258c <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 8005b1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b1e:	2001      	movs	r0, #1
 8005b20:	f7fc fd34 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 8005b24:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005b28:	2002      	movs	r0, #2
 8005b2a:	f7fc fd2f 	bl	800258c <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 8005b2e:	f241 0130 	movw	r1, #4144	; 0x1030
 8005b32:	2003      	movs	r0, #3
 8005b34:	f7fc fd2a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8005b38:	2100      	movs	r1, #0
 8005b3a:	2004      	movs	r0, #4
 8005b3c:	f7fc fd26 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8005b40:	f240 2102 	movw	r1, #514	; 0x202
 8005b44:	2008      	movs	r0, #8
 8005b46:	f7fc fd21 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	2009      	movs	r0, #9
 8005b4e:	f7fc fd1d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 8005b52:	2100      	movs	r1, #0
 8005b54:	200a      	movs	r0, #10
 8005b56:	f7fc fd19 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	200c      	movs	r0, #12
 8005b5e:	f7fc fd15 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 8005b62:	2100      	movs	r1, #0
 8005b64:	200d      	movs	r0, #13
 8005b66:	f7fc fd11 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	200f      	movs	r0, #15
 8005b6e:	f7fc fd0d 	bl	800258c <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 8005b72:	2100      	movs	r1, #0
 8005b74:	2010      	movs	r0, #16
 8005b76:	f7fc fd09 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8005b7a:	2107      	movs	r1, #7
 8005b7c:	2011      	movs	r0, #17
 8005b7e:	f7fc fd05 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8005b82:	2100      	movs	r1, #0
 8005b84:	2012      	movs	r0, #18
 8005b86:	f7fc fd01 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	2013      	movs	r0, #19
 8005b8e:	f7fc fcfd 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 8005b92:	2101      	movs	r1, #1
 8005b94:	2007      	movs	r0, #7
 8005b96:	f7fc fcf9 	bl	800258c <LCD_WriteReg>
		HAL_Delay(50);
 8005b9a:	2032      	movs	r0, #50	; 0x32
 8005b9c:	f7fb fa1a 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 8005ba0:	f241 4190 	movw	r1, #5264	; 0x1490
 8005ba4:	2010      	movs	r0, #16
 8005ba6:	f7fc fcf1 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8005baa:	f240 2127 	movw	r1, #551	; 0x227
 8005bae:	2011      	movs	r0, #17
 8005bb0:	f7fc fcec 	bl	800258c <LCD_WriteReg>
		HAL_Delay(50);
 8005bb4:	2032      	movs	r0, #50	; 0x32
 8005bb6:	f7fb fa0d 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 8005bba:	218a      	movs	r1, #138	; 0x8a
 8005bbc:	2012      	movs	r0, #18
 8005bbe:	f7fc fce5 	bl	800258c <LCD_WriteReg>
		HAL_Delay(50);
 8005bc2:	2032      	movs	r0, #50	; 0x32
 8005bc4:	f7fb fa06 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 8005bc8:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8005bcc:	2013      	movs	r0, #19
 8005bce:	f7fc fcdd 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 8005bd2:	2106      	movs	r1, #6
 8005bd4:	2029      	movs	r0, #41	; 0x29
 8005bd6:	f7fc fcd9 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 8005bda:	210d      	movs	r1, #13
 8005bdc:	202b      	movs	r0, #43	; 0x2b
 8005bde:	f7fc fcd5 	bl	800258c <LCD_WriteReg>
		HAL_Delay(50);
 8005be2:	2032      	movs	r0, #50	; 0x32
 8005be4:	f7fb f9f6 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8005be8:	2100      	movs	r1, #0
 8005bea:	2020      	movs	r0, #32
 8005bec:	f7fc fcce 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	2021      	movs	r0, #33	; 0x21
 8005bf4:	f7fc fcca 	bl	800258c <LCD_WriteReg>
		HAL_Delay(50);
 8005bf8:	2032      	movs	r0, #50	; 0x32
 8005bfa:	f7fb f9eb 	bl	8000fd4 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 8005bfe:	2100      	movs	r1, #0
 8005c00:	2030      	movs	r0, #48	; 0x30
 8005c02:	f7fc fcc3 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 8005c06:	f240 6104 	movw	r1, #1540	; 0x604
 8005c0a:	2031      	movs	r0, #49	; 0x31
 8005c0c:	f7fc fcbe 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8005c10:	f240 3105 	movw	r1, #773	; 0x305
 8005c14:	2032      	movs	r0, #50	; 0x32
 8005c16:	f7fc fcb9 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	2035      	movs	r0, #53	; 0x35
 8005c1e:	f7fc fcb5 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 8005c22:	f640 4109 	movw	r1, #3081	; 0xc09
 8005c26:	2036      	movs	r0, #54	; 0x36
 8005c28:	f7fc fcb0 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 8005c2c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005c30:	2037      	movs	r0, #55	; 0x37
 8005c32:	f7fc fcab 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 8005c36:	f240 3101 	movw	r1, #769	; 0x301
 8005c3a:	2038      	movs	r0, #56	; 0x38
 8005c3c:	f7fc fca6 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8005c40:	f240 7107 	movw	r1, #1799	; 0x707
 8005c44:	2039      	movs	r0, #57	; 0x39
 8005c46:	f7fc fca1 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	203c      	movs	r0, #60	; 0x3c
 8005c4e:	f7fc fc9d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 8005c52:	f640 210a 	movw	r1, #2570	; 0xa0a
 8005c56:	203d      	movs	r0, #61	; 0x3d
 8005c58:	f7fc fc98 	bl	800258c <LCD_WriteReg>
		HAL_Delay(50);
 8005c5c:	2032      	movs	r0, #50	; 0x32
 8005c5e:	f7fb f9b9 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 8005c62:	2100      	movs	r1, #0
 8005c64:	2050      	movs	r0, #80	; 0x50
 8005c66:	f7fc fc91 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 8005c6a:	21ef      	movs	r1, #239	; 0xef
 8005c6c:	2051      	movs	r0, #81	; 0x51
 8005c6e:	f7fc fc8d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 8005c72:	2100      	movs	r1, #0
 8005c74:	2052      	movs	r0, #82	; 0x52
 8005c76:	f7fc fc89 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 8005c7a:	f240 113f 	movw	r1, #319	; 0x13f
 8005c7e:	2053      	movs	r0, #83	; 0x53
 8005c80:	f7fc fc84 	bl	800258c <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 8005c84:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8005c88:	2060      	movs	r0, #96	; 0x60
 8005c8a:	f7fc fc7f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8005c8e:	2101      	movs	r1, #1
 8005c90:	2061      	movs	r0, #97	; 0x61
 8005c92:	f7fc fc7b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8005c96:	2100      	movs	r1, #0
 8005c98:	206a      	movs	r0, #106	; 0x6a
 8005c9a:	f7fc fc77 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	2080      	movs	r0, #128	; 0x80
 8005ca2:	f7fc fc73 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	2081      	movs	r0, #129	; 0x81
 8005caa:	f7fc fc6f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8005cae:	2100      	movs	r1, #0
 8005cb0:	2082      	movs	r0, #130	; 0x82
 8005cb2:	f7fc fc6b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8005cb6:	2100      	movs	r1, #0
 8005cb8:	2083      	movs	r0, #131	; 0x83
 8005cba:	f7fc fc67 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	2084      	movs	r0, #132	; 0x84
 8005cc2:	f7fc fc63 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	2085      	movs	r0, #133	; 0x85
 8005cca:	f7fc fc5f 	bl	800258c <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 8005cce:	2110      	movs	r1, #16
 8005cd0:	2090      	movs	r0, #144	; 0x90
 8005cd2:	f7fc fc5b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8005cd6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005cda:	2092      	movs	r0, #146	; 0x92
 8005cdc:	f7fc fc56 	bl	800258c <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8005ce0:	f240 1133 	movw	r1, #307	; 0x133
 8005ce4:	2007      	movs	r0, #7
 8005ce6:	f7fc fc51 	bl	800258c <LCD_WriteReg>
 8005cea:	f001 bb3f 	b.w	800736c <LCD_Init+0x3e34>
 8005cee:	bf00      	nop
 8005cf0:	2000018c 	.word	0x2000018c
	} else if (lcddev.id == 0x9320) //测试OK.
 8005cf4:	4bce      	ldr	r3, [pc, #824]	; (8006030 <LCD_Init+0x2af8>)
 8005cf6:	889b      	ldrh	r3, [r3, #4]
 8005cf8:	f249 3220 	movw	r2, #37664	; 0x9320
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	f040 80ad 	bne.w	8005e5c <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 8005d02:	2100      	movs	r1, #0
 8005d04:	2000      	movs	r0, #0
 8005d06:	f7fc fc41 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 8005d0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d0e:	2001      	movs	r0, #1
 8005d10:	f7fc fc3c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 8005d14:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005d18:	2002      	movs	r0, #2
 8005d1a:	f7fc fc37 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 8005d1e:	f241 0130 	movw	r1, #4144	; 0x1030
 8005d22:	2003      	movs	r0, #3
 8005d24:	f7fc fc32 	bl	800258c <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8005d28:	2100      	movs	r1, #0
 8005d2a:	2004      	movs	r0, #4
 8005d2c:	f7fc fc2e 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 8005d30:	f240 2102 	movw	r1, #514	; 0x202
 8005d34:	2008      	movs	r0, #8
 8005d36:	f7fc fc29 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	2009      	movs	r0, #9
 8005d3e:	f7fc fc25 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 8005d42:	2100      	movs	r1, #0
 8005d44:	200a      	movs	r0, #10
 8005d46:	f7fc fc21 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	200c      	movs	r0, #12
 8005d4e:	f7fc fc1d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 8005d52:	2100      	movs	r1, #0
 8005d54:	200d      	movs	r0, #13
 8005d56:	f7fc fc19 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	200f      	movs	r0, #15
 8005d5e:	f7fc fc15 	bl	800258c <LCD_WriteReg>
		HAL_Delay(50);
 8005d62:	2032      	movs	r0, #50	; 0x32
 8005d64:	f7fb f936 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 8005d68:	f240 1101 	movw	r1, #257	; 0x101
 8005d6c:	2007      	movs	r0, #7
 8005d6e:	f7fc fc0d 	bl	800258c <LCD_WriteReg>
		HAL_Delay(50);
 8005d72:	2032      	movs	r0, #50	; 0x32
 8005d74:	f7fb f92e 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 8005d78:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8005d7c:	2010      	movs	r0, #16
 8005d7e:	f7fc fc05 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 8005d82:	2107      	movs	r1, #7
 8005d84:	2011      	movs	r0, #17
 8005d86:	f7fc fc01 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 8005d8a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005d8e:	2012      	movs	r0, #18
 8005d90:	f7fc fbfc 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 8005d94:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8005d98:	2013      	movs	r0, #19
 8005d9a:	f7fc fbf7 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 8005d9e:	2100      	movs	r1, #0
 8005da0:	2029      	movs	r0, #41	; 0x29
 8005da2:	f7fc fbf3 	bl	800258c <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 8005da6:	f244 0110 	movw	r1, #16400	; 0x4010
 8005daa:	202b      	movs	r0, #43	; 0x2b
 8005dac:	f7fc fbee 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 8005db0:	2100      	movs	r1, #0
 8005db2:	2050      	movs	r0, #80	; 0x50
 8005db4:	f7fc fbea 	bl	800258c <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 8005db8:	21ef      	movs	r1, #239	; 0xef
 8005dba:	2051      	movs	r0, #81	; 0x51
 8005dbc:	f7fc fbe6 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	2052      	movs	r0, #82	; 0x52
 8005dc4:	f7fc fbe2 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 8005dc8:	f240 113f 	movw	r1, #319	; 0x13f
 8005dcc:	2053      	movs	r0, #83	; 0x53
 8005dce:	f7fc fbdd 	bl	800258c <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 8005dd2:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005dd6:	2060      	movs	r0, #96	; 0x60
 8005dd8:	f7fc fbd8 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 8005ddc:	2101      	movs	r1, #1
 8005dde:	2061      	movs	r0, #97	; 0x61
 8005de0:	f7fc fbd4 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 8005de4:	2100      	movs	r1, #0
 8005de6:	206a      	movs	r0, #106	; 0x6a
 8005de8:	f7fc fbd0 	bl	800258c <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 8005dec:	2100      	movs	r1, #0
 8005dee:	2080      	movs	r0, #128	; 0x80
 8005df0:	f7fc fbcc 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 8005df4:	2100      	movs	r1, #0
 8005df6:	2081      	movs	r0, #129	; 0x81
 8005df8:	f7fc fbc8 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	2082      	movs	r0, #130	; 0x82
 8005e00:	f7fc fbc4 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 8005e04:	2100      	movs	r1, #0
 8005e06:	2083      	movs	r0, #131	; 0x83
 8005e08:	f7fc fbc0 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	2084      	movs	r0, #132	; 0x84
 8005e10:	f7fc fbbc 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 8005e14:	2100      	movs	r1, #0
 8005e16:	2085      	movs	r0, #133	; 0x85
 8005e18:	f7fc fbb8 	bl	800258c <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 8005e1c:	2110      	movs	r1, #16
 8005e1e:	2090      	movs	r0, #144	; 0x90
 8005e20:	f7fc fbb4 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 8005e24:	2100      	movs	r1, #0
 8005e26:	2092      	movs	r0, #146	; 0x92
 8005e28:	f7fc fbb0 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	2093      	movs	r0, #147	; 0x93
 8005e30:	f7fc fbac 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 8005e34:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005e38:	2095      	movs	r0, #149	; 0x95
 8005e3a:	f7fc fba7 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 8005e3e:	2100      	movs	r1, #0
 8005e40:	2097      	movs	r0, #151	; 0x97
 8005e42:	f7fc fba3 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 8005e46:	2100      	movs	r1, #0
 8005e48:	2098      	movs	r0, #152	; 0x98
 8005e4a:	f7fc fb9f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 8005e4e:	f240 1173 	movw	r1, #371	; 0x173
 8005e52:	2007      	movs	r0, #7
 8005e54:	f7fc fb9a 	bl	800258c <LCD_WriteReg>
 8005e58:	f001 ba88 	b.w	800736c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 8005e5c:	4b74      	ldr	r3, [pc, #464]	; (8006030 <LCD_Init+0x2af8>)
 8005e5e:	889b      	ldrh	r3, [r3, #4]
 8005e60:	f249 3231 	movw	r2, #37681	; 0x9331
 8005e64:	4293      	cmp	r3, r2
 8005e66:	f040 80e5 	bne.w	8006034 <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 8005e6a:	f241 0114 	movw	r1, #4116	; 0x1014
 8005e6e:	20e7      	movs	r0, #231	; 0xe7
 8005e70:	f7fc fb8c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8005e74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e78:	2001      	movs	r0, #1
 8005e7a:	f7fc fb87 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8005e7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e82:	2002      	movs	r0, #2
 8005e84:	f7fc fb82 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8005e88:	f241 0138 	movw	r1, #4152	; 0x1038
 8005e8c:	2003      	movs	r0, #3
 8005e8e:	f7fc fb7d 	bl	800258c <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8005e92:	f240 2102 	movw	r1, #514	; 0x202
 8005e96:	2008      	movs	r0, #8
 8005e98:	f7fc fb78 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	2009      	movs	r0, #9
 8005ea0:	f7fc fb74 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	200a      	movs	r0, #10
 8005ea8:	f7fc fb70 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8005eac:	2100      	movs	r1, #0
 8005eae:	200c      	movs	r0, #12
 8005eb0:	f7fc fb6c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	200d      	movs	r0, #13
 8005eb8:	f7fc fb68 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	200f      	movs	r0, #15
 8005ec0:	f7fc fb64 	bl	800258c <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	2010      	movs	r0, #16
 8005ec8:	f7fc fb60 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8005ecc:	2107      	movs	r1, #7
 8005ece:	2011      	movs	r0, #17
 8005ed0:	f7fc fb5c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	2012      	movs	r0, #18
 8005ed8:	f7fc fb58 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8005edc:	2100      	movs	r1, #0
 8005ede:	2013      	movs	r0, #19
 8005ee0:	f7fc fb54 	bl	800258c <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8005ee4:	20c8      	movs	r0, #200	; 0xc8
 8005ee6:	f7fb f875 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8005eea:	f241 6190 	movw	r1, #5776	; 0x1690
 8005eee:	2010      	movs	r0, #16
 8005ef0:	f7fc fb4c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8005ef4:	f240 2127 	movw	r1, #551	; 0x227
 8005ef8:	2011      	movs	r0, #17
 8005efa:	f7fc fb47 	bl	800258c <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8005efe:	2032      	movs	r0, #50	; 0x32
 8005f00:	f7fb f868 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8005f04:	210c      	movs	r1, #12
 8005f06:	2012      	movs	r0, #18
 8005f08:	f7fc fb40 	bl	800258c <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8005f0c:	2032      	movs	r0, #50	; 0x32
 8005f0e:	f7fb f861 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8005f12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005f16:	2013      	movs	r0, #19
 8005f18:	f7fc fb38 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8005f1c:	2111      	movs	r1, #17
 8005f1e:	2029      	movs	r0, #41	; 0x29
 8005f20:	f7fc fb34 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8005f24:	210b      	movs	r1, #11
 8005f26:	202b      	movs	r0, #43	; 0x2b
 8005f28:	f7fc fb30 	bl	800258c <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8005f2c:	2032      	movs	r0, #50	; 0x32
 8005f2e:	f7fb f851 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8005f32:	2100      	movs	r1, #0
 8005f34:	2020      	movs	r0, #32
 8005f36:	f7fc fb29 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8005f3a:	f240 113f 	movw	r1, #319	; 0x13f
 8005f3e:	2021      	movs	r0, #33	; 0x21
 8005f40:	f7fc fb24 	bl	800258c <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8005f44:	2100      	movs	r1, #0
 8005f46:	2030      	movs	r0, #48	; 0x30
 8005f48:	f7fc fb20 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8005f4c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005f50:	2031      	movs	r0, #49	; 0x31
 8005f52:	f7fc fb1b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8005f56:	2100      	movs	r1, #0
 8005f58:	2032      	movs	r0, #50	; 0x32
 8005f5a:	f7fc fb17 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8005f5e:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005f62:	2035      	movs	r0, #53	; 0x35
 8005f64:	f7fc fb12 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8005f68:	f241 610a 	movw	r1, #5642	; 0x160a
 8005f6c:	2036      	movs	r0, #54	; 0x36
 8005f6e:	f7fc fb0d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8005f72:	f240 7107 	movw	r1, #1799	; 0x707
 8005f76:	2037      	movs	r0, #55	; 0x37
 8005f78:	f7fc fb08 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8005f7c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005f80:	2038      	movs	r0, #56	; 0x38
 8005f82:	f7fc fb03 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8005f86:	f240 7107 	movw	r1, #1799	; 0x707
 8005f8a:	2039      	movs	r0, #57	; 0x39
 8005f8c:	f7fc fafe 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8005f90:	f240 4102 	movw	r1, #1026	; 0x402
 8005f94:	203c      	movs	r0, #60	; 0x3c
 8005f96:	f7fc faf9 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8005f9a:	f640 410f 	movw	r1, #3087	; 0xc0f
 8005f9e:	203d      	movs	r0, #61	; 0x3d
 8005fa0:	f7fc faf4 	bl	800258c <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	2050      	movs	r0, #80	; 0x50
 8005fa8:	f7fc faf0 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8005fac:	21ef      	movs	r1, #239	; 0xef
 8005fae:	2051      	movs	r0, #81	; 0x51
 8005fb0:	f7fc faec 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	2052      	movs	r0, #82	; 0x52
 8005fb8:	f7fc fae8 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8005fbc:	f240 113f 	movw	r1, #319	; 0x13f
 8005fc0:	2053      	movs	r0, #83	; 0x53
 8005fc2:	f7fc fae3 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8005fc6:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005fca:	2060      	movs	r0, #96	; 0x60
 8005fcc:	f7fc fade 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	2061      	movs	r0, #97	; 0x61
 8005fd4:	f7fc fada 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8005fd8:	2100      	movs	r1, #0
 8005fda:	206a      	movs	r0, #106	; 0x6a
 8005fdc:	f7fc fad6 	bl	800258c <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	2080      	movs	r0, #128	; 0x80
 8005fe4:	f7fc fad2 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8005fe8:	2100      	movs	r1, #0
 8005fea:	2081      	movs	r0, #129	; 0x81
 8005fec:	f7fc face 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	2082      	movs	r0, #130	; 0x82
 8005ff4:	f7fc faca 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	2083      	movs	r0, #131	; 0x83
 8005ffc:	f7fc fac6 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8006000:	2100      	movs	r1, #0
 8006002:	2084      	movs	r0, #132	; 0x84
 8006004:	f7fc fac2 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8006008:	2100      	movs	r1, #0
 800600a:	2085      	movs	r0, #133	; 0x85
 800600c:	f7fc fabe 	bl	800258c <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8006010:	2110      	movs	r1, #16
 8006012:	2090      	movs	r0, #144	; 0x90
 8006014:	f7fc faba 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8006018:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800601c:	2092      	movs	r0, #146	; 0x92
 800601e:	f7fc fab5 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8006022:	f240 1133 	movw	r1, #307	; 0x133
 8006026:	2007      	movs	r0, #7
 8006028:	f7fc fab0 	bl	800258c <LCD_WriteReg>
 800602c:	f001 b99e 	b.w	800736c <LCD_Init+0x3e34>
 8006030:	2000018c 	.word	0x2000018c
	} else if (lcddev.id == 0x5408) {
 8006034:	4be2      	ldr	r3, [pc, #904]	; (80063c0 <LCD_Init+0x2e88>)
 8006036:	889b      	ldrh	r3, [r3, #4]
 8006038:	f245 4208 	movw	r2, #21512	; 0x5408
 800603c:	4293      	cmp	r3, r2
 800603e:	f040 80a3 	bne.w	8006188 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 8006042:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006046:	2001      	movs	r0, #1
 8006048:	f7fc faa0 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 800604c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006050:	2002      	movs	r0, #2
 8006052:	f7fc fa9b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 8006056:	f241 0130 	movw	r1, #4144	; 0x1030
 800605a:	2003      	movs	r0, #3
 800605c:	f7fc fa96 	bl	800258c <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8006060:	2100      	movs	r1, #0
 8006062:	2004      	movs	r0, #4
 8006064:	f7fc fa92 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8006068:	f240 2107 	movw	r1, #519	; 0x207
 800606c:	2008      	movs	r0, #8
 800606e:	f7fc fa8d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8006072:	2100      	movs	r1, #0
 8006074:	2009      	movs	r0, #9
 8006076:	f7fc fa89 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 800607a:	2100      	movs	r1, #0
 800607c:	200a      	movs	r0, #10
 800607e:	f7fc fa85 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8006082:	2100      	movs	r1, #0
 8006084:	200c      	movs	r0, #12
 8006086:	f7fc fa81 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 800608a:	2100      	movs	r1, #0
 800608c:	200d      	movs	r0, #13
 800608e:	f7fc fa7d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8006092:	2100      	movs	r1, #0
 8006094:	200f      	movs	r0, #15
 8006096:	f7fc fa79 	bl	800258c <LCD_WriteReg>
		HAL_Delay(20);
 800609a:	2014      	movs	r0, #20
 800609c:	f7fa ff9a 	bl	8000fd4 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 80060a0:	f241 61b0 	movw	r1, #5808	; 0x16b0
 80060a4:	2010      	movs	r0, #16
 80060a6:	f7fc fa71 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 80060aa:	2101      	movs	r1, #1
 80060ac:	2011      	movs	r0, #17
 80060ae:	f7fc fa6d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 80060b2:	2101      	movs	r1, #1
 80060b4:	2017      	movs	r0, #23
 80060b6:	f7fc fa69 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 80060ba:	f44f 719c 	mov.w	r1, #312	; 0x138
 80060be:	2012      	movs	r0, #18
 80060c0:	f7fc fa64 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 80060c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80060c8:	2013      	movs	r0, #19
 80060ca:	f7fc fa5f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 80060ce:	2109      	movs	r1, #9
 80060d0:	2029      	movs	r0, #41	; 0x29
 80060d2:	f7fc fa5b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 80060d6:	2109      	movs	r1, #9
 80060d8:	202a      	movs	r0, #42	; 0x2a
 80060da:	f7fc fa57 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 80060de:	2100      	movs	r1, #0
 80060e0:	20a4      	movs	r0, #164	; 0xa4
 80060e2:	f7fc fa53 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 80060e6:	2100      	movs	r1, #0
 80060e8:	2050      	movs	r0, #80	; 0x50
 80060ea:	f7fc fa4f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 80060ee:	21ef      	movs	r1, #239	; 0xef
 80060f0:	2051      	movs	r0, #81	; 0x51
 80060f2:	f7fc fa4b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 80060f6:	2100      	movs	r1, #0
 80060f8:	2052      	movs	r0, #82	; 0x52
 80060fa:	f7fc fa47 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 80060fe:	f240 113f 	movw	r1, #319	; 0x13f
 8006102:	2053      	movs	r0, #83	; 0x53
 8006104:	f7fc fa42 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8006108:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800610c:	2060      	movs	r0, #96	; 0x60
 800610e:	f7fc fa3d 	bl	800258c <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8006112:	2101      	movs	r1, #1
 8006114:	2061      	movs	r0, #97	; 0x61
 8006116:	f7fc fa39 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 800611a:	2100      	movs	r1, #0
 800611c:	206a      	movs	r0, #106	; 0x6a
 800611e:	f7fc fa35 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8006122:	2100      	movs	r1, #0
 8006124:	2080      	movs	r0, #128	; 0x80
 8006126:	f7fc fa31 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 800612a:	2100      	movs	r1, #0
 800612c:	2081      	movs	r0, #129	; 0x81
 800612e:	f7fc fa2d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8006132:	2100      	movs	r1, #0
 8006134:	2082      	movs	r0, #130	; 0x82
 8006136:	f7fc fa29 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 800613a:	2100      	movs	r1, #0
 800613c:	2083      	movs	r0, #131	; 0x83
 800613e:	f7fc fa25 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8006142:	2100      	movs	r1, #0
 8006144:	2084      	movs	r0, #132	; 0x84
 8006146:	f7fc fa21 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 800614a:	2100      	movs	r1, #0
 800614c:	2085      	movs	r0, #133	; 0x85
 800614e:	f7fc fa1d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8006152:	2113      	movs	r1, #19
 8006154:	2090      	movs	r0, #144	; 0x90
 8006156:	f7fc fa19 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 800615a:	2100      	movs	r1, #0
 800615c:	2092      	movs	r0, #146	; 0x92
 800615e:	f7fc fa15 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8006162:	2103      	movs	r1, #3
 8006164:	2093      	movs	r0, #147	; 0x93
 8006166:	f7fc fa11 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 800616a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800616e:	2095      	movs	r0, #149	; 0x95
 8006170:	f7fc fa0c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8006174:	f240 1173 	movw	r1, #371	; 0x173
 8006178:	2007      	movs	r0, #7
 800617a:	f7fc fa07 	bl	800258c <LCD_WriteReg>
		HAL_Delay(50);
 800617e:	2032      	movs	r0, #50	; 0x32
 8006180:	f7fa ff28 	bl	8000fd4 <HAL_Delay>
 8006184:	f001 b8f2 	b.w	800736c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8006188:	4b8d      	ldr	r3, [pc, #564]	; (80063c0 <LCD_Init+0x2e88>)
 800618a:	889b      	ldrh	r3, [r3, #4]
 800618c:	f241 5205 	movw	r2, #5381	; 0x1505
 8006190:	4293      	cmp	r3, r2
 8006192:	f040 8117 	bne.w	80063c4 <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8006196:	2100      	movs	r1, #0
 8006198:	2007      	movs	r0, #7
 800619a:	f7fc f9f7 	bl	800258c <LCD_WriteReg>
		HAL_Delay(50);
 800619e:	2032      	movs	r0, #50	; 0x32
 80061a0:	f7fa ff18 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 80061a4:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80061a8:	2012      	movs	r0, #18
 80061aa:	f7fc f9ef 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 80061ae:	2101      	movs	r1, #1
 80061b0:	20a4      	movs	r0, #164	; 0xa4
 80061b2:	f7fc f9eb 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 80061b6:	210f      	movs	r1, #15
 80061b8:	2008      	movs	r0, #8
 80061ba:	f7fc f9e7 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 80061be:	2108      	movs	r1, #8
 80061c0:	200a      	movs	r0, #10
 80061c2:	f7fc f9e3 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 80061c6:	2108      	movs	r1, #8
 80061c8:	200d      	movs	r0, #13
 80061ca:	f7fc f9df 	bl	800258c <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 80061ce:	f240 7107 	movw	r1, #1799	; 0x707
 80061d2:	2030      	movs	r0, #48	; 0x30
 80061d4:	f7fc f9da 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 80061d8:	2107      	movs	r1, #7
 80061da:	2031      	movs	r0, #49	; 0x31
 80061dc:	f7fc f9d6 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 80061e0:	f240 6103 	movw	r1, #1539	; 0x603
 80061e4:	2032      	movs	r0, #50	; 0x32
 80061e6:	f7fc f9d1 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 80061ea:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80061ee:	2033      	movs	r0, #51	; 0x33
 80061f0:	f7fc f9cc 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 80061f4:	f240 2102 	movw	r1, #514	; 0x202
 80061f8:	2034      	movs	r0, #52	; 0x34
 80061fa:	f7fc f9c7 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 80061fe:	2102      	movs	r1, #2
 8006200:	2035      	movs	r0, #53	; 0x35
 8006202:	f7fc f9c3 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8006206:	f641 710f 	movw	r1, #7951	; 0x1f0f
 800620a:	2036      	movs	r0, #54	; 0x36
 800620c:	f7fc f9be 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8006210:	f240 7107 	movw	r1, #1799	; 0x707
 8006214:	2037      	movs	r0, #55	; 0x37
 8006216:	f7fc f9b9 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 800621a:	2100      	movs	r1, #0
 800621c:	2038      	movs	r0, #56	; 0x38
 800621e:	f7fc f9b5 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8006222:	2100      	movs	r1, #0
 8006224:	2039      	movs	r0, #57	; 0x39
 8006226:	f7fc f9b1 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 800622a:	f240 7107 	movw	r1, #1799	; 0x707
 800622e:	203a      	movs	r0, #58	; 0x3a
 8006230:	f7fc f9ac 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8006234:	2100      	movs	r1, #0
 8006236:	203b      	movs	r0, #59	; 0x3b
 8006238:	f7fc f9a8 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 800623c:	2107      	movs	r1, #7
 800623e:	203c      	movs	r0, #60	; 0x3c
 8006240:	f7fc f9a4 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8006244:	2100      	movs	r1, #0
 8006246:	203d      	movs	r0, #61	; 0x3d
 8006248:	f7fc f9a0 	bl	800258c <LCD_WriteReg>
		HAL_Delay(50);
 800624c:	2032      	movs	r0, #50	; 0x32
 800624e:	f7fa fec1 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8006252:	2101      	movs	r1, #1
 8006254:	2007      	movs	r0, #7
 8006256:	f7fc f999 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 800625a:	2101      	movs	r1, #1
 800625c:	2017      	movs	r0, #23
 800625e:	f7fc f995 	bl	800258c <LCD_WriteReg>
		HAL_Delay(50);
 8006262:	2032      	movs	r0, #50	; 0x32
 8006264:	f7fa feb6 	bl	8000fd4 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8006268:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 800626c:	2010      	movs	r0, #16
 800626e:	f7fc f98d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8006272:	f240 2117 	movw	r1, #535	; 0x217
 8006276:	2011      	movs	r0, #17
 8006278:	f7fc f988 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 800627c:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8006280:	2012      	movs	r0, #18
 8006282:	f7fc f983 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8006286:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800628a:	2013      	movs	r0, #19
 800628c:	f7fc f97e 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8006290:	2100      	movs	r1, #0
 8006292:	202a      	movs	r0, #42	; 0x2a
 8006294:	f7fc f97a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8006298:	210a      	movs	r1, #10
 800629a:	2029      	movs	r0, #41	; 0x29
 800629c:	f7fc f976 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 80062a0:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80062a4:	2012      	movs	r0, #18
 80062a6:	f7fc f971 	bl	800258c <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 80062aa:	2100      	movs	r1, #0
 80062ac:	2050      	movs	r0, #80	; 0x50
 80062ae:	f7fc f96d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 80062b2:	21ef      	movs	r1, #239	; 0xef
 80062b4:	2051      	movs	r0, #81	; 0x51
 80062b6:	f7fc f969 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80062ba:	2100      	movs	r1, #0
 80062bc:	2052      	movs	r0, #82	; 0x52
 80062be:	f7fc f965 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80062c2:	f240 113f 	movw	r1, #319	; 0x13f
 80062c6:	2053      	movs	r0, #83	; 0x53
 80062c8:	f7fc f960 	bl	800258c <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 80062cc:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80062d0:	2060      	movs	r0, #96	; 0x60
 80062d2:	f7fc f95b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80062d6:	2101      	movs	r1, #1
 80062d8:	2061      	movs	r0, #97	; 0x61
 80062da:	f7fc f957 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80062de:	2100      	movs	r1, #0
 80062e0:	206a      	movs	r0, #106	; 0x6a
 80062e2:	f7fc f953 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 80062e6:	2100      	movs	r1, #0
 80062e8:	2080      	movs	r0, #128	; 0x80
 80062ea:	f7fc f94f 	bl	800258c <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 80062ee:	2100      	movs	r1, #0
 80062f0:	2081      	movs	r0, #129	; 0x81
 80062f2:	f7fc f94b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80062f6:	2100      	movs	r1, #0
 80062f8:	2082      	movs	r0, #130	; 0x82
 80062fa:	f7fc f947 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80062fe:	2100      	movs	r1, #0
 8006300:	2083      	movs	r0, #131	; 0x83
 8006302:	f7fc f943 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8006306:	2100      	movs	r1, #0
 8006308:	2084      	movs	r0, #132	; 0x84
 800630a:	f7fc f93f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 800630e:	2100      	movs	r1, #0
 8006310:	2085      	movs	r0, #133	; 0x85
 8006312:	f7fc f93b 	bl	800258c <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8006316:	2113      	movs	r1, #19
 8006318:	2090      	movs	r0, #144	; 0x90
 800631a:	f7fc f937 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 800631e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006322:	2092      	movs	r0, #146	; 0x92
 8006324:	f7fc f932 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8006328:	2105      	movs	r1, #5
 800632a:	2093      	movs	r0, #147	; 0x93
 800632c:	f7fc f92e 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8006330:	2100      	movs	r1, #0
 8006332:	2095      	movs	r0, #149	; 0x95
 8006334:	f7fc f92a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8006338:	2100      	movs	r1, #0
 800633a:	2097      	movs	r0, #151	; 0x97
 800633c:	f7fc f926 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8006340:	2100      	movs	r1, #0
 8006342:	2098      	movs	r0, #152	; 0x98
 8006344:	f7fc f922 	bl	800258c <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8006348:	f44f 7180 	mov.w	r1, #256	; 0x100
 800634c:	2001      	movs	r0, #1
 800634e:	f7fc f91d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8006352:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006356:	2002      	movs	r0, #2
 8006358:	f7fc f918 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 800635c:	f241 0138 	movw	r1, #4152	; 0x1038
 8006360:	2003      	movs	r0, #3
 8006362:	f7fc f913 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8006366:	2100      	movs	r1, #0
 8006368:	2004      	movs	r0, #4
 800636a:	f7fc f90f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800636e:	2100      	movs	r1, #0
 8006370:	200c      	movs	r0, #12
 8006372:	f7fc f90b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8006376:	2100      	movs	r1, #0
 8006378:	200f      	movs	r0, #15
 800637a:	f7fc f907 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 800637e:	2100      	movs	r1, #0
 8006380:	2020      	movs	r0, #32
 8006382:	f7fc f903 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8006386:	2100      	movs	r1, #0
 8006388:	2021      	movs	r0, #33	; 0x21
 800638a:	f7fc f8ff 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 800638e:	2121      	movs	r1, #33	; 0x21
 8006390:	2007      	movs	r0, #7
 8006392:	f7fc f8fb 	bl	800258c <LCD_WriteReg>
		HAL_Delay(20);
 8006396:	2014      	movs	r0, #20
 8006398:	f7fa fe1c 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 800639c:	2161      	movs	r1, #97	; 0x61
 800639e:	2007      	movs	r0, #7
 80063a0:	f7fc f8f4 	bl	800258c <LCD_WriteReg>
		HAL_Delay(20);
 80063a4:	2014      	movs	r0, #20
 80063a6:	f7fa fe15 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 80063aa:	f240 1173 	movw	r1, #371	; 0x173
 80063ae:	2007      	movs	r0, #7
 80063b0:	f7fc f8ec 	bl	800258c <LCD_WriteReg>
		HAL_Delay(20);
 80063b4:	2014      	movs	r0, #20
 80063b6:	f7fa fe0d 	bl	8000fd4 <HAL_Delay>
 80063ba:	f000 bfd7 	b.w	800736c <LCD_Init+0x3e34>
 80063be:	bf00      	nop
 80063c0:	2000018c 	.word	0x2000018c
	} else if (lcddev.id == 0xB505) {
 80063c4:	4bf0      	ldr	r3, [pc, #960]	; (8006788 <LCD_Init+0x3250>)
 80063c6:	889b      	ldrh	r3, [r3, #4]
 80063c8:	f24b 5205 	movw	r2, #46341	; 0xb505
 80063cc:	4293      	cmp	r3, r2
 80063ce:	f040 8103 	bne.w	80065d8 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 80063d2:	2100      	movs	r1, #0
 80063d4:	2000      	movs	r0, #0
 80063d6:	f7fc f8d9 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80063da:	2100      	movs	r1, #0
 80063dc:	2000      	movs	r0, #0
 80063de:	f7fc f8d5 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80063e2:	2100      	movs	r1, #0
 80063e4:	2000      	movs	r0, #0
 80063e6:	f7fc f8d1 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80063ea:	2100      	movs	r1, #0
 80063ec:	2000      	movs	r0, #0
 80063ee:	f7fc f8cd 	bl	800258c <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 80063f2:	2101      	movs	r1, #1
 80063f4:	20a4      	movs	r0, #164	; 0xa4
 80063f6:	f7fc f8c9 	bl	800258c <LCD_WriteReg>
		HAL_Delay(20);
 80063fa:	2014      	movs	r0, #20
 80063fc:	f7fa fdea 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8006400:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006404:	2060      	movs	r0, #96	; 0x60
 8006406:	f7fc f8c1 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 800640a:	f240 2102 	movw	r1, #514	; 0x202
 800640e:	2008      	movs	r0, #8
 8006410:	f7fc f8bc 	bl	800258c <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8006414:	f44f 7105 	mov.w	r1, #532	; 0x214
 8006418:	2030      	movs	r0, #48	; 0x30
 800641a:	f7fc f8b7 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 800641e:	f243 7115 	movw	r1, #14101	; 0x3715
 8006422:	2031      	movs	r0, #49	; 0x31
 8006424:	f7fc f8b2 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8006428:	f240 6104 	movw	r1, #1540	; 0x604
 800642c:	2032      	movs	r0, #50	; 0x32
 800642e:	f7fc f8ad 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 8006432:	f640 6116 	movw	r1, #3606	; 0xe16
 8006436:	2033      	movs	r0, #51	; 0x33
 8006438:	f7fc f8a8 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 800643c:	f242 2111 	movw	r1, #8721	; 0x2211
 8006440:	2034      	movs	r0, #52	; 0x34
 8006442:	f7fc f8a3 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8006446:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 800644a:	2035      	movs	r0, #53	; 0x35
 800644c:	f7fc f89e 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8006450:	f248 5107 	movw	r1, #34055	; 0x8507
 8006454:	2036      	movs	r0, #54	; 0x36
 8006456:	f7fc f899 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 800645a:	f241 4107 	movw	r1, #5127	; 0x1407
 800645e:	2037      	movs	r0, #55	; 0x37
 8006460:	f7fc f894 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8006464:	f241 4103 	movw	r1, #5123	; 0x1403
 8006468:	2038      	movs	r0, #56	; 0x38
 800646a:	f7fc f88f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 800646e:	2120      	movs	r1, #32
 8006470:	2039      	movs	r0, #57	; 0x39
 8006472:	f7fc f88b 	bl	800258c <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 8006476:	211a      	movs	r1, #26
 8006478:	2090      	movs	r0, #144	; 0x90
 800647a:	f7fc f887 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 800647e:	2100      	movs	r1, #0
 8006480:	2010      	movs	r0, #16
 8006482:	f7fc f883 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8006486:	2107      	movs	r1, #7
 8006488:	2011      	movs	r0, #17
 800648a:	f7fc f87f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 800648e:	2100      	movs	r1, #0
 8006490:	2012      	movs	r0, #18
 8006492:	f7fc f87b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8006496:	2100      	movs	r1, #0
 8006498:	2013      	movs	r0, #19
 800649a:	f7fc f877 	bl	800258c <LCD_WriteReg>
		HAL_Delay(20);
 800649e:	2014      	movs	r0, #20
 80064a0:	f7fa fd98 	bl	8000fd4 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 80064a4:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 80064a8:	2010      	movs	r0, #16
 80064aa:	f7fc f86f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 80064ae:	f240 1137 	movw	r1, #311	; 0x137
 80064b2:	2011      	movs	r0, #17
 80064b4:	f7fc f86a 	bl	800258c <LCD_WriteReg>
		HAL_Delay(20);
 80064b8:	2014      	movs	r0, #20
 80064ba:	f7fa fd8b 	bl	8000fd4 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 80064be:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80064c2:	2012      	movs	r0, #18
 80064c4:	f7fc f862 	bl	800258c <LCD_WriteReg>
		HAL_Delay(20);
 80064c8:	2014      	movs	r0, #20
 80064ca:	f7fa fd83 	bl	8000fd4 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 80064ce:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80064d2:	2013      	movs	r0, #19
 80064d4:	f7fc f85a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 80064d8:	2180      	movs	r1, #128	; 0x80
 80064da:	202a      	movs	r0, #42	; 0x2a
 80064dc:	f7fc f856 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 80064e0:	2148      	movs	r1, #72	; 0x48
 80064e2:	2029      	movs	r0, #41	; 0x29
 80064e4:	f7fc f852 	bl	800258c <LCD_WriteReg>
		HAL_Delay(20);
 80064e8:	2014      	movs	r0, #20
 80064ea:	f7fa fd73 	bl	8000fd4 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 80064ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064f2:	2001      	movs	r0, #1
 80064f4:	f7fc f84a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 80064f8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80064fc:	2002      	movs	r0, #2
 80064fe:	f7fc f845 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8006502:	f241 0138 	movw	r1, #4152	; 0x1038
 8006506:	2003      	movs	r0, #3
 8006508:	f7fc f840 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 800650c:	f240 2102 	movw	r1, #514	; 0x202
 8006510:	2008      	movs	r0, #8
 8006512:	f7fc f83b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8006516:	2100      	movs	r1, #0
 8006518:	200a      	movs	r0, #10
 800651a:	f7fc f837 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 800651e:	2100      	movs	r1, #0
 8006520:	200c      	movs	r0, #12
 8006522:	f7fc f833 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 8006526:	2100      	movs	r1, #0
 8006528:	200d      	movs	r0, #13
 800652a:	f7fc f82f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 800652e:	2130      	movs	r1, #48	; 0x30
 8006530:	200e      	movs	r0, #14
 8006532:	f7fc f82b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8006536:	2100      	movs	r1, #0
 8006538:	2050      	movs	r0, #80	; 0x50
 800653a:	f7fc f827 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 800653e:	21ef      	movs	r1, #239	; 0xef
 8006540:	2051      	movs	r0, #81	; 0x51
 8006542:	f7fc f823 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8006546:	2100      	movs	r1, #0
 8006548:	2052      	movs	r0, #82	; 0x52
 800654a:	f7fc f81f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 800654e:	f240 113f 	movw	r1, #319	; 0x13f
 8006552:	2053      	movs	r0, #83	; 0x53
 8006554:	f7fc f81a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8006558:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800655c:	2060      	movs	r0, #96	; 0x60
 800655e:	f7fc f815 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8006562:	2101      	movs	r1, #1
 8006564:	2061      	movs	r0, #97	; 0x61
 8006566:	f7fc f811 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 800656a:	2100      	movs	r1, #0
 800656c:	206a      	movs	r0, #106	; 0x6a
 800656e:	f7fc f80d 	bl	800258c <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 8006572:	2111      	movs	r1, #17
 8006574:	2090      	movs	r0, #144	; 0x90
 8006576:	f7fc f809 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 800657a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800657e:	2092      	movs	r0, #146	; 0x92
 8006580:	f7fc f804 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 8006584:	f240 4102 	movw	r1, #1026	; 0x402
 8006588:	2093      	movs	r0, #147	; 0x93
 800658a:	f7fb ffff 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 800658e:	2102      	movs	r1, #2
 8006590:	2094      	movs	r0, #148	; 0x94
 8006592:	f7fb fffb 	bl	800258c <LCD_WriteReg>
		HAL_Delay(20);
 8006596:	2014      	movs	r0, #20
 8006598:	f7fa fd1c 	bl	8000fd4 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 800659c:	2101      	movs	r1, #1
 800659e:	2007      	movs	r0, #7
 80065a0:	f7fb fff4 	bl	800258c <LCD_WriteReg>
		HAL_Delay(20);
 80065a4:	2014      	movs	r0, #20
 80065a6:	f7fa fd15 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 80065aa:	2161      	movs	r1, #97	; 0x61
 80065ac:	2007      	movs	r0, #7
 80065ae:	f7fb ffed 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 80065b2:	f240 1173 	movw	r1, #371	; 0x173
 80065b6:	2007      	movs	r0, #7
 80065b8:	f7fb ffe8 	bl	800258c <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 80065bc:	2100      	movs	r1, #0
 80065be:	2020      	movs	r0, #32
 80065c0:	f7fb ffe4 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 80065c4:	2100      	movs	r1, #0
 80065c6:	2021      	movs	r0, #33	; 0x21
 80065c8:	f7fb ffe0 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 80065cc:	2122      	movs	r1, #34	; 0x22
 80065ce:	2000      	movs	r0, #0
 80065d0:	f7fb ffdc 	bl	800258c <LCD_WriteReg>
 80065d4:	f000 beca 	b.w	800736c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 80065d8:	4b6b      	ldr	r3, [pc, #428]	; (8006788 <LCD_Init+0x3250>)
 80065da:	889b      	ldrh	r3, [r3, #4]
 80065dc:	f24c 5205 	movw	r2, #50437	; 0xc505
 80065e0:	4293      	cmp	r3, r2
 80065e2:	f040 80d3 	bne.w	800678c <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 80065e6:	2100      	movs	r1, #0
 80065e8:	2000      	movs	r0, #0
 80065ea:	f7fb ffcf 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80065ee:	2100      	movs	r1, #0
 80065f0:	2000      	movs	r0, #0
 80065f2:	f7fb ffcb 	bl	800258c <LCD_WriteReg>
		HAL_Delay(20);
 80065f6:	2014      	movs	r0, #20
 80065f8:	f7fa fcec 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 80065fc:	2100      	movs	r1, #0
 80065fe:	2000      	movs	r0, #0
 8006600:	f7fb ffc4 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8006604:	2100      	movs	r1, #0
 8006606:	2000      	movs	r0, #0
 8006608:	f7fb ffc0 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800660c:	2100      	movs	r1, #0
 800660e:	2000      	movs	r0, #0
 8006610:	f7fb ffbc 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8006614:	2100      	movs	r1, #0
 8006616:	2000      	movs	r0, #0
 8006618:	f7fb ffb8 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 800661c:	2101      	movs	r1, #1
 800661e:	20a4      	movs	r0, #164	; 0xa4
 8006620:	f7fb ffb4 	bl	800258c <LCD_WriteReg>
		HAL_Delay(20);
 8006624:	2014      	movs	r0, #20
 8006626:	f7fa fcd5 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 800662a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800662e:	2060      	movs	r0, #96	; 0x60
 8006630:	f7fb ffac 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 8006634:	f640 0106 	movw	r1, #2054	; 0x806
 8006638:	2008      	movs	r0, #8
 800663a:	f7fb ffa7 	bl	800258c <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 800663e:	f240 7103 	movw	r1, #1795	; 0x703
 8006642:	2030      	movs	r0, #48	; 0x30
 8006644:	f7fb ffa2 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8006648:	2101      	movs	r1, #1
 800664a:	2031      	movs	r0, #49	; 0x31
 800664c:	f7fb ff9e 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8006650:	2104      	movs	r1, #4
 8006652:	2032      	movs	r0, #50	; 0x32
 8006654:	f7fb ff9a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8006658:	f44f 7181 	mov.w	r1, #258	; 0x102
 800665c:	2033      	movs	r0, #51	; 0x33
 800665e:	f7fb ff95 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 8006662:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006666:	2034      	movs	r0, #52	; 0x34
 8006668:	f7fb ff90 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 800666c:	f240 1103 	movw	r1, #259	; 0x103
 8006670:	2035      	movs	r0, #53	; 0x35
 8006672:	f7fb ff8b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 8006676:	211f      	movs	r1, #31
 8006678:	2036      	movs	r0, #54	; 0x36
 800667a:	f7fb ff87 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 800667e:	f240 7103 	movw	r1, #1795	; 0x703
 8006682:	2037      	movs	r0, #55	; 0x37
 8006684:	f7fb ff82 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 8006688:	2101      	movs	r1, #1
 800668a:	2038      	movs	r0, #56	; 0x38
 800668c:	f7fb ff7e 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 8006690:	2104      	movs	r1, #4
 8006692:	2039      	movs	r0, #57	; 0x39
 8006694:	f7fb ff7a 	bl	800258c <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8006698:	2115      	movs	r1, #21
 800669a:	2090      	movs	r0, #144	; 0x90
 800669c:	f7fb ff76 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 80066a0:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80066a4:	2010      	movs	r0, #16
 80066a6:	f7fb ff71 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 80066aa:	f240 2147 	movw	r1, #583	; 0x247
 80066ae:	2011      	movs	r0, #17
 80066b0:	f7fb ff6c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 80066b4:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80066b8:	2012      	movs	r0, #18
 80066ba:	f7fb ff67 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 80066be:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 80066c2:	2013      	movs	r0, #19
 80066c4:	f7fb ff62 	bl	800258c <LCD_WriteReg>
		HAL_Delay(120);
 80066c8:	2078      	movs	r0, #120	; 0x78
 80066ca:	f7fa fc83 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 80066ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066d2:	2001      	movs	r0, #1
 80066d4:	f7fb ff5a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 80066d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066dc:	2002      	movs	r0, #2
 80066de:	f7fb ff55 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 80066e2:	f241 0130 	movw	r1, #4144	; 0x1030
 80066e6:	2003      	movs	r0, #3
 80066e8:	f7fb ff50 	bl	800258c <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 80066ec:	2108      	movs	r1, #8
 80066ee:	200a      	movs	r0, #10
 80066f0:	f7fb ff4c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80066f4:	2100      	movs	r1, #0
 80066f6:	200c      	movs	r0, #12
 80066f8:	f7fb ff48 	bl	800258c <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 80066fc:	2120      	movs	r1, #32
 80066fe:	200e      	movs	r0, #14
 8006700:	f7fb ff44 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8006704:	2100      	movs	r1, #0
 8006706:	200f      	movs	r0, #15
 8006708:	f7fb ff40 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 800670c:	2100      	movs	r1, #0
 800670e:	2020      	movs	r0, #32
 8006710:	f7fb ff3c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8006714:	2100      	movs	r1, #0
 8006716:	2021      	movs	r0, #33	; 0x21
 8006718:	f7fb ff38 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 800671c:	213d      	movs	r1, #61	; 0x3d
 800671e:	202a      	movs	r0, #42	; 0x2a
 8006720:	f7fb ff34 	bl	800258c <LCD_WriteReg>
		HAL_Delay(20);
 8006724:	2014      	movs	r0, #20
 8006726:	f7fa fc55 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 800672a:	212d      	movs	r1, #45	; 0x2d
 800672c:	2029      	movs	r0, #41	; 0x29
 800672e:	f7fb ff2d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8006732:	2100      	movs	r1, #0
 8006734:	2050      	movs	r0, #80	; 0x50
 8006736:	f7fb ff29 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 800673a:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 800673e:	2051      	movs	r0, #81	; 0x51
 8006740:	f7fb ff24 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8006744:	2100      	movs	r1, #0
 8006746:	2052      	movs	r0, #82	; 0x52
 8006748:	f7fb ff20 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800674c:	f240 113f 	movw	r1, #319	; 0x13f
 8006750:	2053      	movs	r0, #83	; 0x53
 8006752:	f7fb ff1b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8006756:	2100      	movs	r1, #0
 8006758:	2061      	movs	r0, #97	; 0x61
 800675a:	f7fb ff17 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 800675e:	2100      	movs	r1, #0
 8006760:	206a      	movs	r0, #106	; 0x6a
 8006762:	f7fb ff13 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8006766:	f44f 7140 	mov.w	r1, #768	; 0x300
 800676a:	2092      	movs	r0, #146	; 0x92
 800676c:	f7fb ff0e 	bl	800258c <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 8006770:	2105      	movs	r1, #5
 8006772:	2093      	movs	r0, #147	; 0x93
 8006774:	f7fb ff0a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8006778:	f44f 7180 	mov.w	r1, #256	; 0x100
 800677c:	2007      	movs	r0, #7
 800677e:	f7fb ff05 	bl	800258c <LCD_WriteReg>
 8006782:	f000 bdf3 	b.w	800736c <LCD_Init+0x3e34>
 8006786:	bf00      	nop
 8006788:	2000018c 	.word	0x2000018c
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 800678c:	4bc2      	ldr	r3, [pc, #776]	; (8006a98 <LCD_Init+0x3560>)
 800678e:	889b      	ldrh	r3, [r3, #4]
 8006790:	f648 1289 	movw	r2, #35209	; 0x8989
 8006794:	4293      	cmp	r3, r2
 8006796:	f040 80bc 	bne.w	8006912 <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 800679a:	2101      	movs	r1, #1
 800679c:	2000      	movs	r0, #0
 800679e:	f7fb fef5 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 80067a2:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 80067a6:	2003      	movs	r0, #3
 80067a8:	f7fb fef0 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80067ac:	2100      	movs	r1, #0
 80067ae:	200c      	movs	r0, #12
 80067b0:	f7fb feec 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 80067b4:	f640 010c 	movw	r1, #2060	; 0x80c
 80067b8:	200d      	movs	r0, #13
 80067ba:	f7fb fee7 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 80067be:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 80067c2:	200e      	movs	r0, #14
 80067c4:	f7fb fee2 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 80067c8:	21b0      	movs	r1, #176	; 0xb0
 80067ca:	201e      	movs	r0, #30
 80067cc:	f7fb fede 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 80067d0:	f642 313f 	movw	r1, #11071	; 0x2b3f
 80067d4:	2001      	movs	r0, #1
 80067d6:	f7fb fed9 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 80067da:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80067de:	2002      	movs	r0, #2
 80067e0:	f7fb fed4 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 80067e4:	2100      	movs	r1, #0
 80067e6:	2010      	movs	r0, #16
 80067e8:	f7fb fed0 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 80067ec:	f246 0178 	movw	r1, #24696	; 0x6078
 80067f0:	2011      	movs	r0, #17
 80067f2:	f7fb fecb 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 80067f6:	2100      	movs	r1, #0
 80067f8:	2005      	movs	r0, #5
 80067fa:	f7fb fec7 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 80067fe:	2100      	movs	r1, #0
 8006800:	2006      	movs	r0, #6
 8006802:	f7fb fec3 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 8006806:	f64e 711c 	movw	r1, #61212	; 0xef1c
 800680a:	2016      	movs	r0, #22
 800680c:	f7fb febe 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8006810:	2103      	movs	r1, #3
 8006812:	2017      	movs	r0, #23
 8006814:	f7fb feba 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8006818:	f240 2133 	movw	r1, #563	; 0x233
 800681c:	2007      	movs	r0, #7
 800681e:	f7fb feb5 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 8006822:	2100      	movs	r1, #0
 8006824:	200b      	movs	r0, #11
 8006826:	f7fb feb1 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 800682a:	2100      	movs	r1, #0
 800682c:	200f      	movs	r0, #15
 800682e:	f7fb fead 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 8006832:	2100      	movs	r1, #0
 8006834:	2041      	movs	r0, #65	; 0x41
 8006836:	f7fb fea9 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 800683a:	2100      	movs	r1, #0
 800683c:	2042      	movs	r0, #66	; 0x42
 800683e:	f7fb fea5 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 8006842:	2100      	movs	r1, #0
 8006844:	2048      	movs	r0, #72	; 0x48
 8006846:	f7fb fea1 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 800684a:	f240 113f 	movw	r1, #319	; 0x13f
 800684e:	2049      	movs	r0, #73	; 0x49
 8006850:	f7fb fe9c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 8006854:	2100      	movs	r1, #0
 8006856:	204a      	movs	r0, #74	; 0x4a
 8006858:	f7fb fe98 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 800685c:	2100      	movs	r1, #0
 800685e:	204b      	movs	r0, #75	; 0x4b
 8006860:	f7fb fe94 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 8006864:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8006868:	2044      	movs	r0, #68	; 0x44
 800686a:	f7fb fe8f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 800686e:	2100      	movs	r1, #0
 8006870:	2045      	movs	r0, #69	; 0x45
 8006872:	f7fb fe8b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 8006876:	f240 113f 	movw	r1, #319	; 0x13f
 800687a:	2046      	movs	r0, #70	; 0x46
 800687c:	f7fb fe86 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 8006880:	f240 7107 	movw	r1, #1799	; 0x707
 8006884:	2030      	movs	r0, #48	; 0x30
 8006886:	f7fb fe81 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 800688a:	f44f 7101 	mov.w	r1, #516	; 0x204
 800688e:	2031      	movs	r0, #49	; 0x31
 8006890:	f7fb fe7c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 8006894:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006898:	2032      	movs	r0, #50	; 0x32
 800689a:	f7fb fe77 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 800689e:	f240 5102 	movw	r1, #1282	; 0x502
 80068a2:	2033      	movs	r0, #51	; 0x33
 80068a4:	f7fb fe72 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 80068a8:	f240 5107 	movw	r1, #1287	; 0x507
 80068ac:	2034      	movs	r0, #52	; 0x34
 80068ae:	f7fb fe6d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80068b2:	f44f 7101 	mov.w	r1, #516	; 0x204
 80068b6:	2035      	movs	r0, #53	; 0x35
 80068b8:	f7fb fe68 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 80068bc:	f44f 7101 	mov.w	r1, #516	; 0x204
 80068c0:	2036      	movs	r0, #54	; 0x36
 80068c2:	f7fb fe63 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 80068c6:	f240 5102 	movw	r1, #1282	; 0x502
 80068ca:	2037      	movs	r0, #55	; 0x37
 80068cc:	f7fb fe5e 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 80068d0:	f240 3102 	movw	r1, #770	; 0x302
 80068d4:	203a      	movs	r0, #58	; 0x3a
 80068d6:	f7fb fe59 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 80068da:	f240 3102 	movw	r1, #770	; 0x302
 80068de:	203b      	movs	r0, #59	; 0x3b
 80068e0:	f7fb fe54 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 80068e4:	2100      	movs	r1, #0
 80068e6:	2023      	movs	r0, #35	; 0x23
 80068e8:	f7fb fe50 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 80068ec:	2100      	movs	r1, #0
 80068ee:	2024      	movs	r0, #36	; 0x24
 80068f0:	f7fb fe4c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 80068f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80068f8:	2025      	movs	r0, #37	; 0x25
 80068fa:	f7fb fe47 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 80068fe:	2100      	movs	r1, #0
 8006900:	204f      	movs	r0, #79	; 0x4f
 8006902:	f7fb fe43 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 8006906:	2100      	movs	r1, #0
 8006908:	204e      	movs	r0, #78	; 0x4e
 800690a:	f7fb fe3f 	bl	800258c <LCD_WriteReg>
 800690e:	f000 bd2d 	b.w	800736c <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 8006912:	4b61      	ldr	r3, [pc, #388]	; (8006a98 <LCD_Init+0x3560>)
 8006914:	889b      	ldrh	r3, [r3, #4]
 8006916:	f244 5231 	movw	r2, #17713	; 0x4531
 800691a:	4293      	cmp	r3, r2
 800691c:	f040 80be 	bne.w	8006a9c <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8006920:	2101      	movs	r1, #1
 8006922:	2000      	movs	r0, #0
 8006924:	f7fb fe32 	bl	800258c <LCD_WriteReg>
		HAL_Delay(10);
 8006928:	200a      	movs	r0, #10
 800692a:	f7fa fb53 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 800692e:	f241 6128 	movw	r1, #5672	; 0x1628
 8006932:	2010      	movs	r0, #16
 8006934:	f7fb fe2a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8006938:	210e      	movs	r1, #14
 800693a:	2012      	movs	r0, #18
 800693c:	f7fb fe26 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8006940:	f640 2139 	movw	r1, #2617	; 0xa39
 8006944:	2013      	movs	r0, #19
 8006946:	f7fb fe21 	bl	800258c <LCD_WriteReg>
		HAL_Delay(10);
 800694a:	200a      	movs	r0, #10
 800694c:	f7fa fb42 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8006950:	2140      	movs	r1, #64	; 0x40
 8006952:	2011      	movs	r0, #17
 8006954:	f7fb fe1a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8006958:	2150      	movs	r1, #80	; 0x50
 800695a:	2015      	movs	r0, #21
 800695c:	f7fb fe16 	bl	800258c <LCD_WriteReg>
		HAL_Delay(10);
 8006960:	200a      	movs	r0, #10
 8006962:	f7fa fb37 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 8006966:	211e      	movs	r1, #30
 8006968:	2012      	movs	r0, #18
 800696a:	f7fb fe0f 	bl	800258c <LCD_WriteReg>
		HAL_Delay(10);
 800696e:	200a      	movs	r0, #10
 8006970:	f7fa fb30 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 8006974:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8006978:	2010      	movs	r0, #16
 800697a:	f7fb fe07 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 800697e:	f642 2139 	movw	r1, #10809	; 0x2a39
 8006982:	2013      	movs	r0, #19
 8006984:	f7fb fe02 	bl	800258c <LCD_WriteReg>
		HAL_Delay(10);
 8006988:	200a      	movs	r0, #10
 800698a:	f7fa fb23 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 800698e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006992:	2001      	movs	r0, #1
 8006994:	f7fb fdfa 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8006998:	f44f 7140 	mov.w	r1, #768	; 0x300
 800699c:	2002      	movs	r0, #2
 800699e:	f7fb fdf5 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 80069a2:	f241 0138 	movw	r1, #4152	; 0x1038
 80069a6:	2003      	movs	r0, #3
 80069a8:	f7fb fdf0 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 80069ac:	f240 2102 	movw	r1, #514	; 0x202
 80069b0:	2008      	movs	r0, #8
 80069b2:	f7fb fdeb 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80069b6:	2108      	movs	r1, #8
 80069b8:	200a      	movs	r0, #10
 80069ba:	f7fb fde7 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 80069be:	2100      	movs	r1, #0
 80069c0:	2030      	movs	r0, #48	; 0x30
 80069c2:	f7fb fde3 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 80069c6:	f240 4102 	movw	r1, #1026	; 0x402
 80069ca:	2031      	movs	r0, #49	; 0x31
 80069cc:	f7fb fdde 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 80069d0:	f44f 7183 	mov.w	r1, #262	; 0x106
 80069d4:	2032      	movs	r0, #50	; 0x32
 80069d6:	f7fb fdd9 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 80069da:	f240 5103 	movw	r1, #1283	; 0x503
 80069de:	2033      	movs	r0, #51	; 0x33
 80069e0:	f7fb fdd4 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 80069e4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80069e8:	2034      	movs	r0, #52	; 0x34
 80069ea:	f7fb fdcf 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 80069ee:	f240 3101 	movw	r1, #769	; 0x301
 80069f2:	2035      	movs	r0, #53	; 0x35
 80069f4:	f7fb fdca 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 80069f8:	f240 7107 	movw	r1, #1799	; 0x707
 80069fc:	2036      	movs	r0, #54	; 0x36
 80069fe:	f7fb fdc5 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8006a02:	f240 3105 	movw	r1, #773	; 0x305
 8006a06:	2037      	movs	r0, #55	; 0x37
 8006a08:	f7fb fdc0 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 8006a0c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8006a10:	2038      	movs	r0, #56	; 0x38
 8006a12:	f7fb fdbb 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 8006a16:	f640 710b 	movw	r1, #3851	; 0xf0b
 8006a1a:	2039      	movs	r0, #57	; 0x39
 8006a1c:	f7fb fdb6 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8006a20:	2102      	movs	r1, #2
 8006a22:	2041      	movs	r0, #65	; 0x41
 8006a24:	f7fb fdb2 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8006a28:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006a2c:	2060      	movs	r0, #96	; 0x60
 8006a2e:	f7fb fdad 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8006a32:	2101      	movs	r1, #1
 8006a34:	2061      	movs	r0, #97	; 0x61
 8006a36:	f7fb fda9 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 8006a3a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006a3e:	2090      	movs	r0, #144	; 0x90
 8006a40:	f7fb fda4 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 8006a44:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8006a48:	2092      	movs	r0, #146	; 0x92
 8006a4a:	f7fb fd9f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 8006a4e:	2104      	movs	r1, #4
 8006a50:	2093      	movs	r0, #147	; 0x93
 8006a52:	f7fb fd9b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 8006a56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a5a:	20a0      	movs	r0, #160	; 0xa0
 8006a5c:	f7fb fd96 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8006a60:	2101      	movs	r1, #1
 8006a62:	2007      	movs	r0, #7
 8006a64:	f7fb fd92 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8006a68:	2121      	movs	r1, #33	; 0x21
 8006a6a:	2007      	movs	r0, #7
 8006a6c:	f7fb fd8e 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8006a70:	2123      	movs	r1, #35	; 0x23
 8006a72:	2007      	movs	r0, #7
 8006a74:	f7fb fd8a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8006a78:	2133      	movs	r1, #51	; 0x33
 8006a7a:	2007      	movs	r0, #7
 8006a7c:	f7fb fd86 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8006a80:	f240 1133 	movw	r1, #307	; 0x133
 8006a84:	2007      	movs	r0, #7
 8006a86:	f7fb fd81 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	20a0      	movs	r0, #160	; 0xa0
 8006a8e:	f7fb fd7d 	bl	800258c <LCD_WriteReg>
 8006a92:	f000 bc6b 	b.w	800736c <LCD_Init+0x3e34>
 8006a96:	bf00      	nop
 8006a98:	2000018c 	.word	0x2000018c
	} else if (lcddev.id == 0x4535) {
 8006a9c:	4b5b      	ldr	r3, [pc, #364]	; (8006c0c <LCD_Init+0x36d4>)
 8006a9e:	889b      	ldrh	r3, [r3, #4]
 8006aa0:	f244 5235 	movw	r2, #17717	; 0x4535
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	f040 80b3 	bne.w	8006c10 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 8006aaa:	2130      	movs	r1, #48	; 0x30
 8006aac:	2015      	movs	r0, #21
 8006aae:	f7fb fd6d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 8006ab2:	2110      	movs	r1, #16
 8006ab4:	209a      	movs	r0, #154	; 0x9a
 8006ab6:	f7fb fd69 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 8006aba:	2120      	movs	r1, #32
 8006abc:	2011      	movs	r0, #17
 8006abe:	f7fb fd65 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 8006ac2:	f243 4128 	movw	r1, #13352	; 0x3428
 8006ac6:	2010      	movs	r0, #16
 8006ac8:	f7fb fd60 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 8006acc:	2102      	movs	r1, #2
 8006ace:	2012      	movs	r0, #18
 8006ad0:	f7fb fd5c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 8006ad4:	f241 0138 	movw	r1, #4152	; 0x1038
 8006ad8:	2013      	movs	r0, #19
 8006ada:	f7fb fd57 	bl	800258c <LCD_WriteReg>
		HAL_Delay(40);
 8006ade:	2028      	movs	r0, #40	; 0x28
 8006ae0:	f7fa fa78 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 8006ae4:	2112      	movs	r1, #18
 8006ae6:	2012      	movs	r0, #18
 8006ae8:	f7fb fd50 	bl	800258c <LCD_WriteReg>
		HAL_Delay(40);
 8006aec:	2028      	movs	r0, #40	; 0x28
 8006aee:	f7fa fa71 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 8006af2:	f243 4120 	movw	r1, #13344	; 0x3420
 8006af6:	2010      	movs	r0, #16
 8006af8:	f7fb fd48 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 8006afc:	f243 0138 	movw	r1, #12344	; 0x3038
 8006b00:	2013      	movs	r0, #19
 8006b02:	f7fb fd43 	bl	800258c <LCD_WriteReg>
		HAL_Delay(70);
 8006b06:	2046      	movs	r0, #70	; 0x46
 8006b08:	f7fa fa64 	bl	8000fd4 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	2030      	movs	r0, #48	; 0x30
 8006b10:	f7fb fd3c 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 8006b14:	f240 4102 	movw	r1, #1026	; 0x402
 8006b18:	2031      	movs	r0, #49	; 0x31
 8006b1a:	f7fb fd37 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 8006b1e:	f240 3107 	movw	r1, #775	; 0x307
 8006b22:	2032      	movs	r0, #50	; 0x32
 8006b24:	f7fb fd32 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8006b28:	f44f 7141 	mov.w	r1, #772	; 0x304
 8006b2c:	2033      	movs	r0, #51	; 0x33
 8006b2e:	f7fb fd2d 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 8006b32:	2104      	movs	r1, #4
 8006b34:	2034      	movs	r0, #52	; 0x34
 8006b36:	f7fb fd29 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 8006b3a:	f240 4101 	movw	r1, #1025	; 0x401
 8006b3e:	2035      	movs	r0, #53	; 0x35
 8006b40:	f7fb fd24 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8006b44:	f240 7107 	movw	r1, #1799	; 0x707
 8006b48:	2036      	movs	r0, #54	; 0x36
 8006b4a:	f7fb fd1f 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8006b4e:	f240 3105 	movw	r1, #773	; 0x305
 8006b52:	2037      	movs	r0, #55	; 0x37
 8006b54:	f7fb fd1a 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8006b58:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8006b5c:	2038      	movs	r0, #56	; 0x38
 8006b5e:	f7fb fd15 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 8006b62:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8006b66:	2039      	movs	r0, #57	; 0x39
 8006b68:	f7fb fd10 	bl	800258c <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 8006b6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b70:	2001      	movs	r0, #1
 8006b72:	f7fb fd0b 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8006b76:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006b7a:	2002      	movs	r0, #2
 8006b7c:	f7fb fd06 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 8006b80:	f241 0130 	movw	r1, #4144	; 0x1030
 8006b84:	2003      	movs	r0, #3
 8006b86:	f7fb fd01 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 8006b8a:	f640 0108 	movw	r1, #2056	; 0x808
 8006b8e:	2008      	movs	r0, #8
 8006b90:	f7fb fcfc 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 8006b94:	2108      	movs	r1, #8
 8006b96:	200a      	movs	r0, #10
 8006b98:	f7fb fcf8 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8006b9c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006ba0:	2060      	movs	r0, #96	; 0x60
 8006ba2:	f7fb fcf3 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 8006ba6:	2101      	movs	r1, #1
 8006ba8:	2061      	movs	r0, #97	; 0x61
 8006baa:	f7fb fcef 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 8006bae:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8006bb2:	2090      	movs	r0, #144	; 0x90
 8006bb4:	f7fb fcea 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 8006bb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006bbc:	2092      	movs	r0, #146	; 0x92
 8006bbe:	f7fb fce5 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 8006bc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006bc6:	2093      	movs	r0, #147	; 0x93
 8006bc8:	f7fb fce0 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 8006bcc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006bd0:	20a0      	movs	r0, #160	; 0xa0
 8006bd2:	f7fb fcdb 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 8006bd6:	2110      	movs	r1, #16
 8006bd8:	20a3      	movs	r0, #163	; 0xa3
 8006bda:	f7fb fcd7 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8006bde:	2101      	movs	r1, #1
 8006be0:	2007      	movs	r0, #7
 8006be2:	f7fb fcd3 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8006be6:	2121      	movs	r1, #33	; 0x21
 8006be8:	2007      	movs	r0, #7
 8006bea:	f7fb fccf 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8006bee:	2123      	movs	r1, #35	; 0x23
 8006bf0:	2007      	movs	r0, #7
 8006bf2:	f7fb fccb 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8006bf6:	2133      	movs	r1, #51	; 0x33
 8006bf8:	2007      	movs	r0, #7
 8006bfa:	f7fb fcc7 	bl	800258c <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8006bfe:	f240 1133 	movw	r1, #307	; 0x133
 8006c02:	2007      	movs	r0, #7
 8006c04:	f7fb fcc2 	bl	800258c <LCD_WriteReg>
 8006c08:	e3b0      	b.n	800736c <LCD_Init+0x3e34>
 8006c0a:	bf00      	nop
 8006c0c:	2000018c 	.word	0x2000018c
	} else if (lcddev.id == 0X1963) {
 8006c10:	4ba8      	ldr	r3, [pc, #672]	; (8006eb4 <LCD_Init+0x397c>)
 8006c12:	889b      	ldrh	r3, [r3, #4]
 8006c14:	f641 1263 	movw	r2, #6499	; 0x1963
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	f040 83a7 	bne.w	800736c <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8006c1e:	20e2      	movs	r0, #226	; 0xe2
 8006c20:	f7fb fc28 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 8006c24:	4ba4      	ldr	r3, [pc, #656]	; (8006eb8 <LCD_Init+0x3980>)
 8006c26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c2a:	611a      	str	r2, [r3, #16]
 8006c2c:	4ba2      	ldr	r3, [pc, #648]	; (8006eb8 <LCD_Init+0x3980>)
 8006c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c32:	615a      	str	r2, [r3, #20]
 8006c34:	4ba1      	ldr	r3, [pc, #644]	; (8006ebc <LCD_Init+0x3984>)
 8006c36:	221d      	movs	r2, #29
 8006c38:	60da      	str	r2, [r3, #12]
 8006c3a:	4b9f      	ldr	r3, [pc, #636]	; (8006eb8 <LCD_Init+0x3980>)
 8006c3c:	2280      	movs	r2, #128	; 0x80
 8006c3e:	615a      	str	r2, [r3, #20]
 8006c40:	4b9d      	ldr	r3, [pc, #628]	; (8006eb8 <LCD_Init+0x3980>)
 8006c42:	2280      	movs	r2, #128	; 0x80
 8006c44:	611a      	str	r2, [r3, #16]
 8006c46:	4b9c      	ldr	r3, [pc, #624]	; (8006eb8 <LCD_Init+0x3980>)
 8006c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c4c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8006c4e:	4b9a      	ldr	r3, [pc, #616]	; (8006eb8 <LCD_Init+0x3980>)
 8006c50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c54:	611a      	str	r2, [r3, #16]
 8006c56:	4b98      	ldr	r3, [pc, #608]	; (8006eb8 <LCD_Init+0x3980>)
 8006c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c5c:	615a      	str	r2, [r3, #20]
 8006c5e:	4b97      	ldr	r3, [pc, #604]	; (8006ebc <LCD_Init+0x3984>)
 8006c60:	2202      	movs	r2, #2
 8006c62:	60da      	str	r2, [r3, #12]
 8006c64:	4b94      	ldr	r3, [pc, #592]	; (8006eb8 <LCD_Init+0x3980>)
 8006c66:	2280      	movs	r2, #128	; 0x80
 8006c68:	615a      	str	r2, [r3, #20]
 8006c6a:	4b93      	ldr	r3, [pc, #588]	; (8006eb8 <LCD_Init+0x3980>)
 8006c6c:	2280      	movs	r2, #128	; 0x80
 8006c6e:	611a      	str	r2, [r3, #16]
 8006c70:	4b91      	ldr	r3, [pc, #580]	; (8006eb8 <LCD_Init+0x3980>)
 8006c72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c76:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 8006c78:	4b8f      	ldr	r3, [pc, #572]	; (8006eb8 <LCD_Init+0x3980>)
 8006c7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c7e:	611a      	str	r2, [r3, #16]
 8006c80:	4b8d      	ldr	r3, [pc, #564]	; (8006eb8 <LCD_Init+0x3980>)
 8006c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c86:	615a      	str	r2, [r3, #20]
 8006c88:	4b8c      	ldr	r3, [pc, #560]	; (8006ebc <LCD_Init+0x3984>)
 8006c8a:	2204      	movs	r2, #4
 8006c8c:	60da      	str	r2, [r3, #12]
 8006c8e:	4b8a      	ldr	r3, [pc, #552]	; (8006eb8 <LCD_Init+0x3980>)
 8006c90:	2280      	movs	r2, #128	; 0x80
 8006c92:	615a      	str	r2, [r3, #20]
 8006c94:	4b88      	ldr	r3, [pc, #544]	; (8006eb8 <LCD_Init+0x3980>)
 8006c96:	2280      	movs	r2, #128	; 0x80
 8006c98:	611a      	str	r2, [r3, #16]
 8006c9a:	4b87      	ldr	r3, [pc, #540]	; (8006eb8 <LCD_Init+0x3980>)
 8006c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ca0:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 8006ca2:	2001      	movs	r0, #1
 8006ca4:	f7fa f996 	bl	8000fd4 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8006ca8:	20e0      	movs	r0, #224	; 0xe0
 8006caa:	f7fb fbe3 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8006cae:	4b82      	ldr	r3, [pc, #520]	; (8006eb8 <LCD_Init+0x3980>)
 8006cb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cb4:	611a      	str	r2, [r3, #16]
 8006cb6:	4b80      	ldr	r3, [pc, #512]	; (8006eb8 <LCD_Init+0x3980>)
 8006cb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cbc:	615a      	str	r2, [r3, #20]
 8006cbe:	4b7f      	ldr	r3, [pc, #508]	; (8006ebc <LCD_Init+0x3984>)
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	60da      	str	r2, [r3, #12]
 8006cc4:	4b7c      	ldr	r3, [pc, #496]	; (8006eb8 <LCD_Init+0x3980>)
 8006cc6:	2280      	movs	r2, #128	; 0x80
 8006cc8:	615a      	str	r2, [r3, #20]
 8006cca:	4b7b      	ldr	r3, [pc, #492]	; (8006eb8 <LCD_Init+0x3980>)
 8006ccc:	2280      	movs	r2, #128	; 0x80
 8006cce:	611a      	str	r2, [r3, #16]
 8006cd0:	4b79      	ldr	r3, [pc, #484]	; (8006eb8 <LCD_Init+0x3980>)
 8006cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cd6:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8006cd8:	200a      	movs	r0, #10
 8006cda:	f7fa f97b 	bl	8000fd4 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8006cde:	20e0      	movs	r0, #224	; 0xe0
 8006ce0:	f7fb fbc8 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 8006ce4:	4b74      	ldr	r3, [pc, #464]	; (8006eb8 <LCD_Init+0x3980>)
 8006ce6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cea:	611a      	str	r2, [r3, #16]
 8006cec:	4b72      	ldr	r3, [pc, #456]	; (8006eb8 <LCD_Init+0x3980>)
 8006cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cf2:	615a      	str	r2, [r3, #20]
 8006cf4:	4b71      	ldr	r3, [pc, #452]	; (8006ebc <LCD_Init+0x3984>)
 8006cf6:	2203      	movs	r2, #3
 8006cf8:	60da      	str	r2, [r3, #12]
 8006cfa:	4b6f      	ldr	r3, [pc, #444]	; (8006eb8 <LCD_Init+0x3980>)
 8006cfc:	2280      	movs	r2, #128	; 0x80
 8006cfe:	615a      	str	r2, [r3, #20]
 8006d00:	4b6d      	ldr	r3, [pc, #436]	; (8006eb8 <LCD_Init+0x3980>)
 8006d02:	2280      	movs	r2, #128	; 0x80
 8006d04:	611a      	str	r2, [r3, #16]
 8006d06:	4b6c      	ldr	r3, [pc, #432]	; (8006eb8 <LCD_Init+0x3980>)
 8006d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d0c:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 8006d0e:	200c      	movs	r0, #12
 8006d10:	f7fa f960 	bl	8000fd4 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8006d14:	2001      	movs	r0, #1
 8006d16:	f7fb fbad 	bl	8002474 <LCD_WR_REG>
		HAL_Delay(10);
 8006d1a:	200a      	movs	r0, #10
 8006d1c:	f7fa f95a 	bl	8000fd4 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8006d20:	20e6      	movs	r0, #230	; 0xe6
 8006d22:	f7fb fba7 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8006d26:	4b64      	ldr	r3, [pc, #400]	; (8006eb8 <LCD_Init+0x3980>)
 8006d28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d2c:	611a      	str	r2, [r3, #16]
 8006d2e:	4b62      	ldr	r3, [pc, #392]	; (8006eb8 <LCD_Init+0x3980>)
 8006d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d34:	615a      	str	r2, [r3, #20]
 8006d36:	4b61      	ldr	r3, [pc, #388]	; (8006ebc <LCD_Init+0x3984>)
 8006d38:	222f      	movs	r2, #47	; 0x2f
 8006d3a:	60da      	str	r2, [r3, #12]
 8006d3c:	4b5e      	ldr	r3, [pc, #376]	; (8006eb8 <LCD_Init+0x3980>)
 8006d3e:	2280      	movs	r2, #128	; 0x80
 8006d40:	615a      	str	r2, [r3, #20]
 8006d42:	4b5d      	ldr	r3, [pc, #372]	; (8006eb8 <LCD_Init+0x3980>)
 8006d44:	2280      	movs	r2, #128	; 0x80
 8006d46:	611a      	str	r2, [r3, #16]
 8006d48:	4b5b      	ldr	r3, [pc, #364]	; (8006eb8 <LCD_Init+0x3980>)
 8006d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d4e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8006d50:	4b59      	ldr	r3, [pc, #356]	; (8006eb8 <LCD_Init+0x3980>)
 8006d52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d56:	611a      	str	r2, [r3, #16]
 8006d58:	4b57      	ldr	r3, [pc, #348]	; (8006eb8 <LCD_Init+0x3980>)
 8006d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d5e:	615a      	str	r2, [r3, #20]
 8006d60:	4b56      	ldr	r3, [pc, #344]	; (8006ebc <LCD_Init+0x3984>)
 8006d62:	22ff      	movs	r2, #255	; 0xff
 8006d64:	60da      	str	r2, [r3, #12]
 8006d66:	4b54      	ldr	r3, [pc, #336]	; (8006eb8 <LCD_Init+0x3980>)
 8006d68:	2280      	movs	r2, #128	; 0x80
 8006d6a:	615a      	str	r2, [r3, #20]
 8006d6c:	4b52      	ldr	r3, [pc, #328]	; (8006eb8 <LCD_Init+0x3980>)
 8006d6e:	2280      	movs	r2, #128	; 0x80
 8006d70:	611a      	str	r2, [r3, #16]
 8006d72:	4b51      	ldr	r3, [pc, #324]	; (8006eb8 <LCD_Init+0x3980>)
 8006d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d78:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8006d7a:	4b4f      	ldr	r3, [pc, #316]	; (8006eb8 <LCD_Init+0x3980>)
 8006d7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d80:	611a      	str	r2, [r3, #16]
 8006d82:	4b4d      	ldr	r3, [pc, #308]	; (8006eb8 <LCD_Init+0x3980>)
 8006d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d88:	615a      	str	r2, [r3, #20]
 8006d8a:	4b4c      	ldr	r3, [pc, #304]	; (8006ebc <LCD_Init+0x3984>)
 8006d8c:	22ff      	movs	r2, #255	; 0xff
 8006d8e:	60da      	str	r2, [r3, #12]
 8006d90:	4b49      	ldr	r3, [pc, #292]	; (8006eb8 <LCD_Init+0x3980>)
 8006d92:	2280      	movs	r2, #128	; 0x80
 8006d94:	615a      	str	r2, [r3, #20]
 8006d96:	4b48      	ldr	r3, [pc, #288]	; (8006eb8 <LCD_Init+0x3980>)
 8006d98:	2280      	movs	r2, #128	; 0x80
 8006d9a:	611a      	str	r2, [r3, #16]
 8006d9c:	4b46      	ldr	r3, [pc, #280]	; (8006eb8 <LCD_Init+0x3980>)
 8006d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006da2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 8006da4:	20b0      	movs	r0, #176	; 0xb0
 8006da6:	f7fb fb65 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8006daa:	4b43      	ldr	r3, [pc, #268]	; (8006eb8 <LCD_Init+0x3980>)
 8006dac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006db0:	611a      	str	r2, [r3, #16]
 8006db2:	4b41      	ldr	r3, [pc, #260]	; (8006eb8 <LCD_Init+0x3980>)
 8006db4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006db8:	615a      	str	r2, [r3, #20]
 8006dba:	4b40      	ldr	r3, [pc, #256]	; (8006ebc <LCD_Init+0x3984>)
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	60da      	str	r2, [r3, #12]
 8006dc0:	4b3d      	ldr	r3, [pc, #244]	; (8006eb8 <LCD_Init+0x3980>)
 8006dc2:	2280      	movs	r2, #128	; 0x80
 8006dc4:	615a      	str	r2, [r3, #20]
 8006dc6:	4b3c      	ldr	r3, [pc, #240]	; (8006eb8 <LCD_Init+0x3980>)
 8006dc8:	2280      	movs	r2, #128	; 0x80
 8006dca:	611a      	str	r2, [r3, #16]
 8006dcc:	4b3a      	ldr	r3, [pc, #232]	; (8006eb8 <LCD_Init+0x3980>)
 8006dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dd2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 8006dd4:	4b38      	ldr	r3, [pc, #224]	; (8006eb8 <LCD_Init+0x3980>)
 8006dd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006dda:	611a      	str	r2, [r3, #16]
 8006ddc:	4b36      	ldr	r3, [pc, #216]	; (8006eb8 <LCD_Init+0x3980>)
 8006dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006de2:	615a      	str	r2, [r3, #20]
 8006de4:	4b35      	ldr	r3, [pc, #212]	; (8006ebc <LCD_Init+0x3984>)
 8006de6:	2200      	movs	r2, #0
 8006de8:	60da      	str	r2, [r3, #12]
 8006dea:	4b33      	ldr	r3, [pc, #204]	; (8006eb8 <LCD_Init+0x3980>)
 8006dec:	2280      	movs	r2, #128	; 0x80
 8006dee:	615a      	str	r2, [r3, #20]
 8006df0:	4b31      	ldr	r3, [pc, #196]	; (8006eb8 <LCD_Init+0x3980>)
 8006df2:	2280      	movs	r2, #128	; 0x80
 8006df4:	611a      	str	r2, [r3, #16]
 8006df6:	4b30      	ldr	r3, [pc, #192]	; (8006eb8 <LCD_Init+0x3980>)
 8006df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dfc:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 8006dfe:	4b2e      	ldr	r3, [pc, #184]	; (8006eb8 <LCD_Init+0x3980>)
 8006e00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e04:	611a      	str	r2, [r3, #16]
 8006e06:	4b2c      	ldr	r3, [pc, #176]	; (8006eb8 <LCD_Init+0x3980>)
 8006e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e0c:	615a      	str	r2, [r3, #20]
 8006e0e:	4b2b      	ldr	r3, [pc, #172]	; (8006ebc <LCD_Init+0x3984>)
 8006e10:	2203      	movs	r2, #3
 8006e12:	60da      	str	r2, [r3, #12]
 8006e14:	4b28      	ldr	r3, [pc, #160]	; (8006eb8 <LCD_Init+0x3980>)
 8006e16:	2280      	movs	r2, #128	; 0x80
 8006e18:	615a      	str	r2, [r3, #20]
 8006e1a:	4b27      	ldr	r3, [pc, #156]	; (8006eb8 <LCD_Init+0x3980>)
 8006e1c:	2280      	movs	r2, #128	; 0x80
 8006e1e:	611a      	str	r2, [r3, #16]
 8006e20:	4b25      	ldr	r3, [pc, #148]	; (8006eb8 <LCD_Init+0x3980>)
 8006e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e26:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8006e28:	4b23      	ldr	r3, [pc, #140]	; (8006eb8 <LCD_Init+0x3980>)
 8006e2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e2e:	611a      	str	r2, [r3, #16]
 8006e30:	4b21      	ldr	r3, [pc, #132]	; (8006eb8 <LCD_Init+0x3980>)
 8006e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e36:	615a      	str	r2, [r3, #20]
 8006e38:	4b20      	ldr	r3, [pc, #128]	; (8006ebc <LCD_Init+0x3984>)
 8006e3a:	f240 321f 	movw	r2, #799	; 0x31f
 8006e3e:	60da      	str	r2, [r3, #12]
 8006e40:	4b1d      	ldr	r3, [pc, #116]	; (8006eb8 <LCD_Init+0x3980>)
 8006e42:	2280      	movs	r2, #128	; 0x80
 8006e44:	615a      	str	r2, [r3, #20]
 8006e46:	4b1c      	ldr	r3, [pc, #112]	; (8006eb8 <LCD_Init+0x3980>)
 8006e48:	2280      	movs	r2, #128	; 0x80
 8006e4a:	611a      	str	r2, [r3, #16]
 8006e4c:	4b1a      	ldr	r3, [pc, #104]	; (8006eb8 <LCD_Init+0x3980>)
 8006e4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e52:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 8006e54:	4b18      	ldr	r3, [pc, #96]	; (8006eb8 <LCD_Init+0x3980>)
 8006e56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e5a:	611a      	str	r2, [r3, #16]
 8006e5c:	4b16      	ldr	r3, [pc, #88]	; (8006eb8 <LCD_Init+0x3980>)
 8006e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e62:	615a      	str	r2, [r3, #20]
 8006e64:	4b15      	ldr	r3, [pc, #84]	; (8006ebc <LCD_Init+0x3984>)
 8006e66:	2201      	movs	r2, #1
 8006e68:	60da      	str	r2, [r3, #12]
 8006e6a:	4b13      	ldr	r3, [pc, #76]	; (8006eb8 <LCD_Init+0x3980>)
 8006e6c:	2280      	movs	r2, #128	; 0x80
 8006e6e:	615a      	str	r2, [r3, #20]
 8006e70:	4b11      	ldr	r3, [pc, #68]	; (8006eb8 <LCD_Init+0x3980>)
 8006e72:	2280      	movs	r2, #128	; 0x80
 8006e74:	611a      	str	r2, [r3, #16]
 8006e76:	4b10      	ldr	r3, [pc, #64]	; (8006eb8 <LCD_Init+0x3980>)
 8006e78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e7c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8006e7e:	4b0e      	ldr	r3, [pc, #56]	; (8006eb8 <LCD_Init+0x3980>)
 8006e80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e84:	611a      	str	r2, [r3, #16]
 8006e86:	4b0c      	ldr	r3, [pc, #48]	; (8006eb8 <LCD_Init+0x3980>)
 8006e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e8c:	615a      	str	r2, [r3, #20]
 8006e8e:	4b0b      	ldr	r3, [pc, #44]	; (8006ebc <LCD_Init+0x3984>)
 8006e90:	f240 12df 	movw	r2, #479	; 0x1df
 8006e94:	60da      	str	r2, [r3, #12]
 8006e96:	4b08      	ldr	r3, [pc, #32]	; (8006eb8 <LCD_Init+0x3980>)
 8006e98:	2280      	movs	r2, #128	; 0x80
 8006e9a:	615a      	str	r2, [r3, #20]
 8006e9c:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <LCD_Init+0x3980>)
 8006e9e:	2280      	movs	r2, #128	; 0x80
 8006ea0:	611a      	str	r2, [r3, #16]
 8006ea2:	4b05      	ldr	r3, [pc, #20]	; (8006eb8 <LCD_Init+0x3980>)
 8006ea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ea8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 8006eaa:	4b03      	ldr	r3, [pc, #12]	; (8006eb8 <LCD_Init+0x3980>)
 8006eac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006eb0:	e006      	b.n	8006ec0 <LCD_Init+0x3988>
 8006eb2:	bf00      	nop
 8006eb4:	2000018c 	.word	0x2000018c
 8006eb8:	40011000 	.word	0x40011000
 8006ebc:	40010c00 	.word	0x40010c00
 8006ec0:	611a      	str	r2, [r3, #16]
 8006ec2:	4ba3      	ldr	r3, [pc, #652]	; (8007150 <LCD_Init+0x3c18>)
 8006ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ec8:	615a      	str	r2, [r3, #20]
 8006eca:	4ba2      	ldr	r3, [pc, #648]	; (8007154 <LCD_Init+0x3c1c>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	60da      	str	r2, [r3, #12]
 8006ed0:	4b9f      	ldr	r3, [pc, #636]	; (8007150 <LCD_Init+0x3c18>)
 8006ed2:	2280      	movs	r2, #128	; 0x80
 8006ed4:	615a      	str	r2, [r3, #20]
 8006ed6:	4b9e      	ldr	r3, [pc, #632]	; (8007150 <LCD_Init+0x3c18>)
 8006ed8:	2280      	movs	r2, #128	; 0x80
 8006eda:	611a      	str	r2, [r3, #16]
 8006edc:	4b9c      	ldr	r3, [pc, #624]	; (8007150 <LCD_Init+0x3c18>)
 8006ede:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ee2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 8006ee4:	20b4      	movs	r0, #180	; 0xb4
 8006ee6:	f7fb fac5 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8006eea:	4b99      	ldr	r3, [pc, #612]	; (8007150 <LCD_Init+0x3c18>)
 8006eec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ef0:	611a      	str	r2, [r3, #16]
 8006ef2:	4b97      	ldr	r3, [pc, #604]	; (8007150 <LCD_Init+0x3c18>)
 8006ef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ef8:	615a      	str	r2, [r3, #20]
 8006efa:	4b96      	ldr	r3, [pc, #600]	; (8007154 <LCD_Init+0x3c1c>)
 8006efc:	2204      	movs	r2, #4
 8006efe:	60da      	str	r2, [r3, #12]
 8006f00:	4b93      	ldr	r3, [pc, #588]	; (8007150 <LCD_Init+0x3c18>)
 8006f02:	2280      	movs	r2, #128	; 0x80
 8006f04:	615a      	str	r2, [r3, #20]
 8006f06:	4b92      	ldr	r3, [pc, #584]	; (8007150 <LCD_Init+0x3c18>)
 8006f08:	2280      	movs	r2, #128	; 0x80
 8006f0a:	611a      	str	r2, [r3, #16]
 8006f0c:	4b90      	ldr	r3, [pc, #576]	; (8007150 <LCD_Init+0x3c18>)
 8006f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f12:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 8006f14:	4b8e      	ldr	r3, [pc, #568]	; (8007150 <LCD_Init+0x3c18>)
 8006f16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f1a:	611a      	str	r2, [r3, #16]
 8006f1c:	4b8c      	ldr	r3, [pc, #560]	; (8007150 <LCD_Init+0x3c18>)
 8006f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f22:	615a      	str	r2, [r3, #20]
 8006f24:	4b8b      	ldr	r3, [pc, #556]	; (8007154 <LCD_Init+0x3c1c>)
 8006f26:	f240 421f 	movw	r2, #1055	; 0x41f
 8006f2a:	60da      	str	r2, [r3, #12]
 8006f2c:	4b88      	ldr	r3, [pc, #544]	; (8007150 <LCD_Init+0x3c18>)
 8006f2e:	2280      	movs	r2, #128	; 0x80
 8006f30:	615a      	str	r2, [r3, #20]
 8006f32:	4b87      	ldr	r3, [pc, #540]	; (8007150 <LCD_Init+0x3c18>)
 8006f34:	2280      	movs	r2, #128	; 0x80
 8006f36:	611a      	str	r2, [r3, #16]
 8006f38:	4b85      	ldr	r3, [pc, #532]	; (8007150 <LCD_Init+0x3c18>)
 8006f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f3e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8006f40:	4b83      	ldr	r3, [pc, #524]	; (8007150 <LCD_Init+0x3c18>)
 8006f42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f46:	611a      	str	r2, [r3, #16]
 8006f48:	4b81      	ldr	r3, [pc, #516]	; (8007150 <LCD_Init+0x3c18>)
 8006f4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f4e:	615a      	str	r2, [r3, #20]
 8006f50:	4b80      	ldr	r3, [pc, #512]	; (8007154 <LCD_Init+0x3c1c>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	60da      	str	r2, [r3, #12]
 8006f56:	4b7e      	ldr	r3, [pc, #504]	; (8007150 <LCD_Init+0x3c18>)
 8006f58:	2280      	movs	r2, #128	; 0x80
 8006f5a:	615a      	str	r2, [r3, #20]
 8006f5c:	4b7c      	ldr	r3, [pc, #496]	; (8007150 <LCD_Init+0x3c18>)
 8006f5e:	2280      	movs	r2, #128	; 0x80
 8006f60:	611a      	str	r2, [r3, #16]
 8006f62:	4b7b      	ldr	r3, [pc, #492]	; (8007150 <LCD_Init+0x3c18>)
 8006f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f68:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 8006f6a:	4b79      	ldr	r3, [pc, #484]	; (8007150 <LCD_Init+0x3c18>)
 8006f6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f70:	611a      	str	r2, [r3, #16]
 8006f72:	4b77      	ldr	r3, [pc, #476]	; (8007150 <LCD_Init+0x3c18>)
 8006f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f78:	615a      	str	r2, [r3, #20]
 8006f7a:	4b76      	ldr	r3, [pc, #472]	; (8007154 <LCD_Init+0x3c1c>)
 8006f7c:	222e      	movs	r2, #46	; 0x2e
 8006f7e:	60da      	str	r2, [r3, #12]
 8006f80:	4b73      	ldr	r3, [pc, #460]	; (8007150 <LCD_Init+0x3c18>)
 8006f82:	2280      	movs	r2, #128	; 0x80
 8006f84:	615a      	str	r2, [r3, #20]
 8006f86:	4b72      	ldr	r3, [pc, #456]	; (8007150 <LCD_Init+0x3c18>)
 8006f88:	2280      	movs	r2, #128	; 0x80
 8006f8a:	611a      	str	r2, [r3, #16]
 8006f8c:	4b70      	ldr	r3, [pc, #448]	; (8007150 <LCD_Init+0x3c18>)
 8006f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f92:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8006f94:	4b6e      	ldr	r3, [pc, #440]	; (8007150 <LCD_Init+0x3c18>)
 8006f96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f9a:	611a      	str	r2, [r3, #16]
 8006f9c:	4b6c      	ldr	r3, [pc, #432]	; (8007150 <LCD_Init+0x3c18>)
 8006f9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fa2:	615a      	str	r2, [r3, #20]
 8006fa4:	4b6b      	ldr	r3, [pc, #428]	; (8007154 <LCD_Init+0x3c1c>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	60da      	str	r2, [r3, #12]
 8006faa:	4b69      	ldr	r3, [pc, #420]	; (8007150 <LCD_Init+0x3c18>)
 8006fac:	2280      	movs	r2, #128	; 0x80
 8006fae:	615a      	str	r2, [r3, #20]
 8006fb0:	4b67      	ldr	r3, [pc, #412]	; (8007150 <LCD_Init+0x3c18>)
 8006fb2:	2280      	movs	r2, #128	; 0x80
 8006fb4:	611a      	str	r2, [r3, #16]
 8006fb6:	4b66      	ldr	r3, [pc, #408]	; (8007150 <LCD_Init+0x3c18>)
 8006fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fbc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8006fbe:	4b64      	ldr	r3, [pc, #400]	; (8007150 <LCD_Init+0x3c18>)
 8006fc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fc4:	611a      	str	r2, [r3, #16]
 8006fc6:	4b62      	ldr	r3, [pc, #392]	; (8007150 <LCD_Init+0x3c18>)
 8006fc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fcc:	615a      	str	r2, [r3, #20]
 8006fce:	4b61      	ldr	r3, [pc, #388]	; (8007154 <LCD_Init+0x3c1c>)
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	60da      	str	r2, [r3, #12]
 8006fd4:	4b5e      	ldr	r3, [pc, #376]	; (8007150 <LCD_Init+0x3c18>)
 8006fd6:	2280      	movs	r2, #128	; 0x80
 8006fd8:	615a      	str	r2, [r3, #20]
 8006fda:	4b5d      	ldr	r3, [pc, #372]	; (8007150 <LCD_Init+0x3c18>)
 8006fdc:	2280      	movs	r2, #128	; 0x80
 8006fde:	611a      	str	r2, [r3, #16]
 8006fe0:	4b5b      	ldr	r3, [pc, #364]	; (8007150 <LCD_Init+0x3c18>)
 8006fe2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fe6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8006fe8:	4b59      	ldr	r3, [pc, #356]	; (8007150 <LCD_Init+0x3c18>)
 8006fea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fee:	611a      	str	r2, [r3, #16]
 8006ff0:	4b57      	ldr	r3, [pc, #348]	; (8007150 <LCD_Init+0x3c18>)
 8006ff2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ff6:	615a      	str	r2, [r3, #20]
 8006ff8:	4b56      	ldr	r3, [pc, #344]	; (8007154 <LCD_Init+0x3c1c>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	60da      	str	r2, [r3, #12]
 8006ffe:	4b54      	ldr	r3, [pc, #336]	; (8007150 <LCD_Init+0x3c18>)
 8007000:	2280      	movs	r2, #128	; 0x80
 8007002:	615a      	str	r2, [r3, #20]
 8007004:	4b52      	ldr	r3, [pc, #328]	; (8007150 <LCD_Init+0x3c18>)
 8007006:	2280      	movs	r2, #128	; 0x80
 8007008:	611a      	str	r2, [r3, #16]
 800700a:	4b51      	ldr	r3, [pc, #324]	; (8007150 <LCD_Init+0x3c18>)
 800700c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007010:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8007012:	4b4f      	ldr	r3, [pc, #316]	; (8007150 <LCD_Init+0x3c18>)
 8007014:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007018:	611a      	str	r2, [r3, #16]
 800701a:	4b4d      	ldr	r3, [pc, #308]	; (8007150 <LCD_Init+0x3c18>)
 800701c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007020:	615a      	str	r2, [r3, #20]
 8007022:	4b4c      	ldr	r3, [pc, #304]	; (8007154 <LCD_Init+0x3c1c>)
 8007024:	2200      	movs	r2, #0
 8007026:	60da      	str	r2, [r3, #12]
 8007028:	4b49      	ldr	r3, [pc, #292]	; (8007150 <LCD_Init+0x3c18>)
 800702a:	2280      	movs	r2, #128	; 0x80
 800702c:	615a      	str	r2, [r3, #20]
 800702e:	4b48      	ldr	r3, [pc, #288]	; (8007150 <LCD_Init+0x3c18>)
 8007030:	2280      	movs	r2, #128	; 0x80
 8007032:	611a      	str	r2, [r3, #16]
 8007034:	4b46      	ldr	r3, [pc, #280]	; (8007150 <LCD_Init+0x3c18>)
 8007036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800703a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 800703c:	20b6      	movs	r0, #182	; 0xb6
 800703e:	f7fb fa19 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8007042:	4b43      	ldr	r3, [pc, #268]	; (8007150 <LCD_Init+0x3c18>)
 8007044:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007048:	611a      	str	r2, [r3, #16]
 800704a:	4b41      	ldr	r3, [pc, #260]	; (8007150 <LCD_Init+0x3c18>)
 800704c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007050:	615a      	str	r2, [r3, #20]
 8007052:	4b40      	ldr	r3, [pc, #256]	; (8007154 <LCD_Init+0x3c1c>)
 8007054:	2202      	movs	r2, #2
 8007056:	60da      	str	r2, [r3, #12]
 8007058:	4b3d      	ldr	r3, [pc, #244]	; (8007150 <LCD_Init+0x3c18>)
 800705a:	2280      	movs	r2, #128	; 0x80
 800705c:	615a      	str	r2, [r3, #20]
 800705e:	4b3c      	ldr	r3, [pc, #240]	; (8007150 <LCD_Init+0x3c18>)
 8007060:	2280      	movs	r2, #128	; 0x80
 8007062:	611a      	str	r2, [r3, #16]
 8007064:	4b3a      	ldr	r3, [pc, #232]	; (8007150 <LCD_Init+0x3c18>)
 8007066:	f44f 7200 	mov.w	r2, #512	; 0x200
 800706a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 800706c:	4b38      	ldr	r3, [pc, #224]	; (8007150 <LCD_Init+0x3c18>)
 800706e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007072:	611a      	str	r2, [r3, #16]
 8007074:	4b36      	ldr	r3, [pc, #216]	; (8007150 <LCD_Init+0x3c18>)
 8007076:	f44f 7200 	mov.w	r2, #512	; 0x200
 800707a:	615a      	str	r2, [r3, #20]
 800707c:	4b35      	ldr	r3, [pc, #212]	; (8007154 <LCD_Init+0x3c1c>)
 800707e:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8007082:	60da      	str	r2, [r3, #12]
 8007084:	4b32      	ldr	r3, [pc, #200]	; (8007150 <LCD_Init+0x3c18>)
 8007086:	2280      	movs	r2, #128	; 0x80
 8007088:	615a      	str	r2, [r3, #20]
 800708a:	4b31      	ldr	r3, [pc, #196]	; (8007150 <LCD_Init+0x3c18>)
 800708c:	2280      	movs	r2, #128	; 0x80
 800708e:	611a      	str	r2, [r3, #16]
 8007090:	4b2f      	ldr	r3, [pc, #188]	; (8007150 <LCD_Init+0x3c18>)
 8007092:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007096:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8007098:	4b2d      	ldr	r3, [pc, #180]	; (8007150 <LCD_Init+0x3c18>)
 800709a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800709e:	611a      	str	r2, [r3, #16]
 80070a0:	4b2b      	ldr	r3, [pc, #172]	; (8007150 <LCD_Init+0x3c18>)
 80070a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070a6:	615a      	str	r2, [r3, #20]
 80070a8:	4b2a      	ldr	r3, [pc, #168]	; (8007154 <LCD_Init+0x3c1c>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	60da      	str	r2, [r3, #12]
 80070ae:	4b28      	ldr	r3, [pc, #160]	; (8007150 <LCD_Init+0x3c18>)
 80070b0:	2280      	movs	r2, #128	; 0x80
 80070b2:	615a      	str	r2, [r3, #20]
 80070b4:	4b26      	ldr	r3, [pc, #152]	; (8007150 <LCD_Init+0x3c18>)
 80070b6:	2280      	movs	r2, #128	; 0x80
 80070b8:	611a      	str	r2, [r3, #16]
 80070ba:	4b25      	ldr	r3, [pc, #148]	; (8007150 <LCD_Init+0x3c18>)
 80070bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070c0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 80070c2:	4b23      	ldr	r3, [pc, #140]	; (8007150 <LCD_Init+0x3c18>)
 80070c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070c8:	611a      	str	r2, [r3, #16]
 80070ca:	4b21      	ldr	r3, [pc, #132]	; (8007150 <LCD_Init+0x3c18>)
 80070cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070d0:	615a      	str	r2, [r3, #20]
 80070d2:	4b20      	ldr	r3, [pc, #128]	; (8007154 <LCD_Init+0x3c1c>)
 80070d4:	2217      	movs	r2, #23
 80070d6:	60da      	str	r2, [r3, #12]
 80070d8:	4b1d      	ldr	r3, [pc, #116]	; (8007150 <LCD_Init+0x3c18>)
 80070da:	2280      	movs	r2, #128	; 0x80
 80070dc:	615a      	str	r2, [r3, #20]
 80070de:	4b1c      	ldr	r3, [pc, #112]	; (8007150 <LCD_Init+0x3c18>)
 80070e0:	2280      	movs	r2, #128	; 0x80
 80070e2:	611a      	str	r2, [r3, #16]
 80070e4:	4b1a      	ldr	r3, [pc, #104]	; (8007150 <LCD_Init+0x3c18>)
 80070e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070ea:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 80070ec:	4b18      	ldr	r3, [pc, #96]	; (8007150 <LCD_Init+0x3c18>)
 80070ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070f2:	611a      	str	r2, [r3, #16]
 80070f4:	4b16      	ldr	r3, [pc, #88]	; (8007150 <LCD_Init+0x3c18>)
 80070f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070fa:	615a      	str	r2, [r3, #20]
 80070fc:	4b15      	ldr	r3, [pc, #84]	; (8007154 <LCD_Init+0x3c1c>)
 80070fe:	2215      	movs	r2, #21
 8007100:	60da      	str	r2, [r3, #12]
 8007102:	4b13      	ldr	r3, [pc, #76]	; (8007150 <LCD_Init+0x3c18>)
 8007104:	2280      	movs	r2, #128	; 0x80
 8007106:	615a      	str	r2, [r3, #20]
 8007108:	4b11      	ldr	r3, [pc, #68]	; (8007150 <LCD_Init+0x3c18>)
 800710a:	2280      	movs	r2, #128	; 0x80
 800710c:	611a      	str	r2, [r3, #16]
 800710e:	4b10      	ldr	r3, [pc, #64]	; (8007150 <LCD_Init+0x3c18>)
 8007110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007114:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8007116:	4b0e      	ldr	r3, [pc, #56]	; (8007150 <LCD_Init+0x3c18>)
 8007118:	f44f 7280 	mov.w	r2, #256	; 0x100
 800711c:	611a      	str	r2, [r3, #16]
 800711e:	4b0c      	ldr	r3, [pc, #48]	; (8007150 <LCD_Init+0x3c18>)
 8007120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007124:	615a      	str	r2, [r3, #20]
 8007126:	4b0b      	ldr	r3, [pc, #44]	; (8007154 <LCD_Init+0x3c1c>)
 8007128:	2200      	movs	r2, #0
 800712a:	60da      	str	r2, [r3, #12]
 800712c:	4b08      	ldr	r3, [pc, #32]	; (8007150 <LCD_Init+0x3c18>)
 800712e:	2280      	movs	r2, #128	; 0x80
 8007130:	615a      	str	r2, [r3, #20]
 8007132:	4b07      	ldr	r3, [pc, #28]	; (8007150 <LCD_Init+0x3c18>)
 8007134:	2280      	movs	r2, #128	; 0x80
 8007136:	611a      	str	r2, [r3, #16]
 8007138:	4b05      	ldr	r3, [pc, #20]	; (8007150 <LCD_Init+0x3c18>)
 800713a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800713e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8007140:	4b03      	ldr	r3, [pc, #12]	; (8007150 <LCD_Init+0x3c18>)
 8007142:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007146:	611a      	str	r2, [r3, #16]
 8007148:	4b01      	ldr	r3, [pc, #4]	; (8007150 <LCD_Init+0x3c18>)
 800714a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800714e:	e003      	b.n	8007158 <LCD_Init+0x3c20>
 8007150:	40011000 	.word	0x40011000
 8007154:	40010c00 	.word	0x40010c00
 8007158:	615a      	str	r2, [r3, #20]
 800715a:	4b8b      	ldr	r3, [pc, #556]	; (8007388 <LCD_Init+0x3e50>)
 800715c:	2200      	movs	r2, #0
 800715e:	60da      	str	r2, [r3, #12]
 8007160:	4b8a      	ldr	r3, [pc, #552]	; (800738c <LCD_Init+0x3e54>)
 8007162:	2280      	movs	r2, #128	; 0x80
 8007164:	615a      	str	r2, [r3, #20]
 8007166:	4b89      	ldr	r3, [pc, #548]	; (800738c <LCD_Init+0x3e54>)
 8007168:	2280      	movs	r2, #128	; 0x80
 800716a:	611a      	str	r2, [r3, #16]
 800716c:	4b87      	ldr	r3, [pc, #540]	; (800738c <LCD_Init+0x3e54>)
 800716e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007172:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8007174:	20f0      	movs	r0, #240	; 0xf0
 8007176:	f7fb f97d 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 800717a:	4b84      	ldr	r3, [pc, #528]	; (800738c <LCD_Init+0x3e54>)
 800717c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007180:	611a      	str	r2, [r3, #16]
 8007182:	4b82      	ldr	r3, [pc, #520]	; (800738c <LCD_Init+0x3e54>)
 8007184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007188:	615a      	str	r2, [r3, #20]
 800718a:	4b7f      	ldr	r3, [pc, #508]	; (8007388 <LCD_Init+0x3e50>)
 800718c:	2203      	movs	r2, #3
 800718e:	60da      	str	r2, [r3, #12]
 8007190:	4b7e      	ldr	r3, [pc, #504]	; (800738c <LCD_Init+0x3e54>)
 8007192:	2280      	movs	r2, #128	; 0x80
 8007194:	615a      	str	r2, [r3, #20]
 8007196:	4b7d      	ldr	r3, [pc, #500]	; (800738c <LCD_Init+0x3e54>)
 8007198:	2280      	movs	r2, #128	; 0x80
 800719a:	611a      	str	r2, [r3, #16]
 800719c:	4b7b      	ldr	r3, [pc, #492]	; (800738c <LCD_Init+0x3e54>)
 800719e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071a2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 80071a4:	2029      	movs	r0, #41	; 0x29
 80071a6:	f7fb f965 	bl	8002474 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 80071aa:	20d0      	movs	r0, #208	; 0xd0
 80071ac:	f7fb f962 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 80071b0:	4b76      	ldr	r3, [pc, #472]	; (800738c <LCD_Init+0x3e54>)
 80071b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071b6:	611a      	str	r2, [r3, #16]
 80071b8:	4b74      	ldr	r3, [pc, #464]	; (800738c <LCD_Init+0x3e54>)
 80071ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071be:	615a      	str	r2, [r3, #20]
 80071c0:	4b71      	ldr	r3, [pc, #452]	; (8007388 <LCD_Init+0x3e50>)
 80071c2:	2200      	movs	r2, #0
 80071c4:	60da      	str	r2, [r3, #12]
 80071c6:	4b71      	ldr	r3, [pc, #452]	; (800738c <LCD_Init+0x3e54>)
 80071c8:	2280      	movs	r2, #128	; 0x80
 80071ca:	615a      	str	r2, [r3, #20]
 80071cc:	4b6f      	ldr	r3, [pc, #444]	; (800738c <LCD_Init+0x3e54>)
 80071ce:	2280      	movs	r2, #128	; 0x80
 80071d0:	611a      	str	r2, [r3, #16]
 80071d2:	4b6e      	ldr	r3, [pc, #440]	; (800738c <LCD_Init+0x3e54>)
 80071d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071d8:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 80071da:	20be      	movs	r0, #190	; 0xbe
 80071dc:	f7fb f94a 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 80071e0:	4b6a      	ldr	r3, [pc, #424]	; (800738c <LCD_Init+0x3e54>)
 80071e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071e6:	611a      	str	r2, [r3, #16]
 80071e8:	4b68      	ldr	r3, [pc, #416]	; (800738c <LCD_Init+0x3e54>)
 80071ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071ee:	615a      	str	r2, [r3, #20]
 80071f0:	4b65      	ldr	r3, [pc, #404]	; (8007388 <LCD_Init+0x3e50>)
 80071f2:	2205      	movs	r2, #5
 80071f4:	60da      	str	r2, [r3, #12]
 80071f6:	4b65      	ldr	r3, [pc, #404]	; (800738c <LCD_Init+0x3e54>)
 80071f8:	2280      	movs	r2, #128	; 0x80
 80071fa:	615a      	str	r2, [r3, #20]
 80071fc:	4b63      	ldr	r3, [pc, #396]	; (800738c <LCD_Init+0x3e54>)
 80071fe:	2280      	movs	r2, #128	; 0x80
 8007200:	611a      	str	r2, [r3, #16]
 8007202:	4b62      	ldr	r3, [pc, #392]	; (800738c <LCD_Init+0x3e54>)
 8007204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007208:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 800720a:	4b60      	ldr	r3, [pc, #384]	; (800738c <LCD_Init+0x3e54>)
 800720c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007210:	611a      	str	r2, [r3, #16]
 8007212:	4b5e      	ldr	r3, [pc, #376]	; (800738c <LCD_Init+0x3e54>)
 8007214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007218:	615a      	str	r2, [r3, #20]
 800721a:	4b5b      	ldr	r3, [pc, #364]	; (8007388 <LCD_Init+0x3e50>)
 800721c:	22fe      	movs	r2, #254	; 0xfe
 800721e:	60da      	str	r2, [r3, #12]
 8007220:	4b5a      	ldr	r3, [pc, #360]	; (800738c <LCD_Init+0x3e54>)
 8007222:	2280      	movs	r2, #128	; 0x80
 8007224:	615a      	str	r2, [r3, #20]
 8007226:	4b59      	ldr	r3, [pc, #356]	; (800738c <LCD_Init+0x3e54>)
 8007228:	2280      	movs	r2, #128	; 0x80
 800722a:	611a      	str	r2, [r3, #16]
 800722c:	4b57      	ldr	r3, [pc, #348]	; (800738c <LCD_Init+0x3e54>)
 800722e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007232:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8007234:	4b55      	ldr	r3, [pc, #340]	; (800738c <LCD_Init+0x3e54>)
 8007236:	f44f 7280 	mov.w	r2, #256	; 0x100
 800723a:	611a      	str	r2, [r3, #16]
 800723c:	4b53      	ldr	r3, [pc, #332]	; (800738c <LCD_Init+0x3e54>)
 800723e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007242:	615a      	str	r2, [r3, #20]
 8007244:	4b50      	ldr	r3, [pc, #320]	; (8007388 <LCD_Init+0x3e50>)
 8007246:	2201      	movs	r2, #1
 8007248:	60da      	str	r2, [r3, #12]
 800724a:	4b50      	ldr	r3, [pc, #320]	; (800738c <LCD_Init+0x3e54>)
 800724c:	2280      	movs	r2, #128	; 0x80
 800724e:	615a      	str	r2, [r3, #20]
 8007250:	4b4e      	ldr	r3, [pc, #312]	; (800738c <LCD_Init+0x3e54>)
 8007252:	2280      	movs	r2, #128	; 0x80
 8007254:	611a      	str	r2, [r3, #16]
 8007256:	4b4d      	ldr	r3, [pc, #308]	; (800738c <LCD_Init+0x3e54>)
 8007258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800725c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 800725e:	4b4b      	ldr	r3, [pc, #300]	; (800738c <LCD_Init+0x3e54>)
 8007260:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007264:	611a      	str	r2, [r3, #16]
 8007266:	4b49      	ldr	r3, [pc, #292]	; (800738c <LCD_Init+0x3e54>)
 8007268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800726c:	615a      	str	r2, [r3, #20]
 800726e:	4b46      	ldr	r3, [pc, #280]	; (8007388 <LCD_Init+0x3e50>)
 8007270:	2200      	movs	r2, #0
 8007272:	60da      	str	r2, [r3, #12]
 8007274:	4b45      	ldr	r3, [pc, #276]	; (800738c <LCD_Init+0x3e54>)
 8007276:	2280      	movs	r2, #128	; 0x80
 8007278:	615a      	str	r2, [r3, #20]
 800727a:	4b44      	ldr	r3, [pc, #272]	; (800738c <LCD_Init+0x3e54>)
 800727c:	2280      	movs	r2, #128	; 0x80
 800727e:	611a      	str	r2, [r3, #16]
 8007280:	4b42      	ldr	r3, [pc, #264]	; (800738c <LCD_Init+0x3e54>)
 8007282:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007286:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8007288:	4b40      	ldr	r3, [pc, #256]	; (800738c <LCD_Init+0x3e54>)
 800728a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800728e:	611a      	str	r2, [r3, #16]
 8007290:	4b3e      	ldr	r3, [pc, #248]	; (800738c <LCD_Init+0x3e54>)
 8007292:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007296:	615a      	str	r2, [r3, #20]
 8007298:	4b3b      	ldr	r3, [pc, #236]	; (8007388 <LCD_Init+0x3e50>)
 800729a:	2200      	movs	r2, #0
 800729c:	60da      	str	r2, [r3, #12]
 800729e:	4b3b      	ldr	r3, [pc, #236]	; (800738c <LCD_Init+0x3e54>)
 80072a0:	2280      	movs	r2, #128	; 0x80
 80072a2:	615a      	str	r2, [r3, #20]
 80072a4:	4b39      	ldr	r3, [pc, #228]	; (800738c <LCD_Init+0x3e54>)
 80072a6:	2280      	movs	r2, #128	; 0x80
 80072a8:	611a      	str	r2, [r3, #16]
 80072aa:	4b38      	ldr	r3, [pc, #224]	; (800738c <LCD_Init+0x3e54>)
 80072ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072b0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 80072b2:	4b36      	ldr	r3, [pc, #216]	; (800738c <LCD_Init+0x3e54>)
 80072b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072b8:	611a      	str	r2, [r3, #16]
 80072ba:	4b34      	ldr	r3, [pc, #208]	; (800738c <LCD_Init+0x3e54>)
 80072bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072c0:	615a      	str	r2, [r3, #20]
 80072c2:	4b31      	ldr	r3, [pc, #196]	; (8007388 <LCD_Init+0x3e50>)
 80072c4:	2200      	movs	r2, #0
 80072c6:	60da      	str	r2, [r3, #12]
 80072c8:	4b30      	ldr	r3, [pc, #192]	; (800738c <LCD_Init+0x3e54>)
 80072ca:	2280      	movs	r2, #128	; 0x80
 80072cc:	615a      	str	r2, [r3, #20]
 80072ce:	4b2f      	ldr	r3, [pc, #188]	; (800738c <LCD_Init+0x3e54>)
 80072d0:	2280      	movs	r2, #128	; 0x80
 80072d2:	611a      	str	r2, [r3, #16]
 80072d4:	4b2d      	ldr	r3, [pc, #180]	; (800738c <LCD_Init+0x3e54>)
 80072d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072da:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 80072dc:	20b8      	movs	r0, #184	; 0xb8
 80072de:	f7fb f8c9 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 80072e2:	4b2a      	ldr	r3, [pc, #168]	; (800738c <LCD_Init+0x3e54>)
 80072e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072e8:	611a      	str	r2, [r3, #16]
 80072ea:	4b28      	ldr	r3, [pc, #160]	; (800738c <LCD_Init+0x3e54>)
 80072ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072f0:	615a      	str	r2, [r3, #20]
 80072f2:	4b25      	ldr	r3, [pc, #148]	; (8007388 <LCD_Init+0x3e50>)
 80072f4:	2203      	movs	r2, #3
 80072f6:	60da      	str	r2, [r3, #12]
 80072f8:	4b24      	ldr	r3, [pc, #144]	; (800738c <LCD_Init+0x3e54>)
 80072fa:	2280      	movs	r2, #128	; 0x80
 80072fc:	615a      	str	r2, [r3, #20]
 80072fe:	4b23      	ldr	r3, [pc, #140]	; (800738c <LCD_Init+0x3e54>)
 8007300:	2280      	movs	r2, #128	; 0x80
 8007302:	611a      	str	r2, [r3, #16]
 8007304:	4b21      	ldr	r3, [pc, #132]	; (800738c <LCD_Init+0x3e54>)
 8007306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800730a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 800730c:	4b1f      	ldr	r3, [pc, #124]	; (800738c <LCD_Init+0x3e54>)
 800730e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007312:	611a      	str	r2, [r3, #16]
 8007314:	4b1d      	ldr	r3, [pc, #116]	; (800738c <LCD_Init+0x3e54>)
 8007316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800731a:	615a      	str	r2, [r3, #20]
 800731c:	4b1a      	ldr	r3, [pc, #104]	; (8007388 <LCD_Init+0x3e50>)
 800731e:	2201      	movs	r2, #1
 8007320:	60da      	str	r2, [r3, #12]
 8007322:	4b1a      	ldr	r3, [pc, #104]	; (800738c <LCD_Init+0x3e54>)
 8007324:	2280      	movs	r2, #128	; 0x80
 8007326:	615a      	str	r2, [r3, #20]
 8007328:	4b18      	ldr	r3, [pc, #96]	; (800738c <LCD_Init+0x3e54>)
 800732a:	2280      	movs	r2, #128	; 0x80
 800732c:	611a      	str	r2, [r3, #16]
 800732e:	4b17      	ldr	r3, [pc, #92]	; (800738c <LCD_Init+0x3e54>)
 8007330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007334:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8007336:	20ba      	movs	r0, #186	; 0xba
 8007338:	f7fb f89c 	bl	8002474 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 800733c:	4b13      	ldr	r3, [pc, #76]	; (800738c <LCD_Init+0x3e54>)
 800733e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007342:	611a      	str	r2, [r3, #16]
 8007344:	4b11      	ldr	r3, [pc, #68]	; (800738c <LCD_Init+0x3e54>)
 8007346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800734a:	615a      	str	r2, [r3, #20]
 800734c:	4b0e      	ldr	r3, [pc, #56]	; (8007388 <LCD_Init+0x3e50>)
 800734e:	2201      	movs	r2, #1
 8007350:	60da      	str	r2, [r3, #12]
 8007352:	4b0e      	ldr	r3, [pc, #56]	; (800738c <LCD_Init+0x3e54>)
 8007354:	2280      	movs	r2, #128	; 0x80
 8007356:	615a      	str	r2, [r3, #20]
 8007358:	4b0c      	ldr	r3, [pc, #48]	; (800738c <LCD_Init+0x3e54>)
 800735a:	2280      	movs	r2, #128	; 0x80
 800735c:	611a      	str	r2, [r3, #16]
 800735e:	4b0b      	ldr	r3, [pc, #44]	; (800738c <LCD_Init+0x3e54>)
 8007360:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007364:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8007366:	2064      	movs	r0, #100	; 0x64
 8007368:	f7fb ff36 	bl	80031d8 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 800736c:	2000      	movs	r0, #0
 800736e:	f7fb ffd7 	bl	8003320 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8007372:	4b07      	ldr	r3, [pc, #28]	; (8007390 <LCD_Init+0x3e58>)
 8007374:	2201      	movs	r2, #1
 8007376:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8007378:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800737c:	f000 f80a 	bl	8007394 <LCD_Clear>
}
 8007380:	bf00      	nop
 8007382:	3718      	adds	r7, #24
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	40010c00 	.word	0x40010c00
 800738c:	40011000 	.word	0x40011000
 8007390:	422201a8 	.word	0x422201a8

08007394 <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	4603      	mov	r3, r0
 800739c:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 800739e:	2300      	movs	r3, #0
 80073a0:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 80073a2:	4b2a      	ldr	r3, [pc, #168]	; (800744c <LCD_Clear+0xb8>)
 80073a4:	881b      	ldrh	r3, [r3, #0]
 80073a6:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 80073a8:	4b28      	ldr	r3, [pc, #160]	; (800744c <LCD_Clear+0xb8>)
 80073aa:	885b      	ldrh	r3, [r3, #2]
 80073ac:	461a      	mov	r2, r3
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	fb02 f303 	mul.w	r3, r2, r3
 80073b4:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 80073b6:	4b25      	ldr	r3, [pc, #148]	; (800744c <LCD_Clear+0xb8>)
 80073b8:	889b      	ldrh	r3, [r3, #4]
 80073ba:	f646 0204 	movw	r2, #26628	; 0x6804
 80073be:	4293      	cmp	r3, r2
 80073c0:	d11a      	bne.n	80073f8 <LCD_Clear+0x64>
 80073c2:	4b22      	ldr	r3, [pc, #136]	; (800744c <LCD_Clear+0xb8>)
 80073c4:	799b      	ldrb	r3, [r3, #6]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d116      	bne.n	80073f8 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 80073ca:	4b20      	ldr	r3, [pc, #128]	; (800744c <LCD_Clear+0xb8>)
 80073cc:	2200      	movs	r2, #0
 80073ce:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 80073d0:	4b1e      	ldr	r3, [pc, #120]	; (800744c <LCD_Clear+0xb8>)
 80073d2:	222a      	movs	r2, #42	; 0x2a
 80073d4:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 80073d6:	4b1d      	ldr	r3, [pc, #116]	; (800744c <LCD_Clear+0xb8>)
 80073d8:	222b      	movs	r2, #43	; 0x2b
 80073da:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 80073dc:	2100      	movs	r1, #0
 80073de:	2000      	movs	r0, #0
 80073e0:	f7fb f91a 	bl	8002618 <LCD_SetCursor>
		lcddev.dir = 1;
 80073e4:	4b19      	ldr	r3, [pc, #100]	; (800744c <LCD_Clear+0xb8>)
 80073e6:	2201      	movs	r2, #1
 80073e8:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 80073ea:	4b18      	ldr	r3, [pc, #96]	; (800744c <LCD_Clear+0xb8>)
 80073ec:	222b      	movs	r2, #43	; 0x2b
 80073ee:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 80073f0:	4b16      	ldr	r3, [pc, #88]	; (800744c <LCD_Clear+0xb8>)
 80073f2:	222a      	movs	r2, #42	; 0x2a
 80073f4:	819a      	strh	r2, [r3, #12]
 80073f6:	e003      	b.n	8007400 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 80073f8:	2100      	movs	r1, #0
 80073fa:	2000      	movs	r0, #0
 80073fc:	f7fb f90c 	bl	8002618 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8007400:	f7fb f8fe 	bl	8002600 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8007404:	2300      	movs	r3, #0
 8007406:	60fb      	str	r3, [r7, #12]
 8007408:	e017      	b.n	800743a <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 800740a:	4b11      	ldr	r3, [pc, #68]	; (8007450 <LCD_Clear+0xbc>)
 800740c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007410:	611a      	str	r2, [r3, #16]
 8007412:	4b0f      	ldr	r3, [pc, #60]	; (8007450 <LCD_Clear+0xbc>)
 8007414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007418:	615a      	str	r2, [r3, #20]
 800741a:	4a0e      	ldr	r2, [pc, #56]	; (8007454 <LCD_Clear+0xc0>)
 800741c:	88fb      	ldrh	r3, [r7, #6]
 800741e:	60d3      	str	r3, [r2, #12]
 8007420:	4b0b      	ldr	r3, [pc, #44]	; (8007450 <LCD_Clear+0xbc>)
 8007422:	2280      	movs	r2, #128	; 0x80
 8007424:	615a      	str	r2, [r3, #20]
 8007426:	4b0a      	ldr	r3, [pc, #40]	; (8007450 <LCD_Clear+0xbc>)
 8007428:	2280      	movs	r2, #128	; 0x80
 800742a:	611a      	str	r2, [r3, #16]
 800742c:	4b08      	ldr	r3, [pc, #32]	; (8007450 <LCD_Clear+0xbc>)
 800742e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007432:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	3301      	adds	r3, #1
 8007438:	60fb      	str	r3, [r7, #12]
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	429a      	cmp	r2, r3
 8007440:	d3e3      	bcc.n	800740a <LCD_Clear+0x76>
}
 8007442:	bf00      	nop
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	2000018c 	.word	0x2000018c
 8007450:	40011000 	.word	0x40011000
 8007454:	40010c00 	.word	0x40010c00

08007458 <LCD_Fill>:
// Fill the area with color
// :(xend-xsta+1)*(yend-ysta+1)
void LCD_Fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey,
		uint16_t color) {
 8007458:	b590      	push	{r4, r7, lr}
 800745a:	b087      	sub	sp, #28
 800745c:	af02      	add	r7, sp, #8
 800745e:	4604      	mov	r4, r0
 8007460:	4608      	mov	r0, r1
 8007462:	4611      	mov	r1, r2
 8007464:	461a      	mov	r2, r3
 8007466:	4623      	mov	r3, r4
 8007468:	80fb      	strh	r3, [r7, #6]
 800746a:	4603      	mov	r3, r0
 800746c:	80bb      	strh	r3, [r7, #4]
 800746e:	460b      	mov	r3, r1
 8007470:	807b      	strh	r3, [r7, #2]
 8007472:	4613      	mov	r3, r2
 8007474:	803b      	strh	r3, [r7, #0]
	uint16_t i, j;
	uint16_t xlen = 0;
 8007476:	2300      	movs	r3, #0
 8007478:	817b      	strh	r3, [r7, #10]
	uint16_t temp;
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1))	//6804横屏的时候特殊处理
 800747a:	4b3a      	ldr	r3, [pc, #232]	; (8007564 <LCD_Fill+0x10c>)
 800747c:	889b      	ldrh	r3, [r3, #4]
 800747e:	f646 0204 	movw	r2, #26628	; 0x6804
 8007482:	4293      	cmp	r3, r2
 8007484:	d133      	bne.n	80074ee <LCD_Fill+0x96>
 8007486:	4b37      	ldr	r3, [pc, #220]	; (8007564 <LCD_Fill+0x10c>)
 8007488:	799b      	ldrb	r3, [r3, #6]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d12f      	bne.n	80074ee <LCD_Fill+0x96>
			{
		temp = sx;
 800748e:	88fb      	ldrh	r3, [r7, #6]
 8007490:	813b      	strh	r3, [r7, #8]
		sx = sy;
 8007492:	88bb      	ldrh	r3, [r7, #4]
 8007494:	80fb      	strh	r3, [r7, #6]
		sy = lcddev.width - ex - 1;
 8007496:	4b33      	ldr	r3, [pc, #204]	; (8007564 <LCD_Fill+0x10c>)
 8007498:	881a      	ldrh	r2, [r3, #0]
 800749a:	887b      	ldrh	r3, [r7, #2]
 800749c:	1ad3      	subs	r3, r2, r3
 800749e:	b29b      	uxth	r3, r3
 80074a0:	3b01      	subs	r3, #1
 80074a2:	80bb      	strh	r3, [r7, #4]
		ex = ey;
 80074a4:	883b      	ldrh	r3, [r7, #0]
 80074a6:	807b      	strh	r3, [r7, #2]
		ey = lcddev.width - temp - 1;
 80074a8:	4b2e      	ldr	r3, [pc, #184]	; (8007564 <LCD_Fill+0x10c>)
 80074aa:	881a      	ldrh	r2, [r3, #0]
 80074ac:	893b      	ldrh	r3, [r7, #8]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	3b01      	subs	r3, #1
 80074b4:	803b      	strh	r3, [r7, #0]
		lcddev.dir = 0;
 80074b6:	4b2b      	ldr	r3, [pc, #172]	; (8007564 <LCD_Fill+0x10c>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 80074bc:	4b29      	ldr	r3, [pc, #164]	; (8007564 <LCD_Fill+0x10c>)
 80074be:	222a      	movs	r2, #42	; 0x2a
 80074c0:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 80074c2:	4b28      	ldr	r3, [pc, #160]	; (8007564 <LCD_Fill+0x10c>)
 80074c4:	222b      	movs	r2, #43	; 0x2b
 80074c6:	819a      	strh	r2, [r3, #12]
		LCD_Fill(sx, sy, ex, ey, color);
 80074c8:	883c      	ldrh	r4, [r7, #0]
 80074ca:	887a      	ldrh	r2, [r7, #2]
 80074cc:	88b9      	ldrh	r1, [r7, #4]
 80074ce:	88f8      	ldrh	r0, [r7, #6]
 80074d0:	8c3b      	ldrh	r3, [r7, #32]
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	4623      	mov	r3, r4
 80074d6:	f7ff ffbf 	bl	8007458 <LCD_Fill>
		lcddev.dir = 1;
 80074da:	4b22      	ldr	r3, [pc, #136]	; (8007564 <LCD_Fill+0x10c>)
 80074dc:	2201      	movs	r2, #1
 80074de:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 80074e0:	4b20      	ldr	r3, [pc, #128]	; (8007564 <LCD_Fill+0x10c>)
 80074e2:	222b      	movs	r2, #43	; 0x2b
 80074e4:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 80074e6:	4b1f      	ldr	r3, [pc, #124]	; (8007564 <LCD_Fill+0x10c>)
 80074e8:	222a      	movs	r2, #42	; 0x2a
 80074ea:	819a      	strh	r2, [r3, #12]
 80074ec:	e036      	b.n	800755c <LCD_Fill+0x104>
	} else {
		xlen = ex - sx + 1;
 80074ee:	887a      	ldrh	r2, [r7, #2]
 80074f0:	88fb      	ldrh	r3, [r7, #6]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	3301      	adds	r3, #1
 80074f8:	817b      	strh	r3, [r7, #10]
		for (i = sy; i <= ey; i++) {
 80074fa:	88bb      	ldrh	r3, [r7, #4]
 80074fc:	81fb      	strh	r3, [r7, #14]
 80074fe:	e029      	b.n	8007554 <LCD_Fill+0xfc>
			LCD_SetCursor(sx, i);      				//设置光标位置
 8007500:	89fa      	ldrh	r2, [r7, #14]
 8007502:	88fb      	ldrh	r3, [r7, #6]
 8007504:	4611      	mov	r1, r2
 8007506:	4618      	mov	r0, r3
 8007508:	f7fb f886 	bl	8002618 <LCD_SetCursor>
			LCD_WriteRAM_Prepare();     			//开始写入GRAM	  
 800750c:	f7fb f878 	bl	8002600 <LCD_WriteRAM_Prepare>
			for (j = 0; j < xlen; j++)
 8007510:	2300      	movs	r3, #0
 8007512:	81bb      	strh	r3, [r7, #12]
 8007514:	e017      	b.n	8007546 <LCD_Fill+0xee>
				LCD_WR_DATA(color);	//设置光标位置
 8007516:	4b14      	ldr	r3, [pc, #80]	; (8007568 <LCD_Fill+0x110>)
 8007518:	f44f 7280 	mov.w	r2, #256	; 0x100
 800751c:	611a      	str	r2, [r3, #16]
 800751e:	4b12      	ldr	r3, [pc, #72]	; (8007568 <LCD_Fill+0x110>)
 8007520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007524:	615a      	str	r2, [r3, #20]
 8007526:	4a11      	ldr	r2, [pc, #68]	; (800756c <LCD_Fill+0x114>)
 8007528:	8c3b      	ldrh	r3, [r7, #32]
 800752a:	60d3      	str	r3, [r2, #12]
 800752c:	4b0e      	ldr	r3, [pc, #56]	; (8007568 <LCD_Fill+0x110>)
 800752e:	2280      	movs	r2, #128	; 0x80
 8007530:	615a      	str	r2, [r3, #20]
 8007532:	4b0d      	ldr	r3, [pc, #52]	; (8007568 <LCD_Fill+0x110>)
 8007534:	2280      	movs	r2, #128	; 0x80
 8007536:	611a      	str	r2, [r3, #16]
 8007538:	4b0b      	ldr	r3, [pc, #44]	; (8007568 <LCD_Fill+0x110>)
 800753a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800753e:	611a      	str	r2, [r3, #16]
			for (j = 0; j < xlen; j++)
 8007540:	89bb      	ldrh	r3, [r7, #12]
 8007542:	3301      	adds	r3, #1
 8007544:	81bb      	strh	r3, [r7, #12]
 8007546:	89ba      	ldrh	r2, [r7, #12]
 8007548:	897b      	ldrh	r3, [r7, #10]
 800754a:	429a      	cmp	r2, r3
 800754c:	d3e3      	bcc.n	8007516 <LCD_Fill+0xbe>
		for (i = sy; i <= ey; i++) {
 800754e:	89fb      	ldrh	r3, [r7, #14]
 8007550:	3301      	adds	r3, #1
 8007552:	81fb      	strh	r3, [r7, #14]
 8007554:	89fa      	ldrh	r2, [r7, #14]
 8007556:	883b      	ldrh	r3, [r7, #0]
 8007558:	429a      	cmp	r2, r3
 800755a:	d9d1      	bls.n	8007500 <LCD_Fill+0xa8>
		}
	}
}
 800755c:	bf00      	nop
 800755e:	3714      	adds	r7, #20
 8007560:	46bd      	mov	sp, r7
 8007562:	bd90      	pop	{r4, r7, pc}
 8007564:	2000018c 	.word	0x2000018c
 8007568:	40011000 	.word	0x40011000
 800756c:	40010c00 	.word	0x40010c00

08007570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007576:	f7f9 fccb 	bl	8000f10 <HAL_Init>

  /* USER CODE BEGIN Init */
	LCD_Init();
 800757a:	f7fb ffdd 	bl	8003538 <LCD_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800757e:	f000 f83b 	bl	80075f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007582:	f7fa fed5 	bl	8002330 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8007586:	f000 f9d3 	bl	8007930 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  println("???");
 800758a:	4811      	ldr	r0, [pc, #68]	; (80075d0 <main+0x60>)
 800758c:	f000 f8c6 	bl	800771c <println>

  GameObject_Self *self = malloc(sizeof(GameObject_Self));
 8007590:	2020      	movs	r0, #32
 8007592:	f000 fd51 	bl	8008038 <malloc>
 8007596:	4603      	mov	r3, r0
 8007598:	607b      	str	r3, [r7, #4]
  GameEvent *event = RegistGameEvent(
 800759a:	4b0e      	ldr	r3, [pc, #56]	; (80075d4 <main+0x64>)
 800759c:	9302      	str	r3, [sp, #8]
 800759e:	4b0e      	ldr	r3, [pc, #56]	; (80075d8 <main+0x68>)
 80075a0:	9301      	str	r3, [sp, #4]
 80075a2:	4b0e      	ldr	r3, [pc, #56]	; (80075dc <main+0x6c>)
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	4b0e      	ldr	r3, [pc, #56]	; (80075e0 <main+0x70>)
 80075a8:	4a0e      	ldr	r2, [pc, #56]	; (80075e4 <main+0x74>)
 80075aa:	490f      	ldr	r1, [pc, #60]	; (80075e8 <main+0x78>)
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fa35 	bl	8007a1c <RegistGameEvent>
 80075b2:	6038      	str	r0, [r7, #0]
						  self,
						  GameObject_Self_OnCreate, GameObject_Self_OnUpdate, GameObject_Self_OnDestroy,
						  GameObject_Self_OnRender, __GameObject_Self_Created, __GameObject_Self_ToDestroy
						);

  println("regested");
 80075b4:	480d      	ldr	r0, [pc, #52]	; (80075ec <main+0x7c>)
 80075b6:	f000 f8b1 	bl	800771c <println>

  Push(&objects, event);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	480c      	ldr	r0, [pc, #48]	; (80075f0 <main+0x80>)
 80075be:	f000 fb29 	bl	8007c14 <Push>

  println("pushed");
 80075c2:	480c      	ldr	r0, [pc, #48]	; (80075f4 <main+0x84>)
 80075c4:	f000 f8aa 	bl	800771c <println>

  GameEngineLoop();
 80075c8:	f7fa fe24 	bl	8002214 <GameEngineLoop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 80075cc:	e7fe      	b.n	80075cc <main+0x5c>
 80075ce:	bf00      	nop
 80075d0:	08008964 	.word	0x08008964
 80075d4:	08007bff 	.word	0x08007bff
 80075d8:	08007be9 	.word	0x08007be9
 80075dc:	08007bcd 	.word	0x08007bcd
 80075e0:	08007ba5 	.word	0x08007ba5
 80075e4:	08007b8d 	.word	0x08007b8d
 80075e8:	08007b59 	.word	0x08007b59
 80075ec:	08008968 	.word	0x08008968
 80075f0:	2000017c 	.word	0x2000017c
 80075f4:	08008974 	.word	0x08008974

080075f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b090      	sub	sp, #64	; 0x40
 80075fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80075fe:	f107 0318 	add.w	r3, r7, #24
 8007602:	2228      	movs	r2, #40	; 0x28
 8007604:	2100      	movs	r1, #0
 8007606:	4618      	mov	r0, r3
 8007608:	f000 fd26 	bl	8008058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800760c:	1d3b      	adds	r3, r7, #4
 800760e:	2200      	movs	r2, #0
 8007610:	601a      	str	r2, [r3, #0]
 8007612:	605a      	str	r2, [r3, #4]
 8007614:	609a      	str	r2, [r3, #8]
 8007616:	60da      	str	r2, [r3, #12]
 8007618:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800761a:	2302      	movs	r3, #2
 800761c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800761e:	2301      	movs	r3, #1
 8007620:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007622:	2310      	movs	r3, #16
 8007624:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8007626:	2300      	movs	r3, #0
 8007628:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800762a:	f107 0318 	add.w	r3, r7, #24
 800762e:	4618      	mov	r0, r3
 8007630:	f7f9 ffca 	bl	80015c8 <HAL_RCC_OscConfig>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d001      	beq.n	800763e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800763a:	f000 f865 	bl	8007708 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800763e:	230f      	movs	r3, #15
 8007640:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8007642:	2300      	movs	r3, #0
 8007644:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007646:	2300      	movs	r3, #0
 8007648:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800764a:	2300      	movs	r3, #0
 800764c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800764e:	2300      	movs	r3, #0
 8007650:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007652:	1d3b      	adds	r3, r7, #4
 8007654:	2100      	movs	r1, #0
 8007656:	4618      	mov	r0, r3
 8007658:	f7fa fa36 	bl	8001ac8 <HAL_RCC_ClockConfig>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d001      	beq.n	8007666 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8007662:	f000 f851 	bl	8007708 <Error_Handler>
  }
}
 8007666:	bf00      	nop
 8007668:	3740      	adds	r7, #64	; 0x40
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
	...

08007670 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	4603      	mov	r3, r0
 8007678:	80fb      	strh	r3, [r7, #6]
HAL_Delay(100);
 800767a:	2064      	movs	r0, #100	; 0x64
 800767c:	f7f9 fcaa 	bl	8000fd4 <HAL_Delay>
switch (GPIO_Pin) {
 8007680:	88fb      	ldrh	r3, [r7, #6]
 8007682:	2b20      	cmp	r3, #32
 8007684:	d005      	beq.n	8007692 <HAL_GPIO_EXTI_Callback+0x22>
 8007686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800768a:	d00f      	beq.n	80076ac <HAL_GPIO_EXTI_Callback+0x3c>
 800768c:	2b01      	cmp	r3, #1
 800768e:	d01a      	beq.n	80076c6 <HAL_GPIO_EXTI_Callback+0x56>
HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
}
break;
default:
break;
 8007690:	e02f      	b.n	80076f2 <HAL_GPIO_EXTI_Callback+0x82>
if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET) {
 8007692:	2120      	movs	r1, #32
 8007694:	4819      	ldr	r0, [pc, #100]	; (80076fc <HAL_GPIO_EXTI_Callback+0x8c>)
 8007696:	f7f9 ff37 	bl	8001508 <HAL_GPIO_ReadPin>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d123      	bne.n	80076e8 <HAL_GPIO_EXTI_Callback+0x78>
HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80076a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80076a4:	4816      	ldr	r0, [pc, #88]	; (8007700 <HAL_GPIO_EXTI_Callback+0x90>)
 80076a6:	f7f9 ff5e 	bl	8001566 <HAL_GPIO_TogglePin>
break;
 80076aa:	e01d      	b.n	80076e8 <HAL_GPIO_EXTI_Callback+0x78>
if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET) {
 80076ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80076b0:	4813      	ldr	r0, [pc, #76]	; (8007700 <HAL_GPIO_EXTI_Callback+0x90>)
 80076b2:	f7f9 ff29 	bl	8001508 <HAL_GPIO_ReadPin>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d117      	bne.n	80076ec <HAL_GPIO_EXTI_Callback+0x7c>
HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80076bc:	2104      	movs	r1, #4
 80076be:	4811      	ldr	r0, [pc, #68]	; (8007704 <HAL_GPIO_EXTI_Callback+0x94>)
 80076c0:	f7f9 ff51 	bl	8001566 <HAL_GPIO_TogglePin>
break;
 80076c4:	e012      	b.n	80076ec <HAL_GPIO_EXTI_Callback+0x7c>
if (HAL_GPIO_ReadPin(KEY_WK_GPIO_Port, KEY_WK_Pin) == GPIO_PIN_SET) {
 80076c6:	2101      	movs	r1, #1
 80076c8:	480d      	ldr	r0, [pc, #52]	; (8007700 <HAL_GPIO_EXTI_Callback+0x90>)
 80076ca:	f7f9 ff1d 	bl	8001508 <HAL_GPIO_ReadPin>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d10d      	bne.n	80076f0 <HAL_GPIO_EXTI_Callback+0x80>
HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80076d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80076d8:	4809      	ldr	r0, [pc, #36]	; (8007700 <HAL_GPIO_EXTI_Callback+0x90>)
 80076da:	f7f9 ff44 	bl	8001566 <HAL_GPIO_TogglePin>
HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80076de:	2104      	movs	r1, #4
 80076e0:	4808      	ldr	r0, [pc, #32]	; (8007704 <HAL_GPIO_EXTI_Callback+0x94>)
 80076e2:	f7f9 ff40 	bl	8001566 <HAL_GPIO_TogglePin>
break;
 80076e6:	e003      	b.n	80076f0 <HAL_GPIO_EXTI_Callback+0x80>
break;
 80076e8:	bf00      	nop
 80076ea:	e002      	b.n	80076f2 <HAL_GPIO_EXTI_Callback+0x82>
break;
 80076ec:	bf00      	nop
 80076ee:	e000      	b.n	80076f2 <HAL_GPIO_EXTI_Callback+0x82>
break;
 80076f0:	bf00      	nop
}}
 80076f2:	bf00      	nop
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	40011000 	.word	0x40011000
 8007700:	40010800 	.word	0x40010800
 8007704:	40011400 	.word	0x40011400

08007708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	printlnf("error");
 800770c:	4802      	ldr	r0, [pc, #8]	; (8007718 <Error_Handler+0x10>)
 800770e:	f000 f823 	bl	8007758 <printlnf>
	/* User can add his own implementation to report the HAL error return state */
  /* USER CODE END Error_Handler_Debug */
}
 8007712:	bf00      	nop
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	0800897c 	.word	0x0800897c

0800771c <println>:
#include "usart.h"

char __msg[50];

void println(const char* str)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
	sprintf(__msg, "%s\n", str);
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	4909      	ldr	r1, [pc, #36]	; (800774c <println+0x30>)
 8007728:	4809      	ldr	r0, [pc, #36]	; (8007750 <println+0x34>)
 800772a:	f000 fd61 	bl	80081f0 <siprintf>
	HAL_UART_Transmit(&huart1, (unsigned char*)__msg, strlen(__msg), 0xffff);
 800772e:	4808      	ldr	r0, [pc, #32]	; (8007750 <println+0x34>)
 8007730:	f7f8 fd7a 	bl	8000228 <strlen>
 8007734:	4603      	mov	r3, r0
 8007736:	b29a      	uxth	r2, r3
 8007738:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800773c:	4904      	ldr	r1, [pc, #16]	; (8007750 <println+0x34>)
 800773e:	4805      	ldr	r0, [pc, #20]	; (8007754 <println+0x38>)
 8007740:	f7fa fbab 	bl	8001e9a <HAL_UART_Transmit>
}
 8007744:	bf00      	nop
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	08008984 	.word	0x08008984
 8007750:	2000019c 	.word	0x2000019c
 8007754:	200001d0 	.word	0x200001d0

08007758 <printlnf>:

void printlnf(const char* fmt, ...)
{
 8007758:	b40f      	push	{r0, r1, r2, r3}
 800775a:	b580      	push	{r7, lr}
 800775c:	b082      	sub	sp, #8
 800775e:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, fmt);
 8007760:	f107 0314 	add.w	r3, r7, #20
 8007764:	607b      	str	r3, [r7, #4]
	vsprintf(__msg, fmt, args);
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	6939      	ldr	r1, [r7, #16]
 800776a:	4806      	ldr	r0, [pc, #24]	; (8007784 <printlnf+0x2c>)
 800776c:	f000 fd76 	bl	800825c <vsiprintf>
	va_end(args);

	println(__msg);
 8007770:	4804      	ldr	r0, [pc, #16]	; (8007784 <printlnf+0x2c>)
 8007772:	f7ff ffd3 	bl	800771c <println>
}
 8007776:	bf00      	nop
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007780:	b004      	add	sp, #16
 8007782:	4770      	bx	lr
 8007784:	2000019c 	.word	0x2000019c

08007788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800778e:	4b16      	ldr	r3, [pc, #88]	; (80077e8 <HAL_MspInit+0x60>)
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	4a15      	ldr	r2, [pc, #84]	; (80077e8 <HAL_MspInit+0x60>)
 8007794:	f043 0301 	orr.w	r3, r3, #1
 8007798:	6193      	str	r3, [r2, #24]
 800779a:	4b13      	ldr	r3, [pc, #76]	; (80077e8 <HAL_MspInit+0x60>)
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	60bb      	str	r3, [r7, #8]
 80077a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80077a6:	4b10      	ldr	r3, [pc, #64]	; (80077e8 <HAL_MspInit+0x60>)
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	4a0f      	ldr	r2, [pc, #60]	; (80077e8 <HAL_MspInit+0x60>)
 80077ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077b0:	61d3      	str	r3, [r2, #28]
 80077b2:	4b0d      	ldr	r3, [pc, #52]	; (80077e8 <HAL_MspInit+0x60>)
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077ba:	607b      	str	r3, [r7, #4]
 80077bc:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80077be:	2005      	movs	r0, #5
 80077c0:	f7f9 fcf6 	bl	80011b0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80077c4:	4b09      	ldr	r3, [pc, #36]	; (80077ec <HAL_MspInit+0x64>)
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	60fb      	str	r3, [r7, #12]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80077d0:	60fb      	str	r3, [r7, #12]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80077d8:	60fb      	str	r3, [r7, #12]
 80077da:	4a04      	ldr	r2, [pc, #16]	; (80077ec <HAL_MspInit+0x64>)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80077e0:	bf00      	nop
 80077e2:	3710      	adds	r7, #16
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	40021000 	.word	0x40021000
 80077ec:	40010000 	.word	0x40010000

080077f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80077f0:	b480      	push	{r7}
 80077f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80077f4:	bf00      	nop
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bc80      	pop	{r7}
 80077fa:	4770      	bx	lr

080077fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80077fc:	b480      	push	{r7}
 80077fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007800:	e7fe      	b.n	8007800 <HardFault_Handler+0x4>

08007802 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007802:	b480      	push	{r7}
 8007804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007806:	e7fe      	b.n	8007806 <MemManage_Handler+0x4>

08007808 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007808:	b480      	push	{r7}
 800780a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800780c:	e7fe      	b.n	800780c <BusFault_Handler+0x4>

0800780e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800780e:	b480      	push	{r7}
 8007810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007812:	e7fe      	b.n	8007812 <UsageFault_Handler+0x4>

08007814 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007814:	b480      	push	{r7}
 8007816:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007818:	bf00      	nop
 800781a:	46bd      	mov	sp, r7
 800781c:	bc80      	pop	{r7}
 800781e:	4770      	bx	lr

08007820 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007820:	b480      	push	{r7}
 8007822:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007824:	bf00      	nop
 8007826:	46bd      	mov	sp, r7
 8007828:	bc80      	pop	{r7}
 800782a:	4770      	bx	lr

0800782c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800782c:	b480      	push	{r7}
 800782e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007830:	bf00      	nop
 8007832:	46bd      	mov	sp, r7
 8007834:	bc80      	pop	{r7}
 8007836:	4770      	bx	lr

08007838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800783c:	f7f9 fbae 	bl	8000f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007840:	bf00      	nop
 8007842:	bd80      	pop	{r7, pc}

08007844 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8007848:	2001      	movs	r0, #1
 800784a:	f7f9 fea5 	bl	8001598 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800784e:	bf00      	nop
 8007850:	bd80      	pop	{r7, pc}

08007852 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8007856:	2020      	movs	r0, #32
 8007858:	f7f9 fe9e 	bl	8001598 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800785c:	bf00      	nop
 800785e:	bd80      	pop	{r7, pc}

08007860 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8007864:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007868:	f7f9 fe96 	bl	8001598 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800786c:	bf00      	nop
 800786e:	bd80      	pop	{r7, pc}

08007870 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007878:	4b11      	ldr	r3, [pc, #68]	; (80078c0 <_sbrk+0x50>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d102      	bne.n	8007886 <_sbrk+0x16>
		heap_end = &end;
 8007880:	4b0f      	ldr	r3, [pc, #60]	; (80078c0 <_sbrk+0x50>)
 8007882:	4a10      	ldr	r2, [pc, #64]	; (80078c4 <_sbrk+0x54>)
 8007884:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007886:	4b0e      	ldr	r3, [pc, #56]	; (80078c0 <_sbrk+0x50>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800788c:	4b0c      	ldr	r3, [pc, #48]	; (80078c0 <_sbrk+0x50>)
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4413      	add	r3, r2
 8007894:	466a      	mov	r2, sp
 8007896:	4293      	cmp	r3, r2
 8007898:	d907      	bls.n	80078aa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800789a:	f000 fba3 	bl	8007fe4 <__errno>
 800789e:	4602      	mov	r2, r0
 80078a0:	230c      	movs	r3, #12
 80078a2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80078a4:	f04f 33ff 	mov.w	r3, #4294967295
 80078a8:	e006      	b.n	80078b8 <_sbrk+0x48>
	}

	heap_end += incr;
 80078aa:	4b05      	ldr	r3, [pc, #20]	; (80078c0 <_sbrk+0x50>)
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4413      	add	r3, r2
 80078b2:	4a03      	ldr	r2, [pc, #12]	; (80078c0 <_sbrk+0x50>)
 80078b4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80078b6:	68fb      	ldr	r3, [r7, #12]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	20000154 	.word	0x20000154
 80078c4:	20000218 	.word	0x20000218

080078c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80078c8:	b480      	push	{r7}
 80078ca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80078cc:	4b15      	ldr	r3, [pc, #84]	; (8007924 <SystemInit+0x5c>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a14      	ldr	r2, [pc, #80]	; (8007924 <SystemInit+0x5c>)
 80078d2:	f043 0301 	orr.w	r3, r3, #1
 80078d6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80078d8:	4b12      	ldr	r3, [pc, #72]	; (8007924 <SystemInit+0x5c>)
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	4911      	ldr	r1, [pc, #68]	; (8007924 <SystemInit+0x5c>)
 80078de:	4b12      	ldr	r3, [pc, #72]	; (8007928 <SystemInit+0x60>)
 80078e0:	4013      	ands	r3, r2
 80078e2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80078e4:	4b0f      	ldr	r3, [pc, #60]	; (8007924 <SystemInit+0x5c>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a0e      	ldr	r2, [pc, #56]	; (8007924 <SystemInit+0x5c>)
 80078ea:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80078ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078f2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80078f4:	4b0b      	ldr	r3, [pc, #44]	; (8007924 <SystemInit+0x5c>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a0a      	ldr	r2, [pc, #40]	; (8007924 <SystemInit+0x5c>)
 80078fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078fe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8007900:	4b08      	ldr	r3, [pc, #32]	; (8007924 <SystemInit+0x5c>)
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	4a07      	ldr	r2, [pc, #28]	; (8007924 <SystemInit+0x5c>)
 8007906:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800790a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800790c:	4b05      	ldr	r3, [pc, #20]	; (8007924 <SystemInit+0x5c>)
 800790e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8007912:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8007914:	4b05      	ldr	r3, [pc, #20]	; (800792c <SystemInit+0x64>)
 8007916:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800791a:	609a      	str	r2, [r3, #8]
#endif 
}
 800791c:	bf00      	nop
 800791e:	46bd      	mov	sp, r7
 8007920:	bc80      	pop	{r7}
 8007922:	4770      	bx	lr
 8007924:	40021000 	.word	0x40021000
 8007928:	f8ff0000 	.word	0xf8ff0000
 800792c:	e000ed00 	.word	0xe000ed00

08007930 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8007934:	4b11      	ldr	r3, [pc, #68]	; (800797c <MX_USART1_UART_Init+0x4c>)
 8007936:	4a12      	ldr	r2, [pc, #72]	; (8007980 <MX_USART1_UART_Init+0x50>)
 8007938:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800793a:	4b10      	ldr	r3, [pc, #64]	; (800797c <MX_USART1_UART_Init+0x4c>)
 800793c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007940:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007942:	4b0e      	ldr	r3, [pc, #56]	; (800797c <MX_USART1_UART_Init+0x4c>)
 8007944:	2200      	movs	r2, #0
 8007946:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007948:	4b0c      	ldr	r3, [pc, #48]	; (800797c <MX_USART1_UART_Init+0x4c>)
 800794a:	2200      	movs	r2, #0
 800794c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800794e:	4b0b      	ldr	r3, [pc, #44]	; (800797c <MX_USART1_UART_Init+0x4c>)
 8007950:	2200      	movs	r2, #0
 8007952:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007954:	4b09      	ldr	r3, [pc, #36]	; (800797c <MX_USART1_UART_Init+0x4c>)
 8007956:	220c      	movs	r2, #12
 8007958:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800795a:	4b08      	ldr	r3, [pc, #32]	; (800797c <MX_USART1_UART_Init+0x4c>)
 800795c:	2200      	movs	r2, #0
 800795e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007960:	4b06      	ldr	r3, [pc, #24]	; (800797c <MX_USART1_UART_Init+0x4c>)
 8007962:	2200      	movs	r2, #0
 8007964:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007966:	4805      	ldr	r0, [pc, #20]	; (800797c <MX_USART1_UART_Init+0x4c>)
 8007968:	f7fa fa4a 	bl	8001e00 <HAL_UART_Init>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d001      	beq.n	8007976 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007972:	f7ff fec9 	bl	8007708 <Error_Handler>
  }

}
 8007976:	bf00      	nop
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	200001d0 	.word	0x200001d0
 8007980:	40013800 	.word	0x40013800

08007984 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b088      	sub	sp, #32
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800798c:	f107 0310 	add.w	r3, r7, #16
 8007990:	2200      	movs	r2, #0
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	605a      	str	r2, [r3, #4]
 8007996:	609a      	str	r2, [r3, #8]
 8007998:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a1c      	ldr	r2, [pc, #112]	; (8007a10 <HAL_UART_MspInit+0x8c>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d131      	bne.n	8007a08 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80079a4:	4b1b      	ldr	r3, [pc, #108]	; (8007a14 <HAL_UART_MspInit+0x90>)
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	4a1a      	ldr	r2, [pc, #104]	; (8007a14 <HAL_UART_MspInit+0x90>)
 80079aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079ae:	6193      	str	r3, [r2, #24]
 80079b0:	4b18      	ldr	r3, [pc, #96]	; (8007a14 <HAL_UART_MspInit+0x90>)
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079b8:	60fb      	str	r3, [r7, #12]
 80079ba:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079bc:	4b15      	ldr	r3, [pc, #84]	; (8007a14 <HAL_UART_MspInit+0x90>)
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	4a14      	ldr	r2, [pc, #80]	; (8007a14 <HAL_UART_MspInit+0x90>)
 80079c2:	f043 0304 	orr.w	r3, r3, #4
 80079c6:	6193      	str	r3, [r2, #24]
 80079c8:	4b12      	ldr	r3, [pc, #72]	; (8007a14 <HAL_UART_MspInit+0x90>)
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	f003 0304 	and.w	r3, r3, #4
 80079d0:	60bb      	str	r3, [r7, #8]
 80079d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80079d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079da:	2302      	movs	r3, #2
 80079dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80079de:	2303      	movs	r3, #3
 80079e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079e2:	f107 0310 	add.w	r3, r7, #16
 80079e6:	4619      	mov	r1, r3
 80079e8:	480b      	ldr	r0, [pc, #44]	; (8007a18 <HAL_UART_MspInit+0x94>)
 80079ea:	f7f9 fc23 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80079ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80079f4:	2300      	movs	r3, #0
 80079f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079f8:	2300      	movs	r3, #0
 80079fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079fc:	f107 0310 	add.w	r3, r7, #16
 8007a00:	4619      	mov	r1, r3
 8007a02:	4805      	ldr	r0, [pc, #20]	; (8007a18 <HAL_UART_MspInit+0x94>)
 8007a04:	f7f9 fc16 	bl	8001234 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8007a08:	bf00      	nop
 8007a0a:	3720      	adds	r7, #32
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	40013800 	.word	0x40013800
 8007a14:	40021000 	.word	0x40021000
 8007a18:	40010800 	.word	0x40010800

08007a1c <RegistGameEvent>:
	void (*OnUpdate)(void*),
	void (*OnDestroy)(void*),
	void (*OnRender)(void*, Color**),
	bool (*__Created)(void*),
	bool (*__ToDestroy)(void*)
){
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	607a      	str	r2, [r7, #4]
 8007a28:	603b      	str	r3, [r7, #0]
	GameEvent* ge = malloc(sizeof(GameEvent));
 8007a2a:	201c      	movs	r0, #28
 8007a2c:	f000 fb04 	bl	8008038 <malloc>
 8007a30:	4603      	mov	r3, r0
 8007a32:	617b      	str	r3, [r7, #20]

	ge->game_object = game_object;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	601a      	str	r2, [r3, #0]
	ge->OnCreate = OnCreate;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	605a      	str	r2, [r3, #4]
	ge->OnDestroy = OnDestroy;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	60da      	str	r2, [r3, #12]
	ge->OnRender = OnRender;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	6a3a      	ldr	r2, [r7, #32]
 8007a4a:	611a      	str	r2, [r3, #16]
	ge->__Created = __Created;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a50:	615a      	str	r2, [r3, #20]
	ge->__ToDestroy = __ToDestroy;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a56:	619a      	str	r2, [r3, #24]

	return ge;
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3718      	adds	r7, #24
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <GameObject_Initialize>:
void GameObject_Initialize
(
	GameObject* self, uint16_t pos_x, uint16_t pos_y, 
	uint16_t collider, uint16_t width, uint16_t height,
	Color** img
){
 8007a62:	b480      	push	{r7}
 8007a64:	b085      	sub	sp, #20
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	60f8      	str	r0, [r7, #12]
 8007a6a:	4608      	mov	r0, r1
 8007a6c:	4611      	mov	r1, r2
 8007a6e:	461a      	mov	r2, r3
 8007a70:	4603      	mov	r3, r0
 8007a72:	817b      	strh	r3, [r7, #10]
 8007a74:	460b      	mov	r3, r1
 8007a76:	813b      	strh	r3, [r7, #8]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	80fb      	strh	r3, [r7, #6]
	self->speed_x = 0.0f;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f04f 0200 	mov.w	r2, #0
 8007a82:	601a      	str	r2, [r3, #0]
	self->speed_y = 0.0f;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f04f 0200 	mov.w	r2, #0
 8007a8a:	605a      	str	r2, [r3, #4]
	self->pos_x = pos_x;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	897a      	ldrh	r2, [r7, #10]
 8007a90:	811a      	strh	r2, [r3, #8]
	self->pos_y = pos_y;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	893a      	ldrh	r2, [r7, #8]
 8007a96:	815a      	strh	r2, [r3, #10]
	self->collider = collider;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	88fa      	ldrh	r2, [r7, #6]
 8007a9c:	819a      	strh	r2, [r3, #12]
	self->width = width;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	8b3a      	ldrh	r2, [r7, #24]
 8007aa2:	81da      	strh	r2, [r3, #14]
	self->height = height;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	8bba      	ldrh	r2, [r7, #28]
 8007aa8:	821a      	strh	r2, [r3, #16]
	self->img = img;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6a3a      	ldr	r2, [r7, #32]
 8007aae:	615a      	str	r2, [r3, #20]
	self->__created = false;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	761a      	strb	r2, [r3, #24]
	self->__to_destroy = false;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	765a      	strb	r2, [r3, #25]
}
 8007abc:	bf00      	nop
 8007abe:	3714      	adds	r7, #20
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bc80      	pop	{r7}
 8007ac4:	4770      	bx	lr
	...

08007ac8 <GameObject_OnUpdate>:
{
	self->__created = true;
}

void GameObject_OnUpdate(GameObject* self)
{
 8007ac8:	b590      	push	{r4, r7, lr}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
	self->pos_x += (uint16_t)(self->speed_x * delta_time);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	891c      	ldrh	r4, [r3, #8]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	4b13      	ldr	r3, [pc, #76]	; (8007b28 <GameObject_OnUpdate+0x60>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4619      	mov	r1, r3
 8007ade:	4610      	mov	r0, r2
 8007ae0:	f7f9 f8a6 	bl	8000c30 <__aeabi_fmul>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7f9 f9f2 	bl	8000ed0 <__aeabi_f2uiz>
 8007aec:	4603      	mov	r3, r0
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	4423      	add	r3, r4
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	811a      	strh	r2, [r3, #8]
	self->pos_y += (uint16_t)(self->speed_y * delta_time);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	895c      	ldrh	r4, [r3, #10]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685a      	ldr	r2, [r3, #4]
 8007b00:	4b09      	ldr	r3, [pc, #36]	; (8007b28 <GameObject_OnUpdate+0x60>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4619      	mov	r1, r3
 8007b06:	4610      	mov	r0, r2
 8007b08:	f7f9 f892 	bl	8000c30 <__aeabi_fmul>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7f9 f9de 	bl	8000ed0 <__aeabi_f2uiz>
 8007b14:	4603      	mov	r3, r0
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	4423      	add	r3, r4
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	815a      	strh	r2, [r3, #10]
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd90      	pop	{r4, r7, pc}
 8007b28:	20000188 	.word	0x20000188

08007b2c <GameObject_OnDestroy>:

void GameObject_OnDestroy(GameObject* self)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
	
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bc80      	pop	{r7}
 8007b3c:	4770      	bx	lr

08007b3e <GameObject_OnRender>:

void GameObject_OnRender(GameObject* self, Color** screen)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b082      	sub	sp, #8
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	6039      	str	r1, [r7, #0]
	Render(self, screen);
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 f8c3 	bl	8007cd6 <Render>
 8007b50:	bf00      	nop
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <GameObject_Self_OnCreate>:
#include "Img_TestImages.h"
#include "Time.h"
#include "mygpio.h"

void GameObject_Self_OnCreate(GameObject_Self* self)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af04      	add	r7, sp, #16
 8007b5e:	6078      	str	r0, [r7, #4]
	self->life = 1;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	61da      	str	r2, [r3, #28]
	GameObject_Initialize(&(self->base), 20, 20, 10, 10, 10, Img_GreenBlock_10x10);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	4b07      	ldr	r3, [pc, #28]	; (8007b88 <GameObject_Self_OnCreate+0x30>)
 8007b6a:	9302      	str	r3, [sp, #8]
 8007b6c:	230a      	movs	r3, #10
 8007b6e:	9301      	str	r3, [sp, #4]
 8007b70:	230a      	movs	r3, #10
 8007b72:	9300      	str	r3, [sp, #0]
 8007b74:	230a      	movs	r3, #10
 8007b76:	2214      	movs	r2, #20
 8007b78:	2114      	movs	r1, #20
 8007b7a:	f7ff ff72 	bl	8007a62 <GameObject_Initialize>
}
 8007b7e:	bf00      	nop
 8007b80:	3708      	adds	r7, #8
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	2000000c 	.word	0x2000000c

08007b8c <GameObject_Self_OnUpdate>:

void GameObject_Self_OnUpdate(GameObject_Self* self)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
	GameObject_OnUpdate(&(self->base));
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7ff ff96 	bl	8007ac8 <GameObject_OnUpdate>
}
 8007b9c:	bf00      	nop
 8007b9e:	3708      	adds	r7, #8
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <GameObject_Self_OnDestroy>:

void GameObject_Self_OnDestroy(GameObject_Self* self)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
	println("self destroyed");
 8007bac:	4806      	ldr	r0, [pc, #24]	; (8007bc8 <GameObject_Self_OnDestroy+0x24>)
 8007bae:	f7ff fdb5 	bl	800771c <println>
	GameObject_OnDestroy(&(self->base));
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7ff ffb9 	bl	8007b2c <GameObject_OnDestroy>

	free(self);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fa44 	bl	8008048 <free>
}
 8007bc0:	bf00      	nop
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	08008988 	.word	0x08008988

08007bcc <GameObject_Self_OnRender>:

void GameObject_Self_OnRender(GameObject_Self* self, Color** screen)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	6039      	str	r1, [r7, #0]
	GameObject_OnRender(&self->base, screen);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6839      	ldr	r1, [r7, #0]
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7ff ffaf 	bl	8007b3e <GameObject_OnRender>
}
 8007be0:	bf00      	nop
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <__GameObject_Self_Created>:

bool __GameObject_Self_Created(GameObject_Self* self)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
	return self->base.__created;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	7e1b      	ldrb	r3, [r3, #24]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bc80      	pop	{r7}
 8007bfc:	4770      	bx	lr

08007bfe <__GameObject_Self_ToDestroy>:

bool __GameObject_Self_ToDestroy(GameObject_Self* self)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b083      	sub	sp, #12
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
	return self->base.__to_destroy;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	7e5b      	ldrb	r3, [r3, #25]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	370c      	adds	r7, #12
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bc80      	pop	{r7}
 8007c12:	4770      	bx	lr

08007c14 <Push>:
#include "LinkedList.h"

Node* Push(LinkedList *linked_list, void *object)
{
 8007c14:	b590      	push	{r4, r7, lr}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
	if (!linked_list->length)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d11c      	bne.n	8007c60 <Push+0x4c>
	{
		linked_list->head = malloc(sizeof(Node));
 8007c26:	200c      	movs	r0, #12
 8007c28:	f000 fa06 	bl	8008038 <malloc>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	461a      	mov	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	601a      	str	r2, [r3, #0]
		linked_list->head->object = object;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	683a      	ldr	r2, [r7, #0]
 8007c3a:	601a      	str	r2, [r3, #0]
		linked_list->head->prev = NULL;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2200      	movs	r2, #0
 8007c42:	605a      	str	r2, [r3, #4]
		linked_list->tail = linked_list->head;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	605a      	str	r2, [r3, #4]
		linked_list->tail->next = NULL;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	609a      	str	r2, [r3, #8]
		linked_list->length++;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	1c5a      	adds	r2, r3, #1
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	609a      	str	r2, [r3, #8]
 8007c5e:	e01f      	b.n	8007ca0 <Push+0x8c>
	}
	else
	{
		Node *temp = linked_list->tail;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	60fb      	str	r3, [r7, #12]
		linked_list->tail->next = malloc(sizeof(Node));
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	685c      	ldr	r4, [r3, #4]
 8007c6a:	200c      	movs	r0, #12
 8007c6c:	f000 f9e4 	bl	8008038 <malloc>
 8007c70:	4603      	mov	r3, r0
 8007c72:	60a3      	str	r3, [r4, #8]
		linked_list->tail = linked_list->tail->next;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	689a      	ldr	r2, [r3, #8]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	605a      	str	r2, [r3, #4]
		linked_list->tail->object = object;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	601a      	str	r2, [r3, #0]
		linked_list->tail->prev = temp;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	605a      	str	r2, [r3, #4]
		linked_list->tail->next = NULL;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	609a      	str	r2, [r3, #8]
		linked_list->length++;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	1c5a      	adds	r2, r3, #1
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	609a      	str	r2, [r3, #8]
	}
	return linked_list->tail;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685b      	ldr	r3, [r3, #4]
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3714      	adds	r7, #20
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd90      	pop	{r4, r7, pc}

08007cac <RemoveNode>:

void RemoveNode(Node *node)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	6852      	ldr	r2, [r2, #4]
 8007cbc:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	6892      	ldr	r2, [r2, #8]
 8007cc6:	609a      	str	r2, [r3, #8]
	free(node);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 f9bd 	bl	8008048 <free>
 8007cce:	bf00      	nop
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <Render>:
#define __SCALE 6

Color **__last_screen = NULL;

void Render(GameObject* game_object, Color **screen)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b08b      	sub	sp, #44	; 0x2c
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
 8007cde:	6039      	str	r1, [r7, #0]
	unsigned sx, sy, ex, ey;
	unsigned i, j;
	Color c;

	sx = game_object->pos_x - (game_object->width + 1) / 2;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	891b      	ldrh	r3, [r3, #8]
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	89db      	ldrh	r3, [r3, #14]
 8007cea:	3301      	adds	r3, #1
 8007cec:	0fda      	lsrs	r2, r3, #31
 8007cee:	4413      	add	r3, r2
 8007cf0:	105b      	asrs	r3, r3, #1
 8007cf2:	425b      	negs	r3, r3
 8007cf4:	440b      	add	r3, r1
 8007cf6:	61fb      	str	r3, [r7, #28]
	sy = game_object->pos_y - (game_object->height + 1) / 2;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	895b      	ldrh	r3, [r3, #10]
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	8a1b      	ldrh	r3, [r3, #16]
 8007d02:	3301      	adds	r3, #1
 8007d04:	0fda      	lsrs	r2, r3, #31
 8007d06:	4413      	add	r3, r2
 8007d08:	105b      	asrs	r3, r3, #1
 8007d0a:	425b      	negs	r3, r3
 8007d0c:	440b      	add	r3, r1
 8007d0e:	61bb      	str	r3, [r7, #24]
	ex = game_object->pos_x + game_object->width / 2;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	891b      	ldrh	r3, [r3, #8]
 8007d14:	461a      	mov	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	89db      	ldrh	r3, [r3, #14]
 8007d1a:	085b      	lsrs	r3, r3, #1
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	4413      	add	r3, r2
 8007d20:	617b      	str	r3, [r7, #20]
	ey = game_object->pos_y + game_object->height / 2;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	895b      	ldrh	r3, [r3, #10]
 8007d26:	461a      	mov	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	8a1b      	ldrh	r3, [r3, #16]
 8007d2c:	085b      	lsrs	r3, r3, #1
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	4413      	add	r3, r2
 8007d32:	613b      	str	r3, [r7, #16]
	
	for (i = MAX(sy, 0); i < MIN(ey, __HEIGHT); i++)
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	627b      	str	r3, [r7, #36]	; 0x24
 8007d38:	e02b      	b.n	8007d92 <Render+0xbc>
		for (j = MAX(sx, 0); j < MIN(ex, __WIDTH); j++)
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	623b      	str	r3, [r7, #32]
 8007d3e:	e01e      	b.n	8007d7e <Render+0xa8>
		{
			c = game_object->img[i - sy][j - sx];
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	695a      	ldr	r2, [r3, #20]
 8007d44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	1acb      	subs	r3, r1, r3
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	6a39      	ldr	r1, [r7, #32]
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	1acb      	subs	r3, r1, r3
 8007d56:	005b      	lsls	r3, r3, #1
 8007d58:	4413      	add	r3, r2
 8007d5a:	881b      	ldrh	r3, [r3, #0]
 8007d5c:	81fb      	strh	r3, [r7, #14]
			if (c != TRANSPARENT)
 8007d5e:	89fb      	ldrh	r3, [r7, #14]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d009      	beq.n	8007d78 <Render+0xa2>
				screen[i][j] = c;
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	683a      	ldr	r2, [r7, #0]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	6a3b      	ldr	r3, [r7, #32]
 8007d70:	005b      	lsls	r3, r3, #1
 8007d72:	4413      	add	r3, r2
 8007d74:	89fa      	ldrh	r2, [r7, #14]
 8007d76:	801a      	strh	r2, [r3, #0]
		for (j = MAX(sx, 0); j < MIN(ex, __WIDTH); j++)
 8007d78:	6a3b      	ldr	r3, [r7, #32]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	623b      	str	r3, [r7, #32]
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	2b26      	cmp	r3, #38	; 0x26
 8007d82:	bf28      	it	cs
 8007d84:	2326      	movcs	r3, #38	; 0x26
 8007d86:	6a3a      	ldr	r2, [r7, #32]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d3d9      	bcc.n	8007d40 <Render+0x6a>
	for (i = MAX(sy, 0); i < MIN(ey, __HEIGHT); i++)
 8007d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8e:	3301      	adds	r3, #1
 8007d90:	627b      	str	r3, [r7, #36]	; 0x24
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	2b30      	cmp	r3, #48	; 0x30
 8007d96:	bf28      	it	cs
 8007d98:	2330      	movcs	r3, #48	; 0x30
 8007d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d3cc      	bcc.n	8007d3a <Render+0x64>
		}
}
 8007da0:	bf00      	nop
 8007da2:	372c      	adds	r7, #44	; 0x2c
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bc80      	pop	{r7}
 8007da8:	4770      	bx	lr

08007daa <InitScreen>:

Color** InitScreen(Color** screen)
{
 8007daa:	b590      	push	{r4, r7, lr}
 8007dac:	b085      	sub	sp, #20
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
	uint16_t i, j;

	if(!screen)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d118      	bne.n	8007dea <InitScreen+0x40>
	{
		screen = calloc(sizeof(Color*), __HEIGHT);
 8007db8:	2130      	movs	r1, #48	; 0x30
 8007dba:	2004      	movs	r0, #4
 8007dbc:	f000 f90a 	bl	8007fd4 <calloc>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	607b      	str	r3, [r7, #4]

		for (i = 0; i < __HEIGHT; i++)
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	81fb      	strh	r3, [r7, #14]
 8007dc8:	e00c      	b.n	8007de4 <InitScreen+0x3a>
		screen[i] = calloc(sizeof(Color), __WIDTH);
 8007dca:	89fb      	ldrh	r3, [r7, #14]
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	18d4      	adds	r4, r2, r3
 8007dd2:	2126      	movs	r1, #38	; 0x26
 8007dd4:	2002      	movs	r0, #2
 8007dd6:	f000 f8fd 	bl	8007fd4 <calloc>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	6023      	str	r3, [r4, #0]
		for (i = 0; i < __HEIGHT; i++)
 8007dde:	89fb      	ldrh	r3, [r7, #14]
 8007de0:	3301      	adds	r3, #1
 8007de2:	81fb      	strh	r3, [r7, #14]
 8007de4:	89fb      	ldrh	r3, [r7, #14]
 8007de6:	2b2f      	cmp	r3, #47	; 0x2f
 8007de8:	d9ef      	bls.n	8007dca <InitScreen+0x20>
	}

	for (i = 0; i < __HEIGHT; i++)
 8007dea:	2300      	movs	r3, #0
 8007dec:	81fb      	strh	r3, [r7, #14]
 8007dee:	e015      	b.n	8007e1c <InitScreen+0x72>
		for (j = 0; j < __WIDTH; j++)
 8007df0:	2300      	movs	r3, #0
 8007df2:	81bb      	strh	r3, [r7, #12]
 8007df4:	e00c      	b.n	8007e10 <InitScreen+0x66>
			screen[i][j] = TRANSPARENT;
 8007df6:	89fb      	ldrh	r3, [r7, #14]
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	89bb      	ldrh	r3, [r7, #12]
 8007e02:	005b      	lsls	r3, r3, #1
 8007e04:	4413      	add	r3, r2
 8007e06:	2200      	movs	r2, #0
 8007e08:	801a      	strh	r2, [r3, #0]
		for (j = 0; j < __WIDTH; j++)
 8007e0a:	89bb      	ldrh	r3, [r7, #12]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	81bb      	strh	r3, [r7, #12]
 8007e10:	89bb      	ldrh	r3, [r7, #12]
 8007e12:	2b25      	cmp	r3, #37	; 0x25
 8007e14:	d9ef      	bls.n	8007df6 <InitScreen+0x4c>
	for (i = 0; i < __HEIGHT; i++)
 8007e16:	89fb      	ldrh	r3, [r7, #14]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	81fb      	strh	r3, [r7, #14]
 8007e1c:	89fb      	ldrh	r3, [r7, #14]
 8007e1e:	2b2f      	cmp	r3, #47	; 0x2f
 8007e20:	d9e6      	bls.n	8007df0 <InitScreen+0x46>

	return screen;
 8007e22:	687b      	ldr	r3, [r7, #4]
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd90      	pop	{r4, r7, pc}

08007e2c <Flush>:

Color** Flush(Color **screen)
{
 8007e2c:	b590      	push	{r4, r7, lr}
 8007e2e:	b089      	sub	sp, #36	; 0x24
 8007e30:	af02      	add	r7, sp, #8
 8007e32:	6078      	str	r0, [r7, #4]
	uint16_t i, j;
	uint16_t sx, sy, ex, ey;
	Color **temp;
	// init
	if (!__last_screen)
 8007e34:	4b36      	ldr	r3, [pc, #216]	; (8007f10 <Flush+0xe4>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d10d      	bne.n	8007e58 <Flush+0x2c>
	{
		LCD_Clear(BLACK);
 8007e3c:	2000      	movs	r0, #0
 8007e3e:	f7ff faa9 	bl	8007394 <LCD_Clear>
		__last_screen = InitScreen(__last_screen);
 8007e42:	4b33      	ldr	r3, [pc, #204]	; (8007f10 <Flush+0xe4>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7ff ffaf 	bl	8007daa <InitScreen>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	4b30      	ldr	r3, [pc, #192]	; (8007f10 <Flush+0xe4>)
 8007e50:	601a      	str	r2, [r3, #0]
		println("Render init finished");
 8007e52:	4830      	ldr	r0, [pc, #192]	; (8007f14 <Flush+0xe8>)
 8007e54:	f7ff fc62 	bl	800771c <println>
	}
	// flush
	for (i = 0; i < __HEIGHT; i++)
 8007e58:	2300      	movs	r3, #0
 8007e5a:	82fb      	strh	r3, [r7, #22]
 8007e5c:	e049      	b.n	8007ef2 <Flush+0xc6>
		for (j = 0; j < __WIDTH; j++)
 8007e5e:	2300      	movs	r3, #0
 8007e60:	82bb      	strh	r3, [r7, #20]
 8007e62:	e040      	b.n	8007ee6 <Flush+0xba>
		{
			if (screen[i][j] != __last_screen[i][j])
 8007e64:	8afb      	ldrh	r3, [r7, #22]
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	8abb      	ldrh	r3, [r7, #20]
 8007e70:	005b      	lsls	r3, r3, #1
 8007e72:	4413      	add	r3, r2
 8007e74:	881a      	ldrh	r2, [r3, #0]
 8007e76:	4b26      	ldr	r3, [pc, #152]	; (8007f10 <Flush+0xe4>)
 8007e78:	6819      	ldr	r1, [r3, #0]
 8007e7a:	8afb      	ldrh	r3, [r7, #22]
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	440b      	add	r3, r1
 8007e80:	6819      	ldr	r1, [r3, #0]
 8007e82:	8abb      	ldrh	r3, [r7, #20]
 8007e84:	005b      	lsls	r3, r3, #1
 8007e86:	440b      	add	r3, r1
 8007e88:	881b      	ldrh	r3, [r3, #0]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d028      	beq.n	8007ee0 <Flush+0xb4>
			{
				sx = j * __SCALE;
 8007e8e:	8abb      	ldrh	r3, [r7, #20]
 8007e90:	461a      	mov	r2, r3
 8007e92:	0052      	lsls	r2, r2, #1
 8007e94:	4413      	add	r3, r2
 8007e96:	005b      	lsls	r3, r3, #1
 8007e98:	81fb      	strh	r3, [r7, #14]
				sy = i * __SCALE;
 8007e9a:	8afb      	ldrh	r3, [r7, #22]
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	0052      	lsls	r2, r2, #1
 8007ea0:	4413      	add	r3, r2
 8007ea2:	005b      	lsls	r3, r3, #1
 8007ea4:	81bb      	strh	r3, [r7, #12]
				ex = sx + __SCALE;
 8007ea6:	89fb      	ldrh	r3, [r7, #14]
 8007ea8:	3306      	adds	r3, #6
 8007eaa:	817b      	strh	r3, [r7, #10]
				ey = sy + __SCALE;
 8007eac:	89bb      	ldrh	r3, [r7, #12]
 8007eae:	3306      	adds	r3, #6
 8007eb0:	813b      	strh	r3, [r7, #8]
				LCD_Fill(sx, sy, ex, ey, screen[i][j]);
 8007eb2:	8afb      	ldrh	r3, [r7, #22]
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	4413      	add	r3, r2
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	8abb      	ldrh	r3, [r7, #20]
 8007ebe:	005b      	lsls	r3, r3, #1
 8007ec0:	4413      	add	r3, r2
 8007ec2:	881b      	ldrh	r3, [r3, #0]
 8007ec4:	893c      	ldrh	r4, [r7, #8]
 8007ec6:	897a      	ldrh	r2, [r7, #10]
 8007ec8:	89b9      	ldrh	r1, [r7, #12]
 8007eca:	89f8      	ldrh	r0, [r7, #14]
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	4623      	mov	r3, r4
 8007ed0:	f7ff fac2 	bl	8007458 <LCD_Fill>
				printlnf("flushing %hu, %hu", j, i);
 8007ed4:	8abb      	ldrh	r3, [r7, #20]
 8007ed6:	8afa      	ldrh	r2, [r7, #22]
 8007ed8:	4619      	mov	r1, r3
 8007eda:	480f      	ldr	r0, [pc, #60]	; (8007f18 <Flush+0xec>)
 8007edc:	f7ff fc3c 	bl	8007758 <printlnf>
		for (j = 0; j < __WIDTH; j++)
 8007ee0:	8abb      	ldrh	r3, [r7, #20]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	82bb      	strh	r3, [r7, #20]
 8007ee6:	8abb      	ldrh	r3, [r7, #20]
 8007ee8:	2b25      	cmp	r3, #37	; 0x25
 8007eea:	d9bb      	bls.n	8007e64 <Flush+0x38>
	for (i = 0; i < __HEIGHT; i++)
 8007eec:	8afb      	ldrh	r3, [r7, #22]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	82fb      	strh	r3, [r7, #22]
 8007ef2:	8afb      	ldrh	r3, [r7, #22]
 8007ef4:	2b2f      	cmp	r3, #47	; 0x2f
 8007ef6:	d9b2      	bls.n	8007e5e <Flush+0x32>
			}
		}
	// cache
	temp = __last_screen;
 8007ef8:	4b05      	ldr	r3, [pc, #20]	; (8007f10 <Flush+0xe4>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	613b      	str	r3, [r7, #16]
	__last_screen = screen;
 8007efe:	4a04      	ldr	r2, [pc, #16]	; (8007f10 <Flush+0xe4>)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6013      	str	r3, [r2, #0]
	return temp;
 8007f04:	693b      	ldr	r3, [r7, #16]

	println("Flushed");
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	371c      	adds	r7, #28
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd90      	pop	{r4, r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	20000158 	.word	0x20000158
 8007f14:	08008998 	.word	0x08008998
 8007f18:	080089b0 	.word	0x080089b0

08007f1c <GetTime>:
#include "Time.h"

float __Time_Last_Update = 0;

float GetTime()
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	af00      	add	r7, sp, #0
	return __Time_Last_Update + 1;
 8007f20:	4b04      	ldr	r3, [pc, #16]	; (8007f34 <GetTime+0x18>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7f8 fd79 	bl	8000a20 <__addsf3>
 8007f2e:	4603      	mov	r3, r0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	2000015c 	.word	0x2000015c

08007f38 <Time_OnStart>:

void Time_OnStart()
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	af00      	add	r7, sp, #0
	__Time_Last_Update = GetTime();
 8007f3c:	f7ff ffee 	bl	8007f1c <GetTime>
 8007f40:	4602      	mov	r2, r0
 8007f42:	4b02      	ldr	r3, [pc, #8]	; (8007f4c <Time_OnStart+0x14>)
 8007f44:	601a      	str	r2, [r3, #0]
}
 8007f46:	bf00      	nop
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	2000015c 	.word	0x2000015c

08007f50 <Time_OnUpdate>:

void Time_OnUpdate()
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
	float temp = GetTime();
 8007f56:	f7ff ffe1 	bl	8007f1c <GetTime>
 8007f5a:	6078      	str	r0, [r7, #4]
	delta_time = temp - __Time_Last_Update;
 8007f5c:	4b08      	ldr	r3, [pc, #32]	; (8007f80 <Time_OnUpdate+0x30>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4619      	mov	r1, r3
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7f8 fd5a 	bl	8000a1c <__aeabi_fsub>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	4b05      	ldr	r3, [pc, #20]	; (8007f84 <Time_OnUpdate+0x34>)
 8007f6e:	601a      	str	r2, [r3, #0]
	__Time_Last_Update = temp;
 8007f70:	4a03      	ldr	r2, [pc, #12]	; (8007f80 <Time_OnUpdate+0x30>)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6013      	str	r3, [r2, #0]
}
 8007f76:	bf00      	nop
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	2000015c 	.word	0x2000015c
 8007f84:	20000188 	.word	0x20000188

08007f88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8007f88:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8007f8a:	e003      	b.n	8007f94 <LoopCopyDataInit>

08007f8c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8007f8c:	4b0b      	ldr	r3, [pc, #44]	; (8007fbc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8007f8e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8007f90:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8007f92:	3104      	adds	r1, #4

08007f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8007f94:	480a      	ldr	r0, [pc, #40]	; (8007fc0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8007f96:	4b0b      	ldr	r3, [pc, #44]	; (8007fc4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8007f98:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8007f9a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8007f9c:	d3f6      	bcc.n	8007f8c <CopyDataInit>
  ldr r2, =_sbss
 8007f9e:	4a0a      	ldr	r2, [pc, #40]	; (8007fc8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8007fa0:	e002      	b.n	8007fa8 <LoopFillZerobss>

08007fa2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8007fa2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8007fa4:	f842 3b04 	str.w	r3, [r2], #4

08007fa8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8007fa8:	4b08      	ldr	r3, [pc, #32]	; (8007fcc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8007faa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8007fac:	d3f9      	bcc.n	8007fa2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007fae:	f7ff fc8b 	bl	80078c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007fb2:	f000 f81d 	bl	8007ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007fb6:	f7ff fadb 	bl	8007570 <main>
  bx lr
 8007fba:	4770      	bx	lr
  ldr r3, =_sidata
 8007fbc:	08008a18 	.word	0x08008a18
  ldr r0, =_sdata
 8007fc0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8007fc4:	20000138 	.word	0x20000138
  ldr r2, =_sbss
 8007fc8:	20000138 	.word	0x20000138
  ldr r3, = _ebss
 8007fcc:	20000214 	.word	0x20000214

08007fd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007fd0:	e7fe      	b.n	8007fd0 <ADC1_2_IRQHandler>
	...

08007fd4 <calloc>:
 8007fd4:	4b02      	ldr	r3, [pc, #8]	; (8007fe0 <calloc+0xc>)
 8007fd6:	460a      	mov	r2, r1
 8007fd8:	4601      	mov	r1, r0
 8007fda:	6818      	ldr	r0, [r3, #0]
 8007fdc:	f000 b844 	b.w	8008068 <_calloc_r>
 8007fe0:	200000d4 	.word	0x200000d4

08007fe4 <__errno>:
 8007fe4:	4b01      	ldr	r3, [pc, #4]	; (8007fec <__errno+0x8>)
 8007fe6:	6818      	ldr	r0, [r3, #0]
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	200000d4 	.word	0x200000d4

08007ff0 <__libc_init_array>:
 8007ff0:	b570      	push	{r4, r5, r6, lr}
 8007ff2:	2500      	movs	r5, #0
 8007ff4:	4e0c      	ldr	r6, [pc, #48]	; (8008028 <__libc_init_array+0x38>)
 8007ff6:	4c0d      	ldr	r4, [pc, #52]	; (800802c <__libc_init_array+0x3c>)
 8007ff8:	1ba4      	subs	r4, r4, r6
 8007ffa:	10a4      	asrs	r4, r4, #2
 8007ffc:	42a5      	cmp	r5, r4
 8007ffe:	d109      	bne.n	8008014 <__libc_init_array+0x24>
 8008000:	f000 fc72 	bl	80088e8 <_init>
 8008004:	2500      	movs	r5, #0
 8008006:	4e0a      	ldr	r6, [pc, #40]	; (8008030 <__libc_init_array+0x40>)
 8008008:	4c0a      	ldr	r4, [pc, #40]	; (8008034 <__libc_init_array+0x44>)
 800800a:	1ba4      	subs	r4, r4, r6
 800800c:	10a4      	asrs	r4, r4, #2
 800800e:	42a5      	cmp	r5, r4
 8008010:	d105      	bne.n	800801e <__libc_init_array+0x2e>
 8008012:	bd70      	pop	{r4, r5, r6, pc}
 8008014:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008018:	4798      	blx	r3
 800801a:	3501      	adds	r5, #1
 800801c:	e7ee      	b.n	8007ffc <__libc_init_array+0xc>
 800801e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008022:	4798      	blx	r3
 8008024:	3501      	adds	r5, #1
 8008026:	e7f2      	b.n	800800e <__libc_init_array+0x1e>
 8008028:	08008a10 	.word	0x08008a10
 800802c:	08008a10 	.word	0x08008a10
 8008030:	08008a10 	.word	0x08008a10
 8008034:	08008a14 	.word	0x08008a14

08008038 <malloc>:
 8008038:	4b02      	ldr	r3, [pc, #8]	; (8008044 <malloc+0xc>)
 800803a:	4601      	mov	r1, r0
 800803c:	6818      	ldr	r0, [r3, #0]
 800803e:	f000 b86d 	b.w	800811c <_malloc_r>
 8008042:	bf00      	nop
 8008044:	200000d4 	.word	0x200000d4

08008048 <free>:
 8008048:	4b02      	ldr	r3, [pc, #8]	; (8008054 <free+0xc>)
 800804a:	4601      	mov	r1, r0
 800804c:	6818      	ldr	r0, [r3, #0]
 800804e:	f000 b819 	b.w	8008084 <_free_r>
 8008052:	bf00      	nop
 8008054:	200000d4 	.word	0x200000d4

08008058 <memset>:
 8008058:	4603      	mov	r3, r0
 800805a:	4402      	add	r2, r0
 800805c:	4293      	cmp	r3, r2
 800805e:	d100      	bne.n	8008062 <memset+0xa>
 8008060:	4770      	bx	lr
 8008062:	f803 1b01 	strb.w	r1, [r3], #1
 8008066:	e7f9      	b.n	800805c <memset+0x4>

08008068 <_calloc_r>:
 8008068:	b538      	push	{r3, r4, r5, lr}
 800806a:	fb02 f401 	mul.w	r4, r2, r1
 800806e:	4621      	mov	r1, r4
 8008070:	f000 f854 	bl	800811c <_malloc_r>
 8008074:	4605      	mov	r5, r0
 8008076:	b118      	cbz	r0, 8008080 <_calloc_r+0x18>
 8008078:	4622      	mov	r2, r4
 800807a:	2100      	movs	r1, #0
 800807c:	f7ff ffec 	bl	8008058 <memset>
 8008080:	4628      	mov	r0, r5
 8008082:	bd38      	pop	{r3, r4, r5, pc}

08008084 <_free_r>:
 8008084:	b538      	push	{r3, r4, r5, lr}
 8008086:	4605      	mov	r5, r0
 8008088:	2900      	cmp	r1, #0
 800808a:	d043      	beq.n	8008114 <_free_r+0x90>
 800808c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008090:	1f0c      	subs	r4, r1, #4
 8008092:	2b00      	cmp	r3, #0
 8008094:	bfb8      	it	lt
 8008096:	18e4      	addlt	r4, r4, r3
 8008098:	f000 f8ea 	bl	8008270 <__malloc_lock>
 800809c:	4a1e      	ldr	r2, [pc, #120]	; (8008118 <_free_r+0x94>)
 800809e:	6813      	ldr	r3, [r2, #0]
 80080a0:	4610      	mov	r0, r2
 80080a2:	b933      	cbnz	r3, 80080b2 <_free_r+0x2e>
 80080a4:	6063      	str	r3, [r4, #4]
 80080a6:	6014      	str	r4, [r2, #0]
 80080a8:	4628      	mov	r0, r5
 80080aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080ae:	f000 b8e0 	b.w	8008272 <__malloc_unlock>
 80080b2:	42a3      	cmp	r3, r4
 80080b4:	d90b      	bls.n	80080ce <_free_r+0x4a>
 80080b6:	6821      	ldr	r1, [r4, #0]
 80080b8:	1862      	adds	r2, r4, r1
 80080ba:	4293      	cmp	r3, r2
 80080bc:	bf01      	itttt	eq
 80080be:	681a      	ldreq	r2, [r3, #0]
 80080c0:	685b      	ldreq	r3, [r3, #4]
 80080c2:	1852      	addeq	r2, r2, r1
 80080c4:	6022      	streq	r2, [r4, #0]
 80080c6:	6063      	str	r3, [r4, #4]
 80080c8:	6004      	str	r4, [r0, #0]
 80080ca:	e7ed      	b.n	80080a8 <_free_r+0x24>
 80080cc:	4613      	mov	r3, r2
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	b10a      	cbz	r2, 80080d6 <_free_r+0x52>
 80080d2:	42a2      	cmp	r2, r4
 80080d4:	d9fa      	bls.n	80080cc <_free_r+0x48>
 80080d6:	6819      	ldr	r1, [r3, #0]
 80080d8:	1858      	adds	r0, r3, r1
 80080da:	42a0      	cmp	r0, r4
 80080dc:	d10b      	bne.n	80080f6 <_free_r+0x72>
 80080de:	6820      	ldr	r0, [r4, #0]
 80080e0:	4401      	add	r1, r0
 80080e2:	1858      	adds	r0, r3, r1
 80080e4:	4282      	cmp	r2, r0
 80080e6:	6019      	str	r1, [r3, #0]
 80080e8:	d1de      	bne.n	80080a8 <_free_r+0x24>
 80080ea:	6810      	ldr	r0, [r2, #0]
 80080ec:	6852      	ldr	r2, [r2, #4]
 80080ee:	4401      	add	r1, r0
 80080f0:	6019      	str	r1, [r3, #0]
 80080f2:	605a      	str	r2, [r3, #4]
 80080f4:	e7d8      	b.n	80080a8 <_free_r+0x24>
 80080f6:	d902      	bls.n	80080fe <_free_r+0x7a>
 80080f8:	230c      	movs	r3, #12
 80080fa:	602b      	str	r3, [r5, #0]
 80080fc:	e7d4      	b.n	80080a8 <_free_r+0x24>
 80080fe:	6820      	ldr	r0, [r4, #0]
 8008100:	1821      	adds	r1, r4, r0
 8008102:	428a      	cmp	r2, r1
 8008104:	bf01      	itttt	eq
 8008106:	6811      	ldreq	r1, [r2, #0]
 8008108:	6852      	ldreq	r2, [r2, #4]
 800810a:	1809      	addeq	r1, r1, r0
 800810c:	6021      	streq	r1, [r4, #0]
 800810e:	6062      	str	r2, [r4, #4]
 8008110:	605c      	str	r4, [r3, #4]
 8008112:	e7c9      	b.n	80080a8 <_free_r+0x24>
 8008114:	bd38      	pop	{r3, r4, r5, pc}
 8008116:	bf00      	nop
 8008118:	20000160 	.word	0x20000160

0800811c <_malloc_r>:
 800811c:	b570      	push	{r4, r5, r6, lr}
 800811e:	1ccd      	adds	r5, r1, #3
 8008120:	f025 0503 	bic.w	r5, r5, #3
 8008124:	3508      	adds	r5, #8
 8008126:	2d0c      	cmp	r5, #12
 8008128:	bf38      	it	cc
 800812a:	250c      	movcc	r5, #12
 800812c:	2d00      	cmp	r5, #0
 800812e:	4606      	mov	r6, r0
 8008130:	db01      	blt.n	8008136 <_malloc_r+0x1a>
 8008132:	42a9      	cmp	r1, r5
 8008134:	d903      	bls.n	800813e <_malloc_r+0x22>
 8008136:	230c      	movs	r3, #12
 8008138:	6033      	str	r3, [r6, #0]
 800813a:	2000      	movs	r0, #0
 800813c:	bd70      	pop	{r4, r5, r6, pc}
 800813e:	f000 f897 	bl	8008270 <__malloc_lock>
 8008142:	4a21      	ldr	r2, [pc, #132]	; (80081c8 <_malloc_r+0xac>)
 8008144:	6814      	ldr	r4, [r2, #0]
 8008146:	4621      	mov	r1, r4
 8008148:	b991      	cbnz	r1, 8008170 <_malloc_r+0x54>
 800814a:	4c20      	ldr	r4, [pc, #128]	; (80081cc <_malloc_r+0xb0>)
 800814c:	6823      	ldr	r3, [r4, #0]
 800814e:	b91b      	cbnz	r3, 8008158 <_malloc_r+0x3c>
 8008150:	4630      	mov	r0, r6
 8008152:	f000 f83d 	bl	80081d0 <_sbrk_r>
 8008156:	6020      	str	r0, [r4, #0]
 8008158:	4629      	mov	r1, r5
 800815a:	4630      	mov	r0, r6
 800815c:	f000 f838 	bl	80081d0 <_sbrk_r>
 8008160:	1c43      	adds	r3, r0, #1
 8008162:	d124      	bne.n	80081ae <_malloc_r+0x92>
 8008164:	230c      	movs	r3, #12
 8008166:	4630      	mov	r0, r6
 8008168:	6033      	str	r3, [r6, #0]
 800816a:	f000 f882 	bl	8008272 <__malloc_unlock>
 800816e:	e7e4      	b.n	800813a <_malloc_r+0x1e>
 8008170:	680b      	ldr	r3, [r1, #0]
 8008172:	1b5b      	subs	r3, r3, r5
 8008174:	d418      	bmi.n	80081a8 <_malloc_r+0x8c>
 8008176:	2b0b      	cmp	r3, #11
 8008178:	d90f      	bls.n	800819a <_malloc_r+0x7e>
 800817a:	600b      	str	r3, [r1, #0]
 800817c:	18cc      	adds	r4, r1, r3
 800817e:	50cd      	str	r5, [r1, r3]
 8008180:	4630      	mov	r0, r6
 8008182:	f000 f876 	bl	8008272 <__malloc_unlock>
 8008186:	f104 000b 	add.w	r0, r4, #11
 800818a:	1d23      	adds	r3, r4, #4
 800818c:	f020 0007 	bic.w	r0, r0, #7
 8008190:	1ac3      	subs	r3, r0, r3
 8008192:	d0d3      	beq.n	800813c <_malloc_r+0x20>
 8008194:	425a      	negs	r2, r3
 8008196:	50e2      	str	r2, [r4, r3]
 8008198:	e7d0      	b.n	800813c <_malloc_r+0x20>
 800819a:	684b      	ldr	r3, [r1, #4]
 800819c:	428c      	cmp	r4, r1
 800819e:	bf16      	itet	ne
 80081a0:	6063      	strne	r3, [r4, #4]
 80081a2:	6013      	streq	r3, [r2, #0]
 80081a4:	460c      	movne	r4, r1
 80081a6:	e7eb      	b.n	8008180 <_malloc_r+0x64>
 80081a8:	460c      	mov	r4, r1
 80081aa:	6849      	ldr	r1, [r1, #4]
 80081ac:	e7cc      	b.n	8008148 <_malloc_r+0x2c>
 80081ae:	1cc4      	adds	r4, r0, #3
 80081b0:	f024 0403 	bic.w	r4, r4, #3
 80081b4:	42a0      	cmp	r0, r4
 80081b6:	d005      	beq.n	80081c4 <_malloc_r+0xa8>
 80081b8:	1a21      	subs	r1, r4, r0
 80081ba:	4630      	mov	r0, r6
 80081bc:	f000 f808 	bl	80081d0 <_sbrk_r>
 80081c0:	3001      	adds	r0, #1
 80081c2:	d0cf      	beq.n	8008164 <_malloc_r+0x48>
 80081c4:	6025      	str	r5, [r4, #0]
 80081c6:	e7db      	b.n	8008180 <_malloc_r+0x64>
 80081c8:	20000160 	.word	0x20000160
 80081cc:	20000164 	.word	0x20000164

080081d0 <_sbrk_r>:
 80081d0:	b538      	push	{r3, r4, r5, lr}
 80081d2:	2300      	movs	r3, #0
 80081d4:	4c05      	ldr	r4, [pc, #20]	; (80081ec <_sbrk_r+0x1c>)
 80081d6:	4605      	mov	r5, r0
 80081d8:	4608      	mov	r0, r1
 80081da:	6023      	str	r3, [r4, #0]
 80081dc:	f7ff fb48 	bl	8007870 <_sbrk>
 80081e0:	1c43      	adds	r3, r0, #1
 80081e2:	d102      	bne.n	80081ea <_sbrk_r+0x1a>
 80081e4:	6823      	ldr	r3, [r4, #0]
 80081e6:	b103      	cbz	r3, 80081ea <_sbrk_r+0x1a>
 80081e8:	602b      	str	r3, [r5, #0]
 80081ea:	bd38      	pop	{r3, r4, r5, pc}
 80081ec:	20000210 	.word	0x20000210

080081f0 <siprintf>:
 80081f0:	b40e      	push	{r1, r2, r3}
 80081f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80081f6:	b500      	push	{lr}
 80081f8:	b09c      	sub	sp, #112	; 0x70
 80081fa:	ab1d      	add	r3, sp, #116	; 0x74
 80081fc:	9002      	str	r0, [sp, #8]
 80081fe:	9006      	str	r0, [sp, #24]
 8008200:	9107      	str	r1, [sp, #28]
 8008202:	9104      	str	r1, [sp, #16]
 8008204:	4808      	ldr	r0, [pc, #32]	; (8008228 <siprintf+0x38>)
 8008206:	4909      	ldr	r1, [pc, #36]	; (800822c <siprintf+0x3c>)
 8008208:	f853 2b04 	ldr.w	r2, [r3], #4
 800820c:	9105      	str	r1, [sp, #20]
 800820e:	6800      	ldr	r0, [r0, #0]
 8008210:	a902      	add	r1, sp, #8
 8008212:	9301      	str	r3, [sp, #4]
 8008214:	f000 f888 	bl	8008328 <_svfiprintf_r>
 8008218:	2200      	movs	r2, #0
 800821a:	9b02      	ldr	r3, [sp, #8]
 800821c:	701a      	strb	r2, [r3, #0]
 800821e:	b01c      	add	sp, #112	; 0x70
 8008220:	f85d eb04 	ldr.w	lr, [sp], #4
 8008224:	b003      	add	sp, #12
 8008226:	4770      	bx	lr
 8008228:	200000d4 	.word	0x200000d4
 800822c:	ffff0208 	.word	0xffff0208

08008230 <_vsiprintf_r>:
 8008230:	b500      	push	{lr}
 8008232:	b09b      	sub	sp, #108	; 0x6c
 8008234:	9100      	str	r1, [sp, #0]
 8008236:	9104      	str	r1, [sp, #16]
 8008238:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800823c:	9105      	str	r1, [sp, #20]
 800823e:	9102      	str	r1, [sp, #8]
 8008240:	4905      	ldr	r1, [pc, #20]	; (8008258 <_vsiprintf_r+0x28>)
 8008242:	9103      	str	r1, [sp, #12]
 8008244:	4669      	mov	r1, sp
 8008246:	f000 f86f 	bl	8008328 <_svfiprintf_r>
 800824a:	2200      	movs	r2, #0
 800824c:	9b00      	ldr	r3, [sp, #0]
 800824e:	701a      	strb	r2, [r3, #0]
 8008250:	b01b      	add	sp, #108	; 0x6c
 8008252:	f85d fb04 	ldr.w	pc, [sp], #4
 8008256:	bf00      	nop
 8008258:	ffff0208 	.word	0xffff0208

0800825c <vsiprintf>:
 800825c:	4613      	mov	r3, r2
 800825e:	460a      	mov	r2, r1
 8008260:	4601      	mov	r1, r0
 8008262:	4802      	ldr	r0, [pc, #8]	; (800826c <vsiprintf+0x10>)
 8008264:	6800      	ldr	r0, [r0, #0]
 8008266:	f7ff bfe3 	b.w	8008230 <_vsiprintf_r>
 800826a:	bf00      	nop
 800826c:	200000d4 	.word	0x200000d4

08008270 <__malloc_lock>:
 8008270:	4770      	bx	lr

08008272 <__malloc_unlock>:
 8008272:	4770      	bx	lr

08008274 <__ssputs_r>:
 8008274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008278:	688e      	ldr	r6, [r1, #8]
 800827a:	4682      	mov	sl, r0
 800827c:	429e      	cmp	r6, r3
 800827e:	460c      	mov	r4, r1
 8008280:	4690      	mov	r8, r2
 8008282:	4699      	mov	r9, r3
 8008284:	d837      	bhi.n	80082f6 <__ssputs_r+0x82>
 8008286:	898a      	ldrh	r2, [r1, #12]
 8008288:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800828c:	d031      	beq.n	80082f2 <__ssputs_r+0x7e>
 800828e:	2302      	movs	r3, #2
 8008290:	6825      	ldr	r5, [r4, #0]
 8008292:	6909      	ldr	r1, [r1, #16]
 8008294:	1a6f      	subs	r7, r5, r1
 8008296:	6965      	ldr	r5, [r4, #20]
 8008298:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800829c:	fb95 f5f3 	sdiv	r5, r5, r3
 80082a0:	f109 0301 	add.w	r3, r9, #1
 80082a4:	443b      	add	r3, r7
 80082a6:	429d      	cmp	r5, r3
 80082a8:	bf38      	it	cc
 80082aa:	461d      	movcc	r5, r3
 80082ac:	0553      	lsls	r3, r2, #21
 80082ae:	d530      	bpl.n	8008312 <__ssputs_r+0x9e>
 80082b0:	4629      	mov	r1, r5
 80082b2:	f7ff ff33 	bl	800811c <_malloc_r>
 80082b6:	4606      	mov	r6, r0
 80082b8:	b950      	cbnz	r0, 80082d0 <__ssputs_r+0x5c>
 80082ba:	230c      	movs	r3, #12
 80082bc:	f04f 30ff 	mov.w	r0, #4294967295
 80082c0:	f8ca 3000 	str.w	r3, [sl]
 80082c4:	89a3      	ldrh	r3, [r4, #12]
 80082c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082ca:	81a3      	strh	r3, [r4, #12]
 80082cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082d0:	463a      	mov	r2, r7
 80082d2:	6921      	ldr	r1, [r4, #16]
 80082d4:	f000 fab6 	bl	8008844 <memcpy>
 80082d8:	89a3      	ldrh	r3, [r4, #12]
 80082da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082e2:	81a3      	strh	r3, [r4, #12]
 80082e4:	6126      	str	r6, [r4, #16]
 80082e6:	443e      	add	r6, r7
 80082e8:	6026      	str	r6, [r4, #0]
 80082ea:	464e      	mov	r6, r9
 80082ec:	6165      	str	r5, [r4, #20]
 80082ee:	1bed      	subs	r5, r5, r7
 80082f0:	60a5      	str	r5, [r4, #8]
 80082f2:	454e      	cmp	r6, r9
 80082f4:	d900      	bls.n	80082f8 <__ssputs_r+0x84>
 80082f6:	464e      	mov	r6, r9
 80082f8:	4632      	mov	r2, r6
 80082fa:	4641      	mov	r1, r8
 80082fc:	6820      	ldr	r0, [r4, #0]
 80082fe:	f000 faac 	bl	800885a <memmove>
 8008302:	68a3      	ldr	r3, [r4, #8]
 8008304:	2000      	movs	r0, #0
 8008306:	1b9b      	subs	r3, r3, r6
 8008308:	60a3      	str	r3, [r4, #8]
 800830a:	6823      	ldr	r3, [r4, #0]
 800830c:	441e      	add	r6, r3
 800830e:	6026      	str	r6, [r4, #0]
 8008310:	e7dc      	b.n	80082cc <__ssputs_r+0x58>
 8008312:	462a      	mov	r2, r5
 8008314:	f000 faba 	bl	800888c <_realloc_r>
 8008318:	4606      	mov	r6, r0
 800831a:	2800      	cmp	r0, #0
 800831c:	d1e2      	bne.n	80082e4 <__ssputs_r+0x70>
 800831e:	6921      	ldr	r1, [r4, #16]
 8008320:	4650      	mov	r0, sl
 8008322:	f7ff feaf 	bl	8008084 <_free_r>
 8008326:	e7c8      	b.n	80082ba <__ssputs_r+0x46>

08008328 <_svfiprintf_r>:
 8008328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800832c:	461d      	mov	r5, r3
 800832e:	898b      	ldrh	r3, [r1, #12]
 8008330:	b09d      	sub	sp, #116	; 0x74
 8008332:	061f      	lsls	r7, r3, #24
 8008334:	4680      	mov	r8, r0
 8008336:	460c      	mov	r4, r1
 8008338:	4616      	mov	r6, r2
 800833a:	d50f      	bpl.n	800835c <_svfiprintf_r+0x34>
 800833c:	690b      	ldr	r3, [r1, #16]
 800833e:	b96b      	cbnz	r3, 800835c <_svfiprintf_r+0x34>
 8008340:	2140      	movs	r1, #64	; 0x40
 8008342:	f7ff feeb 	bl	800811c <_malloc_r>
 8008346:	6020      	str	r0, [r4, #0]
 8008348:	6120      	str	r0, [r4, #16]
 800834a:	b928      	cbnz	r0, 8008358 <_svfiprintf_r+0x30>
 800834c:	230c      	movs	r3, #12
 800834e:	f8c8 3000 	str.w	r3, [r8]
 8008352:	f04f 30ff 	mov.w	r0, #4294967295
 8008356:	e0c8      	b.n	80084ea <_svfiprintf_r+0x1c2>
 8008358:	2340      	movs	r3, #64	; 0x40
 800835a:	6163      	str	r3, [r4, #20]
 800835c:	2300      	movs	r3, #0
 800835e:	9309      	str	r3, [sp, #36]	; 0x24
 8008360:	2320      	movs	r3, #32
 8008362:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008366:	2330      	movs	r3, #48	; 0x30
 8008368:	f04f 0b01 	mov.w	fp, #1
 800836c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008370:	9503      	str	r5, [sp, #12]
 8008372:	4637      	mov	r7, r6
 8008374:	463d      	mov	r5, r7
 8008376:	f815 3b01 	ldrb.w	r3, [r5], #1
 800837a:	b10b      	cbz	r3, 8008380 <_svfiprintf_r+0x58>
 800837c:	2b25      	cmp	r3, #37	; 0x25
 800837e:	d13e      	bne.n	80083fe <_svfiprintf_r+0xd6>
 8008380:	ebb7 0a06 	subs.w	sl, r7, r6
 8008384:	d00b      	beq.n	800839e <_svfiprintf_r+0x76>
 8008386:	4653      	mov	r3, sl
 8008388:	4632      	mov	r2, r6
 800838a:	4621      	mov	r1, r4
 800838c:	4640      	mov	r0, r8
 800838e:	f7ff ff71 	bl	8008274 <__ssputs_r>
 8008392:	3001      	adds	r0, #1
 8008394:	f000 80a4 	beq.w	80084e0 <_svfiprintf_r+0x1b8>
 8008398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800839a:	4453      	add	r3, sl
 800839c:	9309      	str	r3, [sp, #36]	; 0x24
 800839e:	783b      	ldrb	r3, [r7, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f000 809d 	beq.w	80084e0 <_svfiprintf_r+0x1b8>
 80083a6:	2300      	movs	r3, #0
 80083a8:	f04f 32ff 	mov.w	r2, #4294967295
 80083ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083b0:	9304      	str	r3, [sp, #16]
 80083b2:	9307      	str	r3, [sp, #28]
 80083b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083b8:	931a      	str	r3, [sp, #104]	; 0x68
 80083ba:	462f      	mov	r7, r5
 80083bc:	2205      	movs	r2, #5
 80083be:	f817 1b01 	ldrb.w	r1, [r7], #1
 80083c2:	4850      	ldr	r0, [pc, #320]	; (8008504 <_svfiprintf_r+0x1dc>)
 80083c4:	f000 fa30 	bl	8008828 <memchr>
 80083c8:	9b04      	ldr	r3, [sp, #16]
 80083ca:	b9d0      	cbnz	r0, 8008402 <_svfiprintf_r+0xda>
 80083cc:	06d9      	lsls	r1, r3, #27
 80083ce:	bf44      	itt	mi
 80083d0:	2220      	movmi	r2, #32
 80083d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083d6:	071a      	lsls	r2, r3, #28
 80083d8:	bf44      	itt	mi
 80083da:	222b      	movmi	r2, #43	; 0x2b
 80083dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083e0:	782a      	ldrb	r2, [r5, #0]
 80083e2:	2a2a      	cmp	r2, #42	; 0x2a
 80083e4:	d015      	beq.n	8008412 <_svfiprintf_r+0xea>
 80083e6:	462f      	mov	r7, r5
 80083e8:	2000      	movs	r0, #0
 80083ea:	250a      	movs	r5, #10
 80083ec:	9a07      	ldr	r2, [sp, #28]
 80083ee:	4639      	mov	r1, r7
 80083f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083f4:	3b30      	subs	r3, #48	; 0x30
 80083f6:	2b09      	cmp	r3, #9
 80083f8:	d94d      	bls.n	8008496 <_svfiprintf_r+0x16e>
 80083fa:	b1b8      	cbz	r0, 800842c <_svfiprintf_r+0x104>
 80083fc:	e00f      	b.n	800841e <_svfiprintf_r+0xf6>
 80083fe:	462f      	mov	r7, r5
 8008400:	e7b8      	b.n	8008374 <_svfiprintf_r+0x4c>
 8008402:	4a40      	ldr	r2, [pc, #256]	; (8008504 <_svfiprintf_r+0x1dc>)
 8008404:	463d      	mov	r5, r7
 8008406:	1a80      	subs	r0, r0, r2
 8008408:	fa0b f000 	lsl.w	r0, fp, r0
 800840c:	4318      	orrs	r0, r3
 800840e:	9004      	str	r0, [sp, #16]
 8008410:	e7d3      	b.n	80083ba <_svfiprintf_r+0x92>
 8008412:	9a03      	ldr	r2, [sp, #12]
 8008414:	1d11      	adds	r1, r2, #4
 8008416:	6812      	ldr	r2, [r2, #0]
 8008418:	9103      	str	r1, [sp, #12]
 800841a:	2a00      	cmp	r2, #0
 800841c:	db01      	blt.n	8008422 <_svfiprintf_r+0xfa>
 800841e:	9207      	str	r2, [sp, #28]
 8008420:	e004      	b.n	800842c <_svfiprintf_r+0x104>
 8008422:	4252      	negs	r2, r2
 8008424:	f043 0302 	orr.w	r3, r3, #2
 8008428:	9207      	str	r2, [sp, #28]
 800842a:	9304      	str	r3, [sp, #16]
 800842c:	783b      	ldrb	r3, [r7, #0]
 800842e:	2b2e      	cmp	r3, #46	; 0x2e
 8008430:	d10c      	bne.n	800844c <_svfiprintf_r+0x124>
 8008432:	787b      	ldrb	r3, [r7, #1]
 8008434:	2b2a      	cmp	r3, #42	; 0x2a
 8008436:	d133      	bne.n	80084a0 <_svfiprintf_r+0x178>
 8008438:	9b03      	ldr	r3, [sp, #12]
 800843a:	3702      	adds	r7, #2
 800843c:	1d1a      	adds	r2, r3, #4
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	9203      	str	r2, [sp, #12]
 8008442:	2b00      	cmp	r3, #0
 8008444:	bfb8      	it	lt
 8008446:	f04f 33ff 	movlt.w	r3, #4294967295
 800844a:	9305      	str	r3, [sp, #20]
 800844c:	4d2e      	ldr	r5, [pc, #184]	; (8008508 <_svfiprintf_r+0x1e0>)
 800844e:	2203      	movs	r2, #3
 8008450:	7839      	ldrb	r1, [r7, #0]
 8008452:	4628      	mov	r0, r5
 8008454:	f000 f9e8 	bl	8008828 <memchr>
 8008458:	b138      	cbz	r0, 800846a <_svfiprintf_r+0x142>
 800845a:	2340      	movs	r3, #64	; 0x40
 800845c:	1b40      	subs	r0, r0, r5
 800845e:	fa03 f000 	lsl.w	r0, r3, r0
 8008462:	9b04      	ldr	r3, [sp, #16]
 8008464:	3701      	adds	r7, #1
 8008466:	4303      	orrs	r3, r0
 8008468:	9304      	str	r3, [sp, #16]
 800846a:	7839      	ldrb	r1, [r7, #0]
 800846c:	2206      	movs	r2, #6
 800846e:	4827      	ldr	r0, [pc, #156]	; (800850c <_svfiprintf_r+0x1e4>)
 8008470:	1c7e      	adds	r6, r7, #1
 8008472:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008476:	f000 f9d7 	bl	8008828 <memchr>
 800847a:	2800      	cmp	r0, #0
 800847c:	d038      	beq.n	80084f0 <_svfiprintf_r+0x1c8>
 800847e:	4b24      	ldr	r3, [pc, #144]	; (8008510 <_svfiprintf_r+0x1e8>)
 8008480:	bb13      	cbnz	r3, 80084c8 <_svfiprintf_r+0x1a0>
 8008482:	9b03      	ldr	r3, [sp, #12]
 8008484:	3307      	adds	r3, #7
 8008486:	f023 0307 	bic.w	r3, r3, #7
 800848a:	3308      	adds	r3, #8
 800848c:	9303      	str	r3, [sp, #12]
 800848e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008490:	444b      	add	r3, r9
 8008492:	9309      	str	r3, [sp, #36]	; 0x24
 8008494:	e76d      	b.n	8008372 <_svfiprintf_r+0x4a>
 8008496:	fb05 3202 	mla	r2, r5, r2, r3
 800849a:	2001      	movs	r0, #1
 800849c:	460f      	mov	r7, r1
 800849e:	e7a6      	b.n	80083ee <_svfiprintf_r+0xc6>
 80084a0:	2300      	movs	r3, #0
 80084a2:	250a      	movs	r5, #10
 80084a4:	4619      	mov	r1, r3
 80084a6:	3701      	adds	r7, #1
 80084a8:	9305      	str	r3, [sp, #20]
 80084aa:	4638      	mov	r0, r7
 80084ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084b0:	3a30      	subs	r2, #48	; 0x30
 80084b2:	2a09      	cmp	r2, #9
 80084b4:	d903      	bls.n	80084be <_svfiprintf_r+0x196>
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d0c8      	beq.n	800844c <_svfiprintf_r+0x124>
 80084ba:	9105      	str	r1, [sp, #20]
 80084bc:	e7c6      	b.n	800844c <_svfiprintf_r+0x124>
 80084be:	fb05 2101 	mla	r1, r5, r1, r2
 80084c2:	2301      	movs	r3, #1
 80084c4:	4607      	mov	r7, r0
 80084c6:	e7f0      	b.n	80084aa <_svfiprintf_r+0x182>
 80084c8:	ab03      	add	r3, sp, #12
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	4622      	mov	r2, r4
 80084ce:	4b11      	ldr	r3, [pc, #68]	; (8008514 <_svfiprintf_r+0x1ec>)
 80084d0:	a904      	add	r1, sp, #16
 80084d2:	4640      	mov	r0, r8
 80084d4:	f3af 8000 	nop.w
 80084d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80084dc:	4681      	mov	r9, r0
 80084de:	d1d6      	bne.n	800848e <_svfiprintf_r+0x166>
 80084e0:	89a3      	ldrh	r3, [r4, #12]
 80084e2:	065b      	lsls	r3, r3, #25
 80084e4:	f53f af35 	bmi.w	8008352 <_svfiprintf_r+0x2a>
 80084e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084ea:	b01d      	add	sp, #116	; 0x74
 80084ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f0:	ab03      	add	r3, sp, #12
 80084f2:	9300      	str	r3, [sp, #0]
 80084f4:	4622      	mov	r2, r4
 80084f6:	4b07      	ldr	r3, [pc, #28]	; (8008514 <_svfiprintf_r+0x1ec>)
 80084f8:	a904      	add	r1, sp, #16
 80084fa:	4640      	mov	r0, r8
 80084fc:	f000 f882 	bl	8008604 <_printf_i>
 8008500:	e7ea      	b.n	80084d8 <_svfiprintf_r+0x1b0>
 8008502:	bf00      	nop
 8008504:	080089dc 	.word	0x080089dc
 8008508:	080089e2 	.word	0x080089e2
 800850c:	080089e6 	.word	0x080089e6
 8008510:	00000000 	.word	0x00000000
 8008514:	08008275 	.word	0x08008275

08008518 <_printf_common>:
 8008518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800851c:	4691      	mov	r9, r2
 800851e:	461f      	mov	r7, r3
 8008520:	688a      	ldr	r2, [r1, #8]
 8008522:	690b      	ldr	r3, [r1, #16]
 8008524:	4606      	mov	r6, r0
 8008526:	4293      	cmp	r3, r2
 8008528:	bfb8      	it	lt
 800852a:	4613      	movlt	r3, r2
 800852c:	f8c9 3000 	str.w	r3, [r9]
 8008530:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008534:	460c      	mov	r4, r1
 8008536:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800853a:	b112      	cbz	r2, 8008542 <_printf_common+0x2a>
 800853c:	3301      	adds	r3, #1
 800853e:	f8c9 3000 	str.w	r3, [r9]
 8008542:	6823      	ldr	r3, [r4, #0]
 8008544:	0699      	lsls	r1, r3, #26
 8008546:	bf42      	ittt	mi
 8008548:	f8d9 3000 	ldrmi.w	r3, [r9]
 800854c:	3302      	addmi	r3, #2
 800854e:	f8c9 3000 	strmi.w	r3, [r9]
 8008552:	6825      	ldr	r5, [r4, #0]
 8008554:	f015 0506 	ands.w	r5, r5, #6
 8008558:	d107      	bne.n	800856a <_printf_common+0x52>
 800855a:	f104 0a19 	add.w	sl, r4, #25
 800855e:	68e3      	ldr	r3, [r4, #12]
 8008560:	f8d9 2000 	ldr.w	r2, [r9]
 8008564:	1a9b      	subs	r3, r3, r2
 8008566:	42ab      	cmp	r3, r5
 8008568:	dc29      	bgt.n	80085be <_printf_common+0xa6>
 800856a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800856e:	6822      	ldr	r2, [r4, #0]
 8008570:	3300      	adds	r3, #0
 8008572:	bf18      	it	ne
 8008574:	2301      	movne	r3, #1
 8008576:	0692      	lsls	r2, r2, #26
 8008578:	d42e      	bmi.n	80085d8 <_printf_common+0xc0>
 800857a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800857e:	4639      	mov	r1, r7
 8008580:	4630      	mov	r0, r6
 8008582:	47c0      	blx	r8
 8008584:	3001      	adds	r0, #1
 8008586:	d021      	beq.n	80085cc <_printf_common+0xb4>
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	68e5      	ldr	r5, [r4, #12]
 800858c:	f003 0306 	and.w	r3, r3, #6
 8008590:	2b04      	cmp	r3, #4
 8008592:	bf18      	it	ne
 8008594:	2500      	movne	r5, #0
 8008596:	f8d9 2000 	ldr.w	r2, [r9]
 800859a:	f04f 0900 	mov.w	r9, #0
 800859e:	bf08      	it	eq
 80085a0:	1aad      	subeq	r5, r5, r2
 80085a2:	68a3      	ldr	r3, [r4, #8]
 80085a4:	6922      	ldr	r2, [r4, #16]
 80085a6:	bf08      	it	eq
 80085a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085ac:	4293      	cmp	r3, r2
 80085ae:	bfc4      	itt	gt
 80085b0:	1a9b      	subgt	r3, r3, r2
 80085b2:	18ed      	addgt	r5, r5, r3
 80085b4:	341a      	adds	r4, #26
 80085b6:	454d      	cmp	r5, r9
 80085b8:	d11a      	bne.n	80085f0 <_printf_common+0xd8>
 80085ba:	2000      	movs	r0, #0
 80085bc:	e008      	b.n	80085d0 <_printf_common+0xb8>
 80085be:	2301      	movs	r3, #1
 80085c0:	4652      	mov	r2, sl
 80085c2:	4639      	mov	r1, r7
 80085c4:	4630      	mov	r0, r6
 80085c6:	47c0      	blx	r8
 80085c8:	3001      	adds	r0, #1
 80085ca:	d103      	bne.n	80085d4 <_printf_common+0xbc>
 80085cc:	f04f 30ff 	mov.w	r0, #4294967295
 80085d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d4:	3501      	adds	r5, #1
 80085d6:	e7c2      	b.n	800855e <_printf_common+0x46>
 80085d8:	2030      	movs	r0, #48	; 0x30
 80085da:	18e1      	adds	r1, r4, r3
 80085dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085e0:	1c5a      	adds	r2, r3, #1
 80085e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085e6:	4422      	add	r2, r4
 80085e8:	3302      	adds	r3, #2
 80085ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085ee:	e7c4      	b.n	800857a <_printf_common+0x62>
 80085f0:	2301      	movs	r3, #1
 80085f2:	4622      	mov	r2, r4
 80085f4:	4639      	mov	r1, r7
 80085f6:	4630      	mov	r0, r6
 80085f8:	47c0      	blx	r8
 80085fa:	3001      	adds	r0, #1
 80085fc:	d0e6      	beq.n	80085cc <_printf_common+0xb4>
 80085fe:	f109 0901 	add.w	r9, r9, #1
 8008602:	e7d8      	b.n	80085b6 <_printf_common+0x9e>

08008604 <_printf_i>:
 8008604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008608:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800860c:	460c      	mov	r4, r1
 800860e:	7e09      	ldrb	r1, [r1, #24]
 8008610:	b085      	sub	sp, #20
 8008612:	296e      	cmp	r1, #110	; 0x6e
 8008614:	4617      	mov	r7, r2
 8008616:	4606      	mov	r6, r0
 8008618:	4698      	mov	r8, r3
 800861a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800861c:	f000 80b3 	beq.w	8008786 <_printf_i+0x182>
 8008620:	d822      	bhi.n	8008668 <_printf_i+0x64>
 8008622:	2963      	cmp	r1, #99	; 0x63
 8008624:	d036      	beq.n	8008694 <_printf_i+0x90>
 8008626:	d80a      	bhi.n	800863e <_printf_i+0x3a>
 8008628:	2900      	cmp	r1, #0
 800862a:	f000 80b9 	beq.w	80087a0 <_printf_i+0x19c>
 800862e:	2958      	cmp	r1, #88	; 0x58
 8008630:	f000 8083 	beq.w	800873a <_printf_i+0x136>
 8008634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008638:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800863c:	e032      	b.n	80086a4 <_printf_i+0xa0>
 800863e:	2964      	cmp	r1, #100	; 0x64
 8008640:	d001      	beq.n	8008646 <_printf_i+0x42>
 8008642:	2969      	cmp	r1, #105	; 0x69
 8008644:	d1f6      	bne.n	8008634 <_printf_i+0x30>
 8008646:	6820      	ldr	r0, [r4, #0]
 8008648:	6813      	ldr	r3, [r2, #0]
 800864a:	0605      	lsls	r5, r0, #24
 800864c:	f103 0104 	add.w	r1, r3, #4
 8008650:	d52a      	bpl.n	80086a8 <_printf_i+0xa4>
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	6011      	str	r1, [r2, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	da03      	bge.n	8008662 <_printf_i+0x5e>
 800865a:	222d      	movs	r2, #45	; 0x2d
 800865c:	425b      	negs	r3, r3
 800865e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008662:	486f      	ldr	r0, [pc, #444]	; (8008820 <_printf_i+0x21c>)
 8008664:	220a      	movs	r2, #10
 8008666:	e039      	b.n	80086dc <_printf_i+0xd8>
 8008668:	2973      	cmp	r1, #115	; 0x73
 800866a:	f000 809d 	beq.w	80087a8 <_printf_i+0x1a4>
 800866e:	d808      	bhi.n	8008682 <_printf_i+0x7e>
 8008670:	296f      	cmp	r1, #111	; 0x6f
 8008672:	d020      	beq.n	80086b6 <_printf_i+0xb2>
 8008674:	2970      	cmp	r1, #112	; 0x70
 8008676:	d1dd      	bne.n	8008634 <_printf_i+0x30>
 8008678:	6823      	ldr	r3, [r4, #0]
 800867a:	f043 0320 	orr.w	r3, r3, #32
 800867e:	6023      	str	r3, [r4, #0]
 8008680:	e003      	b.n	800868a <_printf_i+0x86>
 8008682:	2975      	cmp	r1, #117	; 0x75
 8008684:	d017      	beq.n	80086b6 <_printf_i+0xb2>
 8008686:	2978      	cmp	r1, #120	; 0x78
 8008688:	d1d4      	bne.n	8008634 <_printf_i+0x30>
 800868a:	2378      	movs	r3, #120	; 0x78
 800868c:	4865      	ldr	r0, [pc, #404]	; (8008824 <_printf_i+0x220>)
 800868e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008692:	e055      	b.n	8008740 <_printf_i+0x13c>
 8008694:	6813      	ldr	r3, [r2, #0]
 8008696:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800869a:	1d19      	adds	r1, r3, #4
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	6011      	str	r1, [r2, #0]
 80086a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086a4:	2301      	movs	r3, #1
 80086a6:	e08c      	b.n	80087c2 <_printf_i+0x1be>
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086ae:	6011      	str	r1, [r2, #0]
 80086b0:	bf18      	it	ne
 80086b2:	b21b      	sxthne	r3, r3
 80086b4:	e7cf      	b.n	8008656 <_printf_i+0x52>
 80086b6:	6813      	ldr	r3, [r2, #0]
 80086b8:	6825      	ldr	r5, [r4, #0]
 80086ba:	1d18      	adds	r0, r3, #4
 80086bc:	6010      	str	r0, [r2, #0]
 80086be:	0628      	lsls	r0, r5, #24
 80086c0:	d501      	bpl.n	80086c6 <_printf_i+0xc2>
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	e002      	b.n	80086cc <_printf_i+0xc8>
 80086c6:	0668      	lsls	r0, r5, #25
 80086c8:	d5fb      	bpl.n	80086c2 <_printf_i+0xbe>
 80086ca:	881b      	ldrh	r3, [r3, #0]
 80086cc:	296f      	cmp	r1, #111	; 0x6f
 80086ce:	bf14      	ite	ne
 80086d0:	220a      	movne	r2, #10
 80086d2:	2208      	moveq	r2, #8
 80086d4:	4852      	ldr	r0, [pc, #328]	; (8008820 <_printf_i+0x21c>)
 80086d6:	2100      	movs	r1, #0
 80086d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086dc:	6865      	ldr	r5, [r4, #4]
 80086de:	2d00      	cmp	r5, #0
 80086e0:	60a5      	str	r5, [r4, #8]
 80086e2:	f2c0 8095 	blt.w	8008810 <_printf_i+0x20c>
 80086e6:	6821      	ldr	r1, [r4, #0]
 80086e8:	f021 0104 	bic.w	r1, r1, #4
 80086ec:	6021      	str	r1, [r4, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d13d      	bne.n	800876e <_printf_i+0x16a>
 80086f2:	2d00      	cmp	r5, #0
 80086f4:	f040 808e 	bne.w	8008814 <_printf_i+0x210>
 80086f8:	4665      	mov	r5, ip
 80086fa:	2a08      	cmp	r2, #8
 80086fc:	d10b      	bne.n	8008716 <_printf_i+0x112>
 80086fe:	6823      	ldr	r3, [r4, #0]
 8008700:	07db      	lsls	r3, r3, #31
 8008702:	d508      	bpl.n	8008716 <_printf_i+0x112>
 8008704:	6923      	ldr	r3, [r4, #16]
 8008706:	6862      	ldr	r2, [r4, #4]
 8008708:	429a      	cmp	r2, r3
 800870a:	bfde      	ittt	le
 800870c:	2330      	movle	r3, #48	; 0x30
 800870e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008712:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008716:	ebac 0305 	sub.w	r3, ip, r5
 800871a:	6123      	str	r3, [r4, #16]
 800871c:	f8cd 8000 	str.w	r8, [sp]
 8008720:	463b      	mov	r3, r7
 8008722:	aa03      	add	r2, sp, #12
 8008724:	4621      	mov	r1, r4
 8008726:	4630      	mov	r0, r6
 8008728:	f7ff fef6 	bl	8008518 <_printf_common>
 800872c:	3001      	adds	r0, #1
 800872e:	d14d      	bne.n	80087cc <_printf_i+0x1c8>
 8008730:	f04f 30ff 	mov.w	r0, #4294967295
 8008734:	b005      	add	sp, #20
 8008736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800873a:	4839      	ldr	r0, [pc, #228]	; (8008820 <_printf_i+0x21c>)
 800873c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008740:	6813      	ldr	r3, [r2, #0]
 8008742:	6821      	ldr	r1, [r4, #0]
 8008744:	1d1d      	adds	r5, r3, #4
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6015      	str	r5, [r2, #0]
 800874a:	060a      	lsls	r2, r1, #24
 800874c:	d50b      	bpl.n	8008766 <_printf_i+0x162>
 800874e:	07ca      	lsls	r2, r1, #31
 8008750:	bf44      	itt	mi
 8008752:	f041 0120 	orrmi.w	r1, r1, #32
 8008756:	6021      	strmi	r1, [r4, #0]
 8008758:	b91b      	cbnz	r3, 8008762 <_printf_i+0x15e>
 800875a:	6822      	ldr	r2, [r4, #0]
 800875c:	f022 0220 	bic.w	r2, r2, #32
 8008760:	6022      	str	r2, [r4, #0]
 8008762:	2210      	movs	r2, #16
 8008764:	e7b7      	b.n	80086d6 <_printf_i+0xd2>
 8008766:	064d      	lsls	r5, r1, #25
 8008768:	bf48      	it	mi
 800876a:	b29b      	uxthmi	r3, r3
 800876c:	e7ef      	b.n	800874e <_printf_i+0x14a>
 800876e:	4665      	mov	r5, ip
 8008770:	fbb3 f1f2 	udiv	r1, r3, r2
 8008774:	fb02 3311 	mls	r3, r2, r1, r3
 8008778:	5cc3      	ldrb	r3, [r0, r3]
 800877a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800877e:	460b      	mov	r3, r1
 8008780:	2900      	cmp	r1, #0
 8008782:	d1f5      	bne.n	8008770 <_printf_i+0x16c>
 8008784:	e7b9      	b.n	80086fa <_printf_i+0xf6>
 8008786:	6813      	ldr	r3, [r2, #0]
 8008788:	6825      	ldr	r5, [r4, #0]
 800878a:	1d18      	adds	r0, r3, #4
 800878c:	6961      	ldr	r1, [r4, #20]
 800878e:	6010      	str	r0, [r2, #0]
 8008790:	0628      	lsls	r0, r5, #24
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	d501      	bpl.n	800879a <_printf_i+0x196>
 8008796:	6019      	str	r1, [r3, #0]
 8008798:	e002      	b.n	80087a0 <_printf_i+0x19c>
 800879a:	066a      	lsls	r2, r5, #25
 800879c:	d5fb      	bpl.n	8008796 <_printf_i+0x192>
 800879e:	8019      	strh	r1, [r3, #0]
 80087a0:	2300      	movs	r3, #0
 80087a2:	4665      	mov	r5, ip
 80087a4:	6123      	str	r3, [r4, #16]
 80087a6:	e7b9      	b.n	800871c <_printf_i+0x118>
 80087a8:	6813      	ldr	r3, [r2, #0]
 80087aa:	1d19      	adds	r1, r3, #4
 80087ac:	6011      	str	r1, [r2, #0]
 80087ae:	681d      	ldr	r5, [r3, #0]
 80087b0:	6862      	ldr	r2, [r4, #4]
 80087b2:	2100      	movs	r1, #0
 80087b4:	4628      	mov	r0, r5
 80087b6:	f000 f837 	bl	8008828 <memchr>
 80087ba:	b108      	cbz	r0, 80087c0 <_printf_i+0x1bc>
 80087bc:	1b40      	subs	r0, r0, r5
 80087be:	6060      	str	r0, [r4, #4]
 80087c0:	6863      	ldr	r3, [r4, #4]
 80087c2:	6123      	str	r3, [r4, #16]
 80087c4:	2300      	movs	r3, #0
 80087c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087ca:	e7a7      	b.n	800871c <_printf_i+0x118>
 80087cc:	6923      	ldr	r3, [r4, #16]
 80087ce:	462a      	mov	r2, r5
 80087d0:	4639      	mov	r1, r7
 80087d2:	4630      	mov	r0, r6
 80087d4:	47c0      	blx	r8
 80087d6:	3001      	adds	r0, #1
 80087d8:	d0aa      	beq.n	8008730 <_printf_i+0x12c>
 80087da:	6823      	ldr	r3, [r4, #0]
 80087dc:	079b      	lsls	r3, r3, #30
 80087de:	d413      	bmi.n	8008808 <_printf_i+0x204>
 80087e0:	68e0      	ldr	r0, [r4, #12]
 80087e2:	9b03      	ldr	r3, [sp, #12]
 80087e4:	4298      	cmp	r0, r3
 80087e6:	bfb8      	it	lt
 80087e8:	4618      	movlt	r0, r3
 80087ea:	e7a3      	b.n	8008734 <_printf_i+0x130>
 80087ec:	2301      	movs	r3, #1
 80087ee:	464a      	mov	r2, r9
 80087f0:	4639      	mov	r1, r7
 80087f2:	4630      	mov	r0, r6
 80087f4:	47c0      	blx	r8
 80087f6:	3001      	adds	r0, #1
 80087f8:	d09a      	beq.n	8008730 <_printf_i+0x12c>
 80087fa:	3501      	adds	r5, #1
 80087fc:	68e3      	ldr	r3, [r4, #12]
 80087fe:	9a03      	ldr	r2, [sp, #12]
 8008800:	1a9b      	subs	r3, r3, r2
 8008802:	42ab      	cmp	r3, r5
 8008804:	dcf2      	bgt.n	80087ec <_printf_i+0x1e8>
 8008806:	e7eb      	b.n	80087e0 <_printf_i+0x1dc>
 8008808:	2500      	movs	r5, #0
 800880a:	f104 0919 	add.w	r9, r4, #25
 800880e:	e7f5      	b.n	80087fc <_printf_i+0x1f8>
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1ac      	bne.n	800876e <_printf_i+0x16a>
 8008814:	7803      	ldrb	r3, [r0, #0]
 8008816:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800881a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800881e:	e76c      	b.n	80086fa <_printf_i+0xf6>
 8008820:	080089ed 	.word	0x080089ed
 8008824:	080089fe 	.word	0x080089fe

08008828 <memchr>:
 8008828:	b510      	push	{r4, lr}
 800882a:	b2c9      	uxtb	r1, r1
 800882c:	4402      	add	r2, r0
 800882e:	4290      	cmp	r0, r2
 8008830:	4603      	mov	r3, r0
 8008832:	d101      	bne.n	8008838 <memchr+0x10>
 8008834:	2300      	movs	r3, #0
 8008836:	e003      	b.n	8008840 <memchr+0x18>
 8008838:	781c      	ldrb	r4, [r3, #0]
 800883a:	3001      	adds	r0, #1
 800883c:	428c      	cmp	r4, r1
 800883e:	d1f6      	bne.n	800882e <memchr+0x6>
 8008840:	4618      	mov	r0, r3
 8008842:	bd10      	pop	{r4, pc}

08008844 <memcpy>:
 8008844:	b510      	push	{r4, lr}
 8008846:	1e43      	subs	r3, r0, #1
 8008848:	440a      	add	r2, r1
 800884a:	4291      	cmp	r1, r2
 800884c:	d100      	bne.n	8008850 <memcpy+0xc>
 800884e:	bd10      	pop	{r4, pc}
 8008850:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008854:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008858:	e7f7      	b.n	800884a <memcpy+0x6>

0800885a <memmove>:
 800885a:	4288      	cmp	r0, r1
 800885c:	b510      	push	{r4, lr}
 800885e:	eb01 0302 	add.w	r3, r1, r2
 8008862:	d807      	bhi.n	8008874 <memmove+0x1a>
 8008864:	1e42      	subs	r2, r0, #1
 8008866:	4299      	cmp	r1, r3
 8008868:	d00a      	beq.n	8008880 <memmove+0x26>
 800886a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800886e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008872:	e7f8      	b.n	8008866 <memmove+0xc>
 8008874:	4283      	cmp	r3, r0
 8008876:	d9f5      	bls.n	8008864 <memmove+0xa>
 8008878:	1881      	adds	r1, r0, r2
 800887a:	1ad2      	subs	r2, r2, r3
 800887c:	42d3      	cmn	r3, r2
 800887e:	d100      	bne.n	8008882 <memmove+0x28>
 8008880:	bd10      	pop	{r4, pc}
 8008882:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008886:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800888a:	e7f7      	b.n	800887c <memmove+0x22>

0800888c <_realloc_r>:
 800888c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800888e:	4607      	mov	r7, r0
 8008890:	4614      	mov	r4, r2
 8008892:	460e      	mov	r6, r1
 8008894:	b921      	cbnz	r1, 80088a0 <_realloc_r+0x14>
 8008896:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800889a:	4611      	mov	r1, r2
 800889c:	f7ff bc3e 	b.w	800811c <_malloc_r>
 80088a0:	b922      	cbnz	r2, 80088ac <_realloc_r+0x20>
 80088a2:	f7ff fbef 	bl	8008084 <_free_r>
 80088a6:	4625      	mov	r5, r4
 80088a8:	4628      	mov	r0, r5
 80088aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088ac:	f000 f814 	bl	80088d8 <_malloc_usable_size_r>
 80088b0:	42a0      	cmp	r0, r4
 80088b2:	d20f      	bcs.n	80088d4 <_realloc_r+0x48>
 80088b4:	4621      	mov	r1, r4
 80088b6:	4638      	mov	r0, r7
 80088b8:	f7ff fc30 	bl	800811c <_malloc_r>
 80088bc:	4605      	mov	r5, r0
 80088be:	2800      	cmp	r0, #0
 80088c0:	d0f2      	beq.n	80088a8 <_realloc_r+0x1c>
 80088c2:	4631      	mov	r1, r6
 80088c4:	4622      	mov	r2, r4
 80088c6:	f7ff ffbd 	bl	8008844 <memcpy>
 80088ca:	4631      	mov	r1, r6
 80088cc:	4638      	mov	r0, r7
 80088ce:	f7ff fbd9 	bl	8008084 <_free_r>
 80088d2:	e7e9      	b.n	80088a8 <_realloc_r+0x1c>
 80088d4:	4635      	mov	r5, r6
 80088d6:	e7e7      	b.n	80088a8 <_realloc_r+0x1c>

080088d8 <_malloc_usable_size_r>:
 80088d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088dc:	1f18      	subs	r0, r3, #4
 80088de:	2b00      	cmp	r3, #0
 80088e0:	bfbc      	itt	lt
 80088e2:	580b      	ldrlt	r3, [r1, r0]
 80088e4:	18c0      	addlt	r0, r0, r3
 80088e6:	4770      	bx	lr

080088e8 <_init>:
 80088e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ea:	bf00      	nop
 80088ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ee:	bc08      	pop	{r3}
 80088f0:	469e      	mov	lr, r3
 80088f2:	4770      	bx	lr

080088f4 <_fini>:
 80088f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f6:	bf00      	nop
 80088f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088fa:	bc08      	pop	{r3}
 80088fc:	469e      	mov	lr, r3
 80088fe:	4770      	bx	lr
