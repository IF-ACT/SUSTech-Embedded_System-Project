
LCD_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ade4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  0800afd0  0800afd0  0001afd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b320  0800b320  00020220  2**0
                  CONTENTS
  4 .ARM          00000000  0800b320  0800b320  00020220  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b320  0800b320  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b320  0800b320  0001b320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b324  0800b324  0001b324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800b328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000220  0800b548  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  0800b548  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012257  00000000  00000000  00020249  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030c7  00000000  00000000  000324a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a50  00000000  00000000  00035568  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000898  00000000  00000000  00035fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000188a0  00000000  00000000  00036850  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eb28  00000000  00000000  0004f0f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00079f72  00000000  00000000  0005dc18  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d7b8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030c4  00000000  00000000  000d7c08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000220 	.word	0x20000220
 8000204:	00000000 	.word	0x00000000
 8000208:	0800afb4 	.word	0x0800afb4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000224 	.word	0x20000224
 8000224:	0800afb4 	.word	0x0800afb4

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	d1ed      	bne.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0e:	2afd      	cmp	r2, #253	; 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	; 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	; 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	; 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <__gesf2>:
 800105c:	f04f 3cff 	mov.w	ip, #4294967295
 8001060:	e006      	b.n	8001070 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__lesf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	e002      	b.n	8001070 <__cmpsf2+0x4>
 800106a:	bf00      	nop

0800106c <__cmpsf2>:
 800106c:	f04f 0c01 	mov.w	ip, #1
 8001070:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001074:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001078:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800107c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001080:	bf18      	it	ne
 8001082:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001086:	d011      	beq.n	80010ac <__cmpsf2+0x40>
 8001088:	b001      	add	sp, #4
 800108a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800108e:	bf18      	it	ne
 8001090:	ea90 0f01 	teqne	r0, r1
 8001094:	bf58      	it	pl
 8001096:	ebb2 0003 	subspl.w	r0, r2, r3
 800109a:	bf88      	it	hi
 800109c:	17c8      	asrhi	r0, r1, #31
 800109e:	bf38      	it	cc
 80010a0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010a4:	bf18      	it	ne
 80010a6:	f040 0001 	orrne.w	r0, r0, #1
 80010aa:	4770      	bx	lr
 80010ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b0:	d102      	bne.n	80010b8 <__cmpsf2+0x4c>
 80010b2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010b6:	d105      	bne.n	80010c4 <__cmpsf2+0x58>
 80010b8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010bc:	d1e4      	bne.n	8001088 <__cmpsf2+0x1c>
 80010be:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010c2:	d0e1      	beq.n	8001088 <__cmpsf2+0x1c>
 80010c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <__aeabi_cfrcmple>:
 80010cc:	4684      	mov	ip, r0
 80010ce:	4608      	mov	r0, r1
 80010d0:	4661      	mov	r1, ip
 80010d2:	e7ff      	b.n	80010d4 <__aeabi_cfcmpeq>

080010d4 <__aeabi_cfcmpeq>:
 80010d4:	b50f      	push	{r0, r1, r2, r3, lr}
 80010d6:	f7ff ffc9 	bl	800106c <__cmpsf2>
 80010da:	2800      	cmp	r0, #0
 80010dc:	bf48      	it	mi
 80010de:	f110 0f00 	cmnmi.w	r0, #0
 80010e2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010e4 <__aeabi_fcmpeq>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff fff4 	bl	80010d4 <__aeabi_cfcmpeq>
 80010ec:	bf0c      	ite	eq
 80010ee:	2001      	moveq	r0, #1
 80010f0:	2000      	movne	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmplt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffea 	bl	80010d4 <__aeabi_cfcmpeq>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmple>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff ffe0 	bl	80010d4 <__aeabi_cfcmpeq>
 8001114:	bf94      	ite	ls
 8001116:	2001      	movls	r0, #1
 8001118:	2000      	movhi	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_fcmpge>:
 8001120:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001124:	f7ff ffd2 	bl	80010cc <__aeabi_cfrcmple>
 8001128:	bf94      	ite	ls
 800112a:	2001      	movls	r0, #1
 800112c:	2000      	movhi	r0, #0
 800112e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001132:	bf00      	nop

08001134 <__aeabi_fcmpgt>:
 8001134:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001138:	f7ff ffc8 	bl	80010cc <__aeabi_cfrcmple>
 800113c:	bf34      	ite	cc
 800113e:	2001      	movcc	r0, #1
 8001140:	2000      	movcs	r0, #0
 8001142:	f85d fb08 	ldr.w	pc, [sp], #8
 8001146:	bf00      	nop

08001148 <__aeabi_f2iz>:
 8001148:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800114c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001150:	d30f      	bcc.n	8001172 <__aeabi_f2iz+0x2a>
 8001152:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001156:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800115a:	d90d      	bls.n	8001178 <__aeabi_f2iz+0x30>
 800115c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001164:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001168:	fa23 f002 	lsr.w	r0, r3, r2
 800116c:	bf18      	it	ne
 800116e:	4240      	negne	r0, r0
 8001170:	4770      	bx	lr
 8001172:	f04f 0000 	mov.w	r0, #0
 8001176:	4770      	bx	lr
 8001178:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800117c:	d101      	bne.n	8001182 <__aeabi_f2iz+0x3a>
 800117e:	0242      	lsls	r2, r0, #9
 8001180:	d105      	bne.n	800118e <__aeabi_f2iz+0x46>
 8001182:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001186:	bf08      	it	eq
 8001188:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800118c:	4770      	bx	lr
 800118e:	f04f 0000 	mov.w	r0, #0
 8001192:	4770      	bx	lr

08001194 <__aeabi_f2uiz>:
 8001194:	0042      	lsls	r2, r0, #1
 8001196:	d20e      	bcs.n	80011b6 <__aeabi_f2uiz+0x22>
 8001198:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800119c:	d30b      	bcc.n	80011b6 <__aeabi_f2uiz+0x22>
 800119e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011a6:	d409      	bmi.n	80011bc <__aeabi_f2uiz+0x28>
 80011a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011b0:	fa23 f002 	lsr.w	r0, r3, r2
 80011b4:	4770      	bx	lr
 80011b6:	f04f 0000 	mov.w	r0, #0
 80011ba:	4770      	bx	lr
 80011bc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011c0:	d101      	bne.n	80011c6 <__aeabi_f2uiz+0x32>
 80011c2:	0242      	lsls	r2, r0, #9
 80011c4:	d102      	bne.n	80011cc <__aeabi_f2uiz+0x38>
 80011c6:	f04f 30ff 	mov.w	r0, #4294967295
 80011ca:	4770      	bx	lr
 80011cc:	f04f 0000 	mov.w	r0, #0
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop

080011d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <HAL_Init+0x28>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a07      	ldr	r2, [pc, #28]	; (80011fc <HAL_Init+0x28>)
 80011de:	f043 0310 	orr.w	r3, r3, #16
 80011e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e4:	2003      	movs	r0, #3
 80011e6:	f000 f945 	bl	8001474 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ea:	2000      	movs	r0, #0
 80011ec:	f000 f808 	bl	8001200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f0:	f006 ffb4 	bl	800815c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40022000 	.word	0x40022000

08001200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_InitTick+0x54>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_InitTick+0x58>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4619      	mov	r1, r3
 8001212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001216:	fbb3 f3f1 	udiv	r3, r3, r1
 800121a:	fbb2 f3f3 	udiv	r3, r2, r3
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f95d 	bl	80014de <HAL_SYSTICK_Config>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e00e      	b.n	800124c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b0f      	cmp	r3, #15
 8001232:	d80a      	bhi.n	800124a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001234:	2200      	movs	r2, #0
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f000 f925 	bl	800148a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001240:	4a06      	ldr	r2, [pc, #24]	; (800125c <HAL_InitTick+0x5c>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e000      	b.n	800124c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000008 	.word	0x20000008
 8001258:	20000004 	.word	0x20000004
 800125c:	20000000 	.word	0x20000000

08001260 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <HAL_IncTick+0x1c>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_IncTick+0x20>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4413      	add	r3, r2
 8001270:	4a03      	ldr	r2, [pc, #12]	; (8001280 <HAL_IncTick+0x20>)
 8001272:	6013      	str	r3, [r2, #0]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	20000004 	.word	0x20000004
 8001280:	2000024c 	.word	0x2000024c

08001284 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return uwTick;
 8001288:	4b02      	ldr	r3, [pc, #8]	; (8001294 <HAL_GetTick+0x10>)
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	2000024c 	.word	0x2000024c

08001298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a0:	f7ff fff0 	bl	8001284 <HAL_GetTick>
 80012a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b0:	d005      	beq.n	80012be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <HAL_Delay+0x40>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4413      	add	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012be:	bf00      	nop
 80012c0:	f7ff ffe0 	bl	8001284 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d8f7      	bhi.n	80012c0 <HAL_Delay+0x28>
  {
  }
}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000004 	.word	0x20000004

080012dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f8:	4013      	ands	r3, r2
 80012fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800130c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130e:	4a04      	ldr	r2, [pc, #16]	; (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	60d3      	str	r3, [r2, #12]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <__NVIC_GetPriorityGrouping+0x18>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	f003 0307 	and.w	r3, r3, #7
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	2b00      	cmp	r3, #0
 8001350:	db0b      	blt.n	800136a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	f003 021f 	and.w	r2, r3, #31
 8001358:	4906      	ldr	r1, [pc, #24]	; (8001374 <__NVIC_EnableIRQ+0x34>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	095b      	lsrs	r3, r3, #5
 8001360:	2001      	movs	r0, #1
 8001362:	fa00 f202 	lsl.w	r2, r0, r2
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	e000e100 	.word	0xe000e100

08001378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001388:	2b00      	cmp	r3, #0
 800138a:	db0a      	blt.n	80013a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	490c      	ldr	r1, [pc, #48]	; (80013c4 <__NVIC_SetPriority+0x4c>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	0112      	lsls	r2, r2, #4
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	440b      	add	r3, r1
 800139c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a0:	e00a      	b.n	80013b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4908      	ldr	r1, [pc, #32]	; (80013c8 <__NVIC_SetPriority+0x50>)
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	3b04      	subs	r3, #4
 80013b0:	0112      	lsls	r2, r2, #4
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	440b      	add	r3, r1
 80013b6:	761a      	strb	r2, [r3, #24]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000e100 	.word	0xe000e100
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f1c3 0307 	rsb	r3, r3, #7
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	bf28      	it	cs
 80013ea:	2304      	movcs	r3, #4
 80013ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3304      	adds	r3, #4
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d902      	bls.n	80013fc <NVIC_EncodePriority+0x30>
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3b03      	subs	r3, #3
 80013fa:	e000      	b.n	80013fe <NVIC_EncodePriority+0x32>
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	f04f 32ff 	mov.w	r2, #4294967295
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43da      	mvns	r2, r3
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	401a      	ands	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001414:	f04f 31ff 	mov.w	r1, #4294967295
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	fa01 f303 	lsl.w	r3, r1, r3
 800141e:	43d9      	mvns	r1, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	4313      	orrs	r3, r2
         );
}
 8001426:	4618      	mov	r0, r3
 8001428:	3724      	adds	r7, #36	; 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001440:	d301      	bcc.n	8001446 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001442:	2301      	movs	r3, #1
 8001444:	e00f      	b.n	8001466 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <SysTick_Config+0x40>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144e:	210f      	movs	r1, #15
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	f7ff ff90 	bl	8001378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <SysTick_Config+0x40>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <SysTick_Config+0x40>)
 8001460:	2207      	movs	r2, #7
 8001462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	e000e010 	.word	0xe000e010

08001474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ff2d 	bl	80012dc <__NVIC_SetPriorityGrouping>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800149c:	f7ff ff42 	bl	8001324 <__NVIC_GetPriorityGrouping>
 80014a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	6978      	ldr	r0, [r7, #20]
 80014a8:	f7ff ff90 	bl	80013cc <NVIC_EncodePriority>
 80014ac:	4602      	mov	r2, r0
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff5f 	bl	8001378 <__NVIC_SetPriority>
}
 80014ba:	bf00      	nop
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff35 	bl	8001340 <__NVIC_EnableIRQ>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ffa2 	bl	8001430 <SysTick_Config>
 80014ec:	4603      	mov	r3, r0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b08b      	sub	sp, #44	; 0x2c
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001502:	2300      	movs	r3, #0
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150a:	e133      	b.n	8001774 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800150c:	2201      	movs	r2, #1
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	69fa      	ldr	r2, [r7, #28]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	429a      	cmp	r2, r3
 8001526:	f040 8122 	bne.w	800176e <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b12      	cmp	r3, #18
 8001530:	d034      	beq.n	800159c <HAL_GPIO_Init+0xa4>
 8001532:	2b12      	cmp	r3, #18
 8001534:	d80d      	bhi.n	8001552 <HAL_GPIO_Init+0x5a>
 8001536:	2b02      	cmp	r3, #2
 8001538:	d02b      	beq.n	8001592 <HAL_GPIO_Init+0x9a>
 800153a:	2b02      	cmp	r3, #2
 800153c:	d804      	bhi.n	8001548 <HAL_GPIO_Init+0x50>
 800153e:	2b00      	cmp	r3, #0
 8001540:	d031      	beq.n	80015a6 <HAL_GPIO_Init+0xae>
 8001542:	2b01      	cmp	r3, #1
 8001544:	d01c      	beq.n	8001580 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001546:	e048      	b.n	80015da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001548:	2b03      	cmp	r3, #3
 800154a:	d043      	beq.n	80015d4 <HAL_GPIO_Init+0xdc>
 800154c:	2b11      	cmp	r3, #17
 800154e:	d01b      	beq.n	8001588 <HAL_GPIO_Init+0x90>
          break;
 8001550:	e043      	b.n	80015da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001552:	4a8f      	ldr	r2, [pc, #572]	; (8001790 <HAL_GPIO_Init+0x298>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d026      	beq.n	80015a6 <HAL_GPIO_Init+0xae>
 8001558:	4a8d      	ldr	r2, [pc, #564]	; (8001790 <HAL_GPIO_Init+0x298>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d806      	bhi.n	800156c <HAL_GPIO_Init+0x74>
 800155e:	4a8d      	ldr	r2, [pc, #564]	; (8001794 <HAL_GPIO_Init+0x29c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d020      	beq.n	80015a6 <HAL_GPIO_Init+0xae>
 8001564:	4a8c      	ldr	r2, [pc, #560]	; (8001798 <HAL_GPIO_Init+0x2a0>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d01d      	beq.n	80015a6 <HAL_GPIO_Init+0xae>
          break;
 800156a:	e036      	b.n	80015da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800156c:	4a8b      	ldr	r2, [pc, #556]	; (800179c <HAL_GPIO_Init+0x2a4>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d019      	beq.n	80015a6 <HAL_GPIO_Init+0xae>
 8001572:	4a8b      	ldr	r2, [pc, #556]	; (80017a0 <HAL_GPIO_Init+0x2a8>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d016      	beq.n	80015a6 <HAL_GPIO_Init+0xae>
 8001578:	4a8a      	ldr	r2, [pc, #552]	; (80017a4 <HAL_GPIO_Init+0x2ac>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d013      	beq.n	80015a6 <HAL_GPIO_Init+0xae>
          break;
 800157e:	e02c      	b.n	80015da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	623b      	str	r3, [r7, #32]
          break;
 8001586:	e028      	b.n	80015da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	3304      	adds	r3, #4
 800158e:	623b      	str	r3, [r7, #32]
          break;
 8001590:	e023      	b.n	80015da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	3308      	adds	r3, #8
 8001598:	623b      	str	r3, [r7, #32]
          break;
 800159a:	e01e      	b.n	80015da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	330c      	adds	r3, #12
 80015a2:	623b      	str	r3, [r7, #32]
          break;
 80015a4:	e019      	b.n	80015da <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d102      	bne.n	80015b4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015ae:	2304      	movs	r3, #4
 80015b0:	623b      	str	r3, [r7, #32]
          break;
 80015b2:	e012      	b.n	80015da <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d105      	bne.n	80015c8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015bc:	2308      	movs	r3, #8
 80015be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69fa      	ldr	r2, [r7, #28]
 80015c4:	611a      	str	r2, [r3, #16]
          break;
 80015c6:	e008      	b.n	80015da <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015c8:	2308      	movs	r3, #8
 80015ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69fa      	ldr	r2, [r7, #28]
 80015d0:	615a      	str	r2, [r3, #20]
          break;
 80015d2:	e002      	b.n	80015da <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
          break;
 80015d8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	2bff      	cmp	r3, #255	; 0xff
 80015de:	d801      	bhi.n	80015e4 <HAL_GPIO_Init+0xec>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	e001      	b.n	80015e8 <HAL_GPIO_Init+0xf0>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3304      	adds	r3, #4
 80015e8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	2bff      	cmp	r3, #255	; 0xff
 80015ee:	d802      	bhi.n	80015f6 <HAL_GPIO_Init+0xfe>
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	e002      	b.n	80015fc <HAL_GPIO_Init+0x104>
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	3b08      	subs	r3, #8
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	210f      	movs	r1, #15
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	401a      	ands	r2, r3
 800160e:	6a39      	ldr	r1, [r7, #32]
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	fa01 f303 	lsl.w	r3, r1, r3
 8001616:	431a      	orrs	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 80a2 	beq.w	800176e <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800162a:	4b5f      	ldr	r3, [pc, #380]	; (80017a8 <HAL_GPIO_Init+0x2b0>)
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	4a5e      	ldr	r2, [pc, #376]	; (80017a8 <HAL_GPIO_Init+0x2b0>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6193      	str	r3, [r2, #24]
 8001636:	4b5c      	ldr	r3, [pc, #368]	; (80017a8 <HAL_GPIO_Init+0x2b0>)
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001642:	4a5a      	ldr	r2, [pc, #360]	; (80017ac <HAL_GPIO_Init+0x2b4>)
 8001644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001646:	089b      	lsrs	r3, r3, #2
 8001648:	3302      	adds	r3, #2
 800164a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	220f      	movs	r2, #15
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	4013      	ands	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a51      	ldr	r2, [pc, #324]	; (80017b0 <HAL_GPIO_Init+0x2b8>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d01f      	beq.n	80016ae <HAL_GPIO_Init+0x1b6>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a50      	ldr	r2, [pc, #320]	; (80017b4 <HAL_GPIO_Init+0x2bc>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d019      	beq.n	80016aa <HAL_GPIO_Init+0x1b2>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a4f      	ldr	r2, [pc, #316]	; (80017b8 <HAL_GPIO_Init+0x2c0>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d013      	beq.n	80016a6 <HAL_GPIO_Init+0x1ae>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a4e      	ldr	r2, [pc, #312]	; (80017bc <HAL_GPIO_Init+0x2c4>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d00d      	beq.n	80016a2 <HAL_GPIO_Init+0x1aa>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a4d      	ldr	r2, [pc, #308]	; (80017c0 <HAL_GPIO_Init+0x2c8>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d007      	beq.n	800169e <HAL_GPIO_Init+0x1a6>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a4c      	ldr	r2, [pc, #304]	; (80017c4 <HAL_GPIO_Init+0x2cc>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d101      	bne.n	800169a <HAL_GPIO_Init+0x1a2>
 8001696:	2305      	movs	r3, #5
 8001698:	e00a      	b.n	80016b0 <HAL_GPIO_Init+0x1b8>
 800169a:	2306      	movs	r3, #6
 800169c:	e008      	b.n	80016b0 <HAL_GPIO_Init+0x1b8>
 800169e:	2304      	movs	r3, #4
 80016a0:	e006      	b.n	80016b0 <HAL_GPIO_Init+0x1b8>
 80016a2:	2303      	movs	r3, #3
 80016a4:	e004      	b.n	80016b0 <HAL_GPIO_Init+0x1b8>
 80016a6:	2302      	movs	r3, #2
 80016a8:	e002      	b.n	80016b0 <HAL_GPIO_Init+0x1b8>
 80016aa:	2301      	movs	r3, #1
 80016ac:	e000      	b.n	80016b0 <HAL_GPIO_Init+0x1b8>
 80016ae:	2300      	movs	r3, #0
 80016b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b2:	f002 0203 	and.w	r2, r2, #3
 80016b6:	0092      	lsls	r2, r2, #2
 80016b8:	4093      	lsls	r3, r2
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4313      	orrs	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016c0:	493a      	ldr	r1, [pc, #232]	; (80017ac <HAL_GPIO_Init+0x2b4>)
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	089b      	lsrs	r3, r3, #2
 80016c6:	3302      	adds	r3, #2
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d006      	beq.n	80016e8 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016da:	4b3b      	ldr	r3, [pc, #236]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	493a      	ldr	r1, [pc, #232]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	600b      	str	r3, [r1, #0]
 80016e6:	e006      	b.n	80016f6 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016e8:	4b37      	ldr	r3, [pc, #220]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	43db      	mvns	r3, r3
 80016f0:	4935      	ldr	r1, [pc, #212]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 80016f2:	4013      	ands	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d006      	beq.n	8001710 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001702:	4b31      	ldr	r3, [pc, #196]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	4930      	ldr	r1, [pc, #192]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	604b      	str	r3, [r1, #4]
 800170e:	e006      	b.n	800171e <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001710:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	43db      	mvns	r3, r3
 8001718:	492b      	ldr	r1, [pc, #172]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 800171a:	4013      	ands	r3, r2
 800171c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d006      	beq.n	8001738 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800172a:	4b27      	ldr	r3, [pc, #156]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	4926      	ldr	r1, [pc, #152]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	608b      	str	r3, [r1, #8]
 8001736:	e006      	b.n	8001746 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001738:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	43db      	mvns	r3, r3
 8001740:	4921      	ldr	r1, [pc, #132]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001742:	4013      	ands	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d006      	beq.n	8001760 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001752:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	491c      	ldr	r1, [pc, #112]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	60cb      	str	r3, [r1, #12]
 800175e:	e006      	b.n	800176e <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001760:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 8001762:	68da      	ldr	r2, [r3, #12]
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	43db      	mvns	r3, r3
 8001768:	4917      	ldr	r1, [pc, #92]	; (80017c8 <HAL_GPIO_Init+0x2d0>)
 800176a:	4013      	ands	r3, r2
 800176c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	3301      	adds	r3, #1
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	fa22 f303 	lsr.w	r3, r2, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	f47f aec4 	bne.w	800150c <HAL_GPIO_Init+0x14>
  }
}
 8001784:	bf00      	nop
 8001786:	372c      	adds	r7, #44	; 0x2c
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	10210000 	.word	0x10210000
 8001794:	10110000 	.word	0x10110000
 8001798:	10120000 	.word	0x10120000
 800179c:	10310000 	.word	0x10310000
 80017a0:	10320000 	.word	0x10320000
 80017a4:	10220000 	.word	0x10220000
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40010000 	.word	0x40010000
 80017b0:	40010800 	.word	0x40010800
 80017b4:	40010c00 	.word	0x40010c00
 80017b8:	40011000 	.word	0x40011000
 80017bc:	40011400 	.word	0x40011400
 80017c0:	40011800 	.word	0x40011800
 80017c4:	40011c00 	.word	0x40011c00
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	887b      	ldrh	r3, [r7, #2]
 80017de:	4013      	ands	r3, r2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d002      	beq.n	80017ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017e4:	2301      	movs	r3, #1
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	e001      	b.n	80017ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr

080017fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	460b      	mov	r3, r1
 8001804:	807b      	strh	r3, [r7, #2]
 8001806:	4613      	mov	r3, r2
 8001808:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800180a:	787b      	ldrb	r3, [r7, #1]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001810:	887a      	ldrh	r2, [r7, #2]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001816:	e003      	b.n	8001820 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001818:	887b      	ldrh	r3, [r7, #2]
 800181a:	041a      	lsls	r2, r3, #16
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	611a      	str	r2, [r3, #16]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr

0800182a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	460b      	mov	r3, r1
 8001834:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	887b      	ldrh	r3, [r7, #2]
 800183c:	4013      	ands	r3, r2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001842:	887a      	ldrh	r2, [r7, #2]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001848:	e002      	b.n	8001850 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800184a:	887a      	ldrh	r2, [r7, #2]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	611a      	str	r2, [r3, #16]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr
	...

0800185c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001868:	695a      	ldr	r2, [r3, #20]
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	4013      	ands	r3, r2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d006      	beq.n	8001880 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001872:	4a05      	ldr	r2, [pc, #20]	; (8001888 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001874:	88fb      	ldrh	r3, [r7, #6]
 8001876:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	4618      	mov	r0, r3
 800187c:	f006 fbe6 	bl	800804c <HAL_GPIO_EXTI_Callback>
  }
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40010400 	.word	0x40010400

0800188c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e26c      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 8087 	beq.w	80019ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018ac:	4b92      	ldr	r3, [pc, #584]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 030c 	and.w	r3, r3, #12
 80018b4:	2b04      	cmp	r3, #4
 80018b6:	d00c      	beq.n	80018d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018b8:	4b8f      	ldr	r3, [pc, #572]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 030c 	and.w	r3, r3, #12
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	d112      	bne.n	80018ea <HAL_RCC_OscConfig+0x5e>
 80018c4:	4b8c      	ldr	r3, [pc, #560]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d0:	d10b      	bne.n	80018ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d2:	4b89      	ldr	r3, [pc, #548]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d06c      	beq.n	80019b8 <HAL_RCC_OscConfig+0x12c>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d168      	bne.n	80019b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e246      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f2:	d106      	bne.n	8001902 <HAL_RCC_OscConfig+0x76>
 80018f4:	4b80      	ldr	r3, [pc, #512]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a7f      	ldr	r2, [pc, #508]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	e02e      	b.n	8001960 <HAL_RCC_OscConfig+0xd4>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10c      	bne.n	8001924 <HAL_RCC_OscConfig+0x98>
 800190a:	4b7b      	ldr	r3, [pc, #492]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a7a      	ldr	r2, [pc, #488]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	4b78      	ldr	r3, [pc, #480]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a77      	ldr	r2, [pc, #476]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800191c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	e01d      	b.n	8001960 <HAL_RCC_OscConfig+0xd4>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800192c:	d10c      	bne.n	8001948 <HAL_RCC_OscConfig+0xbc>
 800192e:	4b72      	ldr	r3, [pc, #456]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a71      	ldr	r2, [pc, #452]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	4b6f      	ldr	r3, [pc, #444]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a6e      	ldr	r2, [pc, #440]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	e00b      	b.n	8001960 <HAL_RCC_OscConfig+0xd4>
 8001948:	4b6b      	ldr	r3, [pc, #428]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a6a      	ldr	r2, [pc, #424]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800194e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	4b68      	ldr	r3, [pc, #416]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a67      	ldr	r2, [pc, #412]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800195a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800195e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d013      	beq.n	8001990 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff fc8c 	bl	8001284 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001970:	f7ff fc88 	bl	8001284 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b64      	cmp	r3, #100	; 0x64
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e1fa      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001982:	4b5d      	ldr	r3, [pc, #372]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0f0      	beq.n	8001970 <HAL_RCC_OscConfig+0xe4>
 800198e:	e014      	b.n	80019ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff fc78 	bl	8001284 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001998:	f7ff fc74 	bl	8001284 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	; 0x64
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e1e6      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019aa:	4b53      	ldr	r3, [pc, #332]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x10c>
 80019b6:	e000      	b.n	80019ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d063      	beq.n	8001a8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019c6:	4b4c      	ldr	r3, [pc, #304]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00b      	beq.n	80019ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019d2:	4b49      	ldr	r3, [pc, #292]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	2b08      	cmp	r3, #8
 80019dc:	d11c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x18c>
 80019de:	4b46      	ldr	r3, [pc, #280]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d116      	bne.n	8001a18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ea:	4b43      	ldr	r3, [pc, #268]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d005      	beq.n	8001a02 <HAL_RCC_OscConfig+0x176>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d001      	beq.n	8001a02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e1ba      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a02:	4b3d      	ldr	r3, [pc, #244]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4939      	ldr	r1, [pc, #228]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a16:	e03a      	b.n	8001a8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d020      	beq.n	8001a62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a20:	4b36      	ldr	r3, [pc, #216]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a26:	f7ff fc2d 	bl	8001284 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2e:	f7ff fc29 	bl	8001284 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e19b      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a40:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0f0      	beq.n	8001a2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	4927      	ldr	r1, [pc, #156]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	600b      	str	r3, [r1, #0]
 8001a60:	e015      	b.n	8001a8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a62:	4b26      	ldr	r3, [pc, #152]	; (8001afc <HAL_RCC_OscConfig+0x270>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7ff fc0c 	bl	8001284 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a70:	f7ff fc08 	bl	8001284 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e17a      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a82:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d03a      	beq.n	8001b10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d019      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aa2:	4b17      	ldr	r3, [pc, #92]	; (8001b00 <HAL_RCC_OscConfig+0x274>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa8:	f7ff fbec 	bl	8001284 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab0:	f7ff fbe8 	bl	8001284 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e15a      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f000 fada 	bl	8002088 <RCC_Delay>
 8001ad4:	e01c      	b.n	8001b10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <HAL_RCC_OscConfig+0x274>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001adc:	f7ff fbd2 	bl	8001284 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae2:	e00f      	b.n	8001b04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae4:	f7ff fbce 	bl	8001284 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d908      	bls.n	8001b04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e140      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000
 8001afc:	42420000 	.word	0x42420000
 8001b00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b04:	4b9e      	ldr	r3, [pc, #632]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1e9      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 80a6 	beq.w	8001c6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b22:	4b97      	ldr	r3, [pc, #604]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10d      	bne.n	8001b4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	4b94      	ldr	r3, [pc, #592]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	4a93      	ldr	r2, [pc, #588]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b38:	61d3      	str	r3, [r2, #28]
 8001b3a:	4b91      	ldr	r3, [pc, #580]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b46:	2301      	movs	r3, #1
 8001b48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4a:	4b8e      	ldr	r3, [pc, #568]	; (8001d84 <HAL_RCC_OscConfig+0x4f8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d118      	bne.n	8001b88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b56:	4b8b      	ldr	r3, [pc, #556]	; (8001d84 <HAL_RCC_OscConfig+0x4f8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a8a      	ldr	r2, [pc, #552]	; (8001d84 <HAL_RCC_OscConfig+0x4f8>)
 8001b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b62:	f7ff fb8f 	bl	8001284 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6a:	f7ff fb8b 	bl	8001284 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b64      	cmp	r3, #100	; 0x64
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e0fd      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7c:	4b81      	ldr	r3, [pc, #516]	; (8001d84 <HAL_RCC_OscConfig+0x4f8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d106      	bne.n	8001b9e <HAL_RCC_OscConfig+0x312>
 8001b90:	4b7b      	ldr	r3, [pc, #492]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	4a7a      	ldr	r2, [pc, #488]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6213      	str	r3, [r2, #32]
 8001b9c:	e02d      	b.n	8001bfa <HAL_RCC_OscConfig+0x36e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x334>
 8001ba6:	4b76      	ldr	r3, [pc, #472]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	4a75      	ldr	r2, [pc, #468]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001bac:	f023 0301 	bic.w	r3, r3, #1
 8001bb0:	6213      	str	r3, [r2, #32]
 8001bb2:	4b73      	ldr	r3, [pc, #460]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	4a72      	ldr	r2, [pc, #456]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001bb8:	f023 0304 	bic.w	r3, r3, #4
 8001bbc:	6213      	str	r3, [r2, #32]
 8001bbe:	e01c      	b.n	8001bfa <HAL_RCC_OscConfig+0x36e>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	2b05      	cmp	r3, #5
 8001bc6:	d10c      	bne.n	8001be2 <HAL_RCC_OscConfig+0x356>
 8001bc8:	4b6d      	ldr	r3, [pc, #436]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	4a6c      	ldr	r2, [pc, #432]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001bce:	f043 0304 	orr.w	r3, r3, #4
 8001bd2:	6213      	str	r3, [r2, #32]
 8001bd4:	4b6a      	ldr	r3, [pc, #424]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	4a69      	ldr	r2, [pc, #420]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6213      	str	r3, [r2, #32]
 8001be0:	e00b      	b.n	8001bfa <HAL_RCC_OscConfig+0x36e>
 8001be2:	4b67      	ldr	r3, [pc, #412]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	4a66      	ldr	r2, [pc, #408]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001be8:	f023 0301 	bic.w	r3, r3, #1
 8001bec:	6213      	str	r3, [r2, #32]
 8001bee:	4b64      	ldr	r3, [pc, #400]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	4a63      	ldr	r2, [pc, #396]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001bf4:	f023 0304 	bic.w	r3, r3, #4
 8001bf8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d015      	beq.n	8001c2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c02:	f7ff fb3f 	bl	8001284 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c08:	e00a      	b.n	8001c20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0a:	f7ff fb3b 	bl	8001284 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e0ab      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c20:	4b57      	ldr	r3, [pc, #348]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0ee      	beq.n	8001c0a <HAL_RCC_OscConfig+0x37e>
 8001c2c:	e014      	b.n	8001c58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2e:	f7ff fb29 	bl	8001284 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c34:	e00a      	b.n	8001c4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c36:	f7ff fb25 	bl	8001284 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e095      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c4c:	4b4c      	ldr	r3, [pc, #304]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1ee      	bne.n	8001c36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c58:	7dfb      	ldrb	r3, [r7, #23]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d105      	bne.n	8001c6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5e:	4b48      	ldr	r3, [pc, #288]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	4a47      	ldr	r2, [pc, #284]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 8081 	beq.w	8001d76 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c74:	4b42      	ldr	r3, [pc, #264]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d061      	beq.n	8001d44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d146      	bne.n	8001d16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c88:	4b3f      	ldr	r3, [pc, #252]	; (8001d88 <HAL_RCC_OscConfig+0x4fc>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8e:	f7ff faf9 	bl	8001284 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c96:	f7ff faf5 	bl	8001284 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e067      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca8:	4b35      	ldr	r3, [pc, #212]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f0      	bne.n	8001c96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cbc:	d108      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cbe:	4b30      	ldr	r3, [pc, #192]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	492d      	ldr	r1, [pc, #180]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd0:	4b2b      	ldr	r3, [pc, #172]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a19      	ldr	r1, [r3, #32]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	430b      	orrs	r3, r1
 8001ce2:	4927      	ldr	r1, [pc, #156]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce8:	4b27      	ldr	r3, [pc, #156]	; (8001d88 <HAL_RCC_OscConfig+0x4fc>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cee:	f7ff fac9 	bl	8001284 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf6:	f7ff fac5 	bl	8001284 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e037      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d08:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x46a>
 8001d14:	e02f      	b.n	8001d76 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d16:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <HAL_RCC_OscConfig+0x4fc>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7ff fab2 	bl	8001284 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d24:	f7ff faae 	bl	8001284 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e020      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d36:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x498>
 8001d42:	e018      	b.n	8001d76 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e013      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_RCC_OscConfig+0x4f4>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d106      	bne.n	8001d72 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d001      	beq.n	8001d76 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40007000 	.word	0x40007000
 8001d88:	42420060 	.word	0x42420060

08001d8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0d0      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001da0:	4b6a      	ldr	r3, [pc, #424]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d910      	bls.n	8001dd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dae:	4b67      	ldr	r3, [pc, #412]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 0207 	bic.w	r2, r3, #7
 8001db6:	4965      	ldr	r1, [pc, #404]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbe:	4b63      	ldr	r3, [pc, #396]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e0b8      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d020      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001de8:	4b59      	ldr	r3, [pc, #356]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	4a58      	ldr	r2, [pc, #352]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001df2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e00:	4b53      	ldr	r3, [pc, #332]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	4a52      	ldr	r2, [pc, #328]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e0c:	4b50      	ldr	r3, [pc, #320]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	494d      	ldr	r1, [pc, #308]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d040      	beq.n	8001eac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d107      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e32:	4b47      	ldr	r3, [pc, #284]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d115      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e07f      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d107      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4a:	4b41      	ldr	r3, [pc, #260]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d109      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e073      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5a:	4b3d      	ldr	r3, [pc, #244]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e06b      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e6a:	4b39      	ldr	r3, [pc, #228]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f023 0203 	bic.w	r2, r3, #3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	4936      	ldr	r1, [pc, #216]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e7c:	f7ff fa02 	bl	8001284 <HAL_GetTick>
 8001e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e82:	e00a      	b.n	8001e9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e84:	f7ff f9fe 	bl	8001284 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e053      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9a:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 020c 	and.w	r2, r3, #12
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d1eb      	bne.n	8001e84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eac:	4b27      	ldr	r3, [pc, #156]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d210      	bcs.n	8001edc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eba:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 0207 	bic.w	r2, r3, #7
 8001ec2:	4922      	ldr	r1, [pc, #136]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eca:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d001      	beq.n	8001edc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e032      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d008      	beq.n	8001efa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee8:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	4916      	ldr	r1, [pc, #88]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d009      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f06:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	490e      	ldr	r1, [pc, #56]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f1a:	f000 f821 	bl	8001f60 <HAL_RCC_GetSysClockFreq>
 8001f1e:	4601      	mov	r1, r0
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	091b      	lsrs	r3, r3, #4
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <HAL_RCC_ClockConfig+0x1c8>)
 8001f2c:	5cd3      	ldrb	r3, [r2, r3]
 8001f2e:	fa21 f303 	lsr.w	r3, r1, r3
 8001f32:	4a09      	ldr	r2, [pc, #36]	; (8001f58 <HAL_RCC_ClockConfig+0x1cc>)
 8001f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <HAL_RCC_ClockConfig+0x1d0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff f960 	bl	8001200 <HAL_InitTick>

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40022000 	.word	0x40022000
 8001f50:	40021000 	.word	0x40021000
 8001f54:	0800b0a8 	.word	0x0800b0a8
 8001f58:	20000008 	.word	0x20000008
 8001f5c:	20000000 	.word	0x20000000

08001f60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f60:	b490      	push	{r4, r7}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f66:	4b2a      	ldr	r3, [pc, #168]	; (8002010 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f68:	1d3c      	adds	r4, r7, #4
 8001f6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f70:	4b28      	ldr	r3, [pc, #160]	; (8002014 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f8a:	4b23      	ldr	r3, [pc, #140]	; (8002018 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d002      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x40>
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d003      	beq.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x46>
 8001f9e:	e02d      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fa0:	4b1e      	ldr	r3, [pc, #120]	; (800201c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fa2:	623b      	str	r3, [r7, #32]
      break;
 8001fa4:	e02d      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	0c9b      	lsrs	r3, r3, #18
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fb2:	4413      	add	r3, r2
 8001fb4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fb8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d013      	beq.n	8001fec <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fc4:	4b14      	ldr	r3, [pc, #80]	; (8002018 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	0c5b      	lsrs	r3, r3, #17
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001fd8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	4a0f      	ldr	r2, [pc, #60]	; (800201c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fde:	fb02 f203 	mul.w	r2, r2, r3
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fea:	e004      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	4a0c      	ldr	r2, [pc, #48]	; (8002020 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ff0:	fb02 f303 	mul.w	r3, r2, r3
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	623b      	str	r3, [r7, #32]
      break;
 8001ffa:	e002      	b.n	8002002 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ffc:	4b07      	ldr	r3, [pc, #28]	; (800201c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ffe:	623b      	str	r3, [r7, #32]
      break;
 8002000:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002002:	6a3b      	ldr	r3, [r7, #32]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3728      	adds	r7, #40	; 0x28
 8002008:	46bd      	mov	sp, r7
 800200a:	bc90      	pop	{r4, r7}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	0800afd0 	.word	0x0800afd0
 8002014:	0800afe0 	.word	0x0800afe0
 8002018:	40021000 	.word	0x40021000
 800201c:	007a1200 	.word	0x007a1200
 8002020:	003d0900 	.word	0x003d0900

08002024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002028:	4b02      	ldr	r3, [pc, #8]	; (8002034 <HAL_RCC_GetHCLKFreq+0x10>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr
 8002034:	20000008 	.word	0x20000008

08002038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800203c:	f7ff fff2 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 8002040:	4601      	mov	r1, r0
 8002042:	4b05      	ldr	r3, [pc, #20]	; (8002058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	0a1b      	lsrs	r3, r3, #8
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	4a03      	ldr	r2, [pc, #12]	; (800205c <HAL_RCC_GetPCLK1Freq+0x24>)
 800204e:	5cd3      	ldrb	r3, [r2, r3]
 8002050:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002054:	4618      	mov	r0, r3
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40021000 	.word	0x40021000
 800205c:	0800b0b8 	.word	0x0800b0b8

08002060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002064:	f7ff ffde 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 8002068:	4601      	mov	r1, r0
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	0adb      	lsrs	r3, r3, #11
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	4a03      	ldr	r2, [pc, #12]	; (8002084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002076:	5cd3      	ldrb	r3, [r2, r3]
 8002078:	fa21 f303 	lsr.w	r3, r1, r3
}
 800207c:	4618      	mov	r0, r3
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000
 8002084:	0800b0b8 	.word	0x0800b0b8

08002088 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002090:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <RCC_Delay+0x34>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <RCC_Delay+0x38>)
 8002096:	fba2 2303 	umull	r2, r3, r2, r3
 800209a:	0a5b      	lsrs	r3, r3, #9
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	fb02 f303 	mul.w	r3, r2, r3
 80020a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020a4:	bf00      	nop
  }
  while (Delay --);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1e5a      	subs	r2, r3, #1
 80020aa:	60fa      	str	r2, [r7, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1f9      	bne.n	80020a4 <RCC_Delay+0x1c>
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20000008 	.word	0x20000008
 80020c0:	10624dd3 	.word	0x10624dd3

080020c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e03f      	b.n	8002156 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d106      	bne.n	80020f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f006 f934 	bl	8008358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2224      	movs	r2, #36	; 0x24
 80020f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002106:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f90b 	bl	8002324 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800211c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695a      	ldr	r2, [r3, #20]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800212c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800213c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2220      	movs	r2, #32
 8002150:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b088      	sub	sp, #32
 8002162:	af02      	add	r7, sp, #8
 8002164:	60f8      	str	r0, [r7, #12]
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	603b      	str	r3, [r7, #0]
 800216a:	4613      	mov	r3, r2
 800216c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b20      	cmp	r3, #32
 800217c:	f040 8083 	bne.w	8002286 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d002      	beq.n	800218c <HAL_UART_Transmit+0x2e>
 8002186:	88fb      	ldrh	r3, [r7, #6]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e07b      	b.n	8002288 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_UART_Transmit+0x40>
 800219a:	2302      	movs	r3, #2
 800219c:	e074      	b.n	8002288 <HAL_UART_Transmit+0x12a>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2221      	movs	r2, #33	; 0x21
 80021b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80021b4:	f7ff f866 	bl	8001284 <HAL_GetTick>
 80021b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	88fa      	ldrh	r2, [r7, #6]
 80021be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	88fa      	ldrh	r2, [r7, #6]
 80021c4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80021c6:	e042      	b.n	800224e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	3b01      	subs	r3, #1
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021de:	d122      	bne.n	8002226 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2200      	movs	r2, #0
 80021e8:	2180      	movs	r1, #128	; 0x80
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 f850 	bl	8002290 <UART_WaitOnFlagUntilTimeout>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e046      	b.n	8002288 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800220c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d103      	bne.n	800221e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	3302      	adds	r3, #2
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	e017      	b.n	800224e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	3301      	adds	r3, #1
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	e013      	b.n	800224e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2200      	movs	r2, #0
 800222e:	2180      	movs	r1, #128	; 0x80
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 f82d 	bl	8002290 <UART_WaitOnFlagUntilTimeout>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e023      	b.n	8002288 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	60ba      	str	r2, [r7, #8]
 8002246:	781a      	ldrb	r2, [r3, #0]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002252:	b29b      	uxth	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1b7      	bne.n	80021c8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	2200      	movs	r2, #0
 8002260:	2140      	movs	r1, #64	; 0x40
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 f814 	bl	8002290 <UART_WaitOnFlagUntilTimeout>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e00a      	b.n	8002288 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2220      	movs	r2, #32
 8002276:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	e000      	b.n	8002288 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002286:	2302      	movs	r3, #2
  }
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	603b      	str	r3, [r7, #0]
 800229c:	4613      	mov	r3, r2
 800229e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022a0:	e02c      	b.n	80022fc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a8:	d028      	beq.n	80022fc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d007      	beq.n	80022c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80022b0:	f7fe ffe8 	bl	8001284 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d21d      	bcs.n	80022fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80022ce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0201 	bic.w	r2, r2, #1
 80022de:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2220      	movs	r2, #32
 80022e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e00f      	b.n	800231c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	4013      	ands	r3, r2
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	429a      	cmp	r2, r3
 800230a:	bf0c      	ite	eq
 800230c:	2301      	moveq	r3, #1
 800230e:	2300      	movne	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	461a      	mov	r2, r3
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	429a      	cmp	r2, r3
 8002318:	d0c3      	beq.n	80022a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	4313      	orrs	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800235e:	f023 030c 	bic.w	r3, r3, #12
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6812      	ldr	r2, [r2, #0]
 8002366:	68f9      	ldr	r1, [r7, #12]
 8002368:	430b      	orrs	r3, r1
 800236a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699a      	ldr	r2, [r3, #24]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a52      	ldr	r2, [pc, #328]	; (80024d0 <UART_SetConfig+0x1ac>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d14e      	bne.n	800242a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800238c:	f7ff fe68 	bl	8002060 <HAL_RCC_GetPCLK2Freq>
 8002390:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	009a      	lsls	r2, r3, #2
 800239c:	441a      	add	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a8:	4a4a      	ldr	r2, [pc, #296]	; (80024d4 <UART_SetConfig+0x1b0>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	0119      	lsls	r1, r3, #4
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	009a      	lsls	r2, r3, #2
 80023bc:	441a      	add	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80023c8:	4b42      	ldr	r3, [pc, #264]	; (80024d4 <UART_SetConfig+0x1b0>)
 80023ca:	fba3 0302 	umull	r0, r3, r3, r2
 80023ce:	095b      	lsrs	r3, r3, #5
 80023d0:	2064      	movs	r0, #100	; 0x64
 80023d2:	fb00 f303 	mul.w	r3, r0, r3
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	3332      	adds	r3, #50	; 0x32
 80023dc:	4a3d      	ldr	r2, [pc, #244]	; (80024d4 <UART_SetConfig+0x1b0>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023e8:	4419      	add	r1, r3
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	009a      	lsls	r2, r3, #2
 80023f4:	441a      	add	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002400:	4b34      	ldr	r3, [pc, #208]	; (80024d4 <UART_SetConfig+0x1b0>)
 8002402:	fba3 0302 	umull	r0, r3, r3, r2
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	2064      	movs	r0, #100	; 0x64
 800240a:	fb00 f303 	mul.w	r3, r0, r3
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	3332      	adds	r3, #50	; 0x32
 8002414:	4a2f      	ldr	r2, [pc, #188]	; (80024d4 <UART_SetConfig+0x1b0>)
 8002416:	fba2 2303 	umull	r2, r3, r2, r3
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	f003 020f 	and.w	r2, r3, #15
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	440a      	add	r2, r1
 8002426:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002428:	e04d      	b.n	80024c6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800242a:	f7ff fe05 	bl	8002038 <HAL_RCC_GetPCLK1Freq>
 800242e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	009a      	lsls	r2, r3, #2
 800243a:	441a      	add	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	fbb2 f3f3 	udiv	r3, r2, r3
 8002446:	4a23      	ldr	r2, [pc, #140]	; (80024d4 <UART_SetConfig+0x1b0>)
 8002448:	fba2 2303 	umull	r2, r3, r2, r3
 800244c:	095b      	lsrs	r3, r3, #5
 800244e:	0119      	lsls	r1, r3, #4
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	4613      	mov	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	009a      	lsls	r2, r3, #2
 800245a:	441a      	add	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	fbb2 f2f3 	udiv	r2, r2, r3
 8002466:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <UART_SetConfig+0x1b0>)
 8002468:	fba3 0302 	umull	r0, r3, r3, r2
 800246c:	095b      	lsrs	r3, r3, #5
 800246e:	2064      	movs	r0, #100	; 0x64
 8002470:	fb00 f303 	mul.w	r3, r0, r3
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	3332      	adds	r3, #50	; 0x32
 800247a:	4a16      	ldr	r2, [pc, #88]	; (80024d4 <UART_SetConfig+0x1b0>)
 800247c:	fba2 2303 	umull	r2, r3, r2, r3
 8002480:	095b      	lsrs	r3, r3, #5
 8002482:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002486:	4419      	add	r1, r3
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	009a      	lsls	r2, r3, #2
 8002492:	441a      	add	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	fbb2 f2f3 	udiv	r2, r2, r3
 800249e:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <UART_SetConfig+0x1b0>)
 80024a0:	fba3 0302 	umull	r0, r3, r3, r2
 80024a4:	095b      	lsrs	r3, r3, #5
 80024a6:	2064      	movs	r0, #100	; 0x64
 80024a8:	fb00 f303 	mul.w	r3, r0, r3
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	3332      	adds	r3, #50	; 0x32
 80024b2:	4a08      	ldr	r2, [pc, #32]	; (80024d4 <UART_SetConfig+0x1b0>)
 80024b4:	fba2 2303 	umull	r2, r3, r2, r3
 80024b8:	095b      	lsrs	r3, r3, #5
 80024ba:	f003 020f 	and.w	r2, r3, #15
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	440a      	add	r2, r1
 80024c4:	609a      	str	r2, [r3, #8]
}
 80024c6:	bf00      	nop
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40013800 	.word	0x40013800
 80024d4:	51eb851f 	.word	0x51eb851f

080024d8 <__Crash>:
#include "GameObject_Bullet.h"
#include "GameObject_Self.h"
#include "GameObject_Enemy.h"

bool __Crash(GameObject* obj1, GameObject* obj2)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
	float cdis = (float)(obj1->collider + obj2->collider);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	8a1b      	ldrh	r3, [r3, #16]
 80024e6:	461a      	mov	r2, r3
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	8a1b      	ldrh	r3, [r3, #16]
 80024ec:	4413      	add	r3, r2
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe fc10 	bl	8000d14 <__aeabi_i2f>
 80024f4:	4603      	mov	r3, r0
 80024f6:	60bb      	str	r3, [r7, #8]

	bool flag_1 = false;
 80024f8:	2300      	movs	r3, #0
 80024fa:	73fb      	strb	r3, [r7, #15]
	bool flag_2 = false;
 80024fc:	2300      	movs	r3, #0
 80024fe:	73bb      	strb	r3, [r7, #14]

	if (obj1->pos_x > obj2->pos_x)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	4619      	mov	r1, r3
 800250a:	4610      	mov	r0, r2
 800250c:	f7fe fe12 	bl	8001134 <__aeabi_fcmpgt>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d012      	beq.n	800253c <__Crash+0x64>
	{
		if (obj1->pos_x - obj2->pos_x < cdis)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	4619      	mov	r1, r3
 8002520:	4610      	mov	r0, r2
 8002522:	f7fe fb41 	bl	8000ba8 <__aeabi_fsub>
 8002526:	4603      	mov	r3, r0
 8002528:	4619      	mov	r1, r3
 800252a:	68b8      	ldr	r0, [r7, #8]
 800252c:	f7fe fe02 	bl	8001134 <__aeabi_fcmpgt>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d014      	beq.n	8002560 <__Crash+0x88>
			flag_1 = true;
 8002536:	2301      	movs	r3, #1
 8002538:	73fb      	strb	r3, [r7, #15]
 800253a:	e011      	b.n	8002560 <__Crash+0x88>
	}
	else
	{
		if (obj2->pos_x - obj1->pos_x < cdis)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4619      	mov	r1, r3
 8002546:	4610      	mov	r0, r2
 8002548:	f7fe fb2e 	bl	8000ba8 <__aeabi_fsub>
 800254c:	4603      	mov	r3, r0
 800254e:	4619      	mov	r1, r3
 8002550:	68b8      	ldr	r0, [r7, #8]
 8002552:	f7fe fdef 	bl	8001134 <__aeabi_fcmpgt>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <__Crash+0x88>
			flag_1 = true;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
	}

	if (obj1->pos_y > obj2->pos_y)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4619      	mov	r1, r3
 800256a:	4610      	mov	r0, r2
 800256c:	f7fe fde2 	bl	8001134 <__aeabi_fcmpgt>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d012      	beq.n	800259c <__Crash+0xc4>
	{
		if (obj1->pos_y - obj2->pos_y < cdis)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	4619      	mov	r1, r3
 8002580:	4610      	mov	r0, r2
 8002582:	f7fe fb11 	bl	8000ba8 <__aeabi_fsub>
 8002586:	4603      	mov	r3, r0
 8002588:	4619      	mov	r1, r3
 800258a:	68b8      	ldr	r0, [r7, #8]
 800258c:	f7fe fdd2 	bl	8001134 <__aeabi_fcmpgt>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d014      	beq.n	80025c0 <__Crash+0xe8>
			flag_2 = true;
 8002596:	2301      	movs	r3, #1
 8002598:	73bb      	strb	r3, [r7, #14]
 800259a:	e011      	b.n	80025c0 <__Crash+0xe8>
	}
	else
	{
		if (obj2->pos_y - obj1->pos_y < cdis)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	68da      	ldr	r2, [r3, #12]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4619      	mov	r1, r3
 80025a6:	4610      	mov	r0, r2
 80025a8:	f7fe fafe 	bl	8000ba8 <__aeabi_fsub>
 80025ac:	4603      	mov	r3, r0
 80025ae:	4619      	mov	r1, r3
 80025b0:	68b8      	ldr	r0, [r7, #8]
 80025b2:	f7fe fdbf 	bl	8001134 <__aeabi_fcmpgt>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <__Crash+0xe8>
			flag_2 = true;
 80025bc:	2301      	movs	r3, #1
 80025be:	73bb      	strb	r3, [r7, #14]
	}

	return flag_1 && flag_2;
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d004      	beq.n	80025d0 <__Crash+0xf8>
 80025c6:	7bbb      	ldrb	r3, [r7, #14]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <__Crash+0xf8>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <__Crash+0xfa>
 80025d0:	2300      	movs	r3, #0
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	b2db      	uxtb	r3, r3
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <__ObjectEvent_LoopOnce>:

unsigned __ObjectEvent_LoopOnce(LinkedList* events, bool is_bullet)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	70fb      	strb	r3, [r7, #3]
	unsigned i = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61fb      	str	r3, [r7, #28]
	Node *it, *it_temp;
	GameEvent *event;
	void *game_object;

	// object loop
	for (it = events->head->next; it; it = it->next)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	61bb      	str	r3, [r7, #24]
 80025f8:	e0a1      	b.n	800273e <__ObjectEvent_LoopOnce+0x15e>
	{
		event = ((GameEvent*)it->object);
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	613b      	str	r3, [r7, #16]
		game_object = event->game_object;
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	60fb      	str	r3, [r7, #12]

		// Create
		if (!((GameObject*)game_object)->__created)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	7f1b      	ldrb	r3, [r3, #28]
 800260a:	f083 0301 	eor.w	r3, r3, #1
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <__ObjectEvent_LoopOnce+0x3c>
		{
			event->OnCreate(game_object);
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	4798      	blx	r3
		}
		// Update
		event->OnUpdate(game_object);
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	4798      	blx	r3
		// Bullet crash
		if (is_bullet)
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d067      	beq.n	80026fa <__ObjectEvent_LoopOnce+0x11a>
		{
			if (((GameObject_Bullet*)game_object)->is_enemy)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002630:	2b00      	cmp	r3, #0
 8002632:	d026      	beq.n	8002682 <__ObjectEvent_LoopOnce+0xa2>
			{
				// Emeny bullet crash with self plane
				if (__Crash((GameObject*)game_object, (GameObject*)Engine_SelfEvent->game_object))
 8002634:	4b46      	ldr	r3, [pc, #280]	; (8002750 <__ObjectEvent_LoopOnce+0x170>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4619      	mov	r1, r3
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f7ff ff4b 	bl	80024d8 <__Crash>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d058      	beq.n	80026fa <__ObjectEvent_LoopOnce+0x11a>
				{
					((GameObject*)game_object)->__to_destroy = true;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2201      	movs	r2, #1
 800264c:	775a      	strb	r2, [r3, #29]
					if (
						((GameObject_Self*)Engine_SelfEvent->game_object)->life >
 800264e:	4b40      	ldr	r3, [pc, #256]	; (8002750 <__ObjectEvent_LoopOnce+0x170>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6a1a      	ldr	r2, [r3, #32]
						((GameObject_Bullet*)game_object)->damage
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6a1b      	ldr	r3, [r3, #32]
					if (
 800265a:	429a      	cmp	r2, r3
 800265c:	d90b      	bls.n	8002676 <__ObjectEvent_LoopOnce+0x96>
					)
						((GameObject_Self*)Engine_SelfEvent->game_object)->life -=
 800265e:	4b3c      	ldr	r3, [pc, #240]	; (8002750 <__ObjectEvent_LoopOnce+0x170>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6a19      	ldr	r1, [r3, #32]
						((GameObject_Bullet*)game_object)->damage;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6a1a      	ldr	r2, [r3, #32]
						((GameObject_Self*)Engine_SelfEvent->game_object)->life -=
 800266a:	4b39      	ldr	r3, [pc, #228]	; (8002750 <__ObjectEvent_LoopOnce+0x170>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	1a8a      	subs	r2, r1, r2
 8002672:	621a      	str	r2, [r3, #32]
 8002674:	e041      	b.n	80026fa <__ObjectEvent_LoopOnce+0x11a>
					else
					{
						((GameObject_Self*)Engine_SelfEvent->game_object)->life = 0;
 8002676:	4b36      	ldr	r3, [pc, #216]	; (8002750 <__ObjectEvent_LoopOnce+0x170>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2200      	movs	r2, #0
 800267e:	621a      	str	r2, [r3, #32]
 8002680:	e03b      	b.n	80026fa <__ObjectEvent_LoopOnce+0x11a>
				}	
			}
			else
			{
				// Self bullet crash with enemy plane
				for (it_temp = Engine_EnemyEvents.head->next; it_temp; it_temp = it_temp->next)
 8002682:	4b34      	ldr	r3, [pc, #208]	; (8002754 <__ObjectEvent_LoopOnce+0x174>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	e033      	b.n	80026f4 <__ObjectEvent_LoopOnce+0x114>
				{
					if (__Crash((GameObject*)game_object, (GameObject*)((GameEvent*)it_temp->object)->game_object))
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4619      	mov	r1, r3
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f7ff ff1f 	bl	80024d8 <__Crash>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d026      	beq.n	80026ee <__ObjectEvent_LoopOnce+0x10e>
					{
						((GameObject*)game_object)->__to_destroy = true;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2201      	movs	r2, #1
 80026a4:	775a      	strb	r2, [r3, #29]
						if (
							((GameObject_Enemy*)((GameEvent*)it_temp->object)->game_object)->life >
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6a1a      	ldr	r2, [r3, #32]
							((GameObject_Bullet*)game_object)->damage
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
						if (
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d90b      	bls.n	80026ce <__ObjectEvent_LoopOnce+0xee>
						)
							((GameObject_Enemy*)((GameEvent*)it_temp->object)->game_object)->life -=
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6a19      	ldr	r1, [r3, #32]
							((GameObject_Bullet*)game_object)->damage;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a1a      	ldr	r2, [r3, #32]
							((GameObject_Enemy*)((GameEvent*)it_temp->object)->game_object)->life -=
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	1a8a      	subs	r2, r1, r2
 80026ca:	621a      	str	r2, [r3, #32]
 80026cc:	e00f      	b.n	80026ee <__ObjectEvent_LoopOnce+0x10e>
						else if (((GameObject_Enemy*)((GameEvent*)it_temp->object)->game_object)->life)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d009      	beq.n	80026ee <__ObjectEvent_LoopOnce+0x10e>
						{
							((GameObject_Enemy*)((GameEvent*)it_temp->object)->game_object)->life = 0;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2200      	movs	r2, #0
 80026e2:	621a      	str	r2, [r3, #32]
							Game_KillCount++;
 80026e4:	4b1c      	ldr	r3, [pc, #112]	; (8002758 <__ObjectEvent_LoopOnce+0x178>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	3301      	adds	r3, #1
 80026ea:	4a1b      	ldr	r2, [pc, #108]	; (8002758 <__ObjectEvent_LoopOnce+0x178>)
 80026ec:	6013      	str	r3, [r2, #0]
				for (it_temp = Engine_EnemyEvents.head->next; it_temp; it_temp = it_temp->next)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1c8      	bne.n	800268c <__ObjectEvent_LoopOnce+0xac>
					}
				}
			}
		}
		// Destroy
		if (((GameObject*)game_object)->__to_destroy)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	7f5b      	ldrb	r3, [r3, #29]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d010      	beq.n	8002724 <__ObjectEvent_LoopOnce+0x144>
		{
			event->OnDestroy(game_object);
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	4798      	blx	r3

			free(event);
 800270a:	6938      	ldr	r0, [r7, #16]
 800270c:	f006 fbec 	bl	8008ee8 <free>
			it = it->prev;
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	61bb      	str	r3, [r7, #24]
			RemoveNode(events, it->next);
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	4619      	mov	r1, r3
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f006 f9ab 	bl	8008a78 <RemoveNode>
 8002722:	e009      	b.n	8002738 <__ObjectEvent_LoopOnce+0x158>
		}
		// Render
		else
		{
			event->OnRender(game_object, screen);
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	4a0c      	ldr	r2, [pc, #48]	; (800275c <__ObjectEvent_LoopOnce+0x17c>)
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	4611      	mov	r1, r2
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	4798      	blx	r3
			i++;
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3301      	adds	r3, #1
 8002736:	61fb      	str	r3, [r7, #28]
	for (it = events->head->next; it; it = it->next)
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	61bb      	str	r3, [r7, #24]
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	2b00      	cmp	r3, #0
 8002742:	f47f af5a 	bne.w	80025fa <__ObjectEvent_LoopOnce+0x1a>
		}
	}
	return i;
 8002746:	69fb      	ldr	r3, [r7, #28]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3720      	adds	r7, #32
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20000268 	.word	0x20000268
 8002754:	20000270 	.word	0x20000270
 8002758:	20000250 	.word	0x20000250
 800275c:	20000264 	.word	0x20000264

08002760 <GameEngineInit>:

void GameEngineInit()
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
	Game_Life = 3;
 8002764:	4b21      	ldr	r3, [pc, #132]	; (80027ec <GameEngineInit+0x8c>)
 8002766:	2203      	movs	r2, #3
 8002768:	601a      	str	r2, [r3, #0]
	Game_KillCount = 0;
 800276a:	4b21      	ldr	r3, [pc, #132]	; (80027f0 <GameEngineInit+0x90>)
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
	Game_Score = 0;
 8002770:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <GameEngineInit+0x94>)
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
	Game_BombNum = 0;
 8002776:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <GameEngineInit+0x98>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
	Game_ChapterNum = 0;
 800277c:	4b1f      	ldr	r3, [pc, #124]	; (80027fc <GameEngineInit+0x9c>)
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
	Game_ChapterPassed = false;
 8002782:	4b1f      	ldr	r3, [pc, #124]	; (8002800 <GameEngineInit+0xa0>)
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]

	Engine_KeyPressed = 0;
 8002788:	4b1e      	ldr	r3, [pc, #120]	; (8002804 <GameEngineInit+0xa4>)
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]

	Engine_EnemyEvents.head = malloc(sizeof(Node));
 800278e:	200c      	movs	r0, #12
 8002790:	f006 fba2 	bl	8008ed8 <malloc>
 8002794:	4603      	mov	r3, r0
 8002796:	461a      	mov	r2, r3
 8002798:	4b1b      	ldr	r3, [pc, #108]	; (8002808 <GameEngineInit+0xa8>)
 800279a:	601a      	str	r2, [r3, #0]
	Engine_EnemyEvents.head->next = NULL;
 800279c:	4b1a      	ldr	r3, [pc, #104]	; (8002808 <GameEngineInit+0xa8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2200      	movs	r2, #0
 80027a2:	609a      	str	r2, [r3, #8]
	Engine_EnemyEvents.tail = Engine_EnemyEvents.head;
 80027a4:	4b18      	ldr	r3, [pc, #96]	; (8002808 <GameEngineInit+0xa8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a17      	ldr	r2, [pc, #92]	; (8002808 <GameEngineInit+0xa8>)
 80027aa:	6053      	str	r3, [r2, #4]

	Engine_BulletEvents.head = malloc(sizeof(Node));
 80027ac:	200c      	movs	r0, #12
 80027ae:	f006 fb93 	bl	8008ed8 <malloc>
 80027b2:	4603      	mov	r3, r0
 80027b4:	461a      	mov	r2, r3
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <GameEngineInit+0xac>)
 80027b8:	601a      	str	r2, [r3, #0]
	Engine_BulletEvents.head->next = NULL;
 80027ba:	4b14      	ldr	r3, [pc, #80]	; (800280c <GameEngineInit+0xac>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2200      	movs	r2, #0
 80027c0:	609a      	str	r2, [r3, #8]
	Engine_BulletEvents.tail = Engine_BulletEvents.head;
 80027c2:	4b12      	ldr	r3, [pc, #72]	; (800280c <GameEngineInit+0xac>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a11      	ldr	r2, [pc, #68]	; (800280c <GameEngineInit+0xac>)
 80027c8:	6053      	str	r3, [r2, #4]

	Engine_UIEvents.head = malloc(sizeof(Node));
 80027ca:	200c      	movs	r0, #12
 80027cc:	f006 fb84 	bl	8008ed8 <malloc>
 80027d0:	4603      	mov	r3, r0
 80027d2:	461a      	mov	r2, r3
 80027d4:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <GameEngineInit+0xb0>)
 80027d6:	601a      	str	r2, [r3, #0]
	Engine_UIEvents.head->next = NULL;
 80027d8:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <GameEngineInit+0xb0>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2200      	movs	r2, #0
 80027de:	609a      	str	r2, [r3, #8]
	Engine_UIEvents.tail = Engine_UIEvents.head;
 80027e0:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <GameEngineInit+0xb0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a0a      	ldr	r2, [pc, #40]	; (8002810 <GameEngineInit+0xb0>)
 80027e6:	6053      	str	r3, [r2, #4]
}
 80027e8:	bf00      	nop
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	20000258 	.word	0x20000258
 80027f0:	20000250 	.word	0x20000250
 80027f4:	2000026c 	.word	0x2000026c
 80027f8:	20000280 	.word	0x20000280
 80027fc:	20000278 	.word	0x20000278
 8002800:	20000284 	.word	0x20000284
 8002804:	20000254 	.word	0x20000254
 8002808:	20000270 	.word	0x20000270
 800280c:	20000288 	.word	0x20000288
 8002810:	2000025c 	.word	0x2000025c

08002814 <GameEngineLoop>:

void GameEngineLoop(void (*OnLoop)(void))
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
	Node *it;
	void *self_object;
	unsigned i, j;

	Time_OnStart();
 800281c:	f006 face 	bl	8008dbc <Time_OnStart>

	while (!Game_ChapterPassed)
 8002820:	e08d      	b.n	800293e <GameEngineLoop+0x12a>
	{
		// init
		i = 0; j = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
		screen = InitScreen(screen);
 800282a:	4b50      	ldr	r3, [pc, #320]	; (800296c <GameEngineLoop+0x158>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f006 fa0c 	bl	8008c4c <InitScreen>
 8002834:	4602      	mov	r2, r0
 8002836:	4b4d      	ldr	r3, [pc, #308]	; (800296c <GameEngineLoop+0x158>)
 8002838:	601a      	str	r2, [r3, #0]
		Time_OnUpdate();
 800283a:	f006 facb 	bl	8008dd4 <Time_OnUpdate>

		// Event on loop
		OnLoop();
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4798      	blx	r3
		
		// freshing self plane
		if (Engine_SelfEvent)
 8002842:	4b4b      	ldr	r3, [pc, #300]	; (8002970 <GameEngineLoop+0x15c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d03c      	beq.n	80028c4 <GameEngineLoop+0xb0>
		{
			self_object = Engine_SelfEvent->game_object;
 800284a:	4b49      	ldr	r3, [pc, #292]	; (8002970 <GameEngineLoop+0x15c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	60bb      	str	r3, [r7, #8]

			// Create
			if (!((GameObject*)self_object)->__created)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	7f1b      	ldrb	r3, [r3, #28]
 8002856:	f083 0301 	eor.w	r3, r3, #1
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d004      	beq.n	800286a <GameEngineLoop+0x56>
			{
				Engine_SelfEvent->OnCreate(self_object);
 8002860:	4b43      	ldr	r3, [pc, #268]	; (8002970 <GameEngineLoop+0x15c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	68b8      	ldr	r0, [r7, #8]
 8002868:	4798      	blx	r3
			}
			// Update
			Engine_SelfEvent->OnUpdate(self_object);
 800286a:	4b41      	ldr	r3, [pc, #260]	; (8002970 <GameEngineLoop+0x15c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	68b8      	ldr	r0, [r7, #8]
 8002872:	4798      	blx	r3
			// Destroy
			if (((GameObject*)self_object)->__to_destroy)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	7f5b      	ldrb	r3, [r3, #29]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d017      	beq.n	80028ac <GameEngineLoop+0x98>
			{
				Engine_SelfEvent->OnDestroy(self_object);
 800287c:	4b3c      	ldr	r3, [pc, #240]	; (8002970 <GameEngineLoop+0x15c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	68b8      	ldr	r0, [r7, #8]
 8002884:	4798      	blx	r3
				
				if (!Game_Life)
 8002886:	4b3b      	ldr	r3, [pc, #236]	; (8002974 <GameEngineLoop+0x160>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d108      	bne.n	80028a0 <GameEngineLoop+0x8c>
				{
					free(Engine_SelfEvent);
 800288e:	4b38      	ldr	r3, [pc, #224]	; (8002970 <GameEngineLoop+0x15c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f006 fb28 	bl	8008ee8 <free>
					Engine_SelfEvent = NULL;
 8002898:	4b35      	ldr	r3, [pc, #212]	; (8002970 <GameEngineLoop+0x15c>)
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	e014      	b.n	80028ca <GameEngineLoop+0xb6>
				}
				else
				{
					Game_Life--;
 80028a0:	4b34      	ldr	r3, [pc, #208]	; (8002974 <GameEngineLoop+0x160>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	4a33      	ldr	r2, [pc, #204]	; (8002974 <GameEngineLoop+0x160>)
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	e00e      	b.n	80028ca <GameEngineLoop+0xb6>
				}
			}
			// Render
			else
			{
				Engine_SelfEvent->OnRender(self_object, screen);
 80028ac:	4b30      	ldr	r3, [pc, #192]	; (8002970 <GameEngineLoop+0x15c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	4a2e      	ldr	r2, [pc, #184]	; (800296c <GameEngineLoop+0x158>)
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	4611      	mov	r1, r2
 80028b8:	68b8      	ldr	r0, [r7, #8]
 80028ba:	4798      	blx	r3
				i++;
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	3301      	adds	r3, #1
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	e002      	b.n	80028ca <GameEngineLoop+0xb6>
			}
		}
		else
		{
			GameOver();
 80028c4:	f000 f866 	bl	8002994 <GameOver>
			break;
 80028c8:	e043      	b.n	8002952 <GameEngineLoop+0x13e>
		}

		// object loops
		i += __ObjectEvent_LoopOnce(&Engine_EnemyEvents, false);
 80028ca:	2100      	movs	r1, #0
 80028cc:	482a      	ldr	r0, [pc, #168]	; (8002978 <GameEngineLoop+0x164>)
 80028ce:	f7ff fe87 	bl	80025e0 <__ObjectEvent_LoopOnce>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4413      	add	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
		i += __ObjectEvent_LoopOnce(&Engine_BulletEvents, true);
 80028da:	2101      	movs	r1, #1
 80028dc:	4827      	ldr	r0, [pc, #156]	; (800297c <GameEngineLoop+0x168>)
 80028de:	f7ff fe7f 	bl	80025e0 <__ObjectEvent_LoopOnce>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4413      	add	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
		// UI loop
		for (it = Engine_UIEvents.head->next; it; it = it->next)
 80028ea:	4b25      	ldr	r3, [pc, #148]	; (8002980 <GameEngineLoop+0x16c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	e005      	b.n	8002900 <GameEngineLoop+0xec>
		{
			j++;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	3301      	adds	r3, #1
 80028f8:	60fb      	str	r3, [r7, #12]
		for (it = Engine_UIEvents.head->next; it; it = it->next)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f6      	bne.n	80028f4 <GameEngineLoop+0xe0>
			// TODO
		}
		
		// Reset
		if (!GetTime()%8)
 8002906:	f006 fa4d 	bl	8008da4 <GetTime>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d102      	bne.n	8002916 <GameEngineLoop+0x102>
			Engine_KeyPressed = 0;
 8002910:	4b1c      	ldr	r3, [pc, #112]	; (8002984 <GameEngineLoop+0x170>)
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
		// Flush
		screen = Flush(screen);
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <GameEngineLoop+0x158>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f006 f9d8 	bl	8008cd0 <Flush>
 8002920:	4602      	mov	r2, r0
 8002922:	4b12      	ldr	r3, [pc, #72]	; (800296c <GameEngineLoop+0x158>)
 8002924:	601a      	str	r2, [r3, #0]

		if (Game_ChapterPassed)
 8002926:	4b18      	ldr	r3, [pc, #96]	; (8002988 <GameEngineLoop+0x174>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d110      	bne.n	8002950 <GameEngineLoop+0x13c>
			break;

		printlnf("Time: %d, %u gameobject and %u UI freshed", GetTime(), i, j);
 800292e:	f006 fa39 	bl	8008da4 <GetTime>
 8002932:	4601      	mov	r1, r0
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4814      	ldr	r0, [pc, #80]	; (800298c <GameEngineLoop+0x178>)
 800293a:	f005 fbf7 	bl	800812c <printlnf>
	while (!Game_ChapterPassed)
 800293e:	4b12      	ldr	r3, [pc, #72]	; (8002988 <GameEngineLoop+0x174>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	f083 0301 	eor.w	r3, r3, #1
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	f47f af6a 	bne.w	8002822 <GameEngineLoop+0xe>
 800294e:	e000      	b.n	8002952 <GameEngineLoop+0x13e>
			break;
 8002950:	bf00      	nop
	}

	Game_ChapterNum++;
 8002952:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <GameEngineLoop+0x17c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	3301      	adds	r3, #1
 8002958:	4a0d      	ldr	r2, [pc, #52]	; (8002990 <GameEngineLoop+0x17c>)
 800295a:	6013      	str	r3, [r2, #0]
	Game_ChapterPassed = false;
 800295c:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <GameEngineLoop+0x174>)
 800295e:	2200      	movs	r2, #0
 8002960:	701a      	strb	r2, [r3, #0]
}
 8002962:	bf00      	nop
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20000264 	.word	0x20000264
 8002970:	20000268 	.word	0x20000268
 8002974:	20000258 	.word	0x20000258
 8002978:	20000270 	.word	0x20000270
 800297c:	20000288 	.word	0x20000288
 8002980:	2000025c 	.word	0x2000025c
 8002984:	20000254 	.word	0x20000254
 8002988:	20000284 	.word	0x20000284
 800298c:	0800afe4 	.word	0x0800afe4
 8002990:	20000278 	.word	0x20000278

08002994 <GameOver>:

void GameOver()
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
	
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr

080029a0 <RegistGameEvent>:
	void* game_object,
	void (*OnCreate)(void*),
	void (*OnUpdate)(void*),
	void (*OnDestroy)(void*),
	void (*OnRender)(void*, Color**)
){
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	603b      	str	r3, [r7, #0]
	GameEvent* ge = malloc(sizeof(GameEvent));
 80029ae:	2014      	movs	r0, #20
 80029b0:	f006 fa92 	bl	8008ed8 <malloc>
 80029b4:	4603      	mov	r3, r0
 80029b6:	617b      	str	r3, [r7, #20]

	ge->game_object = game_object;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	601a      	str	r2, [r3, #0]
	ge->OnCreate = OnCreate;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	605a      	str	r2, [r3, #4]
	ge->OnUpdate = OnUpdate;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	609a      	str	r2, [r3, #8]
	ge->OnDestroy = OnDestroy;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	60da      	str	r2, [r3, #12]
	ge->OnRender = OnRender;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	6a3a      	ldr	r2, [r7, #32]
 80029d4:	611a      	str	r2, [r3, #16]

	return ge;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <GameObject_Initialize>:
void GameObject_Initialize
(
	GameObject* self, uint16_t pos_x, uint16_t pos_y, 
	uint16_t collider, uint16_t width, uint16_t height,
	Color* img
){
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	4608      	mov	r0, r1
 80029ea:	4611      	mov	r1, r2
 80029ec:	461a      	mov	r2, r3
 80029ee:	4603      	mov	r3, r0
 80029f0:	817b      	strh	r3, [r7, #10]
 80029f2:	460b      	mov	r3, r1
 80029f4:	813b      	strh	r3, [r7, #8]
 80029f6:	4613      	mov	r3, r2
 80029f8:	80fb      	strh	r3, [r7, #6]
	self->speed_x = 0.0f;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
	self->speed_y = 0.0f;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	605a      	str	r2, [r3, #4]
	self->pos_x = (float)pos_x;
 8002a0a:	897b      	ldrh	r3, [r7, #10]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fe f97d 	bl	8000d0c <__aeabi_ui2f>
 8002a12:	4602      	mov	r2, r0
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	609a      	str	r2, [r3, #8]
	self->pos_y = (float)pos_y;
 8002a18:	893b      	ldrh	r3, [r7, #8]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe f976 	bl	8000d0c <__aeabi_ui2f>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	60da      	str	r2, [r3, #12]
	self->collider = collider;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	88fa      	ldrh	r2, [r7, #6]
 8002a2a:	821a      	strh	r2, [r3, #16]
	self->width = width;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8b3a      	ldrh	r2, [r7, #24]
 8002a30:	825a      	strh	r2, [r3, #18]
	self->height = height;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8bba      	ldrh	r2, [r7, #28]
 8002a36:	829a      	strh	r2, [r3, #20]
	self->img = img;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a3a      	ldr	r2, [r7, #32]
 8002a3c:	619a      	str	r2, [r3, #24]
	self->__created = false;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	771a      	strb	r2, [r3, #28]
	self->__to_destroy = false;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	775a      	strb	r2, [r3, #29]
}
 8002a4a:	bf00      	nop
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <GameObject_OnCreate>:

void inline GameObject_OnCreate(GameObject* self)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
	self->__created = true;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	771a      	strb	r2, [r3, #28]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr
	...

08002a6c <GameObject_OnUpdate>:

void inline GameObject_OnUpdate(GameObject* self)
{
 8002a6c:	b5b0      	push	{r4, r5, r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
	self->pos_x += self->speed_x * delta_time;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689c      	ldr	r4, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681d      	ldr	r5, [r3, #0]
 8002a7c:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <GameObject_OnUpdate+0x6c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fe f947 	bl	8000d14 <__aeabi_i2f>
 8002a86:	4603      	mov	r3, r0
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4628      	mov	r0, r5
 8002a8c:	f7fe f996 	bl	8000dbc <__aeabi_fmul>
 8002a90:	4603      	mov	r3, r0
 8002a92:	4619      	mov	r1, r3
 8002a94:	4620      	mov	r0, r4
 8002a96:	f7fe f889 	bl	8000bac <__addsf3>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	609a      	str	r2, [r3, #8]
	self->pos_y += self->speed_y * delta_time;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68dc      	ldr	r4, [r3, #12]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685d      	ldr	r5, [r3, #4]
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <GameObject_OnUpdate+0x6c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe f930 	bl	8000d14 <__aeabi_i2f>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4628      	mov	r0, r5
 8002aba:	f7fe f97f 	bl	8000dbc <__aeabi_fmul>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	f7fe f872 	bl	8000bac <__addsf3>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	461a      	mov	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	60da      	str	r2, [r3, #12]
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ad8:	2000027c 	.word	0x2000027c

08002adc <GameObject_OnRender>:

void inline GameObject_OnRender(GameObject* self, Color** screen)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
	Render(self, screen);
 8002ae6:	6839      	ldr	r1, [r7, #0]
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f005 ffe9 	bl	8008ac0 <Render>
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <GameObject_Bullet_Init>:
	float speed_x, float speed_y,
	uint16_t collider,
	uint16_t width, uint16_t height,
	Color* img,
	bool is_enemy
){
 8002af6:	b590      	push	{r4, r7, lr}
 8002af8:	b089      	sub	sp, #36	; 0x24
 8002afa:	af04      	add	r7, sp, #16
 8002afc:	60f8      	str	r0, [r7, #12]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	461a      	mov	r2, r3
 8002b02:	460b      	mov	r3, r1
 8002b04:	817b      	strh	r3, [r7, #10]
 8002b06:	4613      	mov	r3, r2
 8002b08:	813b      	strh	r3, [r7, #8]
	GameObject_Initialize(
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	8dbc      	ldrh	r4, [r7, #44]	; 0x2c
 8002b0e:	8c3a      	ldrh	r2, [r7, #32]
 8002b10:	8939      	ldrh	r1, [r7, #8]
 8002b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b14:	9302      	str	r3, [sp, #8]
 8002b16:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002b18:	9301      	str	r3, [sp, #4]
 8002b1a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	4623      	mov	r3, r4
 8002b20:	f7ff ff5e 	bl	80029e0 <GameObject_Initialize>
		pos_x, pos_y,
		collider,
		width, height,
		img
	);
	self->ttl = ttl;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	897a      	ldrh	r2, [r7, #10]
 8002b28:	849a      	strh	r2, [r3, #36]	; 0x24
	self->damage = damage;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	621a      	str	r2, [r3, #32]
	self->base.speed_x = speed_x;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b34:	601a      	str	r2, [r3, #0]
	self->base.speed_y = speed_y;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b3a:	605a      	str	r2, [r3, #4]
	self->is_enemy = is_enemy;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8002b42:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8002b46:	bf00      	nop
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd90      	pop	{r4, r7, pc}

08002b4e <GameObject_Bullet_OnCreate>:

void inline GameObject_Bullet_OnCreate(GameObject_Bullet* self)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
	GameObject_OnCreate(&self->base);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff ff7a 	bl	8002a52 <GameObject_OnCreate>
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <GameObject_Bullet_OnUpdate>:

void inline GameObject_Bullet_OnUpdate(GameObject_Bullet* self)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
	// 	printlnf("to destroy");
	// printlnf("location of father object: %d", &self->base);
	// if (((GameObject*)self)->__to_destroy)
	// 	printlnf("to destroy");
	
	if (!self->ttl)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d103      	bne.n	8002b7e <GameObject_Bullet_OnUpdate+0x18>
		self->base.__to_destroy = true;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	775a      	strb	r2, [r3, #29]
 8002b7c:	e005      	b.n	8002b8a <GameObject_Bullet_OnUpdate+0x24>
	else
		self->ttl -= 1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	849a      	strh	r2, [r3, #36]	; 0x24
	GameObject_OnUpdate(&self->base);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff ff6d 	bl	8002a6c <GameObject_OnUpdate>
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <GameObject_Bullet_OnRender>:

void inline GameObject_Bullet_OnRender(GameObject_Bullet* self, Color** screen)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	6039      	str	r1, [r7, #0]
	GameObject_OnRender(&self->base, screen);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6839      	ldr	r1, [r7, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff ff97 	bl	8002adc <GameObject_OnRender>
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <GameObject_Enemy_Init>:
	unsigned life,
	uint16_t pos_x, uint16_t pos_y, 
	uint16_t collider,
	uint16_t width, uint16_t height,
	Color* img
){
 8002bb6:	b590      	push	{r4, r7, lr}
 8002bb8:	b089      	sub	sp, #36	; 0x24
 8002bba:	af04      	add	r7, sp, #16
 8002bbc:	60f8      	str	r0, [r7, #12]
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	80fb      	strh	r3, [r7, #6]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	80bb      	strh	r3, [r7, #4]
	GameObject_Initialize(
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	8c3c      	ldrh	r4, [r7, #32]
 8002bd0:	88ba      	ldrh	r2, [r7, #4]
 8002bd2:	88f9      	ldrh	r1, [r7, #6]
 8002bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd6:	9302      	str	r3, [sp, #8]
 8002bd8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002bda:	9301      	str	r3, [sp, #4]
 8002bdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	4623      	mov	r3, r4
 8002be2:	f7ff fefd 	bl	80029e0 <GameObject_Initialize>
		pos_x, pos_y,
		collider,
		width, height,
		img
	);
	self->life = life;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	621a      	str	r2, [r3, #32]
}
 8002bec:	bf00      	nop
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd90      	pop	{r4, r7, pc}

08002bf4 <GameObject_Enemy_OnCreate>:

void inline GameObject_Enemy_OnCreate(GameObject_Enemy* self)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
	GameObject_OnCreate(&self->base);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff ff27 	bl	8002a52 <GameObject_OnCreate>
}
 8002c04:	bf00      	nop
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <GameObject_Enemy_OnUpdate>:

void inline GameObject_Enemy_OnUpdate(GameObject_Enemy* self)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
	if (!self->life)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d102      	bne.n	8002c22 <GameObject_Enemy_OnUpdate+0x16>
		self->base.__to_destroy = true;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	775a      	strb	r2, [r3, #29]
	GameObject_OnUpdate(&self->base);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff ff21 	bl	8002a6c <GameObject_OnUpdate>
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <GameObject_Enemy_OnRender>:

void inline GameObject_Enemy_OnRender(GameObject_Enemy* self, Color** screen)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	6039      	str	r1, [r7, #0]
	GameObject_OnRender(&self->base, screen);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6839      	ldr	r1, [r7, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff ff4b 	bl	8002adc <GameObject_OnRender>
}
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <GameObject_Self_Init>:
	unsigned life,
	uint16_t pos_x, uint16_t pos_y, 
	uint16_t collider,
	uint16_t width, uint16_t height,
	Color* img
){
 8002c4e:	b590      	push	{r4, r7, lr}
 8002c50:	b089      	sub	sp, #36	; 0x24
 8002c52:	af04      	add	r7, sp, #16
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	4611      	mov	r1, r2
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	80fb      	strh	r3, [r7, #6]
 8002c60:	4613      	mov	r3, r2
 8002c62:	80bb      	strh	r3, [r7, #4]
	self->life = life;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	621a      	str	r2, [r3, #32]
	GameObject_Initialize(
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	8c3c      	ldrh	r4, [r7, #32]
 8002c6e:	88ba      	ldrh	r2, [r7, #4]
 8002c70:	88f9      	ldrh	r1, [r7, #6]
 8002c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c74:	9302      	str	r3, [sp, #8]
 8002c76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002c78:	9301      	str	r3, [sp, #4]
 8002c7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	4623      	mov	r3, r4
 8002c80:	f7ff feae 	bl	80029e0 <GameObject_Initialize>
		pos_x, pos_y,
		collider,
		width, height,
		img
	);
}
 8002c84:	bf00      	nop
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd90      	pop	{r4, r7, pc}

08002c8c <GameObject_Self_OnCreate>:

void inline GameObject_Self_OnCreate(GameObject_Self* self)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
	GameObject_OnCreate(&self->base);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff fedb 	bl	8002a52 <GameObject_OnCreate>
}
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <GameObject_Self_OnUpdate>:

void inline GameObject_Self_OnUpdate(GameObject_Self* self)
{
 8002ca4:	b5b0      	push	{r4, r5, r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
	if (Engine_KeyPressed > 0)
 8002cac:	4b25      	ldr	r3, [pc, #148]	; (8002d44 <GameObject_Self_OnUpdate+0xa0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	dd03      	ble.n	8002cbc <GameObject_Self_OnUpdate+0x18>
		self->base.speed_x = -0.7f;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a24      	ldr	r2, [pc, #144]	; (8002d48 <GameObject_Self_OnUpdate+0xa4>)
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	e00b      	b.n	8002cd4 <GameObject_Self_OnUpdate+0x30>
	else if (Engine_KeyPressed < 0)
 8002cbc:	4b21      	ldr	r3, [pc, #132]	; (8002d44 <GameObject_Self_OnUpdate+0xa0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	da03      	bge.n	8002ccc <GameObject_Self_OnUpdate+0x28>
		self->base.speed_x = 0.7f;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a21      	ldr	r2, [pc, #132]	; (8002d4c <GameObject_Self_OnUpdate+0xa8>)
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	e003      	b.n	8002cd4 <GameObject_Self_OnUpdate+0x30>
	else
		self->base.speed_x = 0.0f;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]

	self->base.pos_x += self->base.speed_x * delta_time;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689c      	ldr	r4, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681d      	ldr	r5, [r3, #0]
 8002cdc:	4b1c      	ldr	r3, [pc, #112]	; (8002d50 <GameObject_Self_OnUpdate+0xac>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fe f817 	bl	8000d14 <__aeabi_i2f>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4628      	mov	r0, r5
 8002cec:	f7fe f866 	bl	8000dbc <__aeabi_fmul>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	f7fd ff59 	bl	8000bac <__addsf3>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	609a      	str	r2, [r3, #8]
	
	if (self->base.pos_x < 0)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f04f 0100 	mov.w	r1, #0
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe f9f4 	bl	80010f8 <__aeabi_fcmplt>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d004      	beq.n	8002d20 <GameObject_Self_OnUpdate+0x7c>
		self->base.pos_x = 0;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
	else if (self->base.pos_x >= __WIDTH)
		self->base.pos_x = __WIDTH - 1;
}
 8002d1e:	e00c      	b.n	8002d3a <GameObject_Self_OnUpdate+0x96>
	else if (self->base.pos_x >= __WIDTH)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	490b      	ldr	r1, [pc, #44]	; (8002d54 <GameObject_Self_OnUpdate+0xb0>)
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe f9fa 	bl	8001120 <__aeabi_fcmpge>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d100      	bne.n	8002d34 <GameObject_Self_OnUpdate+0x90>
}
 8002d32:	e002      	b.n	8002d3a <GameObject_Self_OnUpdate+0x96>
		self->base.pos_x = __WIDTH - 1;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a08      	ldr	r2, [pc, #32]	; (8002d58 <GameObject_Self_OnUpdate+0xb4>)
 8002d38:	609a      	str	r2, [r3, #8]
}
 8002d3a:	bf00      	nop
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bdb0      	pop	{r4, r5, r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000254 	.word	0x20000254
 8002d48:	bf333333 	.word	0xbf333333
 8002d4c:	3f333333 	.word	0x3f333333
 8002d50:	2000027c 	.word	0x2000027c
 8002d54:	42640000 	.word	0x42640000
 8002d58:	42600000 	.word	0x42600000

08002d5c <GameObject_Self_OnRender>:

void inline GameObject_Self_OnRender(GameObject_Self* self, Color** screen)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
	GameObject_OnRender(&self->base, screen);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6839      	ldr	r1, [r7, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff feb6 	bl	8002adc <GameObject_OnRender>
}
 8002d70:	bf00      	nop
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d7e:	f107 0310 	add.w	r3, r7, #16
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	605a      	str	r2, [r3, #4]
 8002d88:	609a      	str	r2, [r3, #8]
 8002d8a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d8c:	4b46      	ldr	r3, [pc, #280]	; (8002ea8 <MX_GPIO_Init+0x130>)
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	4a45      	ldr	r2, [pc, #276]	; (8002ea8 <MX_GPIO_Init+0x130>)
 8002d92:	f043 0320 	orr.w	r3, r3, #32
 8002d96:	6193      	str	r3, [r2, #24]
 8002d98:	4b43      	ldr	r3, [pc, #268]	; (8002ea8 <MX_GPIO_Init+0x130>)
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da4:	4b40      	ldr	r3, [pc, #256]	; (8002ea8 <MX_GPIO_Init+0x130>)
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	4a3f      	ldr	r2, [pc, #252]	; (8002ea8 <MX_GPIO_Init+0x130>)
 8002daa:	f043 0304 	orr.w	r3, r3, #4
 8002dae:	6193      	str	r3, [r2, #24]
 8002db0:	4b3d      	ldr	r3, [pc, #244]	; (8002ea8 <MX_GPIO_Init+0x130>)
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dbc:	4b3a      	ldr	r3, [pc, #232]	; (8002ea8 <MX_GPIO_Init+0x130>)
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	4a39      	ldr	r2, [pc, #228]	; (8002ea8 <MX_GPIO_Init+0x130>)
 8002dc2:	f043 0310 	orr.w	r3, r3, #16
 8002dc6:	6193      	str	r3, [r2, #24]
 8002dc8:	4b37      	ldr	r3, [pc, #220]	; (8002ea8 <MX_GPIO_Init+0x130>)
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	f003 0310 	and.w	r3, r3, #16
 8002dd0:	607b      	str	r3, [r7, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002dda:	4834      	ldr	r0, [pc, #208]	; (8002eac <MX_GPIO_Init+0x134>)
 8002ddc:	f7fe fd0d 	bl	80017fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002de0:	2200      	movs	r2, #0
 8002de2:	2104      	movs	r1, #4
 8002de4:	4832      	ldr	r0, [pc, #200]	; (8002eb0 <MX_GPIO_Init+0x138>)
 8002de6:	f7fe fd08 	bl	80017fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_WK_Pin;
 8002dea:	2301      	movs	r3, #1
 8002dec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002dee:	4b31      	ldr	r3, [pc, #196]	; (8002eb4 <MX_GPIO_Init+0x13c>)
 8002df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002df2:	2302      	movs	r3, #2
 8002df4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_WK_GPIO_Port, &GPIO_InitStruct);
 8002df6:	f107 0310 	add.w	r3, r7, #16
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	482b      	ldr	r0, [pc, #172]	; (8002eac <MX_GPIO_Init+0x134>)
 8002dfe:	f7fe fb7b 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 8002e02:	2320      	movs	r3, #32
 8002e04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e06:	4b2b      	ldr	r3, [pc, #172]	; (8002eb4 <MX_GPIO_Init+0x13c>)
 8002e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 8002e0e:	f107 0310 	add.w	r3, r7, #16
 8002e12:	4619      	mov	r1, r3
 8002e14:	4828      	ldr	r0, [pc, #160]	; (8002eb8 <MX_GPIO_Init+0x140>)
 8002e16:	f7fe fb6f 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8002e1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e20:	2301      	movs	r3, #1
 8002e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e28:	2302      	movs	r3, #2
 8002e2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8002e2c:	f107 0310 	add.w	r3, r7, #16
 8002e30:	4619      	mov	r1, r3
 8002e32:	481e      	ldr	r0, [pc, #120]	; (8002eac <MX_GPIO_Init+0x134>)
 8002e34:	f7fe fb60 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8002e38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e3e:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <MX_GPIO_Init+0x13c>)
 8002e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e42:	2301      	movs	r3, #1
 8002e44:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8002e46:	f107 0310 	add.w	r3, r7, #16
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4817      	ldr	r0, [pc, #92]	; (8002eac <MX_GPIO_Init+0x134>)
 8002e4e:	f7fe fb53 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8002e52:	2304      	movs	r3, #4
 8002e54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e56:	2301      	movs	r3, #1
 8002e58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002e62:	f107 0310 	add.w	r3, r7, #16
 8002e66:	4619      	mov	r1, r3
 8002e68:	4811      	ldr	r0, [pc, #68]	; (8002eb0 <MX_GPIO_Init+0x138>)
 8002e6a:	f7fe fb45 	bl	80014f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8002e6e:	2200      	movs	r2, #0
 8002e70:	2101      	movs	r1, #1
 8002e72:	2006      	movs	r0, #6
 8002e74:	f7fe fb09 	bl	800148a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002e78:	2006      	movs	r0, #6
 8002e7a:	f7fe fb22 	bl	80014c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1);
 8002e7e:	2201      	movs	r2, #1
 8002e80:	2101      	movs	r1, #1
 8002e82:	2017      	movs	r0, #23
 8002e84:	f7fe fb01 	bl	800148a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002e88:	2017      	movs	r0, #23
 8002e8a:	f7fe fb1a 	bl	80014c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 2);
 8002e8e:	2202      	movs	r2, #2
 8002e90:	2101      	movs	r1, #1
 8002e92:	2028      	movs	r0, #40	; 0x28
 8002e94:	f7fe faf9 	bl	800148a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e98:	2028      	movs	r0, #40	; 0x28
 8002e9a:	f7fe fb12 	bl	80014c2 <HAL_NVIC_EnableIRQ>

}
 8002e9e:	bf00      	nop
 8002ea0:	3720      	adds	r7, #32
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	40010800 	.word	0x40010800
 8002eb0:	40011400 	.word	0x40011400
 8002eb4:	10110000 	.word	0x10110000
 8002eb8:	40011000 	.word	0x40011000

08002ebc <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8002ec6:	4b0d      	ldr	r3, [pc, #52]	; (8002efc <LCD_WR_REG+0x40>)
 8002ec8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ecc:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8002ece:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <LCD_WR_REG+0x40>)
 8002ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ed4:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8002ed6:	4a0a      	ldr	r2, [pc, #40]	; (8002f00 <LCD_WR_REG+0x44>)
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8002edc:	4b07      	ldr	r3, [pc, #28]	; (8002efc <LCD_WR_REG+0x40>)
 8002ede:	2280      	movs	r2, #128	; 0x80
 8002ee0:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8002ee2:	4b06      	ldr	r3, [pc, #24]	; (8002efc <LCD_WR_REG+0x40>)
 8002ee4:	2280      	movs	r2, #128	; 0x80
 8002ee6:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8002ee8:	4b04      	ldr	r3, [pc, #16]	; (8002efc <LCD_WR_REG+0x40>)
 8002eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eee:	611a      	str	r2, [r3, #16]
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40011000 	.word	0x40011000
 8002f00:	40010c00 	.word	0x40010c00

08002f04 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 8002f0e:	4b0d      	ldr	r3, [pc, #52]	; (8002f44 <LCD_WR_DATAX+0x40>)
 8002f10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f14:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8002f16:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <LCD_WR_DATAX+0x40>)
 8002f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f1c:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	; (8002f48 <LCD_WR_DATAX+0x44>)
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8002f24:	4b07      	ldr	r3, [pc, #28]	; (8002f44 <LCD_WR_DATAX+0x40>)
 8002f26:	2280      	movs	r2, #128	; 0x80
 8002f28:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8002f2a:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <LCD_WR_DATAX+0x40>)
 8002f2c:	2280      	movs	r2, #128	; 0x80
 8002f2e:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8002f30:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <LCD_WR_DATAX+0x40>)
 8002f32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f36:	611a      	str	r2, [r3, #16]
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40011000 	.word	0x40011000
 8002f48:	40010c00 	.word	0x40010c00

08002f4c <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8002f52:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <LCD_RD_DATA+0x7c>)
 8002f54:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8002f58:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8002f5a:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <LCD_RD_DATA+0x7c>)
 8002f5c:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8002f60:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8002f62:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <LCD_RD_DATA+0x7c>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8002f68:	4b18      	ldr	r3, [pc, #96]	; (8002fcc <LCD_RD_DATA+0x80>)
 8002f6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f6e:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8002f70:	4b16      	ldr	r3, [pc, #88]	; (8002fcc <LCD_RD_DATA+0x80>)
 8002f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f76:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8002f78:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <LCD_RD_DATA+0x80>)
 8002f7a:	2240      	movs	r2, #64	; 0x40
 8002f7c:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8002f7e:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <LCD_RD_DATA+0x84>)
 8002f80:	889b      	ldrh	r3, [r3, #4]
 8002f82:	f648 1289 	movw	r2, #35209	; 0x8989
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d102      	bne.n	8002f90 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	f7fe f984 	bl	8001298 <HAL_Delay>
	t = DATAIN
 8002f90:	4b0d      	ldr	r3, [pc, #52]	; (8002fc8 <LCD_RD_DATA+0x7c>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8002f96:	4b0d      	ldr	r3, [pc, #52]	; (8002fcc <LCD_RD_DATA+0x80>)
 8002f98:	2240      	movs	r2, #64	; 0x40
 8002f9a:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <LCD_RD_DATA+0x80>)
 8002f9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fa2:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8002fa4:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <LCD_RD_DATA+0x7c>)
 8002fa6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8002faa:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8002fac:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <LCD_RD_DATA+0x7c>)
 8002fae:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8002fb2:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8002fb4:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <LCD_RD_DATA+0x7c>)
 8002fb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fba:	60da      	str	r2, [r3, #12]
	return t;
 8002fbc:	88fb      	ldrh	r3, [r7, #6]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40010c00 	.word	0x40010c00
 8002fcc:	40011000 	.word	0x40011000
 8002fd0:	20000290 	.word	0x20000290

08002fd4 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	460a      	mov	r2, r1
 8002fde:	80fb      	strh	r3, [r7, #6]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8002fe4:	88fb      	ldrh	r3, [r7, #6]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff ff68 	bl	8002ebc <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8002fec:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <LCD_WriteReg+0x4c>)
 8002fee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ff2:	611a      	str	r2, [r3, #16]
 8002ff4:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <LCD_WriteReg+0x4c>)
 8002ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ffa:	615a      	str	r2, [r3, #20]
 8002ffc:	4a09      	ldr	r2, [pc, #36]	; (8003024 <LCD_WriteReg+0x50>)
 8002ffe:	88bb      	ldrh	r3, [r7, #4]
 8003000:	60d3      	str	r3, [r2, #12]
 8003002:	4b07      	ldr	r3, [pc, #28]	; (8003020 <LCD_WriteReg+0x4c>)
 8003004:	2280      	movs	r2, #128	; 0x80
 8003006:	615a      	str	r2, [r3, #20]
 8003008:	4b05      	ldr	r3, [pc, #20]	; (8003020 <LCD_WriteReg+0x4c>)
 800300a:	2280      	movs	r2, #128	; 0x80
 800300c:	611a      	str	r2, [r3, #16]
 800300e:	4b04      	ldr	r3, [pc, #16]	; (8003020 <LCD_WriteReg+0x4c>)
 8003010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003014:	611a      	str	r2, [r3, #16]
}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40011000 	.word	0x40011000
 8003024:	40010c00 	.word	0x40010c00

08003028 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8003032:	88fb      	ldrh	r3, [r7, #6]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff ff41 	bl	8002ebc <LCD_WR_REG>
	return LCD_RD_DATA();
 800303a:	f7ff ff87 	bl	8002f4c <LCD_RD_DATA>
 800303e:	4603      	mov	r3, r0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 800304c:	4b03      	ldr	r3, [pc, #12]	; (800305c <LCD_WriteRAM_Prepare+0x14>)
 800304e:	891b      	ldrh	r3, [r3, #8]
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff ff33 	bl	8002ebc <LCD_WR_REG>
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	20000290 	.word	0x20000290

08003060 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	460a      	mov	r2, r1
 800306a:	80fb      	strh	r3, [r7, #6]
 800306c:	4613      	mov	r3, r2
 800306e:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8003070:	4b73      	ldr	r3, [pc, #460]	; (8003240 <LCD_SetCursor+0x1e0>)
 8003072:	889b      	ldrh	r3, [r3, #4]
 8003074:	f249 3241 	movw	r2, #37697	; 0x9341
 8003078:	4293      	cmp	r3, r2
 800307a:	d005      	beq.n	8003088 <LCD_SetCursor+0x28>
 800307c:	4b70      	ldr	r3, [pc, #448]	; (8003240 <LCD_SetCursor+0x1e0>)
 800307e:	889b      	ldrh	r3, [r3, #4]
 8003080:	f245 3210 	movw	r2, #21264	; 0x5310
 8003084:	4293      	cmp	r3, r2
 8003086:	d164      	bne.n	8003152 <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8003088:	4b6d      	ldr	r3, [pc, #436]	; (8003240 <LCD_SetCursor+0x1e0>)
 800308a:	895b      	ldrh	r3, [r3, #10]
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff ff15 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8003092:	4b6c      	ldr	r3, [pc, #432]	; (8003244 <LCD_SetCursor+0x1e4>)
 8003094:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003098:	611a      	str	r2, [r3, #16]
 800309a:	4b6a      	ldr	r3, [pc, #424]	; (8003244 <LCD_SetCursor+0x1e4>)
 800309c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030a0:	615a      	str	r2, [r3, #20]
 80030a2:	88fb      	ldrh	r3, [r7, #6]
 80030a4:	0a1b      	lsrs	r3, r3, #8
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	4b67      	ldr	r3, [pc, #412]	; (8003248 <LCD_SetCursor+0x1e8>)
 80030aa:	60da      	str	r2, [r3, #12]
 80030ac:	4b65      	ldr	r3, [pc, #404]	; (8003244 <LCD_SetCursor+0x1e4>)
 80030ae:	2280      	movs	r2, #128	; 0x80
 80030b0:	615a      	str	r2, [r3, #20]
 80030b2:	4b64      	ldr	r3, [pc, #400]	; (8003244 <LCD_SetCursor+0x1e4>)
 80030b4:	2280      	movs	r2, #128	; 0x80
 80030b6:	611a      	str	r2, [r3, #16]
 80030b8:	4b62      	ldr	r3, [pc, #392]	; (8003244 <LCD_SetCursor+0x1e4>)
 80030ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030be:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 80030c0:	4b60      	ldr	r3, [pc, #384]	; (8003244 <LCD_SetCursor+0x1e4>)
 80030c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030c6:	611a      	str	r2, [r3, #16]
 80030c8:	4b5e      	ldr	r3, [pc, #376]	; (8003244 <LCD_SetCursor+0x1e4>)
 80030ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ce:	615a      	str	r2, [r3, #20]
 80030d0:	88fb      	ldrh	r3, [r7, #6]
 80030d2:	4a5d      	ldr	r2, [pc, #372]	; (8003248 <LCD_SetCursor+0x1e8>)
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	60d3      	str	r3, [r2, #12]
 80030d8:	4b5a      	ldr	r3, [pc, #360]	; (8003244 <LCD_SetCursor+0x1e4>)
 80030da:	2280      	movs	r2, #128	; 0x80
 80030dc:	615a      	str	r2, [r3, #20]
 80030de:	4b59      	ldr	r3, [pc, #356]	; (8003244 <LCD_SetCursor+0x1e4>)
 80030e0:	2280      	movs	r2, #128	; 0x80
 80030e2:	611a      	str	r2, [r3, #16]
 80030e4:	4b57      	ldr	r3, [pc, #348]	; (8003244 <LCD_SetCursor+0x1e4>)
 80030e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ea:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80030ec:	4b54      	ldr	r3, [pc, #336]	; (8003240 <LCD_SetCursor+0x1e0>)
 80030ee:	899b      	ldrh	r3, [r3, #12]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fee3 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 80030f6:	4b53      	ldr	r3, [pc, #332]	; (8003244 <LCD_SetCursor+0x1e4>)
 80030f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030fc:	611a      	str	r2, [r3, #16]
 80030fe:	4b51      	ldr	r3, [pc, #324]	; (8003244 <LCD_SetCursor+0x1e4>)
 8003100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003104:	615a      	str	r2, [r3, #20]
 8003106:	88bb      	ldrh	r3, [r7, #4]
 8003108:	0a1b      	lsrs	r3, r3, #8
 800310a:	b29a      	uxth	r2, r3
 800310c:	4b4e      	ldr	r3, [pc, #312]	; (8003248 <LCD_SetCursor+0x1e8>)
 800310e:	60da      	str	r2, [r3, #12]
 8003110:	4b4c      	ldr	r3, [pc, #304]	; (8003244 <LCD_SetCursor+0x1e4>)
 8003112:	2280      	movs	r2, #128	; 0x80
 8003114:	615a      	str	r2, [r3, #20]
 8003116:	4b4b      	ldr	r3, [pc, #300]	; (8003244 <LCD_SetCursor+0x1e4>)
 8003118:	2280      	movs	r2, #128	; 0x80
 800311a:	611a      	str	r2, [r3, #16]
 800311c:	4b49      	ldr	r3, [pc, #292]	; (8003244 <LCD_SetCursor+0x1e4>)
 800311e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003122:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8003124:	4b47      	ldr	r3, [pc, #284]	; (8003244 <LCD_SetCursor+0x1e4>)
 8003126:	f44f 7280 	mov.w	r2, #256	; 0x100
 800312a:	611a      	str	r2, [r3, #16]
 800312c:	4b45      	ldr	r3, [pc, #276]	; (8003244 <LCD_SetCursor+0x1e4>)
 800312e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003132:	615a      	str	r2, [r3, #20]
 8003134:	88bb      	ldrh	r3, [r7, #4]
 8003136:	4a44      	ldr	r2, [pc, #272]	; (8003248 <LCD_SetCursor+0x1e8>)
 8003138:	b2db      	uxtb	r3, r3
 800313a:	60d3      	str	r3, [r2, #12]
 800313c:	4b41      	ldr	r3, [pc, #260]	; (8003244 <LCD_SetCursor+0x1e4>)
 800313e:	2280      	movs	r2, #128	; 0x80
 8003140:	615a      	str	r2, [r3, #20]
 8003142:	4b40      	ldr	r3, [pc, #256]	; (8003244 <LCD_SetCursor+0x1e4>)
 8003144:	2280      	movs	r2, #128	; 0x80
 8003146:	611a      	str	r2, [r3, #16]
 8003148:	4b3e      	ldr	r3, [pc, #248]	; (8003244 <LCD_SetCursor+0x1e4>)
 800314a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800314e:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8003150:	e248      	b.n	80035e4 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8003152:	4b3b      	ldr	r3, [pc, #236]	; (8003240 <LCD_SetCursor+0x1e0>)
 8003154:	889b      	ldrh	r3, [r3, #4]
 8003156:	f646 0204 	movw	r2, #26628	; 0x6804
 800315a:	4293      	cmp	r3, r2
 800315c:	d176      	bne.n	800324c <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 800315e:	4b38      	ldr	r3, [pc, #224]	; (8003240 <LCD_SetCursor+0x1e0>)
 8003160:	799b      	ldrb	r3, [r3, #6]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d106      	bne.n	8003174 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8003166:	4b36      	ldr	r3, [pc, #216]	; (8003240 <LCD_SetCursor+0x1e0>)
 8003168:	881a      	ldrh	r2, [r3, #0]
 800316a:	88fb      	ldrh	r3, [r7, #6]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	b29b      	uxth	r3, r3
 8003170:	3b01      	subs	r3, #1
 8003172:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8003174:	4b32      	ldr	r3, [pc, #200]	; (8003240 <LCD_SetCursor+0x1e0>)
 8003176:	895b      	ldrh	r3, [r3, #10]
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff fe9f 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 800317e:	4b31      	ldr	r3, [pc, #196]	; (8003244 <LCD_SetCursor+0x1e4>)
 8003180:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003184:	611a      	str	r2, [r3, #16]
 8003186:	4b2f      	ldr	r3, [pc, #188]	; (8003244 <LCD_SetCursor+0x1e4>)
 8003188:	f44f 7200 	mov.w	r2, #512	; 0x200
 800318c:	615a      	str	r2, [r3, #20]
 800318e:	88fb      	ldrh	r3, [r7, #6]
 8003190:	0a1b      	lsrs	r3, r3, #8
 8003192:	b29a      	uxth	r2, r3
 8003194:	4b2c      	ldr	r3, [pc, #176]	; (8003248 <LCD_SetCursor+0x1e8>)
 8003196:	60da      	str	r2, [r3, #12]
 8003198:	4b2a      	ldr	r3, [pc, #168]	; (8003244 <LCD_SetCursor+0x1e4>)
 800319a:	2280      	movs	r2, #128	; 0x80
 800319c:	615a      	str	r2, [r3, #20]
 800319e:	4b29      	ldr	r3, [pc, #164]	; (8003244 <LCD_SetCursor+0x1e4>)
 80031a0:	2280      	movs	r2, #128	; 0x80
 80031a2:	611a      	str	r2, [r3, #16]
 80031a4:	4b27      	ldr	r3, [pc, #156]	; (8003244 <LCD_SetCursor+0x1e4>)
 80031a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031aa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 80031ac:	4b25      	ldr	r3, [pc, #148]	; (8003244 <LCD_SetCursor+0x1e4>)
 80031ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031b2:	611a      	str	r2, [r3, #16]
 80031b4:	4b23      	ldr	r3, [pc, #140]	; (8003244 <LCD_SetCursor+0x1e4>)
 80031b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031ba:	615a      	str	r2, [r3, #20]
 80031bc:	88fb      	ldrh	r3, [r7, #6]
 80031be:	4a22      	ldr	r2, [pc, #136]	; (8003248 <LCD_SetCursor+0x1e8>)
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	60d3      	str	r3, [r2, #12]
 80031c4:	4b1f      	ldr	r3, [pc, #124]	; (8003244 <LCD_SetCursor+0x1e4>)
 80031c6:	2280      	movs	r2, #128	; 0x80
 80031c8:	615a      	str	r2, [r3, #20]
 80031ca:	4b1e      	ldr	r3, [pc, #120]	; (8003244 <LCD_SetCursor+0x1e4>)
 80031cc:	2280      	movs	r2, #128	; 0x80
 80031ce:	611a      	str	r2, [r3, #16]
 80031d0:	4b1c      	ldr	r3, [pc, #112]	; (8003244 <LCD_SetCursor+0x1e4>)
 80031d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031d6:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80031d8:	4b19      	ldr	r3, [pc, #100]	; (8003240 <LCD_SetCursor+0x1e0>)
 80031da:	899b      	ldrh	r3, [r3, #12]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fe6d 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 80031e2:	4b18      	ldr	r3, [pc, #96]	; (8003244 <LCD_SetCursor+0x1e4>)
 80031e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031e8:	611a      	str	r2, [r3, #16]
 80031ea:	4b16      	ldr	r3, [pc, #88]	; (8003244 <LCD_SetCursor+0x1e4>)
 80031ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031f0:	615a      	str	r2, [r3, #20]
 80031f2:	88bb      	ldrh	r3, [r7, #4]
 80031f4:	0a1b      	lsrs	r3, r3, #8
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	4b13      	ldr	r3, [pc, #76]	; (8003248 <LCD_SetCursor+0x1e8>)
 80031fa:	60da      	str	r2, [r3, #12]
 80031fc:	4b11      	ldr	r3, [pc, #68]	; (8003244 <LCD_SetCursor+0x1e4>)
 80031fe:	2280      	movs	r2, #128	; 0x80
 8003200:	615a      	str	r2, [r3, #20]
 8003202:	4b10      	ldr	r3, [pc, #64]	; (8003244 <LCD_SetCursor+0x1e4>)
 8003204:	2280      	movs	r2, #128	; 0x80
 8003206:	611a      	str	r2, [r3, #16]
 8003208:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <LCD_SetCursor+0x1e4>)
 800320a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800320e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8003210:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <LCD_SetCursor+0x1e4>)
 8003212:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003216:	611a      	str	r2, [r3, #16]
 8003218:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <LCD_SetCursor+0x1e4>)
 800321a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800321e:	615a      	str	r2, [r3, #20]
 8003220:	88bb      	ldrh	r3, [r7, #4]
 8003222:	4a09      	ldr	r2, [pc, #36]	; (8003248 <LCD_SetCursor+0x1e8>)
 8003224:	b2db      	uxtb	r3, r3
 8003226:	60d3      	str	r3, [r2, #12]
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <LCD_SetCursor+0x1e4>)
 800322a:	2280      	movs	r2, #128	; 0x80
 800322c:	615a      	str	r2, [r3, #20]
 800322e:	4b05      	ldr	r3, [pc, #20]	; (8003244 <LCD_SetCursor+0x1e4>)
 8003230:	2280      	movs	r2, #128	; 0x80
 8003232:	611a      	str	r2, [r3, #16]
 8003234:	4b03      	ldr	r3, [pc, #12]	; (8003244 <LCD_SetCursor+0x1e4>)
 8003236:	f44f 7200 	mov.w	r2, #512	; 0x200
 800323a:	611a      	str	r2, [r3, #16]
}
 800323c:	e1d2      	b.n	80035e4 <LCD_SetCursor+0x584>
 800323e:	bf00      	nop
 8003240:	20000290 	.word	0x20000290
 8003244:	40011000 	.word	0x40011000
 8003248:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 800324c:	4b99      	ldr	r3, [pc, #612]	; (80034b4 <LCD_SetCursor+0x454>)
 800324e:	889b      	ldrh	r3, [r3, #4]
 8003250:	f641 1263 	movw	r2, #6499	; 0x1963
 8003254:	4293      	cmp	r3, r2
 8003256:	f040 8133 	bne.w	80034c0 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 800325a:	4b96      	ldr	r3, [pc, #600]	; (80034b4 <LCD_SetCursor+0x454>)
 800325c:	799b      	ldrb	r3, [r3, #6]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d163      	bne.n	800332a <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8003262:	4b94      	ldr	r3, [pc, #592]	; (80034b4 <LCD_SetCursor+0x454>)
 8003264:	881a      	ldrh	r2, [r3, #0]
 8003266:	88fb      	ldrh	r3, [r7, #6]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8003270:	4b90      	ldr	r3, [pc, #576]	; (80034b4 <LCD_SetCursor+0x454>)
 8003272:	895b      	ldrh	r3, [r3, #10]
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff fe21 	bl	8002ebc <LCD_WR_REG>
			LCD_WR_DATA(0);
 800327a:	4b8f      	ldr	r3, [pc, #572]	; (80034b8 <LCD_SetCursor+0x458>)
 800327c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003280:	611a      	str	r2, [r3, #16]
 8003282:	4b8d      	ldr	r3, [pc, #564]	; (80034b8 <LCD_SetCursor+0x458>)
 8003284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003288:	615a      	str	r2, [r3, #20]
 800328a:	4b8c      	ldr	r3, [pc, #560]	; (80034bc <LCD_SetCursor+0x45c>)
 800328c:	2200      	movs	r2, #0
 800328e:	60da      	str	r2, [r3, #12]
 8003290:	4b89      	ldr	r3, [pc, #548]	; (80034b8 <LCD_SetCursor+0x458>)
 8003292:	2280      	movs	r2, #128	; 0x80
 8003294:	615a      	str	r2, [r3, #20]
 8003296:	4b88      	ldr	r3, [pc, #544]	; (80034b8 <LCD_SetCursor+0x458>)
 8003298:	2280      	movs	r2, #128	; 0x80
 800329a:	611a      	str	r2, [r3, #16]
 800329c:	4b86      	ldr	r3, [pc, #536]	; (80034b8 <LCD_SetCursor+0x458>)
 800329e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032a2:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80032a4:	4b84      	ldr	r3, [pc, #528]	; (80034b8 <LCD_SetCursor+0x458>)
 80032a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032aa:	611a      	str	r2, [r3, #16]
 80032ac:	4b82      	ldr	r3, [pc, #520]	; (80034b8 <LCD_SetCursor+0x458>)
 80032ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032b2:	615a      	str	r2, [r3, #20]
 80032b4:	4b81      	ldr	r3, [pc, #516]	; (80034bc <LCD_SetCursor+0x45c>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	60da      	str	r2, [r3, #12]
 80032ba:	4b7f      	ldr	r3, [pc, #508]	; (80034b8 <LCD_SetCursor+0x458>)
 80032bc:	2280      	movs	r2, #128	; 0x80
 80032be:	615a      	str	r2, [r3, #20]
 80032c0:	4b7d      	ldr	r3, [pc, #500]	; (80034b8 <LCD_SetCursor+0x458>)
 80032c2:	2280      	movs	r2, #128	; 0x80
 80032c4:	611a      	str	r2, [r3, #16]
 80032c6:	4b7c      	ldr	r3, [pc, #496]	; (80034b8 <LCD_SetCursor+0x458>)
 80032c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032cc:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 80032ce:	4b7a      	ldr	r3, [pc, #488]	; (80034b8 <LCD_SetCursor+0x458>)
 80032d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032d4:	611a      	str	r2, [r3, #16]
 80032d6:	4b78      	ldr	r3, [pc, #480]	; (80034b8 <LCD_SetCursor+0x458>)
 80032d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032dc:	615a      	str	r2, [r3, #20]
 80032de:	88fb      	ldrh	r3, [r7, #6]
 80032e0:	0a1b      	lsrs	r3, r3, #8
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	4b75      	ldr	r3, [pc, #468]	; (80034bc <LCD_SetCursor+0x45c>)
 80032e6:	60da      	str	r2, [r3, #12]
 80032e8:	4b73      	ldr	r3, [pc, #460]	; (80034b8 <LCD_SetCursor+0x458>)
 80032ea:	2280      	movs	r2, #128	; 0x80
 80032ec:	615a      	str	r2, [r3, #20]
 80032ee:	4b72      	ldr	r3, [pc, #456]	; (80034b8 <LCD_SetCursor+0x458>)
 80032f0:	2280      	movs	r2, #128	; 0x80
 80032f2:	611a      	str	r2, [r3, #16]
 80032f4:	4b70      	ldr	r3, [pc, #448]	; (80034b8 <LCD_SetCursor+0x458>)
 80032f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032fa:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 80032fc:	4b6e      	ldr	r3, [pc, #440]	; (80034b8 <LCD_SetCursor+0x458>)
 80032fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003302:	611a      	str	r2, [r3, #16]
 8003304:	4b6c      	ldr	r3, [pc, #432]	; (80034b8 <LCD_SetCursor+0x458>)
 8003306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800330a:	615a      	str	r2, [r3, #20]
 800330c:	88fb      	ldrh	r3, [r7, #6]
 800330e:	4a6b      	ldr	r2, [pc, #428]	; (80034bc <LCD_SetCursor+0x45c>)
 8003310:	b2db      	uxtb	r3, r3
 8003312:	60d3      	str	r3, [r2, #12]
 8003314:	4b68      	ldr	r3, [pc, #416]	; (80034b8 <LCD_SetCursor+0x458>)
 8003316:	2280      	movs	r2, #128	; 0x80
 8003318:	615a      	str	r2, [r3, #20]
 800331a:	4b67      	ldr	r3, [pc, #412]	; (80034b8 <LCD_SetCursor+0x458>)
 800331c:	2280      	movs	r2, #128	; 0x80
 800331e:	611a      	str	r2, [r3, #16]
 8003320:	4b65      	ldr	r3, [pc, #404]	; (80034b8 <LCD_SetCursor+0x458>)
 8003322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003326:	611a      	str	r2, [r3, #16]
 8003328:	e061      	b.n	80033ee <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 800332a:	4b62      	ldr	r3, [pc, #392]	; (80034b4 <LCD_SetCursor+0x454>)
 800332c:	895b      	ldrh	r3, [r3, #10]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff fdc4 	bl	8002ebc <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8003334:	4b60      	ldr	r3, [pc, #384]	; (80034b8 <LCD_SetCursor+0x458>)
 8003336:	f44f 7280 	mov.w	r2, #256	; 0x100
 800333a:	611a      	str	r2, [r3, #16]
 800333c:	4b5e      	ldr	r3, [pc, #376]	; (80034b8 <LCD_SetCursor+0x458>)
 800333e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003342:	615a      	str	r2, [r3, #20]
 8003344:	88fb      	ldrh	r3, [r7, #6]
 8003346:	0a1b      	lsrs	r3, r3, #8
 8003348:	b29a      	uxth	r2, r3
 800334a:	4b5c      	ldr	r3, [pc, #368]	; (80034bc <LCD_SetCursor+0x45c>)
 800334c:	60da      	str	r2, [r3, #12]
 800334e:	4b5a      	ldr	r3, [pc, #360]	; (80034b8 <LCD_SetCursor+0x458>)
 8003350:	2280      	movs	r2, #128	; 0x80
 8003352:	615a      	str	r2, [r3, #20]
 8003354:	4b58      	ldr	r3, [pc, #352]	; (80034b8 <LCD_SetCursor+0x458>)
 8003356:	2280      	movs	r2, #128	; 0x80
 8003358:	611a      	str	r2, [r3, #16]
 800335a:	4b57      	ldr	r3, [pc, #348]	; (80034b8 <LCD_SetCursor+0x458>)
 800335c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003360:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8003362:	4b55      	ldr	r3, [pc, #340]	; (80034b8 <LCD_SetCursor+0x458>)
 8003364:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003368:	611a      	str	r2, [r3, #16]
 800336a:	4b53      	ldr	r3, [pc, #332]	; (80034b8 <LCD_SetCursor+0x458>)
 800336c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003370:	615a      	str	r2, [r3, #20]
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	4a51      	ldr	r2, [pc, #324]	; (80034bc <LCD_SetCursor+0x45c>)
 8003376:	b2db      	uxtb	r3, r3
 8003378:	60d3      	str	r3, [r2, #12]
 800337a:	4b4f      	ldr	r3, [pc, #316]	; (80034b8 <LCD_SetCursor+0x458>)
 800337c:	2280      	movs	r2, #128	; 0x80
 800337e:	615a      	str	r2, [r3, #20]
 8003380:	4b4d      	ldr	r3, [pc, #308]	; (80034b8 <LCD_SetCursor+0x458>)
 8003382:	2280      	movs	r2, #128	; 0x80
 8003384:	611a      	str	r2, [r3, #16]
 8003386:	4b4c      	ldr	r3, [pc, #304]	; (80034b8 <LCD_SetCursor+0x458>)
 8003388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800338c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 800338e:	4b4a      	ldr	r3, [pc, #296]	; (80034b8 <LCD_SetCursor+0x458>)
 8003390:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003394:	611a      	str	r2, [r3, #16]
 8003396:	4b48      	ldr	r3, [pc, #288]	; (80034b8 <LCD_SetCursor+0x458>)
 8003398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800339c:	615a      	str	r2, [r3, #20]
 800339e:	4b45      	ldr	r3, [pc, #276]	; (80034b4 <LCD_SetCursor+0x454>)
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	121a      	asrs	r2, r3, #8
 80033a6:	4b45      	ldr	r3, [pc, #276]	; (80034bc <LCD_SetCursor+0x45c>)
 80033a8:	60da      	str	r2, [r3, #12]
 80033aa:	4b43      	ldr	r3, [pc, #268]	; (80034b8 <LCD_SetCursor+0x458>)
 80033ac:	2280      	movs	r2, #128	; 0x80
 80033ae:	615a      	str	r2, [r3, #20]
 80033b0:	4b41      	ldr	r3, [pc, #260]	; (80034b8 <LCD_SetCursor+0x458>)
 80033b2:	2280      	movs	r2, #128	; 0x80
 80033b4:	611a      	str	r2, [r3, #16]
 80033b6:	4b40      	ldr	r3, [pc, #256]	; (80034b8 <LCD_SetCursor+0x458>)
 80033b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033bc:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80033be:	4b3e      	ldr	r3, [pc, #248]	; (80034b8 <LCD_SetCursor+0x458>)
 80033c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033c4:	611a      	str	r2, [r3, #16]
 80033c6:	4b3c      	ldr	r3, [pc, #240]	; (80034b8 <LCD_SetCursor+0x458>)
 80033c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033cc:	615a      	str	r2, [r3, #20]
 80033ce:	4b39      	ldr	r3, [pc, #228]	; (80034b4 <LCD_SetCursor+0x454>)
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	3b01      	subs	r3, #1
 80033d4:	4a39      	ldr	r2, [pc, #228]	; (80034bc <LCD_SetCursor+0x45c>)
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	60d3      	str	r3, [r2, #12]
 80033da:	4b37      	ldr	r3, [pc, #220]	; (80034b8 <LCD_SetCursor+0x458>)
 80033dc:	2280      	movs	r2, #128	; 0x80
 80033de:	615a      	str	r2, [r3, #20]
 80033e0:	4b35      	ldr	r3, [pc, #212]	; (80034b8 <LCD_SetCursor+0x458>)
 80033e2:	2280      	movs	r2, #128	; 0x80
 80033e4:	611a      	str	r2, [r3, #16]
 80033e6:	4b34      	ldr	r3, [pc, #208]	; (80034b8 <LCD_SetCursor+0x458>)
 80033e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ec:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80033ee:	4b31      	ldr	r3, [pc, #196]	; (80034b4 <LCD_SetCursor+0x454>)
 80033f0:	899b      	ldrh	r3, [r3, #12]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff fd62 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 80033f8:	4b2f      	ldr	r3, [pc, #188]	; (80034b8 <LCD_SetCursor+0x458>)
 80033fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033fe:	611a      	str	r2, [r3, #16]
 8003400:	4b2d      	ldr	r3, [pc, #180]	; (80034b8 <LCD_SetCursor+0x458>)
 8003402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003406:	615a      	str	r2, [r3, #20]
 8003408:	88bb      	ldrh	r3, [r7, #4]
 800340a:	0a1b      	lsrs	r3, r3, #8
 800340c:	b29a      	uxth	r2, r3
 800340e:	4b2b      	ldr	r3, [pc, #172]	; (80034bc <LCD_SetCursor+0x45c>)
 8003410:	60da      	str	r2, [r3, #12]
 8003412:	4b29      	ldr	r3, [pc, #164]	; (80034b8 <LCD_SetCursor+0x458>)
 8003414:	2280      	movs	r2, #128	; 0x80
 8003416:	615a      	str	r2, [r3, #20]
 8003418:	4b27      	ldr	r3, [pc, #156]	; (80034b8 <LCD_SetCursor+0x458>)
 800341a:	2280      	movs	r2, #128	; 0x80
 800341c:	611a      	str	r2, [r3, #16]
 800341e:	4b26      	ldr	r3, [pc, #152]	; (80034b8 <LCD_SetCursor+0x458>)
 8003420:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003424:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8003426:	4b24      	ldr	r3, [pc, #144]	; (80034b8 <LCD_SetCursor+0x458>)
 8003428:	f44f 7280 	mov.w	r2, #256	; 0x100
 800342c:	611a      	str	r2, [r3, #16]
 800342e:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <LCD_SetCursor+0x458>)
 8003430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003434:	615a      	str	r2, [r3, #20]
 8003436:	88bb      	ldrh	r3, [r7, #4]
 8003438:	4a20      	ldr	r2, [pc, #128]	; (80034bc <LCD_SetCursor+0x45c>)
 800343a:	b2db      	uxtb	r3, r3
 800343c:	60d3      	str	r3, [r2, #12]
 800343e:	4b1e      	ldr	r3, [pc, #120]	; (80034b8 <LCD_SetCursor+0x458>)
 8003440:	2280      	movs	r2, #128	; 0x80
 8003442:	615a      	str	r2, [r3, #20]
 8003444:	4b1c      	ldr	r3, [pc, #112]	; (80034b8 <LCD_SetCursor+0x458>)
 8003446:	2280      	movs	r2, #128	; 0x80
 8003448:	611a      	str	r2, [r3, #16]
 800344a:	4b1b      	ldr	r3, [pc, #108]	; (80034b8 <LCD_SetCursor+0x458>)
 800344c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003450:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8003452:	4b19      	ldr	r3, [pc, #100]	; (80034b8 <LCD_SetCursor+0x458>)
 8003454:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003458:	611a      	str	r2, [r3, #16]
 800345a:	4b17      	ldr	r3, [pc, #92]	; (80034b8 <LCD_SetCursor+0x458>)
 800345c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003460:	615a      	str	r2, [r3, #20]
 8003462:	4b14      	ldr	r3, [pc, #80]	; (80034b4 <LCD_SetCursor+0x454>)
 8003464:	885b      	ldrh	r3, [r3, #2]
 8003466:	3b01      	subs	r3, #1
 8003468:	121a      	asrs	r2, r3, #8
 800346a:	4b14      	ldr	r3, [pc, #80]	; (80034bc <LCD_SetCursor+0x45c>)
 800346c:	60da      	str	r2, [r3, #12]
 800346e:	4b12      	ldr	r3, [pc, #72]	; (80034b8 <LCD_SetCursor+0x458>)
 8003470:	2280      	movs	r2, #128	; 0x80
 8003472:	615a      	str	r2, [r3, #20]
 8003474:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <LCD_SetCursor+0x458>)
 8003476:	2280      	movs	r2, #128	; 0x80
 8003478:	611a      	str	r2, [r3, #16]
 800347a:	4b0f      	ldr	r3, [pc, #60]	; (80034b8 <LCD_SetCursor+0x458>)
 800347c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003480:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8003482:	4b0d      	ldr	r3, [pc, #52]	; (80034b8 <LCD_SetCursor+0x458>)
 8003484:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003488:	611a      	str	r2, [r3, #16]
 800348a:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <LCD_SetCursor+0x458>)
 800348c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003490:	615a      	str	r2, [r3, #20]
 8003492:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <LCD_SetCursor+0x454>)
 8003494:	885b      	ldrh	r3, [r3, #2]
 8003496:	3b01      	subs	r3, #1
 8003498:	4a08      	ldr	r2, [pc, #32]	; (80034bc <LCD_SetCursor+0x45c>)
 800349a:	b2db      	uxtb	r3, r3
 800349c:	60d3      	str	r3, [r2, #12]
 800349e:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <LCD_SetCursor+0x458>)
 80034a0:	2280      	movs	r2, #128	; 0x80
 80034a2:	615a      	str	r2, [r3, #20]
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <LCD_SetCursor+0x458>)
 80034a6:	2280      	movs	r2, #128	; 0x80
 80034a8:	611a      	str	r2, [r3, #16]
 80034aa:	4b03      	ldr	r3, [pc, #12]	; (80034b8 <LCD_SetCursor+0x458>)
 80034ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034b0:	611a      	str	r2, [r3, #16]
}
 80034b2:	e097      	b.n	80035e4 <LCD_SetCursor+0x584>
 80034b4:	20000290 	.word	0x20000290
 80034b8:	40011000 	.word	0x40011000
 80034bc:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 80034c0:	4b4a      	ldr	r3, [pc, #296]	; (80035ec <LCD_SetCursor+0x58c>)
 80034c2:	889b      	ldrh	r3, [r3, #4]
 80034c4:	f245 5210 	movw	r2, #21776	; 0x5510
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d172      	bne.n	80035b2 <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 80034cc:	4b47      	ldr	r3, [pc, #284]	; (80035ec <LCD_SetCursor+0x58c>)
 80034ce:	895b      	ldrh	r3, [r3, #10]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff fcf3 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 80034d6:	4b46      	ldr	r3, [pc, #280]	; (80035f0 <LCD_SetCursor+0x590>)
 80034d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034dc:	611a      	str	r2, [r3, #16]
 80034de:	4b44      	ldr	r3, [pc, #272]	; (80035f0 <LCD_SetCursor+0x590>)
 80034e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034e4:	615a      	str	r2, [r3, #20]
 80034e6:	88fb      	ldrh	r3, [r7, #6]
 80034e8:	0a1b      	lsrs	r3, r3, #8
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	4b41      	ldr	r3, [pc, #260]	; (80035f4 <LCD_SetCursor+0x594>)
 80034ee:	60da      	str	r2, [r3, #12]
 80034f0:	4b3f      	ldr	r3, [pc, #252]	; (80035f0 <LCD_SetCursor+0x590>)
 80034f2:	2280      	movs	r2, #128	; 0x80
 80034f4:	615a      	str	r2, [r3, #20]
 80034f6:	4b3e      	ldr	r3, [pc, #248]	; (80035f0 <LCD_SetCursor+0x590>)
 80034f8:	2280      	movs	r2, #128	; 0x80
 80034fa:	611a      	str	r2, [r3, #16]
 80034fc:	4b3c      	ldr	r3, [pc, #240]	; (80035f0 <LCD_SetCursor+0x590>)
 80034fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003502:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8003504:	4b39      	ldr	r3, [pc, #228]	; (80035ec <LCD_SetCursor+0x58c>)
 8003506:	895b      	ldrh	r3, [r3, #10]
 8003508:	3301      	adds	r3, #1
 800350a:	b29b      	uxth	r3, r3
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff fcd5 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 8003512:	4b37      	ldr	r3, [pc, #220]	; (80035f0 <LCD_SetCursor+0x590>)
 8003514:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003518:	611a      	str	r2, [r3, #16]
 800351a:	4b35      	ldr	r3, [pc, #212]	; (80035f0 <LCD_SetCursor+0x590>)
 800351c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003520:	615a      	str	r2, [r3, #20]
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	4a33      	ldr	r2, [pc, #204]	; (80035f4 <LCD_SetCursor+0x594>)
 8003526:	b2db      	uxtb	r3, r3
 8003528:	60d3      	str	r3, [r2, #12]
 800352a:	4b31      	ldr	r3, [pc, #196]	; (80035f0 <LCD_SetCursor+0x590>)
 800352c:	2280      	movs	r2, #128	; 0x80
 800352e:	615a      	str	r2, [r3, #20]
 8003530:	4b2f      	ldr	r3, [pc, #188]	; (80035f0 <LCD_SetCursor+0x590>)
 8003532:	2280      	movs	r2, #128	; 0x80
 8003534:	611a      	str	r2, [r3, #16]
 8003536:	4b2e      	ldr	r3, [pc, #184]	; (80035f0 <LCD_SetCursor+0x590>)
 8003538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800353c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 800353e:	4b2b      	ldr	r3, [pc, #172]	; (80035ec <LCD_SetCursor+0x58c>)
 8003540:	899b      	ldrh	r3, [r3, #12]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff fcba 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8003548:	4b29      	ldr	r3, [pc, #164]	; (80035f0 <LCD_SetCursor+0x590>)
 800354a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800354e:	611a      	str	r2, [r3, #16]
 8003550:	4b27      	ldr	r3, [pc, #156]	; (80035f0 <LCD_SetCursor+0x590>)
 8003552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003556:	615a      	str	r2, [r3, #20]
 8003558:	88bb      	ldrh	r3, [r7, #4]
 800355a:	0a1b      	lsrs	r3, r3, #8
 800355c:	b29a      	uxth	r2, r3
 800355e:	4b25      	ldr	r3, [pc, #148]	; (80035f4 <LCD_SetCursor+0x594>)
 8003560:	60da      	str	r2, [r3, #12]
 8003562:	4b23      	ldr	r3, [pc, #140]	; (80035f0 <LCD_SetCursor+0x590>)
 8003564:	2280      	movs	r2, #128	; 0x80
 8003566:	615a      	str	r2, [r3, #20]
 8003568:	4b21      	ldr	r3, [pc, #132]	; (80035f0 <LCD_SetCursor+0x590>)
 800356a:	2280      	movs	r2, #128	; 0x80
 800356c:	611a      	str	r2, [r3, #16]
 800356e:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <LCD_SetCursor+0x590>)
 8003570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003574:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8003576:	4b1d      	ldr	r3, [pc, #116]	; (80035ec <LCD_SetCursor+0x58c>)
 8003578:	899b      	ldrh	r3, [r3, #12]
 800357a:	3301      	adds	r3, #1
 800357c:	b29b      	uxth	r3, r3
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff fc9c 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8003584:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <LCD_SetCursor+0x590>)
 8003586:	f44f 7280 	mov.w	r2, #256	; 0x100
 800358a:	611a      	str	r2, [r3, #16]
 800358c:	4b18      	ldr	r3, [pc, #96]	; (80035f0 <LCD_SetCursor+0x590>)
 800358e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003592:	615a      	str	r2, [r3, #20]
 8003594:	88bb      	ldrh	r3, [r7, #4]
 8003596:	4a17      	ldr	r2, [pc, #92]	; (80035f4 <LCD_SetCursor+0x594>)
 8003598:	b2db      	uxtb	r3, r3
 800359a:	60d3      	str	r3, [r2, #12]
 800359c:	4b14      	ldr	r3, [pc, #80]	; (80035f0 <LCD_SetCursor+0x590>)
 800359e:	2280      	movs	r2, #128	; 0x80
 80035a0:	615a      	str	r2, [r3, #20]
 80035a2:	4b13      	ldr	r3, [pc, #76]	; (80035f0 <LCD_SetCursor+0x590>)
 80035a4:	2280      	movs	r2, #128	; 0x80
 80035a6:	611a      	str	r2, [r3, #16]
 80035a8:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <LCD_SetCursor+0x590>)
 80035aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ae:	611a      	str	r2, [r3, #16]
}
 80035b0:	e018      	b.n	80035e4 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 80035b2:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <LCD_SetCursor+0x58c>)
 80035b4:	799b      	ldrb	r3, [r3, #6]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d106      	bne.n	80035c8 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 80035ba:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <LCD_SetCursor+0x58c>)
 80035bc:	881a      	ldrh	r2, [r3, #0]
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 80035c8:	4b08      	ldr	r3, [pc, #32]	; (80035ec <LCD_SetCursor+0x58c>)
 80035ca:	895b      	ldrh	r3, [r3, #10]
 80035cc:	88fa      	ldrh	r2, [r7, #6]
 80035ce:	4611      	mov	r1, r2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff fcff 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 80035d6:	4b05      	ldr	r3, [pc, #20]	; (80035ec <LCD_SetCursor+0x58c>)
 80035d8:	899b      	ldrh	r3, [r3, #12]
 80035da:	88ba      	ldrh	r2, [r7, #4]
 80035dc:	4611      	mov	r1, r2
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff fcf8 	bl	8002fd4 <LCD_WriteReg>
}
 80035e4:	bf00      	nop
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20000290 	.word	0x20000290
 80035f0:	40011000 	.word	0x40011000
 80035f4:	40010c00 	.word	0x40010c00

080035f8 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 8003602:	2300      	movs	r3, #0
 8003604:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 8003606:	2300      	movs	r3, #0
 8003608:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 800360a:	4b78      	ldr	r3, [pc, #480]	; (80037ec <LCD_Scan_Dir+0x1f4>)
 800360c:	799b      	ldrb	r3, [r3, #6]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d10b      	bne.n	800362a <LCD_Scan_Dir+0x32>
 8003612:	4b76      	ldr	r3, [pc, #472]	; (80037ec <LCD_Scan_Dir+0x1f4>)
 8003614:	889b      	ldrh	r3, [r3, #4]
 8003616:	f646 0204 	movw	r2, #26628	; 0x6804
 800361a:	4293      	cmp	r3, r2
 800361c:	d005      	beq.n	800362a <LCD_Scan_Dir+0x32>
 800361e:	4b73      	ldr	r3, [pc, #460]	; (80037ec <LCD_Scan_Dir+0x1f4>)
 8003620:	889b      	ldrh	r3, [r3, #4]
 8003622:	f641 1263 	movw	r2, #6499	; 0x1963
 8003626:	4293      	cmp	r3, r2
 8003628:	d109      	bne.n	800363e <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 800362a:	4b70      	ldr	r3, [pc, #448]	; (80037ec <LCD_Scan_Dir+0x1f4>)
 800362c:	799b      	ldrb	r3, [r3, #6]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d134      	bne.n	800369c <LCD_Scan_Dir+0xa4>
 8003632:	4b6e      	ldr	r3, [pc, #440]	; (80037ec <LCD_Scan_Dir+0x1f4>)
 8003634:	889b      	ldrh	r3, [r3, #4]
 8003636:	f641 1263 	movw	r2, #6499	; 0x1963
 800363a:	4293      	cmp	r3, r2
 800363c:	d12e      	bne.n	800369c <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	2b07      	cmp	r3, #7
 8003642:	d82b      	bhi.n	800369c <LCD_Scan_Dir+0xa4>
 8003644:	a201      	add	r2, pc, #4	; (adr r2, 800364c <LCD_Scan_Dir+0x54>)
 8003646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364a:	bf00      	nop
 800364c:	0800366d 	.word	0x0800366d
 8003650:	08003673 	.word	0x08003673
 8003654:	08003679 	.word	0x08003679
 8003658:	0800367f 	.word	0x0800367f
 800365c:	08003685 	.word	0x08003685
 8003660:	0800368b 	.word	0x0800368b
 8003664:	08003691 	.word	0x08003691
 8003668:	08003697 	.word	0x08003697
		{
		case 0:
			dir = 6;
 800366c:	2306      	movs	r3, #6
 800366e:	71fb      	strb	r3, [r7, #7]
			break;
 8003670:	e014      	b.n	800369c <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 8003672:	2307      	movs	r3, #7
 8003674:	71fb      	strb	r3, [r7, #7]
			break;
 8003676:	e011      	b.n	800369c <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 8003678:	2304      	movs	r3, #4
 800367a:	71fb      	strb	r3, [r7, #7]
			break;
 800367c:	e00e      	b.n	800369c <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 800367e:	2305      	movs	r3, #5
 8003680:	71fb      	strb	r3, [r7, #7]
			break;
 8003682:	e00b      	b.n	800369c <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 8003684:	2301      	movs	r3, #1
 8003686:	71fb      	strb	r3, [r7, #7]
			break;
 8003688:	e008      	b.n	800369c <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 800368a:	2300      	movs	r3, #0
 800368c:	71fb      	strb	r3, [r7, #7]
			break;
 800368e:	e005      	b.n	800369c <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 8003690:	2303      	movs	r3, #3
 8003692:	71fb      	strb	r3, [r7, #7]
			break;
 8003694:	e002      	b.n	800369c <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 8003696:	2302      	movs	r3, #2
 8003698:	71fb      	strb	r3, [r7, #7]
			break;
 800369a:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 800369c:	4b53      	ldr	r3, [pc, #332]	; (80037ec <LCD_Scan_Dir+0x1f4>)
 800369e:	889b      	ldrh	r3, [r3, #4]
 80036a0:	f249 3241 	movw	r2, #37697	; 0x9341
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d018      	beq.n	80036da <LCD_Scan_Dir+0xe2>
 80036a8:	4b50      	ldr	r3, [pc, #320]	; (80037ec <LCD_Scan_Dir+0x1f4>)
 80036aa:	889b      	ldrh	r3, [r3, #4]
 80036ac:	f646 0204 	movw	r2, #26628	; 0x6804
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d012      	beq.n	80036da <LCD_Scan_Dir+0xe2>
 80036b4:	4b4d      	ldr	r3, [pc, #308]	; (80037ec <LCD_Scan_Dir+0x1f4>)
 80036b6:	889b      	ldrh	r3, [r3, #4]
 80036b8:	f245 3210 	movw	r2, #21264	; 0x5310
 80036bc:	4293      	cmp	r3, r2
 80036be:	d00c      	beq.n	80036da <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 80036c0:	4b4a      	ldr	r3, [pc, #296]	; (80037ec <LCD_Scan_Dir+0x1f4>)
 80036c2:	889b      	ldrh	r3, [r3, #4]
 80036c4:	f245 5210 	movw	r2, #21776	; 0x5510
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d006      	beq.n	80036da <LCD_Scan_Dir+0xe2>
 80036cc:	4b47      	ldr	r3, [pc, #284]	; (80037ec <LCD_Scan_Dir+0x1f4>)
 80036ce:	889b      	ldrh	r3, [r3, #4]
 80036d0:	f641 1263 	movw	r2, #6499	; 0x1963
 80036d4:	4293      	cmp	r3, r2
 80036d6:	f040 8250 	bne.w	8003b7a <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	2b07      	cmp	r3, #7
 80036de:	d836      	bhi.n	800374e <LCD_Scan_Dir+0x156>
 80036e0:	a201      	add	r2, pc, #4	; (adr r2, 80036e8 <LCD_Scan_Dir+0xf0>)
 80036e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e6:	bf00      	nop
 80036e8:	0800374f 	.word	0x0800374f
 80036ec:	08003709 	.word	0x08003709
 80036f0:	08003713 	.word	0x08003713
 80036f4:	0800371d 	.word	0x0800371d
 80036f8:	08003727 	.word	0x08003727
 80036fc:	08003731 	.word	0x08003731
 8003700:	0800373b 	.word	0x0800373b
 8003704:	08003745 	.word	0x08003745
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8003708:	89fb      	ldrh	r3, [r7, #14]
 800370a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800370e:	81fb      	strh	r3, [r7, #14]
			break;
 8003710:	e01d      	b.n	800374e <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 8003712:	89fb      	ldrh	r3, [r7, #14]
 8003714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003718:	81fb      	strh	r3, [r7, #14]
			break;
 800371a:	e018      	b.n	800374e <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 800371c:	89fb      	ldrh	r3, [r7, #14]
 800371e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003722:	81fb      	strh	r3, [r7, #14]
			break;
 8003724:	e013      	b.n	800374e <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 8003726:	89fb      	ldrh	r3, [r7, #14]
 8003728:	f043 0320 	orr.w	r3, r3, #32
 800372c:	81fb      	strh	r3, [r7, #14]
			break;
 800372e:	e00e      	b.n	800374e <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8003730:	89fb      	ldrh	r3, [r7, #14]
 8003732:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003736:	81fb      	strh	r3, [r7, #14]
			break;
 8003738:	e009      	b.n	800374e <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 800373a:	89fb      	ldrh	r3, [r7, #14]
 800373c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003740:	81fb      	strh	r3, [r7, #14]
			break;
 8003742:	e004      	b.n	800374e <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8003744:	89fb      	ldrh	r3, [r7, #14]
 8003746:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800374a:	81fb      	strh	r3, [r7, #14]
			break;
 800374c:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 800374e:	4b27      	ldr	r3, [pc, #156]	; (80037ec <LCD_Scan_Dir+0x1f4>)
 8003750:	889b      	ldrh	r3, [r3, #4]
 8003752:	f245 5210 	movw	r2, #21776	; 0x5510
 8003756:	4293      	cmp	r3, r2
 8003758:	d103      	bne.n	8003762 <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 800375a:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 800375e:	81bb      	strh	r3, [r7, #12]
 8003760:	e001      	b.n	8003766 <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 8003762:	2336      	movs	r3, #54	; 0x36
 8003764:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 8003766:	4b21      	ldr	r3, [pc, #132]	; (80037ec <LCD_Scan_Dir+0x1f4>)
 8003768:	889b      	ldrh	r3, [r3, #4]
 800376a:	f245 3210 	movw	r2, #21264	; 0x5310
 800376e:	4293      	cmp	r3, r2
 8003770:	d00f      	beq.n	8003792 <LCD_Scan_Dir+0x19a>
 8003772:	4b1e      	ldr	r3, [pc, #120]	; (80037ec <LCD_Scan_Dir+0x1f4>)
 8003774:	889b      	ldrh	r3, [r3, #4]
 8003776:	f245 5210 	movw	r2, #21776	; 0x5510
 800377a:	4293      	cmp	r3, r2
 800377c:	d009      	beq.n	8003792 <LCD_Scan_Dir+0x19a>
 800377e:	4b1b      	ldr	r3, [pc, #108]	; (80037ec <LCD_Scan_Dir+0x1f4>)
 8003780:	889b      	ldrh	r3, [r3, #4]
 8003782:	f641 1263 	movw	r2, #6499	; 0x1963
 8003786:	4293      	cmp	r3, r2
 8003788:	d003      	beq.n	8003792 <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 800378a:	89fb      	ldrh	r3, [r7, #14]
 800378c:	f043 0308 	orr.w	r3, r3, #8
 8003790:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 8003792:	4b16      	ldr	r3, [pc, #88]	; (80037ec <LCD_Scan_Dir+0x1f4>)
 8003794:	889b      	ldrh	r3, [r3, #4]
 8003796:	f646 0204 	movw	r2, #26628	; 0x6804
 800379a:	4293      	cmp	r3, r2
 800379c:	d103      	bne.n	80037a6 <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 800379e:	89fb      	ldrh	r3, [r7, #14]
 80037a0:	f043 0302 	orr.w	r3, r3, #2
 80037a4:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80037a6:	89fa      	ldrh	r2, [r7, #14]
 80037a8:	89bb      	ldrh	r3, [r7, #12]
 80037aa:	4611      	mov	r1, r2
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff fc11 	bl	8002fd4 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 80037b2:	4b0e      	ldr	r3, [pc, #56]	; (80037ec <LCD_Scan_Dir+0x1f4>)
 80037b4:	889b      	ldrh	r3, [r3, #4]
 80037b6:	f641 1263 	movw	r2, #6499	; 0x1963
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d028      	beq.n	8003810 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 80037be:	89fb      	ldrh	r3, [r7, #14]
 80037c0:	f003 0320 	and.w	r3, r3, #32
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d013      	beq.n	80037f0 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 80037c8:	4b08      	ldr	r3, [pc, #32]	; (80037ec <LCD_Scan_Dir+0x1f4>)
 80037ca:	881a      	ldrh	r2, [r3, #0]
 80037cc:	4b07      	ldr	r3, [pc, #28]	; (80037ec <LCD_Scan_Dir+0x1f4>)
 80037ce:	885b      	ldrh	r3, [r3, #2]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d21d      	bcs.n	8003810 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 80037d4:	4b05      	ldr	r3, [pc, #20]	; (80037ec <LCD_Scan_Dir+0x1f4>)
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 80037da:	4b04      	ldr	r3, [pc, #16]	; (80037ec <LCD_Scan_Dir+0x1f4>)
 80037dc:	885a      	ldrh	r2, [r3, #2]
 80037de:	4b03      	ldr	r3, [pc, #12]	; (80037ec <LCD_Scan_Dir+0x1f4>)
 80037e0:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80037e2:	4a02      	ldr	r2, [pc, #8]	; (80037ec <LCD_Scan_Dir+0x1f4>)
 80037e4:	897b      	ldrh	r3, [r7, #10]
 80037e6:	8053      	strh	r3, [r2, #2]
 80037e8:	e012      	b.n	8003810 <LCD_Scan_Dir+0x218>
 80037ea:	bf00      	nop
 80037ec:	20000290 	.word	0x20000290
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 80037f0:	4b7f      	ldr	r3, [pc, #508]	; (80039f0 <LCD_Scan_Dir+0x3f8>)
 80037f2:	881a      	ldrh	r2, [r3, #0]
 80037f4:	4b7e      	ldr	r3, [pc, #504]	; (80039f0 <LCD_Scan_Dir+0x3f8>)
 80037f6:	885b      	ldrh	r3, [r3, #2]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d909      	bls.n	8003810 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 80037fc:	4b7c      	ldr	r3, [pc, #496]	; (80039f0 <LCD_Scan_Dir+0x3f8>)
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 8003802:	4b7b      	ldr	r3, [pc, #492]	; (80039f0 <LCD_Scan_Dir+0x3f8>)
 8003804:	885a      	ldrh	r2, [r3, #2]
 8003806:	4b7a      	ldr	r3, [pc, #488]	; (80039f0 <LCD_Scan_Dir+0x3f8>)
 8003808:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 800380a:	4a79      	ldr	r2, [pc, #484]	; (80039f0 <LCD_Scan_Dir+0x3f8>)
 800380c:	897b      	ldrh	r3, [r7, #10]
 800380e:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 8003810:	4b77      	ldr	r3, [pc, #476]	; (80039f0 <LCD_Scan_Dir+0x3f8>)
 8003812:	889b      	ldrh	r3, [r3, #4]
 8003814:	f245 5210 	movw	r2, #21776	; 0x5510
 8003818:	4293      	cmp	r3, r2
 800381a:	f040 80ef 	bne.w	80039fc <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 800381e:	4b74      	ldr	r3, [pc, #464]	; (80039f0 <LCD_Scan_Dir+0x3f8>)
 8003820:	895b      	ldrh	r3, [r3, #10]
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff fb4a 	bl	8002ebc <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003828:	4b72      	ldr	r3, [pc, #456]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 800382a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800382e:	611a      	str	r2, [r3, #16]
 8003830:	4b70      	ldr	r3, [pc, #448]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 8003832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003836:	615a      	str	r2, [r3, #20]
 8003838:	4b6f      	ldr	r3, [pc, #444]	; (80039f8 <LCD_Scan_Dir+0x400>)
 800383a:	2200      	movs	r2, #0
 800383c:	60da      	str	r2, [r3, #12]
 800383e:	4b6d      	ldr	r3, [pc, #436]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 8003840:	2280      	movs	r2, #128	; 0x80
 8003842:	615a      	str	r2, [r3, #20]
 8003844:	4b6b      	ldr	r3, [pc, #428]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 8003846:	2280      	movs	r2, #128	; 0x80
 8003848:	611a      	str	r2, [r3, #16]
 800384a:	4b6a      	ldr	r3, [pc, #424]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 800384c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003850:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 8003852:	4b67      	ldr	r3, [pc, #412]	; (80039f0 <LCD_Scan_Dir+0x3f8>)
 8003854:	895b      	ldrh	r3, [r3, #10]
 8003856:	3301      	adds	r3, #1
 8003858:	b29b      	uxth	r3, r3
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff fb2e 	bl	8002ebc <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003860:	4b64      	ldr	r3, [pc, #400]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 8003862:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003866:	611a      	str	r2, [r3, #16]
 8003868:	4b62      	ldr	r3, [pc, #392]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 800386a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800386e:	615a      	str	r2, [r3, #20]
 8003870:	4b61      	ldr	r3, [pc, #388]	; (80039f8 <LCD_Scan_Dir+0x400>)
 8003872:	2200      	movs	r2, #0
 8003874:	60da      	str	r2, [r3, #12]
 8003876:	4b5f      	ldr	r3, [pc, #380]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 8003878:	2280      	movs	r2, #128	; 0x80
 800387a:	615a      	str	r2, [r3, #20]
 800387c:	4b5d      	ldr	r3, [pc, #372]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 800387e:	2280      	movs	r2, #128	; 0x80
 8003880:	611a      	str	r2, [r3, #16]
 8003882:	4b5c      	ldr	r3, [pc, #368]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 8003884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003888:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 800388a:	4b59      	ldr	r3, [pc, #356]	; (80039f0 <LCD_Scan_Dir+0x3f8>)
 800388c:	895b      	ldrh	r3, [r3, #10]
 800388e:	3302      	adds	r3, #2
 8003890:	b29b      	uxth	r3, r3
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff fb12 	bl	8002ebc <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8003898:	4b56      	ldr	r3, [pc, #344]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 800389a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800389e:	611a      	str	r2, [r3, #16]
 80038a0:	4b54      	ldr	r3, [pc, #336]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 80038a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038a6:	615a      	str	r2, [r3, #20]
 80038a8:	4b51      	ldr	r3, [pc, #324]	; (80039f0 <LCD_Scan_Dir+0x3f8>)
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	3b01      	subs	r3, #1
 80038ae:	121a      	asrs	r2, r3, #8
 80038b0:	4b51      	ldr	r3, [pc, #324]	; (80039f8 <LCD_Scan_Dir+0x400>)
 80038b2:	60da      	str	r2, [r3, #12]
 80038b4:	4b4f      	ldr	r3, [pc, #316]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 80038b6:	2280      	movs	r2, #128	; 0x80
 80038b8:	615a      	str	r2, [r3, #20]
 80038ba:	4b4e      	ldr	r3, [pc, #312]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 80038bc:	2280      	movs	r2, #128	; 0x80
 80038be:	611a      	str	r2, [r3, #16]
 80038c0:	4b4c      	ldr	r3, [pc, #304]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 80038c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038c6:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 80038c8:	4b49      	ldr	r3, [pc, #292]	; (80039f0 <LCD_Scan_Dir+0x3f8>)
 80038ca:	895b      	ldrh	r3, [r3, #10]
 80038cc:	3303      	adds	r3, #3
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff faf3 	bl	8002ebc <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80038d6:	4b47      	ldr	r3, [pc, #284]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 80038d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038dc:	611a      	str	r2, [r3, #16]
 80038de:	4b45      	ldr	r3, [pc, #276]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 80038e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038e4:	615a      	str	r2, [r3, #20]
 80038e6:	4b42      	ldr	r3, [pc, #264]	; (80039f0 <LCD_Scan_Dir+0x3f8>)
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	4a42      	ldr	r2, [pc, #264]	; (80039f8 <LCD_Scan_Dir+0x400>)
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	60d3      	str	r3, [r2, #12]
 80038f2:	4b40      	ldr	r3, [pc, #256]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 80038f4:	2280      	movs	r2, #128	; 0x80
 80038f6:	615a      	str	r2, [r3, #20]
 80038f8:	4b3e      	ldr	r3, [pc, #248]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 80038fa:	2280      	movs	r2, #128	; 0x80
 80038fc:	611a      	str	r2, [r3, #16]
 80038fe:	4b3d      	ldr	r3, [pc, #244]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 8003900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003904:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8003906:	4b3a      	ldr	r3, [pc, #232]	; (80039f0 <LCD_Scan_Dir+0x3f8>)
 8003908:	899b      	ldrh	r3, [r3, #12]
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff fad6 	bl	8002ebc <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003910:	4b38      	ldr	r3, [pc, #224]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 8003912:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003916:	611a      	str	r2, [r3, #16]
 8003918:	4b36      	ldr	r3, [pc, #216]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 800391a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800391e:	615a      	str	r2, [r3, #20]
 8003920:	4b35      	ldr	r3, [pc, #212]	; (80039f8 <LCD_Scan_Dir+0x400>)
 8003922:	2200      	movs	r2, #0
 8003924:	60da      	str	r2, [r3, #12]
 8003926:	4b33      	ldr	r3, [pc, #204]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 8003928:	2280      	movs	r2, #128	; 0x80
 800392a:	615a      	str	r2, [r3, #20]
 800392c:	4b31      	ldr	r3, [pc, #196]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 800392e:	2280      	movs	r2, #128	; 0x80
 8003930:	611a      	str	r2, [r3, #16]
 8003932:	4b30      	ldr	r3, [pc, #192]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 8003934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003938:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 800393a:	4b2d      	ldr	r3, [pc, #180]	; (80039f0 <LCD_Scan_Dir+0x3f8>)
 800393c:	899b      	ldrh	r3, [r3, #12]
 800393e:	3301      	adds	r3, #1
 8003940:	b29b      	uxth	r3, r3
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff faba 	bl	8002ebc <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003948:	4b2a      	ldr	r3, [pc, #168]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 800394a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800394e:	611a      	str	r2, [r3, #16]
 8003950:	4b28      	ldr	r3, [pc, #160]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 8003952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003956:	615a      	str	r2, [r3, #20]
 8003958:	4b27      	ldr	r3, [pc, #156]	; (80039f8 <LCD_Scan_Dir+0x400>)
 800395a:	2200      	movs	r2, #0
 800395c:	60da      	str	r2, [r3, #12]
 800395e:	4b25      	ldr	r3, [pc, #148]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 8003960:	2280      	movs	r2, #128	; 0x80
 8003962:	615a      	str	r2, [r3, #20]
 8003964:	4b23      	ldr	r3, [pc, #140]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 8003966:	2280      	movs	r2, #128	; 0x80
 8003968:	611a      	str	r2, [r3, #16]
 800396a:	4b22      	ldr	r3, [pc, #136]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 800396c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003970:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 8003972:	4b1f      	ldr	r3, [pc, #124]	; (80039f0 <LCD_Scan_Dir+0x3f8>)
 8003974:	899b      	ldrh	r3, [r3, #12]
 8003976:	3302      	adds	r3, #2
 8003978:	b29b      	uxth	r3, r3
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff fa9e 	bl	8002ebc <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8003980:	4b1c      	ldr	r3, [pc, #112]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 8003982:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003986:	611a      	str	r2, [r3, #16]
 8003988:	4b1a      	ldr	r3, [pc, #104]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 800398a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800398e:	615a      	str	r2, [r3, #20]
 8003990:	4b17      	ldr	r3, [pc, #92]	; (80039f0 <LCD_Scan_Dir+0x3f8>)
 8003992:	885b      	ldrh	r3, [r3, #2]
 8003994:	3b01      	subs	r3, #1
 8003996:	121a      	asrs	r2, r3, #8
 8003998:	4b17      	ldr	r3, [pc, #92]	; (80039f8 <LCD_Scan_Dir+0x400>)
 800399a:	60da      	str	r2, [r3, #12]
 800399c:	4b15      	ldr	r3, [pc, #84]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 800399e:	2280      	movs	r2, #128	; 0x80
 80039a0:	615a      	str	r2, [r3, #20]
 80039a2:	4b14      	ldr	r3, [pc, #80]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 80039a4:	2280      	movs	r2, #128	; 0x80
 80039a6:	611a      	str	r2, [r3, #16]
 80039a8:	4b12      	ldr	r3, [pc, #72]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 80039aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ae:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 80039b0:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <LCD_Scan_Dir+0x3f8>)
 80039b2:	899b      	ldrh	r3, [r3, #12]
 80039b4:	3303      	adds	r3, #3
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff fa7f 	bl	8002ebc <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80039be:	4b0d      	ldr	r3, [pc, #52]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 80039c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039c4:	611a      	str	r2, [r3, #16]
 80039c6:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 80039c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039cc:	615a      	str	r2, [r3, #20]
 80039ce:	4b08      	ldr	r3, [pc, #32]	; (80039f0 <LCD_Scan_Dir+0x3f8>)
 80039d0:	885b      	ldrh	r3, [r3, #2]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	4a08      	ldr	r2, [pc, #32]	; (80039f8 <LCD_Scan_Dir+0x400>)
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	60d3      	str	r3, [r2, #12]
 80039da:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 80039dc:	2280      	movs	r2, #128	; 0x80
 80039de:	615a      	str	r2, [r3, #20]
 80039e0:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 80039e2:	2280      	movs	r2, #128	; 0x80
 80039e4:	611a      	str	r2, [r3, #16]
 80039e6:	4b03      	ldr	r3, [pc, #12]	; (80039f4 <LCD_Scan_Dir+0x3fc>)
 80039e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ec:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 80039ee:	e10a      	b.n	8003c06 <LCD_Scan_Dir+0x60e>
 80039f0:	20000290 	.word	0x20000290
 80039f4:	40011000 	.word	0x40011000
 80039f8:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 80039fc:	4b84      	ldr	r3, [pc, #528]	; (8003c10 <LCD_Scan_Dir+0x618>)
 80039fe:	895b      	ldrh	r3, [r3, #10]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff fa5b 	bl	8002ebc <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003a06:	4b83      	ldr	r3, [pc, #524]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003a08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a0c:	611a      	str	r2, [r3, #16]
 8003a0e:	4b81      	ldr	r3, [pc, #516]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a14:	615a      	str	r2, [r3, #20]
 8003a16:	4b80      	ldr	r3, [pc, #512]	; (8003c18 <LCD_Scan_Dir+0x620>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	60da      	str	r2, [r3, #12]
 8003a1c:	4b7d      	ldr	r3, [pc, #500]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003a1e:	2280      	movs	r2, #128	; 0x80
 8003a20:	615a      	str	r2, [r3, #20]
 8003a22:	4b7c      	ldr	r3, [pc, #496]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003a24:	2280      	movs	r2, #128	; 0x80
 8003a26:	611a      	str	r2, [r3, #16]
 8003a28:	4b7a      	ldr	r3, [pc, #488]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a2e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8003a30:	4b78      	ldr	r3, [pc, #480]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003a32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a36:	611a      	str	r2, [r3, #16]
 8003a38:	4b76      	ldr	r3, [pc, #472]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a3e:	615a      	str	r2, [r3, #20]
 8003a40:	4b75      	ldr	r3, [pc, #468]	; (8003c18 <LCD_Scan_Dir+0x620>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	60da      	str	r2, [r3, #12]
 8003a46:	4b73      	ldr	r3, [pc, #460]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003a48:	2280      	movs	r2, #128	; 0x80
 8003a4a:	615a      	str	r2, [r3, #20]
 8003a4c:	4b71      	ldr	r3, [pc, #452]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003a4e:	2280      	movs	r2, #128	; 0x80
 8003a50:	611a      	str	r2, [r3, #16]
 8003a52:	4b70      	ldr	r3, [pc, #448]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a58:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8003a5a:	4b6e      	ldr	r3, [pc, #440]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003a5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a60:	611a      	str	r2, [r3, #16]
 8003a62:	4b6c      	ldr	r3, [pc, #432]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a68:	615a      	str	r2, [r3, #20]
 8003a6a:	4b69      	ldr	r3, [pc, #420]	; (8003c10 <LCD_Scan_Dir+0x618>)
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	121a      	asrs	r2, r3, #8
 8003a72:	4b69      	ldr	r3, [pc, #420]	; (8003c18 <LCD_Scan_Dir+0x620>)
 8003a74:	60da      	str	r2, [r3, #12]
 8003a76:	4b67      	ldr	r3, [pc, #412]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003a78:	2280      	movs	r2, #128	; 0x80
 8003a7a:	615a      	str	r2, [r3, #20]
 8003a7c:	4b65      	ldr	r3, [pc, #404]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003a7e:	2280      	movs	r2, #128	; 0x80
 8003a80:	611a      	str	r2, [r3, #16]
 8003a82:	4b64      	ldr	r3, [pc, #400]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a88:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8003a8a:	4b62      	ldr	r3, [pc, #392]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003a8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a90:	611a      	str	r2, [r3, #16]
 8003a92:	4b60      	ldr	r3, [pc, #384]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a98:	615a      	str	r2, [r3, #20]
 8003a9a:	4b5d      	ldr	r3, [pc, #372]	; (8003c10 <LCD_Scan_Dir+0x618>)
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	4a5d      	ldr	r2, [pc, #372]	; (8003c18 <LCD_Scan_Dir+0x620>)
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	60d3      	str	r3, [r2, #12]
 8003aa6:	4b5b      	ldr	r3, [pc, #364]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003aa8:	2280      	movs	r2, #128	; 0x80
 8003aaa:	615a      	str	r2, [r3, #20]
 8003aac:	4b59      	ldr	r3, [pc, #356]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003aae:	2280      	movs	r2, #128	; 0x80
 8003ab0:	611a      	str	r2, [r3, #16]
 8003ab2:	4b58      	ldr	r3, [pc, #352]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ab8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 8003aba:	4b55      	ldr	r3, [pc, #340]	; (8003c10 <LCD_Scan_Dir+0x618>)
 8003abc:	899b      	ldrh	r3, [r3, #12]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff f9fc 	bl	8002ebc <LCD_WR_REG>
			LCD_WR_DATA(0);
 8003ac4:	4b53      	ldr	r3, [pc, #332]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003aca:	611a      	str	r2, [r3, #16]
 8003acc:	4b51      	ldr	r3, [pc, #324]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ad2:	615a      	str	r2, [r3, #20]
 8003ad4:	4b50      	ldr	r3, [pc, #320]	; (8003c18 <LCD_Scan_Dir+0x620>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	60da      	str	r2, [r3, #12]
 8003ada:	4b4e      	ldr	r3, [pc, #312]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003adc:	2280      	movs	r2, #128	; 0x80
 8003ade:	615a      	str	r2, [r3, #20]
 8003ae0:	4b4c      	ldr	r3, [pc, #304]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003ae2:	2280      	movs	r2, #128	; 0x80
 8003ae4:	611a      	str	r2, [r3, #16]
 8003ae6:	4b4b      	ldr	r3, [pc, #300]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aec:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8003aee:	4b49      	ldr	r3, [pc, #292]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003af0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003af4:	611a      	str	r2, [r3, #16]
 8003af6:	4b47      	ldr	r3, [pc, #284]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003afc:	615a      	str	r2, [r3, #20]
 8003afe:	4b46      	ldr	r3, [pc, #280]	; (8003c18 <LCD_Scan_Dir+0x620>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	60da      	str	r2, [r3, #12]
 8003b04:	4b43      	ldr	r3, [pc, #268]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003b06:	2280      	movs	r2, #128	; 0x80
 8003b08:	615a      	str	r2, [r3, #20]
 8003b0a:	4b42      	ldr	r3, [pc, #264]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003b0c:	2280      	movs	r2, #128	; 0x80
 8003b0e:	611a      	str	r2, [r3, #16]
 8003b10:	4b40      	ldr	r3, [pc, #256]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003b12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b16:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8003b18:	4b3e      	ldr	r3, [pc, #248]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003b1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b1e:	611a      	str	r2, [r3, #16]
 8003b20:	4b3c      	ldr	r3, [pc, #240]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003b22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b26:	615a      	str	r2, [r3, #20]
 8003b28:	4b39      	ldr	r3, [pc, #228]	; (8003c10 <LCD_Scan_Dir+0x618>)
 8003b2a:	885b      	ldrh	r3, [r3, #2]
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	121a      	asrs	r2, r3, #8
 8003b30:	4b39      	ldr	r3, [pc, #228]	; (8003c18 <LCD_Scan_Dir+0x620>)
 8003b32:	60da      	str	r2, [r3, #12]
 8003b34:	4b37      	ldr	r3, [pc, #220]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003b36:	2280      	movs	r2, #128	; 0x80
 8003b38:	615a      	str	r2, [r3, #20]
 8003b3a:	4b36      	ldr	r3, [pc, #216]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003b3c:	2280      	movs	r2, #128	; 0x80
 8003b3e:	611a      	str	r2, [r3, #16]
 8003b40:	4b34      	ldr	r3, [pc, #208]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b46:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8003b48:	4b32      	ldr	r3, [pc, #200]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003b4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b4e:	611a      	str	r2, [r3, #16]
 8003b50:	4b30      	ldr	r3, [pc, #192]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b56:	615a      	str	r2, [r3, #20]
 8003b58:	4b2d      	ldr	r3, [pc, #180]	; (8003c10 <LCD_Scan_Dir+0x618>)
 8003b5a:	885b      	ldrh	r3, [r3, #2]
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	4a2e      	ldr	r2, [pc, #184]	; (8003c18 <LCD_Scan_Dir+0x620>)
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	60d3      	str	r3, [r2, #12]
 8003b64:	4b2b      	ldr	r3, [pc, #172]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003b66:	2280      	movs	r2, #128	; 0x80
 8003b68:	615a      	str	r2, [r3, #20]
 8003b6a:	4b2a      	ldr	r3, [pc, #168]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003b6c:	2280      	movs	r2, #128	; 0x80
 8003b6e:	611a      	str	r2, [r3, #16]
 8003b70:	4b28      	ldr	r3, [pc, #160]	; (8003c14 <LCD_Scan_Dir+0x61c>)
 8003b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b76:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8003b78:	e045      	b.n	8003c06 <LCD_Scan_Dir+0x60e>
		}
	} else {
		switch (dir) {
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	2b07      	cmp	r3, #7
 8003b7e:	d836      	bhi.n	8003bee <LCD_Scan_Dir+0x5f6>
 8003b80:	a201      	add	r2, pc, #4	; (adr r2, 8003b88 <LCD_Scan_Dir+0x590>)
 8003b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b86:	bf00      	nop
 8003b88:	08003ba9 	.word	0x08003ba9
 8003b8c:	08003bb3 	.word	0x08003bb3
 8003b90:	08003bbd 	.word	0x08003bbd
 8003b94:	08003bef 	.word	0x08003bef
 8003b98:	08003bc7 	.word	0x08003bc7
 8003b9c:	08003bd1 	.word	0x08003bd1
 8003ba0:	08003bdb 	.word	0x08003bdb
 8003ba4:	08003be5 	.word	0x08003be5
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 8003ba8:	89fb      	ldrh	r3, [r7, #14]
 8003baa:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003bae:	81fb      	strh	r3, [r7, #14]
			break;
 8003bb0:	e01d      	b.n	8003bee <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 8003bb2:	89fb      	ldrh	r3, [r7, #14]
 8003bb4:	f043 0310 	orr.w	r3, r3, #16
 8003bb8:	81fb      	strh	r3, [r7, #14]
			break;
 8003bba:	e018      	b.n	8003bee <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 8003bbc:	89fb      	ldrh	r3, [r7, #14]
 8003bbe:	f043 0320 	orr.w	r3, r3, #32
 8003bc2:	81fb      	strh	r3, [r7, #14]
			break;
 8003bc4:	e013      	b.n	8003bee <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 8003bc6:	89fb      	ldrh	r3, [r7, #14]
 8003bc8:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003bcc:	81fb      	strh	r3, [r7, #14]
			break;
 8003bce:	e00e      	b.n	8003bee <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 8003bd0:	89fb      	ldrh	r3, [r7, #14]
 8003bd2:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003bd6:	81fb      	strh	r3, [r7, #14]
			break;
 8003bd8:	e009      	b.n	8003bee <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 8003bda:	89fb      	ldrh	r3, [r7, #14]
 8003bdc:	f043 0318 	orr.w	r3, r3, #24
 8003be0:	81fb      	strh	r3, [r7, #14]
			break;
 8003be2:	e004      	b.n	8003bee <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 8003be4:	89fb      	ldrh	r3, [r7, #14]
 8003be6:	f043 0308 	orr.w	r3, r3, #8
 8003bea:	81fb      	strh	r3, [r7, #14]
			break;
 8003bec:	bf00      	nop
		}
		dirreg = 0X03;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 8003bf2:	89fb      	ldrh	r3, [r7, #14]
 8003bf4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bf8:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8003bfa:	89fa      	ldrh	r2, [r7, #14]
 8003bfc:	89bb      	ldrh	r3, [r7, #12]
 8003bfe:	4611      	mov	r1, r2
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff f9e7 	bl	8002fd4 <LCD_WriteReg>
	}
}
 8003c06:	bf00      	nop
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000290 	.word	0x20000290
 8003c14:	40011000 	.word	0x40011000
 8003c18:	40010c00 	.word	0x40010c00
 8003c1c:	00000000 	.word	0x00000000

08003c20 <LCD_SSD_BackLightSet>:
	LCD_CS_SET;
	LCD_WR_DATA(color);		//写数据
}
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8003c20:	b590      	push	{r4, r7, lr}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8003c2a:	20be      	movs	r0, #190	; 0xbe
 8003c2c:	f7ff f946 	bl	8002ebc <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8003c30:	4b4b      	ldr	r3, [pc, #300]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003c32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c36:	611a      	str	r2, [r3, #16]
 8003c38:	4b49      	ldr	r3, [pc, #292]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c3e:	615a      	str	r2, [r3, #20]
 8003c40:	4b48      	ldr	r3, [pc, #288]	; (8003d64 <LCD_SSD_BackLightSet+0x144>)
 8003c42:	2205      	movs	r2, #5
 8003c44:	60da      	str	r2, [r3, #12]
 8003c46:	4b46      	ldr	r3, [pc, #280]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003c48:	2280      	movs	r2, #128	; 0x80
 8003c4a:	615a      	str	r2, [r3, #20]
 8003c4c:	4b44      	ldr	r3, [pc, #272]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003c4e:	2280      	movs	r2, #128	; 0x80
 8003c50:	611a      	str	r2, [r3, #16]
 8003c52:	4b43      	ldr	r3, [pc, #268]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c58:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8003c5a:	4b41      	ldr	r3, [pc, #260]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003c5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c60:	611a      	str	r2, [r3, #16]
 8003c62:	4b3f      	ldr	r3, [pc, #252]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003c64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c68:	615a      	str	r2, [r3, #20]
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7fc fc35 	bl	80004dc <__aeabi_i2d>
 8003c72:	a339      	add	r3, pc, #228	; (adr r3, 8003d58 <LCD_SSD_BackLightSet+0x138>)
 8003c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c78:	f7fc fc9a 	bl	80005b0 <__aeabi_dmul>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	460c      	mov	r4, r1
 8003c80:	461a      	mov	r2, r3
 8003c82:	4623      	mov	r3, r4
 8003c84:	4c37      	ldr	r4, [pc, #220]	; (8003d64 <LCD_SSD_BackLightSet+0x144>)
 8003c86:	4610      	mov	r0, r2
 8003c88:	4619      	mov	r1, r3
 8003c8a:	f7fc ff69 	bl	8000b60 <__aeabi_d2uiz>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	60e3      	str	r3, [r4, #12]
 8003c92:	4b33      	ldr	r3, [pc, #204]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003c94:	2280      	movs	r2, #128	; 0x80
 8003c96:	615a      	str	r2, [r3, #20]
 8003c98:	4b31      	ldr	r3, [pc, #196]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003c9a:	2280      	movs	r2, #128	; 0x80
 8003c9c:	611a      	str	r2, [r3, #16]
 8003c9e:	4b30      	ldr	r3, [pc, #192]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ca4:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8003ca6:	4b2e      	ldr	r3, [pc, #184]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003ca8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cac:	611a      	str	r2, [r3, #16]
 8003cae:	4b2c      	ldr	r3, [pc, #176]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cb4:	615a      	str	r2, [r3, #20]
 8003cb6:	4b2b      	ldr	r3, [pc, #172]	; (8003d64 <LCD_SSD_BackLightSet+0x144>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	60da      	str	r2, [r3, #12]
 8003cbc:	4b28      	ldr	r3, [pc, #160]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003cbe:	2280      	movs	r2, #128	; 0x80
 8003cc0:	615a      	str	r2, [r3, #20]
 8003cc2:	4b27      	ldr	r3, [pc, #156]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003cc4:	2280      	movs	r2, #128	; 0x80
 8003cc6:	611a      	str	r2, [r3, #16]
 8003cc8:	4b25      	ldr	r3, [pc, #148]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003cca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cce:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8003cd0:	4b23      	ldr	r3, [pc, #140]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cd6:	611a      	str	r2, [r3, #16]
 8003cd8:	4b21      	ldr	r3, [pc, #132]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cde:	615a      	str	r2, [r3, #20]
 8003ce0:	4b20      	ldr	r3, [pc, #128]	; (8003d64 <LCD_SSD_BackLightSet+0x144>)
 8003ce2:	22ff      	movs	r2, #255	; 0xff
 8003ce4:	60da      	str	r2, [r3, #12]
 8003ce6:	4b1e      	ldr	r3, [pc, #120]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003ce8:	2280      	movs	r2, #128	; 0x80
 8003cea:	615a      	str	r2, [r3, #20]
 8003cec:	4b1c      	ldr	r3, [pc, #112]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003cee:	2280      	movs	r2, #128	; 0x80
 8003cf0:	611a      	str	r2, [r3, #16]
 8003cf2:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cf8:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8003cfa:	4b19      	ldr	r3, [pc, #100]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003cfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d00:	611a      	str	r2, [r3, #16]
 8003d02:	4b17      	ldr	r3, [pc, #92]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d08:	615a      	str	r2, [r3, #20]
 8003d0a:	4b16      	ldr	r3, [pc, #88]	; (8003d64 <LCD_SSD_BackLightSet+0x144>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	60da      	str	r2, [r3, #12]
 8003d10:	4b13      	ldr	r3, [pc, #76]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003d12:	2280      	movs	r2, #128	; 0x80
 8003d14:	615a      	str	r2, [r3, #20]
 8003d16:	4b12      	ldr	r3, [pc, #72]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003d18:	2280      	movs	r2, #128	; 0x80
 8003d1a:	611a      	str	r2, [r3, #16]
 8003d1c:	4b10      	ldr	r3, [pc, #64]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d22:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 8003d24:	4b0e      	ldr	r3, [pc, #56]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003d26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d2a:	611a      	str	r2, [r3, #16]
 8003d2c:	4b0c      	ldr	r3, [pc, #48]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d32:	615a      	str	r2, [r3, #20]
 8003d34:	4b0b      	ldr	r3, [pc, #44]	; (8003d64 <LCD_SSD_BackLightSet+0x144>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	60da      	str	r2, [r3, #12]
 8003d3a:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003d3c:	2280      	movs	r2, #128	; 0x80
 8003d3e:	615a      	str	r2, [r3, #20]
 8003d40:	4b07      	ldr	r3, [pc, #28]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003d42:	2280      	movs	r2, #128	; 0x80
 8003d44:	611a      	str	r2, [r3, #16]
 8003d46:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <LCD_SSD_BackLightSet+0x140>)
 8003d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d4c:	611a      	str	r2, [r3, #16]
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd90      	pop	{r4, r7, pc}
 8003d56:	bf00      	nop
 8003d58:	66666666 	.word	0x66666666
 8003d5c:	40046666 	.word	0x40046666
 8003d60:	40011000 	.word	0x40011000
 8003d64:	40010c00 	.word	0x40010c00

08003d68 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	4603      	mov	r3, r0
 8003d70:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d177      	bne.n	8003e68 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8003d78:	4b80      	ldr	r3, [pc, #512]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8003d7e:	4b7f      	ldr	r3, [pc, #508]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003d80:	22f0      	movs	r2, #240	; 0xf0
 8003d82:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8003d84:	4b7d      	ldr	r3, [pc, #500]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003d86:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003d8a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8003d8c:	4b7b      	ldr	r3, [pc, #492]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003d8e:	889b      	ldrh	r3, [r3, #4]
 8003d90:	f249 3241 	movw	r2, #37697	; 0x9341
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d00b      	beq.n	8003db0 <LCD_Display_Dir+0x48>
 8003d98:	4b78      	ldr	r3, [pc, #480]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003d9a:	889b      	ldrh	r3, [r3, #4]
 8003d9c:	f646 0204 	movw	r2, #26628	; 0x6804
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d005      	beq.n	8003db0 <LCD_Display_Dir+0x48>
 8003da4:	4b75      	ldr	r3, [pc, #468]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003da6:	889b      	ldrh	r3, [r3, #4]
 8003da8:	f245 3210 	movw	r2, #21264	; 0x5310
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d11e      	bne.n	8003dee <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8003db0:	4b72      	ldr	r3, [pc, #456]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003db2:	222c      	movs	r2, #44	; 0x2c
 8003db4:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8003db6:	4b71      	ldr	r3, [pc, #452]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003db8:	222a      	movs	r2, #42	; 0x2a
 8003dba:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8003dbc:	4b6f      	ldr	r3, [pc, #444]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003dbe:	222b      	movs	r2, #43	; 0x2b
 8003dc0:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8003dc2:	4b6e      	ldr	r3, [pc, #440]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003dc4:	889b      	ldrh	r3, [r3, #4]
 8003dc6:	f646 0204 	movw	r2, #26628	; 0x6804
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d006      	beq.n	8003ddc <LCD_Display_Dir+0x74>
 8003dce:	4b6b      	ldr	r3, [pc, #428]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003dd0:	889b      	ldrh	r3, [r3, #4]
 8003dd2:	f245 3210 	movw	r2, #21264	; 0x5310
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	f040 80c7 	bne.w	8003f6a <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8003ddc:	4b67      	ldr	r3, [pc, #412]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003dde:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003de2:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8003de4:	4b65      	ldr	r3, [pc, #404]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003de6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003dea:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8003dec:	e0bd      	b.n	8003f6a <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8003dee:	4b63      	ldr	r3, [pc, #396]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003df0:	889b      	ldrh	r3, [r3, #4]
 8003df2:	f245 5210 	movw	r2, #21776	; 0x5510
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d114      	bne.n	8003e24 <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8003dfa:	4b60      	ldr	r3, [pc, #384]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003dfc:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8003e00:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8003e02:	4b5e      	ldr	r3, [pc, #376]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003e04:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8003e08:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8003e0a:	4b5c      	ldr	r3, [pc, #368]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003e0c:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8003e10:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8003e12:	4b5a      	ldr	r3, [pc, #360]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003e14:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003e18:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8003e1a:	4b58      	ldr	r3, [pc, #352]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003e1c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003e20:	805a      	strh	r2, [r3, #2]
 8003e22:	e0a3      	b.n	8003f6c <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 8003e24:	4b55      	ldr	r3, [pc, #340]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003e26:	889b      	ldrh	r3, [r3, #4]
 8003e28:	f641 1263 	movw	r2, #6499	; 0x1963
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d111      	bne.n	8003e54 <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8003e30:	4b52      	ldr	r3, [pc, #328]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003e32:	222c      	movs	r2, #44	; 0x2c
 8003e34:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 8003e36:	4b51      	ldr	r3, [pc, #324]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003e38:	222b      	movs	r2, #43	; 0x2b
 8003e3a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8003e3c:	4b4f      	ldr	r3, [pc, #316]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003e3e:	222a      	movs	r2, #42	; 0x2a
 8003e40:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8003e42:	4b4e      	ldr	r3, [pc, #312]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003e44:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003e48:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8003e4a:	4b4c      	ldr	r3, [pc, #304]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003e4c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003e50:	805a      	strh	r2, [r3, #2]
 8003e52:	e08b      	b.n	8003f6c <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8003e54:	4b49      	ldr	r3, [pc, #292]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003e56:	2222      	movs	r2, #34	; 0x22
 8003e58:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8003e5a:	4b48      	ldr	r3, [pc, #288]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8003e60:	4b46      	ldr	r3, [pc, #280]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003e62:	2221      	movs	r2, #33	; 0x21
 8003e64:	819a      	strh	r2, [r3, #12]
 8003e66:	e081      	b.n	8003f6c <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8003e68:	4b44      	ldr	r3, [pc, #272]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 8003e6e:	4b43      	ldr	r3, [pc, #268]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003e70:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003e74:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8003e76:	4b41      	ldr	r3, [pc, #260]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003e78:	22f0      	movs	r2, #240	; 0xf0
 8003e7a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8003e7c:	4b3f      	ldr	r3, [pc, #252]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003e7e:	889b      	ldrh	r3, [r3, #4]
 8003e80:	f249 3241 	movw	r2, #37697	; 0x9341
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d005      	beq.n	8003e94 <LCD_Display_Dir+0x12c>
 8003e88:	4b3c      	ldr	r3, [pc, #240]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003e8a:	889b      	ldrh	r3, [r3, #4]
 8003e8c:	f245 3210 	movw	r2, #21264	; 0x5310
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d109      	bne.n	8003ea8 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 8003e94:	4b39      	ldr	r3, [pc, #228]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003e96:	222c      	movs	r2, #44	; 0x2c
 8003e98:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8003e9a:	4b38      	ldr	r3, [pc, #224]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003e9c:	222a      	movs	r2, #42	; 0x2a
 8003e9e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8003ea0:	4b36      	ldr	r3, [pc, #216]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003ea2:	222b      	movs	r2, #43	; 0x2b
 8003ea4:	819a      	strh	r2, [r3, #12]
 8003ea6:	e04b      	b.n	8003f40 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8003ea8:	4b34      	ldr	r3, [pc, #208]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003eaa:	889b      	ldrh	r3, [r3, #4]
 8003eac:	f646 0204 	movw	r2, #26628	; 0x6804
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d109      	bne.n	8003ec8 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8003eb4:	4b31      	ldr	r3, [pc, #196]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003eb6:	222c      	movs	r2, #44	; 0x2c
 8003eb8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 8003eba:	4b30      	ldr	r3, [pc, #192]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003ebc:	222b      	movs	r2, #43	; 0x2b
 8003ebe:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8003ec0:	4b2e      	ldr	r3, [pc, #184]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003ec2:	222a      	movs	r2, #42	; 0x2a
 8003ec4:	819a      	strh	r2, [r3, #12]
 8003ec6:	e03b      	b.n	8003f40 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8003ec8:	4b2c      	ldr	r3, [pc, #176]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003eca:	889b      	ldrh	r3, [r3, #4]
 8003ecc:	f245 5210 	movw	r2, #21776	; 0x5510
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d114      	bne.n	8003efe <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 8003ed4:	4b29      	ldr	r3, [pc, #164]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003ed6:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8003eda:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8003edc:	4b27      	ldr	r3, [pc, #156]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003ede:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8003ee2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8003ee4:	4b25      	ldr	r3, [pc, #148]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003ee6:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8003eea:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 8003eec:	4b23      	ldr	r3, [pc, #140]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003eee:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003ef2:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8003ef4:	4b21      	ldr	r3, [pc, #132]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003ef6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003efa:	805a      	strh	r2, [r3, #2]
 8003efc:	e020      	b.n	8003f40 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 8003efe:	4b1f      	ldr	r3, [pc, #124]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003f00:	889b      	ldrh	r3, [r3, #4]
 8003f02:	f641 1263 	movw	r2, #6499	; 0x1963
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d111      	bne.n	8003f2e <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8003f0a:	4b1c      	ldr	r3, [pc, #112]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003f0c:	222c      	movs	r2, #44	; 0x2c
 8003f0e:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8003f10:	4b1a      	ldr	r3, [pc, #104]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003f12:	222a      	movs	r2, #42	; 0x2a
 8003f14:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 8003f16:	4b19      	ldr	r3, [pc, #100]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003f18:	222b      	movs	r2, #43	; 0x2b
 8003f1a:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8003f1c:	4b17      	ldr	r3, [pc, #92]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003f1e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003f22:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 8003f24:	4b15      	ldr	r3, [pc, #84]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003f26:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003f2a:	805a      	strh	r2, [r3, #2]
 8003f2c:	e008      	b.n	8003f40 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 8003f2e:	4b13      	ldr	r3, [pc, #76]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003f30:	2222      	movs	r2, #34	; 0x22
 8003f32:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8003f34:	4b11      	ldr	r3, [pc, #68]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003f36:	2221      	movs	r2, #33	; 0x21
 8003f38:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 8003f3a:	4b10      	ldr	r3, [pc, #64]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8003f40:	4b0e      	ldr	r3, [pc, #56]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003f42:	889b      	ldrh	r3, [r3, #4]
 8003f44:	f646 0204 	movw	r2, #26628	; 0x6804
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d005      	beq.n	8003f58 <LCD_Display_Dir+0x1f0>
 8003f4c:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003f4e:	889b      	ldrh	r3, [r3, #4]
 8003f50:	f245 3210 	movw	r2, #21264	; 0x5310
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d109      	bne.n	8003f6c <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8003f58:	4b08      	ldr	r3, [pc, #32]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003f5a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003f5e:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8003f60:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <LCD_Display_Dir+0x214>)
 8003f62:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003f66:	805a      	strh	r2, [r3, #2]
 8003f68:	e000      	b.n	8003f6c <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8003f6a:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	f7ff fb43 	bl	80035f8 <LCD_Scan_Dir>
}
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	20000290 	.word	0x20000290

08003f80 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8003f86:	4b90      	ldr	r3, [pc, #576]	; (80041c8 <LCD_Init+0x248>)
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	4a8f      	ldr	r2, [pc, #572]	; (80041c8 <LCD_Init+0x248>)
 8003f8c:	f043 0308 	orr.w	r3, r3, #8
 8003f90:	6193      	str	r3, [r2, #24]
 8003f92:	4b8d      	ldr	r3, [pc, #564]	; (80041c8 <LCD_Init+0x248>)
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	607b      	str	r3, [r7, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 8003f9e:	4b8a      	ldr	r3, [pc, #552]	; (80041c8 <LCD_Init+0x248>)
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	4a89      	ldr	r2, [pc, #548]	; (80041c8 <LCD_Init+0x248>)
 8003fa4:	f043 0310 	orr.w	r3, r3, #16
 8003fa8:	6193      	str	r3, [r2, #24]
 8003faa:	4b87      	ldr	r3, [pc, #540]	; (80041c8 <LCD_Init+0x248>)
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	f003 0310 	and.w	r3, r3, #16
 8003fb2:	603b      	str	r3, [r7, #0]
 8003fb4:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8003fb6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8003fba:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8003fc8:	f107 0308 	add.w	r3, r7, #8
 8003fcc:	4619      	mov	r1, r3
 8003fce:	487f      	ldr	r0, [pc, #508]	; (80041cc <LCD_Init+0x24c>)
 8003fd0:	f7fd fa92 	bl	80014f8 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 8003fd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fd8:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 8003fda:	f107 0308 	add.w	r3, r7, #8
 8003fde:	4619      	mov	r1, r3
 8003fe0:	487b      	ldr	r0, [pc, #492]	; (80041d0 <LCD_Init+0x250>)
 8003fe2:	f7fd fa89 	bl	80014f8 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 8003fe6:	2032      	movs	r0, #50	; 0x32
 8003fe8:	f7fd f956 	bl	8001298 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 8003fec:	2101      	movs	r1, #1
 8003fee:	2000      	movs	r0, #0
 8003ff0:	f7fe fff0 	bl	8002fd4 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8003ff4:	2032      	movs	r0, #50	; 0x32
 8003ff6:	f7fd f94f 	bl	8001298 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 8003ffa:	2000      	movs	r0, #0
 8003ffc:	f7ff f814 	bl	8003028 <LCD_ReadReg>
 8004000:	4603      	mov	r3, r0
 8004002:	461a      	mov	r2, r3
 8004004:	4b73      	ldr	r3, [pc, #460]	; (80041d4 <LCD_Init+0x254>)
 8004006:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8004008:	4b72      	ldr	r3, [pc, #456]	; (80041d4 <LCD_Init+0x254>)
 800400a:	889b      	ldrh	r3, [r3, #4]
 800400c:	2bfe      	cmp	r3, #254	; 0xfe
 800400e:	d90b      	bls.n	8004028 <LCD_Init+0xa8>
 8004010:	4b70      	ldr	r3, [pc, #448]	; (80041d4 <LCD_Init+0x254>)
 8004012:	889b      	ldrh	r3, [r3, #4]
 8004014:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004018:	4293      	cmp	r3, r2
 800401a:	d005      	beq.n	8004028 <LCD_Init+0xa8>
 800401c:	4b6d      	ldr	r3, [pc, #436]	; (80041d4 <LCD_Init+0x254>)
 800401e:	889b      	ldrh	r3, [r3, #4]
 8004020:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8004024:	f040 80c8 	bne.w	80041b8 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8004028:	20d3      	movs	r0, #211	; 0xd3
 800402a:	f7fe ff47 	bl	8002ebc <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 800402e:	f7fe ff8d 	bl	8002f4c <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 8004032:	f7fe ff8b 	bl	8002f4c <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 8004036:	f7fe ff89 	bl	8002f4c <LCD_RD_DATA>
 800403a:	4603      	mov	r3, r0
 800403c:	461a      	mov	r2, r3
 800403e:	4b65      	ldr	r3, [pc, #404]	; (80041d4 <LCD_Init+0x254>)
 8004040:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 8004042:	4b64      	ldr	r3, [pc, #400]	; (80041d4 <LCD_Init+0x254>)
 8004044:	889b      	ldrh	r3, [r3, #4]
 8004046:	021b      	lsls	r3, r3, #8
 8004048:	b29a      	uxth	r2, r3
 800404a:	4b62      	ldr	r3, [pc, #392]	; (80041d4 <LCD_Init+0x254>)
 800404c:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 800404e:	f7fe ff7d 	bl	8002f4c <LCD_RD_DATA>
 8004052:	4603      	mov	r3, r0
 8004054:	461a      	mov	r2, r3
 8004056:	4b5f      	ldr	r3, [pc, #380]	; (80041d4 <LCD_Init+0x254>)
 8004058:	889b      	ldrh	r3, [r3, #4]
 800405a:	4313      	orrs	r3, r2
 800405c:	b29a      	uxth	r2, r3
 800405e:	4b5d      	ldr	r3, [pc, #372]	; (80041d4 <LCD_Init+0x254>)
 8004060:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 8004062:	4b5c      	ldr	r3, [pc, #368]	; (80041d4 <LCD_Init+0x254>)
 8004064:	889b      	ldrh	r3, [r3, #4]
 8004066:	f249 3241 	movw	r2, #37697	; 0x9341
 800406a:	4293      	cmp	r3, r2
 800406c:	f000 80a4 	beq.w	80041b8 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8004070:	20bf      	movs	r0, #191	; 0xbf
 8004072:	f7fe ff23 	bl	8002ebc <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 8004076:	f7fe ff69 	bl	8002f4c <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 800407a:	f7fe ff67 	bl	8002f4c <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 800407e:	f7fe ff65 	bl	8002f4c <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 8004082:	f7fe ff63 	bl	8002f4c <LCD_RD_DATA>
 8004086:	4603      	mov	r3, r0
 8004088:	461a      	mov	r2, r3
 800408a:	4b52      	ldr	r3, [pc, #328]	; (80041d4 <LCD_Init+0x254>)
 800408c:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 800408e:	4b51      	ldr	r3, [pc, #324]	; (80041d4 <LCD_Init+0x254>)
 8004090:	889b      	ldrh	r3, [r3, #4]
 8004092:	021b      	lsls	r3, r3, #8
 8004094:	b29a      	uxth	r2, r3
 8004096:	4b4f      	ldr	r3, [pc, #316]	; (80041d4 <LCD_Init+0x254>)
 8004098:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 800409a:	f7fe ff57 	bl	8002f4c <LCD_RD_DATA>
 800409e:	4603      	mov	r3, r0
 80040a0:	461a      	mov	r2, r3
 80040a2:	4b4c      	ldr	r3, [pc, #304]	; (80041d4 <LCD_Init+0x254>)
 80040a4:	889b      	ldrh	r3, [r3, #4]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	4b4a      	ldr	r3, [pc, #296]	; (80041d4 <LCD_Init+0x254>)
 80040ac:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 80040ae:	4b49      	ldr	r3, [pc, #292]	; (80041d4 <LCD_Init+0x254>)
 80040b0:	889b      	ldrh	r3, [r3, #4]
 80040b2:	f646 0204 	movw	r2, #26628	; 0x6804
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d07e      	beq.n	80041b8 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 80040ba:	20d4      	movs	r0, #212	; 0xd4
 80040bc:	f7fe fefe 	bl	8002ebc <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 80040c0:	f7fe ff44 	bl	8002f4c <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 80040c4:	f7fe ff42 	bl	8002f4c <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 80040c8:	f7fe ff40 	bl	8002f4c <LCD_RD_DATA>
 80040cc:	4603      	mov	r3, r0
 80040ce:	461a      	mov	r2, r3
 80040d0:	4b40      	ldr	r3, [pc, #256]	; (80041d4 <LCD_Init+0x254>)
 80040d2:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 80040d4:	4b3f      	ldr	r3, [pc, #252]	; (80041d4 <LCD_Init+0x254>)
 80040d6:	889b      	ldrh	r3, [r3, #4]
 80040d8:	021b      	lsls	r3, r3, #8
 80040da:	b29a      	uxth	r2, r3
 80040dc:	4b3d      	ldr	r3, [pc, #244]	; (80041d4 <LCD_Init+0x254>)
 80040de:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 80040e0:	f7fe ff34 	bl	8002f4c <LCD_RD_DATA>
 80040e4:	4603      	mov	r3, r0
 80040e6:	461a      	mov	r2, r3
 80040e8:	4b3a      	ldr	r3, [pc, #232]	; (80041d4 <LCD_Init+0x254>)
 80040ea:	889b      	ldrh	r3, [r3, #4]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	4b38      	ldr	r3, [pc, #224]	; (80041d4 <LCD_Init+0x254>)
 80040f2:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 80040f4:	4b37      	ldr	r3, [pc, #220]	; (80041d4 <LCD_Init+0x254>)
 80040f6:	889b      	ldrh	r3, [r3, #4]
 80040f8:	f245 3210 	movw	r2, #21264	; 0x5310
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d05b      	beq.n	80041b8 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 8004100:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8004104:	f7fe feda 	bl	8002ebc <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8004108:	f7fe ff20 	bl	8002f4c <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 800410c:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8004110:	f7fe fed4 	bl	8002ebc <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 8004114:	f7fe ff1a 	bl	8002f4c <LCD_RD_DATA>
 8004118:	4603      	mov	r3, r0
 800411a:	461a      	mov	r2, r3
 800411c:	4b2d      	ldr	r3, [pc, #180]	; (80041d4 <LCD_Init+0x254>)
 800411e:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8004120:	4b2c      	ldr	r3, [pc, #176]	; (80041d4 <LCD_Init+0x254>)
 8004122:	889b      	ldrh	r3, [r3, #4]
 8004124:	021b      	lsls	r3, r3, #8
 8004126:	b29a      	uxth	r2, r3
 8004128:	4b2a      	ldr	r3, [pc, #168]	; (80041d4 <LCD_Init+0x254>)
 800412a:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 800412c:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8004130:	f7fe fec4 	bl	8002ebc <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 8004134:	f7fe ff0a 	bl	8002f4c <LCD_RD_DATA>
 8004138:	4603      	mov	r3, r0
 800413a:	461a      	mov	r2, r3
 800413c:	4b25      	ldr	r3, [pc, #148]	; (80041d4 <LCD_Init+0x254>)
 800413e:	889b      	ldrh	r3, [r3, #4]
 8004140:	4313      	orrs	r3, r2
 8004142:	b29a      	uxth	r2, r3
 8004144:	4b23      	ldr	r3, [pc, #140]	; (80041d4 <LCD_Init+0x254>)
 8004146:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 8004148:	4b22      	ldr	r3, [pc, #136]	; (80041d4 <LCD_Init+0x254>)
 800414a:	889b      	ldrh	r3, [r3, #4]
 800414c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004150:	d103      	bne.n	800415a <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8004152:	4b20      	ldr	r3, [pc, #128]	; (80041d4 <LCD_Init+0x254>)
 8004154:	f245 5210 	movw	r2, #21776	; 0x5510
 8004158:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 800415a:	4b1e      	ldr	r3, [pc, #120]	; (80041d4 <LCD_Init+0x254>)
 800415c:	889b      	ldrh	r3, [r3, #4]
 800415e:	f245 5210 	movw	r2, #21776	; 0x5510
 8004162:	4293      	cmp	r3, r2
 8004164:	d028      	beq.n	80041b8 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 8004166:	20a1      	movs	r0, #161	; 0xa1
 8004168:	f7fe fea8 	bl	8002ebc <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 800416c:	f7fe feee 	bl	8002f4c <LCD_RD_DATA>
 8004170:	4603      	mov	r3, r0
 8004172:	461a      	mov	r2, r3
 8004174:	4b17      	ldr	r3, [pc, #92]	; (80041d4 <LCD_Init+0x254>)
 8004176:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8004178:	f7fe fee8 	bl	8002f4c <LCD_RD_DATA>
 800417c:	4603      	mov	r3, r0
 800417e:	461a      	mov	r2, r3
 8004180:	4b14      	ldr	r3, [pc, #80]	; (80041d4 <LCD_Init+0x254>)
 8004182:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 8004184:	4b13      	ldr	r3, [pc, #76]	; (80041d4 <LCD_Init+0x254>)
 8004186:	889b      	ldrh	r3, [r3, #4]
 8004188:	021b      	lsls	r3, r3, #8
 800418a:	b29a      	uxth	r2, r3
 800418c:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <LCD_Init+0x254>)
 800418e:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8004190:	f7fe fedc 	bl	8002f4c <LCD_RD_DATA>
 8004194:	4603      	mov	r3, r0
 8004196:	461a      	mov	r2, r3
 8004198:	4b0e      	ldr	r3, [pc, #56]	; (80041d4 <LCD_Init+0x254>)
 800419a:	889b      	ldrh	r3, [r3, #4]
 800419c:	4313      	orrs	r3, r2
 800419e:	b29a      	uxth	r2, r3
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <LCD_Init+0x254>)
 80041a2:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 80041a4:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <LCD_Init+0x254>)
 80041a6:	889b      	ldrh	r3, [r3, #4]
 80041a8:	f245 7261 	movw	r2, #22369	; 0x5761
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d103      	bne.n	80041b8 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 80041b0:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <LCD_Init+0x254>)
 80041b2:	f641 1263 	movw	r2, #6499	; 0x1963
 80041b6:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 80041b8:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <LCD_Init+0x254>)
 80041ba:	889b      	ldrh	r3, [r3, #4]
 80041bc:	f249 3241 	movw	r2, #37697	; 0x9341
 80041c0:	4293      	cmp	r3, r2
 80041c2:	f040 811f 	bne.w	8004404 <LCD_Init+0x484>
 80041c6:	e007      	b.n	80041d8 <LCD_Init+0x258>
 80041c8:	40021000 	.word	0x40021000
 80041cc:	40011000 	.word	0x40011000
 80041d0:	40010c00 	.word	0x40010c00
 80041d4:	20000290 	.word	0x20000290
			{
		LCD_WR_REG(0xCF);
 80041d8:	20cf      	movs	r0, #207	; 0xcf
 80041da:	f7fe fe6f 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80041de:	2000      	movs	r0, #0
 80041e0:	f7fe fe90 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 80041e4:	20c1      	movs	r0, #193	; 0xc1
 80041e6:	f7fe fe8d 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 80041ea:	2030      	movs	r0, #48	; 0x30
 80041ec:	f7fe fe8a 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 80041f0:	20ed      	movs	r0, #237	; 0xed
 80041f2:	f7fe fe63 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 80041f6:	2064      	movs	r0, #100	; 0x64
 80041f8:	f7fe fe84 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80041fc:	2003      	movs	r0, #3
 80041fe:	f7fe fe81 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 8004202:	2012      	movs	r0, #18
 8004204:	f7fe fe7e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 8004208:	2081      	movs	r0, #129	; 0x81
 800420a:	f7fe fe7b 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 800420e:	20e8      	movs	r0, #232	; 0xe8
 8004210:	f7fe fe54 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 8004214:	2085      	movs	r0, #133	; 0x85
 8004216:	f7fe fe75 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 800421a:	2010      	movs	r0, #16
 800421c:	f7fe fe72 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8004220:	207a      	movs	r0, #122	; 0x7a
 8004222:	f7fe fe6f 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 8004226:	20cb      	movs	r0, #203	; 0xcb
 8004228:	f7fe fe48 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 800422c:	2039      	movs	r0, #57	; 0x39
 800422e:	f7fe fe69 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8004232:	202c      	movs	r0, #44	; 0x2c
 8004234:	f7fe fe66 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004238:	2000      	movs	r0, #0
 800423a:	f7fe fe63 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 800423e:	2034      	movs	r0, #52	; 0x34
 8004240:	f7fe fe60 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8004244:	2002      	movs	r0, #2
 8004246:	f7fe fe5d 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 800424a:	20f7      	movs	r0, #247	; 0xf7
 800424c:	f7fe fe36 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8004250:	2020      	movs	r0, #32
 8004252:	f7fe fe57 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 8004256:	20ea      	movs	r0, #234	; 0xea
 8004258:	f7fe fe30 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800425c:	2000      	movs	r0, #0
 800425e:	f7fe fe51 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004262:	2000      	movs	r0, #0
 8004264:	f7fe fe4e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8004268:	20c0      	movs	r0, #192	; 0xc0
 800426a:	f7fe fe27 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 800426e:	201b      	movs	r0, #27
 8004270:	f7fe fe48 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 8004274:	20c1      	movs	r0, #193	; 0xc1
 8004276:	f7fe fe21 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 800427a:	2001      	movs	r0, #1
 800427c:	f7fe fe42 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8004280:	20c5      	movs	r0, #197	; 0xc5
 8004282:	f7fe fe1b 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 8004286:	2030      	movs	r0, #48	; 0x30
 8004288:	f7fe fe3c 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 800428c:	2030      	movs	r0, #48	; 0x30
 800428e:	f7fe fe39 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 8004292:	20c7      	movs	r0, #199	; 0xc7
 8004294:	f7fe fe12 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8004298:	20b7      	movs	r0, #183	; 0xb7
 800429a:	f7fe fe33 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 800429e:	2036      	movs	r0, #54	; 0x36
 80042a0:	f7fe fe0c 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 80042a4:	2048      	movs	r0, #72	; 0x48
 80042a6:	f7fe fe2d 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 80042aa:	203a      	movs	r0, #58	; 0x3a
 80042ac:	f7fe fe06 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 80042b0:	2055      	movs	r0, #85	; 0x55
 80042b2:	f7fe fe27 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 80042b6:	20b1      	movs	r0, #177	; 0xb1
 80042b8:	f7fe fe00 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80042bc:	2000      	movs	r0, #0
 80042be:	f7fe fe21 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 80042c2:	201a      	movs	r0, #26
 80042c4:	f7fe fe1e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 80042c8:	20b6      	movs	r0, #182	; 0xb6
 80042ca:	f7fe fdf7 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80042ce:	200a      	movs	r0, #10
 80042d0:	f7fe fe18 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80042d4:	20a2      	movs	r0, #162	; 0xa2
 80042d6:	f7fe fe15 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 80042da:	20f2      	movs	r0, #242	; 0xf2
 80042dc:	f7fe fdee 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80042e0:	2000      	movs	r0, #0
 80042e2:	f7fe fe0f 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 80042e6:	2026      	movs	r0, #38	; 0x26
 80042e8:	f7fe fde8 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80042ec:	2001      	movs	r0, #1
 80042ee:	f7fe fe09 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 80042f2:	20e0      	movs	r0, #224	; 0xe0
 80042f4:	f7fe fde2 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 80042f8:	200f      	movs	r0, #15
 80042fa:	f7fe fe03 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 80042fe:	202a      	movs	r0, #42	; 0x2a
 8004300:	f7fe fe00 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 8004304:	2028      	movs	r0, #40	; 0x28
 8004306:	f7fe fdfd 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 800430a:	2008      	movs	r0, #8
 800430c:	f7fe fdfa 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 8004310:	200e      	movs	r0, #14
 8004312:	f7fe fdf7 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8004316:	2008      	movs	r0, #8
 8004318:	f7fe fdf4 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 800431c:	2054      	movs	r0, #84	; 0x54
 800431e:	f7fe fdf1 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 8004322:	20a9      	movs	r0, #169	; 0xa9
 8004324:	f7fe fdee 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8004328:	2043      	movs	r0, #67	; 0x43
 800432a:	f7fe fdeb 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 800432e:	200a      	movs	r0, #10
 8004330:	f7fe fde8 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 8004334:	200f      	movs	r0, #15
 8004336:	f7fe fde5 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800433a:	2000      	movs	r0, #0
 800433c:	f7fe fde2 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004340:	2000      	movs	r0, #0
 8004342:	f7fe fddf 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004346:	2000      	movs	r0, #0
 8004348:	f7fe fddc 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800434c:	2000      	movs	r0, #0
 800434e:	f7fe fdd9 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 8004352:	20e1      	movs	r0, #225	; 0xe1
 8004354:	f7fe fdb2 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004358:	2000      	movs	r0, #0
 800435a:	f7fe fdd3 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 800435e:	2015      	movs	r0, #21
 8004360:	f7fe fdd0 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8004364:	2017      	movs	r0, #23
 8004366:	f7fe fdcd 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 800436a:	2007      	movs	r0, #7
 800436c:	f7fe fdca 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8004370:	2011      	movs	r0, #17
 8004372:	f7fe fdc7 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 8004376:	2006      	movs	r0, #6
 8004378:	f7fe fdc4 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 800437c:	202b      	movs	r0, #43	; 0x2b
 800437e:	f7fe fdc1 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8004382:	2056      	movs	r0, #86	; 0x56
 8004384:	f7fe fdbe 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8004388:	203c      	movs	r0, #60	; 0x3c
 800438a:	f7fe fdbb 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 800438e:	2005      	movs	r0, #5
 8004390:	f7fe fdb8 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8004394:	2010      	movs	r0, #16
 8004396:	f7fe fdb5 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800439a:	200f      	movs	r0, #15
 800439c:	f7fe fdb2 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80043a0:	203f      	movs	r0, #63	; 0x3f
 80043a2:	f7fe fdaf 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80043a6:	203f      	movs	r0, #63	; 0x3f
 80043a8:	f7fe fdac 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80043ac:	200f      	movs	r0, #15
 80043ae:	f7fe fda9 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 80043b2:	202b      	movs	r0, #43	; 0x2b
 80043b4:	f7fe fd82 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80043b8:	2000      	movs	r0, #0
 80043ba:	f7fe fda3 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80043be:	2000      	movs	r0, #0
 80043c0:	f7fe fda0 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80043c4:	2001      	movs	r0, #1
 80043c6:	f7fe fd9d 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 80043ca:	203f      	movs	r0, #63	; 0x3f
 80043cc:	f7fe fd9a 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 80043d0:	202a      	movs	r0, #42	; 0x2a
 80043d2:	f7fe fd73 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80043d6:	2000      	movs	r0, #0
 80043d8:	f7fe fd94 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80043dc:	2000      	movs	r0, #0
 80043de:	f7fe fd91 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80043e2:	2000      	movs	r0, #0
 80043e4:	f7fe fd8e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 80043e8:	20ef      	movs	r0, #239	; 0xef
 80043ea:	f7fe fd8b 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 80043ee:	2011      	movs	r0, #17
 80043f0:	f7fe fd64 	bl	8002ebc <LCD_WR_REG>
		HAL_Delay(120);
 80043f4:	2078      	movs	r0, #120	; 0x78
 80043f6:	f7fc ff4f 	bl	8001298 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 80043fa:	2029      	movs	r0, #41	; 0x29
 80043fc:	f7fe fd5e 	bl	8002ebc <LCD_WR_REG>
 8004400:	f003 bcd8 	b.w	8007db4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 8004404:	4b58      	ldr	r3, [pc, #352]	; (8004568 <LCD_Init+0x5e8>)
 8004406:	889b      	ldrh	r3, [r3, #4]
 8004408:	f646 0204 	movw	r2, #26628	; 0x6804
 800440c:	4293      	cmp	r3, r2
 800440e:	f040 80ad 	bne.w	800456c <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 8004412:	2011      	movs	r0, #17
 8004414:	f7fe fd52 	bl	8002ebc <LCD_WR_REG>
		HAL_Delay(20);
 8004418:	2014      	movs	r0, #20
 800441a:	f7fc ff3d 	bl	8001298 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 800441e:	20d0      	movs	r0, #208	; 0xd0
 8004420:	f7fe fd4c 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 8004424:	2007      	movs	r0, #7
 8004426:	f7fe fd6d 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 800442a:	2042      	movs	r0, #66	; 0x42
 800442c:	f7fe fd6a 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 8004430:	201d      	movs	r0, #29
 8004432:	f7fe fd67 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 8004436:	20d1      	movs	r0, #209	; 0xd1
 8004438:	f7fe fd40 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 800443c:	2000      	movs	r0, #0
 800443e:	f7fe fd61 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 8004442:	201a      	movs	r0, #26
 8004444:	f7fe fd5e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 8004448:	2009      	movs	r0, #9
 800444a:	f7fe fd5b 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 800444e:	20d2      	movs	r0, #210	; 0xd2
 8004450:	f7fe fd34 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8004454:	2001      	movs	r0, #1
 8004456:	f7fe fd55 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 800445a:	2022      	movs	r0, #34	; 0x22
 800445c:	f7fe fd52 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8004460:	20c0      	movs	r0, #192	; 0xc0
 8004462:	f7fe fd2b 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 8004466:	2010      	movs	r0, #16
 8004468:	f7fe fd4c 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 800446c:	203b      	movs	r0, #59	; 0x3b
 800446e:	f7fe fd49 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8004472:	2000      	movs	r0, #0
 8004474:	f7fe fd46 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8004478:	2002      	movs	r0, #2
 800447a:	f7fe fd43 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 800447e:	2011      	movs	r0, #17
 8004480:	f7fe fd40 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 8004484:	20c5      	movs	r0, #197	; 0xc5
 8004486:	f7fe fd19 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 800448a:	2003      	movs	r0, #3
 800448c:	f7fe fd3a 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8004490:	20c8      	movs	r0, #200	; 0xc8
 8004492:	f7fe fd13 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8004496:	2000      	movs	r0, #0
 8004498:	f7fe fd34 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 800449c:	2025      	movs	r0, #37	; 0x25
 800449e:	f7fe fd31 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 80044a2:	2021      	movs	r0, #33	; 0x21
 80044a4:	f7fe fd2e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 80044a8:	2005      	movs	r0, #5
 80044aa:	f7fe fd2b 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80044ae:	2000      	movs	r0, #0
 80044b0:	f7fe fd28 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 80044b4:	200a      	movs	r0, #10
 80044b6:	f7fe fd25 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 80044ba:	2065      	movs	r0, #101	; 0x65
 80044bc:	f7fe fd22 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 80044c0:	2025      	movs	r0, #37	; 0x25
 80044c2:	f7fe fd1f 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 80044c6:	2077      	movs	r0, #119	; 0x77
 80044c8:	f7fe fd1c 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 80044cc:	2050      	movs	r0, #80	; 0x50
 80044ce:	f7fe fd19 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 80044d2:	200f      	movs	r0, #15
 80044d4:	f7fe fd16 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80044d8:	2000      	movs	r0, #0
 80044da:	f7fe fd13 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 80044de:	20f8      	movs	r0, #248	; 0xf8
 80044e0:	f7fe fcec 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 80044e4:	2001      	movs	r0, #1
 80044e6:	f7fe fd0d 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 80044ea:	20fe      	movs	r0, #254	; 0xfe
 80044ec:	f7fe fce6 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80044f0:	2000      	movs	r0, #0
 80044f2:	f7fe fd07 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 80044f6:	2002      	movs	r0, #2
 80044f8:	f7fe fd04 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 80044fc:	2020      	movs	r0, #32
 80044fe:	f7fe fcdd 	bl	8002ebc <LCD_WR_REG>

		LCD_WR_REG(0X36);
 8004502:	2036      	movs	r0, #54	; 0x36
 8004504:	f7fe fcda 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8004508:	2008      	movs	r0, #8
 800450a:	f7fe fcfb 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 800450e:	203a      	movs	r0, #58	; 0x3a
 8004510:	f7fe fcd4 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 8004514:	2055      	movs	r0, #85	; 0x55
 8004516:	f7fe fcf5 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 800451a:	202b      	movs	r0, #43	; 0x2b
 800451c:	f7fe fcce 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8004520:	2000      	movs	r0, #0
 8004522:	f7fe fcef 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8004526:	2000      	movs	r0, #0
 8004528:	f7fe fcec 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 800452c:	2001      	movs	r0, #1
 800452e:	f7fe fce9 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 8004532:	203f      	movs	r0, #63	; 0x3f
 8004534:	f7fe fce6 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 8004538:	202a      	movs	r0, #42	; 0x2a
 800453a:	f7fe fcbf 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 800453e:	2000      	movs	r0, #0
 8004540:	f7fe fce0 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8004544:	2000      	movs	r0, #0
 8004546:	f7fe fcdd 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 800454a:	2001      	movs	r0, #1
 800454c:	f7fe fcda 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 8004550:	20df      	movs	r0, #223	; 0xdf
 8004552:	f7fe fcd7 	bl	8002f04 <LCD_WR_DATAX>
		HAL_Delay(120);
 8004556:	2078      	movs	r0, #120	; 0x78
 8004558:	f7fc fe9e 	bl	8001298 <HAL_Delay>
		LCD_WR_REG(0X29);
 800455c:	2029      	movs	r0, #41	; 0x29
 800455e:	f7fe fcad 	bl	8002ebc <LCD_WR_REG>
 8004562:	f003 bc27 	b.w	8007db4 <LCD_Init+0x3e34>
 8004566:	bf00      	nop
 8004568:	20000290 	.word	0x20000290
	} else if (lcddev.id == 0x5310) {
 800456c:	4b03      	ldr	r3, [pc, #12]	; (800457c <LCD_Init+0x5fc>)
 800456e:	889b      	ldrh	r3, [r3, #4]
 8004570:	f245 3210 	movw	r2, #21264	; 0x5310
 8004574:	4293      	cmp	r3, r2
 8004576:	f040 877c 	bne.w	8005472 <LCD_Init+0x14f2>
 800457a:	e001      	b.n	8004580 <LCD_Init+0x600>
 800457c:	20000290 	.word	0x20000290
		LCD_WR_REG(0xED);
 8004580:	20ed      	movs	r0, #237	; 0xed
 8004582:	f7fe fc9b 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8004586:	2001      	movs	r0, #1
 8004588:	f7fe fcbc 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 800458c:	20fe      	movs	r0, #254	; 0xfe
 800458e:	f7fe fcb9 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 8004592:	20ee      	movs	r0, #238	; 0xee
 8004594:	f7fe fc92 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8004598:	20de      	movs	r0, #222	; 0xde
 800459a:	f7fe fcb3 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 800459e:	2021      	movs	r0, #33	; 0x21
 80045a0:	f7fe fcb0 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 80045a4:	20f1      	movs	r0, #241	; 0xf1
 80045a6:	f7fe fc89 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80045aa:	2001      	movs	r0, #1
 80045ac:	f7fe fcaa 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 80045b0:	20df      	movs	r0, #223	; 0xdf
 80045b2:	f7fe fc83 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 80045b6:	2010      	movs	r0, #16
 80045b8:	f7fe fca4 	bl	8002f04 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 80045bc:	20c4      	movs	r0, #196	; 0xc4
 80045be:	f7fe fc7d 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 80045c2:	208f      	movs	r0, #143	; 0x8f
 80045c4:	f7fe fc9e 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 80045c8:	20c6      	movs	r0, #198	; 0xc6
 80045ca:	f7fe fc77 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80045ce:	2000      	movs	r0, #0
 80045d0:	f7fe fc98 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80045d4:	20e2      	movs	r0, #226	; 0xe2
 80045d6:	f7fe fc95 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80045da:	20e2      	movs	r0, #226	; 0xe2
 80045dc:	f7fe fc92 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 80045e0:	20e2      	movs	r0, #226	; 0xe2
 80045e2:	f7fe fc8f 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 80045e6:	20bf      	movs	r0, #191	; 0xbf
 80045e8:	f7fe fc68 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80045ec:	20aa      	movs	r0, #170	; 0xaa
 80045ee:	f7fe fc89 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 80045f2:	20b0      	movs	r0, #176	; 0xb0
 80045f4:	f7fe fc62 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 80045f8:	200d      	movs	r0, #13
 80045fa:	f7fe fc83 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80045fe:	2000      	movs	r0, #0
 8004600:	f7fe fc80 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 8004604:	200d      	movs	r0, #13
 8004606:	f7fe fc7d 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800460a:	2000      	movs	r0, #0
 800460c:	f7fe fc7a 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8004610:	2011      	movs	r0, #17
 8004612:	f7fe fc77 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004616:	2000      	movs	r0, #0
 8004618:	f7fe fc74 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 800461c:	2019      	movs	r0, #25
 800461e:	f7fe fc71 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004622:	2000      	movs	r0, #0
 8004624:	f7fe fc6e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8004628:	2021      	movs	r0, #33	; 0x21
 800462a:	f7fe fc6b 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800462e:	2000      	movs	r0, #0
 8004630:	f7fe fc68 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 8004634:	202d      	movs	r0, #45	; 0x2d
 8004636:	f7fe fc65 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800463a:	2000      	movs	r0, #0
 800463c:	f7fe fc62 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 8004640:	203d      	movs	r0, #61	; 0x3d
 8004642:	f7fe fc5f 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004646:	2000      	movs	r0, #0
 8004648:	f7fe fc5c 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 800464c:	205d      	movs	r0, #93	; 0x5d
 800464e:	f7fe fc59 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004652:	2000      	movs	r0, #0
 8004654:	f7fe fc56 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8004658:	205d      	movs	r0, #93	; 0x5d
 800465a:	f7fe fc53 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800465e:	2000      	movs	r0, #0
 8004660:	f7fe fc50 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 8004664:	20b1      	movs	r0, #177	; 0xb1
 8004666:	f7fe fc29 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 800466a:	2080      	movs	r0, #128	; 0x80
 800466c:	f7fe fc4a 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004670:	2000      	movs	r0, #0
 8004672:	f7fe fc47 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8004676:	208b      	movs	r0, #139	; 0x8b
 8004678:	f7fe fc44 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800467c:	2000      	movs	r0, #0
 800467e:	f7fe fc41 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8004682:	2096      	movs	r0, #150	; 0x96
 8004684:	f7fe fc3e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004688:	2000      	movs	r0, #0
 800468a:	f7fe fc3b 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 800468e:	20b2      	movs	r0, #178	; 0xb2
 8004690:	f7fe fc14 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004694:	2000      	movs	r0, #0
 8004696:	f7fe fc35 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800469a:	2000      	movs	r0, #0
 800469c:	f7fe fc32 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80046a0:	2002      	movs	r0, #2
 80046a2:	f7fe fc2f 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046a6:	2000      	movs	r0, #0
 80046a8:	f7fe fc2c 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80046ac:	2003      	movs	r0, #3
 80046ae:	f7fe fc29 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046b2:	2000      	movs	r0, #0
 80046b4:	f7fe fc26 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 80046b8:	20b3      	movs	r0, #179	; 0xb3
 80046ba:	f7fe fbff 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80046be:	2000      	movs	r0, #0
 80046c0:	f7fe fc20 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046c4:	2000      	movs	r0, #0
 80046c6:	f7fe fc1d 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046ca:	2000      	movs	r0, #0
 80046cc:	f7fe fc1a 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046d0:	2000      	movs	r0, #0
 80046d2:	f7fe fc17 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046d6:	2000      	movs	r0, #0
 80046d8:	f7fe fc14 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046dc:	2000      	movs	r0, #0
 80046de:	f7fe fc11 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046e2:	2000      	movs	r0, #0
 80046e4:	f7fe fc0e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046e8:	2000      	movs	r0, #0
 80046ea:	f7fe fc0b 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046ee:	2000      	movs	r0, #0
 80046f0:	f7fe fc08 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046f4:	2000      	movs	r0, #0
 80046f6:	f7fe fc05 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80046fa:	2000      	movs	r0, #0
 80046fc:	f7fe fc02 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004700:	2000      	movs	r0, #0
 8004702:	f7fe fbff 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004706:	2000      	movs	r0, #0
 8004708:	f7fe fbfc 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800470c:	2000      	movs	r0, #0
 800470e:	f7fe fbf9 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004712:	2000      	movs	r0, #0
 8004714:	f7fe fbf6 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004718:	2000      	movs	r0, #0
 800471a:	f7fe fbf3 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800471e:	2000      	movs	r0, #0
 8004720:	f7fe fbf0 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004724:	2000      	movs	r0, #0
 8004726:	f7fe fbed 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800472a:	2000      	movs	r0, #0
 800472c:	f7fe fbea 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004730:	2000      	movs	r0, #0
 8004732:	f7fe fbe7 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004736:	2000      	movs	r0, #0
 8004738:	f7fe fbe4 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800473c:	2000      	movs	r0, #0
 800473e:	f7fe fbe1 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004742:	2000      	movs	r0, #0
 8004744:	f7fe fbde 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004748:	2000      	movs	r0, #0
 800474a:	f7fe fbdb 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 800474e:	20b4      	movs	r0, #180	; 0xb4
 8004750:	f7fe fbb4 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 8004754:	208b      	movs	r0, #139	; 0x8b
 8004756:	f7fe fbd5 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800475a:	2000      	movs	r0, #0
 800475c:	f7fe fbd2 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8004760:	2096      	movs	r0, #150	; 0x96
 8004762:	f7fe fbcf 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004766:	2000      	movs	r0, #0
 8004768:	f7fe fbcc 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 800476c:	20a1      	movs	r0, #161	; 0xa1
 800476e:	f7fe fbc9 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004772:	2000      	movs	r0, #0
 8004774:	f7fe fbc6 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8004778:	20b5      	movs	r0, #181	; 0xb5
 800477a:	f7fe fb9f 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 800477e:	2002      	movs	r0, #2
 8004780:	f7fe fbc0 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004784:	2000      	movs	r0, #0
 8004786:	f7fe fbbd 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800478a:	2003      	movs	r0, #3
 800478c:	f7fe fbba 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004790:	2000      	movs	r0, #0
 8004792:	f7fe fbb7 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8004796:	2004      	movs	r0, #4
 8004798:	f7fe fbb4 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800479c:	2000      	movs	r0, #0
 800479e:	f7fe fbb1 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 80047a2:	20b6      	movs	r0, #182	; 0xb6
 80047a4:	f7fe fb8a 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80047a8:	2000      	movs	r0, #0
 80047aa:	f7fe fbab 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047ae:	2000      	movs	r0, #0
 80047b0:	f7fe fba8 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 80047b4:	20b7      	movs	r0, #183	; 0xb7
 80047b6:	f7fe fb81 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80047ba:	2000      	movs	r0, #0
 80047bc:	f7fe fba2 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047c0:	2000      	movs	r0, #0
 80047c2:	f7fe fb9f 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 80047c6:	203f      	movs	r0, #63	; 0x3f
 80047c8:	f7fe fb9c 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047cc:	2000      	movs	r0, #0
 80047ce:	f7fe fb99 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 80047d2:	205e      	movs	r0, #94	; 0x5e
 80047d4:	f7fe fb96 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047d8:	2000      	movs	r0, #0
 80047da:	f7fe fb93 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 80047de:	2064      	movs	r0, #100	; 0x64
 80047e0:	f7fe fb90 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047e4:	2000      	movs	r0, #0
 80047e6:	f7fe fb8d 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 80047ea:	208c      	movs	r0, #140	; 0x8c
 80047ec:	f7fe fb8a 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047f0:	2000      	movs	r0, #0
 80047f2:	f7fe fb87 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 80047f6:	20ac      	movs	r0, #172	; 0xac
 80047f8:	f7fe fb84 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80047fc:	2000      	movs	r0, #0
 80047fe:	f7fe fb81 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8004802:	20dc      	movs	r0, #220	; 0xdc
 8004804:	f7fe fb7e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004808:	2000      	movs	r0, #0
 800480a:	f7fe fb7b 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 800480e:	2070      	movs	r0, #112	; 0x70
 8004810:	f7fe fb78 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004814:	2000      	movs	r0, #0
 8004816:	f7fe fb75 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 800481a:	2090      	movs	r0, #144	; 0x90
 800481c:	f7fe fb72 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004820:	2000      	movs	r0, #0
 8004822:	f7fe fb6f 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 8004826:	20eb      	movs	r0, #235	; 0xeb
 8004828:	f7fe fb6c 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800482c:	2000      	movs	r0, #0
 800482e:	f7fe fb69 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8004832:	20dc      	movs	r0, #220	; 0xdc
 8004834:	f7fe fb66 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004838:	2000      	movs	r0, #0
 800483a:	f7fe fb63 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 800483e:	20b8      	movs	r0, #184	; 0xb8
 8004840:	f7fe fb3c 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004844:	2000      	movs	r0, #0
 8004846:	f7fe fb5d 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800484a:	2000      	movs	r0, #0
 800484c:	f7fe fb5a 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004850:	2000      	movs	r0, #0
 8004852:	f7fe fb57 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004856:	2000      	movs	r0, #0
 8004858:	f7fe fb54 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800485c:	2000      	movs	r0, #0
 800485e:	f7fe fb51 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004862:	2000      	movs	r0, #0
 8004864:	f7fe fb4e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004868:	2000      	movs	r0, #0
 800486a:	f7fe fb4b 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800486e:	2000      	movs	r0, #0
 8004870:	f7fe fb48 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 8004874:	20ba      	movs	r0, #186	; 0xba
 8004876:	f7fe fb21 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 800487a:	2024      	movs	r0, #36	; 0x24
 800487c:	f7fe fb42 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004880:	2000      	movs	r0, #0
 8004882:	f7fe fb3f 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004886:	2000      	movs	r0, #0
 8004888:	f7fe fb3c 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800488c:	2000      	movs	r0, #0
 800488e:	f7fe fb39 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 8004892:	20c1      	movs	r0, #193	; 0xc1
 8004894:	f7fe fb12 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8004898:	2020      	movs	r0, #32
 800489a:	f7fe fb33 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800489e:	2000      	movs	r0, #0
 80048a0:	f7fe fb30 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 80048a4:	2054      	movs	r0, #84	; 0x54
 80048a6:	f7fe fb2d 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048aa:	2000      	movs	r0, #0
 80048ac:	f7fe fb2a 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 80048b0:	20ff      	movs	r0, #255	; 0xff
 80048b2:	f7fe fb27 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048b6:	2000      	movs	r0, #0
 80048b8:	f7fe fb24 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 80048bc:	20c2      	movs	r0, #194	; 0xc2
 80048be:	f7fe fafd 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 80048c2:	200a      	movs	r0, #10
 80048c4:	f7fe fb1e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048c8:	2000      	movs	r0, #0
 80048ca:	f7fe fb1b 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 80048ce:	2004      	movs	r0, #4
 80048d0:	f7fe fb18 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048d4:	2000      	movs	r0, #0
 80048d6:	f7fe fb15 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 80048da:	20c3      	movs	r0, #195	; 0xc3
 80048dc:	f7fe faee 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 80048e0:	203c      	movs	r0, #60	; 0x3c
 80048e2:	f7fe fb0f 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048e6:	2000      	movs	r0, #0
 80048e8:	f7fe fb0c 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 80048ec:	203a      	movs	r0, #58	; 0x3a
 80048ee:	f7fe fb09 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048f2:	2000      	movs	r0, #0
 80048f4:	f7fe fb06 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 80048f8:	2039      	movs	r0, #57	; 0x39
 80048fa:	f7fe fb03 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80048fe:	2000      	movs	r0, #0
 8004900:	f7fe fb00 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 8004904:	2037      	movs	r0, #55	; 0x37
 8004906:	f7fe fafd 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800490a:	2000      	movs	r0, #0
 800490c:	f7fe fafa 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8004910:	203c      	movs	r0, #60	; 0x3c
 8004912:	f7fe faf7 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004916:	2000      	movs	r0, #0
 8004918:	f7fe faf4 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 800491c:	2036      	movs	r0, #54	; 0x36
 800491e:	f7fe faf1 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004922:	2000      	movs	r0, #0
 8004924:	f7fe faee 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8004928:	2032      	movs	r0, #50	; 0x32
 800492a:	f7fe faeb 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800492e:	2000      	movs	r0, #0
 8004930:	f7fe fae8 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8004934:	202f      	movs	r0, #47	; 0x2f
 8004936:	f7fe fae5 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800493a:	2000      	movs	r0, #0
 800493c:	f7fe fae2 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8004940:	202c      	movs	r0, #44	; 0x2c
 8004942:	f7fe fadf 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004946:	2000      	movs	r0, #0
 8004948:	f7fe fadc 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 800494c:	2029      	movs	r0, #41	; 0x29
 800494e:	f7fe fad9 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004952:	2000      	movs	r0, #0
 8004954:	f7fe fad6 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8004958:	2026      	movs	r0, #38	; 0x26
 800495a:	f7fe fad3 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800495e:	2000      	movs	r0, #0
 8004960:	f7fe fad0 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8004964:	2024      	movs	r0, #36	; 0x24
 8004966:	f7fe facd 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800496a:	2000      	movs	r0, #0
 800496c:	f7fe faca 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8004970:	2024      	movs	r0, #36	; 0x24
 8004972:	f7fe fac7 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004976:	2000      	movs	r0, #0
 8004978:	f7fe fac4 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 800497c:	2023      	movs	r0, #35	; 0x23
 800497e:	f7fe fac1 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004982:	2000      	movs	r0, #0
 8004984:	f7fe fabe 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8004988:	203c      	movs	r0, #60	; 0x3c
 800498a:	f7fe fabb 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800498e:	2000      	movs	r0, #0
 8004990:	f7fe fab8 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8004994:	2036      	movs	r0, #54	; 0x36
 8004996:	f7fe fab5 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800499a:	2000      	movs	r0, #0
 800499c:	f7fe fab2 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 80049a0:	2032      	movs	r0, #50	; 0x32
 80049a2:	f7fe faaf 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049a6:	2000      	movs	r0, #0
 80049a8:	f7fe faac 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 80049ac:	202f      	movs	r0, #47	; 0x2f
 80049ae:	f7fe faa9 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049b2:	2000      	movs	r0, #0
 80049b4:	f7fe faa6 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80049b8:	202c      	movs	r0, #44	; 0x2c
 80049ba:	f7fe faa3 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049be:	2000      	movs	r0, #0
 80049c0:	f7fe faa0 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80049c4:	2029      	movs	r0, #41	; 0x29
 80049c6:	f7fe fa9d 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049ca:	2000      	movs	r0, #0
 80049cc:	f7fe fa9a 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 80049d0:	2026      	movs	r0, #38	; 0x26
 80049d2:	f7fe fa97 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049d6:	2000      	movs	r0, #0
 80049d8:	f7fe fa94 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80049dc:	2024      	movs	r0, #36	; 0x24
 80049de:	f7fe fa91 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049e2:	2000      	movs	r0, #0
 80049e4:	f7fe fa8e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 80049e8:	2024      	movs	r0, #36	; 0x24
 80049ea:	f7fe fa8b 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049ee:	2000      	movs	r0, #0
 80049f0:	f7fe fa88 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80049f4:	2023      	movs	r0, #35	; 0x23
 80049f6:	f7fe fa85 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80049fa:	2000      	movs	r0, #0
 80049fc:	f7fe fa82 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8004a00:	20c4      	movs	r0, #196	; 0xc4
 8004a02:	f7fe fa5b 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 8004a06:	2062      	movs	r0, #98	; 0x62
 8004a08:	f7fe fa7c 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	f7fe fa79 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8004a12:	2005      	movs	r0, #5
 8004a14:	f7fe fa76 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a18:	2000      	movs	r0, #0
 8004a1a:	f7fe fa73 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8004a1e:	2084      	movs	r0, #132	; 0x84
 8004a20:	f7fe fa70 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a24:	2000      	movs	r0, #0
 8004a26:	f7fe fa6d 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8004a2a:	20f0      	movs	r0, #240	; 0xf0
 8004a2c:	f7fe fa6a 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a30:	2000      	movs	r0, #0
 8004a32:	f7fe fa67 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8004a36:	2018      	movs	r0, #24
 8004a38:	f7fe fa64 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	f7fe fa61 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 8004a42:	20a4      	movs	r0, #164	; 0xa4
 8004a44:	f7fe fa5e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a48:	2000      	movs	r0, #0
 8004a4a:	f7fe fa5b 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8004a4e:	2018      	movs	r0, #24
 8004a50:	f7fe fa58 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a54:	2000      	movs	r0, #0
 8004a56:	f7fe fa55 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8004a5a:	2050      	movs	r0, #80	; 0x50
 8004a5c:	f7fe fa52 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a60:	2000      	movs	r0, #0
 8004a62:	f7fe fa4f 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 8004a66:	200c      	movs	r0, #12
 8004a68:	f7fe fa4c 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a6c:	2000      	movs	r0, #0
 8004a6e:	f7fe fa49 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8004a72:	2017      	movs	r0, #23
 8004a74:	f7fe fa46 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a78:	2000      	movs	r0, #0
 8004a7a:	f7fe fa43 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 8004a7e:	2095      	movs	r0, #149	; 0x95
 8004a80:	f7fe fa40 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a84:	2000      	movs	r0, #0
 8004a86:	f7fe fa3d 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8004a8a:	20f3      	movs	r0, #243	; 0xf3
 8004a8c:	f7fe fa3a 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a90:	2000      	movs	r0, #0
 8004a92:	f7fe fa37 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 8004a96:	20e6      	movs	r0, #230	; 0xe6
 8004a98:	f7fe fa34 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	f7fe fa31 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 8004aa2:	20c5      	movs	r0, #197	; 0xc5
 8004aa4:	f7fe fa0a 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8004aa8:	2032      	movs	r0, #50	; 0x32
 8004aaa:	f7fe fa2b 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004aae:	2000      	movs	r0, #0
 8004ab0:	f7fe fa28 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8004ab4:	2044      	movs	r0, #68	; 0x44
 8004ab6:	f7fe fa25 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004aba:	2000      	movs	r0, #0
 8004abc:	f7fe fa22 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8004ac0:	2065      	movs	r0, #101	; 0x65
 8004ac2:	f7fe fa1f 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ac6:	2000      	movs	r0, #0
 8004ac8:	f7fe fa1c 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8004acc:	2076      	movs	r0, #118	; 0x76
 8004ace:	f7fe fa19 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	f7fe fa16 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8004ad8:	2088      	movs	r0, #136	; 0x88
 8004ada:	f7fe fa13 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ade:	2000      	movs	r0, #0
 8004ae0:	f7fe fa10 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8004ae4:	20c6      	movs	r0, #198	; 0xc6
 8004ae6:	f7fe f9e9 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8004aea:	2020      	movs	r0, #32
 8004aec:	f7fe fa0a 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004af0:	2000      	movs	r0, #0
 8004af2:	f7fe fa07 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8004af6:	2017      	movs	r0, #23
 8004af8:	f7fe fa04 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004afc:	2000      	movs	r0, #0
 8004afe:	f7fe fa01 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8004b02:	2001      	movs	r0, #1
 8004b04:	f7fe f9fe 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b08:	2000      	movs	r0, #0
 8004b0a:	f7fe f9fb 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8004b0e:	20c7      	movs	r0, #199	; 0xc7
 8004b10:	f7fe f9d4 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004b14:	2000      	movs	r0, #0
 8004b16:	f7fe f9f5 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	f7fe f9f2 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b20:	2000      	movs	r0, #0
 8004b22:	f7fe f9ef 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b26:	2000      	movs	r0, #0
 8004b28:	f7fe f9ec 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8004b2c:	20c8      	movs	r0, #200	; 0xc8
 8004b2e:	f7fe f9c5 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004b32:	2000      	movs	r0, #0
 8004b34:	f7fe f9e6 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b38:	2000      	movs	r0, #0
 8004b3a:	f7fe f9e3 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b3e:	2000      	movs	r0, #0
 8004b40:	f7fe f9e0 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b44:	2000      	movs	r0, #0
 8004b46:	f7fe f9dd 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8004b4a:	20c9      	movs	r0, #201	; 0xc9
 8004b4c:	f7fe f9b6 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004b50:	2000      	movs	r0, #0
 8004b52:	f7fe f9d7 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b56:	2000      	movs	r0, #0
 8004b58:	f7fe f9d4 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	f7fe f9d1 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b62:	2000      	movs	r0, #0
 8004b64:	f7fe f9ce 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b68:	2000      	movs	r0, #0
 8004b6a:	f7fe f9cb 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b6e:	2000      	movs	r0, #0
 8004b70:	f7fe f9c8 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b74:	2000      	movs	r0, #0
 8004b76:	f7fe f9c5 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	f7fe f9c2 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b80:	2000      	movs	r0, #0
 8004b82:	f7fe f9bf 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b86:	2000      	movs	r0, #0
 8004b88:	f7fe f9bc 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b8c:	2000      	movs	r0, #0
 8004b8e:	f7fe f9b9 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b92:	2000      	movs	r0, #0
 8004b94:	f7fe f9b6 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b98:	2000      	movs	r0, #0
 8004b9a:	f7fe f9b3 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	f7fe f9b0 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	f7fe f9ad 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004baa:	2000      	movs	r0, #0
 8004bac:	f7fe f9aa 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8004bb0:	20e0      	movs	r0, #224	; 0xe0
 8004bb2:	f7fe f983 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8004bb6:	2016      	movs	r0, #22
 8004bb8:	f7fe f9a4 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bbc:	2000      	movs	r0, #0
 8004bbe:	f7fe f9a1 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8004bc2:	201c      	movs	r0, #28
 8004bc4:	f7fe f99e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bc8:	2000      	movs	r0, #0
 8004bca:	f7fe f99b 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8004bce:	2021      	movs	r0, #33	; 0x21
 8004bd0:	f7fe f998 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	f7fe f995 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8004bda:	2036      	movs	r0, #54	; 0x36
 8004bdc:	f7fe f992 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004be0:	2000      	movs	r0, #0
 8004be2:	f7fe f98f 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8004be6:	2046      	movs	r0, #70	; 0x46
 8004be8:	f7fe f98c 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bec:	2000      	movs	r0, #0
 8004bee:	f7fe f989 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8004bf2:	2052      	movs	r0, #82	; 0x52
 8004bf4:	f7fe f986 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	f7fe f983 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8004bfe:	2064      	movs	r0, #100	; 0x64
 8004c00:	f7fe f980 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c04:	2000      	movs	r0, #0
 8004c06:	f7fe f97d 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8004c0a:	207a      	movs	r0, #122	; 0x7a
 8004c0c:	f7fe f97a 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c10:	2000      	movs	r0, #0
 8004c12:	f7fe f977 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8004c16:	208b      	movs	r0, #139	; 0x8b
 8004c18:	f7fe f974 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	f7fe f971 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8004c22:	2099      	movs	r0, #153	; 0x99
 8004c24:	f7fe f96e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c28:	2000      	movs	r0, #0
 8004c2a:	f7fe f96b 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8004c2e:	20a8      	movs	r0, #168	; 0xa8
 8004c30:	f7fe f968 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c34:	2000      	movs	r0, #0
 8004c36:	f7fe f965 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8004c3a:	20b9      	movs	r0, #185	; 0xb9
 8004c3c:	f7fe f962 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c40:	2000      	movs	r0, #0
 8004c42:	f7fe f95f 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8004c46:	20c4      	movs	r0, #196	; 0xc4
 8004c48:	f7fe f95c 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	f7fe f959 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8004c52:	20ca      	movs	r0, #202	; 0xca
 8004c54:	f7fe f956 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c58:	2000      	movs	r0, #0
 8004c5a:	f7fe f953 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8004c5e:	20d2      	movs	r0, #210	; 0xd2
 8004c60:	f7fe f950 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c64:	2000      	movs	r0, #0
 8004c66:	f7fe f94d 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8004c6a:	20d9      	movs	r0, #217	; 0xd9
 8004c6c:	f7fe f94a 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c70:	2000      	movs	r0, #0
 8004c72:	f7fe f947 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8004c76:	20e0      	movs	r0, #224	; 0xe0
 8004c78:	f7fe f944 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	f7fe f941 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8004c82:	20f3      	movs	r0, #243	; 0xf3
 8004c84:	f7fe f93e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c88:	2000      	movs	r0, #0
 8004c8a:	f7fe f93b 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8004c8e:	20e1      	movs	r0, #225	; 0xe1
 8004c90:	f7fe f914 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8004c94:	2016      	movs	r0, #22
 8004c96:	f7fe f935 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	f7fe f932 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8004ca0:	201c      	movs	r0, #28
 8004ca2:	f7fe f92f 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	f7fe f92c 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8004cac:	2022      	movs	r0, #34	; 0x22
 8004cae:	f7fe f929 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	f7fe f926 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8004cb8:	2036      	movs	r0, #54	; 0x36
 8004cba:	f7fe f923 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	f7fe f920 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8004cc4:	2045      	movs	r0, #69	; 0x45
 8004cc6:	f7fe f91d 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cca:	2000      	movs	r0, #0
 8004ccc:	f7fe f91a 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8004cd0:	2052      	movs	r0, #82	; 0x52
 8004cd2:	f7fe f917 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	f7fe f914 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8004cdc:	2064      	movs	r0, #100	; 0x64
 8004cde:	f7fe f911 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	f7fe f90e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8004ce8:	207a      	movs	r0, #122	; 0x7a
 8004cea:	f7fe f90b 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cee:	2000      	movs	r0, #0
 8004cf0:	f7fe f908 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8004cf4:	208b      	movs	r0, #139	; 0x8b
 8004cf6:	f7fe f905 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004cfa:	2000      	movs	r0, #0
 8004cfc:	f7fe f902 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8004d00:	2099      	movs	r0, #153	; 0x99
 8004d02:	f7fe f8ff 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d06:	2000      	movs	r0, #0
 8004d08:	f7fe f8fc 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8004d0c:	20a8      	movs	r0, #168	; 0xa8
 8004d0e:	f7fe f8f9 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d12:	2000      	movs	r0, #0
 8004d14:	f7fe f8f6 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8004d18:	20b9      	movs	r0, #185	; 0xb9
 8004d1a:	f7fe f8f3 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d1e:	2000      	movs	r0, #0
 8004d20:	f7fe f8f0 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8004d24:	20c4      	movs	r0, #196	; 0xc4
 8004d26:	f7fe f8ed 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	f7fe f8ea 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8004d30:	20ca      	movs	r0, #202	; 0xca
 8004d32:	f7fe f8e7 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d36:	2000      	movs	r0, #0
 8004d38:	f7fe f8e4 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8004d3c:	20d2      	movs	r0, #210	; 0xd2
 8004d3e:	f7fe f8e1 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d42:	2000      	movs	r0, #0
 8004d44:	f7fe f8de 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8004d48:	20d8      	movs	r0, #216	; 0xd8
 8004d4a:	f7fe f8db 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d4e:	2000      	movs	r0, #0
 8004d50:	f7fe f8d8 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8004d54:	20e0      	movs	r0, #224	; 0xe0
 8004d56:	f7fe f8d5 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d5a:	2000      	movs	r0, #0
 8004d5c:	f7fe f8d2 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8004d60:	20f3      	movs	r0, #243	; 0xf3
 8004d62:	f7fe f8cf 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d66:	2000      	movs	r0, #0
 8004d68:	f7fe f8cc 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8004d6c:	20e2      	movs	r0, #226	; 0xe2
 8004d6e:	f7fe f8a5 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8004d72:	2005      	movs	r0, #5
 8004d74:	f7fe f8c6 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d78:	2000      	movs	r0, #0
 8004d7a:	f7fe f8c3 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8004d7e:	200b      	movs	r0, #11
 8004d80:	f7fe f8c0 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d84:	2000      	movs	r0, #0
 8004d86:	f7fe f8bd 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8004d8a:	201b      	movs	r0, #27
 8004d8c:	f7fe f8ba 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d90:	2000      	movs	r0, #0
 8004d92:	f7fe f8b7 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8004d96:	2034      	movs	r0, #52	; 0x34
 8004d98:	f7fe f8b4 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004d9c:	2000      	movs	r0, #0
 8004d9e:	f7fe f8b1 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8004da2:	2044      	movs	r0, #68	; 0x44
 8004da4:	f7fe f8ae 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004da8:	2000      	movs	r0, #0
 8004daa:	f7fe f8ab 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8004dae:	204f      	movs	r0, #79	; 0x4f
 8004db0:	f7fe f8a8 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004db4:	2000      	movs	r0, #0
 8004db6:	f7fe f8a5 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8004dba:	2061      	movs	r0, #97	; 0x61
 8004dbc:	f7fe f8a2 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dc0:	2000      	movs	r0, #0
 8004dc2:	f7fe f89f 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8004dc6:	2079      	movs	r0, #121	; 0x79
 8004dc8:	f7fe f89c 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dcc:	2000      	movs	r0, #0
 8004dce:	f7fe f899 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8004dd2:	2088      	movs	r0, #136	; 0x88
 8004dd4:	f7fe f896 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dd8:	2000      	movs	r0, #0
 8004dda:	f7fe f893 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8004dde:	2097      	movs	r0, #151	; 0x97
 8004de0:	f7fe f890 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004de4:	2000      	movs	r0, #0
 8004de6:	f7fe f88d 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8004dea:	20a6      	movs	r0, #166	; 0xa6
 8004dec:	f7fe f88a 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004df0:	2000      	movs	r0, #0
 8004df2:	f7fe f887 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8004df6:	20b7      	movs	r0, #183	; 0xb7
 8004df8:	f7fe f884 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	f7fe f881 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8004e02:	20c2      	movs	r0, #194	; 0xc2
 8004e04:	f7fe f87e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e08:	2000      	movs	r0, #0
 8004e0a:	f7fe f87b 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8004e0e:	20c7      	movs	r0, #199	; 0xc7
 8004e10:	f7fe f878 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e14:	2000      	movs	r0, #0
 8004e16:	f7fe f875 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8004e1a:	20d1      	movs	r0, #209	; 0xd1
 8004e1c:	f7fe f872 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e20:	2000      	movs	r0, #0
 8004e22:	f7fe f86f 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 8004e26:	20d6      	movs	r0, #214	; 0xd6
 8004e28:	f7fe f86c 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	f7fe f869 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8004e32:	20dd      	movs	r0, #221	; 0xdd
 8004e34:	f7fe f866 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e38:	2000      	movs	r0, #0
 8004e3a:	f7fe f863 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8004e3e:	20f3      	movs	r0, #243	; 0xf3
 8004e40:	f7fe f860 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e44:	2000      	movs	r0, #0
 8004e46:	f7fe f85d 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8004e4a:	20e3      	movs	r0, #227	; 0xe3
 8004e4c:	f7fe f836 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8004e50:	2005      	movs	r0, #5
 8004e52:	f7fe f857 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e56:	2000      	movs	r0, #0
 8004e58:	f7fe f854 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8004e5c:	200a      	movs	r0, #10
 8004e5e:	f7fe f851 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e62:	2000      	movs	r0, #0
 8004e64:	f7fe f84e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8004e68:	201c      	movs	r0, #28
 8004e6a:	f7fe f84b 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e6e:	2000      	movs	r0, #0
 8004e70:	f7fe f848 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8004e74:	2033      	movs	r0, #51	; 0x33
 8004e76:	f7fe f845 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	f7fe f842 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8004e80:	2044      	movs	r0, #68	; 0x44
 8004e82:	f7fe f83f 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e86:	2000      	movs	r0, #0
 8004e88:	f7fe f83c 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8004e8c:	2050      	movs	r0, #80	; 0x50
 8004e8e:	f7fe f839 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e92:	2000      	movs	r0, #0
 8004e94:	f7fe f836 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8004e98:	2062      	movs	r0, #98	; 0x62
 8004e9a:	f7fe f833 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	f7fe f830 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 8004ea4:	2078      	movs	r0, #120	; 0x78
 8004ea6:	f7fe f82d 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004eaa:	2000      	movs	r0, #0
 8004eac:	f7fe f82a 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8004eb0:	2088      	movs	r0, #136	; 0x88
 8004eb2:	f7fe f827 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004eb6:	2000      	movs	r0, #0
 8004eb8:	f7fe f824 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8004ebc:	2097      	movs	r0, #151	; 0x97
 8004ebe:	f7fe f821 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	f7fe f81e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8004ec8:	20a6      	movs	r0, #166	; 0xa6
 8004eca:	f7fe f81b 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ece:	2000      	movs	r0, #0
 8004ed0:	f7fe f818 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8004ed4:	20b7      	movs	r0, #183	; 0xb7
 8004ed6:	f7fe f815 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004eda:	2000      	movs	r0, #0
 8004edc:	f7fe f812 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8004ee0:	20c2      	movs	r0, #194	; 0xc2
 8004ee2:	f7fe f80f 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	f7fe f80c 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8004eec:	20c7      	movs	r0, #199	; 0xc7
 8004eee:	f7fe f809 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	f7fe f806 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8004ef8:	20d1      	movs	r0, #209	; 0xd1
 8004efa:	f7fe f803 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004efe:	2000      	movs	r0, #0
 8004f00:	f7fe f800 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8004f04:	20d5      	movs	r0, #213	; 0xd5
 8004f06:	f7fd fffd 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f0a:	2000      	movs	r0, #0
 8004f0c:	f7fd fffa 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8004f10:	20dd      	movs	r0, #221	; 0xdd
 8004f12:	f7fd fff7 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f16:	2000      	movs	r0, #0
 8004f18:	f7fd fff4 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8004f1c:	20f3      	movs	r0, #243	; 0xf3
 8004f1e:	f7fd fff1 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f22:	2000      	movs	r0, #0
 8004f24:	f7fd ffee 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8004f28:	20e4      	movs	r0, #228	; 0xe4
 8004f2a:	f7fd ffc7 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8004f2e:	2001      	movs	r0, #1
 8004f30:	f7fd ffe8 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f34:	2000      	movs	r0, #0
 8004f36:	f7fd ffe5 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8004f3a:	2001      	movs	r0, #1
 8004f3c:	f7fd ffe2 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f40:	2000      	movs	r0, #0
 8004f42:	f7fd ffdf 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8004f46:	2002      	movs	r0, #2
 8004f48:	f7fd ffdc 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	f7fd ffd9 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8004f52:	202a      	movs	r0, #42	; 0x2a
 8004f54:	f7fd ffd6 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f58:	2000      	movs	r0, #0
 8004f5a:	f7fd ffd3 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8004f5e:	203c      	movs	r0, #60	; 0x3c
 8004f60:	f7fd ffd0 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f64:	2000      	movs	r0, #0
 8004f66:	f7fd ffcd 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8004f6a:	204b      	movs	r0, #75	; 0x4b
 8004f6c:	f7fd ffca 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f70:	2000      	movs	r0, #0
 8004f72:	f7fd ffc7 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8004f76:	205d      	movs	r0, #93	; 0x5d
 8004f78:	f7fd ffc4 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f7c:	2000      	movs	r0, #0
 8004f7e:	f7fd ffc1 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8004f82:	2074      	movs	r0, #116	; 0x74
 8004f84:	f7fd ffbe 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f88:	2000      	movs	r0, #0
 8004f8a:	f7fd ffbb 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8004f8e:	2084      	movs	r0, #132	; 0x84
 8004f90:	f7fd ffb8 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004f94:	2000      	movs	r0, #0
 8004f96:	f7fd ffb5 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8004f9a:	2093      	movs	r0, #147	; 0x93
 8004f9c:	f7fd ffb2 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	f7fd ffaf 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8004fa6:	20a2      	movs	r0, #162	; 0xa2
 8004fa8:	f7fd ffac 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fac:	2000      	movs	r0, #0
 8004fae:	f7fd ffa9 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8004fb2:	20b3      	movs	r0, #179	; 0xb3
 8004fb4:	f7fd ffa6 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fb8:	2000      	movs	r0, #0
 8004fba:	f7fd ffa3 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 8004fbe:	20be      	movs	r0, #190	; 0xbe
 8004fc0:	f7fd ffa0 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	f7fd ff9d 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8004fca:	20c4      	movs	r0, #196	; 0xc4
 8004fcc:	f7fd ff9a 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	f7fd ff97 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8004fd6:	20cd      	movs	r0, #205	; 0xcd
 8004fd8:	f7fd ff94 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fdc:	2000      	movs	r0, #0
 8004fde:	f7fd ff91 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8004fe2:	20d3      	movs	r0, #211	; 0xd3
 8004fe4:	f7fd ff8e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004fe8:	2000      	movs	r0, #0
 8004fea:	f7fd ff8b 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8004fee:	20dd      	movs	r0, #221	; 0xdd
 8004ff0:	f7fd ff88 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004ff4:	2000      	movs	r0, #0
 8004ff6:	f7fd ff85 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8004ffa:	20f3      	movs	r0, #243	; 0xf3
 8004ffc:	f7fd ff82 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005000:	2000      	movs	r0, #0
 8005002:	f7fd ff7f 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8005006:	20e5      	movs	r0, #229	; 0xe5
 8005008:	f7fd ff58 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800500c:	2000      	movs	r0, #0
 800500e:	f7fd ff79 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005012:	2000      	movs	r0, #0
 8005014:	f7fd ff76 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005018:	2000      	movs	r0, #0
 800501a:	f7fd ff73 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800501e:	2000      	movs	r0, #0
 8005020:	f7fd ff70 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8005024:	2002      	movs	r0, #2
 8005026:	f7fd ff6d 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800502a:	2000      	movs	r0, #0
 800502c:	f7fd ff6a 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8005030:	2029      	movs	r0, #41	; 0x29
 8005032:	f7fd ff67 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005036:	2000      	movs	r0, #0
 8005038:	f7fd ff64 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 800503c:	203c      	movs	r0, #60	; 0x3c
 800503e:	f7fd ff61 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005042:	2000      	movs	r0, #0
 8005044:	f7fd ff5e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 8005048:	204b      	movs	r0, #75	; 0x4b
 800504a:	f7fd ff5b 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800504e:	2000      	movs	r0, #0
 8005050:	f7fd ff58 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8005054:	205d      	movs	r0, #93	; 0x5d
 8005056:	f7fd ff55 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800505a:	2000      	movs	r0, #0
 800505c:	f7fd ff52 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8005060:	2074      	movs	r0, #116	; 0x74
 8005062:	f7fd ff4f 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005066:	2000      	movs	r0, #0
 8005068:	f7fd ff4c 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 800506c:	2084      	movs	r0, #132	; 0x84
 800506e:	f7fd ff49 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005072:	2000      	movs	r0, #0
 8005074:	f7fd ff46 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8005078:	2093      	movs	r0, #147	; 0x93
 800507a:	f7fd ff43 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800507e:	2000      	movs	r0, #0
 8005080:	f7fd ff40 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8005084:	20a2      	movs	r0, #162	; 0xa2
 8005086:	f7fd ff3d 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800508a:	2000      	movs	r0, #0
 800508c:	f7fd ff3a 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8005090:	20b3      	movs	r0, #179	; 0xb3
 8005092:	f7fd ff37 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005096:	2000      	movs	r0, #0
 8005098:	f7fd ff34 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 800509c:	20be      	movs	r0, #190	; 0xbe
 800509e:	f7fd ff31 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050a2:	2000      	movs	r0, #0
 80050a4:	f7fd ff2e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 80050a8:	20c4      	movs	r0, #196	; 0xc4
 80050aa:	f7fd ff2b 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050ae:	2000      	movs	r0, #0
 80050b0:	f7fd ff28 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 80050b4:	20cd      	movs	r0, #205	; 0xcd
 80050b6:	f7fd ff25 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050ba:	2000      	movs	r0, #0
 80050bc:	f7fd ff22 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 80050c0:	20d3      	movs	r0, #211	; 0xd3
 80050c2:	f7fd ff1f 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050c6:	2000      	movs	r0, #0
 80050c8:	f7fd ff1c 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80050cc:	20dc      	movs	r0, #220	; 0xdc
 80050ce:	f7fd ff19 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050d2:	2000      	movs	r0, #0
 80050d4:	f7fd ff16 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80050d8:	20f3      	movs	r0, #243	; 0xf3
 80050da:	f7fd ff13 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050de:	2000      	movs	r0, #0
 80050e0:	f7fd ff10 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 80050e4:	20e6      	movs	r0, #230	; 0xe6
 80050e6:	f7fd fee9 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 80050ea:	2011      	movs	r0, #17
 80050ec:	f7fd ff0a 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050f0:	2000      	movs	r0, #0
 80050f2:	f7fd ff07 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80050f6:	2034      	movs	r0, #52	; 0x34
 80050f8:	f7fd ff04 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80050fc:	2000      	movs	r0, #0
 80050fe:	f7fd ff01 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8005102:	2056      	movs	r0, #86	; 0x56
 8005104:	f7fd fefe 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005108:	2000      	movs	r0, #0
 800510a:	f7fd fefb 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 800510e:	2076      	movs	r0, #118	; 0x76
 8005110:	f7fd fef8 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005114:	2000      	movs	r0, #0
 8005116:	f7fd fef5 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 800511a:	2077      	movs	r0, #119	; 0x77
 800511c:	f7fd fef2 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005120:	2000      	movs	r0, #0
 8005122:	f7fd feef 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8005126:	2066      	movs	r0, #102	; 0x66
 8005128:	f7fd feec 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800512c:	2000      	movs	r0, #0
 800512e:	f7fd fee9 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8005132:	2088      	movs	r0, #136	; 0x88
 8005134:	f7fd fee6 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005138:	2000      	movs	r0, #0
 800513a:	f7fd fee3 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800513e:	2099      	movs	r0, #153	; 0x99
 8005140:	f7fd fee0 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005144:	2000      	movs	r0, #0
 8005146:	f7fd fedd 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 800514a:	20bb      	movs	r0, #187	; 0xbb
 800514c:	f7fd feda 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005150:	2000      	movs	r0, #0
 8005152:	f7fd fed7 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8005156:	2099      	movs	r0, #153	; 0x99
 8005158:	f7fd fed4 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800515c:	2000      	movs	r0, #0
 800515e:	f7fd fed1 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8005162:	2066      	movs	r0, #102	; 0x66
 8005164:	f7fd fece 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005168:	2000      	movs	r0, #0
 800516a:	f7fd fecb 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800516e:	2055      	movs	r0, #85	; 0x55
 8005170:	f7fd fec8 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005174:	2000      	movs	r0, #0
 8005176:	f7fd fec5 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800517a:	2055      	movs	r0, #85	; 0x55
 800517c:	f7fd fec2 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005180:	2000      	movs	r0, #0
 8005182:	f7fd febf 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8005186:	2045      	movs	r0, #69	; 0x45
 8005188:	f7fd febc 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800518c:	2000      	movs	r0, #0
 800518e:	f7fd feb9 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8005192:	2043      	movs	r0, #67	; 0x43
 8005194:	f7fd feb6 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005198:	2000      	movs	r0, #0
 800519a:	f7fd feb3 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800519e:	2044      	movs	r0, #68	; 0x44
 80051a0:	f7fd feb0 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051a4:	2000      	movs	r0, #0
 80051a6:	f7fd fead 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 80051aa:	20e7      	movs	r0, #231	; 0xe7
 80051ac:	f7fd fe86 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 80051b0:	2032      	movs	r0, #50	; 0x32
 80051b2:	f7fd fea7 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051b6:	2000      	movs	r0, #0
 80051b8:	f7fd fea4 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80051bc:	2055      	movs	r0, #85	; 0x55
 80051be:	f7fd fea1 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051c2:	2000      	movs	r0, #0
 80051c4:	f7fd fe9e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80051c8:	2076      	movs	r0, #118	; 0x76
 80051ca:	f7fd fe9b 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051ce:	2000      	movs	r0, #0
 80051d0:	f7fd fe98 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80051d4:	2066      	movs	r0, #102	; 0x66
 80051d6:	f7fd fe95 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051da:	2000      	movs	r0, #0
 80051dc:	f7fd fe92 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80051e0:	2067      	movs	r0, #103	; 0x67
 80051e2:	f7fd fe8f 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051e6:	2000      	movs	r0, #0
 80051e8:	f7fd fe8c 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 80051ec:	2067      	movs	r0, #103	; 0x67
 80051ee:	f7fd fe89 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051f2:	2000      	movs	r0, #0
 80051f4:	f7fd fe86 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 80051f8:	2087      	movs	r0, #135	; 0x87
 80051fa:	f7fd fe83 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80051fe:	2000      	movs	r0, #0
 8005200:	f7fd fe80 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8005204:	2099      	movs	r0, #153	; 0x99
 8005206:	f7fd fe7d 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800520a:	2000      	movs	r0, #0
 800520c:	f7fd fe7a 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8005210:	20bb      	movs	r0, #187	; 0xbb
 8005212:	f7fd fe77 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005216:	2000      	movs	r0, #0
 8005218:	f7fd fe74 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800521c:	2099      	movs	r0, #153	; 0x99
 800521e:	f7fd fe71 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005222:	2000      	movs	r0, #0
 8005224:	f7fd fe6e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8005228:	2077      	movs	r0, #119	; 0x77
 800522a:	f7fd fe6b 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800522e:	2000      	movs	r0, #0
 8005230:	f7fd fe68 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8005234:	2044      	movs	r0, #68	; 0x44
 8005236:	f7fd fe65 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800523a:	2000      	movs	r0, #0
 800523c:	f7fd fe62 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8005240:	2056      	movs	r0, #86	; 0x56
 8005242:	f7fd fe5f 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005246:	2000      	movs	r0, #0
 8005248:	f7fd fe5c 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 800524c:	2023      	movs	r0, #35	; 0x23
 800524e:	f7fd fe59 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005252:	2000      	movs	r0, #0
 8005254:	f7fd fe56 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8005258:	2033      	movs	r0, #51	; 0x33
 800525a:	f7fd fe53 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800525e:	2000      	movs	r0, #0
 8005260:	f7fd fe50 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8005264:	2045      	movs	r0, #69	; 0x45
 8005266:	f7fd fe4d 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800526a:	2000      	movs	r0, #0
 800526c:	f7fd fe4a 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8005270:	20e8      	movs	r0, #232	; 0xe8
 8005272:	f7fd fe23 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005276:	2000      	movs	r0, #0
 8005278:	f7fd fe44 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800527c:	2000      	movs	r0, #0
 800527e:	f7fd fe41 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8005282:	2099      	movs	r0, #153	; 0x99
 8005284:	f7fd fe3e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005288:	2000      	movs	r0, #0
 800528a:	f7fd fe3b 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 800528e:	2087      	movs	r0, #135	; 0x87
 8005290:	f7fd fe38 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005294:	2000      	movs	r0, #0
 8005296:	f7fd fe35 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800529a:	2088      	movs	r0, #136	; 0x88
 800529c:	f7fd fe32 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052a0:	2000      	movs	r0, #0
 80052a2:	f7fd fe2f 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80052a6:	2077      	movs	r0, #119	; 0x77
 80052a8:	f7fd fe2c 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052ac:	2000      	movs	r0, #0
 80052ae:	f7fd fe29 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80052b2:	2066      	movs	r0, #102	; 0x66
 80052b4:	f7fd fe26 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052b8:	2000      	movs	r0, #0
 80052ba:	f7fd fe23 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80052be:	2088      	movs	r0, #136	; 0x88
 80052c0:	f7fd fe20 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052c4:	2000      	movs	r0, #0
 80052c6:	f7fd fe1d 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 80052ca:	20aa      	movs	r0, #170	; 0xaa
 80052cc:	f7fd fe1a 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052d0:	2000      	movs	r0, #0
 80052d2:	f7fd fe17 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80052d6:	20bb      	movs	r0, #187	; 0xbb
 80052d8:	f7fd fe14 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052dc:	2000      	movs	r0, #0
 80052de:	f7fd fe11 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80052e2:	2099      	movs	r0, #153	; 0x99
 80052e4:	f7fd fe0e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052e8:	2000      	movs	r0, #0
 80052ea:	f7fd fe0b 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80052ee:	2066      	movs	r0, #102	; 0x66
 80052f0:	f7fd fe08 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80052f4:	2000      	movs	r0, #0
 80052f6:	f7fd fe05 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80052fa:	2055      	movs	r0, #85	; 0x55
 80052fc:	f7fd fe02 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005300:	2000      	movs	r0, #0
 8005302:	f7fd fdff 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8005306:	2055      	movs	r0, #85	; 0x55
 8005308:	f7fd fdfc 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800530c:	2000      	movs	r0, #0
 800530e:	f7fd fdf9 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8005312:	2044      	movs	r0, #68	; 0x44
 8005314:	f7fd fdf6 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005318:	2000      	movs	r0, #0
 800531a:	f7fd fdf3 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800531e:	2044      	movs	r0, #68	; 0x44
 8005320:	f7fd fdf0 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005324:	2000      	movs	r0, #0
 8005326:	f7fd fded 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800532a:	2055      	movs	r0, #85	; 0x55
 800532c:	f7fd fdea 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005330:	2000      	movs	r0, #0
 8005332:	f7fd fde7 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 8005336:	20e9      	movs	r0, #233	; 0xe9
 8005338:	f7fd fdc0 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 800533c:	20aa      	movs	r0, #170	; 0xaa
 800533e:	f7fd fde1 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005342:	2000      	movs	r0, #0
 8005344:	f7fd fdde 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005348:	2000      	movs	r0, #0
 800534a:	f7fd fddb 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800534e:	2000      	movs	r0, #0
 8005350:	f7fd fdd8 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 8005354:	2000      	movs	r0, #0
 8005356:	f7fd fdb1 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 800535a:	20aa      	movs	r0, #170	; 0xaa
 800535c:	f7fd fdd2 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8005360:	20cf      	movs	r0, #207	; 0xcf
 8005362:	f7fd fdab 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8005366:	2000      	movs	r0, #0
 8005368:	f7fd fdcc 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800536c:	2000      	movs	r0, #0
 800536e:	f7fd fdc9 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005372:	2000      	movs	r0, #0
 8005374:	f7fd fdc6 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005378:	2000      	movs	r0, #0
 800537a:	f7fd fdc3 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800537e:	2000      	movs	r0, #0
 8005380:	f7fd fdc0 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005384:	2000      	movs	r0, #0
 8005386:	f7fd fdbd 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800538a:	2000      	movs	r0, #0
 800538c:	f7fd fdba 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005390:	2000      	movs	r0, #0
 8005392:	f7fd fdb7 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005396:	2000      	movs	r0, #0
 8005398:	f7fd fdb4 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800539c:	2000      	movs	r0, #0
 800539e:	f7fd fdb1 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053a2:	2000      	movs	r0, #0
 80053a4:	f7fd fdae 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053a8:	2000      	movs	r0, #0
 80053aa:	f7fd fdab 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053ae:	2000      	movs	r0, #0
 80053b0:	f7fd fda8 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053b4:	2000      	movs	r0, #0
 80053b6:	f7fd fda5 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053ba:	2000      	movs	r0, #0
 80053bc:	f7fd fda2 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053c0:	2000      	movs	r0, #0
 80053c2:	f7fd fd9f 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053c6:	2000      	movs	r0, #0
 80053c8:	f7fd fd9c 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 80053cc:	20f0      	movs	r0, #240	; 0xf0
 80053ce:	f7fd fd75 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80053d2:	2000      	movs	r0, #0
 80053d4:	f7fd fd96 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80053d8:	2050      	movs	r0, #80	; 0x50
 80053da:	f7fd fd93 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053de:	2000      	movs	r0, #0
 80053e0:	f7fd fd90 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053e4:	2000      	movs	r0, #0
 80053e6:	f7fd fd8d 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80053ea:	2000      	movs	r0, #0
 80053ec:	f7fd fd8a 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 80053f0:	20f3      	movs	r0, #243	; 0xf3
 80053f2:	f7fd fd63 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80053f6:	2000      	movs	r0, #0
 80053f8:	f7fd fd84 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 80053fc:	20f9      	movs	r0, #249	; 0xf9
 80053fe:	f7fd fd5d 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 8005402:	2006      	movs	r0, #6
 8005404:	f7fd fd7e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8005408:	2010      	movs	r0, #16
 800540a:	f7fd fd7b 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 800540e:	2029      	movs	r0, #41	; 0x29
 8005410:	f7fd fd78 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8005414:	2000      	movs	r0, #0
 8005416:	f7fd fd75 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 800541a:	203a      	movs	r0, #58	; 0x3a
 800541c:	f7fd fd4e 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8005420:	2055      	movs	r0, #85	; 0x55
 8005422:	f7fd fd6f 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 8005426:	2011      	movs	r0, #17
 8005428:	f7fd fd48 	bl	8002ebc <LCD_WR_REG>
		HAL_Delay(100);
 800542c:	2064      	movs	r0, #100	; 0x64
 800542e:	f7fb ff33 	bl	8001298 <HAL_Delay>
		LCD_WR_REG(0x29);
 8005432:	2029      	movs	r0, #41	; 0x29
 8005434:	f7fd fd42 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8005438:	2035      	movs	r0, #53	; 0x35
 800543a:	f7fd fd3f 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800543e:	2000      	movs	r0, #0
 8005440:	f7fd fd60 	bl	8002f04 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 8005444:	2051      	movs	r0, #81	; 0x51
 8005446:	f7fd fd39 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 800544a:	20ff      	movs	r0, #255	; 0xff
 800544c:	f7fd fd5a 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 8005450:	2053      	movs	r0, #83	; 0x53
 8005452:	f7fd fd33 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 8005456:	202c      	movs	r0, #44	; 0x2c
 8005458:	f7fd fd54 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 800545c:	2055      	movs	r0, #85	; 0x55
 800545e:	f7fd fd2d 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 8005462:	2082      	movs	r0, #130	; 0x82
 8005464:	f7fd fd4e 	bl	8002f04 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8005468:	202c      	movs	r0, #44	; 0x2c
 800546a:	f7fd fd27 	bl	8002ebc <LCD_WR_REG>
 800546e:	f002 bca1 	b.w	8007db4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 8005472:	4b04      	ldr	r3, [pc, #16]	; (8005484 <LCD_Init+0x1504>)
 8005474:	889b      	ldrh	r3, [r3, #4]
 8005476:	f245 5210 	movw	r2, #21776	; 0x5510
 800547a:	4293      	cmp	r3, r2
 800547c:	f040 8782 	bne.w	8006384 <LCD_Init+0x2404>
 8005480:	e002      	b.n	8005488 <LCD_Init+0x1508>
 8005482:	bf00      	nop
 8005484:	20000290 	.word	0x20000290
		LCD_WriteReg(0xF000, 0x55);
 8005488:	2155      	movs	r1, #85	; 0x55
 800548a:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 800548e:	f7fd fda1 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8005492:	21aa      	movs	r1, #170	; 0xaa
 8005494:	f24f 0001 	movw	r0, #61441	; 0xf001
 8005498:	f7fd fd9c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 800549c:	2152      	movs	r1, #82	; 0x52
 800549e:	f24f 0002 	movw	r0, #61442	; 0xf002
 80054a2:	f7fd fd97 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 80054a6:	2108      	movs	r1, #8
 80054a8:	f24f 0003 	movw	r0, #61443	; 0xf003
 80054ac:	f7fd fd92 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 80054b0:	2101      	movs	r1, #1
 80054b2:	f24f 0004 	movw	r0, #61444	; 0xf004
 80054b6:	f7fd fd8d 	bl	8002fd4 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 80054ba:	210d      	movs	r1, #13
 80054bc:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80054c0:	f7fd fd88 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 80054c4:	210d      	movs	r1, #13
 80054c6:	f24b 0001 	movw	r0, #45057	; 0xb001
 80054ca:	f7fd fd83 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 80054ce:	210d      	movs	r1, #13
 80054d0:	f24b 0002 	movw	r0, #45058	; 0xb002
 80054d4:	f7fd fd7e 	bl	8002fd4 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 80054d8:	2134      	movs	r1, #52	; 0x34
 80054da:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80054de:	f7fd fd79 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 80054e2:	2134      	movs	r1, #52	; 0x34
 80054e4:	f24b 6001 	movw	r0, #46593	; 0xb601
 80054e8:	f7fd fd74 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 80054ec:	2134      	movs	r1, #52	; 0x34
 80054ee:	f24b 6002 	movw	r0, #46594	; 0xb602
 80054f2:	f7fd fd6f 	bl	8002fd4 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 80054f6:	210d      	movs	r1, #13
 80054f8:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80054fc:	f7fd fd6a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 8005500:	210d      	movs	r1, #13
 8005502:	f24b 1001 	movw	r0, #45313	; 0xb101
 8005506:	f7fd fd65 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 800550a:	210d      	movs	r1, #13
 800550c:	f24b 1002 	movw	r0, #45314	; 0xb102
 8005510:	f7fd fd60 	bl	8002fd4 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 8005514:	2134      	movs	r1, #52	; 0x34
 8005516:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 800551a:	f7fd fd5b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 800551e:	2134      	movs	r1, #52	; 0x34
 8005520:	f24b 7001 	movw	r0, #46849	; 0xb701
 8005524:	f7fd fd56 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8005528:	2134      	movs	r1, #52	; 0x34
 800552a:	f24b 7002 	movw	r0, #46850	; 0xb702
 800552e:	f7fd fd51 	bl	8002fd4 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 8005532:	2100      	movs	r1, #0
 8005534:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8005538:	f7fd fd4c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 800553c:	2100      	movs	r1, #0
 800553e:	f24b 2001 	movw	r0, #45569	; 0xb201
 8005542:	f7fd fd47 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 8005546:	2100      	movs	r1, #0
 8005548:	f24b 2002 	movw	r0, #45570	; 0xb202
 800554c:	f7fd fd42 	bl	8002fd4 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 8005550:	2124      	movs	r1, #36	; 0x24
 8005552:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8005556:	f7fd fd3d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 800555a:	2124      	movs	r1, #36	; 0x24
 800555c:	f64b 0001 	movw	r0, #47105	; 0xb801
 8005560:	f7fd fd38 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 8005564:	2124      	movs	r1, #36	; 0x24
 8005566:	f64b 0002 	movw	r0, #47106	; 0xb802
 800556a:	f7fd fd33 	bl	8002fd4 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 800556e:	2101      	movs	r1, #1
 8005570:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8005574:	f7fd fd2e 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8005578:	210f      	movs	r1, #15
 800557a:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 800557e:	f7fd fd29 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 8005582:	210f      	movs	r1, #15
 8005584:	f24b 3001 	movw	r0, #45825	; 0xb301
 8005588:	f7fd fd24 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 800558c:	210f      	movs	r1, #15
 800558e:	f24b 3002 	movw	r0, #45826	; 0xb302
 8005592:	f7fd fd1f 	bl	8002fd4 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 8005596:	2134      	movs	r1, #52	; 0x34
 8005598:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 800559c:	f7fd fd1a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 80055a0:	2134      	movs	r1, #52	; 0x34
 80055a2:	f64b 1001 	movw	r0, #47361	; 0xb901
 80055a6:	f7fd fd15 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 80055aa:	2134      	movs	r1, #52	; 0x34
 80055ac:	f64b 1002 	movw	r0, #47362	; 0xb902
 80055b0:	f7fd fd10 	bl	8002fd4 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 80055b4:	2108      	movs	r1, #8
 80055b6:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80055ba:	f7fd fd0b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 80055be:	2108      	movs	r1, #8
 80055c0:	f24b 5001 	movw	r0, #46337	; 0xb501
 80055c4:	f7fd fd06 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 80055c8:	2108      	movs	r1, #8
 80055ca:	f24b 5002 	movw	r0, #46338	; 0xb502
 80055ce:	f7fd fd01 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 80055d2:	2103      	movs	r1, #3
 80055d4:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 80055d8:	f7fd fcfc 	bl	8002fd4 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 80055dc:	2124      	movs	r1, #36	; 0x24
 80055de:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 80055e2:	f7fd fcf7 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 80055e6:	2124      	movs	r1, #36	; 0x24
 80055e8:	f64b 2001 	movw	r0, #47617	; 0xba01
 80055ec:	f7fd fcf2 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 80055f0:	2124      	movs	r1, #36	; 0x24
 80055f2:	f64b 2002 	movw	r0, #47618	; 0xba02
 80055f6:	f7fd fced 	bl	8002fd4 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 80055fa:	2100      	movs	r1, #0
 80055fc:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8005600:	f7fd fce8 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 8005604:	2178      	movs	r1, #120	; 0x78
 8005606:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800560a:	f7fd fce3 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 800560e:	2100      	movs	r1, #0
 8005610:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8005614:	f7fd fcde 	bl	8002fd4 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8005618:	2100      	movs	r1, #0
 800561a:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 800561e:	f7fd fcd9 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 8005622:	2178      	movs	r1, #120	; 0x78
 8005624:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8005628:	f7fd fcd4 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 800562c:	2100      	movs	r1, #0
 800562e:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8005632:	f7fd fccf 	bl	8002fd4 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 8005636:	2100      	movs	r1, #0
 8005638:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 800563c:	f7fd fcca 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 8005640:	2164      	movs	r1, #100	; 0x64
 8005642:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8005646:	f7fd fcc5 	bl	8002fd4 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 800564a:	2100      	movs	r1, #0
 800564c:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8005650:	f7fd fcc0 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 8005654:	2133      	movs	r1, #51	; 0x33
 8005656:	f24d 1001 	movw	r0, #53505	; 0xd101
 800565a:	f7fd fcbb 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 800565e:	2100      	movs	r1, #0
 8005660:	f24d 1002 	movw	r0, #53506	; 0xd102
 8005664:	f7fd fcb6 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8005668:	2134      	movs	r1, #52	; 0x34
 800566a:	f24d 1003 	movw	r0, #53507	; 0xd103
 800566e:	f7fd fcb1 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 8005672:	2100      	movs	r1, #0
 8005674:	f24d 1004 	movw	r0, #53508	; 0xd104
 8005678:	f7fd fcac 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 800567c:	213a      	movs	r1, #58	; 0x3a
 800567e:	f24d 1005 	movw	r0, #53509	; 0xd105
 8005682:	f7fd fca7 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 8005686:	2100      	movs	r1, #0
 8005688:	f24d 1006 	movw	r0, #53510	; 0xd106
 800568c:	f7fd fca2 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8005690:	214a      	movs	r1, #74	; 0x4a
 8005692:	f24d 1007 	movw	r0, #53511	; 0xd107
 8005696:	f7fd fc9d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 800569a:	2100      	movs	r1, #0
 800569c:	f24d 1008 	movw	r0, #53512	; 0xd108
 80056a0:	f7fd fc98 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 80056a4:	215c      	movs	r1, #92	; 0x5c
 80056a6:	f24d 1009 	movw	r0, #53513	; 0xd109
 80056aa:	f7fd fc93 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 80056ae:	2100      	movs	r1, #0
 80056b0:	f24d 100a 	movw	r0, #53514	; 0xd10a
 80056b4:	f7fd fc8e 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 80056b8:	2181      	movs	r1, #129	; 0x81
 80056ba:	f24d 100b 	movw	r0, #53515	; 0xd10b
 80056be:	f7fd fc89 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 80056c2:	2100      	movs	r1, #0
 80056c4:	f24d 100c 	movw	r0, #53516	; 0xd10c
 80056c8:	f7fd fc84 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 80056cc:	21a6      	movs	r1, #166	; 0xa6
 80056ce:	f24d 100d 	movw	r0, #53517	; 0xd10d
 80056d2:	f7fd fc7f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 80056d6:	2100      	movs	r1, #0
 80056d8:	f24d 100e 	movw	r0, #53518	; 0xd10e
 80056dc:	f7fd fc7a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 80056e0:	21e5      	movs	r1, #229	; 0xe5
 80056e2:	f24d 100f 	movw	r0, #53519	; 0xd10f
 80056e6:	f7fd fc75 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 80056ea:	2101      	movs	r1, #1
 80056ec:	f24d 1010 	movw	r0, #53520	; 0xd110
 80056f0:	f7fd fc70 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 80056f4:	2113      	movs	r1, #19
 80056f6:	f24d 1011 	movw	r0, #53521	; 0xd111
 80056fa:	f7fd fc6b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 80056fe:	2101      	movs	r1, #1
 8005700:	f24d 1012 	movw	r0, #53522	; 0xd112
 8005704:	f7fd fc66 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8005708:	2154      	movs	r1, #84	; 0x54
 800570a:	f24d 1013 	movw	r0, #53523	; 0xd113
 800570e:	f7fd fc61 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 8005712:	2101      	movs	r1, #1
 8005714:	f24d 1014 	movw	r0, #53524	; 0xd114
 8005718:	f7fd fc5c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 800571c:	2182      	movs	r1, #130	; 0x82
 800571e:	f24d 1015 	movw	r0, #53525	; 0xd115
 8005722:	f7fd fc57 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 8005726:	2101      	movs	r1, #1
 8005728:	f24d 1016 	movw	r0, #53526	; 0xd116
 800572c:	f7fd fc52 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 8005730:	21ca      	movs	r1, #202	; 0xca
 8005732:	f24d 1017 	movw	r0, #53527	; 0xd117
 8005736:	f7fd fc4d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 800573a:	2102      	movs	r1, #2
 800573c:	f24d 1018 	movw	r0, #53528	; 0xd118
 8005740:	f7fd fc48 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 8005744:	2100      	movs	r1, #0
 8005746:	f24d 1019 	movw	r0, #53529	; 0xd119
 800574a:	f7fd fc43 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 800574e:	2102      	movs	r1, #2
 8005750:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8005754:	f7fd fc3e 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 8005758:	2101      	movs	r1, #1
 800575a:	f24d 101b 	movw	r0, #53531	; 0xd11b
 800575e:	f7fd fc39 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 8005762:	2102      	movs	r1, #2
 8005764:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8005768:	f7fd fc34 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 800576c:	2134      	movs	r1, #52	; 0x34
 800576e:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8005772:	f7fd fc2f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 8005776:	2102      	movs	r1, #2
 8005778:	f24d 101e 	movw	r0, #53534	; 0xd11e
 800577c:	f7fd fc2a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8005780:	2167      	movs	r1, #103	; 0x67
 8005782:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8005786:	f7fd fc25 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 800578a:	2102      	movs	r1, #2
 800578c:	f24d 1020 	movw	r0, #53536	; 0xd120
 8005790:	f7fd fc20 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 8005794:	2184      	movs	r1, #132	; 0x84
 8005796:	f24d 1021 	movw	r0, #53537	; 0xd121
 800579a:	f7fd fc1b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 800579e:	2102      	movs	r1, #2
 80057a0:	f24d 1022 	movw	r0, #53538	; 0xd122
 80057a4:	f7fd fc16 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 80057a8:	21a4      	movs	r1, #164	; 0xa4
 80057aa:	f24d 1023 	movw	r0, #53539	; 0xd123
 80057ae:	f7fd fc11 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 80057b2:	2102      	movs	r1, #2
 80057b4:	f24d 1024 	movw	r0, #53540	; 0xd124
 80057b8:	f7fd fc0c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 80057bc:	21b7      	movs	r1, #183	; 0xb7
 80057be:	f24d 1025 	movw	r0, #53541	; 0xd125
 80057c2:	f7fd fc07 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 80057c6:	2102      	movs	r1, #2
 80057c8:	f24d 1026 	movw	r0, #53542	; 0xd126
 80057cc:	f7fd fc02 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 80057d0:	21cf      	movs	r1, #207	; 0xcf
 80057d2:	f24d 1027 	movw	r0, #53543	; 0xd127
 80057d6:	f7fd fbfd 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 80057da:	2102      	movs	r1, #2
 80057dc:	f24d 1028 	movw	r0, #53544	; 0xd128
 80057e0:	f7fd fbf8 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 80057e4:	21de      	movs	r1, #222	; 0xde
 80057e6:	f24d 1029 	movw	r0, #53545	; 0xd129
 80057ea:	f7fd fbf3 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 80057ee:	2102      	movs	r1, #2
 80057f0:	f24d 102a 	movw	r0, #53546	; 0xd12a
 80057f4:	f7fd fbee 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 80057f8:	21f2      	movs	r1, #242	; 0xf2
 80057fa:	f24d 102b 	movw	r0, #53547	; 0xd12b
 80057fe:	f7fd fbe9 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 8005802:	2102      	movs	r1, #2
 8005804:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8005808:	f7fd fbe4 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 800580c:	21fe      	movs	r1, #254	; 0xfe
 800580e:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8005812:	f7fd fbdf 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 8005816:	2103      	movs	r1, #3
 8005818:	f24d 102e 	movw	r0, #53550	; 0xd12e
 800581c:	f7fd fbda 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8005820:	2110      	movs	r1, #16
 8005822:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8005826:	f7fd fbd5 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 800582a:	2103      	movs	r1, #3
 800582c:	f24d 1030 	movw	r0, #53552	; 0xd130
 8005830:	f7fd fbd0 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 8005834:	2133      	movs	r1, #51	; 0x33
 8005836:	f24d 1031 	movw	r0, #53553	; 0xd131
 800583a:	f7fd fbcb 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 800583e:	2103      	movs	r1, #3
 8005840:	f24d 1032 	movw	r0, #53554	; 0xd132
 8005844:	f7fd fbc6 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8005848:	216d      	movs	r1, #109	; 0x6d
 800584a:	f24d 1033 	movw	r0, #53555	; 0xd133
 800584e:	f7fd fbc1 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 8005852:	2100      	movs	r1, #0
 8005854:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8005858:	f7fd fbbc 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 800585c:	2133      	movs	r1, #51	; 0x33
 800585e:	f24d 2001 	movw	r0, #53761	; 0xd201
 8005862:	f7fd fbb7 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 8005866:	2100      	movs	r1, #0
 8005868:	f24d 2002 	movw	r0, #53762	; 0xd202
 800586c:	f7fd fbb2 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8005870:	2134      	movs	r1, #52	; 0x34
 8005872:	f24d 2003 	movw	r0, #53763	; 0xd203
 8005876:	f7fd fbad 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 800587a:	2100      	movs	r1, #0
 800587c:	f24d 2004 	movw	r0, #53764	; 0xd204
 8005880:	f7fd fba8 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 8005884:	213a      	movs	r1, #58	; 0x3a
 8005886:	f24d 2005 	movw	r0, #53765	; 0xd205
 800588a:	f7fd fba3 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 800588e:	2100      	movs	r1, #0
 8005890:	f24d 2006 	movw	r0, #53766	; 0xd206
 8005894:	f7fd fb9e 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8005898:	214a      	movs	r1, #74	; 0x4a
 800589a:	f24d 2007 	movw	r0, #53767	; 0xd207
 800589e:	f7fd fb99 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 80058a2:	2100      	movs	r1, #0
 80058a4:	f24d 2008 	movw	r0, #53768	; 0xd208
 80058a8:	f7fd fb94 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 80058ac:	215c      	movs	r1, #92	; 0x5c
 80058ae:	f24d 2009 	movw	r0, #53769	; 0xd209
 80058b2:	f7fd fb8f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 80058b6:	2100      	movs	r1, #0
 80058b8:	f24d 200a 	movw	r0, #53770	; 0xd20a
 80058bc:	f7fd fb8a 	bl	8002fd4 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 80058c0:	2181      	movs	r1, #129	; 0x81
 80058c2:	f24d 200b 	movw	r0, #53771	; 0xd20b
 80058c6:	f7fd fb85 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 80058ca:	2100      	movs	r1, #0
 80058cc:	f24d 200c 	movw	r0, #53772	; 0xd20c
 80058d0:	f7fd fb80 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 80058d4:	21a6      	movs	r1, #166	; 0xa6
 80058d6:	f24d 200d 	movw	r0, #53773	; 0xd20d
 80058da:	f7fd fb7b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 80058de:	2100      	movs	r1, #0
 80058e0:	f24d 200e 	movw	r0, #53774	; 0xd20e
 80058e4:	f7fd fb76 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 80058e8:	21e5      	movs	r1, #229	; 0xe5
 80058ea:	f24d 200f 	movw	r0, #53775	; 0xd20f
 80058ee:	f7fd fb71 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 80058f2:	2101      	movs	r1, #1
 80058f4:	f24d 2010 	movw	r0, #53776	; 0xd210
 80058f8:	f7fd fb6c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 80058fc:	2113      	movs	r1, #19
 80058fe:	f24d 2011 	movw	r0, #53777	; 0xd211
 8005902:	f7fd fb67 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 8005906:	2101      	movs	r1, #1
 8005908:	f24d 2012 	movw	r0, #53778	; 0xd212
 800590c:	f7fd fb62 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8005910:	2154      	movs	r1, #84	; 0x54
 8005912:	f24d 2013 	movw	r0, #53779	; 0xd213
 8005916:	f7fd fb5d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 800591a:	2101      	movs	r1, #1
 800591c:	f24d 2014 	movw	r0, #53780	; 0xd214
 8005920:	f7fd fb58 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 8005924:	2182      	movs	r1, #130	; 0x82
 8005926:	f24d 2015 	movw	r0, #53781	; 0xd215
 800592a:	f7fd fb53 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 800592e:	2101      	movs	r1, #1
 8005930:	f24d 2016 	movw	r0, #53782	; 0xd216
 8005934:	f7fd fb4e 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8005938:	21ca      	movs	r1, #202	; 0xca
 800593a:	f24d 2017 	movw	r0, #53783	; 0xd217
 800593e:	f7fd fb49 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 8005942:	2102      	movs	r1, #2
 8005944:	f24d 2018 	movw	r0, #53784	; 0xd218
 8005948:	f7fd fb44 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 800594c:	2100      	movs	r1, #0
 800594e:	f24d 2019 	movw	r0, #53785	; 0xd219
 8005952:	f7fd fb3f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 8005956:	2102      	movs	r1, #2
 8005958:	f24d 201a 	movw	r0, #53786	; 0xd21a
 800595c:	f7fd fb3a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8005960:	2101      	movs	r1, #1
 8005962:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8005966:	f7fd fb35 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 800596a:	2102      	movs	r1, #2
 800596c:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8005970:	f7fd fb30 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 8005974:	2134      	movs	r1, #52	; 0x34
 8005976:	f24d 201d 	movw	r0, #53789	; 0xd21d
 800597a:	f7fd fb2b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 800597e:	2102      	movs	r1, #2
 8005980:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8005984:	f7fd fb26 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8005988:	2167      	movs	r1, #103	; 0x67
 800598a:	f24d 201f 	movw	r0, #53791	; 0xd21f
 800598e:	f7fd fb21 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 8005992:	2102      	movs	r1, #2
 8005994:	f24d 2020 	movw	r0, #53792	; 0xd220
 8005998:	f7fd fb1c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 800599c:	2184      	movs	r1, #132	; 0x84
 800599e:	f24d 2021 	movw	r0, #53793	; 0xd221
 80059a2:	f7fd fb17 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 80059a6:	2102      	movs	r1, #2
 80059a8:	f24d 2022 	movw	r0, #53794	; 0xd222
 80059ac:	f7fd fb12 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 80059b0:	21a4      	movs	r1, #164	; 0xa4
 80059b2:	f24d 2023 	movw	r0, #53795	; 0xd223
 80059b6:	f7fd fb0d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 80059ba:	2102      	movs	r1, #2
 80059bc:	f24d 2024 	movw	r0, #53796	; 0xd224
 80059c0:	f7fd fb08 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 80059c4:	21b7      	movs	r1, #183	; 0xb7
 80059c6:	f24d 2025 	movw	r0, #53797	; 0xd225
 80059ca:	f7fd fb03 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 80059ce:	2102      	movs	r1, #2
 80059d0:	f24d 2026 	movw	r0, #53798	; 0xd226
 80059d4:	f7fd fafe 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 80059d8:	21cf      	movs	r1, #207	; 0xcf
 80059da:	f24d 2027 	movw	r0, #53799	; 0xd227
 80059de:	f7fd faf9 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 80059e2:	2102      	movs	r1, #2
 80059e4:	f24d 2028 	movw	r0, #53800	; 0xd228
 80059e8:	f7fd faf4 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 80059ec:	21de      	movs	r1, #222	; 0xde
 80059ee:	f24d 2029 	movw	r0, #53801	; 0xd229
 80059f2:	f7fd faef 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 80059f6:	2102      	movs	r1, #2
 80059f8:	f24d 202a 	movw	r0, #53802	; 0xd22a
 80059fc:	f7fd faea 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8005a00:	21f2      	movs	r1, #242	; 0xf2
 8005a02:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8005a06:	f7fd fae5 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 8005a0a:	2102      	movs	r1, #2
 8005a0c:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8005a10:	f7fd fae0 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 8005a14:	21fe      	movs	r1, #254	; 0xfe
 8005a16:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8005a1a:	f7fd fadb 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8005a1e:	2103      	movs	r1, #3
 8005a20:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8005a24:	f7fd fad6 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8005a28:	2110      	movs	r1, #16
 8005a2a:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8005a2e:	f7fd fad1 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 8005a32:	2103      	movs	r1, #3
 8005a34:	f24d 2030 	movw	r0, #53808	; 0xd230
 8005a38:	f7fd facc 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8005a3c:	2133      	movs	r1, #51	; 0x33
 8005a3e:	f24d 2031 	movw	r0, #53809	; 0xd231
 8005a42:	f7fd fac7 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 8005a46:	2103      	movs	r1, #3
 8005a48:	f24d 2032 	movw	r0, #53810	; 0xd232
 8005a4c:	f7fd fac2 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8005a50:	216d      	movs	r1, #109	; 0x6d
 8005a52:	f24d 2033 	movw	r0, #53811	; 0xd233
 8005a56:	f7fd fabd 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8005a60:	f7fd fab8 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 8005a64:	2133      	movs	r1, #51	; 0x33
 8005a66:	f24d 3001 	movw	r0, #54017	; 0xd301
 8005a6a:	f7fd fab3 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 8005a6e:	2100      	movs	r1, #0
 8005a70:	f24d 3002 	movw	r0, #54018	; 0xd302
 8005a74:	f7fd faae 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8005a78:	2134      	movs	r1, #52	; 0x34
 8005a7a:	f24d 3003 	movw	r0, #54019	; 0xd303
 8005a7e:	f7fd faa9 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 8005a82:	2100      	movs	r1, #0
 8005a84:	f24d 3004 	movw	r0, #54020	; 0xd304
 8005a88:	f7fd faa4 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 8005a8c:	213a      	movs	r1, #58	; 0x3a
 8005a8e:	f24d 3005 	movw	r0, #54021	; 0xd305
 8005a92:	f7fd fa9f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 8005a96:	2100      	movs	r1, #0
 8005a98:	f24d 3006 	movw	r0, #54022	; 0xd306
 8005a9c:	f7fd fa9a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8005aa0:	214a      	movs	r1, #74	; 0x4a
 8005aa2:	f24d 3007 	movw	r0, #54023	; 0xd307
 8005aa6:	f7fd fa95 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 8005aaa:	2100      	movs	r1, #0
 8005aac:	f24d 3008 	movw	r0, #54024	; 0xd308
 8005ab0:	f7fd fa90 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 8005ab4:	215c      	movs	r1, #92	; 0x5c
 8005ab6:	f24d 3009 	movw	r0, #54025	; 0xd309
 8005aba:	f7fd fa8b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 8005abe:	2100      	movs	r1, #0
 8005ac0:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8005ac4:	f7fd fa86 	bl	8002fd4 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8005ac8:	2181      	movs	r1, #129	; 0x81
 8005aca:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8005ace:	f7fd fa81 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8005ad8:	f7fd fa7c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8005adc:	21a6      	movs	r1, #166	; 0xa6
 8005ade:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8005ae2:	f7fd fa77 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8005aec:	f7fd fa72 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8005af0:	21e5      	movs	r1, #229	; 0xe5
 8005af2:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8005af6:	f7fd fa6d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8005afa:	2101      	movs	r1, #1
 8005afc:	f24d 3010 	movw	r0, #54032	; 0xd310
 8005b00:	f7fd fa68 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 8005b04:	2113      	movs	r1, #19
 8005b06:	f24d 3011 	movw	r0, #54033	; 0xd311
 8005b0a:	f7fd fa63 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8005b0e:	2101      	movs	r1, #1
 8005b10:	f24d 3012 	movw	r0, #54034	; 0xd312
 8005b14:	f7fd fa5e 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8005b18:	2154      	movs	r1, #84	; 0x54
 8005b1a:	f24d 3013 	movw	r0, #54035	; 0xd313
 8005b1e:	f7fd fa59 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 8005b22:	2101      	movs	r1, #1
 8005b24:	f24d 3014 	movw	r0, #54036	; 0xd314
 8005b28:	f7fd fa54 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8005b2c:	2182      	movs	r1, #130	; 0x82
 8005b2e:	f24d 3015 	movw	r0, #54037	; 0xd315
 8005b32:	f7fd fa4f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 8005b36:	2101      	movs	r1, #1
 8005b38:	f24d 3016 	movw	r0, #54038	; 0xd316
 8005b3c:	f7fd fa4a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8005b40:	21ca      	movs	r1, #202	; 0xca
 8005b42:	f24d 3017 	movw	r0, #54039	; 0xd317
 8005b46:	f7fd fa45 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8005b4a:	2102      	movs	r1, #2
 8005b4c:	f24d 3018 	movw	r0, #54040	; 0xd318
 8005b50:	f7fd fa40 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8005b54:	2100      	movs	r1, #0
 8005b56:	f24d 3019 	movw	r0, #54041	; 0xd319
 8005b5a:	f7fd fa3b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8005b5e:	2102      	movs	r1, #2
 8005b60:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8005b64:	f7fd fa36 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8005b68:	2101      	movs	r1, #1
 8005b6a:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8005b6e:	f7fd fa31 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8005b72:	2102      	movs	r1, #2
 8005b74:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8005b78:	f7fd fa2c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8005b7c:	2134      	movs	r1, #52	; 0x34
 8005b7e:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8005b82:	f7fd fa27 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8005b86:	2102      	movs	r1, #2
 8005b88:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8005b8c:	f7fd fa22 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8005b90:	2167      	movs	r1, #103	; 0x67
 8005b92:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8005b96:	f7fd fa1d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8005b9a:	2102      	movs	r1, #2
 8005b9c:	f24d 3020 	movw	r0, #54048	; 0xd320
 8005ba0:	f7fd fa18 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8005ba4:	2184      	movs	r1, #132	; 0x84
 8005ba6:	f24d 3021 	movw	r0, #54049	; 0xd321
 8005baa:	f7fd fa13 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8005bae:	2102      	movs	r1, #2
 8005bb0:	f24d 3022 	movw	r0, #54050	; 0xd322
 8005bb4:	f7fd fa0e 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8005bb8:	21a4      	movs	r1, #164	; 0xa4
 8005bba:	f24d 3023 	movw	r0, #54051	; 0xd323
 8005bbe:	f7fd fa09 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8005bc2:	2102      	movs	r1, #2
 8005bc4:	f24d 3024 	movw	r0, #54052	; 0xd324
 8005bc8:	f7fd fa04 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8005bcc:	21b7      	movs	r1, #183	; 0xb7
 8005bce:	f24d 3025 	movw	r0, #54053	; 0xd325
 8005bd2:	f7fd f9ff 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8005bd6:	2102      	movs	r1, #2
 8005bd8:	f24d 3026 	movw	r0, #54054	; 0xd326
 8005bdc:	f7fd f9fa 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8005be0:	21cf      	movs	r1, #207	; 0xcf
 8005be2:	f24d 3027 	movw	r0, #54055	; 0xd327
 8005be6:	f7fd f9f5 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8005bea:	2102      	movs	r1, #2
 8005bec:	f24d 3028 	movw	r0, #54056	; 0xd328
 8005bf0:	f7fd f9f0 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8005bf4:	21de      	movs	r1, #222	; 0xde
 8005bf6:	f24d 3029 	movw	r0, #54057	; 0xd329
 8005bfa:	f7fd f9eb 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8005bfe:	2102      	movs	r1, #2
 8005c00:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8005c04:	f7fd f9e6 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8005c08:	21f2      	movs	r1, #242	; 0xf2
 8005c0a:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8005c0e:	f7fd f9e1 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8005c12:	2102      	movs	r1, #2
 8005c14:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8005c18:	f7fd f9dc 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8005c1c:	21fe      	movs	r1, #254	; 0xfe
 8005c1e:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8005c22:	f7fd f9d7 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 8005c26:	2103      	movs	r1, #3
 8005c28:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8005c2c:	f7fd f9d2 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8005c30:	2110      	movs	r1, #16
 8005c32:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8005c36:	f7fd f9cd 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8005c3a:	2103      	movs	r1, #3
 8005c3c:	f24d 3030 	movw	r0, #54064	; 0xd330
 8005c40:	f7fd f9c8 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8005c44:	2133      	movs	r1, #51	; 0x33
 8005c46:	f24d 3031 	movw	r0, #54065	; 0xd331
 8005c4a:	f7fd f9c3 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8005c4e:	2103      	movs	r1, #3
 8005c50:	f24d 3032 	movw	r0, #54066	; 0xd332
 8005c54:	f7fd f9be 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8005c58:	216d      	movs	r1, #109	; 0x6d
 8005c5a:	f24d 3033 	movw	r0, #54067	; 0xd333
 8005c5e:	f7fd f9b9 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8005c62:	2100      	movs	r1, #0
 8005c64:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8005c68:	f7fd f9b4 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8005c6c:	2133      	movs	r1, #51	; 0x33
 8005c6e:	f24d 4001 	movw	r0, #54273	; 0xd401
 8005c72:	f7fd f9af 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8005c76:	2100      	movs	r1, #0
 8005c78:	f24d 4002 	movw	r0, #54274	; 0xd402
 8005c7c:	f7fd f9aa 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8005c80:	2134      	movs	r1, #52	; 0x34
 8005c82:	f24d 4003 	movw	r0, #54275	; 0xd403
 8005c86:	f7fd f9a5 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	f24d 4004 	movw	r0, #54276	; 0xd404
 8005c90:	f7fd f9a0 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8005c94:	213a      	movs	r1, #58	; 0x3a
 8005c96:	f24d 4005 	movw	r0, #54277	; 0xd405
 8005c9a:	f7fd f99b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	f24d 4006 	movw	r0, #54278	; 0xd406
 8005ca4:	f7fd f996 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8005ca8:	214a      	movs	r1, #74	; 0x4a
 8005caa:	f24d 4007 	movw	r0, #54279	; 0xd407
 8005cae:	f7fd f991 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	f24d 4008 	movw	r0, #54280	; 0xd408
 8005cb8:	f7fd f98c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8005cbc:	215c      	movs	r1, #92	; 0x5c
 8005cbe:	f24d 4009 	movw	r0, #54281	; 0xd409
 8005cc2:	f7fd f987 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8005ccc:	f7fd f982 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8005cd0:	2181      	movs	r1, #129	; 0x81
 8005cd2:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8005cd6:	f7fd f97d 	bl	8002fd4 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8005cda:	2100      	movs	r1, #0
 8005cdc:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8005ce0:	f7fd f978 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8005ce4:	21a6      	movs	r1, #166	; 0xa6
 8005ce6:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8005cea:	f7fd f973 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8005cee:	2100      	movs	r1, #0
 8005cf0:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8005cf4:	f7fd f96e 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8005cf8:	21e5      	movs	r1, #229	; 0xe5
 8005cfa:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8005cfe:	f7fd f969 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8005d02:	2101      	movs	r1, #1
 8005d04:	f24d 4010 	movw	r0, #54288	; 0xd410
 8005d08:	f7fd f964 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8005d0c:	2113      	movs	r1, #19
 8005d0e:	f24d 4011 	movw	r0, #54289	; 0xd411
 8005d12:	f7fd f95f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8005d16:	2101      	movs	r1, #1
 8005d18:	f24d 4012 	movw	r0, #54290	; 0xd412
 8005d1c:	f7fd f95a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8005d20:	2154      	movs	r1, #84	; 0x54
 8005d22:	f24d 4013 	movw	r0, #54291	; 0xd413
 8005d26:	f7fd f955 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	f24d 4014 	movw	r0, #54292	; 0xd414
 8005d30:	f7fd f950 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8005d34:	2182      	movs	r1, #130	; 0x82
 8005d36:	f24d 4015 	movw	r0, #54293	; 0xd415
 8005d3a:	f7fd f94b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8005d3e:	2101      	movs	r1, #1
 8005d40:	f24d 4016 	movw	r0, #54294	; 0xd416
 8005d44:	f7fd f946 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8005d48:	21ca      	movs	r1, #202	; 0xca
 8005d4a:	f24d 4017 	movw	r0, #54295	; 0xd417
 8005d4e:	f7fd f941 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8005d52:	2102      	movs	r1, #2
 8005d54:	f24d 4018 	movw	r0, #54296	; 0xd418
 8005d58:	f7fd f93c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	f24d 4019 	movw	r0, #54297	; 0xd419
 8005d62:	f7fd f937 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8005d66:	2102      	movs	r1, #2
 8005d68:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8005d6c:	f7fd f932 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8005d70:	2101      	movs	r1, #1
 8005d72:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8005d76:	f7fd f92d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8005d7a:	2102      	movs	r1, #2
 8005d7c:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8005d80:	f7fd f928 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8005d84:	2134      	movs	r1, #52	; 0x34
 8005d86:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8005d8a:	f7fd f923 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8005d8e:	2102      	movs	r1, #2
 8005d90:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8005d94:	f7fd f91e 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8005d98:	2167      	movs	r1, #103	; 0x67
 8005d9a:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8005d9e:	f7fd f919 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8005da2:	2102      	movs	r1, #2
 8005da4:	f24d 4020 	movw	r0, #54304	; 0xd420
 8005da8:	f7fd f914 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8005dac:	2184      	movs	r1, #132	; 0x84
 8005dae:	f24d 4021 	movw	r0, #54305	; 0xd421
 8005db2:	f7fd f90f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8005db6:	2102      	movs	r1, #2
 8005db8:	f24d 4022 	movw	r0, #54306	; 0xd422
 8005dbc:	f7fd f90a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8005dc0:	21a4      	movs	r1, #164	; 0xa4
 8005dc2:	f24d 4023 	movw	r0, #54307	; 0xd423
 8005dc6:	f7fd f905 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8005dca:	2102      	movs	r1, #2
 8005dcc:	f24d 4024 	movw	r0, #54308	; 0xd424
 8005dd0:	f7fd f900 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8005dd4:	21b7      	movs	r1, #183	; 0xb7
 8005dd6:	f24d 4025 	movw	r0, #54309	; 0xd425
 8005dda:	f7fd f8fb 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8005dde:	2102      	movs	r1, #2
 8005de0:	f24d 4026 	movw	r0, #54310	; 0xd426
 8005de4:	f7fd f8f6 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8005de8:	21cf      	movs	r1, #207	; 0xcf
 8005dea:	f24d 4027 	movw	r0, #54311	; 0xd427
 8005dee:	f7fd f8f1 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8005df2:	2102      	movs	r1, #2
 8005df4:	f24d 4028 	movw	r0, #54312	; 0xd428
 8005df8:	f7fd f8ec 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8005dfc:	21de      	movs	r1, #222	; 0xde
 8005dfe:	f24d 4029 	movw	r0, #54313	; 0xd429
 8005e02:	f7fd f8e7 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8005e06:	2102      	movs	r1, #2
 8005e08:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8005e0c:	f7fd f8e2 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8005e10:	21f2      	movs	r1, #242	; 0xf2
 8005e12:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8005e16:	f7fd f8dd 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8005e1a:	2102      	movs	r1, #2
 8005e1c:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8005e20:	f7fd f8d8 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 8005e24:	21fe      	movs	r1, #254	; 0xfe
 8005e26:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8005e2a:	f7fd f8d3 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8005e2e:	2103      	movs	r1, #3
 8005e30:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8005e34:	f7fd f8ce 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8005e38:	2110      	movs	r1, #16
 8005e3a:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8005e3e:	f7fd f8c9 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8005e42:	2103      	movs	r1, #3
 8005e44:	f24d 4030 	movw	r0, #54320	; 0xd430
 8005e48:	f7fd f8c4 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8005e4c:	2133      	movs	r1, #51	; 0x33
 8005e4e:	f24d 4031 	movw	r0, #54321	; 0xd431
 8005e52:	f7fd f8bf 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8005e56:	2103      	movs	r1, #3
 8005e58:	f24d 4032 	movw	r0, #54322	; 0xd432
 8005e5c:	f7fd f8ba 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8005e60:	216d      	movs	r1, #109	; 0x6d
 8005e62:	f24d 4033 	movw	r0, #54323	; 0xd433
 8005e66:	f7fd f8b5 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8005e70:	f7fd f8b0 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8005e74:	2133      	movs	r1, #51	; 0x33
 8005e76:	f24d 5001 	movw	r0, #54529	; 0xd501
 8005e7a:	f7fd f8ab 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 8005e7e:	2100      	movs	r1, #0
 8005e80:	f24d 5002 	movw	r0, #54530	; 0xd502
 8005e84:	f7fd f8a6 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8005e88:	2134      	movs	r1, #52	; 0x34
 8005e8a:	f24d 5003 	movw	r0, #54531	; 0xd503
 8005e8e:	f7fd f8a1 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 8005e92:	2100      	movs	r1, #0
 8005e94:	f24d 5004 	movw	r0, #54532	; 0xd504
 8005e98:	f7fd f89c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8005e9c:	213a      	movs	r1, #58	; 0x3a
 8005e9e:	f24d 5005 	movw	r0, #54533	; 0xd505
 8005ea2:	f7fd f897 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	f24d 5006 	movw	r0, #54534	; 0xd506
 8005eac:	f7fd f892 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8005eb0:	214a      	movs	r1, #74	; 0x4a
 8005eb2:	f24d 5007 	movw	r0, #54535	; 0xd507
 8005eb6:	f7fd f88d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 8005eba:	2100      	movs	r1, #0
 8005ebc:	f24d 5008 	movw	r0, #54536	; 0xd508
 8005ec0:	f7fd f888 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 8005ec4:	215c      	movs	r1, #92	; 0x5c
 8005ec6:	f24d 5009 	movw	r0, #54537	; 0xd509
 8005eca:	f7fd f883 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 8005ece:	2100      	movs	r1, #0
 8005ed0:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8005ed4:	f7fd f87e 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8005ed8:	2181      	movs	r1, #129	; 0x81
 8005eda:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8005ede:	f7fd f879 	bl	8002fd4 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8005ee8:	f7fd f874 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 8005eec:	21a6      	movs	r1, #166	; 0xa6
 8005eee:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8005ef2:	f7fd f86f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8005efc:	f7fd f86a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8005f00:	21e5      	movs	r1, #229	; 0xe5
 8005f02:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8005f06:	f7fd f865 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	f24d 5010 	movw	r0, #54544	; 0xd510
 8005f10:	f7fd f860 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 8005f14:	2113      	movs	r1, #19
 8005f16:	f24d 5011 	movw	r0, #54545	; 0xd511
 8005f1a:	f7fd f85b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8005f1e:	2101      	movs	r1, #1
 8005f20:	f24d 5012 	movw	r0, #54546	; 0xd512
 8005f24:	f7fd f856 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8005f28:	2154      	movs	r1, #84	; 0x54
 8005f2a:	f24d 5013 	movw	r0, #54547	; 0xd513
 8005f2e:	f7fd f851 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8005f32:	2101      	movs	r1, #1
 8005f34:	f24d 5014 	movw	r0, #54548	; 0xd514
 8005f38:	f7fd f84c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 8005f3c:	2182      	movs	r1, #130	; 0x82
 8005f3e:	f24d 5015 	movw	r0, #54549	; 0xd515
 8005f42:	f7fd f847 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8005f46:	2101      	movs	r1, #1
 8005f48:	f24d 5016 	movw	r0, #54550	; 0xd516
 8005f4c:	f7fd f842 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8005f50:	21ca      	movs	r1, #202	; 0xca
 8005f52:	f24d 5017 	movw	r0, #54551	; 0xd517
 8005f56:	f7fd f83d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8005f5a:	2102      	movs	r1, #2
 8005f5c:	f24d 5018 	movw	r0, #54552	; 0xd518
 8005f60:	f7fd f838 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8005f64:	2100      	movs	r1, #0
 8005f66:	f24d 5019 	movw	r0, #54553	; 0xd519
 8005f6a:	f7fd f833 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 8005f6e:	2102      	movs	r1, #2
 8005f70:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8005f74:	f7fd f82e 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8005f78:	2101      	movs	r1, #1
 8005f7a:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8005f7e:	f7fd f829 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8005f82:	2102      	movs	r1, #2
 8005f84:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8005f88:	f7fd f824 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 8005f8c:	2134      	movs	r1, #52	; 0x34
 8005f8e:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8005f92:	f7fd f81f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8005f96:	2102      	movs	r1, #2
 8005f98:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8005f9c:	f7fd f81a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8005fa0:	2167      	movs	r1, #103	; 0x67
 8005fa2:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8005fa6:	f7fd f815 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 8005faa:	2102      	movs	r1, #2
 8005fac:	f24d 5020 	movw	r0, #54560	; 0xd520
 8005fb0:	f7fd f810 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8005fb4:	2184      	movs	r1, #132	; 0x84
 8005fb6:	f24d 5021 	movw	r0, #54561	; 0xd521
 8005fba:	f7fd f80b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 8005fbe:	2102      	movs	r1, #2
 8005fc0:	f24d 5022 	movw	r0, #54562	; 0xd522
 8005fc4:	f7fd f806 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8005fc8:	21a4      	movs	r1, #164	; 0xa4
 8005fca:	f24d 5023 	movw	r0, #54563	; 0xd523
 8005fce:	f7fd f801 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 8005fd2:	2102      	movs	r1, #2
 8005fd4:	f24d 5024 	movw	r0, #54564	; 0xd524
 8005fd8:	f7fc fffc 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 8005fdc:	21b7      	movs	r1, #183	; 0xb7
 8005fde:	f24d 5025 	movw	r0, #54565	; 0xd525
 8005fe2:	f7fc fff7 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 8005fe6:	2102      	movs	r1, #2
 8005fe8:	f24d 5026 	movw	r0, #54566	; 0xd526
 8005fec:	f7fc fff2 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8005ff0:	21cf      	movs	r1, #207	; 0xcf
 8005ff2:	f24d 5027 	movw	r0, #54567	; 0xd527
 8005ff6:	f7fc ffed 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 8005ffa:	2102      	movs	r1, #2
 8005ffc:	f24d 5028 	movw	r0, #54568	; 0xd528
 8006000:	f7fc ffe8 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8006004:	21de      	movs	r1, #222	; 0xde
 8006006:	f24d 5029 	movw	r0, #54569	; 0xd529
 800600a:	f7fc ffe3 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 800600e:	2102      	movs	r1, #2
 8006010:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8006014:	f7fc ffde 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8006018:	21f2      	movs	r1, #242	; 0xf2
 800601a:	f24d 502b 	movw	r0, #54571	; 0xd52b
 800601e:	f7fc ffd9 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 8006022:	2102      	movs	r1, #2
 8006024:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8006028:	f7fc ffd4 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 800602c:	21fe      	movs	r1, #254	; 0xfe
 800602e:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8006032:	f7fc ffcf 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 8006036:	2103      	movs	r1, #3
 8006038:	f24d 502e 	movw	r0, #54574	; 0xd52e
 800603c:	f7fc ffca 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 8006040:	2110      	movs	r1, #16
 8006042:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8006046:	f7fc ffc5 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 800604a:	2103      	movs	r1, #3
 800604c:	f24d 5030 	movw	r0, #54576	; 0xd530
 8006050:	f7fc ffc0 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 8006054:	2133      	movs	r1, #51	; 0x33
 8006056:	f24d 5031 	movw	r0, #54577	; 0xd531
 800605a:	f7fc ffbb 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 800605e:	2103      	movs	r1, #3
 8006060:	f24d 5032 	movw	r0, #54578	; 0xd532
 8006064:	f7fc ffb6 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8006068:	216d      	movs	r1, #109	; 0x6d
 800606a:	f24d 5033 	movw	r0, #54579	; 0xd533
 800606e:	f7fc ffb1 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 8006072:	2100      	movs	r1, #0
 8006074:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8006078:	f7fc ffac 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 800607c:	2133      	movs	r1, #51	; 0x33
 800607e:	f24d 6001 	movw	r0, #54785	; 0xd601
 8006082:	f7fc ffa7 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 8006086:	2100      	movs	r1, #0
 8006088:	f24d 6002 	movw	r0, #54786	; 0xd602
 800608c:	f7fc ffa2 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8006090:	2134      	movs	r1, #52	; 0x34
 8006092:	f24d 6003 	movw	r0, #54787	; 0xd603
 8006096:	f7fc ff9d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 800609a:	2100      	movs	r1, #0
 800609c:	f24d 6004 	movw	r0, #54788	; 0xd604
 80060a0:	f7fc ff98 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 80060a4:	213a      	movs	r1, #58	; 0x3a
 80060a6:	f24d 6005 	movw	r0, #54789	; 0xd605
 80060aa:	f7fc ff93 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 80060ae:	2100      	movs	r1, #0
 80060b0:	f24d 6006 	movw	r0, #54790	; 0xd606
 80060b4:	f7fc ff8e 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 80060b8:	214a      	movs	r1, #74	; 0x4a
 80060ba:	f24d 6007 	movw	r0, #54791	; 0xd607
 80060be:	f7fc ff89 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 80060c2:	2100      	movs	r1, #0
 80060c4:	f24d 6008 	movw	r0, #54792	; 0xd608
 80060c8:	f7fc ff84 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 80060cc:	215c      	movs	r1, #92	; 0x5c
 80060ce:	f24d 6009 	movw	r0, #54793	; 0xd609
 80060d2:	f7fc ff7f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 80060d6:	2100      	movs	r1, #0
 80060d8:	f24d 600a 	movw	r0, #54794	; 0xd60a
 80060dc:	f7fc ff7a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 80060e0:	2181      	movs	r1, #129	; 0x81
 80060e2:	f24d 600b 	movw	r0, #54795	; 0xd60b
 80060e6:	f7fc ff75 	bl	8002fd4 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 80060ea:	2100      	movs	r1, #0
 80060ec:	f24d 600c 	movw	r0, #54796	; 0xd60c
 80060f0:	f7fc ff70 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 80060f4:	21a6      	movs	r1, #166	; 0xa6
 80060f6:	f24d 600d 	movw	r0, #54797	; 0xd60d
 80060fa:	f7fc ff6b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 80060fe:	2100      	movs	r1, #0
 8006100:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8006104:	f7fc ff66 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8006108:	21e5      	movs	r1, #229	; 0xe5
 800610a:	f24d 600f 	movw	r0, #54799	; 0xd60f
 800610e:	f7fc ff61 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 8006112:	2101      	movs	r1, #1
 8006114:	f24d 6010 	movw	r0, #54800	; 0xd610
 8006118:	f7fc ff5c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 800611c:	2113      	movs	r1, #19
 800611e:	f24d 6011 	movw	r0, #54801	; 0xd611
 8006122:	f7fc ff57 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 8006126:	2101      	movs	r1, #1
 8006128:	f24d 6012 	movw	r0, #54802	; 0xd612
 800612c:	f7fc ff52 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 8006130:	2154      	movs	r1, #84	; 0x54
 8006132:	f24d 6013 	movw	r0, #54803	; 0xd613
 8006136:	f7fc ff4d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 800613a:	2101      	movs	r1, #1
 800613c:	f24d 6014 	movw	r0, #54804	; 0xd614
 8006140:	f7fc ff48 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 8006144:	2182      	movs	r1, #130	; 0x82
 8006146:	f24d 6015 	movw	r0, #54805	; 0xd615
 800614a:	f7fc ff43 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 800614e:	2101      	movs	r1, #1
 8006150:	f24d 6016 	movw	r0, #54806	; 0xd616
 8006154:	f7fc ff3e 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 8006158:	21ca      	movs	r1, #202	; 0xca
 800615a:	f24d 6017 	movw	r0, #54807	; 0xd617
 800615e:	f7fc ff39 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 8006162:	2102      	movs	r1, #2
 8006164:	f24d 6018 	movw	r0, #54808	; 0xd618
 8006168:	f7fc ff34 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 800616c:	2100      	movs	r1, #0
 800616e:	f24d 6019 	movw	r0, #54809	; 0xd619
 8006172:	f7fc ff2f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 8006176:	2102      	movs	r1, #2
 8006178:	f24d 601a 	movw	r0, #54810	; 0xd61a
 800617c:	f7fc ff2a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8006180:	2101      	movs	r1, #1
 8006182:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8006186:	f7fc ff25 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 800618a:	2102      	movs	r1, #2
 800618c:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8006190:	f7fc ff20 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 8006194:	2134      	movs	r1, #52	; 0x34
 8006196:	f24d 601d 	movw	r0, #54813	; 0xd61d
 800619a:	f7fc ff1b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 800619e:	2102      	movs	r1, #2
 80061a0:	f24d 601e 	movw	r0, #54814	; 0xd61e
 80061a4:	f7fc ff16 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 80061a8:	2167      	movs	r1, #103	; 0x67
 80061aa:	f24d 601f 	movw	r0, #54815	; 0xd61f
 80061ae:	f7fc ff11 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 80061b2:	2102      	movs	r1, #2
 80061b4:	f24d 6020 	movw	r0, #54816	; 0xd620
 80061b8:	f7fc ff0c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 80061bc:	2184      	movs	r1, #132	; 0x84
 80061be:	f24d 6021 	movw	r0, #54817	; 0xd621
 80061c2:	f7fc ff07 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 80061c6:	2102      	movs	r1, #2
 80061c8:	f24d 6022 	movw	r0, #54818	; 0xd622
 80061cc:	f7fc ff02 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 80061d0:	21a4      	movs	r1, #164	; 0xa4
 80061d2:	f24d 6023 	movw	r0, #54819	; 0xd623
 80061d6:	f7fc fefd 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 80061da:	2102      	movs	r1, #2
 80061dc:	f24d 6024 	movw	r0, #54820	; 0xd624
 80061e0:	f7fc fef8 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 80061e4:	21b7      	movs	r1, #183	; 0xb7
 80061e6:	f24d 6025 	movw	r0, #54821	; 0xd625
 80061ea:	f7fc fef3 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 80061ee:	2102      	movs	r1, #2
 80061f0:	f24d 6026 	movw	r0, #54822	; 0xd626
 80061f4:	f7fc feee 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 80061f8:	21cf      	movs	r1, #207	; 0xcf
 80061fa:	f24d 6027 	movw	r0, #54823	; 0xd627
 80061fe:	f7fc fee9 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 8006202:	2102      	movs	r1, #2
 8006204:	f24d 6028 	movw	r0, #54824	; 0xd628
 8006208:	f7fc fee4 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 800620c:	21de      	movs	r1, #222	; 0xde
 800620e:	f24d 6029 	movw	r0, #54825	; 0xd629
 8006212:	f7fc fedf 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 8006216:	2102      	movs	r1, #2
 8006218:	f24d 602a 	movw	r0, #54826	; 0xd62a
 800621c:	f7fc feda 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8006220:	21f2      	movs	r1, #242	; 0xf2
 8006222:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8006226:	f7fc fed5 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 800622a:	2102      	movs	r1, #2
 800622c:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8006230:	f7fc fed0 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 8006234:	21fe      	movs	r1, #254	; 0xfe
 8006236:	f24d 602d 	movw	r0, #54829	; 0xd62d
 800623a:	f7fc fecb 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 800623e:	2103      	movs	r1, #3
 8006240:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8006244:	f7fc fec6 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 8006248:	2110      	movs	r1, #16
 800624a:	f24d 602f 	movw	r0, #54831	; 0xd62f
 800624e:	f7fc fec1 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 8006252:	2103      	movs	r1, #3
 8006254:	f24d 6030 	movw	r0, #54832	; 0xd630
 8006258:	f7fc febc 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 800625c:	2133      	movs	r1, #51	; 0x33
 800625e:	f24d 6031 	movw	r0, #54833	; 0xd631
 8006262:	f7fc feb7 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 8006266:	2103      	movs	r1, #3
 8006268:	f24d 6032 	movw	r0, #54834	; 0xd632
 800626c:	f7fc feb2 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8006270:	216d      	movs	r1, #109	; 0x6d
 8006272:	f24d 6033 	movw	r0, #54835	; 0xd633
 8006276:	f7fc fead 	bl	8002fd4 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 800627a:	2155      	movs	r1, #85	; 0x55
 800627c:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8006280:	f7fc fea8 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8006284:	21aa      	movs	r1, #170	; 0xaa
 8006286:	f24f 0001 	movw	r0, #61441	; 0xf001
 800628a:	f7fc fea3 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 800628e:	2152      	movs	r1, #82	; 0x52
 8006290:	f24f 0002 	movw	r0, #61442	; 0xf002
 8006294:	f7fc fe9e 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8006298:	2108      	movs	r1, #8
 800629a:	f24f 0003 	movw	r0, #61443	; 0xf003
 800629e:	f7fc fe99 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 80062a2:	2100      	movs	r1, #0
 80062a4:	f24f 0004 	movw	r0, #61444	; 0xf004
 80062a8:	f7fc fe94 	bl	8002fd4 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 80062ac:	21cc      	movs	r1, #204	; 0xcc
 80062ae:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80062b2:	f7fc fe8f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 80062b6:	2100      	movs	r1, #0
 80062b8:	f24b 1001 	movw	r0, #45313	; 0xb101
 80062bc:	f7fc fe8a 	bl	8002fd4 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 80062c0:	2105      	movs	r1, #5
 80062c2:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80062c6:	f7fc fe85 	bl	8002fd4 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 80062ca:	2170      	movs	r1, #112	; 0x70
 80062cc:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80062d0:	f7fc fe80 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 80062d4:	2170      	movs	r1, #112	; 0x70
 80062d6:	f24b 7001 	movw	r0, #46849	; 0xb701
 80062da:	f7fc fe7b 	bl	8002fd4 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 80062de:	2101      	movs	r1, #1
 80062e0:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80062e4:	f7fc fe76 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 80062e8:	2103      	movs	r1, #3
 80062ea:	f64b 0001 	movw	r0, #47105	; 0xb801
 80062ee:	f7fc fe71 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 80062f2:	2103      	movs	r1, #3
 80062f4:	f64b 0002 	movw	r0, #47106	; 0xb802
 80062f8:	f7fc fe6c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 80062fc:	2103      	movs	r1, #3
 80062fe:	f64b 0003 	movw	r0, #47107	; 0xb803
 8006302:	f7fc fe67 	bl	8002fd4 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 8006306:	2102      	movs	r1, #2
 8006308:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 800630c:	f7fc fe62 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 8006310:	2100      	movs	r1, #0
 8006312:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8006316:	f7fc fe5d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 800631a:	2100      	movs	r1, #0
 800631c:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8006320:	f7fc fe58 	bl	8002fd4 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 8006324:	21d0      	movs	r1, #208	; 0xd0
 8006326:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 800632a:	f7fc fe53 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 800632e:	2102      	movs	r1, #2
 8006330:	f64c 1001 	movw	r0, #51457	; 0xc901
 8006334:	f7fc fe4e 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 8006338:	2150      	movs	r1, #80	; 0x50
 800633a:	f64c 1002 	movw	r0, #51458	; 0xc902
 800633e:	f7fc fe49 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 8006342:	2150      	movs	r1, #80	; 0x50
 8006344:	f64c 1003 	movw	r0, #51459	; 0xc903
 8006348:	f7fc fe44 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 800634c:	2150      	movs	r1, #80	; 0x50
 800634e:	f64c 1004 	movw	r0, #51460	; 0xc904
 8006352:	f7fc fe3f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 8006356:	2100      	movs	r1, #0
 8006358:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 800635c:	f7fc fe3a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8006360:	2155      	movs	r1, #85	; 0x55
 8006362:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8006366:	f7fc fe35 	bl	8002fd4 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 800636a:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 800636e:	f7fc fda5 	bl	8002ebc <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 8006372:	2001      	movs	r0, #1
 8006374:	f7fa ff90 	bl	8001298 <HAL_Delay>
		LCD_WR_REG(0x2900);
 8006378:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 800637c:	f7fc fd9e 	bl	8002ebc <LCD_WR_REG>
 8006380:	f001 bd18 	b.w	8007db4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 8006384:	4bec      	ldr	r3, [pc, #944]	; (8006738 <LCD_Init+0x27b8>)
 8006386:	889b      	ldrh	r3, [r3, #4]
 8006388:	f249 3225 	movw	r2, #37669	; 0x9325
 800638c:	4293      	cmp	r3, r2
 800638e:	f040 80d7 	bne.w	8006540 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 8006392:	f647 01f0 	movw	r1, #30960	; 0x78f0
 8006396:	20e5      	movs	r0, #229	; 0xe5
 8006398:	f7fc fe1c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 800639c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063a0:	2001      	movs	r0, #1
 80063a2:	f7fc fe17 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 80063a6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80063aa:	2002      	movs	r0, #2
 80063ac:	f7fc fe12 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 80063b0:	f241 0130 	movw	r1, #4144	; 0x1030
 80063b4:	2003      	movs	r0, #3
 80063b6:	f7fc fe0d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80063ba:	2100      	movs	r1, #0
 80063bc:	2004      	movs	r0, #4
 80063be:	f7fc fe09 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80063c2:	f240 2102 	movw	r1, #514	; 0x202
 80063c6:	2008      	movs	r0, #8
 80063c8:	f7fc fe04 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 80063cc:	2100      	movs	r1, #0
 80063ce:	2009      	movs	r0, #9
 80063d0:	f7fc fe00 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 80063d4:	2100      	movs	r1, #0
 80063d6:	200a      	movs	r0, #10
 80063d8:	f7fc fdfc 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80063dc:	2100      	movs	r1, #0
 80063de:	200c      	movs	r0, #12
 80063e0:	f7fc fdf8 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 80063e4:	2100      	movs	r1, #0
 80063e6:	200d      	movs	r0, #13
 80063e8:	f7fc fdf4 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80063ec:	2100      	movs	r1, #0
 80063ee:	200f      	movs	r0, #15
 80063f0:	f7fc fdf0 	bl	8002fd4 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 80063f4:	2100      	movs	r1, #0
 80063f6:	2010      	movs	r0, #16
 80063f8:	f7fc fdec 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80063fc:	2107      	movs	r1, #7
 80063fe:	2011      	movs	r0, #17
 8006400:	f7fc fde8 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8006404:	2100      	movs	r1, #0
 8006406:	2012      	movs	r0, #18
 8006408:	f7fc fde4 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 800640c:	2100      	movs	r1, #0
 800640e:	2013      	movs	r0, #19
 8006410:	f7fc fde0 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 8006414:	2100      	movs	r1, #0
 8006416:	2007      	movs	r0, #7
 8006418:	f7fc fddc 	bl	8002fd4 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 800641c:	f241 6190 	movw	r1, #5776	; 0x1690
 8006420:	2010      	movs	r0, #16
 8006422:	f7fc fdd7 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8006426:	f240 2127 	movw	r1, #551	; 0x227
 800642a:	2011      	movs	r0, #17
 800642c:	f7fc fdd2 	bl	8002fd4 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 8006430:	219d      	movs	r1, #157	; 0x9d
 8006432:	2012      	movs	r0, #18
 8006434:	f7fc fdce 	bl	8002fd4 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 8006438:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 800643c:	2013      	movs	r0, #19
 800643e:	f7fc fdc9 	bl	8002fd4 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 8006442:	2125      	movs	r1, #37	; 0x25
 8006444:	2029      	movs	r0, #41	; 0x29
 8006446:	f7fc fdc5 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 800644a:	210d      	movs	r1, #13
 800644c:	202b      	movs	r0, #43	; 0x2b
 800644e:	f7fc fdc1 	bl	8002fd4 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 8006452:	2107      	movs	r1, #7
 8006454:	2030      	movs	r0, #48	; 0x30
 8006456:	f7fc fdbd 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 800645a:	f240 3103 	movw	r1, #771	; 0x303
 800645e:	2031      	movs	r0, #49	; 0x31
 8006460:	f7fc fdb8 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 8006464:	2103      	movs	r1, #3
 8006466:	2032      	movs	r0, #50	; 0x32
 8006468:	f7fc fdb4 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 800646c:	f240 2106 	movw	r1, #518	; 0x206
 8006470:	2035      	movs	r0, #53	; 0x35
 8006472:	f7fc fdaf 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 8006476:	2108      	movs	r1, #8
 8006478:	2036      	movs	r0, #54	; 0x36
 800647a:	f7fc fdab 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 800647e:	f240 4106 	movw	r1, #1030	; 0x406
 8006482:	2037      	movs	r0, #55	; 0x37
 8006484:	f7fc fda6 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8006488:	f44f 7141 	mov.w	r1, #772	; 0x304
 800648c:	2038      	movs	r0, #56	; 0x38
 800648e:	f7fc fda1 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 8006492:	2107      	movs	r1, #7
 8006494:	2039      	movs	r0, #57	; 0x39
 8006496:	f7fc fd9d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 800649a:	f240 6102 	movw	r1, #1538	; 0x602
 800649e:	203c      	movs	r0, #60	; 0x3c
 80064a0:	f7fc fd98 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 80064a4:	2108      	movs	r1, #8
 80064a6:	203d      	movs	r0, #61	; 0x3d
 80064a8:	f7fc fd94 	bl	8002fd4 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 80064ac:	2100      	movs	r1, #0
 80064ae:	2050      	movs	r0, #80	; 0x50
 80064b0:	f7fc fd90 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 80064b4:	21ef      	movs	r1, #239	; 0xef
 80064b6:	2051      	movs	r0, #81	; 0x51
 80064b8:	f7fc fd8c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80064bc:	2100      	movs	r1, #0
 80064be:	2052      	movs	r0, #82	; 0x52
 80064c0:	f7fc fd88 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80064c4:	f240 113f 	movw	r1, #319	; 0x13f
 80064c8:	2053      	movs	r0, #83	; 0x53
 80064ca:	f7fc fd83 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 80064ce:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80064d2:	2060      	movs	r0, #96	; 0x60
 80064d4:	f7fc fd7e 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80064d8:	2101      	movs	r1, #1
 80064da:	2061      	movs	r0, #97	; 0x61
 80064dc:	f7fc fd7a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80064e0:	2100      	movs	r1, #0
 80064e2:	206a      	movs	r0, #106	; 0x6a
 80064e4:	f7fc fd76 	bl	8002fd4 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 80064e8:	2100      	movs	r1, #0
 80064ea:	2080      	movs	r0, #128	; 0x80
 80064ec:	f7fc fd72 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80064f0:	2100      	movs	r1, #0
 80064f2:	2081      	movs	r0, #129	; 0x81
 80064f4:	f7fc fd6e 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80064f8:	2100      	movs	r1, #0
 80064fa:	2082      	movs	r0, #130	; 0x82
 80064fc:	f7fc fd6a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8006500:	2100      	movs	r1, #0
 8006502:	2083      	movs	r0, #131	; 0x83
 8006504:	f7fc fd66 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8006508:	2100      	movs	r1, #0
 800650a:	2084      	movs	r0, #132	; 0x84
 800650c:	f7fc fd62 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8006510:	2100      	movs	r1, #0
 8006512:	2085      	movs	r0, #133	; 0x85
 8006514:	f7fc fd5e 	bl	8002fd4 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8006518:	2110      	movs	r1, #16
 800651a:	2090      	movs	r0, #144	; 0x90
 800651c:	f7fc fd5a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8006520:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006524:	2092      	movs	r0, #146	; 0x92
 8006526:	f7fc fd55 	bl	8002fd4 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 800652a:	f240 1133 	movw	r1, #307	; 0x133
 800652e:	2007      	movs	r0, #7
 8006530:	f7fc fd50 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 8006534:	2122      	movs	r1, #34	; 0x22
 8006536:	2000      	movs	r0, #0
 8006538:	f7fc fd4c 	bl	8002fd4 <LCD_WriteReg>
 800653c:	f001 bc3a 	b.w	8007db4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 8006540:	4b7d      	ldr	r3, [pc, #500]	; (8006738 <LCD_Init+0x27b8>)
 8006542:	889b      	ldrh	r3, [r3, #4]
 8006544:	f249 3228 	movw	r2, #37672	; 0x9328
 8006548:	4293      	cmp	r3, r2
 800654a:	f040 80f7 	bne.w	800673c <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 800654e:	f241 018f 	movw	r1, #4239	; 0x108f
 8006552:	20ec      	movs	r0, #236	; 0xec
 8006554:	f7fc fd3e 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 8006558:	f241 2134 	movw	r1, #4660	; 0x1234
 800655c:	20ef      	movs	r0, #239	; 0xef
 800655e:	f7fc fd39 	bl	8002fd4 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 8006562:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006566:	2001      	movs	r0, #1
 8006568:	f7fc fd34 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 800656c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006570:	2002      	movs	r0, #2
 8006572:	f7fc fd2f 	bl	8002fd4 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 8006576:	f241 0130 	movw	r1, #4144	; 0x1030
 800657a:	2003      	movs	r0, #3
 800657c:	f7fc fd2a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8006580:	2100      	movs	r1, #0
 8006582:	2004      	movs	r0, #4
 8006584:	f7fc fd26 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8006588:	f240 2102 	movw	r1, #514	; 0x202
 800658c:	2008      	movs	r0, #8
 800658e:	f7fc fd21 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8006592:	2100      	movs	r1, #0
 8006594:	2009      	movs	r0, #9
 8006596:	f7fc fd1d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 800659a:	2100      	movs	r1, #0
 800659c:	200a      	movs	r0, #10
 800659e:	f7fc fd19 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 80065a2:	2101      	movs	r1, #1
 80065a4:	200c      	movs	r0, #12
 80065a6:	f7fc fd15 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 80065aa:	2100      	movs	r1, #0
 80065ac:	200d      	movs	r0, #13
 80065ae:	f7fc fd11 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 80065b2:	2100      	movs	r1, #0
 80065b4:	200f      	movs	r0, #15
 80065b6:	f7fc fd0d 	bl	8002fd4 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 80065ba:	2100      	movs	r1, #0
 80065bc:	2010      	movs	r0, #16
 80065be:	f7fc fd09 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 80065c2:	2107      	movs	r1, #7
 80065c4:	2011      	movs	r0, #17
 80065c6:	f7fc fd05 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80065ca:	2100      	movs	r1, #0
 80065cc:	2012      	movs	r0, #18
 80065ce:	f7fc fd01 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80065d2:	2100      	movs	r1, #0
 80065d4:	2013      	movs	r0, #19
 80065d6:	f7fc fcfd 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 80065da:	2101      	movs	r1, #1
 80065dc:	2007      	movs	r0, #7
 80065de:	f7fc fcf9 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(50);
 80065e2:	2032      	movs	r0, #50	; 0x32
 80065e4:	f7fa fe58 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 80065e8:	f241 4190 	movw	r1, #5264	; 0x1490
 80065ec:	2010      	movs	r0, #16
 80065ee:	f7fc fcf1 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 80065f2:	f240 2127 	movw	r1, #551	; 0x227
 80065f6:	2011      	movs	r0, #17
 80065f8:	f7fc fcec 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(50);
 80065fc:	2032      	movs	r0, #50	; 0x32
 80065fe:	f7fa fe4b 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 8006602:	218a      	movs	r1, #138	; 0x8a
 8006604:	2012      	movs	r0, #18
 8006606:	f7fc fce5 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(50);
 800660a:	2032      	movs	r0, #50	; 0x32
 800660c:	f7fa fe44 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 8006610:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8006614:	2013      	movs	r0, #19
 8006616:	f7fc fcdd 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 800661a:	2106      	movs	r1, #6
 800661c:	2029      	movs	r0, #41	; 0x29
 800661e:	f7fc fcd9 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 8006622:	210d      	movs	r1, #13
 8006624:	202b      	movs	r0, #43	; 0x2b
 8006626:	f7fc fcd5 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(50);
 800662a:	2032      	movs	r0, #50	; 0x32
 800662c:	f7fa fe34 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 8006630:	2100      	movs	r1, #0
 8006632:	2020      	movs	r0, #32
 8006634:	f7fc fcce 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8006638:	2100      	movs	r1, #0
 800663a:	2021      	movs	r0, #33	; 0x21
 800663c:	f7fc fcca 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(50);
 8006640:	2032      	movs	r0, #50	; 0x32
 8006642:	f7fa fe29 	bl	8001298 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 8006646:	2100      	movs	r1, #0
 8006648:	2030      	movs	r0, #48	; 0x30
 800664a:	f7fc fcc3 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 800664e:	f240 6104 	movw	r1, #1540	; 0x604
 8006652:	2031      	movs	r0, #49	; 0x31
 8006654:	f7fc fcbe 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 8006658:	f240 3105 	movw	r1, #773	; 0x305
 800665c:	2032      	movs	r0, #50	; 0x32
 800665e:	f7fc fcb9 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 8006662:	2100      	movs	r1, #0
 8006664:	2035      	movs	r0, #53	; 0x35
 8006666:	f7fc fcb5 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 800666a:	f640 4109 	movw	r1, #3081	; 0xc09
 800666e:	2036      	movs	r0, #54	; 0x36
 8006670:	f7fc fcb0 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 8006674:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006678:	2037      	movs	r0, #55	; 0x37
 800667a:	f7fc fcab 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 800667e:	f240 3101 	movw	r1, #769	; 0x301
 8006682:	2038      	movs	r0, #56	; 0x38
 8006684:	f7fc fca6 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8006688:	f240 7107 	movw	r1, #1799	; 0x707
 800668c:	2039      	movs	r0, #57	; 0x39
 800668e:	f7fc fca1 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 8006692:	2100      	movs	r1, #0
 8006694:	203c      	movs	r0, #60	; 0x3c
 8006696:	f7fc fc9d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 800669a:	f640 210a 	movw	r1, #2570	; 0xa0a
 800669e:	203d      	movs	r0, #61	; 0x3d
 80066a0:	f7fc fc98 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(50);
 80066a4:	2032      	movs	r0, #50	; 0x32
 80066a6:	f7fa fdf7 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 80066aa:	2100      	movs	r1, #0
 80066ac:	2050      	movs	r0, #80	; 0x50
 80066ae:	f7fc fc91 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 80066b2:	21ef      	movs	r1, #239	; 0xef
 80066b4:	2051      	movs	r0, #81	; 0x51
 80066b6:	f7fc fc8d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 80066ba:	2100      	movs	r1, #0
 80066bc:	2052      	movs	r0, #82	; 0x52
 80066be:	f7fc fc89 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 80066c2:	f240 113f 	movw	r1, #319	; 0x13f
 80066c6:	2053      	movs	r0, #83	; 0x53
 80066c8:	f7fc fc84 	bl	8002fd4 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 80066cc:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80066d0:	2060      	movs	r0, #96	; 0x60
 80066d2:	f7fc fc7f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 80066d6:	2101      	movs	r1, #1
 80066d8:	2061      	movs	r0, #97	; 0x61
 80066da:	f7fc fc7b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 80066de:	2100      	movs	r1, #0
 80066e0:	206a      	movs	r0, #106	; 0x6a
 80066e2:	f7fc fc77 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 80066e6:	2100      	movs	r1, #0
 80066e8:	2080      	movs	r0, #128	; 0x80
 80066ea:	f7fc fc73 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 80066ee:	2100      	movs	r1, #0
 80066f0:	2081      	movs	r0, #129	; 0x81
 80066f2:	f7fc fc6f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 80066f6:	2100      	movs	r1, #0
 80066f8:	2082      	movs	r0, #130	; 0x82
 80066fa:	f7fc fc6b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80066fe:	2100      	movs	r1, #0
 8006700:	2083      	movs	r0, #131	; 0x83
 8006702:	f7fc fc67 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8006706:	2100      	movs	r1, #0
 8006708:	2084      	movs	r0, #132	; 0x84
 800670a:	f7fc fc63 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 800670e:	2100      	movs	r1, #0
 8006710:	2085      	movs	r0, #133	; 0x85
 8006712:	f7fc fc5f 	bl	8002fd4 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 8006716:	2110      	movs	r1, #16
 8006718:	2090      	movs	r0, #144	; 0x90
 800671a:	f7fc fc5b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 800671e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006722:	2092      	movs	r0, #146	; 0x92
 8006724:	f7fc fc56 	bl	8002fd4 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8006728:	f240 1133 	movw	r1, #307	; 0x133
 800672c:	2007      	movs	r0, #7
 800672e:	f7fc fc51 	bl	8002fd4 <LCD_WriteReg>
 8006732:	f001 bb3f 	b.w	8007db4 <LCD_Init+0x3e34>
 8006736:	bf00      	nop
 8006738:	20000290 	.word	0x20000290
	} else if (lcddev.id == 0x9320) //测试OK.
 800673c:	4bce      	ldr	r3, [pc, #824]	; (8006a78 <LCD_Init+0x2af8>)
 800673e:	889b      	ldrh	r3, [r3, #4]
 8006740:	f249 3220 	movw	r2, #37664	; 0x9320
 8006744:	4293      	cmp	r3, r2
 8006746:	f040 80ad 	bne.w	80068a4 <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 800674a:	2100      	movs	r1, #0
 800674c:	2000      	movs	r0, #0
 800674e:	f7fc fc41 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 8006752:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006756:	2001      	movs	r0, #1
 8006758:	f7fc fc3c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 800675c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006760:	2002      	movs	r0, #2
 8006762:	f7fc fc37 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 8006766:	f241 0130 	movw	r1, #4144	; 0x1030
 800676a:	2003      	movs	r0, #3
 800676c:	f7fc fc32 	bl	8002fd4 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8006770:	2100      	movs	r1, #0
 8006772:	2004      	movs	r0, #4
 8006774:	f7fc fc2e 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 8006778:	f240 2102 	movw	r1, #514	; 0x202
 800677c:	2008      	movs	r0, #8
 800677e:	f7fc fc29 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 8006782:	2100      	movs	r1, #0
 8006784:	2009      	movs	r0, #9
 8006786:	f7fc fc25 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 800678a:	2100      	movs	r1, #0
 800678c:	200a      	movs	r0, #10
 800678e:	f7fc fc21 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 8006792:	2101      	movs	r1, #1
 8006794:	200c      	movs	r0, #12
 8006796:	f7fc fc1d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 800679a:	2100      	movs	r1, #0
 800679c:	200d      	movs	r0, #13
 800679e:	f7fc fc19 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 80067a2:	2100      	movs	r1, #0
 80067a4:	200f      	movs	r0, #15
 80067a6:	f7fc fc15 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(50);
 80067aa:	2032      	movs	r0, #50	; 0x32
 80067ac:	f7fa fd74 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 80067b0:	f240 1101 	movw	r1, #257	; 0x101
 80067b4:	2007      	movs	r0, #7
 80067b6:	f7fc fc0d 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(50);
 80067ba:	2032      	movs	r0, #50	; 0x32
 80067bc:	f7fa fd6c 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 80067c0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80067c4:	2010      	movs	r0, #16
 80067c6:	f7fc fc05 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 80067ca:	2107      	movs	r1, #7
 80067cc:	2011      	movs	r0, #17
 80067ce:	f7fc fc01 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 80067d2:	f44f 7188 	mov.w	r1, #272	; 0x110
 80067d6:	2012      	movs	r0, #18
 80067d8:	f7fc fbfc 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 80067dc:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 80067e0:	2013      	movs	r0, #19
 80067e2:	f7fc fbf7 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 80067e6:	2100      	movs	r1, #0
 80067e8:	2029      	movs	r0, #41	; 0x29
 80067ea:	f7fc fbf3 	bl	8002fd4 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 80067ee:	f244 0110 	movw	r1, #16400	; 0x4010
 80067f2:	202b      	movs	r0, #43	; 0x2b
 80067f4:	f7fc fbee 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 80067f8:	2100      	movs	r1, #0
 80067fa:	2050      	movs	r0, #80	; 0x50
 80067fc:	f7fc fbea 	bl	8002fd4 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 8006800:	21ef      	movs	r1, #239	; 0xef
 8006802:	2051      	movs	r0, #81	; 0x51
 8006804:	f7fc fbe6 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8006808:	2100      	movs	r1, #0
 800680a:	2052      	movs	r0, #82	; 0x52
 800680c:	f7fc fbe2 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 8006810:	f240 113f 	movw	r1, #319	; 0x13f
 8006814:	2053      	movs	r0, #83	; 0x53
 8006816:	f7fc fbdd 	bl	8002fd4 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 800681a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800681e:	2060      	movs	r0, #96	; 0x60
 8006820:	f7fc fbd8 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 8006824:	2101      	movs	r1, #1
 8006826:	2061      	movs	r0, #97	; 0x61
 8006828:	f7fc fbd4 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 800682c:	2100      	movs	r1, #0
 800682e:	206a      	movs	r0, #106	; 0x6a
 8006830:	f7fc fbd0 	bl	8002fd4 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 8006834:	2100      	movs	r1, #0
 8006836:	2080      	movs	r0, #128	; 0x80
 8006838:	f7fc fbcc 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 800683c:	2100      	movs	r1, #0
 800683e:	2081      	movs	r0, #129	; 0x81
 8006840:	f7fc fbc8 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 8006844:	2100      	movs	r1, #0
 8006846:	2082      	movs	r0, #130	; 0x82
 8006848:	f7fc fbc4 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 800684c:	2100      	movs	r1, #0
 800684e:	2083      	movs	r0, #131	; 0x83
 8006850:	f7fc fbc0 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 8006854:	2100      	movs	r1, #0
 8006856:	2084      	movs	r0, #132	; 0x84
 8006858:	f7fc fbbc 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 800685c:	2100      	movs	r1, #0
 800685e:	2085      	movs	r0, #133	; 0x85
 8006860:	f7fc fbb8 	bl	8002fd4 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 8006864:	2110      	movs	r1, #16
 8006866:	2090      	movs	r0, #144	; 0x90
 8006868:	f7fc fbb4 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 800686c:	2100      	movs	r1, #0
 800686e:	2092      	movs	r0, #146	; 0x92
 8006870:	f7fc fbb0 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 8006874:	2101      	movs	r1, #1
 8006876:	2093      	movs	r0, #147	; 0x93
 8006878:	f7fc fbac 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 800687c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8006880:	2095      	movs	r0, #149	; 0x95
 8006882:	f7fc fba7 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 8006886:	2100      	movs	r1, #0
 8006888:	2097      	movs	r0, #151	; 0x97
 800688a:	f7fc fba3 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 800688e:	2100      	movs	r1, #0
 8006890:	2098      	movs	r0, #152	; 0x98
 8006892:	f7fc fb9f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 8006896:	f240 1173 	movw	r1, #371	; 0x173
 800689a:	2007      	movs	r0, #7
 800689c:	f7fc fb9a 	bl	8002fd4 <LCD_WriteReg>
 80068a0:	f001 ba88 	b.w	8007db4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 80068a4:	4b74      	ldr	r3, [pc, #464]	; (8006a78 <LCD_Init+0x2af8>)
 80068a6:	889b      	ldrh	r3, [r3, #4]
 80068a8:	f249 3231 	movw	r2, #37681	; 0x9331
 80068ac:	4293      	cmp	r3, r2
 80068ae:	f040 80e5 	bne.w	8006a7c <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 80068b2:	f241 0114 	movw	r1, #4116	; 0x1014
 80068b6:	20e7      	movs	r0, #231	; 0xe7
 80068b8:	f7fc fb8c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 80068bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068c0:	2001      	movs	r0, #1
 80068c2:	f7fc fb87 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 80068c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068ca:	2002      	movs	r0, #2
 80068cc:	f7fc fb82 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 80068d0:	f241 0138 	movw	r1, #4152	; 0x1038
 80068d4:	2003      	movs	r0, #3
 80068d6:	f7fc fb7d 	bl	8002fd4 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 80068da:	f240 2102 	movw	r1, #514	; 0x202
 80068de:	2008      	movs	r0, #8
 80068e0:	f7fc fb78 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 80068e4:	2100      	movs	r1, #0
 80068e6:	2009      	movs	r0, #9
 80068e8:	f7fc fb74 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 80068ec:	2100      	movs	r1, #0
 80068ee:	200a      	movs	r0, #10
 80068f0:	f7fc fb70 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 80068f4:	2100      	movs	r1, #0
 80068f6:	200c      	movs	r0, #12
 80068f8:	f7fc fb6c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 80068fc:	2100      	movs	r1, #0
 80068fe:	200d      	movs	r0, #13
 8006900:	f7fc fb68 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8006904:	2100      	movs	r1, #0
 8006906:	200f      	movs	r0, #15
 8006908:	f7fc fb64 	bl	8002fd4 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 800690c:	2100      	movs	r1, #0
 800690e:	2010      	movs	r0, #16
 8006910:	f7fc fb60 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8006914:	2107      	movs	r1, #7
 8006916:	2011      	movs	r0, #17
 8006918:	f7fc fb5c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 800691c:	2100      	movs	r1, #0
 800691e:	2012      	movs	r0, #18
 8006920:	f7fc fb58 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8006924:	2100      	movs	r1, #0
 8006926:	2013      	movs	r0, #19
 8006928:	f7fc fb54 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 800692c:	20c8      	movs	r0, #200	; 0xc8
 800692e:	f7fa fcb3 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8006932:	f241 6190 	movw	r1, #5776	; 0x1690
 8006936:	2010      	movs	r0, #16
 8006938:	f7fc fb4c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 800693c:	f240 2127 	movw	r1, #551	; 0x227
 8006940:	2011      	movs	r0, #17
 8006942:	f7fc fb47 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8006946:	2032      	movs	r0, #50	; 0x32
 8006948:	f7fa fca6 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 800694c:	210c      	movs	r1, #12
 800694e:	2012      	movs	r0, #18
 8006950:	f7fc fb40 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8006954:	2032      	movs	r0, #50	; 0x32
 8006956:	f7fa fc9f 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 800695a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800695e:	2013      	movs	r0, #19
 8006960:	f7fc fb38 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8006964:	2111      	movs	r1, #17
 8006966:	2029      	movs	r0, #41	; 0x29
 8006968:	f7fc fb34 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 800696c:	210b      	movs	r1, #11
 800696e:	202b      	movs	r0, #43	; 0x2b
 8006970:	f7fc fb30 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8006974:	2032      	movs	r0, #50	; 0x32
 8006976:	f7fa fc8f 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 800697a:	2100      	movs	r1, #0
 800697c:	2020      	movs	r0, #32
 800697e:	f7fc fb29 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8006982:	f240 113f 	movw	r1, #319	; 0x13f
 8006986:	2021      	movs	r0, #33	; 0x21
 8006988:	f7fc fb24 	bl	8002fd4 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 800698c:	2100      	movs	r1, #0
 800698e:	2030      	movs	r0, #48	; 0x30
 8006990:	f7fc fb20 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8006994:	f44f 7183 	mov.w	r1, #262	; 0x106
 8006998:	2031      	movs	r0, #49	; 0x31
 800699a:	f7fc fb1b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 800699e:	2100      	movs	r1, #0
 80069a0:	2032      	movs	r0, #50	; 0x32
 80069a2:	f7fc fb17 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80069a6:	f44f 7101 	mov.w	r1, #516	; 0x204
 80069aa:	2035      	movs	r0, #53	; 0x35
 80069ac:	f7fc fb12 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 80069b0:	f241 610a 	movw	r1, #5642	; 0x160a
 80069b4:	2036      	movs	r0, #54	; 0x36
 80069b6:	f7fc fb0d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 80069ba:	f240 7107 	movw	r1, #1799	; 0x707
 80069be:	2037      	movs	r0, #55	; 0x37
 80069c0:	f7fc fb08 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 80069c4:	f44f 7183 	mov.w	r1, #262	; 0x106
 80069c8:	2038      	movs	r0, #56	; 0x38
 80069ca:	f7fc fb03 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 80069ce:	f240 7107 	movw	r1, #1799	; 0x707
 80069d2:	2039      	movs	r0, #57	; 0x39
 80069d4:	f7fc fafe 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 80069d8:	f240 4102 	movw	r1, #1026	; 0x402
 80069dc:	203c      	movs	r0, #60	; 0x3c
 80069de:	f7fc faf9 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 80069e2:	f640 410f 	movw	r1, #3087	; 0xc0f
 80069e6:	203d      	movs	r0, #61	; 0x3d
 80069e8:	f7fc faf4 	bl	8002fd4 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 80069ec:	2100      	movs	r1, #0
 80069ee:	2050      	movs	r0, #80	; 0x50
 80069f0:	f7fc faf0 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 80069f4:	21ef      	movs	r1, #239	; 0xef
 80069f6:	2051      	movs	r0, #81	; 0x51
 80069f8:	f7fc faec 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 80069fc:	2100      	movs	r1, #0
 80069fe:	2052      	movs	r0, #82	; 0x52
 8006a00:	f7fc fae8 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8006a04:	f240 113f 	movw	r1, #319	; 0x13f
 8006a08:	2053      	movs	r0, #83	; 0x53
 8006a0a:	f7fc fae3 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8006a0e:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006a12:	2060      	movs	r0, #96	; 0x60
 8006a14:	f7fc fade 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8006a18:	2101      	movs	r1, #1
 8006a1a:	2061      	movs	r0, #97	; 0x61
 8006a1c:	f7fc fada 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8006a20:	2100      	movs	r1, #0
 8006a22:	206a      	movs	r0, #106	; 0x6a
 8006a24:	f7fc fad6 	bl	8002fd4 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8006a28:	2100      	movs	r1, #0
 8006a2a:	2080      	movs	r0, #128	; 0x80
 8006a2c:	f7fc fad2 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8006a30:	2100      	movs	r1, #0
 8006a32:	2081      	movs	r0, #129	; 0x81
 8006a34:	f7fc face 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8006a38:	2100      	movs	r1, #0
 8006a3a:	2082      	movs	r0, #130	; 0x82
 8006a3c:	f7fc faca 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8006a40:	2100      	movs	r1, #0
 8006a42:	2083      	movs	r0, #131	; 0x83
 8006a44:	f7fc fac6 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8006a48:	2100      	movs	r1, #0
 8006a4a:	2084      	movs	r0, #132	; 0x84
 8006a4c:	f7fc fac2 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8006a50:	2100      	movs	r1, #0
 8006a52:	2085      	movs	r0, #133	; 0x85
 8006a54:	f7fc fabe 	bl	8002fd4 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8006a58:	2110      	movs	r1, #16
 8006a5a:	2090      	movs	r0, #144	; 0x90
 8006a5c:	f7fc faba 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8006a60:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006a64:	2092      	movs	r0, #146	; 0x92
 8006a66:	f7fc fab5 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8006a6a:	f240 1133 	movw	r1, #307	; 0x133
 8006a6e:	2007      	movs	r0, #7
 8006a70:	f7fc fab0 	bl	8002fd4 <LCD_WriteReg>
 8006a74:	f001 b99e 	b.w	8007db4 <LCD_Init+0x3e34>
 8006a78:	20000290 	.word	0x20000290
	} else if (lcddev.id == 0x5408) {
 8006a7c:	4be2      	ldr	r3, [pc, #904]	; (8006e08 <LCD_Init+0x2e88>)
 8006a7e:	889b      	ldrh	r3, [r3, #4]
 8006a80:	f245 4208 	movw	r2, #21512	; 0x5408
 8006a84:	4293      	cmp	r3, r2
 8006a86:	f040 80a3 	bne.w	8006bd0 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 8006a8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a8e:	2001      	movs	r0, #1
 8006a90:	f7fc faa0 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 8006a94:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006a98:	2002      	movs	r0, #2
 8006a9a:	f7fc fa9b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 8006a9e:	f241 0130 	movw	r1, #4144	; 0x1030
 8006aa2:	2003      	movs	r0, #3
 8006aa4:	f7fc fa96 	bl	8002fd4 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	2004      	movs	r0, #4
 8006aac:	f7fc fa92 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8006ab0:	f240 2107 	movw	r1, #519	; 0x207
 8006ab4:	2008      	movs	r0, #8
 8006ab6:	f7fc fa8d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8006aba:	2100      	movs	r1, #0
 8006abc:	2009      	movs	r0, #9
 8006abe:	f7fc fa89 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 8006ac2:	2100      	movs	r1, #0
 8006ac4:	200a      	movs	r0, #10
 8006ac6:	f7fc fa85 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8006aca:	2100      	movs	r1, #0
 8006acc:	200c      	movs	r0, #12
 8006ace:	f7fc fa81 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	200d      	movs	r0, #13
 8006ad6:	f7fc fa7d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8006ada:	2100      	movs	r1, #0
 8006adc:	200f      	movs	r0, #15
 8006ade:	f7fc fa79 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(20);
 8006ae2:	2014      	movs	r0, #20
 8006ae4:	f7fa fbd8 	bl	8001298 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8006ae8:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8006aec:	2010      	movs	r0, #16
 8006aee:	f7fc fa71 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 8006af2:	2101      	movs	r1, #1
 8006af4:	2011      	movs	r0, #17
 8006af6:	f7fc fa6d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8006afa:	2101      	movs	r1, #1
 8006afc:	2017      	movs	r0, #23
 8006afe:	f7fc fa69 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 8006b02:	f44f 719c 	mov.w	r1, #312	; 0x138
 8006b06:	2012      	movs	r0, #18
 8006b08:	f7fc fa64 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8006b0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b10:	2013      	movs	r0, #19
 8006b12:	f7fc fa5f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 8006b16:	2109      	movs	r1, #9
 8006b18:	2029      	movs	r0, #41	; 0x29
 8006b1a:	f7fc fa5b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8006b1e:	2109      	movs	r1, #9
 8006b20:	202a      	movs	r0, #42	; 0x2a
 8006b22:	f7fc fa57 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 8006b26:	2100      	movs	r1, #0
 8006b28:	20a4      	movs	r0, #164	; 0xa4
 8006b2a:	f7fc fa53 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8006b2e:	2100      	movs	r1, #0
 8006b30:	2050      	movs	r0, #80	; 0x50
 8006b32:	f7fc fa4f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 8006b36:	21ef      	movs	r1, #239	; 0xef
 8006b38:	2051      	movs	r0, #81	; 0x51
 8006b3a:	f7fc fa4b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8006b3e:	2100      	movs	r1, #0
 8006b40:	2052      	movs	r0, #82	; 0x52
 8006b42:	f7fc fa47 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8006b46:	f240 113f 	movw	r1, #319	; 0x13f
 8006b4a:	2053      	movs	r0, #83	; 0x53
 8006b4c:	f7fc fa42 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8006b50:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006b54:	2060      	movs	r0, #96	; 0x60
 8006b56:	f7fc fa3d 	bl	8002fd4 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8006b5a:	2101      	movs	r1, #1
 8006b5c:	2061      	movs	r0, #97	; 0x61
 8006b5e:	f7fc fa39 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8006b62:	2100      	movs	r1, #0
 8006b64:	206a      	movs	r0, #106	; 0x6a
 8006b66:	f7fc fa35 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	2080      	movs	r0, #128	; 0x80
 8006b6e:	f7fc fa31 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8006b72:	2100      	movs	r1, #0
 8006b74:	2081      	movs	r0, #129	; 0x81
 8006b76:	f7fc fa2d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	2082      	movs	r0, #130	; 0x82
 8006b7e:	f7fc fa29 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8006b82:	2100      	movs	r1, #0
 8006b84:	2083      	movs	r0, #131	; 0x83
 8006b86:	f7fc fa25 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	2084      	movs	r0, #132	; 0x84
 8006b8e:	f7fc fa21 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8006b92:	2100      	movs	r1, #0
 8006b94:	2085      	movs	r0, #133	; 0x85
 8006b96:	f7fc fa1d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8006b9a:	2113      	movs	r1, #19
 8006b9c:	2090      	movs	r0, #144	; 0x90
 8006b9e:	f7fc fa19 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8006ba2:	2100      	movs	r1, #0
 8006ba4:	2092      	movs	r0, #146	; 0x92
 8006ba6:	f7fc fa15 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8006baa:	2103      	movs	r1, #3
 8006bac:	2093      	movs	r0, #147	; 0x93
 8006bae:	f7fc fa11 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8006bb2:	f44f 7188 	mov.w	r1, #272	; 0x110
 8006bb6:	2095      	movs	r0, #149	; 0x95
 8006bb8:	f7fc fa0c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8006bbc:	f240 1173 	movw	r1, #371	; 0x173
 8006bc0:	2007      	movs	r0, #7
 8006bc2:	f7fc fa07 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(50);
 8006bc6:	2032      	movs	r0, #50	; 0x32
 8006bc8:	f7fa fb66 	bl	8001298 <HAL_Delay>
 8006bcc:	f001 b8f2 	b.w	8007db4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8006bd0:	4b8d      	ldr	r3, [pc, #564]	; (8006e08 <LCD_Init+0x2e88>)
 8006bd2:	889b      	ldrh	r3, [r3, #4]
 8006bd4:	f241 5205 	movw	r2, #5381	; 0x1505
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	f040 8117 	bne.w	8006e0c <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8006bde:	2100      	movs	r1, #0
 8006be0:	2007      	movs	r0, #7
 8006be2:	f7fc f9f7 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(50);
 8006be6:	2032      	movs	r0, #50	; 0x32
 8006be8:	f7fa fb56 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8006bec:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8006bf0:	2012      	movs	r0, #18
 8006bf2:	f7fc f9ef 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	20a4      	movs	r0, #164	; 0xa4
 8006bfa:	f7fc f9eb 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8006bfe:	210f      	movs	r1, #15
 8006c00:	2008      	movs	r0, #8
 8006c02:	f7fc f9e7 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8006c06:	2108      	movs	r1, #8
 8006c08:	200a      	movs	r0, #10
 8006c0a:	f7fc f9e3 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8006c0e:	2108      	movs	r1, #8
 8006c10:	200d      	movs	r0, #13
 8006c12:	f7fc f9df 	bl	8002fd4 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8006c16:	f240 7107 	movw	r1, #1799	; 0x707
 8006c1a:	2030      	movs	r0, #48	; 0x30
 8006c1c:	f7fc f9da 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8006c20:	2107      	movs	r1, #7
 8006c22:	2031      	movs	r0, #49	; 0x31
 8006c24:	f7fc f9d6 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8006c28:	f240 6103 	movw	r1, #1539	; 0x603
 8006c2c:	2032      	movs	r0, #50	; 0x32
 8006c2e:	f7fc f9d1 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8006c32:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006c36:	2033      	movs	r0, #51	; 0x33
 8006c38:	f7fc f9cc 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8006c3c:	f240 2102 	movw	r1, #514	; 0x202
 8006c40:	2034      	movs	r0, #52	; 0x34
 8006c42:	f7fc f9c7 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8006c46:	2102      	movs	r1, #2
 8006c48:	2035      	movs	r0, #53	; 0x35
 8006c4a:	f7fc f9c3 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8006c4e:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8006c52:	2036      	movs	r0, #54	; 0x36
 8006c54:	f7fc f9be 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8006c58:	f240 7107 	movw	r1, #1799	; 0x707
 8006c5c:	2037      	movs	r0, #55	; 0x37
 8006c5e:	f7fc f9b9 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8006c62:	2100      	movs	r1, #0
 8006c64:	2038      	movs	r0, #56	; 0x38
 8006c66:	f7fc f9b5 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	2039      	movs	r0, #57	; 0x39
 8006c6e:	f7fc f9b1 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8006c72:	f240 7107 	movw	r1, #1799	; 0x707
 8006c76:	203a      	movs	r0, #58	; 0x3a
 8006c78:	f7fc f9ac 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	203b      	movs	r0, #59	; 0x3b
 8006c80:	f7fc f9a8 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8006c84:	2107      	movs	r1, #7
 8006c86:	203c      	movs	r0, #60	; 0x3c
 8006c88:	f7fc f9a4 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	203d      	movs	r0, #61	; 0x3d
 8006c90:	f7fc f9a0 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(50);
 8006c94:	2032      	movs	r0, #50	; 0x32
 8006c96:	f7fa faff 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8006c9a:	2101      	movs	r1, #1
 8006c9c:	2007      	movs	r0, #7
 8006c9e:	f7fc f999 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8006ca2:	2101      	movs	r1, #1
 8006ca4:	2017      	movs	r0, #23
 8006ca6:	f7fc f995 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(50);
 8006caa:	2032      	movs	r0, #50	; 0x32
 8006cac:	f7fa faf4 	bl	8001298 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8006cb0:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8006cb4:	2010      	movs	r0, #16
 8006cb6:	f7fc f98d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8006cba:	f240 2117 	movw	r1, #535	; 0x217
 8006cbe:	2011      	movs	r0, #17
 8006cc0:	f7fc f988 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8006cc4:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8006cc8:	2012      	movs	r0, #18
 8006cca:	f7fc f983 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8006cce:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8006cd2:	2013      	movs	r0, #19
 8006cd4:	f7fc f97e 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8006cd8:	2100      	movs	r1, #0
 8006cda:	202a      	movs	r0, #42	; 0x2a
 8006cdc:	f7fc f97a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8006ce0:	210a      	movs	r1, #10
 8006ce2:	2029      	movs	r0, #41	; 0x29
 8006ce4:	f7fc f976 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8006ce8:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8006cec:	2012      	movs	r0, #18
 8006cee:	f7fc f971 	bl	8002fd4 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	2050      	movs	r0, #80	; 0x50
 8006cf6:	f7fc f96d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8006cfa:	21ef      	movs	r1, #239	; 0xef
 8006cfc:	2051      	movs	r0, #81	; 0x51
 8006cfe:	f7fc f969 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8006d02:	2100      	movs	r1, #0
 8006d04:	2052      	movs	r0, #82	; 0x52
 8006d06:	f7fc f965 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8006d0a:	f240 113f 	movw	r1, #319	; 0x13f
 8006d0e:	2053      	movs	r0, #83	; 0x53
 8006d10:	f7fc f960 	bl	8002fd4 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8006d14:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006d18:	2060      	movs	r0, #96	; 0x60
 8006d1a:	f7fc f95b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8006d1e:	2101      	movs	r1, #1
 8006d20:	2061      	movs	r0, #97	; 0x61
 8006d22:	f7fc f957 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8006d26:	2100      	movs	r1, #0
 8006d28:	206a      	movs	r0, #106	; 0x6a
 8006d2a:	f7fc f953 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8006d2e:	2100      	movs	r1, #0
 8006d30:	2080      	movs	r0, #128	; 0x80
 8006d32:	f7fc f94f 	bl	8002fd4 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8006d36:	2100      	movs	r1, #0
 8006d38:	2081      	movs	r0, #129	; 0x81
 8006d3a:	f7fc f94b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8006d3e:	2100      	movs	r1, #0
 8006d40:	2082      	movs	r0, #130	; 0x82
 8006d42:	f7fc f947 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8006d46:	2100      	movs	r1, #0
 8006d48:	2083      	movs	r0, #131	; 0x83
 8006d4a:	f7fc f943 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8006d4e:	2100      	movs	r1, #0
 8006d50:	2084      	movs	r0, #132	; 0x84
 8006d52:	f7fc f93f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8006d56:	2100      	movs	r1, #0
 8006d58:	2085      	movs	r0, #133	; 0x85
 8006d5a:	f7fc f93b 	bl	8002fd4 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8006d5e:	2113      	movs	r1, #19
 8006d60:	2090      	movs	r0, #144	; 0x90
 8006d62:	f7fc f937 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8006d66:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006d6a:	2092      	movs	r0, #146	; 0x92
 8006d6c:	f7fc f932 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8006d70:	2105      	movs	r1, #5
 8006d72:	2093      	movs	r0, #147	; 0x93
 8006d74:	f7fc f92e 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8006d78:	2100      	movs	r1, #0
 8006d7a:	2095      	movs	r0, #149	; 0x95
 8006d7c:	f7fc f92a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8006d80:	2100      	movs	r1, #0
 8006d82:	2097      	movs	r0, #151	; 0x97
 8006d84:	f7fc f926 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8006d88:	2100      	movs	r1, #0
 8006d8a:	2098      	movs	r0, #152	; 0x98
 8006d8c:	f7fc f922 	bl	8002fd4 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8006d90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d94:	2001      	movs	r0, #1
 8006d96:	f7fc f91d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8006d9a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006d9e:	2002      	movs	r0, #2
 8006da0:	f7fc f918 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8006da4:	f241 0138 	movw	r1, #4152	; 0x1038
 8006da8:	2003      	movs	r0, #3
 8006daa:	f7fc f913 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8006dae:	2100      	movs	r1, #0
 8006db0:	2004      	movs	r0, #4
 8006db2:	f7fc f90f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8006db6:	2100      	movs	r1, #0
 8006db8:	200c      	movs	r0, #12
 8006dba:	f7fc f90b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	200f      	movs	r0, #15
 8006dc2:	f7fc f907 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	2020      	movs	r0, #32
 8006dca:	f7fc f903 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8006dce:	2100      	movs	r1, #0
 8006dd0:	2021      	movs	r0, #33	; 0x21
 8006dd2:	f7fc f8ff 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8006dd6:	2121      	movs	r1, #33	; 0x21
 8006dd8:	2007      	movs	r0, #7
 8006dda:	f7fc f8fb 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(20);
 8006dde:	2014      	movs	r0, #20
 8006de0:	f7fa fa5a 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8006de4:	2161      	movs	r1, #97	; 0x61
 8006de6:	2007      	movs	r0, #7
 8006de8:	f7fc f8f4 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(20);
 8006dec:	2014      	movs	r0, #20
 8006dee:	f7fa fa53 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8006df2:	f240 1173 	movw	r1, #371	; 0x173
 8006df6:	2007      	movs	r0, #7
 8006df8:	f7fc f8ec 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(20);
 8006dfc:	2014      	movs	r0, #20
 8006dfe:	f7fa fa4b 	bl	8001298 <HAL_Delay>
 8006e02:	f000 bfd7 	b.w	8007db4 <LCD_Init+0x3e34>
 8006e06:	bf00      	nop
 8006e08:	20000290 	.word	0x20000290
	} else if (lcddev.id == 0xB505) {
 8006e0c:	4bf0      	ldr	r3, [pc, #960]	; (80071d0 <LCD_Init+0x3250>)
 8006e0e:	889b      	ldrh	r3, [r3, #4]
 8006e10:	f24b 5205 	movw	r2, #46341	; 0xb505
 8006e14:	4293      	cmp	r3, r2
 8006e16:	f040 8103 	bne.w	8007020 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	f7fc f8d9 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8006e22:	2100      	movs	r1, #0
 8006e24:	2000      	movs	r0, #0
 8006e26:	f7fc f8d5 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	2000      	movs	r0, #0
 8006e2e:	f7fc f8d1 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8006e32:	2100      	movs	r1, #0
 8006e34:	2000      	movs	r0, #0
 8006e36:	f7fc f8cd 	bl	8002fd4 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8006e3a:	2101      	movs	r1, #1
 8006e3c:	20a4      	movs	r0, #164	; 0xa4
 8006e3e:	f7fc f8c9 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(20);
 8006e42:	2014      	movs	r0, #20
 8006e44:	f7fa fa28 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8006e48:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006e4c:	2060      	movs	r0, #96	; 0x60
 8006e4e:	f7fc f8c1 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8006e52:	f240 2102 	movw	r1, #514	; 0x202
 8006e56:	2008      	movs	r0, #8
 8006e58:	f7fc f8bc 	bl	8002fd4 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8006e5c:	f44f 7105 	mov.w	r1, #532	; 0x214
 8006e60:	2030      	movs	r0, #48	; 0x30
 8006e62:	f7fc f8b7 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8006e66:	f243 7115 	movw	r1, #14101	; 0x3715
 8006e6a:	2031      	movs	r0, #49	; 0x31
 8006e6c:	f7fc f8b2 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8006e70:	f240 6104 	movw	r1, #1540	; 0x604
 8006e74:	2032      	movs	r0, #50	; 0x32
 8006e76:	f7fc f8ad 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 8006e7a:	f640 6116 	movw	r1, #3606	; 0xe16
 8006e7e:	2033      	movs	r0, #51	; 0x33
 8006e80:	f7fc f8a8 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8006e84:	f242 2111 	movw	r1, #8721	; 0x2211
 8006e88:	2034      	movs	r0, #52	; 0x34
 8006e8a:	f7fc f8a3 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8006e8e:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8006e92:	2035      	movs	r0, #53	; 0x35
 8006e94:	f7fc f89e 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8006e98:	f248 5107 	movw	r1, #34055	; 0x8507
 8006e9c:	2036      	movs	r0, #54	; 0x36
 8006e9e:	f7fc f899 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 8006ea2:	f241 4107 	movw	r1, #5127	; 0x1407
 8006ea6:	2037      	movs	r0, #55	; 0x37
 8006ea8:	f7fc f894 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8006eac:	f241 4103 	movw	r1, #5123	; 0x1403
 8006eb0:	2038      	movs	r0, #56	; 0x38
 8006eb2:	f7fc f88f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8006eb6:	2120      	movs	r1, #32
 8006eb8:	2039      	movs	r0, #57	; 0x39
 8006eba:	f7fc f88b 	bl	8002fd4 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 8006ebe:	211a      	movs	r1, #26
 8006ec0:	2090      	movs	r0, #144	; 0x90
 8006ec2:	f7fc f887 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	2010      	movs	r0, #16
 8006eca:	f7fc f883 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8006ece:	2107      	movs	r1, #7
 8006ed0:	2011      	movs	r0, #17
 8006ed2:	f7fc f87f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	2012      	movs	r0, #18
 8006eda:	f7fc f87b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8006ede:	2100      	movs	r1, #0
 8006ee0:	2013      	movs	r0, #19
 8006ee2:	f7fc f877 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(20);
 8006ee6:	2014      	movs	r0, #20
 8006ee8:	f7fa f9d6 	bl	8001298 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 8006eec:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8006ef0:	2010      	movs	r0, #16
 8006ef2:	f7fc f86f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8006ef6:	f240 1137 	movw	r1, #311	; 0x137
 8006efa:	2011      	movs	r0, #17
 8006efc:	f7fc f86a 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(20);
 8006f00:	2014      	movs	r0, #20
 8006f02:	f7fa f9c9 	bl	8001298 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8006f06:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8006f0a:	2012      	movs	r0, #18
 8006f0c:	f7fc f862 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(20);
 8006f10:	2014      	movs	r0, #20
 8006f12:	f7fa f9c1 	bl	8001298 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 8006f16:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8006f1a:	2013      	movs	r0, #19
 8006f1c:	f7fc f85a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8006f20:	2180      	movs	r1, #128	; 0x80
 8006f22:	202a      	movs	r0, #42	; 0x2a
 8006f24:	f7fc f856 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8006f28:	2148      	movs	r1, #72	; 0x48
 8006f2a:	2029      	movs	r0, #41	; 0x29
 8006f2c:	f7fc f852 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(20);
 8006f30:	2014      	movs	r0, #20
 8006f32:	f7fa f9b1 	bl	8001298 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8006f36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f3a:	2001      	movs	r0, #1
 8006f3c:	f7fc f84a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8006f40:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006f44:	2002      	movs	r0, #2
 8006f46:	f7fc f845 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8006f4a:	f241 0138 	movw	r1, #4152	; 0x1038
 8006f4e:	2003      	movs	r0, #3
 8006f50:	f7fc f840 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8006f54:	f240 2102 	movw	r1, #514	; 0x202
 8006f58:	2008      	movs	r0, #8
 8006f5a:	f7fc f83b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8006f5e:	2100      	movs	r1, #0
 8006f60:	200a      	movs	r0, #10
 8006f62:	f7fc f837 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8006f66:	2100      	movs	r1, #0
 8006f68:	200c      	movs	r0, #12
 8006f6a:	f7fc f833 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 8006f6e:	2100      	movs	r1, #0
 8006f70:	200d      	movs	r0, #13
 8006f72:	f7fc f82f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8006f76:	2130      	movs	r1, #48	; 0x30
 8006f78:	200e      	movs	r0, #14
 8006f7a:	f7fc f82b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8006f7e:	2100      	movs	r1, #0
 8006f80:	2050      	movs	r0, #80	; 0x50
 8006f82:	f7fc f827 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8006f86:	21ef      	movs	r1, #239	; 0xef
 8006f88:	2051      	movs	r0, #81	; 0x51
 8006f8a:	f7fc f823 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8006f8e:	2100      	movs	r1, #0
 8006f90:	2052      	movs	r0, #82	; 0x52
 8006f92:	f7fc f81f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8006f96:	f240 113f 	movw	r1, #319	; 0x13f
 8006f9a:	2053      	movs	r0, #83	; 0x53
 8006f9c:	f7fc f81a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8006fa0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006fa4:	2060      	movs	r0, #96	; 0x60
 8006fa6:	f7fc f815 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8006faa:	2101      	movs	r1, #1
 8006fac:	2061      	movs	r0, #97	; 0x61
 8006fae:	f7fc f811 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	206a      	movs	r0, #106	; 0x6a
 8006fb6:	f7fc f80d 	bl	8002fd4 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 8006fba:	2111      	movs	r1, #17
 8006fbc:	2090      	movs	r0, #144	; 0x90
 8006fbe:	f7fc f809 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8006fc2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006fc6:	2092      	movs	r0, #146	; 0x92
 8006fc8:	f7fc f804 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 8006fcc:	f240 4102 	movw	r1, #1026	; 0x402
 8006fd0:	2093      	movs	r0, #147	; 0x93
 8006fd2:	f7fb ffff 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 8006fd6:	2102      	movs	r1, #2
 8006fd8:	2094      	movs	r0, #148	; 0x94
 8006fda:	f7fb fffb 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(20);
 8006fde:	2014      	movs	r0, #20
 8006fe0:	f7fa f95a 	bl	8001298 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 8006fe4:	2101      	movs	r1, #1
 8006fe6:	2007      	movs	r0, #7
 8006fe8:	f7fb fff4 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(20);
 8006fec:	2014      	movs	r0, #20
 8006fee:	f7fa f953 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8006ff2:	2161      	movs	r1, #97	; 0x61
 8006ff4:	2007      	movs	r0, #7
 8006ff6:	f7fb ffed 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 8006ffa:	f240 1173 	movw	r1, #371	; 0x173
 8006ffe:	2007      	movs	r0, #7
 8007000:	f7fb ffe8 	bl	8002fd4 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8007004:	2100      	movs	r1, #0
 8007006:	2020      	movs	r0, #32
 8007008:	f7fb ffe4 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 800700c:	2100      	movs	r1, #0
 800700e:	2021      	movs	r0, #33	; 0x21
 8007010:	f7fb ffe0 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 8007014:	2122      	movs	r1, #34	; 0x22
 8007016:	2000      	movs	r0, #0
 8007018:	f7fb ffdc 	bl	8002fd4 <LCD_WriteReg>
 800701c:	f000 beca 	b.w	8007db4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8007020:	4b6b      	ldr	r3, [pc, #428]	; (80071d0 <LCD_Init+0x3250>)
 8007022:	889b      	ldrh	r3, [r3, #4]
 8007024:	f24c 5205 	movw	r2, #50437	; 0xc505
 8007028:	4293      	cmp	r3, r2
 800702a:	f040 80d3 	bne.w	80071d4 <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 800702e:	2100      	movs	r1, #0
 8007030:	2000      	movs	r0, #0
 8007032:	f7fb ffcf 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8007036:	2100      	movs	r1, #0
 8007038:	2000      	movs	r0, #0
 800703a:	f7fb ffcb 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(20);
 800703e:	2014      	movs	r0, #20
 8007040:	f7fa f92a 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 8007044:	2100      	movs	r1, #0
 8007046:	2000      	movs	r0, #0
 8007048:	f7fb ffc4 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800704c:	2100      	movs	r1, #0
 800704e:	2000      	movs	r0, #0
 8007050:	f7fb ffc0 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8007054:	2100      	movs	r1, #0
 8007056:	2000      	movs	r0, #0
 8007058:	f7fb ffbc 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800705c:	2100      	movs	r1, #0
 800705e:	2000      	movs	r0, #0
 8007060:	f7fb ffb8 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 8007064:	2101      	movs	r1, #1
 8007066:	20a4      	movs	r0, #164	; 0xa4
 8007068:	f7fb ffb4 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(20);
 800706c:	2014      	movs	r0, #20
 800706e:	f7fa f913 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8007072:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8007076:	2060      	movs	r0, #96	; 0x60
 8007078:	f7fb ffac 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 800707c:	f640 0106 	movw	r1, #2054	; 0x806
 8007080:	2008      	movs	r0, #8
 8007082:	f7fb ffa7 	bl	8002fd4 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 8007086:	f240 7103 	movw	r1, #1795	; 0x703
 800708a:	2030      	movs	r0, #48	; 0x30
 800708c:	f7fb ffa2 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8007090:	2101      	movs	r1, #1
 8007092:	2031      	movs	r0, #49	; 0x31
 8007094:	f7fb ff9e 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8007098:	2104      	movs	r1, #4
 800709a:	2032      	movs	r0, #50	; 0x32
 800709c:	f7fb ff9a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 80070a0:	f44f 7181 	mov.w	r1, #258	; 0x102
 80070a4:	2033      	movs	r0, #51	; 0x33
 80070a6:	f7fb ff95 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 80070aa:	f44f 7140 	mov.w	r1, #768	; 0x300
 80070ae:	2034      	movs	r0, #52	; 0x34
 80070b0:	f7fb ff90 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 80070b4:	f240 1103 	movw	r1, #259	; 0x103
 80070b8:	2035      	movs	r0, #53	; 0x35
 80070ba:	f7fb ff8b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 80070be:	211f      	movs	r1, #31
 80070c0:	2036      	movs	r0, #54	; 0x36
 80070c2:	f7fb ff87 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 80070c6:	f240 7103 	movw	r1, #1795	; 0x703
 80070ca:	2037      	movs	r0, #55	; 0x37
 80070cc:	f7fb ff82 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 80070d0:	2101      	movs	r1, #1
 80070d2:	2038      	movs	r0, #56	; 0x38
 80070d4:	f7fb ff7e 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 80070d8:	2104      	movs	r1, #4
 80070da:	2039      	movs	r0, #57	; 0x39
 80070dc:	f7fb ff7a 	bl	8002fd4 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 80070e0:	2115      	movs	r1, #21
 80070e2:	2090      	movs	r0, #144	; 0x90
 80070e4:	f7fb ff76 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 80070e8:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80070ec:	2010      	movs	r0, #16
 80070ee:	f7fb ff71 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 80070f2:	f240 2147 	movw	r1, #583	; 0x247
 80070f6:	2011      	movs	r0, #17
 80070f8:	f7fb ff6c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 80070fc:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8007100:	2012      	movs	r0, #18
 8007102:	f7fb ff67 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 8007106:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 800710a:	2013      	movs	r0, #19
 800710c:	f7fb ff62 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(120);
 8007110:	2078      	movs	r0, #120	; 0x78
 8007112:	f7fa f8c1 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 8007116:	f44f 7180 	mov.w	r1, #256	; 0x100
 800711a:	2001      	movs	r0, #1
 800711c:	f7fb ff5a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8007120:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007124:	2002      	movs	r0, #2
 8007126:	f7fb ff55 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 800712a:	f241 0130 	movw	r1, #4144	; 0x1030
 800712e:	2003      	movs	r0, #3
 8007130:	f7fb ff50 	bl	8002fd4 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8007134:	2108      	movs	r1, #8
 8007136:	200a      	movs	r0, #10
 8007138:	f7fb ff4c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800713c:	2100      	movs	r1, #0
 800713e:	200c      	movs	r0, #12
 8007140:	f7fb ff48 	bl	8002fd4 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8007144:	2120      	movs	r1, #32
 8007146:	200e      	movs	r0, #14
 8007148:	f7fb ff44 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 800714c:	2100      	movs	r1, #0
 800714e:	200f      	movs	r0, #15
 8007150:	f7fb ff40 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8007154:	2100      	movs	r1, #0
 8007156:	2020      	movs	r0, #32
 8007158:	f7fb ff3c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 800715c:	2100      	movs	r1, #0
 800715e:	2021      	movs	r0, #33	; 0x21
 8007160:	f7fb ff38 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 8007164:	213d      	movs	r1, #61	; 0x3d
 8007166:	202a      	movs	r0, #42	; 0x2a
 8007168:	f7fb ff34 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(20);
 800716c:	2014      	movs	r0, #20
 800716e:	f7fa f893 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8007172:	212d      	movs	r1, #45	; 0x2d
 8007174:	2029      	movs	r0, #41	; 0x29
 8007176:	f7fb ff2d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 800717a:	2100      	movs	r1, #0
 800717c:	2050      	movs	r0, #80	; 0x50
 800717e:	f7fb ff29 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8007182:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 8007186:	2051      	movs	r0, #81	; 0x51
 8007188:	f7fb ff24 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800718c:	2100      	movs	r1, #0
 800718e:	2052      	movs	r0, #82	; 0x52
 8007190:	f7fb ff20 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8007194:	f240 113f 	movw	r1, #319	; 0x13f
 8007198:	2053      	movs	r0, #83	; 0x53
 800719a:	f7fb ff1b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 800719e:	2100      	movs	r1, #0
 80071a0:	2061      	movs	r0, #97	; 0x61
 80071a2:	f7fb ff17 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80071a6:	2100      	movs	r1, #0
 80071a8:	206a      	movs	r0, #106	; 0x6a
 80071aa:	f7fb ff13 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 80071ae:	f44f 7140 	mov.w	r1, #768	; 0x300
 80071b2:	2092      	movs	r0, #146	; 0x92
 80071b4:	f7fb ff0e 	bl	8002fd4 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 80071b8:	2105      	movs	r1, #5
 80071ba:	2093      	movs	r0, #147	; 0x93
 80071bc:	f7fb ff0a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 80071c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80071c4:	2007      	movs	r0, #7
 80071c6:	f7fb ff05 	bl	8002fd4 <LCD_WriteReg>
 80071ca:	f000 bdf3 	b.w	8007db4 <LCD_Init+0x3e34>
 80071ce:	bf00      	nop
 80071d0:	20000290 	.word	0x20000290
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 80071d4:	4bc2      	ldr	r3, [pc, #776]	; (80074e0 <LCD_Init+0x3560>)
 80071d6:	889b      	ldrh	r3, [r3, #4]
 80071d8:	f648 1289 	movw	r2, #35209	; 0x8989
 80071dc:	4293      	cmp	r3, r2
 80071de:	f040 80bc 	bne.w	800735a <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 80071e2:	2101      	movs	r1, #1
 80071e4:	2000      	movs	r0, #0
 80071e6:	f7fb fef5 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 80071ea:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 80071ee:	2003      	movs	r0, #3
 80071f0:	f7fb fef0 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80071f4:	2100      	movs	r1, #0
 80071f6:	200c      	movs	r0, #12
 80071f8:	f7fb feec 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 80071fc:	f640 010c 	movw	r1, #2060	; 0x80c
 8007200:	200d      	movs	r0, #13
 8007202:	f7fb fee7 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 8007206:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 800720a:	200e      	movs	r0, #14
 800720c:	f7fb fee2 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 8007210:	21b0      	movs	r1, #176	; 0xb0
 8007212:	201e      	movs	r0, #30
 8007214:	f7fb fede 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8007218:	f642 313f 	movw	r1, #11071	; 0x2b3f
 800721c:	2001      	movs	r0, #1
 800721e:	f7fb fed9 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 8007222:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007226:	2002      	movs	r0, #2
 8007228:	f7fb fed4 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 800722c:	2100      	movs	r1, #0
 800722e:	2010      	movs	r0, #16
 8007230:	f7fb fed0 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 8007234:	f246 0178 	movw	r1, #24696	; 0x6078
 8007238:	2011      	movs	r0, #17
 800723a:	f7fb fecb 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 800723e:	2100      	movs	r1, #0
 8007240:	2005      	movs	r0, #5
 8007242:	f7fb fec7 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 8007246:	2100      	movs	r1, #0
 8007248:	2006      	movs	r0, #6
 800724a:	f7fb fec3 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 800724e:	f64e 711c 	movw	r1, #61212	; 0xef1c
 8007252:	2016      	movs	r0, #22
 8007254:	f7fb febe 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 8007258:	2103      	movs	r1, #3
 800725a:	2017      	movs	r0, #23
 800725c:	f7fb feba 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8007260:	f240 2133 	movw	r1, #563	; 0x233
 8007264:	2007      	movs	r0, #7
 8007266:	f7fb feb5 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 800726a:	2100      	movs	r1, #0
 800726c:	200b      	movs	r0, #11
 800726e:	f7fb feb1 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 8007272:	2100      	movs	r1, #0
 8007274:	200f      	movs	r0, #15
 8007276:	f7fb fead 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 800727a:	2100      	movs	r1, #0
 800727c:	2041      	movs	r0, #65	; 0x41
 800727e:	f7fb fea9 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 8007282:	2100      	movs	r1, #0
 8007284:	2042      	movs	r0, #66	; 0x42
 8007286:	f7fb fea5 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 800728a:	2100      	movs	r1, #0
 800728c:	2048      	movs	r0, #72	; 0x48
 800728e:	f7fb fea1 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 8007292:	f240 113f 	movw	r1, #319	; 0x13f
 8007296:	2049      	movs	r0, #73	; 0x49
 8007298:	f7fb fe9c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 800729c:	2100      	movs	r1, #0
 800729e:	204a      	movs	r0, #74	; 0x4a
 80072a0:	f7fb fe98 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 80072a4:	2100      	movs	r1, #0
 80072a6:	204b      	movs	r0, #75	; 0x4b
 80072a8:	f7fb fe94 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 80072ac:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 80072b0:	2044      	movs	r0, #68	; 0x44
 80072b2:	f7fb fe8f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 80072b6:	2100      	movs	r1, #0
 80072b8:	2045      	movs	r0, #69	; 0x45
 80072ba:	f7fb fe8b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 80072be:	f240 113f 	movw	r1, #319	; 0x13f
 80072c2:	2046      	movs	r0, #70	; 0x46
 80072c4:	f7fb fe86 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 80072c8:	f240 7107 	movw	r1, #1799	; 0x707
 80072cc:	2030      	movs	r0, #48	; 0x30
 80072ce:	f7fb fe81 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 80072d2:	f44f 7101 	mov.w	r1, #516	; 0x204
 80072d6:	2031      	movs	r0, #49	; 0x31
 80072d8:	f7fb fe7c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 80072dc:	f44f 7101 	mov.w	r1, #516	; 0x204
 80072e0:	2032      	movs	r0, #50	; 0x32
 80072e2:	f7fb fe77 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 80072e6:	f240 5102 	movw	r1, #1282	; 0x502
 80072ea:	2033      	movs	r0, #51	; 0x33
 80072ec:	f7fb fe72 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 80072f0:	f240 5107 	movw	r1, #1287	; 0x507
 80072f4:	2034      	movs	r0, #52	; 0x34
 80072f6:	f7fb fe6d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80072fa:	f44f 7101 	mov.w	r1, #516	; 0x204
 80072fe:	2035      	movs	r0, #53	; 0x35
 8007300:	f7fb fe68 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 8007304:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007308:	2036      	movs	r0, #54	; 0x36
 800730a:	f7fb fe63 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 800730e:	f240 5102 	movw	r1, #1282	; 0x502
 8007312:	2037      	movs	r0, #55	; 0x37
 8007314:	f7fb fe5e 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8007318:	f240 3102 	movw	r1, #770	; 0x302
 800731c:	203a      	movs	r0, #58	; 0x3a
 800731e:	f7fb fe59 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 8007322:	f240 3102 	movw	r1, #770	; 0x302
 8007326:	203b      	movs	r0, #59	; 0x3b
 8007328:	f7fb fe54 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 800732c:	2100      	movs	r1, #0
 800732e:	2023      	movs	r0, #35	; 0x23
 8007330:	f7fb fe50 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 8007334:	2100      	movs	r1, #0
 8007336:	2024      	movs	r0, #36	; 0x24
 8007338:	f7fb fe4c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 800733c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007340:	2025      	movs	r0, #37	; 0x25
 8007342:	f7fb fe47 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 8007346:	2100      	movs	r1, #0
 8007348:	204f      	movs	r0, #79	; 0x4f
 800734a:	f7fb fe43 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 800734e:	2100      	movs	r1, #0
 8007350:	204e      	movs	r0, #78	; 0x4e
 8007352:	f7fb fe3f 	bl	8002fd4 <LCD_WriteReg>
 8007356:	f000 bd2d 	b.w	8007db4 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 800735a:	4b61      	ldr	r3, [pc, #388]	; (80074e0 <LCD_Init+0x3560>)
 800735c:	889b      	ldrh	r3, [r3, #4]
 800735e:	f244 5231 	movw	r2, #17713	; 0x4531
 8007362:	4293      	cmp	r3, r2
 8007364:	f040 80be 	bne.w	80074e4 <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8007368:	2101      	movs	r1, #1
 800736a:	2000      	movs	r0, #0
 800736c:	f7fb fe32 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(10);
 8007370:	200a      	movs	r0, #10
 8007372:	f7f9 ff91 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 8007376:	f241 6128 	movw	r1, #5672	; 0x1628
 800737a:	2010      	movs	r0, #16
 800737c:	f7fb fe2a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8007380:	210e      	movs	r1, #14
 8007382:	2012      	movs	r0, #18
 8007384:	f7fb fe26 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8007388:	f640 2139 	movw	r1, #2617	; 0xa39
 800738c:	2013      	movs	r0, #19
 800738e:	f7fb fe21 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(10);
 8007392:	200a      	movs	r0, #10
 8007394:	f7f9 ff80 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8007398:	2140      	movs	r1, #64	; 0x40
 800739a:	2011      	movs	r0, #17
 800739c:	f7fb fe1a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 80073a0:	2150      	movs	r1, #80	; 0x50
 80073a2:	2015      	movs	r0, #21
 80073a4:	f7fb fe16 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(10);
 80073a8:	200a      	movs	r0, #10
 80073aa:	f7f9 ff75 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 80073ae:	211e      	movs	r1, #30
 80073b0:	2012      	movs	r0, #18
 80073b2:	f7fb fe0f 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(10);
 80073b6:	200a      	movs	r0, #10
 80073b8:	f7f9 ff6e 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 80073bc:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 80073c0:	2010      	movs	r0, #16
 80073c2:	f7fb fe07 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 80073c6:	f642 2139 	movw	r1, #10809	; 0x2a39
 80073ca:	2013      	movs	r0, #19
 80073cc:	f7fb fe02 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(10);
 80073d0:	200a      	movs	r0, #10
 80073d2:	f7f9 ff61 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 80073d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80073da:	2001      	movs	r0, #1
 80073dc:	f7fb fdfa 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80073e0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80073e4:	2002      	movs	r0, #2
 80073e6:	f7fb fdf5 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 80073ea:	f241 0138 	movw	r1, #4152	; 0x1038
 80073ee:	2003      	movs	r0, #3
 80073f0:	f7fb fdf0 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 80073f4:	f240 2102 	movw	r1, #514	; 0x202
 80073f8:	2008      	movs	r0, #8
 80073fa:	f7fb fdeb 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80073fe:	2108      	movs	r1, #8
 8007400:	200a      	movs	r0, #10
 8007402:	f7fb fde7 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 8007406:	2100      	movs	r1, #0
 8007408:	2030      	movs	r0, #48	; 0x30
 800740a:	f7fb fde3 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 800740e:	f240 4102 	movw	r1, #1026	; 0x402
 8007412:	2031      	movs	r0, #49	; 0x31
 8007414:	f7fb fdde 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8007418:	f44f 7183 	mov.w	r1, #262	; 0x106
 800741c:	2032      	movs	r0, #50	; 0x32
 800741e:	f7fb fdd9 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 8007422:	f240 5103 	movw	r1, #1283	; 0x503
 8007426:	2033      	movs	r0, #51	; 0x33
 8007428:	f7fb fdd4 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 800742c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8007430:	2034      	movs	r0, #52	; 0x34
 8007432:	f7fb fdcf 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 8007436:	f240 3101 	movw	r1, #769	; 0x301
 800743a:	2035      	movs	r0, #53	; 0x35
 800743c:	f7fb fdca 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 8007440:	f240 7107 	movw	r1, #1799	; 0x707
 8007444:	2036      	movs	r0, #54	; 0x36
 8007446:	f7fb fdc5 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 800744a:	f240 3105 	movw	r1, #773	; 0x305
 800744e:	2037      	movs	r0, #55	; 0x37
 8007450:	f7fb fdc0 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 8007454:	f44f 7102 	mov.w	r1, #520	; 0x208
 8007458:	2038      	movs	r0, #56	; 0x38
 800745a:	f7fb fdbb 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 800745e:	f640 710b 	movw	r1, #3851	; 0xf0b
 8007462:	2039      	movs	r0, #57	; 0x39
 8007464:	f7fb fdb6 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8007468:	2102      	movs	r1, #2
 800746a:	2041      	movs	r0, #65	; 0x41
 800746c:	f7fb fdb2 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8007470:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8007474:	2060      	movs	r0, #96	; 0x60
 8007476:	f7fb fdad 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 800747a:	2101      	movs	r1, #1
 800747c:	2061      	movs	r0, #97	; 0x61
 800747e:	f7fb fda9 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 8007482:	f44f 7104 	mov.w	r1, #528	; 0x210
 8007486:	2090      	movs	r0, #144	; 0x90
 8007488:	f7fb fda4 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 800748c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8007490:	2092      	movs	r0, #146	; 0x92
 8007492:	f7fb fd9f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 8007496:	2104      	movs	r1, #4
 8007498:	2093      	movs	r0, #147	; 0x93
 800749a:	f7fb fd9b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 800749e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80074a2:	20a0      	movs	r0, #160	; 0xa0
 80074a4:	f7fb fd96 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 80074a8:	2101      	movs	r1, #1
 80074aa:	2007      	movs	r0, #7
 80074ac:	f7fb fd92 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 80074b0:	2121      	movs	r1, #33	; 0x21
 80074b2:	2007      	movs	r0, #7
 80074b4:	f7fb fd8e 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 80074b8:	2123      	movs	r1, #35	; 0x23
 80074ba:	2007      	movs	r0, #7
 80074bc:	f7fb fd8a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 80074c0:	2133      	movs	r1, #51	; 0x33
 80074c2:	2007      	movs	r0, #7
 80074c4:	f7fb fd86 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 80074c8:	f240 1133 	movw	r1, #307	; 0x133
 80074cc:	2007      	movs	r0, #7
 80074ce:	f7fb fd81 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 80074d2:	2100      	movs	r1, #0
 80074d4:	20a0      	movs	r0, #160	; 0xa0
 80074d6:	f7fb fd7d 	bl	8002fd4 <LCD_WriteReg>
 80074da:	f000 bc6b 	b.w	8007db4 <LCD_Init+0x3e34>
 80074de:	bf00      	nop
 80074e0:	20000290 	.word	0x20000290
	} else if (lcddev.id == 0x4535) {
 80074e4:	4b5b      	ldr	r3, [pc, #364]	; (8007654 <LCD_Init+0x36d4>)
 80074e6:	889b      	ldrh	r3, [r3, #4]
 80074e8:	f244 5235 	movw	r2, #17717	; 0x4535
 80074ec:	4293      	cmp	r3, r2
 80074ee:	f040 80b3 	bne.w	8007658 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 80074f2:	2130      	movs	r1, #48	; 0x30
 80074f4:	2015      	movs	r0, #21
 80074f6:	f7fb fd6d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 80074fa:	2110      	movs	r1, #16
 80074fc:	209a      	movs	r0, #154	; 0x9a
 80074fe:	f7fb fd69 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 8007502:	2120      	movs	r1, #32
 8007504:	2011      	movs	r0, #17
 8007506:	f7fb fd65 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 800750a:	f243 4128 	movw	r1, #13352	; 0x3428
 800750e:	2010      	movs	r0, #16
 8007510:	f7fb fd60 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 8007514:	2102      	movs	r1, #2
 8007516:	2012      	movs	r0, #18
 8007518:	f7fb fd5c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 800751c:	f241 0138 	movw	r1, #4152	; 0x1038
 8007520:	2013      	movs	r0, #19
 8007522:	f7fb fd57 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(40);
 8007526:	2028      	movs	r0, #40	; 0x28
 8007528:	f7f9 feb6 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 800752c:	2112      	movs	r1, #18
 800752e:	2012      	movs	r0, #18
 8007530:	f7fb fd50 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(40);
 8007534:	2028      	movs	r0, #40	; 0x28
 8007536:	f7f9 feaf 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 800753a:	f243 4120 	movw	r1, #13344	; 0x3420
 800753e:	2010      	movs	r0, #16
 8007540:	f7fb fd48 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 8007544:	f243 0138 	movw	r1, #12344	; 0x3038
 8007548:	2013      	movs	r0, #19
 800754a:	f7fb fd43 	bl	8002fd4 <LCD_WriteReg>
		HAL_Delay(70);
 800754e:	2046      	movs	r0, #70	; 0x46
 8007550:	f7f9 fea2 	bl	8001298 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 8007554:	2100      	movs	r1, #0
 8007556:	2030      	movs	r0, #48	; 0x30
 8007558:	f7fb fd3c 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 800755c:	f240 4102 	movw	r1, #1026	; 0x402
 8007560:	2031      	movs	r0, #49	; 0x31
 8007562:	f7fb fd37 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 8007566:	f240 3107 	movw	r1, #775	; 0x307
 800756a:	2032      	movs	r0, #50	; 0x32
 800756c:	f7fb fd32 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8007570:	f44f 7141 	mov.w	r1, #772	; 0x304
 8007574:	2033      	movs	r0, #51	; 0x33
 8007576:	f7fb fd2d 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 800757a:	2104      	movs	r1, #4
 800757c:	2034      	movs	r0, #52	; 0x34
 800757e:	f7fb fd29 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 8007582:	f240 4101 	movw	r1, #1025	; 0x401
 8007586:	2035      	movs	r0, #53	; 0x35
 8007588:	f7fb fd24 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 800758c:	f240 7107 	movw	r1, #1799	; 0x707
 8007590:	2036      	movs	r0, #54	; 0x36
 8007592:	f7fb fd1f 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8007596:	f240 3105 	movw	r1, #773	; 0x305
 800759a:	2037      	movs	r0, #55	; 0x37
 800759c:	f7fb fd1a 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 80075a0:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80075a4:	2038      	movs	r0, #56	; 0x38
 80075a6:	f7fb fd15 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 80075aa:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80075ae:	2039      	movs	r0, #57	; 0x39
 80075b0:	f7fb fd10 	bl	8002fd4 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 80075b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80075b8:	2001      	movs	r0, #1
 80075ba:	f7fb fd0b 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 80075be:	f44f 7140 	mov.w	r1, #768	; 0x300
 80075c2:	2002      	movs	r0, #2
 80075c4:	f7fb fd06 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 80075c8:	f241 0130 	movw	r1, #4144	; 0x1030
 80075cc:	2003      	movs	r0, #3
 80075ce:	f7fb fd01 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 80075d2:	f640 0108 	movw	r1, #2056	; 0x808
 80075d6:	2008      	movs	r0, #8
 80075d8:	f7fb fcfc 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 80075dc:	2108      	movs	r1, #8
 80075de:	200a      	movs	r0, #10
 80075e0:	f7fb fcf8 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 80075e4:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80075e8:	2060      	movs	r0, #96	; 0x60
 80075ea:	f7fb fcf3 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 80075ee:	2101      	movs	r1, #1
 80075f0:	2061      	movs	r0, #97	; 0x61
 80075f2:	f7fb fcef 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 80075f6:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80075fa:	2090      	movs	r0, #144	; 0x90
 80075fc:	f7fb fcea 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 8007600:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007604:	2092      	movs	r0, #146	; 0x92
 8007606:	f7fb fce5 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 800760a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800760e:	2093      	movs	r0, #147	; 0x93
 8007610:	f7fb fce0 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 8007614:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8007618:	20a0      	movs	r0, #160	; 0xa0
 800761a:	f7fb fcdb 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 800761e:	2110      	movs	r1, #16
 8007620:	20a3      	movs	r0, #163	; 0xa3
 8007622:	f7fb fcd7 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8007626:	2101      	movs	r1, #1
 8007628:	2007      	movs	r0, #7
 800762a:	f7fb fcd3 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 800762e:	2121      	movs	r1, #33	; 0x21
 8007630:	2007      	movs	r0, #7
 8007632:	f7fb fccf 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8007636:	2123      	movs	r1, #35	; 0x23
 8007638:	2007      	movs	r0, #7
 800763a:	f7fb fccb 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 800763e:	2133      	movs	r1, #51	; 0x33
 8007640:	2007      	movs	r0, #7
 8007642:	f7fb fcc7 	bl	8002fd4 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8007646:	f240 1133 	movw	r1, #307	; 0x133
 800764a:	2007      	movs	r0, #7
 800764c:	f7fb fcc2 	bl	8002fd4 <LCD_WriteReg>
 8007650:	e3b0      	b.n	8007db4 <LCD_Init+0x3e34>
 8007652:	bf00      	nop
 8007654:	20000290 	.word	0x20000290
	} else if (lcddev.id == 0X1963) {
 8007658:	4ba8      	ldr	r3, [pc, #672]	; (80078fc <LCD_Init+0x397c>)
 800765a:	889b      	ldrh	r3, [r3, #4]
 800765c:	f641 1263 	movw	r2, #6499	; 0x1963
 8007660:	4293      	cmp	r3, r2
 8007662:	f040 83a7 	bne.w	8007db4 <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8007666:	20e2      	movs	r0, #226	; 0xe2
 8007668:	f7fb fc28 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 800766c:	4ba4      	ldr	r3, [pc, #656]	; (8007900 <LCD_Init+0x3980>)
 800766e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007672:	611a      	str	r2, [r3, #16]
 8007674:	4ba2      	ldr	r3, [pc, #648]	; (8007900 <LCD_Init+0x3980>)
 8007676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800767a:	615a      	str	r2, [r3, #20]
 800767c:	4ba1      	ldr	r3, [pc, #644]	; (8007904 <LCD_Init+0x3984>)
 800767e:	221d      	movs	r2, #29
 8007680:	60da      	str	r2, [r3, #12]
 8007682:	4b9f      	ldr	r3, [pc, #636]	; (8007900 <LCD_Init+0x3980>)
 8007684:	2280      	movs	r2, #128	; 0x80
 8007686:	615a      	str	r2, [r3, #20]
 8007688:	4b9d      	ldr	r3, [pc, #628]	; (8007900 <LCD_Init+0x3980>)
 800768a:	2280      	movs	r2, #128	; 0x80
 800768c:	611a      	str	r2, [r3, #16]
 800768e:	4b9c      	ldr	r3, [pc, #624]	; (8007900 <LCD_Init+0x3980>)
 8007690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007694:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8007696:	4b9a      	ldr	r3, [pc, #616]	; (8007900 <LCD_Init+0x3980>)
 8007698:	f44f 7280 	mov.w	r2, #256	; 0x100
 800769c:	611a      	str	r2, [r3, #16]
 800769e:	4b98      	ldr	r3, [pc, #608]	; (8007900 <LCD_Init+0x3980>)
 80076a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076a4:	615a      	str	r2, [r3, #20]
 80076a6:	4b97      	ldr	r3, [pc, #604]	; (8007904 <LCD_Init+0x3984>)
 80076a8:	2202      	movs	r2, #2
 80076aa:	60da      	str	r2, [r3, #12]
 80076ac:	4b94      	ldr	r3, [pc, #592]	; (8007900 <LCD_Init+0x3980>)
 80076ae:	2280      	movs	r2, #128	; 0x80
 80076b0:	615a      	str	r2, [r3, #20]
 80076b2:	4b93      	ldr	r3, [pc, #588]	; (8007900 <LCD_Init+0x3980>)
 80076b4:	2280      	movs	r2, #128	; 0x80
 80076b6:	611a      	str	r2, [r3, #16]
 80076b8:	4b91      	ldr	r3, [pc, #580]	; (8007900 <LCD_Init+0x3980>)
 80076ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076be:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 80076c0:	4b8f      	ldr	r3, [pc, #572]	; (8007900 <LCD_Init+0x3980>)
 80076c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076c6:	611a      	str	r2, [r3, #16]
 80076c8:	4b8d      	ldr	r3, [pc, #564]	; (8007900 <LCD_Init+0x3980>)
 80076ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076ce:	615a      	str	r2, [r3, #20]
 80076d0:	4b8c      	ldr	r3, [pc, #560]	; (8007904 <LCD_Init+0x3984>)
 80076d2:	2204      	movs	r2, #4
 80076d4:	60da      	str	r2, [r3, #12]
 80076d6:	4b8a      	ldr	r3, [pc, #552]	; (8007900 <LCD_Init+0x3980>)
 80076d8:	2280      	movs	r2, #128	; 0x80
 80076da:	615a      	str	r2, [r3, #20]
 80076dc:	4b88      	ldr	r3, [pc, #544]	; (8007900 <LCD_Init+0x3980>)
 80076de:	2280      	movs	r2, #128	; 0x80
 80076e0:	611a      	str	r2, [r3, #16]
 80076e2:	4b87      	ldr	r3, [pc, #540]	; (8007900 <LCD_Init+0x3980>)
 80076e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076e8:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 80076ea:	2001      	movs	r0, #1
 80076ec:	f7f9 fdd4 	bl	8001298 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 80076f0:	20e0      	movs	r0, #224	; 0xe0
 80076f2:	f7fb fbe3 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 80076f6:	4b82      	ldr	r3, [pc, #520]	; (8007900 <LCD_Init+0x3980>)
 80076f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076fc:	611a      	str	r2, [r3, #16]
 80076fe:	4b80      	ldr	r3, [pc, #512]	; (8007900 <LCD_Init+0x3980>)
 8007700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007704:	615a      	str	r2, [r3, #20]
 8007706:	4b7f      	ldr	r3, [pc, #508]	; (8007904 <LCD_Init+0x3984>)
 8007708:	2201      	movs	r2, #1
 800770a:	60da      	str	r2, [r3, #12]
 800770c:	4b7c      	ldr	r3, [pc, #496]	; (8007900 <LCD_Init+0x3980>)
 800770e:	2280      	movs	r2, #128	; 0x80
 8007710:	615a      	str	r2, [r3, #20]
 8007712:	4b7b      	ldr	r3, [pc, #492]	; (8007900 <LCD_Init+0x3980>)
 8007714:	2280      	movs	r2, #128	; 0x80
 8007716:	611a      	str	r2, [r3, #16]
 8007718:	4b79      	ldr	r3, [pc, #484]	; (8007900 <LCD_Init+0x3980>)
 800771a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800771e:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8007720:	200a      	movs	r0, #10
 8007722:	f7f9 fdb9 	bl	8001298 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8007726:	20e0      	movs	r0, #224	; 0xe0
 8007728:	f7fb fbc8 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 800772c:	4b74      	ldr	r3, [pc, #464]	; (8007900 <LCD_Init+0x3980>)
 800772e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007732:	611a      	str	r2, [r3, #16]
 8007734:	4b72      	ldr	r3, [pc, #456]	; (8007900 <LCD_Init+0x3980>)
 8007736:	f44f 7200 	mov.w	r2, #512	; 0x200
 800773a:	615a      	str	r2, [r3, #20]
 800773c:	4b71      	ldr	r3, [pc, #452]	; (8007904 <LCD_Init+0x3984>)
 800773e:	2203      	movs	r2, #3
 8007740:	60da      	str	r2, [r3, #12]
 8007742:	4b6f      	ldr	r3, [pc, #444]	; (8007900 <LCD_Init+0x3980>)
 8007744:	2280      	movs	r2, #128	; 0x80
 8007746:	615a      	str	r2, [r3, #20]
 8007748:	4b6d      	ldr	r3, [pc, #436]	; (8007900 <LCD_Init+0x3980>)
 800774a:	2280      	movs	r2, #128	; 0x80
 800774c:	611a      	str	r2, [r3, #16]
 800774e:	4b6c      	ldr	r3, [pc, #432]	; (8007900 <LCD_Init+0x3980>)
 8007750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007754:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 8007756:	200c      	movs	r0, #12
 8007758:	f7f9 fd9e 	bl	8001298 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 800775c:	2001      	movs	r0, #1
 800775e:	f7fb fbad 	bl	8002ebc <LCD_WR_REG>
		HAL_Delay(10);
 8007762:	200a      	movs	r0, #10
 8007764:	f7f9 fd98 	bl	8001298 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8007768:	20e6      	movs	r0, #230	; 0xe6
 800776a:	f7fb fba7 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 800776e:	4b64      	ldr	r3, [pc, #400]	; (8007900 <LCD_Init+0x3980>)
 8007770:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007774:	611a      	str	r2, [r3, #16]
 8007776:	4b62      	ldr	r3, [pc, #392]	; (8007900 <LCD_Init+0x3980>)
 8007778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800777c:	615a      	str	r2, [r3, #20]
 800777e:	4b61      	ldr	r3, [pc, #388]	; (8007904 <LCD_Init+0x3984>)
 8007780:	222f      	movs	r2, #47	; 0x2f
 8007782:	60da      	str	r2, [r3, #12]
 8007784:	4b5e      	ldr	r3, [pc, #376]	; (8007900 <LCD_Init+0x3980>)
 8007786:	2280      	movs	r2, #128	; 0x80
 8007788:	615a      	str	r2, [r3, #20]
 800778a:	4b5d      	ldr	r3, [pc, #372]	; (8007900 <LCD_Init+0x3980>)
 800778c:	2280      	movs	r2, #128	; 0x80
 800778e:	611a      	str	r2, [r3, #16]
 8007790:	4b5b      	ldr	r3, [pc, #364]	; (8007900 <LCD_Init+0x3980>)
 8007792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007796:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8007798:	4b59      	ldr	r3, [pc, #356]	; (8007900 <LCD_Init+0x3980>)
 800779a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800779e:	611a      	str	r2, [r3, #16]
 80077a0:	4b57      	ldr	r3, [pc, #348]	; (8007900 <LCD_Init+0x3980>)
 80077a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077a6:	615a      	str	r2, [r3, #20]
 80077a8:	4b56      	ldr	r3, [pc, #344]	; (8007904 <LCD_Init+0x3984>)
 80077aa:	22ff      	movs	r2, #255	; 0xff
 80077ac:	60da      	str	r2, [r3, #12]
 80077ae:	4b54      	ldr	r3, [pc, #336]	; (8007900 <LCD_Init+0x3980>)
 80077b0:	2280      	movs	r2, #128	; 0x80
 80077b2:	615a      	str	r2, [r3, #20]
 80077b4:	4b52      	ldr	r3, [pc, #328]	; (8007900 <LCD_Init+0x3980>)
 80077b6:	2280      	movs	r2, #128	; 0x80
 80077b8:	611a      	str	r2, [r3, #16]
 80077ba:	4b51      	ldr	r3, [pc, #324]	; (8007900 <LCD_Init+0x3980>)
 80077bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077c0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 80077c2:	4b4f      	ldr	r3, [pc, #316]	; (8007900 <LCD_Init+0x3980>)
 80077c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077c8:	611a      	str	r2, [r3, #16]
 80077ca:	4b4d      	ldr	r3, [pc, #308]	; (8007900 <LCD_Init+0x3980>)
 80077cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077d0:	615a      	str	r2, [r3, #20]
 80077d2:	4b4c      	ldr	r3, [pc, #304]	; (8007904 <LCD_Init+0x3984>)
 80077d4:	22ff      	movs	r2, #255	; 0xff
 80077d6:	60da      	str	r2, [r3, #12]
 80077d8:	4b49      	ldr	r3, [pc, #292]	; (8007900 <LCD_Init+0x3980>)
 80077da:	2280      	movs	r2, #128	; 0x80
 80077dc:	615a      	str	r2, [r3, #20]
 80077de:	4b48      	ldr	r3, [pc, #288]	; (8007900 <LCD_Init+0x3980>)
 80077e0:	2280      	movs	r2, #128	; 0x80
 80077e2:	611a      	str	r2, [r3, #16]
 80077e4:	4b46      	ldr	r3, [pc, #280]	; (8007900 <LCD_Init+0x3980>)
 80077e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077ea:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 80077ec:	20b0      	movs	r0, #176	; 0xb0
 80077ee:	f7fb fb65 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 80077f2:	4b43      	ldr	r3, [pc, #268]	; (8007900 <LCD_Init+0x3980>)
 80077f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077f8:	611a      	str	r2, [r3, #16]
 80077fa:	4b41      	ldr	r3, [pc, #260]	; (8007900 <LCD_Init+0x3980>)
 80077fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007800:	615a      	str	r2, [r3, #20]
 8007802:	4b40      	ldr	r3, [pc, #256]	; (8007904 <LCD_Init+0x3984>)
 8007804:	2220      	movs	r2, #32
 8007806:	60da      	str	r2, [r3, #12]
 8007808:	4b3d      	ldr	r3, [pc, #244]	; (8007900 <LCD_Init+0x3980>)
 800780a:	2280      	movs	r2, #128	; 0x80
 800780c:	615a      	str	r2, [r3, #20]
 800780e:	4b3c      	ldr	r3, [pc, #240]	; (8007900 <LCD_Init+0x3980>)
 8007810:	2280      	movs	r2, #128	; 0x80
 8007812:	611a      	str	r2, [r3, #16]
 8007814:	4b3a      	ldr	r3, [pc, #232]	; (8007900 <LCD_Init+0x3980>)
 8007816:	f44f 7200 	mov.w	r2, #512	; 0x200
 800781a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 800781c:	4b38      	ldr	r3, [pc, #224]	; (8007900 <LCD_Init+0x3980>)
 800781e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007822:	611a      	str	r2, [r3, #16]
 8007824:	4b36      	ldr	r3, [pc, #216]	; (8007900 <LCD_Init+0x3980>)
 8007826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800782a:	615a      	str	r2, [r3, #20]
 800782c:	4b35      	ldr	r3, [pc, #212]	; (8007904 <LCD_Init+0x3984>)
 800782e:	2200      	movs	r2, #0
 8007830:	60da      	str	r2, [r3, #12]
 8007832:	4b33      	ldr	r3, [pc, #204]	; (8007900 <LCD_Init+0x3980>)
 8007834:	2280      	movs	r2, #128	; 0x80
 8007836:	615a      	str	r2, [r3, #20]
 8007838:	4b31      	ldr	r3, [pc, #196]	; (8007900 <LCD_Init+0x3980>)
 800783a:	2280      	movs	r2, #128	; 0x80
 800783c:	611a      	str	r2, [r3, #16]
 800783e:	4b30      	ldr	r3, [pc, #192]	; (8007900 <LCD_Init+0x3980>)
 8007840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007844:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 8007846:	4b2e      	ldr	r3, [pc, #184]	; (8007900 <LCD_Init+0x3980>)
 8007848:	f44f 7280 	mov.w	r2, #256	; 0x100
 800784c:	611a      	str	r2, [r3, #16]
 800784e:	4b2c      	ldr	r3, [pc, #176]	; (8007900 <LCD_Init+0x3980>)
 8007850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007854:	615a      	str	r2, [r3, #20]
 8007856:	4b2b      	ldr	r3, [pc, #172]	; (8007904 <LCD_Init+0x3984>)
 8007858:	2203      	movs	r2, #3
 800785a:	60da      	str	r2, [r3, #12]
 800785c:	4b28      	ldr	r3, [pc, #160]	; (8007900 <LCD_Init+0x3980>)
 800785e:	2280      	movs	r2, #128	; 0x80
 8007860:	615a      	str	r2, [r3, #20]
 8007862:	4b27      	ldr	r3, [pc, #156]	; (8007900 <LCD_Init+0x3980>)
 8007864:	2280      	movs	r2, #128	; 0x80
 8007866:	611a      	str	r2, [r3, #16]
 8007868:	4b25      	ldr	r3, [pc, #148]	; (8007900 <LCD_Init+0x3980>)
 800786a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800786e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8007870:	4b23      	ldr	r3, [pc, #140]	; (8007900 <LCD_Init+0x3980>)
 8007872:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007876:	611a      	str	r2, [r3, #16]
 8007878:	4b21      	ldr	r3, [pc, #132]	; (8007900 <LCD_Init+0x3980>)
 800787a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800787e:	615a      	str	r2, [r3, #20]
 8007880:	4b20      	ldr	r3, [pc, #128]	; (8007904 <LCD_Init+0x3984>)
 8007882:	f240 321f 	movw	r2, #799	; 0x31f
 8007886:	60da      	str	r2, [r3, #12]
 8007888:	4b1d      	ldr	r3, [pc, #116]	; (8007900 <LCD_Init+0x3980>)
 800788a:	2280      	movs	r2, #128	; 0x80
 800788c:	615a      	str	r2, [r3, #20]
 800788e:	4b1c      	ldr	r3, [pc, #112]	; (8007900 <LCD_Init+0x3980>)
 8007890:	2280      	movs	r2, #128	; 0x80
 8007892:	611a      	str	r2, [r3, #16]
 8007894:	4b1a      	ldr	r3, [pc, #104]	; (8007900 <LCD_Init+0x3980>)
 8007896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800789a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 800789c:	4b18      	ldr	r3, [pc, #96]	; (8007900 <LCD_Init+0x3980>)
 800789e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078a2:	611a      	str	r2, [r3, #16]
 80078a4:	4b16      	ldr	r3, [pc, #88]	; (8007900 <LCD_Init+0x3980>)
 80078a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078aa:	615a      	str	r2, [r3, #20]
 80078ac:	4b15      	ldr	r3, [pc, #84]	; (8007904 <LCD_Init+0x3984>)
 80078ae:	2201      	movs	r2, #1
 80078b0:	60da      	str	r2, [r3, #12]
 80078b2:	4b13      	ldr	r3, [pc, #76]	; (8007900 <LCD_Init+0x3980>)
 80078b4:	2280      	movs	r2, #128	; 0x80
 80078b6:	615a      	str	r2, [r3, #20]
 80078b8:	4b11      	ldr	r3, [pc, #68]	; (8007900 <LCD_Init+0x3980>)
 80078ba:	2280      	movs	r2, #128	; 0x80
 80078bc:	611a      	str	r2, [r3, #16]
 80078be:	4b10      	ldr	r3, [pc, #64]	; (8007900 <LCD_Init+0x3980>)
 80078c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078c4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 80078c6:	4b0e      	ldr	r3, [pc, #56]	; (8007900 <LCD_Init+0x3980>)
 80078c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078cc:	611a      	str	r2, [r3, #16]
 80078ce:	4b0c      	ldr	r3, [pc, #48]	; (8007900 <LCD_Init+0x3980>)
 80078d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078d4:	615a      	str	r2, [r3, #20]
 80078d6:	4b0b      	ldr	r3, [pc, #44]	; (8007904 <LCD_Init+0x3984>)
 80078d8:	f240 12df 	movw	r2, #479	; 0x1df
 80078dc:	60da      	str	r2, [r3, #12]
 80078de:	4b08      	ldr	r3, [pc, #32]	; (8007900 <LCD_Init+0x3980>)
 80078e0:	2280      	movs	r2, #128	; 0x80
 80078e2:	615a      	str	r2, [r3, #20]
 80078e4:	4b06      	ldr	r3, [pc, #24]	; (8007900 <LCD_Init+0x3980>)
 80078e6:	2280      	movs	r2, #128	; 0x80
 80078e8:	611a      	str	r2, [r3, #16]
 80078ea:	4b05      	ldr	r3, [pc, #20]	; (8007900 <LCD_Init+0x3980>)
 80078ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078f0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 80078f2:	4b03      	ldr	r3, [pc, #12]	; (8007900 <LCD_Init+0x3980>)
 80078f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078f8:	e006      	b.n	8007908 <LCD_Init+0x3988>
 80078fa:	bf00      	nop
 80078fc:	20000290 	.word	0x20000290
 8007900:	40011000 	.word	0x40011000
 8007904:	40010c00 	.word	0x40010c00
 8007908:	611a      	str	r2, [r3, #16]
 800790a:	4ba3      	ldr	r3, [pc, #652]	; (8007b98 <LCD_Init+0x3c18>)
 800790c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007910:	615a      	str	r2, [r3, #20]
 8007912:	4ba2      	ldr	r3, [pc, #648]	; (8007b9c <LCD_Init+0x3c1c>)
 8007914:	2200      	movs	r2, #0
 8007916:	60da      	str	r2, [r3, #12]
 8007918:	4b9f      	ldr	r3, [pc, #636]	; (8007b98 <LCD_Init+0x3c18>)
 800791a:	2280      	movs	r2, #128	; 0x80
 800791c:	615a      	str	r2, [r3, #20]
 800791e:	4b9e      	ldr	r3, [pc, #632]	; (8007b98 <LCD_Init+0x3c18>)
 8007920:	2280      	movs	r2, #128	; 0x80
 8007922:	611a      	str	r2, [r3, #16]
 8007924:	4b9c      	ldr	r3, [pc, #624]	; (8007b98 <LCD_Init+0x3c18>)
 8007926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800792a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 800792c:	20b4      	movs	r0, #180	; 0xb4
 800792e:	f7fb fac5 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8007932:	4b99      	ldr	r3, [pc, #612]	; (8007b98 <LCD_Init+0x3c18>)
 8007934:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007938:	611a      	str	r2, [r3, #16]
 800793a:	4b97      	ldr	r3, [pc, #604]	; (8007b98 <LCD_Init+0x3c18>)
 800793c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007940:	615a      	str	r2, [r3, #20]
 8007942:	4b96      	ldr	r3, [pc, #600]	; (8007b9c <LCD_Init+0x3c1c>)
 8007944:	2204      	movs	r2, #4
 8007946:	60da      	str	r2, [r3, #12]
 8007948:	4b93      	ldr	r3, [pc, #588]	; (8007b98 <LCD_Init+0x3c18>)
 800794a:	2280      	movs	r2, #128	; 0x80
 800794c:	615a      	str	r2, [r3, #20]
 800794e:	4b92      	ldr	r3, [pc, #584]	; (8007b98 <LCD_Init+0x3c18>)
 8007950:	2280      	movs	r2, #128	; 0x80
 8007952:	611a      	str	r2, [r3, #16]
 8007954:	4b90      	ldr	r3, [pc, #576]	; (8007b98 <LCD_Init+0x3c18>)
 8007956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800795a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 800795c:	4b8e      	ldr	r3, [pc, #568]	; (8007b98 <LCD_Init+0x3c18>)
 800795e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007962:	611a      	str	r2, [r3, #16]
 8007964:	4b8c      	ldr	r3, [pc, #560]	; (8007b98 <LCD_Init+0x3c18>)
 8007966:	f44f 7200 	mov.w	r2, #512	; 0x200
 800796a:	615a      	str	r2, [r3, #20]
 800796c:	4b8b      	ldr	r3, [pc, #556]	; (8007b9c <LCD_Init+0x3c1c>)
 800796e:	f240 421f 	movw	r2, #1055	; 0x41f
 8007972:	60da      	str	r2, [r3, #12]
 8007974:	4b88      	ldr	r3, [pc, #544]	; (8007b98 <LCD_Init+0x3c18>)
 8007976:	2280      	movs	r2, #128	; 0x80
 8007978:	615a      	str	r2, [r3, #20]
 800797a:	4b87      	ldr	r3, [pc, #540]	; (8007b98 <LCD_Init+0x3c18>)
 800797c:	2280      	movs	r2, #128	; 0x80
 800797e:	611a      	str	r2, [r3, #16]
 8007980:	4b85      	ldr	r3, [pc, #532]	; (8007b98 <LCD_Init+0x3c18>)
 8007982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007986:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8007988:	4b83      	ldr	r3, [pc, #524]	; (8007b98 <LCD_Init+0x3c18>)
 800798a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800798e:	611a      	str	r2, [r3, #16]
 8007990:	4b81      	ldr	r3, [pc, #516]	; (8007b98 <LCD_Init+0x3c18>)
 8007992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007996:	615a      	str	r2, [r3, #20]
 8007998:	4b80      	ldr	r3, [pc, #512]	; (8007b9c <LCD_Init+0x3c1c>)
 800799a:	2200      	movs	r2, #0
 800799c:	60da      	str	r2, [r3, #12]
 800799e:	4b7e      	ldr	r3, [pc, #504]	; (8007b98 <LCD_Init+0x3c18>)
 80079a0:	2280      	movs	r2, #128	; 0x80
 80079a2:	615a      	str	r2, [r3, #20]
 80079a4:	4b7c      	ldr	r3, [pc, #496]	; (8007b98 <LCD_Init+0x3c18>)
 80079a6:	2280      	movs	r2, #128	; 0x80
 80079a8:	611a      	str	r2, [r3, #16]
 80079aa:	4b7b      	ldr	r3, [pc, #492]	; (8007b98 <LCD_Init+0x3c18>)
 80079ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079b0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 80079b2:	4b79      	ldr	r3, [pc, #484]	; (8007b98 <LCD_Init+0x3c18>)
 80079b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079b8:	611a      	str	r2, [r3, #16]
 80079ba:	4b77      	ldr	r3, [pc, #476]	; (8007b98 <LCD_Init+0x3c18>)
 80079bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079c0:	615a      	str	r2, [r3, #20]
 80079c2:	4b76      	ldr	r3, [pc, #472]	; (8007b9c <LCD_Init+0x3c1c>)
 80079c4:	222e      	movs	r2, #46	; 0x2e
 80079c6:	60da      	str	r2, [r3, #12]
 80079c8:	4b73      	ldr	r3, [pc, #460]	; (8007b98 <LCD_Init+0x3c18>)
 80079ca:	2280      	movs	r2, #128	; 0x80
 80079cc:	615a      	str	r2, [r3, #20]
 80079ce:	4b72      	ldr	r3, [pc, #456]	; (8007b98 <LCD_Init+0x3c18>)
 80079d0:	2280      	movs	r2, #128	; 0x80
 80079d2:	611a      	str	r2, [r3, #16]
 80079d4:	4b70      	ldr	r3, [pc, #448]	; (8007b98 <LCD_Init+0x3c18>)
 80079d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079da:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 80079dc:	4b6e      	ldr	r3, [pc, #440]	; (8007b98 <LCD_Init+0x3c18>)
 80079de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079e2:	611a      	str	r2, [r3, #16]
 80079e4:	4b6c      	ldr	r3, [pc, #432]	; (8007b98 <LCD_Init+0x3c18>)
 80079e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079ea:	615a      	str	r2, [r3, #20]
 80079ec:	4b6b      	ldr	r3, [pc, #428]	; (8007b9c <LCD_Init+0x3c1c>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	60da      	str	r2, [r3, #12]
 80079f2:	4b69      	ldr	r3, [pc, #420]	; (8007b98 <LCD_Init+0x3c18>)
 80079f4:	2280      	movs	r2, #128	; 0x80
 80079f6:	615a      	str	r2, [r3, #20]
 80079f8:	4b67      	ldr	r3, [pc, #412]	; (8007b98 <LCD_Init+0x3c18>)
 80079fa:	2280      	movs	r2, #128	; 0x80
 80079fc:	611a      	str	r2, [r3, #16]
 80079fe:	4b66      	ldr	r3, [pc, #408]	; (8007b98 <LCD_Init+0x3c18>)
 8007a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a04:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8007a06:	4b64      	ldr	r3, [pc, #400]	; (8007b98 <LCD_Init+0x3c18>)
 8007a08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a0c:	611a      	str	r2, [r3, #16]
 8007a0e:	4b62      	ldr	r3, [pc, #392]	; (8007b98 <LCD_Init+0x3c18>)
 8007a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a14:	615a      	str	r2, [r3, #20]
 8007a16:	4b61      	ldr	r3, [pc, #388]	; (8007b9c <LCD_Init+0x3c1c>)
 8007a18:	2200      	movs	r2, #0
 8007a1a:	60da      	str	r2, [r3, #12]
 8007a1c:	4b5e      	ldr	r3, [pc, #376]	; (8007b98 <LCD_Init+0x3c18>)
 8007a1e:	2280      	movs	r2, #128	; 0x80
 8007a20:	615a      	str	r2, [r3, #20]
 8007a22:	4b5d      	ldr	r3, [pc, #372]	; (8007b98 <LCD_Init+0x3c18>)
 8007a24:	2280      	movs	r2, #128	; 0x80
 8007a26:	611a      	str	r2, [r3, #16]
 8007a28:	4b5b      	ldr	r3, [pc, #364]	; (8007b98 <LCD_Init+0x3c18>)
 8007a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a2e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8007a30:	4b59      	ldr	r3, [pc, #356]	; (8007b98 <LCD_Init+0x3c18>)
 8007a32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a36:	611a      	str	r2, [r3, #16]
 8007a38:	4b57      	ldr	r3, [pc, #348]	; (8007b98 <LCD_Init+0x3c18>)
 8007a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a3e:	615a      	str	r2, [r3, #20]
 8007a40:	4b56      	ldr	r3, [pc, #344]	; (8007b9c <LCD_Init+0x3c1c>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	60da      	str	r2, [r3, #12]
 8007a46:	4b54      	ldr	r3, [pc, #336]	; (8007b98 <LCD_Init+0x3c18>)
 8007a48:	2280      	movs	r2, #128	; 0x80
 8007a4a:	615a      	str	r2, [r3, #20]
 8007a4c:	4b52      	ldr	r3, [pc, #328]	; (8007b98 <LCD_Init+0x3c18>)
 8007a4e:	2280      	movs	r2, #128	; 0x80
 8007a50:	611a      	str	r2, [r3, #16]
 8007a52:	4b51      	ldr	r3, [pc, #324]	; (8007b98 <LCD_Init+0x3c18>)
 8007a54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a58:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8007a5a:	4b4f      	ldr	r3, [pc, #316]	; (8007b98 <LCD_Init+0x3c18>)
 8007a5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a60:	611a      	str	r2, [r3, #16]
 8007a62:	4b4d      	ldr	r3, [pc, #308]	; (8007b98 <LCD_Init+0x3c18>)
 8007a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a68:	615a      	str	r2, [r3, #20]
 8007a6a:	4b4c      	ldr	r3, [pc, #304]	; (8007b9c <LCD_Init+0x3c1c>)
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	60da      	str	r2, [r3, #12]
 8007a70:	4b49      	ldr	r3, [pc, #292]	; (8007b98 <LCD_Init+0x3c18>)
 8007a72:	2280      	movs	r2, #128	; 0x80
 8007a74:	615a      	str	r2, [r3, #20]
 8007a76:	4b48      	ldr	r3, [pc, #288]	; (8007b98 <LCD_Init+0x3c18>)
 8007a78:	2280      	movs	r2, #128	; 0x80
 8007a7a:	611a      	str	r2, [r3, #16]
 8007a7c:	4b46      	ldr	r3, [pc, #280]	; (8007b98 <LCD_Init+0x3c18>)
 8007a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a82:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 8007a84:	20b6      	movs	r0, #182	; 0xb6
 8007a86:	f7fb fa19 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8007a8a:	4b43      	ldr	r3, [pc, #268]	; (8007b98 <LCD_Init+0x3c18>)
 8007a8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a90:	611a      	str	r2, [r3, #16]
 8007a92:	4b41      	ldr	r3, [pc, #260]	; (8007b98 <LCD_Init+0x3c18>)
 8007a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a98:	615a      	str	r2, [r3, #20]
 8007a9a:	4b40      	ldr	r3, [pc, #256]	; (8007b9c <LCD_Init+0x3c1c>)
 8007a9c:	2202      	movs	r2, #2
 8007a9e:	60da      	str	r2, [r3, #12]
 8007aa0:	4b3d      	ldr	r3, [pc, #244]	; (8007b98 <LCD_Init+0x3c18>)
 8007aa2:	2280      	movs	r2, #128	; 0x80
 8007aa4:	615a      	str	r2, [r3, #20]
 8007aa6:	4b3c      	ldr	r3, [pc, #240]	; (8007b98 <LCD_Init+0x3c18>)
 8007aa8:	2280      	movs	r2, #128	; 0x80
 8007aaa:	611a      	str	r2, [r3, #16]
 8007aac:	4b3a      	ldr	r3, [pc, #232]	; (8007b98 <LCD_Init+0x3c18>)
 8007aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ab2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 8007ab4:	4b38      	ldr	r3, [pc, #224]	; (8007b98 <LCD_Init+0x3c18>)
 8007ab6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007aba:	611a      	str	r2, [r3, #16]
 8007abc:	4b36      	ldr	r3, [pc, #216]	; (8007b98 <LCD_Init+0x3c18>)
 8007abe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ac2:	615a      	str	r2, [r3, #20]
 8007ac4:	4b35      	ldr	r3, [pc, #212]	; (8007b9c <LCD_Init+0x3c1c>)
 8007ac6:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8007aca:	60da      	str	r2, [r3, #12]
 8007acc:	4b32      	ldr	r3, [pc, #200]	; (8007b98 <LCD_Init+0x3c18>)
 8007ace:	2280      	movs	r2, #128	; 0x80
 8007ad0:	615a      	str	r2, [r3, #20]
 8007ad2:	4b31      	ldr	r3, [pc, #196]	; (8007b98 <LCD_Init+0x3c18>)
 8007ad4:	2280      	movs	r2, #128	; 0x80
 8007ad6:	611a      	str	r2, [r3, #16]
 8007ad8:	4b2f      	ldr	r3, [pc, #188]	; (8007b98 <LCD_Init+0x3c18>)
 8007ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ade:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8007ae0:	4b2d      	ldr	r3, [pc, #180]	; (8007b98 <LCD_Init+0x3c18>)
 8007ae2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ae6:	611a      	str	r2, [r3, #16]
 8007ae8:	4b2b      	ldr	r3, [pc, #172]	; (8007b98 <LCD_Init+0x3c18>)
 8007aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007aee:	615a      	str	r2, [r3, #20]
 8007af0:	4b2a      	ldr	r3, [pc, #168]	; (8007b9c <LCD_Init+0x3c1c>)
 8007af2:	2200      	movs	r2, #0
 8007af4:	60da      	str	r2, [r3, #12]
 8007af6:	4b28      	ldr	r3, [pc, #160]	; (8007b98 <LCD_Init+0x3c18>)
 8007af8:	2280      	movs	r2, #128	; 0x80
 8007afa:	615a      	str	r2, [r3, #20]
 8007afc:	4b26      	ldr	r3, [pc, #152]	; (8007b98 <LCD_Init+0x3c18>)
 8007afe:	2280      	movs	r2, #128	; 0x80
 8007b00:	611a      	str	r2, [r3, #16]
 8007b02:	4b25      	ldr	r3, [pc, #148]	; (8007b98 <LCD_Init+0x3c18>)
 8007b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b08:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8007b0a:	4b23      	ldr	r3, [pc, #140]	; (8007b98 <LCD_Init+0x3c18>)
 8007b0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b10:	611a      	str	r2, [r3, #16]
 8007b12:	4b21      	ldr	r3, [pc, #132]	; (8007b98 <LCD_Init+0x3c18>)
 8007b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b18:	615a      	str	r2, [r3, #20]
 8007b1a:	4b20      	ldr	r3, [pc, #128]	; (8007b9c <LCD_Init+0x3c1c>)
 8007b1c:	2217      	movs	r2, #23
 8007b1e:	60da      	str	r2, [r3, #12]
 8007b20:	4b1d      	ldr	r3, [pc, #116]	; (8007b98 <LCD_Init+0x3c18>)
 8007b22:	2280      	movs	r2, #128	; 0x80
 8007b24:	615a      	str	r2, [r3, #20]
 8007b26:	4b1c      	ldr	r3, [pc, #112]	; (8007b98 <LCD_Init+0x3c18>)
 8007b28:	2280      	movs	r2, #128	; 0x80
 8007b2a:	611a      	str	r2, [r3, #16]
 8007b2c:	4b1a      	ldr	r3, [pc, #104]	; (8007b98 <LCD_Init+0x3c18>)
 8007b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b32:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8007b34:	4b18      	ldr	r3, [pc, #96]	; (8007b98 <LCD_Init+0x3c18>)
 8007b36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b3a:	611a      	str	r2, [r3, #16]
 8007b3c:	4b16      	ldr	r3, [pc, #88]	; (8007b98 <LCD_Init+0x3c18>)
 8007b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b42:	615a      	str	r2, [r3, #20]
 8007b44:	4b15      	ldr	r3, [pc, #84]	; (8007b9c <LCD_Init+0x3c1c>)
 8007b46:	2215      	movs	r2, #21
 8007b48:	60da      	str	r2, [r3, #12]
 8007b4a:	4b13      	ldr	r3, [pc, #76]	; (8007b98 <LCD_Init+0x3c18>)
 8007b4c:	2280      	movs	r2, #128	; 0x80
 8007b4e:	615a      	str	r2, [r3, #20]
 8007b50:	4b11      	ldr	r3, [pc, #68]	; (8007b98 <LCD_Init+0x3c18>)
 8007b52:	2280      	movs	r2, #128	; 0x80
 8007b54:	611a      	str	r2, [r3, #16]
 8007b56:	4b10      	ldr	r3, [pc, #64]	; (8007b98 <LCD_Init+0x3c18>)
 8007b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b5c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8007b5e:	4b0e      	ldr	r3, [pc, #56]	; (8007b98 <LCD_Init+0x3c18>)
 8007b60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b64:	611a      	str	r2, [r3, #16]
 8007b66:	4b0c      	ldr	r3, [pc, #48]	; (8007b98 <LCD_Init+0x3c18>)
 8007b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b6c:	615a      	str	r2, [r3, #20]
 8007b6e:	4b0b      	ldr	r3, [pc, #44]	; (8007b9c <LCD_Init+0x3c1c>)
 8007b70:	2200      	movs	r2, #0
 8007b72:	60da      	str	r2, [r3, #12]
 8007b74:	4b08      	ldr	r3, [pc, #32]	; (8007b98 <LCD_Init+0x3c18>)
 8007b76:	2280      	movs	r2, #128	; 0x80
 8007b78:	615a      	str	r2, [r3, #20]
 8007b7a:	4b07      	ldr	r3, [pc, #28]	; (8007b98 <LCD_Init+0x3c18>)
 8007b7c:	2280      	movs	r2, #128	; 0x80
 8007b7e:	611a      	str	r2, [r3, #16]
 8007b80:	4b05      	ldr	r3, [pc, #20]	; (8007b98 <LCD_Init+0x3c18>)
 8007b82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b86:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8007b88:	4b03      	ldr	r3, [pc, #12]	; (8007b98 <LCD_Init+0x3c18>)
 8007b8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b8e:	611a      	str	r2, [r3, #16]
 8007b90:	4b01      	ldr	r3, [pc, #4]	; (8007b98 <LCD_Init+0x3c18>)
 8007b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b96:	e003      	b.n	8007ba0 <LCD_Init+0x3c20>
 8007b98:	40011000 	.word	0x40011000
 8007b9c:	40010c00 	.word	0x40010c00
 8007ba0:	615a      	str	r2, [r3, #20]
 8007ba2:	4b8b      	ldr	r3, [pc, #556]	; (8007dd0 <LCD_Init+0x3e50>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	60da      	str	r2, [r3, #12]
 8007ba8:	4b8a      	ldr	r3, [pc, #552]	; (8007dd4 <LCD_Init+0x3e54>)
 8007baa:	2280      	movs	r2, #128	; 0x80
 8007bac:	615a      	str	r2, [r3, #20]
 8007bae:	4b89      	ldr	r3, [pc, #548]	; (8007dd4 <LCD_Init+0x3e54>)
 8007bb0:	2280      	movs	r2, #128	; 0x80
 8007bb2:	611a      	str	r2, [r3, #16]
 8007bb4:	4b87      	ldr	r3, [pc, #540]	; (8007dd4 <LCD_Init+0x3e54>)
 8007bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bba:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8007bbc:	20f0      	movs	r0, #240	; 0xf0
 8007bbe:	f7fb f97d 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8007bc2:	4b84      	ldr	r3, [pc, #528]	; (8007dd4 <LCD_Init+0x3e54>)
 8007bc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bc8:	611a      	str	r2, [r3, #16]
 8007bca:	4b82      	ldr	r3, [pc, #520]	; (8007dd4 <LCD_Init+0x3e54>)
 8007bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bd0:	615a      	str	r2, [r3, #20]
 8007bd2:	4b7f      	ldr	r3, [pc, #508]	; (8007dd0 <LCD_Init+0x3e50>)
 8007bd4:	2203      	movs	r2, #3
 8007bd6:	60da      	str	r2, [r3, #12]
 8007bd8:	4b7e      	ldr	r3, [pc, #504]	; (8007dd4 <LCD_Init+0x3e54>)
 8007bda:	2280      	movs	r2, #128	; 0x80
 8007bdc:	615a      	str	r2, [r3, #20]
 8007bde:	4b7d      	ldr	r3, [pc, #500]	; (8007dd4 <LCD_Init+0x3e54>)
 8007be0:	2280      	movs	r2, #128	; 0x80
 8007be2:	611a      	str	r2, [r3, #16]
 8007be4:	4b7b      	ldr	r3, [pc, #492]	; (8007dd4 <LCD_Init+0x3e54>)
 8007be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bea:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8007bec:	2029      	movs	r0, #41	; 0x29
 8007bee:	f7fb f965 	bl	8002ebc <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8007bf2:	20d0      	movs	r0, #208	; 0xd0
 8007bf4:	f7fb f962 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8007bf8:	4b76      	ldr	r3, [pc, #472]	; (8007dd4 <LCD_Init+0x3e54>)
 8007bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bfe:	611a      	str	r2, [r3, #16]
 8007c00:	4b74      	ldr	r3, [pc, #464]	; (8007dd4 <LCD_Init+0x3e54>)
 8007c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c06:	615a      	str	r2, [r3, #20]
 8007c08:	4b71      	ldr	r3, [pc, #452]	; (8007dd0 <LCD_Init+0x3e50>)
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	60da      	str	r2, [r3, #12]
 8007c0e:	4b71      	ldr	r3, [pc, #452]	; (8007dd4 <LCD_Init+0x3e54>)
 8007c10:	2280      	movs	r2, #128	; 0x80
 8007c12:	615a      	str	r2, [r3, #20]
 8007c14:	4b6f      	ldr	r3, [pc, #444]	; (8007dd4 <LCD_Init+0x3e54>)
 8007c16:	2280      	movs	r2, #128	; 0x80
 8007c18:	611a      	str	r2, [r3, #16]
 8007c1a:	4b6e      	ldr	r3, [pc, #440]	; (8007dd4 <LCD_Init+0x3e54>)
 8007c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c20:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 8007c22:	20be      	movs	r0, #190	; 0xbe
 8007c24:	f7fb f94a 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8007c28:	4b6a      	ldr	r3, [pc, #424]	; (8007dd4 <LCD_Init+0x3e54>)
 8007c2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c2e:	611a      	str	r2, [r3, #16]
 8007c30:	4b68      	ldr	r3, [pc, #416]	; (8007dd4 <LCD_Init+0x3e54>)
 8007c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c36:	615a      	str	r2, [r3, #20]
 8007c38:	4b65      	ldr	r3, [pc, #404]	; (8007dd0 <LCD_Init+0x3e50>)
 8007c3a:	2205      	movs	r2, #5
 8007c3c:	60da      	str	r2, [r3, #12]
 8007c3e:	4b65      	ldr	r3, [pc, #404]	; (8007dd4 <LCD_Init+0x3e54>)
 8007c40:	2280      	movs	r2, #128	; 0x80
 8007c42:	615a      	str	r2, [r3, #20]
 8007c44:	4b63      	ldr	r3, [pc, #396]	; (8007dd4 <LCD_Init+0x3e54>)
 8007c46:	2280      	movs	r2, #128	; 0x80
 8007c48:	611a      	str	r2, [r3, #16]
 8007c4a:	4b62      	ldr	r3, [pc, #392]	; (8007dd4 <LCD_Init+0x3e54>)
 8007c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c50:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8007c52:	4b60      	ldr	r3, [pc, #384]	; (8007dd4 <LCD_Init+0x3e54>)
 8007c54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c58:	611a      	str	r2, [r3, #16]
 8007c5a:	4b5e      	ldr	r3, [pc, #376]	; (8007dd4 <LCD_Init+0x3e54>)
 8007c5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c60:	615a      	str	r2, [r3, #20]
 8007c62:	4b5b      	ldr	r3, [pc, #364]	; (8007dd0 <LCD_Init+0x3e50>)
 8007c64:	22fe      	movs	r2, #254	; 0xfe
 8007c66:	60da      	str	r2, [r3, #12]
 8007c68:	4b5a      	ldr	r3, [pc, #360]	; (8007dd4 <LCD_Init+0x3e54>)
 8007c6a:	2280      	movs	r2, #128	; 0x80
 8007c6c:	615a      	str	r2, [r3, #20]
 8007c6e:	4b59      	ldr	r3, [pc, #356]	; (8007dd4 <LCD_Init+0x3e54>)
 8007c70:	2280      	movs	r2, #128	; 0x80
 8007c72:	611a      	str	r2, [r3, #16]
 8007c74:	4b57      	ldr	r3, [pc, #348]	; (8007dd4 <LCD_Init+0x3e54>)
 8007c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c7a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8007c7c:	4b55      	ldr	r3, [pc, #340]	; (8007dd4 <LCD_Init+0x3e54>)
 8007c7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c82:	611a      	str	r2, [r3, #16]
 8007c84:	4b53      	ldr	r3, [pc, #332]	; (8007dd4 <LCD_Init+0x3e54>)
 8007c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c8a:	615a      	str	r2, [r3, #20]
 8007c8c:	4b50      	ldr	r3, [pc, #320]	; (8007dd0 <LCD_Init+0x3e50>)
 8007c8e:	2201      	movs	r2, #1
 8007c90:	60da      	str	r2, [r3, #12]
 8007c92:	4b50      	ldr	r3, [pc, #320]	; (8007dd4 <LCD_Init+0x3e54>)
 8007c94:	2280      	movs	r2, #128	; 0x80
 8007c96:	615a      	str	r2, [r3, #20]
 8007c98:	4b4e      	ldr	r3, [pc, #312]	; (8007dd4 <LCD_Init+0x3e54>)
 8007c9a:	2280      	movs	r2, #128	; 0x80
 8007c9c:	611a      	str	r2, [r3, #16]
 8007c9e:	4b4d      	ldr	r3, [pc, #308]	; (8007dd4 <LCD_Init+0x3e54>)
 8007ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ca4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8007ca6:	4b4b      	ldr	r3, [pc, #300]	; (8007dd4 <LCD_Init+0x3e54>)
 8007ca8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cac:	611a      	str	r2, [r3, #16]
 8007cae:	4b49      	ldr	r3, [pc, #292]	; (8007dd4 <LCD_Init+0x3e54>)
 8007cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cb4:	615a      	str	r2, [r3, #20]
 8007cb6:	4b46      	ldr	r3, [pc, #280]	; (8007dd0 <LCD_Init+0x3e50>)
 8007cb8:	2200      	movs	r2, #0
 8007cba:	60da      	str	r2, [r3, #12]
 8007cbc:	4b45      	ldr	r3, [pc, #276]	; (8007dd4 <LCD_Init+0x3e54>)
 8007cbe:	2280      	movs	r2, #128	; 0x80
 8007cc0:	615a      	str	r2, [r3, #20]
 8007cc2:	4b44      	ldr	r3, [pc, #272]	; (8007dd4 <LCD_Init+0x3e54>)
 8007cc4:	2280      	movs	r2, #128	; 0x80
 8007cc6:	611a      	str	r2, [r3, #16]
 8007cc8:	4b42      	ldr	r3, [pc, #264]	; (8007dd4 <LCD_Init+0x3e54>)
 8007cca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cce:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8007cd0:	4b40      	ldr	r3, [pc, #256]	; (8007dd4 <LCD_Init+0x3e54>)
 8007cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cd6:	611a      	str	r2, [r3, #16]
 8007cd8:	4b3e      	ldr	r3, [pc, #248]	; (8007dd4 <LCD_Init+0x3e54>)
 8007cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cde:	615a      	str	r2, [r3, #20]
 8007ce0:	4b3b      	ldr	r3, [pc, #236]	; (8007dd0 <LCD_Init+0x3e50>)
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	60da      	str	r2, [r3, #12]
 8007ce6:	4b3b      	ldr	r3, [pc, #236]	; (8007dd4 <LCD_Init+0x3e54>)
 8007ce8:	2280      	movs	r2, #128	; 0x80
 8007cea:	615a      	str	r2, [r3, #20]
 8007cec:	4b39      	ldr	r3, [pc, #228]	; (8007dd4 <LCD_Init+0x3e54>)
 8007cee:	2280      	movs	r2, #128	; 0x80
 8007cf0:	611a      	str	r2, [r3, #16]
 8007cf2:	4b38      	ldr	r3, [pc, #224]	; (8007dd4 <LCD_Init+0x3e54>)
 8007cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cf8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8007cfa:	4b36      	ldr	r3, [pc, #216]	; (8007dd4 <LCD_Init+0x3e54>)
 8007cfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d00:	611a      	str	r2, [r3, #16]
 8007d02:	4b34      	ldr	r3, [pc, #208]	; (8007dd4 <LCD_Init+0x3e54>)
 8007d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d08:	615a      	str	r2, [r3, #20]
 8007d0a:	4b31      	ldr	r3, [pc, #196]	; (8007dd0 <LCD_Init+0x3e50>)
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	60da      	str	r2, [r3, #12]
 8007d10:	4b30      	ldr	r3, [pc, #192]	; (8007dd4 <LCD_Init+0x3e54>)
 8007d12:	2280      	movs	r2, #128	; 0x80
 8007d14:	615a      	str	r2, [r3, #20]
 8007d16:	4b2f      	ldr	r3, [pc, #188]	; (8007dd4 <LCD_Init+0x3e54>)
 8007d18:	2280      	movs	r2, #128	; 0x80
 8007d1a:	611a      	str	r2, [r3, #16]
 8007d1c:	4b2d      	ldr	r3, [pc, #180]	; (8007dd4 <LCD_Init+0x3e54>)
 8007d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d22:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8007d24:	20b8      	movs	r0, #184	; 0xb8
 8007d26:	f7fb f8c9 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8007d2a:	4b2a      	ldr	r3, [pc, #168]	; (8007dd4 <LCD_Init+0x3e54>)
 8007d2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d30:	611a      	str	r2, [r3, #16]
 8007d32:	4b28      	ldr	r3, [pc, #160]	; (8007dd4 <LCD_Init+0x3e54>)
 8007d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d38:	615a      	str	r2, [r3, #20]
 8007d3a:	4b25      	ldr	r3, [pc, #148]	; (8007dd0 <LCD_Init+0x3e50>)
 8007d3c:	2203      	movs	r2, #3
 8007d3e:	60da      	str	r2, [r3, #12]
 8007d40:	4b24      	ldr	r3, [pc, #144]	; (8007dd4 <LCD_Init+0x3e54>)
 8007d42:	2280      	movs	r2, #128	; 0x80
 8007d44:	615a      	str	r2, [r3, #20]
 8007d46:	4b23      	ldr	r3, [pc, #140]	; (8007dd4 <LCD_Init+0x3e54>)
 8007d48:	2280      	movs	r2, #128	; 0x80
 8007d4a:	611a      	str	r2, [r3, #16]
 8007d4c:	4b21      	ldr	r3, [pc, #132]	; (8007dd4 <LCD_Init+0x3e54>)
 8007d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d52:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8007d54:	4b1f      	ldr	r3, [pc, #124]	; (8007dd4 <LCD_Init+0x3e54>)
 8007d56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d5a:	611a      	str	r2, [r3, #16]
 8007d5c:	4b1d      	ldr	r3, [pc, #116]	; (8007dd4 <LCD_Init+0x3e54>)
 8007d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d62:	615a      	str	r2, [r3, #20]
 8007d64:	4b1a      	ldr	r3, [pc, #104]	; (8007dd0 <LCD_Init+0x3e50>)
 8007d66:	2201      	movs	r2, #1
 8007d68:	60da      	str	r2, [r3, #12]
 8007d6a:	4b1a      	ldr	r3, [pc, #104]	; (8007dd4 <LCD_Init+0x3e54>)
 8007d6c:	2280      	movs	r2, #128	; 0x80
 8007d6e:	615a      	str	r2, [r3, #20]
 8007d70:	4b18      	ldr	r3, [pc, #96]	; (8007dd4 <LCD_Init+0x3e54>)
 8007d72:	2280      	movs	r2, #128	; 0x80
 8007d74:	611a      	str	r2, [r3, #16]
 8007d76:	4b17      	ldr	r3, [pc, #92]	; (8007dd4 <LCD_Init+0x3e54>)
 8007d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d7c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8007d7e:	20ba      	movs	r0, #186	; 0xba
 8007d80:	f7fb f89c 	bl	8002ebc <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8007d84:	4b13      	ldr	r3, [pc, #76]	; (8007dd4 <LCD_Init+0x3e54>)
 8007d86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d8a:	611a      	str	r2, [r3, #16]
 8007d8c:	4b11      	ldr	r3, [pc, #68]	; (8007dd4 <LCD_Init+0x3e54>)
 8007d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d92:	615a      	str	r2, [r3, #20]
 8007d94:	4b0e      	ldr	r3, [pc, #56]	; (8007dd0 <LCD_Init+0x3e50>)
 8007d96:	2201      	movs	r2, #1
 8007d98:	60da      	str	r2, [r3, #12]
 8007d9a:	4b0e      	ldr	r3, [pc, #56]	; (8007dd4 <LCD_Init+0x3e54>)
 8007d9c:	2280      	movs	r2, #128	; 0x80
 8007d9e:	615a      	str	r2, [r3, #20]
 8007da0:	4b0c      	ldr	r3, [pc, #48]	; (8007dd4 <LCD_Init+0x3e54>)
 8007da2:	2280      	movs	r2, #128	; 0x80
 8007da4:	611a      	str	r2, [r3, #16]
 8007da6:	4b0b      	ldr	r3, [pc, #44]	; (8007dd4 <LCD_Init+0x3e54>)
 8007da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dac:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8007dae:	2064      	movs	r0, #100	; 0x64
 8007db0:	f7fb ff36 	bl	8003c20 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8007db4:	2000      	movs	r0, #0
 8007db6:	f7fb ffd7 	bl	8003d68 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8007dba:	4b07      	ldr	r3, [pc, #28]	; (8007dd8 <LCD_Init+0x3e58>)
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8007dc0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007dc4:	f000 f80a 	bl	8007ddc <LCD_Clear>
}
 8007dc8:	bf00      	nop
 8007dca:	3718      	adds	r7, #24
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	40010c00 	.word	0x40010c00
 8007dd4:	40011000 	.word	0x40011000
 8007dd8:	422201a8 	.word	0x422201a8

08007ddc <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	4603      	mov	r3, r0
 8007de4:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8007de6:	2300      	movs	r3, #0
 8007de8:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8007dea:	4b2a      	ldr	r3, [pc, #168]	; (8007e94 <LCD_Clear+0xb8>)
 8007dec:	881b      	ldrh	r3, [r3, #0]
 8007dee:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8007df0:	4b28      	ldr	r3, [pc, #160]	; (8007e94 <LCD_Clear+0xb8>)
 8007df2:	885b      	ldrh	r3, [r3, #2]
 8007df4:	461a      	mov	r2, r3
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	fb02 f303 	mul.w	r3, r2, r3
 8007dfc:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8007dfe:	4b25      	ldr	r3, [pc, #148]	; (8007e94 <LCD_Clear+0xb8>)
 8007e00:	889b      	ldrh	r3, [r3, #4]
 8007e02:	f646 0204 	movw	r2, #26628	; 0x6804
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d11a      	bne.n	8007e40 <LCD_Clear+0x64>
 8007e0a:	4b22      	ldr	r3, [pc, #136]	; (8007e94 <LCD_Clear+0xb8>)
 8007e0c:	799b      	ldrb	r3, [r3, #6]
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d116      	bne.n	8007e40 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8007e12:	4b20      	ldr	r3, [pc, #128]	; (8007e94 <LCD_Clear+0xb8>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8007e18:	4b1e      	ldr	r3, [pc, #120]	; (8007e94 <LCD_Clear+0xb8>)
 8007e1a:	222a      	movs	r2, #42	; 0x2a
 8007e1c:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8007e1e:	4b1d      	ldr	r3, [pc, #116]	; (8007e94 <LCD_Clear+0xb8>)
 8007e20:	222b      	movs	r2, #43	; 0x2b
 8007e22:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 8007e24:	2100      	movs	r1, #0
 8007e26:	2000      	movs	r0, #0
 8007e28:	f7fb f91a 	bl	8003060 <LCD_SetCursor>
		lcddev.dir = 1;
 8007e2c:	4b19      	ldr	r3, [pc, #100]	; (8007e94 <LCD_Clear+0xb8>)
 8007e2e:	2201      	movs	r2, #1
 8007e30:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8007e32:	4b18      	ldr	r3, [pc, #96]	; (8007e94 <LCD_Clear+0xb8>)
 8007e34:	222b      	movs	r2, #43	; 0x2b
 8007e36:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8007e38:	4b16      	ldr	r3, [pc, #88]	; (8007e94 <LCD_Clear+0xb8>)
 8007e3a:	222a      	movs	r2, #42	; 0x2a
 8007e3c:	819a      	strh	r2, [r3, #12]
 8007e3e:	e003      	b.n	8007e48 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8007e40:	2100      	movs	r1, #0
 8007e42:	2000      	movs	r0, #0
 8007e44:	f7fb f90c 	bl	8003060 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8007e48:	f7fb f8fe 	bl	8003048 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	60fb      	str	r3, [r7, #12]
 8007e50:	e017      	b.n	8007e82 <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8007e52:	4b11      	ldr	r3, [pc, #68]	; (8007e98 <LCD_Clear+0xbc>)
 8007e54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e58:	611a      	str	r2, [r3, #16]
 8007e5a:	4b0f      	ldr	r3, [pc, #60]	; (8007e98 <LCD_Clear+0xbc>)
 8007e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e60:	615a      	str	r2, [r3, #20]
 8007e62:	4a0e      	ldr	r2, [pc, #56]	; (8007e9c <LCD_Clear+0xc0>)
 8007e64:	88fb      	ldrh	r3, [r7, #6]
 8007e66:	60d3      	str	r3, [r2, #12]
 8007e68:	4b0b      	ldr	r3, [pc, #44]	; (8007e98 <LCD_Clear+0xbc>)
 8007e6a:	2280      	movs	r2, #128	; 0x80
 8007e6c:	615a      	str	r2, [r3, #20]
 8007e6e:	4b0a      	ldr	r3, [pc, #40]	; (8007e98 <LCD_Clear+0xbc>)
 8007e70:	2280      	movs	r2, #128	; 0x80
 8007e72:	611a      	str	r2, [r3, #16]
 8007e74:	4b08      	ldr	r3, [pc, #32]	; (8007e98 <LCD_Clear+0xbc>)
 8007e76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e7a:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	60fb      	str	r3, [r7, #12]
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d3e3      	bcc.n	8007e52 <LCD_Clear+0x76>
}
 8007e8a:	bf00      	nop
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	20000290 	.word	0x20000290
 8007e98:	40011000 	.word	0x40011000
 8007e9c:	40010c00 	.word	0x40010c00

08007ea0 <LCD_Fill>:
// Fill the area with color
// :(xend-xsta+1)*(yend-ysta+1)
void LCD_Fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey,
		uint16_t color) {
 8007ea0:	b590      	push	{r4, r7, lr}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	af02      	add	r7, sp, #8
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	4608      	mov	r0, r1
 8007eaa:	4611      	mov	r1, r2
 8007eac:	461a      	mov	r2, r3
 8007eae:	4623      	mov	r3, r4
 8007eb0:	80fb      	strh	r3, [r7, #6]
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	80bb      	strh	r3, [r7, #4]
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	807b      	strh	r3, [r7, #2]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	803b      	strh	r3, [r7, #0]
	uint16_t i, j;
	uint16_t xlen = 0;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	817b      	strh	r3, [r7, #10]
	uint16_t temp;
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1))	//6804横屏的时候特殊处理
 8007ec2:	4b3a      	ldr	r3, [pc, #232]	; (8007fac <LCD_Fill+0x10c>)
 8007ec4:	889b      	ldrh	r3, [r3, #4]
 8007ec6:	f646 0204 	movw	r2, #26628	; 0x6804
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d133      	bne.n	8007f36 <LCD_Fill+0x96>
 8007ece:	4b37      	ldr	r3, [pc, #220]	; (8007fac <LCD_Fill+0x10c>)
 8007ed0:	799b      	ldrb	r3, [r3, #6]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d12f      	bne.n	8007f36 <LCD_Fill+0x96>
			{
		temp = sx;
 8007ed6:	88fb      	ldrh	r3, [r7, #6]
 8007ed8:	813b      	strh	r3, [r7, #8]
		sx = sy;
 8007eda:	88bb      	ldrh	r3, [r7, #4]
 8007edc:	80fb      	strh	r3, [r7, #6]
		sy = lcddev.width - ex - 1;
 8007ede:	4b33      	ldr	r3, [pc, #204]	; (8007fac <LCD_Fill+0x10c>)
 8007ee0:	881a      	ldrh	r2, [r3, #0]
 8007ee2:	887b      	ldrh	r3, [r7, #2]
 8007ee4:	1ad3      	subs	r3, r2, r3
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	80bb      	strh	r3, [r7, #4]
		ex = ey;
 8007eec:	883b      	ldrh	r3, [r7, #0]
 8007eee:	807b      	strh	r3, [r7, #2]
		ey = lcddev.width - temp - 1;
 8007ef0:	4b2e      	ldr	r3, [pc, #184]	; (8007fac <LCD_Fill+0x10c>)
 8007ef2:	881a      	ldrh	r2, [r3, #0]
 8007ef4:	893b      	ldrh	r3, [r7, #8]
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	3b01      	subs	r3, #1
 8007efc:	803b      	strh	r3, [r7, #0]
		lcddev.dir = 0;
 8007efe:	4b2b      	ldr	r3, [pc, #172]	; (8007fac <LCD_Fill+0x10c>)
 8007f00:	2200      	movs	r2, #0
 8007f02:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8007f04:	4b29      	ldr	r3, [pc, #164]	; (8007fac <LCD_Fill+0x10c>)
 8007f06:	222a      	movs	r2, #42	; 0x2a
 8007f08:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8007f0a:	4b28      	ldr	r3, [pc, #160]	; (8007fac <LCD_Fill+0x10c>)
 8007f0c:	222b      	movs	r2, #43	; 0x2b
 8007f0e:	819a      	strh	r2, [r3, #12]
		LCD_Fill(sx, sy, ex, ey, color);
 8007f10:	883c      	ldrh	r4, [r7, #0]
 8007f12:	887a      	ldrh	r2, [r7, #2]
 8007f14:	88b9      	ldrh	r1, [r7, #4]
 8007f16:	88f8      	ldrh	r0, [r7, #6]
 8007f18:	8c3b      	ldrh	r3, [r7, #32]
 8007f1a:	9300      	str	r3, [sp, #0]
 8007f1c:	4623      	mov	r3, r4
 8007f1e:	f7ff ffbf 	bl	8007ea0 <LCD_Fill>
		lcddev.dir = 1;
 8007f22:	4b22      	ldr	r3, [pc, #136]	; (8007fac <LCD_Fill+0x10c>)
 8007f24:	2201      	movs	r2, #1
 8007f26:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8007f28:	4b20      	ldr	r3, [pc, #128]	; (8007fac <LCD_Fill+0x10c>)
 8007f2a:	222b      	movs	r2, #43	; 0x2b
 8007f2c:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8007f2e:	4b1f      	ldr	r3, [pc, #124]	; (8007fac <LCD_Fill+0x10c>)
 8007f30:	222a      	movs	r2, #42	; 0x2a
 8007f32:	819a      	strh	r2, [r3, #12]
 8007f34:	e036      	b.n	8007fa4 <LCD_Fill+0x104>
	} else {
		xlen = ex - sx + 1;
 8007f36:	887a      	ldrh	r2, [r7, #2]
 8007f38:	88fb      	ldrh	r3, [r7, #6]
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	3301      	adds	r3, #1
 8007f40:	817b      	strh	r3, [r7, #10]
		for (i = sy; i <= ey; i++) {
 8007f42:	88bb      	ldrh	r3, [r7, #4]
 8007f44:	81fb      	strh	r3, [r7, #14]
 8007f46:	e029      	b.n	8007f9c <LCD_Fill+0xfc>
			LCD_SetCursor(sx, i);      				//设置光标位置
 8007f48:	89fa      	ldrh	r2, [r7, #14]
 8007f4a:	88fb      	ldrh	r3, [r7, #6]
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fb f886 	bl	8003060 <LCD_SetCursor>
			LCD_WriteRAM_Prepare();     			//开始写入GRAM	  
 8007f54:	f7fb f878 	bl	8003048 <LCD_WriteRAM_Prepare>
			for (j = 0; j < xlen; j++)
 8007f58:	2300      	movs	r3, #0
 8007f5a:	81bb      	strh	r3, [r7, #12]
 8007f5c:	e017      	b.n	8007f8e <LCD_Fill+0xee>
				LCD_WR_DATA(color);	//设置光标位置
 8007f5e:	4b14      	ldr	r3, [pc, #80]	; (8007fb0 <LCD_Fill+0x110>)
 8007f60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f64:	611a      	str	r2, [r3, #16]
 8007f66:	4b12      	ldr	r3, [pc, #72]	; (8007fb0 <LCD_Fill+0x110>)
 8007f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f6c:	615a      	str	r2, [r3, #20]
 8007f6e:	4a11      	ldr	r2, [pc, #68]	; (8007fb4 <LCD_Fill+0x114>)
 8007f70:	8c3b      	ldrh	r3, [r7, #32]
 8007f72:	60d3      	str	r3, [r2, #12]
 8007f74:	4b0e      	ldr	r3, [pc, #56]	; (8007fb0 <LCD_Fill+0x110>)
 8007f76:	2280      	movs	r2, #128	; 0x80
 8007f78:	615a      	str	r2, [r3, #20]
 8007f7a:	4b0d      	ldr	r3, [pc, #52]	; (8007fb0 <LCD_Fill+0x110>)
 8007f7c:	2280      	movs	r2, #128	; 0x80
 8007f7e:	611a      	str	r2, [r3, #16]
 8007f80:	4b0b      	ldr	r3, [pc, #44]	; (8007fb0 <LCD_Fill+0x110>)
 8007f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f86:	611a      	str	r2, [r3, #16]
			for (j = 0; j < xlen; j++)
 8007f88:	89bb      	ldrh	r3, [r7, #12]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	81bb      	strh	r3, [r7, #12]
 8007f8e:	89ba      	ldrh	r2, [r7, #12]
 8007f90:	897b      	ldrh	r3, [r7, #10]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d3e3      	bcc.n	8007f5e <LCD_Fill+0xbe>
		for (i = sy; i <= ey; i++) {
 8007f96:	89fb      	ldrh	r3, [r7, #14]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	81fb      	strh	r3, [r7, #14]
 8007f9c:	89fa      	ldrh	r2, [r7, #14]
 8007f9e:	883b      	ldrh	r3, [r7, #0]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d9d1      	bls.n	8007f48 <LCD_Fill+0xa8>
		}
	}
}
 8007fa4:	bf00      	nop
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd90      	pop	{r4, r7, pc}
 8007fac:	20000290 	.word	0x20000290
 8007fb0:	40011000 	.word	0x40011000
 8007fb4:	40010c00 	.word	0x40010c00

08007fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007fbc:	f7f9 f90a 	bl	80011d4 <HAL_Init>

  /* USER CODE BEGIN Init */
	LCD_Init();
 8007fc0:	f7fb ffde 	bl	8003f80 <LCD_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007fc4:	f000 f807 	bl	8007fd6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007fc8:	f7fa fed6 	bl	8002d78 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8007fcc:	f000 f99a 	bl	8008304 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // 开启场景
  Demo4_Routine();
 8007fd0:	f000 fcfe 	bl	80089d0 <Demo4_Routine>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 8007fd4:	e7fe      	b.n	8007fd4 <main+0x1c>

08007fd6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b090      	sub	sp, #64	; 0x40
 8007fda:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007fdc:	f107 0318 	add.w	r3, r7, #24
 8007fe0:	2228      	movs	r2, #40	; 0x28
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 ff87 	bl	8008ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007fea:	1d3b      	adds	r3, r7, #4
 8007fec:	2200      	movs	r2, #0
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	605a      	str	r2, [r3, #4]
 8007ff2:	609a      	str	r2, [r3, #8]
 8007ff4:	60da      	str	r2, [r3, #12]
 8007ff6:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008000:	2310      	movs	r3, #16
 8008002:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008004:	2300      	movs	r3, #0
 8008006:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008008:	f107 0318 	add.w	r3, r7, #24
 800800c:	4618      	mov	r0, r3
 800800e:	f7f9 fc3d 	bl	800188c <HAL_RCC_OscConfig>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d001      	beq.n	800801c <SystemClock_Config+0x46>
  {
    Error_Handler();
 8008018:	f000 f860 	bl	80080dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800801c:	230f      	movs	r3, #15
 800801e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8008020:	2300      	movs	r3, #0
 8008022:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008024:	2300      	movs	r3, #0
 8008026:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008028:	2300      	movs	r3, #0
 800802a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800802c:	2300      	movs	r3, #0
 800802e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8008030:	1d3b      	adds	r3, r7, #4
 8008032:	2100      	movs	r1, #0
 8008034:	4618      	mov	r0, r3
 8008036:	f7f9 fea9 	bl	8001d8c <HAL_RCC_ClockConfig>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8008040:	f000 f84c 	bl	80080dc <Error_Handler>
  }
}
 8008044:	bf00      	nop
 8008046:	3740      	adds	r7, #64	; 0x40
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	4603      	mov	r3, r0
 8008054:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8008056:	88fb      	ldrh	r3, [r7, #6]
 8008058:	2b20      	cmp	r3, #32
 800805a:	d005      	beq.n	8008068 <HAL_GPIO_EXTI_Callback+0x1c>
 800805c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008060:	d00e      	beq.n	8008080 <HAL_GPIO_EXTI_Callback+0x34>
 8008062:	2b01      	cmp	r3, #1
 8008064:	d018      	beq.n	8008098 <HAL_GPIO_EXTI_Callback+0x4c>
				HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
				HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
			}
			break;
		default:
			break;
 8008066:	e02d      	b.n	80080c4 <HAL_GPIO_EXTI_Callback+0x78>
			if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET)
 8008068:	2120      	movs	r1, #32
 800806a:	4818      	ldr	r0, [pc, #96]	; (80080cc <HAL_GPIO_EXTI_Callback+0x80>)
 800806c:	f7f9 fbae 	bl	80017cc <HAL_GPIO_ReadPin>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d121      	bne.n	80080ba <HAL_GPIO_EXTI_Callback+0x6e>
				Engine_KeyPressed = -1;
 8008076:	4b16      	ldr	r3, [pc, #88]	; (80080d0 <HAL_GPIO_EXTI_Callback+0x84>)
 8008078:	f04f 32ff 	mov.w	r2, #4294967295
 800807c:	601a      	str	r2, [r3, #0]
			break;
 800807e:	e01c      	b.n	80080ba <HAL_GPIO_EXTI_Callback+0x6e>
			if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET)
 8008080:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008084:	4813      	ldr	r0, [pc, #76]	; (80080d4 <HAL_GPIO_EXTI_Callback+0x88>)
 8008086:	f7f9 fba1 	bl	80017cc <HAL_GPIO_ReadPin>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d116      	bne.n	80080be <HAL_GPIO_EXTI_Callback+0x72>
				Engine_KeyPressed = 1;
 8008090:	4b0f      	ldr	r3, [pc, #60]	; (80080d0 <HAL_GPIO_EXTI_Callback+0x84>)
 8008092:	2201      	movs	r2, #1
 8008094:	601a      	str	r2, [r3, #0]
			break;
 8008096:	e012      	b.n	80080be <HAL_GPIO_EXTI_Callback+0x72>
			if (HAL_GPIO_ReadPin(KEY_WK_GPIO_Port, KEY_WK_Pin) == GPIO_PIN_SET)
 8008098:	2101      	movs	r1, #1
 800809a:	480e      	ldr	r0, [pc, #56]	; (80080d4 <HAL_GPIO_EXTI_Callback+0x88>)
 800809c:	f7f9 fb96 	bl	80017cc <HAL_GPIO_ReadPin>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d10d      	bne.n	80080c2 <HAL_GPIO_EXTI_Callback+0x76>
				HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 80080a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80080aa:	480a      	ldr	r0, [pc, #40]	; (80080d4 <HAL_GPIO_EXTI_Callback+0x88>)
 80080ac:	f7f9 fbbd 	bl	800182a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80080b0:	2104      	movs	r1, #4
 80080b2:	4809      	ldr	r0, [pc, #36]	; (80080d8 <HAL_GPIO_EXTI_Callback+0x8c>)
 80080b4:	f7f9 fbb9 	bl	800182a <HAL_GPIO_TogglePin>
			break;
 80080b8:	e003      	b.n	80080c2 <HAL_GPIO_EXTI_Callback+0x76>
			break;
 80080ba:	bf00      	nop
 80080bc:	e002      	b.n	80080c4 <HAL_GPIO_EXTI_Callback+0x78>
			break;
 80080be:	bf00      	nop
 80080c0:	e000      	b.n	80080c4 <HAL_GPIO_EXTI_Callback+0x78>
			break;
 80080c2:	bf00      	nop
	}
}
 80080c4:	bf00      	nop
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	40011000 	.word	0x40011000
 80080d0:	20000254 	.word	0x20000254
 80080d4:	40010800 	.word	0x40010800
 80080d8:	40011400 	.word	0x40011400

080080dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	printlnf("error");
 80080e0:	4802      	ldr	r0, [pc, #8]	; (80080ec <Error_Handler+0x10>)
 80080e2:	f000 f823 	bl	800812c <printlnf>
	/* User can add his own implementation to report the HAL error return state */
  /* USER CODE END Error_Handler_Debug */
}
 80080e6:	bf00      	nop
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop
 80080ec:	0800b010 	.word	0x0800b010

080080f0 <println>:
#include <stdarg.h>

char __msg[50];

void println(const char* str)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
	sprintf(__msg, "%s\n", str);
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	4909      	ldr	r1, [pc, #36]	; (8008120 <println+0x30>)
 80080fc:	4809      	ldr	r0, [pc, #36]	; (8008124 <println+0x34>)
 80080fe:	f001 fc17 	bl	8009930 <siprintf>
	HAL_UART_Transmit(&huart1, (unsigned char*)__msg, strlen(__msg), 0xffff);
 8008102:	4808      	ldr	r0, [pc, #32]	; (8008124 <println+0x34>)
 8008104:	f7f8 f890 	bl	8000228 <strlen>
 8008108:	4603      	mov	r3, r0
 800810a:	b29a      	uxth	r2, r3
 800810c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008110:	4904      	ldr	r1, [pc, #16]	; (8008124 <println+0x34>)
 8008112:	4805      	ldr	r0, [pc, #20]	; (8008128 <println+0x38>)
 8008114:	f7fa f823 	bl	800215e <HAL_UART_Transmit>
}
 8008118:	bf00      	nop
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	0800b018 	.word	0x0800b018
 8008124:	200002a0 	.word	0x200002a0
 8008128:	200002d4 	.word	0x200002d4

0800812c <printlnf>:

void printlnf(const char* fmt, ...)
{
 800812c:	b40f      	push	{r0, r1, r2, r3}
 800812e:	b580      	push	{r7, lr}
 8008130:	b082      	sub	sp, #8
 8008132:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, fmt);
 8008134:	f107 0314 	add.w	r3, r7, #20
 8008138:	607b      	str	r3, [r7, #4]
	vsprintf(__msg, fmt, args);
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	6939      	ldr	r1, [r7, #16]
 800813e:	4806      	ldr	r0, [pc, #24]	; (8008158 <printlnf+0x2c>)
 8008140:	f001 fc2c 	bl	800999c <vsiprintf>
	va_end(args);

	println(__msg);
 8008144:	4804      	ldr	r0, [pc, #16]	; (8008158 <printlnf+0x2c>)
 8008146:	f7ff ffd3 	bl	80080f0 <println>
}
 800814a:	bf00      	nop
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008154:	b004      	add	sp, #16
 8008156:	4770      	bx	lr
 8008158:	200002a0 	.word	0x200002a0

0800815c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008162:	4b16      	ldr	r3, [pc, #88]	; (80081bc <HAL_MspInit+0x60>)
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	4a15      	ldr	r2, [pc, #84]	; (80081bc <HAL_MspInit+0x60>)
 8008168:	f043 0301 	orr.w	r3, r3, #1
 800816c:	6193      	str	r3, [r2, #24]
 800816e:	4b13      	ldr	r3, [pc, #76]	; (80081bc <HAL_MspInit+0x60>)
 8008170:	699b      	ldr	r3, [r3, #24]
 8008172:	f003 0301 	and.w	r3, r3, #1
 8008176:	60bb      	str	r3, [r7, #8]
 8008178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800817a:	4b10      	ldr	r3, [pc, #64]	; (80081bc <HAL_MspInit+0x60>)
 800817c:	69db      	ldr	r3, [r3, #28]
 800817e:	4a0f      	ldr	r2, [pc, #60]	; (80081bc <HAL_MspInit+0x60>)
 8008180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008184:	61d3      	str	r3, [r2, #28]
 8008186:	4b0d      	ldr	r3, [pc, #52]	; (80081bc <HAL_MspInit+0x60>)
 8008188:	69db      	ldr	r3, [r3, #28]
 800818a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800818e:	607b      	str	r3, [r7, #4]
 8008190:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8008192:	2005      	movs	r0, #5
 8008194:	f7f9 f96e 	bl	8001474 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008198:	4b09      	ldr	r3, [pc, #36]	; (80081c0 <HAL_MspInit+0x64>)
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	60fb      	str	r3, [r7, #12]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80081a4:	60fb      	str	r3, [r7, #12]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80081ac:	60fb      	str	r3, [r7, #12]
 80081ae:	4a04      	ldr	r2, [pc, #16]	; (80081c0 <HAL_MspInit+0x64>)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80081b4:	bf00      	nop
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	40021000 	.word	0x40021000
 80081c0:	40010000 	.word	0x40010000

080081c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80081c4:	b480      	push	{r7}
 80081c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80081c8:	bf00      	nop
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bc80      	pop	{r7}
 80081ce:	4770      	bx	lr

080081d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80081d0:	b480      	push	{r7}
 80081d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80081d4:	e7fe      	b.n	80081d4 <HardFault_Handler+0x4>

080081d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80081d6:	b480      	push	{r7}
 80081d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80081da:	e7fe      	b.n	80081da <MemManage_Handler+0x4>

080081dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80081dc:	b480      	push	{r7}
 80081de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80081e0:	e7fe      	b.n	80081e0 <BusFault_Handler+0x4>

080081e2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80081e2:	b480      	push	{r7}
 80081e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80081e6:	e7fe      	b.n	80081e6 <UsageFault_Handler+0x4>

080081e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80081e8:	b480      	push	{r7}
 80081ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80081ec:	bf00      	nop
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bc80      	pop	{r7}
 80081f2:	4770      	bx	lr

080081f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80081f4:	b480      	push	{r7}
 80081f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80081f8:	bf00      	nop
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bc80      	pop	{r7}
 80081fe:	4770      	bx	lr

08008200 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008200:	b480      	push	{r7}
 8008202:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008204:	bf00      	nop
 8008206:	46bd      	mov	sp, r7
 8008208:	bc80      	pop	{r7}
 800820a:	4770      	bx	lr

0800820c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008210:	f7f9 f826 	bl	8001260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008214:	bf00      	nop
 8008216:	bd80      	pop	{r7, pc}

08008218 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800821c:	2001      	movs	r0, #1
 800821e:	f7f9 fb1d 	bl	800185c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8008222:	bf00      	nop
 8008224:	bd80      	pop	{r7, pc}

08008226 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800822a:	2020      	movs	r0, #32
 800822c:	f7f9 fb16 	bl	800185c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8008230:	bf00      	nop
 8008232:	bd80      	pop	{r7, pc}

08008234 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8008238:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800823c:	f7f9 fb0e 	bl	800185c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008240:	bf00      	nop
 8008242:	bd80      	pop	{r7, pc}

08008244 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800824c:	4b11      	ldr	r3, [pc, #68]	; (8008294 <_sbrk+0x50>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d102      	bne.n	800825a <_sbrk+0x16>
		heap_end = &end;
 8008254:	4b0f      	ldr	r3, [pc, #60]	; (8008294 <_sbrk+0x50>)
 8008256:	4a10      	ldr	r2, [pc, #64]	; (8008298 <_sbrk+0x54>)
 8008258:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800825a:	4b0e      	ldr	r3, [pc, #56]	; (8008294 <_sbrk+0x50>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008260:	4b0c      	ldr	r3, [pc, #48]	; (8008294 <_sbrk+0x50>)
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4413      	add	r3, r2
 8008268:	466a      	mov	r2, sp
 800826a:	4293      	cmp	r3, r2
 800826c:	d907      	bls.n	800827e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800826e:	f000 fe09 	bl	8008e84 <__errno>
 8008272:	4602      	mov	r2, r0
 8008274:	230c      	movs	r3, #12
 8008276:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008278:	f04f 33ff 	mov.w	r3, #4294967295
 800827c:	e006      	b.n	800828c <_sbrk+0x48>
	}

	heap_end += incr;
 800827e:	4b05      	ldr	r3, [pc, #20]	; (8008294 <_sbrk+0x50>)
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4413      	add	r3, r2
 8008286:	4a03      	ldr	r2, [pc, #12]	; (8008294 <_sbrk+0x50>)
 8008288:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800828a:	68fb      	ldr	r3, [r7, #12]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	2000023c 	.word	0x2000023c
 8008298:	20000320 	.word	0x20000320

0800829c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800829c:	b480      	push	{r7}
 800829e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80082a0:	4b15      	ldr	r3, [pc, #84]	; (80082f8 <SystemInit+0x5c>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a14      	ldr	r2, [pc, #80]	; (80082f8 <SystemInit+0x5c>)
 80082a6:	f043 0301 	orr.w	r3, r3, #1
 80082aa:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80082ac:	4b12      	ldr	r3, [pc, #72]	; (80082f8 <SystemInit+0x5c>)
 80082ae:	685a      	ldr	r2, [r3, #4]
 80082b0:	4911      	ldr	r1, [pc, #68]	; (80082f8 <SystemInit+0x5c>)
 80082b2:	4b12      	ldr	r3, [pc, #72]	; (80082fc <SystemInit+0x60>)
 80082b4:	4013      	ands	r3, r2
 80082b6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80082b8:	4b0f      	ldr	r3, [pc, #60]	; (80082f8 <SystemInit+0x5c>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a0e      	ldr	r2, [pc, #56]	; (80082f8 <SystemInit+0x5c>)
 80082be:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80082c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082c6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80082c8:	4b0b      	ldr	r3, [pc, #44]	; (80082f8 <SystemInit+0x5c>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a0a      	ldr	r2, [pc, #40]	; (80082f8 <SystemInit+0x5c>)
 80082ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082d2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80082d4:	4b08      	ldr	r3, [pc, #32]	; (80082f8 <SystemInit+0x5c>)
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	4a07      	ldr	r2, [pc, #28]	; (80082f8 <SystemInit+0x5c>)
 80082da:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80082de:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80082e0:	4b05      	ldr	r3, [pc, #20]	; (80082f8 <SystemInit+0x5c>)
 80082e2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80082e6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80082e8:	4b05      	ldr	r3, [pc, #20]	; (8008300 <SystemInit+0x64>)
 80082ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80082ee:	609a      	str	r2, [r3, #8]
#endif 
}
 80082f0:	bf00      	nop
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bc80      	pop	{r7}
 80082f6:	4770      	bx	lr
 80082f8:	40021000 	.word	0x40021000
 80082fc:	f8ff0000 	.word	0xf8ff0000
 8008300:	e000ed00 	.word	0xe000ed00

08008304 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8008308:	4b11      	ldr	r3, [pc, #68]	; (8008350 <MX_USART1_UART_Init+0x4c>)
 800830a:	4a12      	ldr	r2, [pc, #72]	; (8008354 <MX_USART1_UART_Init+0x50>)
 800830c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800830e:	4b10      	ldr	r3, [pc, #64]	; (8008350 <MX_USART1_UART_Init+0x4c>)
 8008310:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008314:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008316:	4b0e      	ldr	r3, [pc, #56]	; (8008350 <MX_USART1_UART_Init+0x4c>)
 8008318:	2200      	movs	r2, #0
 800831a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800831c:	4b0c      	ldr	r3, [pc, #48]	; (8008350 <MX_USART1_UART_Init+0x4c>)
 800831e:	2200      	movs	r2, #0
 8008320:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008322:	4b0b      	ldr	r3, [pc, #44]	; (8008350 <MX_USART1_UART_Init+0x4c>)
 8008324:	2200      	movs	r2, #0
 8008326:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008328:	4b09      	ldr	r3, [pc, #36]	; (8008350 <MX_USART1_UART_Init+0x4c>)
 800832a:	220c      	movs	r2, #12
 800832c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800832e:	4b08      	ldr	r3, [pc, #32]	; (8008350 <MX_USART1_UART_Init+0x4c>)
 8008330:	2200      	movs	r2, #0
 8008332:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008334:	4b06      	ldr	r3, [pc, #24]	; (8008350 <MX_USART1_UART_Init+0x4c>)
 8008336:	2200      	movs	r2, #0
 8008338:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800833a:	4805      	ldr	r0, [pc, #20]	; (8008350 <MX_USART1_UART_Init+0x4c>)
 800833c:	f7f9 fec2 	bl	80020c4 <HAL_UART_Init>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008346:	f7ff fec9 	bl	80080dc <Error_Handler>
  }

}
 800834a:	bf00      	nop
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	200002d4 	.word	0x200002d4
 8008354:	40013800 	.word	0x40013800

08008358 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b088      	sub	sp, #32
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008360:	f107 0310 	add.w	r3, r7, #16
 8008364:	2200      	movs	r2, #0
 8008366:	601a      	str	r2, [r3, #0]
 8008368:	605a      	str	r2, [r3, #4]
 800836a:	609a      	str	r2, [r3, #8]
 800836c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a1c      	ldr	r2, [pc, #112]	; (80083e4 <HAL_UART_MspInit+0x8c>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d131      	bne.n	80083dc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008378:	4b1b      	ldr	r3, [pc, #108]	; (80083e8 <HAL_UART_MspInit+0x90>)
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	4a1a      	ldr	r2, [pc, #104]	; (80083e8 <HAL_UART_MspInit+0x90>)
 800837e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008382:	6193      	str	r3, [r2, #24]
 8008384:	4b18      	ldr	r3, [pc, #96]	; (80083e8 <HAL_UART_MspInit+0x90>)
 8008386:	699b      	ldr	r3, [r3, #24]
 8008388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800838c:	60fb      	str	r3, [r7, #12]
 800838e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008390:	4b15      	ldr	r3, [pc, #84]	; (80083e8 <HAL_UART_MspInit+0x90>)
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	4a14      	ldr	r2, [pc, #80]	; (80083e8 <HAL_UART_MspInit+0x90>)
 8008396:	f043 0304 	orr.w	r3, r3, #4
 800839a:	6193      	str	r3, [r2, #24]
 800839c:	4b12      	ldr	r3, [pc, #72]	; (80083e8 <HAL_UART_MspInit+0x90>)
 800839e:	699b      	ldr	r3, [r3, #24]
 80083a0:	f003 0304 	and.w	r3, r3, #4
 80083a4:	60bb      	str	r3, [r7, #8]
 80083a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80083a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083ae:	2302      	movs	r3, #2
 80083b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80083b2:	2303      	movs	r3, #3
 80083b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083b6:	f107 0310 	add.w	r3, r7, #16
 80083ba:	4619      	mov	r1, r3
 80083bc:	480b      	ldr	r0, [pc, #44]	; (80083ec <HAL_UART_MspInit+0x94>)
 80083be:	f7f9 f89b 	bl	80014f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80083c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083c8:	2300      	movs	r3, #0
 80083ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083cc:	2300      	movs	r3, #0
 80083ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083d0:	f107 0310 	add.w	r3, r7, #16
 80083d4:	4619      	mov	r1, r3
 80083d6:	4805      	ldr	r0, [pc, #20]	; (80083ec <HAL_UART_MspInit+0x94>)
 80083d8:	f7f9 f88e 	bl	80014f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80083dc:	bf00      	nop
 80083de:	3720      	adds	r7, #32
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	40013800 	.word	0x40013800
 80083e8:	40021000 	.word	0x40021000
 80083ec:	40010800 	.word	0x40010800

080083f0 <Demo2_Init>:
void Demo2_Init(
	Demo2_GameObject_Enemy* self,
	unsigned life,
	uint16_t pos_x, uint16_t pos_y, 
	uint16_t collider
){
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b088      	sub	sp, #32
 80083f4:	af04      	add	r7, sp, #16
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	4611      	mov	r1, r2
 80083fc:	461a      	mov	r2, r3
 80083fe:	460b      	mov	r3, r1
 8008400:	80fb      	strh	r3, [r7, #6]
 8008402:	4613      	mov	r3, r2
 8008404:	80bb      	strh	r3, [r7, #4]
	GameObject_Enemy_Init(
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	88b9      	ldrh	r1, [r7, #4]
 800840a:	88fa      	ldrh	r2, [r7, #6]
 800840c:	4b07      	ldr	r3, [pc, #28]	; (800842c <Demo2_Init+0x3c>)
 800840e:	9303      	str	r3, [sp, #12]
 8008410:	2304      	movs	r3, #4
 8008412:	9302      	str	r3, [sp, #8]
 8008414:	2304      	movs	r3, #4
 8008416:	9301      	str	r3, [sp, #4]
 8008418:	8b3b      	ldrh	r3, [r7, #24]
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	460b      	mov	r3, r1
 800841e:	68b9      	ldr	r1, [r7, #8]
 8008420:	f7fa fbc9 	bl	8002bb6 <GameObject_Enemy_Init>
		pos_x, pos_y,
		collider,
		4, 4,
		Img_RedBlock_4x4
	);
}
 8008424:	bf00      	nop
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	2000000c 	.word	0x2000000c

08008430 <Demo2_OnCreate>:

void Demo2_OnCreate(Demo2_GameObject_Enemy* self)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
	println("Demo2 create");
 8008438:	4805      	ldr	r0, [pc, #20]	; (8008450 <Demo2_OnCreate+0x20>)
 800843a:	f7ff fe59 	bl	80080f0 <println>
	GameObject_Enemy_OnCreate(&self->base);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4618      	mov	r0, r3
 8008442:	f7fa fbd7 	bl	8002bf4 <GameObject_Enemy_OnCreate>
}
 8008446:	bf00      	nop
 8008448:	3708      	adds	r7, #8
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	0800b01c 	.word	0x0800b01c

08008454 <Demo2_OnUpdate>:

void Demo2_OnUpdate(Demo2_GameObject_Enemy* self)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
	GameObject_Enemy_OnUpdate(&self->base);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	4618      	mov	r0, r3
 8008460:	f7fa fbd4 	bl	8002c0c <GameObject_Enemy_OnUpdate>
}
 8008464:	bf00      	nop
 8008466:	3708      	adds	r7, #8
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <Demo2_OnDestroy>:

void Demo2_OnDestroy(Demo2_GameObject_Enemy* self)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
	free(self);
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fd37 	bl	8008ee8 <free>
}
 800847a:	bf00      	nop
 800847c:	3708      	adds	r7, #8
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <Demo2_OnRender>:

void Demo2_OnRender(Demo2_GameObject_Enemy* self, Color** screen)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b082      	sub	sp, #8
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	6039      	str	r1, [r7, #0]
	GameObject_Enemy_OnRender(&self->base, screen);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	4618      	mov	r0, r3
 8008492:	f7fa fbce 	bl	8002c32 <GameObject_Enemy_OnRender>
}
 8008496:	bf00      	nop
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
	...

080084a0 <Remo_Init>:
void Remo_Init(
	// 指向自身的指针
	Remo_GameObject_Self* self,
	// 初始横纵坐标
	uint16_t pos_x, uint16_t pos_y
){
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b086      	sub	sp, #24
 80084a4:	af04      	add	r7, sp, #16
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	460b      	mov	r3, r1
 80084aa:	807b      	strh	r3, [r7, #2]
 80084ac:	4613      	mov	r3, r2
 80084ae:	803b      	strh	r3, [r7, #0]
	GameObject_Self_Init(
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	8839      	ldrh	r1, [r7, #0]
 80084b4:	887a      	ldrh	r2, [r7, #2]
 80084b6:	4b09      	ldr	r3, [pc, #36]	; (80084dc <Remo_Init+0x3c>)
 80084b8:	9303      	str	r3, [sp, #12]
 80084ba:	2304      	movs	r3, #4
 80084bc:	9302      	str	r3, [sp, #8]
 80084be:	2304      	movs	r3, #4
 80084c0:	9301      	str	r3, [sp, #4]
 80084c2:	2301      	movs	r3, #1
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	460b      	mov	r3, r1
 80084c8:	2101      	movs	r1, #1
 80084ca:	f7fa fbc0 	bl	8002c4e <GameObject_Self_Init>
		pos_x, pos_y,
		1,
		4, 4,
		Img_GreenBlock_4x4
	);
	self->fire_rank = 4;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2204      	movs	r2, #4
 80084d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80084d4:	bf00      	nop
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	2000002c 	.word	0x2000002c

080084e0 <Remo_OnCreate>:

void Remo_OnCreate(Remo_GameObject_Self* self)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
	GameObject_Self_OnCreate(&self->base);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fa fbce 	bl	8002c8c <GameObject_Self_OnCreate>
}
 80084f0:	bf00      	nop
 80084f2:	3708      	adds	r7, #8
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <Remo_OnUpdate>:

void Remo_OnUpdate(Remo_GameObject_Self* self)
{
 80084f8:	b590      	push	{r4, r7, lr}
 80084fa:	b087      	sub	sp, #28
 80084fc:	af02      	add	r7, sp, #8
 80084fe:	6078      	str	r0, [r7, #4]
	RoyalCoin_GameObject_Bullet* bullet;
	GameEvent* e;

	if (Game_KillCount > 20 && self->fire_rank <= 4)
 8008500:	4ba7      	ldr	r3, [pc, #668]	; (80087a0 <Remo_OnUpdate+0x2a8>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2b14      	cmp	r3, #20
 8008506:	d90d      	bls.n	8008524 <Remo_OnUpdate+0x2c>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850c:	2b04      	cmp	r3, #4
 800850e:	d809      	bhi.n	8008524 <Remo_OnUpdate+0x2c>
	{
		self->fire_rank++;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008514:	1c5a      	adds	r2, r3, #1
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	625a      	str	r2, [r3, #36]	; 0x24
		Game_KillCount -= 20;
 800851a:	4ba1      	ldr	r3, [pc, #644]	; (80087a0 <Remo_OnUpdate+0x2a8>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	3b14      	subs	r3, #20
 8008520:	4a9f      	ldr	r2, [pc, #636]	; (80087a0 <Remo_OnUpdate+0x2a8>)
 8008522:	6013      	str	r3, [r2, #0]
	}
	// fire
	if (GetTime()%2)
 8008524:	f000 fc3e 	bl	8008da4 <GetTime>
 8008528:	4603      	mov	r3, r0
 800852a:	f003 0301 	and.w	r3, r3, #1
 800852e:	2b00      	cmp	r3, #0
 8008530:	f000 8163 	beq.w	80087fa <Remo_OnUpdate+0x302>
	{
		if (self->fire_rank == 1 || self->fire_rank == 4) // basic
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008538:	2b01      	cmp	r3, #1
 800853a:	d003      	beq.n	8008544 <Remo_OnUpdate+0x4c>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008540:	2b04      	cmp	r3, #4
 8008542:	d127      	bne.n	8008594 <Remo_OnUpdate+0x9c>
		{
			bullet = malloc(sizeof(RoyalCoin_GameObject_Bullet));
 8008544:	2028      	movs	r0, #40	; 0x28
 8008546:	f000 fcc7 	bl	8008ed8 <malloc>
 800854a:	4603      	mov	r3, r0
 800854c:	60fb      	str	r3, [r7, #12]
			RoyalCoin_Init(bullet, self->base.base.pos_x, self->base.base.pos_y, 0.0f, -3.5f);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	4618      	mov	r0, r3
 8008554:	f7f8 fe1e 	bl	8001194 <__aeabi_f2uiz>
 8008558:	4603      	mov	r3, r0
 800855a:	b29c      	uxth	r4, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	4618      	mov	r0, r3
 8008562:	f7f8 fe17 	bl	8001194 <__aeabi_f2uiz>
 8008566:	4603      	mov	r3, r0
 8008568:	b29a      	uxth	r2, r3
 800856a:	4b8e      	ldr	r3, [pc, #568]	; (80087a4 <Remo_OnUpdate+0x2ac>)
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	f04f 0300 	mov.w	r3, #0
 8008572:	4621      	mov	r1, r4
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f000 f979 	bl	800886c <RoyalCoin_Init>
			e = RegistGameEvent(
 800857a:	4b8b      	ldr	r3, [pc, #556]	; (80087a8 <Remo_OnUpdate+0x2b0>)
 800857c:	9300      	str	r3, [sp, #0]
 800857e:	4b8b      	ldr	r3, [pc, #556]	; (80087ac <Remo_OnUpdate+0x2b4>)
 8008580:	4a8b      	ldr	r2, [pc, #556]	; (80087b0 <Remo_OnUpdate+0x2b8>)
 8008582:	498c      	ldr	r1, [pc, #560]	; (80087b4 <Remo_OnUpdate+0x2bc>)
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f7fa fa0b 	bl	80029a0 <RegistGameEvent>
 800858a:	60b8      	str	r0, [r7, #8]
				bullet,
				RoyalCoin_OnCreate, RoyalCoin_OnUpdate,
				RoyalCoin_OnDestroy, RoyalCoin_OnRender
			);
			Push(&Engine_BulletEvents, e);
 800858c:	68b9      	ldr	r1, [r7, #8]
 800858e:	488a      	ldr	r0, [pc, #552]	; (80087b8 <Remo_OnUpdate+0x2c0>)
 8008590:	f000 fa4c 	bl	8008a2c <Push>
		}
		if (self->fire_rank >= 2) // Double bullets
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008598:	2b01      	cmp	r3, #1
 800859a:	f240 812e 	bls.w	80087fa <Remo_OnUpdate+0x302>
		{
			bullet = malloc(sizeof(RoyalCoin_GameObject_Bullet));
 800859e:	2028      	movs	r0, #40	; 0x28
 80085a0:	f000 fc9a 	bl	8008ed8 <malloc>
 80085a4:	4603      	mov	r3, r0
 80085a6:	60fb      	str	r3, [r7, #12]
			RoyalCoin_Init(bullet, self->base.base.pos_x - 1, self->base.base.pos_y, 0.0f, -3.5f);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7f8 faf9 	bl	8000ba8 <__aeabi_fsub>
 80085b6:	4603      	mov	r3, r0
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7f8 fdeb 	bl	8001194 <__aeabi_f2uiz>
 80085be:	4603      	mov	r3, r0
 80085c0:	b29c      	uxth	r4, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7f8 fde4 	bl	8001194 <__aeabi_f2uiz>
 80085cc:	4603      	mov	r3, r0
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	4b74      	ldr	r3, [pc, #464]	; (80087a4 <Remo_OnUpdate+0x2ac>)
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	f04f 0300 	mov.w	r3, #0
 80085d8:	4621      	mov	r1, r4
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f000 f946 	bl	800886c <RoyalCoin_Init>
			e = RegistGameEvent(
 80085e0:	4b71      	ldr	r3, [pc, #452]	; (80087a8 <Remo_OnUpdate+0x2b0>)
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	4b71      	ldr	r3, [pc, #452]	; (80087ac <Remo_OnUpdate+0x2b4>)
 80085e6:	4a72      	ldr	r2, [pc, #456]	; (80087b0 <Remo_OnUpdate+0x2b8>)
 80085e8:	4972      	ldr	r1, [pc, #456]	; (80087b4 <Remo_OnUpdate+0x2bc>)
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f7fa f9d8 	bl	80029a0 <RegistGameEvent>
 80085f0:	60b8      	str	r0, [r7, #8]
				bullet,
				RoyalCoin_OnCreate, RoyalCoin_OnUpdate,
				RoyalCoin_OnDestroy, RoyalCoin_OnRender
			);
			Push(&Engine_BulletEvents, e);
 80085f2:	68b9      	ldr	r1, [r7, #8]
 80085f4:	4870      	ldr	r0, [pc, #448]	; (80087b8 <Remo_OnUpdate+0x2c0>)
 80085f6:	f000 fa19 	bl	8008a2c <Push>

			bullet = malloc(sizeof(RoyalCoin_GameObject_Bullet));
 80085fa:	2028      	movs	r0, #40	; 0x28
 80085fc:	f000 fc6c 	bl	8008ed8 <malloc>
 8008600:	4603      	mov	r3, r0
 8008602:	60fb      	str	r3, [r7, #12]
			RoyalCoin_Init(bullet, self->base.base.pos_x + 1, self->base.base.pos_y, 0.0f, -3.5f);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800860c:	4618      	mov	r0, r3
 800860e:	f7f8 facd 	bl	8000bac <__addsf3>
 8008612:	4603      	mov	r3, r0
 8008614:	4618      	mov	r0, r3
 8008616:	f7f8 fdbd 	bl	8001194 <__aeabi_f2uiz>
 800861a:	4603      	mov	r3, r0
 800861c:	b29c      	uxth	r4, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	4618      	mov	r0, r3
 8008624:	f7f8 fdb6 	bl	8001194 <__aeabi_f2uiz>
 8008628:	4603      	mov	r3, r0
 800862a:	b29a      	uxth	r2, r3
 800862c:	4b5d      	ldr	r3, [pc, #372]	; (80087a4 <Remo_OnUpdate+0x2ac>)
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	f04f 0300 	mov.w	r3, #0
 8008634:	4621      	mov	r1, r4
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f000 f918 	bl	800886c <RoyalCoin_Init>
			e = RegistGameEvent(
 800863c:	4b5a      	ldr	r3, [pc, #360]	; (80087a8 <Remo_OnUpdate+0x2b0>)
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	4b5a      	ldr	r3, [pc, #360]	; (80087ac <Remo_OnUpdate+0x2b4>)
 8008642:	4a5b      	ldr	r2, [pc, #364]	; (80087b0 <Remo_OnUpdate+0x2b8>)
 8008644:	495b      	ldr	r1, [pc, #364]	; (80087b4 <Remo_OnUpdate+0x2bc>)
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f7fa f9aa 	bl	80029a0 <RegistGameEvent>
 800864c:	60b8      	str	r0, [r7, #8]
				bullet,
				RoyalCoin_OnCreate, RoyalCoin_OnUpdate,
				RoyalCoin_OnDestroy, RoyalCoin_OnRender
			);
			Push(&Engine_BulletEvents, e);
 800864e:	68b9      	ldr	r1, [r7, #8]
 8008650:	4859      	ldr	r0, [pc, #356]	; (80087b8 <Remo_OnUpdate+0x2c0>)
 8008652:	f000 f9eb 	bl	8008a2c <Push>

			if (self->fire_rank >= 3) // Side bullets
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865a:	2b02      	cmp	r3, #2
 800865c:	d95a      	bls.n	8008714 <Remo_OnUpdate+0x21c>
			{
				bullet = malloc(sizeof(RoyalCoin_GameObject_Bullet));
 800865e:	2028      	movs	r0, #40	; 0x28
 8008660:	f000 fc3a 	bl	8008ed8 <malloc>
 8008664:	4603      	mov	r3, r0
 8008666:	60fb      	str	r3, [r7, #12]
				RoyalCoin_Init(bullet, self->base.base.pos_x - 1, self->base.base.pos_y, -1.0f, -3.0f);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008670:	4618      	mov	r0, r3
 8008672:	f7f8 fa99 	bl	8000ba8 <__aeabi_fsub>
 8008676:	4603      	mov	r3, r0
 8008678:	4618      	mov	r0, r3
 800867a:	f7f8 fd8b 	bl	8001194 <__aeabi_f2uiz>
 800867e:	4603      	mov	r3, r0
 8008680:	b29c      	uxth	r4, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	4618      	mov	r0, r3
 8008688:	f7f8 fd84 	bl	8001194 <__aeabi_f2uiz>
 800868c:	4603      	mov	r3, r0
 800868e:	b29a      	uxth	r2, r3
 8008690:	4b4a      	ldr	r3, [pc, #296]	; (80087bc <Remo_OnUpdate+0x2c4>)
 8008692:	9300      	str	r3, [sp, #0]
 8008694:	4b4a      	ldr	r3, [pc, #296]	; (80087c0 <Remo_OnUpdate+0x2c8>)
 8008696:	4621      	mov	r1, r4
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f000 f8e7 	bl	800886c <RoyalCoin_Init>
				e = RegistGameEvent(
 800869e:	4b42      	ldr	r3, [pc, #264]	; (80087a8 <Remo_OnUpdate+0x2b0>)
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	4b42      	ldr	r3, [pc, #264]	; (80087ac <Remo_OnUpdate+0x2b4>)
 80086a4:	4a42      	ldr	r2, [pc, #264]	; (80087b0 <Remo_OnUpdate+0x2b8>)
 80086a6:	4943      	ldr	r1, [pc, #268]	; (80087b4 <Remo_OnUpdate+0x2bc>)
 80086a8:	68f8      	ldr	r0, [r7, #12]
 80086aa:	f7fa f979 	bl	80029a0 <RegistGameEvent>
 80086ae:	60b8      	str	r0, [r7, #8]
					bullet,
					RoyalCoin_OnCreate, RoyalCoin_OnUpdate,
					RoyalCoin_OnDestroy, RoyalCoin_OnRender
				);
				Push(&Engine_BulletEvents, e);
 80086b0:	68b9      	ldr	r1, [r7, #8]
 80086b2:	4841      	ldr	r0, [pc, #260]	; (80087b8 <Remo_OnUpdate+0x2c0>)
 80086b4:	f000 f9ba 	bl	8008a2c <Push>

				bullet = malloc(sizeof(RoyalCoin_GameObject_Bullet));
 80086b8:	2028      	movs	r0, #40	; 0x28
 80086ba:	f000 fc0d 	bl	8008ed8 <malloc>
 80086be:	4603      	mov	r3, r0
 80086c0:	60fb      	str	r3, [r7, #12]
				RoyalCoin_Init(bullet, self->base.base.pos_x + 1, self->base.base.pos_y, 1.0f, -3.0f);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7f8 fa6e 	bl	8000bac <__addsf3>
 80086d0:	4603      	mov	r3, r0
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7f8 fd5e 	bl	8001194 <__aeabi_f2uiz>
 80086d8:	4603      	mov	r3, r0
 80086da:	b29c      	uxth	r4, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7f8 fd57 	bl	8001194 <__aeabi_f2uiz>
 80086e6:	4603      	mov	r3, r0
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	4b34      	ldr	r3, [pc, #208]	; (80087bc <Remo_OnUpdate+0x2c4>)
 80086ec:	9300      	str	r3, [sp, #0]
 80086ee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80086f2:	4621      	mov	r1, r4
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f000 f8b9 	bl	800886c <RoyalCoin_Init>
				e = RegistGameEvent(
 80086fa:	4b2b      	ldr	r3, [pc, #172]	; (80087a8 <Remo_OnUpdate+0x2b0>)
 80086fc:	9300      	str	r3, [sp, #0]
 80086fe:	4b2b      	ldr	r3, [pc, #172]	; (80087ac <Remo_OnUpdate+0x2b4>)
 8008700:	4a2b      	ldr	r2, [pc, #172]	; (80087b0 <Remo_OnUpdate+0x2b8>)
 8008702:	492c      	ldr	r1, [pc, #176]	; (80087b4 <Remo_OnUpdate+0x2bc>)
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	f7fa f94b 	bl	80029a0 <RegistGameEvent>
 800870a:	60b8      	str	r0, [r7, #8]
					bullet,
					RoyalCoin_OnCreate, RoyalCoin_OnUpdate,
					RoyalCoin_OnDestroy, RoyalCoin_OnRender
				);
				Push(&Engine_BulletEvents, e);
 800870c:	68b9      	ldr	r1, [r7, #8]
 800870e:	482a      	ldr	r0, [pc, #168]	; (80087b8 <Remo_OnUpdate+0x2c0>)
 8008710:	f000 f98c 	bl	8008a2c <Push>
			}

			if (self->fire_rank == 4) // Full side
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008718:	2b04      	cmp	r3, #4
 800871a:	d16e      	bne.n	80087fa <Remo_OnUpdate+0x302>
			{
				bullet = malloc(sizeof(RoyalCoin_GameObject_Bullet));
 800871c:	2028      	movs	r0, #40	; 0x28
 800871e:	f000 fbdb 	bl	8008ed8 <malloc>
 8008722:	4603      	mov	r3, r0
 8008724:	60fb      	str	r3, [r7, #12]
				RoyalCoin_Init(bullet, self->base.base.pos_x - 2, self->base.base.pos_y, -1.0f, -3.0f);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800872e:	4618      	mov	r0, r3
 8008730:	f7f8 fa3a 	bl	8000ba8 <__aeabi_fsub>
 8008734:	4603      	mov	r3, r0
 8008736:	4618      	mov	r0, r3
 8008738:	f7f8 fd2c 	bl	8001194 <__aeabi_f2uiz>
 800873c:	4603      	mov	r3, r0
 800873e:	b29c      	uxth	r4, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	4618      	mov	r0, r3
 8008746:	f7f8 fd25 	bl	8001194 <__aeabi_f2uiz>
 800874a:	4603      	mov	r3, r0
 800874c:	b29a      	uxth	r2, r3
 800874e:	4b1b      	ldr	r3, [pc, #108]	; (80087bc <Remo_OnUpdate+0x2c4>)
 8008750:	9300      	str	r3, [sp, #0]
 8008752:	4b1b      	ldr	r3, [pc, #108]	; (80087c0 <Remo_OnUpdate+0x2c8>)
 8008754:	4621      	mov	r1, r4
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f000 f888 	bl	800886c <RoyalCoin_Init>
				e = RegistGameEvent(
 800875c:	4b12      	ldr	r3, [pc, #72]	; (80087a8 <Remo_OnUpdate+0x2b0>)
 800875e:	9300      	str	r3, [sp, #0]
 8008760:	4b12      	ldr	r3, [pc, #72]	; (80087ac <Remo_OnUpdate+0x2b4>)
 8008762:	4a13      	ldr	r2, [pc, #76]	; (80087b0 <Remo_OnUpdate+0x2b8>)
 8008764:	4913      	ldr	r1, [pc, #76]	; (80087b4 <Remo_OnUpdate+0x2bc>)
 8008766:	68f8      	ldr	r0, [r7, #12]
 8008768:	f7fa f91a 	bl	80029a0 <RegistGameEvent>
 800876c:	60b8      	str	r0, [r7, #8]
					bullet,
					RoyalCoin_OnCreate, RoyalCoin_OnUpdate,
					RoyalCoin_OnDestroy, RoyalCoin_OnRender
				);
				Push(&Engine_BulletEvents, e);
 800876e:	68b9      	ldr	r1, [r7, #8]
 8008770:	4811      	ldr	r0, [pc, #68]	; (80087b8 <Remo_OnUpdate+0x2c0>)
 8008772:	f000 f95b 	bl	8008a2c <Push>

				bullet = malloc(sizeof(RoyalCoin_GameObject_Bullet));
 8008776:	2028      	movs	r0, #40	; 0x28
 8008778:	f000 fbae 	bl	8008ed8 <malloc>
 800877c:	4603      	mov	r3, r0
 800877e:	60fb      	str	r3, [r7, #12]
				RoyalCoin_Init(bullet, self->base.base.pos_x + 2, self->base.base.pos_y, 1.0f, -3.0f);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008788:	4618      	mov	r0, r3
 800878a:	f7f8 fa0f 	bl	8000bac <__addsf3>
 800878e:	4603      	mov	r3, r0
 8008790:	4618      	mov	r0, r3
 8008792:	f7f8 fcff 	bl	8001194 <__aeabi_f2uiz>
 8008796:	4603      	mov	r3, r0
 8008798:	b29c      	uxth	r4, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	e012      	b.n	80087c4 <Remo_OnUpdate+0x2cc>
 800879e:	bf00      	nop
 80087a0:	20000250 	.word	0x20000250
 80087a4:	c0600000 	.word	0xc0600000
 80087a8:	080088ff 	.word	0x080088ff
 80087ac:	080088e9 	.word	0x080088e9
 80087b0:	080088d1 	.word	0x080088d1
 80087b4:	080088b9 	.word	0x080088b9
 80087b8:	20000288 	.word	0x20000288
 80087bc:	c0400000 	.word	0xc0400000
 80087c0:	bf800000 	.word	0xbf800000
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7f8 fce4 	bl	8001194 <__aeabi_f2uiz>
 80087cc:	4603      	mov	r3, r0
 80087ce:	b29a      	uxth	r2, r3
 80087d0:	4b0e      	ldr	r3, [pc, #56]	; (800880c <Remo_OnUpdate+0x314>)
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80087d8:	4621      	mov	r1, r4
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f000 f846 	bl	800886c <RoyalCoin_Init>
				e = RegistGameEvent(
 80087e0:	4b0b      	ldr	r3, [pc, #44]	; (8008810 <Remo_OnUpdate+0x318>)
 80087e2:	9300      	str	r3, [sp, #0]
 80087e4:	4b0b      	ldr	r3, [pc, #44]	; (8008814 <Remo_OnUpdate+0x31c>)
 80087e6:	4a0c      	ldr	r2, [pc, #48]	; (8008818 <Remo_OnUpdate+0x320>)
 80087e8:	490c      	ldr	r1, [pc, #48]	; (800881c <Remo_OnUpdate+0x324>)
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f7fa f8d8 	bl	80029a0 <RegistGameEvent>
 80087f0:	60b8      	str	r0, [r7, #8]
					bullet,
					RoyalCoin_OnCreate, RoyalCoin_OnUpdate,
					RoyalCoin_OnDestroy, RoyalCoin_OnRender
				);
				Push(&Engine_BulletEvents, e);
 80087f2:	68b9      	ldr	r1, [r7, #8]
 80087f4:	480a      	ldr	r0, [pc, #40]	; (8008820 <Remo_OnUpdate+0x328>)
 80087f6:	f000 f919 	bl	8008a2c <Push>
			}
		}
	}	


	GameObject_Self_OnUpdate(&self->base);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7fa fa51 	bl	8002ca4 <GameObject_Self_OnUpdate>
}
 8008802:	bf00      	nop
 8008804:	3714      	adds	r7, #20
 8008806:	46bd      	mov	sp, r7
 8008808:	bd90      	pop	{r4, r7, pc}
 800880a:	bf00      	nop
 800880c:	c0400000 	.word	0xc0400000
 8008810:	080088ff 	.word	0x080088ff
 8008814:	080088e9 	.word	0x080088e9
 8008818:	080088d1 	.word	0x080088d1
 800881c:	080088b9 	.word	0x080088b9
 8008820:	20000288 	.word	0x20000288

08008824 <Remo_OnDestroy>:

void Remo_OnDestroy(Remo_GameObject_Self* self)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
	if (!Game_Life)
 800882c:	4b07      	ldr	r3, [pc, #28]	; (800884c <Remo_OnDestroy+0x28>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d103      	bne.n	800883c <Remo_OnDestroy+0x18>
	{
		free(self);
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 fb57 	bl	8008ee8 <free>
	}
	else
	{
		self->fire_rank = 1;
	}
}
 800883a:	e002      	b.n	8008842 <Remo_OnDestroy+0x1e>
		self->fire_rank = 1;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	625a      	str	r2, [r3, #36]	; 0x24
}
 8008842:	bf00      	nop
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	20000258 	.word	0x20000258

08008850 <Remo_OnRender>:

void Remo_OnRender(Remo_GameObject_Self* self, Color** screen)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
	GameObject_Self_OnRender(&self->base, screen);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6839      	ldr	r1, [r7, #0]
 800885e:	4618      	mov	r0, r3
 8008860:	f7fa fa7c 	bl	8002d5c <GameObject_Self_OnRender>
}
 8008864:	bf00      	nop
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <RoyalCoin_Init>:

void RoyalCoin_Init(
	RoyalCoin_GameObject_Bullet* self,
	uint16_t pos_x, uint16_t pos_y,
	float speed_x, float speed_y
){
 800886c:	b580      	push	{r7, lr}
 800886e:	b08c      	sub	sp, #48	; 0x30
 8008870:	af08      	add	r7, sp, #32
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	607b      	str	r3, [r7, #4]
 8008876:	460b      	mov	r3, r1
 8008878:	817b      	strh	r3, [r7, #10]
 800887a:	4613      	mov	r3, r2
 800887c:	813b      	strh	r3, [r7, #8]
	GameObject_Bullet_Init(
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	897a      	ldrh	r2, [r7, #10]
 8008882:	2300      	movs	r3, #0
 8008884:	9307      	str	r3, [sp, #28]
 8008886:	4b0b      	ldr	r3, [pc, #44]	; (80088b4 <RoyalCoin_Init+0x48>)
 8008888:	9306      	str	r3, [sp, #24]
 800888a:	2302      	movs	r3, #2
 800888c:	9305      	str	r3, [sp, #20]
 800888e:	2301      	movs	r3, #1
 8008890:	9304      	str	r3, [sp, #16]
 8008892:	2301      	movs	r3, #1
 8008894:	9303      	str	r3, [sp, #12]
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	9302      	str	r3, [sp, #8]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	9301      	str	r3, [sp, #4]
 800889e:	893b      	ldrh	r3, [r7, #8]
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	4613      	mov	r3, r2
 80088a4:	220a      	movs	r2, #10
 80088a6:	2114      	movs	r1, #20
 80088a8:	f7fa f925 	bl	8002af6 <GameObject_Bullet_Init>
		1,
		1, 2,
		Img_RoyalCoin,
		false
	);
}
 80088ac:	bf00      	nop
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	2000004c 	.word	0x2000004c

080088b8 <RoyalCoin_OnCreate>:

void RoyalCoin_OnCreate(RoyalCoin_GameObject_Bullet* self)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
	GameObject_Bullet_OnCreate(&self->base);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7fa f943 	bl	8002b4e <GameObject_Bullet_OnCreate>
}
 80088c8:	bf00      	nop
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <RoyalCoin_OnUpdate>:

void RoyalCoin_OnUpdate(RoyalCoin_GameObject_Bullet* self)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
	GameObject_Bullet_OnUpdate(&self->base);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4618      	mov	r0, r3
 80088dc:	f7fa f943 	bl	8002b66 <GameObject_Bullet_OnUpdate>
}
 80088e0:	bf00      	nop
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <RoyalCoin_OnDestroy>:

void RoyalCoin_OnDestroy(RoyalCoin_GameObject_Bullet* self)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
	free(self);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 faf9 	bl	8008ee8 <free>
}
 80088f6:	bf00      	nop
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <RoyalCoin_OnRender>:

void RoyalCoin_OnRender(RoyalCoin_GameObject_Bullet* self, Color** screen)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b082      	sub	sp, #8
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
 8008906:	6039      	str	r1, [r7, #0]
	GameObject_Bullet_OnRender(&self->base, screen);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	4618      	mov	r0, r3
 800890e:	f7fa f944 	bl	8002b9a <GameObject_Bullet_OnRender>
}
 8008912:	bf00      	nop
 8008914:	3708      	adds	r7, #8
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
	...

0800891c <Demo4_OnLoop_1>:
#include "GameEngine.h"
#include "Time.h"
#include "mygpio.h"

void Demo4_OnLoop_1()
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b086      	sub	sp, #24
 8008920:	af02      	add	r7, sp, #8
	if (GetTime() == 100)
 8008922:	f000 fa3f 	bl	8008da4 <GetTime>
 8008926:	4603      	mov	r3, r0
 8008928:	2b64      	cmp	r3, #100	; 0x64
 800892a:	d11d      	bne.n	8008968 <Demo4_OnLoop_1+0x4c>
	{
		GameEvent* event;
		Demo2_GameObject_Enemy* enemy = malloc(sizeof(Demo2_GameObject_Enemy));
 800892c:	2024      	movs	r0, #36	; 0x24
 800892e:	f000 fad3 	bl	8008ed8 <malloc>
 8008932:	4603      	mov	r3, r0
 8008934:	60fb      	str	r3, [r7, #12]
		printlnf("enemy pointer: %d", enemy);
 8008936:	68f9      	ldr	r1, [r7, #12]
 8008938:	481f      	ldr	r0, [pc, #124]	; (80089b8 <Demo4_OnLoop_1+0x9c>)
 800893a:	f7ff fbf7 	bl	800812c <printlnf>
		Demo2_Init(
 800893e:	2302      	movs	r3, #2
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	230a      	movs	r3, #10
 8008944:	220a      	movs	r2, #10
 8008946:	21c8      	movs	r1, #200	; 0xc8
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f7ff fd51 	bl	80083f0 <Demo2_Init>
			enemy, 200,
			10, 10,
			2
		);
		event = RegistGameEvent(
 800894e:	4b1b      	ldr	r3, [pc, #108]	; (80089bc <Demo4_OnLoop_1+0xa0>)
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	4b1b      	ldr	r3, [pc, #108]	; (80089c0 <Demo4_OnLoop_1+0xa4>)
 8008954:	4a1b      	ldr	r2, [pc, #108]	; (80089c4 <Demo4_OnLoop_1+0xa8>)
 8008956:	491c      	ldr	r1, [pc, #112]	; (80089c8 <Demo4_OnLoop_1+0xac>)
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f7fa f821 	bl	80029a0 <RegistGameEvent>
 800895e:	60b8      	str	r0, [r7, #8]
			enemy,
			Demo2_OnCreate, Demo2_OnUpdate,
			Demo2_OnDestroy, Demo2_OnRender
		);
		Push(&Engine_EnemyEvents, event);
 8008960:	68b9      	ldr	r1, [r7, #8]
 8008962:	481a      	ldr	r0, [pc, #104]	; (80089cc <Demo4_OnLoop_1+0xb0>)
 8008964:	f000 f862 	bl	8008a2c <Push>
	}
	
	if (GetTime() == 200)
 8008968:	f000 fa1c 	bl	8008da4 <GetTime>
 800896c:	4603      	mov	r3, r0
 800896e:	2bc8      	cmp	r3, #200	; 0xc8
 8008970:	d11d      	bne.n	80089ae <Demo4_OnLoop_1+0x92>
	{
		GameEvent* event;
		Demo2_GameObject_Enemy* enemy = malloc(sizeof(Demo2_GameObject_Enemy));
 8008972:	2024      	movs	r0, #36	; 0x24
 8008974:	f000 fab0 	bl	8008ed8 <malloc>
 8008978:	4603      	mov	r3, r0
 800897a:	607b      	str	r3, [r7, #4]
		printlnf("enemy pointer: %d", enemy);
 800897c:	6879      	ldr	r1, [r7, #4]
 800897e:	480e      	ldr	r0, [pc, #56]	; (80089b8 <Demo4_OnLoop_1+0x9c>)
 8008980:	f7ff fbd4 	bl	800812c <printlnf>
		Demo2_Init(
 8008984:	2302      	movs	r3, #2
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	230a      	movs	r3, #10
 800898a:	221e      	movs	r2, #30
 800898c:	21c8      	movs	r1, #200	; 0xc8
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f7ff fd2e 	bl	80083f0 <Demo2_Init>
			enemy, 200,
			30, 10,
			2
		);
		event = RegistGameEvent(
 8008994:	4b09      	ldr	r3, [pc, #36]	; (80089bc <Demo4_OnLoop_1+0xa0>)
 8008996:	9300      	str	r3, [sp, #0]
 8008998:	4b09      	ldr	r3, [pc, #36]	; (80089c0 <Demo4_OnLoop_1+0xa4>)
 800899a:	4a0a      	ldr	r2, [pc, #40]	; (80089c4 <Demo4_OnLoop_1+0xa8>)
 800899c:	490a      	ldr	r1, [pc, #40]	; (80089c8 <Demo4_OnLoop_1+0xac>)
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7f9 fffe 	bl	80029a0 <RegistGameEvent>
 80089a4:	6038      	str	r0, [r7, #0]
			enemy,
			Demo2_OnCreate, Demo2_OnUpdate,
			Demo2_OnDestroy, Demo2_OnRender
		);
		Push(&Engine_EnemyEvents, event);
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	4808      	ldr	r0, [pc, #32]	; (80089cc <Demo4_OnLoop_1+0xb0>)
 80089aa:	f000 f83f 	bl	8008a2c <Push>
	}
}
 80089ae:	bf00      	nop
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	0800b02c 	.word	0x0800b02c
 80089bc:	08008483 	.word	0x08008483
 80089c0:	0800846d 	.word	0x0800846d
 80089c4:	08008455 	.word	0x08008455
 80089c8:	08008431 	.word	0x08008431
 80089cc:	20000270 	.word	0x20000270

080089d0 <Demo4_Routine>:

void Demo4_Routine(){
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af02      	add	r7, sp, #8

	GameEngineInit();
 80089d6:	f7f9 fec3 	bl	8002760 <GameEngineInit>

	// regester demo 1
	Remo_GameObject_Self* remo = malloc(sizeof(Remo_GameObject_Self));
 80089da:	2028      	movs	r0, #40	; 0x28
 80089dc:	f000 fa7c 	bl	8008ed8 <malloc>
 80089e0:	4603      	mov	r3, r0
 80089e2:	607b      	str	r3, [r7, #4]
	Remo_Init(remo, 28, 65);
 80089e4:	2241      	movs	r2, #65	; 0x41
 80089e6:	211c      	movs	r1, #28
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f7ff fd59 	bl	80084a0 <Remo_Init>
	GameEvent* event = RegistGameEvent(
 80089ee:	4b09      	ldr	r3, [pc, #36]	; (8008a14 <Demo4_Routine+0x44>)
 80089f0:	9300      	str	r3, [sp, #0]
 80089f2:	4b09      	ldr	r3, [pc, #36]	; (8008a18 <Demo4_Routine+0x48>)
 80089f4:	4a09      	ldr	r2, [pc, #36]	; (8008a1c <Demo4_Routine+0x4c>)
 80089f6:	490a      	ldr	r1, [pc, #40]	; (8008a20 <Demo4_Routine+0x50>)
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f7f9 ffd1 	bl	80029a0 <RegistGameEvent>
 80089fe:	6038      	str	r0, [r7, #0]
		remo, Remo_OnCreate, Remo_OnUpdate, Remo_OnDestroy, Remo_OnRender
	);

	Engine_SelfEvent = event;
 8008a00:	4a08      	ldr	r2, [pc, #32]	; (8008a24 <Demo4_Routine+0x54>)
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	6013      	str	r3, [r2, #0]

	GameEngineLoop(Demo4_OnLoop_1);
 8008a06:	4808      	ldr	r0, [pc, #32]	; (8008a28 <Demo4_Routine+0x58>)
 8008a08:	f7f9 ff04 	bl	8002814 <GameEngineLoop>
 8008a0c:	bf00      	nop
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	08008851 	.word	0x08008851
 8008a18:	08008825 	.word	0x08008825
 8008a1c:	080084f9 	.word	0x080084f9
 8008a20:	080084e1 	.word	0x080084e1
 8008a24:	20000268 	.word	0x20000268
 8008a28:	0800891d 	.word	0x0800891d

08008a2c <Push>:
#include "LinkedList.h"

Node* Push(LinkedList *linked_list, void *object)
{
 8008a2c:	b590      	push	{r4, r7, lr}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
	Node *temp = linked_list->tail;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	60fb      	str	r3, [r7, #12]
	linked_list->tail->next = malloc(sizeof(Node));
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685c      	ldr	r4, [r3, #4]
 8008a40:	200c      	movs	r0, #12
 8008a42:	f000 fa49 	bl	8008ed8 <malloc>
 8008a46:	4603      	mov	r3, r0
 8008a48:	60a3      	str	r3, [r4, #8]
	linked_list->tail = linked_list->tail->next;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	689a      	ldr	r2, [r3, #8]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	605a      	str	r2, [r3, #4]
	linked_list->tail->object = object;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	601a      	str	r2, [r3, #0]
	linked_list->tail->prev = temp;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	605a      	str	r2, [r3, #4]
	linked_list->tail->next = NULL;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	609a      	str	r2, [r3, #8]
	
	return linked_list->tail;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	685b      	ldr	r3, [r3, #4]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3714      	adds	r7, #20
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd90      	pop	{r4, r7, pc}

08008a78 <RemoveNode>:

void RemoveNode(LinkedList *linked_list, Node *node)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
	if (!node->next)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d108      	bne.n	8008a9c <RemoveNode+0x24>
	{
		node->prev->next = NULL;
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	609a      	str	r2, [r3, #8]
		linked_list->tail = node->prev;
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	685a      	ldr	r2, [r3, #4]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	605a      	str	r2, [r3, #4]
 8008a9a:	e009      	b.n	8008ab0 <RemoveNode+0x38>
	}
	else
	{
		node->next->prev = node->prev;
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	683a      	ldr	r2, [r7, #0]
 8008aa2:	6852      	ldr	r2, [r2, #4]
 8008aa4:	605a      	str	r2, [r3, #4]
		node->prev->next = node->next;
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	6892      	ldr	r2, [r2, #8]
 8008aae:	609a      	str	r2, [r3, #8]
	}
	free(node);
 8008ab0:	6838      	ldr	r0, [r7, #0]
 8008ab2:	f000 fa19 	bl	8008ee8 <free>
 8008ab6:	bf00      	nop
 8008ab8:	3708      	adds	r7, #8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
	...

08008ac0 <Render>:
}

Color **__last_screen = NULL;

void Render(GameObject* game_object, Color** screen)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b08e      	sub	sp, #56	; 0x38
 8008ac4:	af02      	add	r7, sp, #8
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
	int sx, sy, ex, ey;
	uint16_t rsx, rsy, rex, rey;
	int i, j;
	Color c;

	sx = (int)game_object->pos_x - (game_object->width + 1) / 2;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7f8 fb3a 	bl	8001148 <__aeabi_f2iz>
 8008ad4:	4601      	mov	r1, r0
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	8a5b      	ldrh	r3, [r3, #18]
 8008ada:	3301      	adds	r3, #1
 8008adc:	0fda      	lsrs	r2, r3, #31
 8008ade:	4413      	add	r3, r2
 8008ae0:	105b      	asrs	r3, r3, #1
 8008ae2:	425b      	negs	r3, r3
 8008ae4:	440b      	add	r3, r1
 8008ae6:	627b      	str	r3, [r7, #36]	; 0x24
	sy = (int)game_object->pos_y - (game_object->height + 1) / 2;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7f8 fb2b 	bl	8001148 <__aeabi_f2iz>
 8008af2:	4601      	mov	r1, r0
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	8a9b      	ldrh	r3, [r3, #20]
 8008af8:	3301      	adds	r3, #1
 8008afa:	0fda      	lsrs	r2, r3, #31
 8008afc:	4413      	add	r3, r2
 8008afe:	105b      	asrs	r3, r3, #1
 8008b00:	425b      	negs	r3, r3
 8008b02:	440b      	add	r3, r1
 8008b04:	623b      	str	r3, [r7, #32]
	ex = (int)game_object->pos_x + game_object->width / 2;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7f8 fb1c 	bl	8001148 <__aeabi_f2iz>
 8008b10:	4602      	mov	r2, r0
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	8a5b      	ldrh	r3, [r3, #18]
 8008b16:	085b      	lsrs	r3, r3, #1
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	4413      	add	r3, r2
 8008b1c:	61fb      	str	r3, [r7, #28]
	ey = (int)game_object->pos_y + game_object->height / 2;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7f8 fb10 	bl	8001148 <__aeabi_f2iz>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	8a9b      	ldrh	r3, [r3, #20]
 8008b2e:	085b      	lsrs	r3, r3, #1
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	4413      	add	r3, r2
 8008b34:	61bb      	str	r3, [r7, #24]

	rsx = (uint16_t)MIN(MAX(sx, 0), __WIDTH);
 8008b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b38:	2b38      	cmp	r3, #56	; 0x38
 8008b3a:	dc07      	bgt.n	8008b4c <Render+0x8c>
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	dd02      	ble.n	8008b48 <Render+0x88>
 8008b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	e002      	b.n	8008b4e <Render+0x8e>
 8008b48:	2300      	movs	r3, #0
 8008b4a:	e000      	b.n	8008b4e <Render+0x8e>
 8008b4c:	2339      	movs	r3, #57	; 0x39
 8008b4e:	82fb      	strh	r3, [r7, #22]
	rsy = (uint16_t)MIN(MAX(sy, 0), __HEIGHT);
 8008b50:	6a3b      	ldr	r3, [r7, #32]
 8008b52:	2b47      	cmp	r3, #71	; 0x47
 8008b54:	dc07      	bgt.n	8008b66 <Render+0xa6>
 8008b56:	6a3b      	ldr	r3, [r7, #32]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	dd02      	ble.n	8008b62 <Render+0xa2>
 8008b5c:	6a3b      	ldr	r3, [r7, #32]
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	e002      	b.n	8008b68 <Render+0xa8>
 8008b62:	2300      	movs	r3, #0
 8008b64:	e000      	b.n	8008b68 <Render+0xa8>
 8008b66:	2348      	movs	r3, #72	; 0x48
 8008b68:	82bb      	strh	r3, [r7, #20]
	rex = (uint16_t)MAX(MIN(ex, __WIDTH), 0);
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	dd07      	ble.n	8008b80 <Render+0xc0>
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	2b38      	cmp	r3, #56	; 0x38
 8008b74:	dc02      	bgt.n	8008b7c <Render+0xbc>
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	e002      	b.n	8008b82 <Render+0xc2>
 8008b7c:	2339      	movs	r3, #57	; 0x39
 8008b7e:	e000      	b.n	8008b82 <Render+0xc2>
 8008b80:	2300      	movs	r3, #0
 8008b82:	827b      	strh	r3, [r7, #18]
	rey = (uint16_t)MAX(MIN(ey, __HEIGHT), 0);
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	dd07      	ble.n	8008b9a <Render+0xda>
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	2b47      	cmp	r3, #71	; 0x47
 8008b8e:	dc02      	bgt.n	8008b96 <Render+0xd6>
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	e002      	b.n	8008b9c <Render+0xdc>
 8008b96:	2348      	movs	r3, #72	; 0x48
 8008b98:	e000      	b.n	8008b9c <Render+0xdc>
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	823b      	strh	r3, [r7, #16]
	
	if (game_object == 536875992)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a27      	ldr	r2, [pc, #156]	; (8008c40 <Render+0x180>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d110      	bne.n	8008bc8 <Render+0x108>
	{
		printlnf("sx: %d, sy: %d, ex: %d, ey: %d", sx,sy,ex,ey);
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	9300      	str	r3, [sp, #0]
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	6a3a      	ldr	r2, [r7, #32]
 8008bae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008bb0:	4824      	ldr	r0, [pc, #144]	; (8008c44 <Render+0x184>)
 8008bb2:	f7ff fabb 	bl	800812c <printlnf>
		printlnf("rsx: %hu, rsy: %hu, rex: %hu, rey: %hu",rsx,rsy,rex,rey);
 8008bb6:	8af9      	ldrh	r1, [r7, #22]
 8008bb8:	8aba      	ldrh	r2, [r7, #20]
 8008bba:	8a78      	ldrh	r0, [r7, #18]
 8008bbc:	8a3b      	ldrh	r3, [r7, #16]
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	4821      	ldr	r0, [pc, #132]	; (8008c48 <Render+0x188>)
 8008bc4:	f7ff fab2 	bl	800812c <printlnf>
	}

	for (i = 0; i < rey - rsy; i++)
 8008bc8:	2300      	movs	r3, #0
 8008bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bcc:	e02d      	b.n	8008c2a <Render+0x16a>
		for (j = 0; j < rex - rsx; j++)
 8008bce:	2300      	movs	r3, #0
 8008bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bd2:	e021      	b.n	8008c18 <Render+0x158>
		{
			c = game_object->img[i * (rex - rsx) + j];
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	699a      	ldr	r2, [r3, #24]
 8008bd8:	8a79      	ldrh	r1, [r7, #18]
 8008bda:	8afb      	ldrh	r3, [r7, #22]
 8008bdc:	1acb      	subs	r3, r1, r3
 8008bde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008be0:	fb01 f103 	mul.w	r1, r1, r3
 8008be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be6:	440b      	add	r3, r1
 8008be8:	005b      	lsls	r3, r3, #1
 8008bea:	4413      	add	r3, r2
 8008bec:	881b      	ldrh	r3, [r3, #0]
 8008bee:	81fb      	strh	r3, [r7, #14]
			if (c != TRANSPARENT)
 8008bf0:	89fb      	ldrh	r3, [r7, #14]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00d      	beq.n	8008c12 <Render+0x152>
			{
				screen[i + rsy][j + rsx] = c;
 8008bf6:	8aba      	ldrh	r2, [r7, #20]
 8008bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfa:	4413      	add	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	683a      	ldr	r2, [r7, #0]
 8008c00:	4413      	add	r3, r2
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	8af9      	ldrh	r1, [r7, #22]
 8008c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c08:	440b      	add	r3, r1
 8008c0a:	005b      	lsls	r3, r3, #1
 8008c0c:	4413      	add	r3, r2
 8008c0e:	89fa      	ldrh	r2, [r7, #14]
 8008c10:	801a      	strh	r2, [r3, #0]
		for (j = 0; j < rex - rsx; j++)
 8008c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c14:	3301      	adds	r3, #1
 8008c16:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c18:	8a7a      	ldrh	r2, [r7, #18]
 8008c1a:	8afb      	ldrh	r3, [r7, #22]
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c20:	429a      	cmp	r2, r3
 8008c22:	dbd7      	blt.n	8008bd4 <Render+0x114>
	for (i = 0; i < rey - rsy; i++)
 8008c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c26:	3301      	adds	r3, #1
 8008c28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c2a:	8a3a      	ldrh	r2, [r7, #16]
 8008c2c:	8abb      	ldrh	r3, [r7, #20]
 8008c2e:	1ad3      	subs	r3, r2, r3
 8008c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c32:	429a      	cmp	r2, r3
 8008c34:	dbcb      	blt.n	8008bce <Render+0x10e>
			}
		}
}
 8008c36:	bf00      	nop
 8008c38:	3730      	adds	r7, #48	; 0x30
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	200013d8 	.word	0x200013d8
 8008c44:	0800b048 	.word	0x0800b048
 8008c48:	0800b068 	.word	0x0800b068

08008c4c <InitScreen>:

Color** InitScreen(Color** screen)
{
 8008c4c:	b590      	push	{r4, r7, lr}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
	uint16_t i, j;

	if(!screen)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d118      	bne.n	8008c8c <InitScreen+0x40>
	{
		screen = calloc(sizeof(Color*), __HEIGHT);
 8008c5a:	2148      	movs	r1, #72	; 0x48
 8008c5c:	2004      	movs	r0, #4
 8008c5e:	f000 f909 	bl	8008e74 <calloc>
 8008c62:	4603      	mov	r3, r0
 8008c64:	607b      	str	r3, [r7, #4]

		for (i = 0; i < __HEIGHT; i++)
 8008c66:	2300      	movs	r3, #0
 8008c68:	81fb      	strh	r3, [r7, #14]
 8008c6a:	e00c      	b.n	8008c86 <InitScreen+0x3a>
		screen[i] = calloc(sizeof(Color), __WIDTH);
 8008c6c:	89fb      	ldrh	r3, [r7, #14]
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	18d4      	adds	r4, r2, r3
 8008c74:	2139      	movs	r1, #57	; 0x39
 8008c76:	2002      	movs	r0, #2
 8008c78:	f000 f8fc 	bl	8008e74 <calloc>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	6023      	str	r3, [r4, #0]
		for (i = 0; i < __HEIGHT; i++)
 8008c80:	89fb      	ldrh	r3, [r7, #14]
 8008c82:	3301      	adds	r3, #1
 8008c84:	81fb      	strh	r3, [r7, #14]
 8008c86:	89fb      	ldrh	r3, [r7, #14]
 8008c88:	2b47      	cmp	r3, #71	; 0x47
 8008c8a:	d9ef      	bls.n	8008c6c <InitScreen+0x20>
	}

	for (i = 0; i < __HEIGHT; i++)
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	81fb      	strh	r3, [r7, #14]
 8008c90:	e015      	b.n	8008cbe <InitScreen+0x72>
		for (j = 0; j < __WIDTH; j++)
 8008c92:	2300      	movs	r3, #0
 8008c94:	81bb      	strh	r3, [r7, #12]
 8008c96:	e00c      	b.n	8008cb2 <InitScreen+0x66>
			screen[i][j] = TRANSPARENT;
 8008c98:	89fb      	ldrh	r3, [r7, #14]
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	89bb      	ldrh	r3, [r7, #12]
 8008ca4:	005b      	lsls	r3, r3, #1
 8008ca6:	4413      	add	r3, r2
 8008ca8:	2200      	movs	r2, #0
 8008caa:	801a      	strh	r2, [r3, #0]
		for (j = 0; j < __WIDTH; j++)
 8008cac:	89bb      	ldrh	r3, [r7, #12]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	81bb      	strh	r3, [r7, #12]
 8008cb2:	89bb      	ldrh	r3, [r7, #12]
 8008cb4:	2b38      	cmp	r3, #56	; 0x38
 8008cb6:	d9ef      	bls.n	8008c98 <InitScreen+0x4c>
	for (i = 0; i < __HEIGHT; i++)
 8008cb8:	89fb      	ldrh	r3, [r7, #14]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	81fb      	strh	r3, [r7, #14]
 8008cbe:	89fb      	ldrh	r3, [r7, #14]
 8008cc0:	2b47      	cmp	r3, #71	; 0x47
 8008cc2:	d9e6      	bls.n	8008c92 <InitScreen+0x46>

	return screen;
 8008cc4:	687b      	ldr	r3, [r7, #4]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3714      	adds	r7, #20
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd90      	pop	{r4, r7, pc}
	...

08008cd0 <Flush>:


Color** Flush(Color **screen)
{
 8008cd0:	b590      	push	{r4, r7, lr}
 8008cd2:	b089      	sub	sp, #36	; 0x24
 8008cd4:	af02      	add	r7, sp, #8
 8008cd6:	6078      	str	r0, [r7, #4]
	uint16_t i, j;
	uint16_t sx, sy, ex, ey;
	Color **temp;
	// init
	if (!__last_screen)
 8008cd8:	4b30      	ldr	r3, [pc, #192]	; (8008d9c <Flush+0xcc>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10d      	bne.n	8008cfc <Flush+0x2c>
	{
		LCD_Clear(BLACK);
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	f7ff f87b 	bl	8007ddc <LCD_Clear>
		__last_screen = InitScreen(__last_screen);
 8008ce6:	4b2d      	ldr	r3, [pc, #180]	; (8008d9c <Flush+0xcc>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7ff ffae 	bl	8008c4c <InitScreen>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	4b2a      	ldr	r3, [pc, #168]	; (8008d9c <Flush+0xcc>)
 8008cf4:	601a      	str	r2, [r3, #0]
		println("Render init finished");
 8008cf6:	482a      	ldr	r0, [pc, #168]	; (8008da0 <Flush+0xd0>)
 8008cf8:	f7ff f9fa 	bl	80080f0 <println>
	}
	// flush
	for (i = 0; i < __HEIGHT; i++)
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	82fb      	strh	r3, [r7, #22]
 8008d00:	e03d      	b.n	8008d7e <Flush+0xae>
		for (j = 0; j < __WIDTH; j++)
 8008d02:	2300      	movs	r3, #0
 8008d04:	82bb      	strh	r3, [r7, #20]
 8008d06:	e034      	b.n	8008d72 <Flush+0xa2>
		{
			if (screen[i][j] != __last_screen[i][j])
 8008d08:	8afb      	ldrh	r3, [r7, #22]
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	4413      	add	r3, r2
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	8abb      	ldrh	r3, [r7, #20]
 8008d14:	005b      	lsls	r3, r3, #1
 8008d16:	4413      	add	r3, r2
 8008d18:	881a      	ldrh	r2, [r3, #0]
 8008d1a:	4b20      	ldr	r3, [pc, #128]	; (8008d9c <Flush+0xcc>)
 8008d1c:	6819      	ldr	r1, [r3, #0]
 8008d1e:	8afb      	ldrh	r3, [r7, #22]
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	440b      	add	r3, r1
 8008d24:	6819      	ldr	r1, [r3, #0]
 8008d26:	8abb      	ldrh	r3, [r7, #20]
 8008d28:	005b      	lsls	r3, r3, #1
 8008d2a:	440b      	add	r3, r1
 8008d2c:	881b      	ldrh	r3, [r3, #0]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d01c      	beq.n	8008d6c <Flush+0x9c>
			{
				sx = j * __SCALE;
 8008d32:	8abb      	ldrh	r3, [r7, #20]
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	81fb      	strh	r3, [r7, #14]
				sy = i * __SCALE;
 8008d38:	8afb      	ldrh	r3, [r7, #22]
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	81bb      	strh	r3, [r7, #12]
				ex = sx + __SCALE;
 8008d3e:	89fb      	ldrh	r3, [r7, #14]
 8008d40:	3304      	adds	r3, #4
 8008d42:	817b      	strh	r3, [r7, #10]
				ey = sy + __SCALE;
 8008d44:	89bb      	ldrh	r3, [r7, #12]
 8008d46:	3304      	adds	r3, #4
 8008d48:	813b      	strh	r3, [r7, #8]
				LCD_Fill(sx, sy, ex, ey, screen[i][j]);
 8008d4a:	8afb      	ldrh	r3, [r7, #22]
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	4413      	add	r3, r2
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	8abb      	ldrh	r3, [r7, #20]
 8008d56:	005b      	lsls	r3, r3, #1
 8008d58:	4413      	add	r3, r2
 8008d5a:	881b      	ldrh	r3, [r3, #0]
 8008d5c:	893c      	ldrh	r4, [r7, #8]
 8008d5e:	897a      	ldrh	r2, [r7, #10]
 8008d60:	89b9      	ldrh	r1, [r7, #12]
 8008d62:	89f8      	ldrh	r0, [r7, #14]
 8008d64:	9300      	str	r3, [sp, #0]
 8008d66:	4623      	mov	r3, r4
 8008d68:	f7ff f89a 	bl	8007ea0 <LCD_Fill>
		for (j = 0; j < __WIDTH; j++)
 8008d6c:	8abb      	ldrh	r3, [r7, #20]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	82bb      	strh	r3, [r7, #20]
 8008d72:	8abb      	ldrh	r3, [r7, #20]
 8008d74:	2b38      	cmp	r3, #56	; 0x38
 8008d76:	d9c7      	bls.n	8008d08 <Flush+0x38>
	for (i = 0; i < __HEIGHT; i++)
 8008d78:	8afb      	ldrh	r3, [r7, #22]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	82fb      	strh	r3, [r7, #22]
 8008d7e:	8afb      	ldrh	r3, [r7, #22]
 8008d80:	2b47      	cmp	r3, #71	; 0x47
 8008d82:	d9be      	bls.n	8008d02 <Flush+0x32>
			}
		}
	// cache
	temp = __last_screen;
 8008d84:	4b05      	ldr	r3, [pc, #20]	; (8008d9c <Flush+0xcc>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	613b      	str	r3, [r7, #16]
	__last_screen = screen;
 8008d8a:	4a04      	ldr	r2, [pc, #16]	; (8008d9c <Flush+0xcc>)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6013      	str	r3, [r2, #0]
	
	return temp;
 8008d90:	693b      	ldr	r3, [r7, #16]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	371c      	adds	r7, #28
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd90      	pop	{r4, r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	20000240 	.word	0x20000240
 8008da0:	0800b090 	.word	0x0800b090

08008da4 <GetTime>:
#include "Time.h"

int __Time_Last_Update;

int GetTime()
{
 8008da4:	b480      	push	{r7}
 8008da6:	af00      	add	r7, sp, #0
	return __Time_Last_Update + 1;
 8008da8:	4b03      	ldr	r3, [pc, #12]	; (8008db8 <GetTime+0x14>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	3301      	adds	r3, #1
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bc80      	pop	{r7}
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop
 8008db8:	20000314 	.word	0x20000314

08008dbc <Time_OnStart>:

void Time_OnStart()
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	af00      	add	r7, sp, #0
	__Time_Last_Update = 0;
 8008dc0:	4b03      	ldr	r3, [pc, #12]	; (8008dd0 <Time_OnStart+0x14>)
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	601a      	str	r2, [r3, #0]
}
 8008dc6:	bf00      	nop
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bc80      	pop	{r7}
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	20000314 	.word	0x20000314

08008dd4 <Time_OnUpdate>:

void Time_OnUpdate()
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
	float temp = GetTime();
 8008dda:	f7ff ffe3 	bl	8008da4 <GetTime>
 8008dde:	4603      	mov	r3, r0
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7f7 ff97 	bl	8000d14 <__aeabi_i2f>
 8008de6:	4603      	mov	r3, r0
 8008de8:	607b      	str	r3, [r7, #4]
	delta_time = temp - __Time_Last_Update;
 8008dea:	4b0d      	ldr	r3, [pc, #52]	; (8008e20 <Time_OnUpdate+0x4c>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7f7 ff90 	bl	8000d14 <__aeabi_i2f>
 8008df4:	4603      	mov	r3, r0
 8008df6:	4619      	mov	r1, r3
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f7f7 fed5 	bl	8000ba8 <__aeabi_fsub>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7f8 f9a1 	bl	8001148 <__aeabi_f2iz>
 8008e06:	4602      	mov	r2, r0
 8008e08:	4b06      	ldr	r3, [pc, #24]	; (8008e24 <Time_OnUpdate+0x50>)
 8008e0a:	601a      	str	r2, [r3, #0]
	__Time_Last_Update = temp;
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f7f8 f99b 	bl	8001148 <__aeabi_f2iz>
 8008e12:	4602      	mov	r2, r0
 8008e14:	4b02      	ldr	r3, [pc, #8]	; (8008e20 <Time_OnUpdate+0x4c>)
 8008e16:	601a      	str	r2, [r3, #0]
}
 8008e18:	bf00      	nop
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	20000314 	.word	0x20000314
 8008e24:	2000027c 	.word	0x2000027c

08008e28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8008e28:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8008e2a:	e003      	b.n	8008e34 <LoopCopyDataInit>

08008e2c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8008e2c:	4b0b      	ldr	r3, [pc, #44]	; (8008e5c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8008e2e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8008e30:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8008e32:	3104      	adds	r1, #4

08008e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8008e34:	480a      	ldr	r0, [pc, #40]	; (8008e60 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8008e36:	4b0b      	ldr	r3, [pc, #44]	; (8008e64 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8008e38:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8008e3a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8008e3c:	d3f6      	bcc.n	8008e2c <CopyDataInit>
  ldr r2, =_sbss
 8008e3e:	4a0a      	ldr	r2, [pc, #40]	; (8008e68 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8008e40:	e002      	b.n	8008e48 <LoopFillZerobss>

08008e42 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8008e42:	2300      	movs	r3, #0
  str r3, [r2], #4
 8008e44:	f842 3b04 	str.w	r3, [r2], #4

08008e48 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8008e48:	4b08      	ldr	r3, [pc, #32]	; (8008e6c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8008e4a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8008e4c:	d3f9      	bcc.n	8008e42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008e4e:	f7ff fa25 	bl	800829c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008e52:	f000 f81d 	bl	8008e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008e56:	f7ff f8af 	bl	8007fb8 <main>
  bx lr
 8008e5a:	4770      	bx	lr
  ldr r3, =_sidata
 8008e5c:	0800b328 	.word	0x0800b328
  ldr r0, =_sdata
 8008e60:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8008e64:	20000220 	.word	0x20000220
  ldr r2, =_sbss
 8008e68:	20000220 	.word	0x20000220
  ldr r3, = _ebss
 8008e6c:	2000031c 	.word	0x2000031c

08008e70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008e70:	e7fe      	b.n	8008e70 <ADC1_2_IRQHandler>
	...

08008e74 <calloc>:
 8008e74:	4b02      	ldr	r3, [pc, #8]	; (8008e80 <calloc+0xc>)
 8008e76:	460a      	mov	r2, r1
 8008e78:	4601      	mov	r1, r0
 8008e7a:	6818      	ldr	r0, [r3, #0]
 8008e7c:	f000 b844 	b.w	8008f08 <_calloc_r>
 8008e80:	20000050 	.word	0x20000050

08008e84 <__errno>:
 8008e84:	4b01      	ldr	r3, [pc, #4]	; (8008e8c <__errno+0x8>)
 8008e86:	6818      	ldr	r0, [r3, #0]
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	20000050 	.word	0x20000050

08008e90 <__libc_init_array>:
 8008e90:	b570      	push	{r4, r5, r6, lr}
 8008e92:	2500      	movs	r5, #0
 8008e94:	4e0c      	ldr	r6, [pc, #48]	; (8008ec8 <__libc_init_array+0x38>)
 8008e96:	4c0d      	ldr	r4, [pc, #52]	; (8008ecc <__libc_init_array+0x3c>)
 8008e98:	1ba4      	subs	r4, r4, r6
 8008e9a:	10a4      	asrs	r4, r4, #2
 8008e9c:	42a5      	cmp	r5, r4
 8008e9e:	d109      	bne.n	8008eb4 <__libc_init_array+0x24>
 8008ea0:	f002 f888 	bl	800afb4 <_init>
 8008ea4:	2500      	movs	r5, #0
 8008ea6:	4e0a      	ldr	r6, [pc, #40]	; (8008ed0 <__libc_init_array+0x40>)
 8008ea8:	4c0a      	ldr	r4, [pc, #40]	; (8008ed4 <__libc_init_array+0x44>)
 8008eaa:	1ba4      	subs	r4, r4, r6
 8008eac:	10a4      	asrs	r4, r4, #2
 8008eae:	42a5      	cmp	r5, r4
 8008eb0:	d105      	bne.n	8008ebe <__libc_init_array+0x2e>
 8008eb2:	bd70      	pop	{r4, r5, r6, pc}
 8008eb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008eb8:	4798      	blx	r3
 8008eba:	3501      	adds	r5, #1
 8008ebc:	e7ee      	b.n	8008e9c <__libc_init_array+0xc>
 8008ebe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ec2:	4798      	blx	r3
 8008ec4:	3501      	adds	r5, #1
 8008ec6:	e7f2      	b.n	8008eae <__libc_init_array+0x1e>
 8008ec8:	0800b320 	.word	0x0800b320
 8008ecc:	0800b320 	.word	0x0800b320
 8008ed0:	0800b320 	.word	0x0800b320
 8008ed4:	0800b324 	.word	0x0800b324

08008ed8 <malloc>:
 8008ed8:	4b02      	ldr	r3, [pc, #8]	; (8008ee4 <malloc+0xc>)
 8008eda:	4601      	mov	r1, r0
 8008edc:	6818      	ldr	r0, [r3, #0]
 8008ede:	f000 b86d 	b.w	8008fbc <_malloc_r>
 8008ee2:	bf00      	nop
 8008ee4:	20000050 	.word	0x20000050

08008ee8 <free>:
 8008ee8:	4b02      	ldr	r3, [pc, #8]	; (8008ef4 <free+0xc>)
 8008eea:	4601      	mov	r1, r0
 8008eec:	6818      	ldr	r0, [r3, #0]
 8008eee:	f000 b819 	b.w	8008f24 <_free_r>
 8008ef2:	bf00      	nop
 8008ef4:	20000050 	.word	0x20000050

08008ef8 <memset>:
 8008ef8:	4603      	mov	r3, r0
 8008efa:	4402      	add	r2, r0
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d100      	bne.n	8008f02 <memset+0xa>
 8008f00:	4770      	bx	lr
 8008f02:	f803 1b01 	strb.w	r1, [r3], #1
 8008f06:	e7f9      	b.n	8008efc <memset+0x4>

08008f08 <_calloc_r>:
 8008f08:	b538      	push	{r3, r4, r5, lr}
 8008f0a:	fb02 f401 	mul.w	r4, r2, r1
 8008f0e:	4621      	mov	r1, r4
 8008f10:	f000 f854 	bl	8008fbc <_malloc_r>
 8008f14:	4605      	mov	r5, r0
 8008f16:	b118      	cbz	r0, 8008f20 <_calloc_r+0x18>
 8008f18:	4622      	mov	r2, r4
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	f7ff ffec 	bl	8008ef8 <memset>
 8008f20:	4628      	mov	r0, r5
 8008f22:	bd38      	pop	{r3, r4, r5, pc}

08008f24 <_free_r>:
 8008f24:	b538      	push	{r3, r4, r5, lr}
 8008f26:	4605      	mov	r5, r0
 8008f28:	2900      	cmp	r1, #0
 8008f2a:	d043      	beq.n	8008fb4 <_free_r+0x90>
 8008f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f30:	1f0c      	subs	r4, r1, #4
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	bfb8      	it	lt
 8008f36:	18e4      	addlt	r4, r4, r3
 8008f38:	f001 fba5 	bl	800a686 <__malloc_lock>
 8008f3c:	4a1e      	ldr	r2, [pc, #120]	; (8008fb8 <_free_r+0x94>)
 8008f3e:	6813      	ldr	r3, [r2, #0]
 8008f40:	4610      	mov	r0, r2
 8008f42:	b933      	cbnz	r3, 8008f52 <_free_r+0x2e>
 8008f44:	6063      	str	r3, [r4, #4]
 8008f46:	6014      	str	r4, [r2, #0]
 8008f48:	4628      	mov	r0, r5
 8008f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f4e:	f001 bb9b 	b.w	800a688 <__malloc_unlock>
 8008f52:	42a3      	cmp	r3, r4
 8008f54:	d90b      	bls.n	8008f6e <_free_r+0x4a>
 8008f56:	6821      	ldr	r1, [r4, #0]
 8008f58:	1862      	adds	r2, r4, r1
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	bf01      	itttt	eq
 8008f5e:	681a      	ldreq	r2, [r3, #0]
 8008f60:	685b      	ldreq	r3, [r3, #4]
 8008f62:	1852      	addeq	r2, r2, r1
 8008f64:	6022      	streq	r2, [r4, #0]
 8008f66:	6063      	str	r3, [r4, #4]
 8008f68:	6004      	str	r4, [r0, #0]
 8008f6a:	e7ed      	b.n	8008f48 <_free_r+0x24>
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	685a      	ldr	r2, [r3, #4]
 8008f70:	b10a      	cbz	r2, 8008f76 <_free_r+0x52>
 8008f72:	42a2      	cmp	r2, r4
 8008f74:	d9fa      	bls.n	8008f6c <_free_r+0x48>
 8008f76:	6819      	ldr	r1, [r3, #0]
 8008f78:	1858      	adds	r0, r3, r1
 8008f7a:	42a0      	cmp	r0, r4
 8008f7c:	d10b      	bne.n	8008f96 <_free_r+0x72>
 8008f7e:	6820      	ldr	r0, [r4, #0]
 8008f80:	4401      	add	r1, r0
 8008f82:	1858      	adds	r0, r3, r1
 8008f84:	4282      	cmp	r2, r0
 8008f86:	6019      	str	r1, [r3, #0]
 8008f88:	d1de      	bne.n	8008f48 <_free_r+0x24>
 8008f8a:	6810      	ldr	r0, [r2, #0]
 8008f8c:	6852      	ldr	r2, [r2, #4]
 8008f8e:	4401      	add	r1, r0
 8008f90:	6019      	str	r1, [r3, #0]
 8008f92:	605a      	str	r2, [r3, #4]
 8008f94:	e7d8      	b.n	8008f48 <_free_r+0x24>
 8008f96:	d902      	bls.n	8008f9e <_free_r+0x7a>
 8008f98:	230c      	movs	r3, #12
 8008f9a:	602b      	str	r3, [r5, #0]
 8008f9c:	e7d4      	b.n	8008f48 <_free_r+0x24>
 8008f9e:	6820      	ldr	r0, [r4, #0]
 8008fa0:	1821      	adds	r1, r4, r0
 8008fa2:	428a      	cmp	r2, r1
 8008fa4:	bf01      	itttt	eq
 8008fa6:	6811      	ldreq	r1, [r2, #0]
 8008fa8:	6852      	ldreq	r2, [r2, #4]
 8008faa:	1809      	addeq	r1, r1, r0
 8008fac:	6021      	streq	r1, [r4, #0]
 8008fae:	6062      	str	r2, [r4, #4]
 8008fb0:	605c      	str	r4, [r3, #4]
 8008fb2:	e7c9      	b.n	8008f48 <_free_r+0x24>
 8008fb4:	bd38      	pop	{r3, r4, r5, pc}
 8008fb6:	bf00      	nop
 8008fb8:	20000244 	.word	0x20000244

08008fbc <_malloc_r>:
 8008fbc:	b570      	push	{r4, r5, r6, lr}
 8008fbe:	1ccd      	adds	r5, r1, #3
 8008fc0:	f025 0503 	bic.w	r5, r5, #3
 8008fc4:	3508      	adds	r5, #8
 8008fc6:	2d0c      	cmp	r5, #12
 8008fc8:	bf38      	it	cc
 8008fca:	250c      	movcc	r5, #12
 8008fcc:	2d00      	cmp	r5, #0
 8008fce:	4606      	mov	r6, r0
 8008fd0:	db01      	blt.n	8008fd6 <_malloc_r+0x1a>
 8008fd2:	42a9      	cmp	r1, r5
 8008fd4:	d903      	bls.n	8008fde <_malloc_r+0x22>
 8008fd6:	230c      	movs	r3, #12
 8008fd8:	6033      	str	r3, [r6, #0]
 8008fda:	2000      	movs	r0, #0
 8008fdc:	bd70      	pop	{r4, r5, r6, pc}
 8008fde:	f001 fb52 	bl	800a686 <__malloc_lock>
 8008fe2:	4a21      	ldr	r2, [pc, #132]	; (8009068 <_malloc_r+0xac>)
 8008fe4:	6814      	ldr	r4, [r2, #0]
 8008fe6:	4621      	mov	r1, r4
 8008fe8:	b991      	cbnz	r1, 8009010 <_malloc_r+0x54>
 8008fea:	4c20      	ldr	r4, [pc, #128]	; (800906c <_malloc_r+0xb0>)
 8008fec:	6823      	ldr	r3, [r4, #0]
 8008fee:	b91b      	cbnz	r3, 8008ff8 <_malloc_r+0x3c>
 8008ff0:	4630      	mov	r0, r6
 8008ff2:	f000 fc8d 	bl	8009910 <_sbrk_r>
 8008ff6:	6020      	str	r0, [r4, #0]
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	4630      	mov	r0, r6
 8008ffc:	f000 fc88 	bl	8009910 <_sbrk_r>
 8009000:	1c43      	adds	r3, r0, #1
 8009002:	d124      	bne.n	800904e <_malloc_r+0x92>
 8009004:	230c      	movs	r3, #12
 8009006:	4630      	mov	r0, r6
 8009008:	6033      	str	r3, [r6, #0]
 800900a:	f001 fb3d 	bl	800a688 <__malloc_unlock>
 800900e:	e7e4      	b.n	8008fda <_malloc_r+0x1e>
 8009010:	680b      	ldr	r3, [r1, #0]
 8009012:	1b5b      	subs	r3, r3, r5
 8009014:	d418      	bmi.n	8009048 <_malloc_r+0x8c>
 8009016:	2b0b      	cmp	r3, #11
 8009018:	d90f      	bls.n	800903a <_malloc_r+0x7e>
 800901a:	600b      	str	r3, [r1, #0]
 800901c:	18cc      	adds	r4, r1, r3
 800901e:	50cd      	str	r5, [r1, r3]
 8009020:	4630      	mov	r0, r6
 8009022:	f001 fb31 	bl	800a688 <__malloc_unlock>
 8009026:	f104 000b 	add.w	r0, r4, #11
 800902a:	1d23      	adds	r3, r4, #4
 800902c:	f020 0007 	bic.w	r0, r0, #7
 8009030:	1ac3      	subs	r3, r0, r3
 8009032:	d0d3      	beq.n	8008fdc <_malloc_r+0x20>
 8009034:	425a      	negs	r2, r3
 8009036:	50e2      	str	r2, [r4, r3]
 8009038:	e7d0      	b.n	8008fdc <_malloc_r+0x20>
 800903a:	684b      	ldr	r3, [r1, #4]
 800903c:	428c      	cmp	r4, r1
 800903e:	bf16      	itet	ne
 8009040:	6063      	strne	r3, [r4, #4]
 8009042:	6013      	streq	r3, [r2, #0]
 8009044:	460c      	movne	r4, r1
 8009046:	e7eb      	b.n	8009020 <_malloc_r+0x64>
 8009048:	460c      	mov	r4, r1
 800904a:	6849      	ldr	r1, [r1, #4]
 800904c:	e7cc      	b.n	8008fe8 <_malloc_r+0x2c>
 800904e:	1cc4      	adds	r4, r0, #3
 8009050:	f024 0403 	bic.w	r4, r4, #3
 8009054:	42a0      	cmp	r0, r4
 8009056:	d005      	beq.n	8009064 <_malloc_r+0xa8>
 8009058:	1a21      	subs	r1, r4, r0
 800905a:	4630      	mov	r0, r6
 800905c:	f000 fc58 	bl	8009910 <_sbrk_r>
 8009060:	3001      	adds	r0, #1
 8009062:	d0cf      	beq.n	8009004 <_malloc_r+0x48>
 8009064:	6025      	str	r5, [r4, #0]
 8009066:	e7db      	b.n	8009020 <_malloc_r+0x64>
 8009068:	20000244 	.word	0x20000244
 800906c:	20000248 	.word	0x20000248

08009070 <__cvt>:
 8009070:	2b00      	cmp	r3, #0
 8009072:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009076:	461e      	mov	r6, r3
 8009078:	bfbb      	ittet	lt
 800907a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800907e:	461e      	movlt	r6, r3
 8009080:	2300      	movge	r3, #0
 8009082:	232d      	movlt	r3, #45	; 0x2d
 8009084:	b088      	sub	sp, #32
 8009086:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009088:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800908c:	f027 0720 	bic.w	r7, r7, #32
 8009090:	2f46      	cmp	r7, #70	; 0x46
 8009092:	4614      	mov	r4, r2
 8009094:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009096:	700b      	strb	r3, [r1, #0]
 8009098:	d004      	beq.n	80090a4 <__cvt+0x34>
 800909a:	2f45      	cmp	r7, #69	; 0x45
 800909c:	d100      	bne.n	80090a0 <__cvt+0x30>
 800909e:	3501      	adds	r5, #1
 80090a0:	2302      	movs	r3, #2
 80090a2:	e000      	b.n	80090a6 <__cvt+0x36>
 80090a4:	2303      	movs	r3, #3
 80090a6:	aa07      	add	r2, sp, #28
 80090a8:	9204      	str	r2, [sp, #16]
 80090aa:	aa06      	add	r2, sp, #24
 80090ac:	e9cd a202 	strd	sl, r2, [sp, #8]
 80090b0:	e9cd 3500 	strd	r3, r5, [sp]
 80090b4:	4622      	mov	r2, r4
 80090b6:	4633      	mov	r3, r6
 80090b8:	f000 fd0a 	bl	8009ad0 <_dtoa_r>
 80090bc:	2f47      	cmp	r7, #71	; 0x47
 80090be:	4680      	mov	r8, r0
 80090c0:	d102      	bne.n	80090c8 <__cvt+0x58>
 80090c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090c4:	07db      	lsls	r3, r3, #31
 80090c6:	d526      	bpl.n	8009116 <__cvt+0xa6>
 80090c8:	2f46      	cmp	r7, #70	; 0x46
 80090ca:	eb08 0905 	add.w	r9, r8, r5
 80090ce:	d111      	bne.n	80090f4 <__cvt+0x84>
 80090d0:	f898 3000 	ldrb.w	r3, [r8]
 80090d4:	2b30      	cmp	r3, #48	; 0x30
 80090d6:	d10a      	bne.n	80090ee <__cvt+0x7e>
 80090d8:	2200      	movs	r2, #0
 80090da:	2300      	movs	r3, #0
 80090dc:	4620      	mov	r0, r4
 80090de:	4631      	mov	r1, r6
 80090e0:	f7f7 fcce 	bl	8000a80 <__aeabi_dcmpeq>
 80090e4:	b918      	cbnz	r0, 80090ee <__cvt+0x7e>
 80090e6:	f1c5 0501 	rsb	r5, r5, #1
 80090ea:	f8ca 5000 	str.w	r5, [sl]
 80090ee:	f8da 3000 	ldr.w	r3, [sl]
 80090f2:	4499      	add	r9, r3
 80090f4:	2200      	movs	r2, #0
 80090f6:	2300      	movs	r3, #0
 80090f8:	4620      	mov	r0, r4
 80090fa:	4631      	mov	r1, r6
 80090fc:	f7f7 fcc0 	bl	8000a80 <__aeabi_dcmpeq>
 8009100:	b938      	cbnz	r0, 8009112 <__cvt+0xa2>
 8009102:	2230      	movs	r2, #48	; 0x30
 8009104:	9b07      	ldr	r3, [sp, #28]
 8009106:	454b      	cmp	r3, r9
 8009108:	d205      	bcs.n	8009116 <__cvt+0xa6>
 800910a:	1c59      	adds	r1, r3, #1
 800910c:	9107      	str	r1, [sp, #28]
 800910e:	701a      	strb	r2, [r3, #0]
 8009110:	e7f8      	b.n	8009104 <__cvt+0x94>
 8009112:	f8cd 901c 	str.w	r9, [sp, #28]
 8009116:	4640      	mov	r0, r8
 8009118:	9b07      	ldr	r3, [sp, #28]
 800911a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800911c:	eba3 0308 	sub.w	r3, r3, r8
 8009120:	6013      	str	r3, [r2, #0]
 8009122:	b008      	add	sp, #32
 8009124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009128 <__exponent>:
 8009128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800912a:	2900      	cmp	r1, #0
 800912c:	bfb4      	ite	lt
 800912e:	232d      	movlt	r3, #45	; 0x2d
 8009130:	232b      	movge	r3, #43	; 0x2b
 8009132:	4604      	mov	r4, r0
 8009134:	bfb8      	it	lt
 8009136:	4249      	neglt	r1, r1
 8009138:	2909      	cmp	r1, #9
 800913a:	f804 2b02 	strb.w	r2, [r4], #2
 800913e:	7043      	strb	r3, [r0, #1]
 8009140:	dd21      	ble.n	8009186 <__exponent+0x5e>
 8009142:	f10d 0307 	add.w	r3, sp, #7
 8009146:	461f      	mov	r7, r3
 8009148:	260a      	movs	r6, #10
 800914a:	fb91 f5f6 	sdiv	r5, r1, r6
 800914e:	fb06 1115 	mls	r1, r6, r5, r1
 8009152:	2d09      	cmp	r5, #9
 8009154:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8009158:	f803 1c01 	strb.w	r1, [r3, #-1]
 800915c:	f103 32ff 	add.w	r2, r3, #4294967295
 8009160:	4629      	mov	r1, r5
 8009162:	dc09      	bgt.n	8009178 <__exponent+0x50>
 8009164:	3130      	adds	r1, #48	; 0x30
 8009166:	3b02      	subs	r3, #2
 8009168:	f802 1c01 	strb.w	r1, [r2, #-1]
 800916c:	42bb      	cmp	r3, r7
 800916e:	4622      	mov	r2, r4
 8009170:	d304      	bcc.n	800917c <__exponent+0x54>
 8009172:	1a10      	subs	r0, r2, r0
 8009174:	b003      	add	sp, #12
 8009176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009178:	4613      	mov	r3, r2
 800917a:	e7e6      	b.n	800914a <__exponent+0x22>
 800917c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009180:	f804 2b01 	strb.w	r2, [r4], #1
 8009184:	e7f2      	b.n	800916c <__exponent+0x44>
 8009186:	2330      	movs	r3, #48	; 0x30
 8009188:	4419      	add	r1, r3
 800918a:	7083      	strb	r3, [r0, #2]
 800918c:	1d02      	adds	r2, r0, #4
 800918e:	70c1      	strb	r1, [r0, #3]
 8009190:	e7ef      	b.n	8009172 <__exponent+0x4a>
	...

08009194 <_printf_float>:
 8009194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009198:	b091      	sub	sp, #68	; 0x44
 800919a:	460c      	mov	r4, r1
 800919c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800919e:	4693      	mov	fp, r2
 80091a0:	461e      	mov	r6, r3
 80091a2:	4605      	mov	r5, r0
 80091a4:	f001 fa48 	bl	800a638 <_localeconv_r>
 80091a8:	6803      	ldr	r3, [r0, #0]
 80091aa:	4618      	mov	r0, r3
 80091ac:	9309      	str	r3, [sp, #36]	; 0x24
 80091ae:	f7f7 f83b 	bl	8000228 <strlen>
 80091b2:	2300      	movs	r3, #0
 80091b4:	930e      	str	r3, [sp, #56]	; 0x38
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	900a      	str	r0, [sp, #40]	; 0x28
 80091ba:	3307      	adds	r3, #7
 80091bc:	f023 0307 	bic.w	r3, r3, #7
 80091c0:	f103 0208 	add.w	r2, r3, #8
 80091c4:	f894 8018 	ldrb.w	r8, [r4, #24]
 80091c8:	f8d4 a000 	ldr.w	sl, [r4]
 80091cc:	603a      	str	r2, [r7, #0]
 80091ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80091d6:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80091da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80091de:	930b      	str	r3, [sp, #44]	; 0x2c
 80091e0:	f04f 32ff 	mov.w	r2, #4294967295
 80091e4:	4ba6      	ldr	r3, [pc, #664]	; (8009480 <_printf_float+0x2ec>)
 80091e6:	4638      	mov	r0, r7
 80091e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80091ea:	f7f7 fc7b 	bl	8000ae4 <__aeabi_dcmpun>
 80091ee:	bb68      	cbnz	r0, 800924c <_printf_float+0xb8>
 80091f0:	f04f 32ff 	mov.w	r2, #4294967295
 80091f4:	4ba2      	ldr	r3, [pc, #648]	; (8009480 <_printf_float+0x2ec>)
 80091f6:	4638      	mov	r0, r7
 80091f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80091fa:	f7f7 fc55 	bl	8000aa8 <__aeabi_dcmple>
 80091fe:	bb28      	cbnz	r0, 800924c <_printf_float+0xb8>
 8009200:	2200      	movs	r2, #0
 8009202:	2300      	movs	r3, #0
 8009204:	4638      	mov	r0, r7
 8009206:	4649      	mov	r1, r9
 8009208:	f7f7 fc44 	bl	8000a94 <__aeabi_dcmplt>
 800920c:	b110      	cbz	r0, 8009214 <_printf_float+0x80>
 800920e:	232d      	movs	r3, #45	; 0x2d
 8009210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009214:	4f9b      	ldr	r7, [pc, #620]	; (8009484 <_printf_float+0x2f0>)
 8009216:	4b9c      	ldr	r3, [pc, #624]	; (8009488 <_printf_float+0x2f4>)
 8009218:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800921c:	bf98      	it	ls
 800921e:	461f      	movls	r7, r3
 8009220:	2303      	movs	r3, #3
 8009222:	f04f 0900 	mov.w	r9, #0
 8009226:	6123      	str	r3, [r4, #16]
 8009228:	f02a 0304 	bic.w	r3, sl, #4
 800922c:	6023      	str	r3, [r4, #0]
 800922e:	9600      	str	r6, [sp, #0]
 8009230:	465b      	mov	r3, fp
 8009232:	aa0f      	add	r2, sp, #60	; 0x3c
 8009234:	4621      	mov	r1, r4
 8009236:	4628      	mov	r0, r5
 8009238:	f000 f9e2 	bl	8009600 <_printf_common>
 800923c:	3001      	adds	r0, #1
 800923e:	f040 8090 	bne.w	8009362 <_printf_float+0x1ce>
 8009242:	f04f 30ff 	mov.w	r0, #4294967295
 8009246:	b011      	add	sp, #68	; 0x44
 8009248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800924c:	463a      	mov	r2, r7
 800924e:	464b      	mov	r3, r9
 8009250:	4638      	mov	r0, r7
 8009252:	4649      	mov	r1, r9
 8009254:	f7f7 fc46 	bl	8000ae4 <__aeabi_dcmpun>
 8009258:	b110      	cbz	r0, 8009260 <_printf_float+0xcc>
 800925a:	4f8c      	ldr	r7, [pc, #560]	; (800948c <_printf_float+0x2f8>)
 800925c:	4b8c      	ldr	r3, [pc, #560]	; (8009490 <_printf_float+0x2fc>)
 800925e:	e7db      	b.n	8009218 <_printf_float+0x84>
 8009260:	6863      	ldr	r3, [r4, #4]
 8009262:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8009266:	1c59      	adds	r1, r3, #1
 8009268:	a80d      	add	r0, sp, #52	; 0x34
 800926a:	a90e      	add	r1, sp, #56	; 0x38
 800926c:	d140      	bne.n	80092f0 <_printf_float+0x15c>
 800926e:	2306      	movs	r3, #6
 8009270:	6063      	str	r3, [r4, #4]
 8009272:	f04f 0c00 	mov.w	ip, #0
 8009276:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800927a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800927e:	6863      	ldr	r3, [r4, #4]
 8009280:	6022      	str	r2, [r4, #0]
 8009282:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8009286:	9300      	str	r3, [sp, #0]
 8009288:	463a      	mov	r2, r7
 800928a:	464b      	mov	r3, r9
 800928c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8009290:	4628      	mov	r0, r5
 8009292:	f7ff feed 	bl	8009070 <__cvt>
 8009296:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800929a:	2b47      	cmp	r3, #71	; 0x47
 800929c:	4607      	mov	r7, r0
 800929e:	d109      	bne.n	80092b4 <_printf_float+0x120>
 80092a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092a2:	1cd8      	adds	r0, r3, #3
 80092a4:	db02      	blt.n	80092ac <_printf_float+0x118>
 80092a6:	6862      	ldr	r2, [r4, #4]
 80092a8:	4293      	cmp	r3, r2
 80092aa:	dd47      	ble.n	800933c <_printf_float+0x1a8>
 80092ac:	f1a8 0802 	sub.w	r8, r8, #2
 80092b0:	fa5f f888 	uxtb.w	r8, r8
 80092b4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80092b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80092ba:	d824      	bhi.n	8009306 <_printf_float+0x172>
 80092bc:	3901      	subs	r1, #1
 80092be:	4642      	mov	r2, r8
 80092c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80092c4:	910d      	str	r1, [sp, #52]	; 0x34
 80092c6:	f7ff ff2f 	bl	8009128 <__exponent>
 80092ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092cc:	4681      	mov	r9, r0
 80092ce:	1813      	adds	r3, r2, r0
 80092d0:	2a01      	cmp	r2, #1
 80092d2:	6123      	str	r3, [r4, #16]
 80092d4:	dc02      	bgt.n	80092dc <_printf_float+0x148>
 80092d6:	6822      	ldr	r2, [r4, #0]
 80092d8:	07d1      	lsls	r1, r2, #31
 80092da:	d501      	bpl.n	80092e0 <_printf_float+0x14c>
 80092dc:	3301      	adds	r3, #1
 80092de:	6123      	str	r3, [r4, #16]
 80092e0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d0a2      	beq.n	800922e <_printf_float+0x9a>
 80092e8:	232d      	movs	r3, #45	; 0x2d
 80092ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092ee:	e79e      	b.n	800922e <_printf_float+0x9a>
 80092f0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80092f4:	f000 816e 	beq.w	80095d4 <_printf_float+0x440>
 80092f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80092fc:	d1b9      	bne.n	8009272 <_printf_float+0xde>
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1b7      	bne.n	8009272 <_printf_float+0xde>
 8009302:	2301      	movs	r3, #1
 8009304:	e7b4      	b.n	8009270 <_printf_float+0xdc>
 8009306:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800930a:	d119      	bne.n	8009340 <_printf_float+0x1ac>
 800930c:	2900      	cmp	r1, #0
 800930e:	6863      	ldr	r3, [r4, #4]
 8009310:	dd0c      	ble.n	800932c <_printf_float+0x198>
 8009312:	6121      	str	r1, [r4, #16]
 8009314:	b913      	cbnz	r3, 800931c <_printf_float+0x188>
 8009316:	6822      	ldr	r2, [r4, #0]
 8009318:	07d2      	lsls	r2, r2, #31
 800931a:	d502      	bpl.n	8009322 <_printf_float+0x18e>
 800931c:	3301      	adds	r3, #1
 800931e:	440b      	add	r3, r1
 8009320:	6123      	str	r3, [r4, #16]
 8009322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009324:	f04f 0900 	mov.w	r9, #0
 8009328:	65a3      	str	r3, [r4, #88]	; 0x58
 800932a:	e7d9      	b.n	80092e0 <_printf_float+0x14c>
 800932c:	b913      	cbnz	r3, 8009334 <_printf_float+0x1a0>
 800932e:	6822      	ldr	r2, [r4, #0]
 8009330:	07d0      	lsls	r0, r2, #31
 8009332:	d501      	bpl.n	8009338 <_printf_float+0x1a4>
 8009334:	3302      	adds	r3, #2
 8009336:	e7f3      	b.n	8009320 <_printf_float+0x18c>
 8009338:	2301      	movs	r3, #1
 800933a:	e7f1      	b.n	8009320 <_printf_float+0x18c>
 800933c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8009340:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009344:	4293      	cmp	r3, r2
 8009346:	db05      	blt.n	8009354 <_printf_float+0x1c0>
 8009348:	6822      	ldr	r2, [r4, #0]
 800934a:	6123      	str	r3, [r4, #16]
 800934c:	07d1      	lsls	r1, r2, #31
 800934e:	d5e8      	bpl.n	8009322 <_printf_float+0x18e>
 8009350:	3301      	adds	r3, #1
 8009352:	e7e5      	b.n	8009320 <_printf_float+0x18c>
 8009354:	2b00      	cmp	r3, #0
 8009356:	bfcc      	ite	gt
 8009358:	2301      	movgt	r3, #1
 800935a:	f1c3 0302 	rsble	r3, r3, #2
 800935e:	4413      	add	r3, r2
 8009360:	e7de      	b.n	8009320 <_printf_float+0x18c>
 8009362:	6823      	ldr	r3, [r4, #0]
 8009364:	055a      	lsls	r2, r3, #21
 8009366:	d407      	bmi.n	8009378 <_printf_float+0x1e4>
 8009368:	6923      	ldr	r3, [r4, #16]
 800936a:	463a      	mov	r2, r7
 800936c:	4659      	mov	r1, fp
 800936e:	4628      	mov	r0, r5
 8009370:	47b0      	blx	r6
 8009372:	3001      	adds	r0, #1
 8009374:	d129      	bne.n	80093ca <_printf_float+0x236>
 8009376:	e764      	b.n	8009242 <_printf_float+0xae>
 8009378:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800937c:	f240 80d7 	bls.w	800952e <_printf_float+0x39a>
 8009380:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009384:	2200      	movs	r2, #0
 8009386:	2300      	movs	r3, #0
 8009388:	f7f7 fb7a 	bl	8000a80 <__aeabi_dcmpeq>
 800938c:	b388      	cbz	r0, 80093f2 <_printf_float+0x25e>
 800938e:	2301      	movs	r3, #1
 8009390:	4a40      	ldr	r2, [pc, #256]	; (8009494 <_printf_float+0x300>)
 8009392:	4659      	mov	r1, fp
 8009394:	4628      	mov	r0, r5
 8009396:	47b0      	blx	r6
 8009398:	3001      	adds	r0, #1
 800939a:	f43f af52 	beq.w	8009242 <_printf_float+0xae>
 800939e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80093a2:	429a      	cmp	r2, r3
 80093a4:	db02      	blt.n	80093ac <_printf_float+0x218>
 80093a6:	6823      	ldr	r3, [r4, #0]
 80093a8:	07d8      	lsls	r0, r3, #31
 80093aa:	d50e      	bpl.n	80093ca <_printf_float+0x236>
 80093ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093b0:	4659      	mov	r1, fp
 80093b2:	4628      	mov	r0, r5
 80093b4:	47b0      	blx	r6
 80093b6:	3001      	adds	r0, #1
 80093b8:	f43f af43 	beq.w	8009242 <_printf_float+0xae>
 80093bc:	2700      	movs	r7, #0
 80093be:	f104 081a 	add.w	r8, r4, #26
 80093c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093c4:	3b01      	subs	r3, #1
 80093c6:	42bb      	cmp	r3, r7
 80093c8:	dc09      	bgt.n	80093de <_printf_float+0x24a>
 80093ca:	6823      	ldr	r3, [r4, #0]
 80093cc:	079f      	lsls	r7, r3, #30
 80093ce:	f100 80fd 	bmi.w	80095cc <_printf_float+0x438>
 80093d2:	68e0      	ldr	r0, [r4, #12]
 80093d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093d6:	4298      	cmp	r0, r3
 80093d8:	bfb8      	it	lt
 80093da:	4618      	movlt	r0, r3
 80093dc:	e733      	b.n	8009246 <_printf_float+0xb2>
 80093de:	2301      	movs	r3, #1
 80093e0:	4642      	mov	r2, r8
 80093e2:	4659      	mov	r1, fp
 80093e4:	4628      	mov	r0, r5
 80093e6:	47b0      	blx	r6
 80093e8:	3001      	adds	r0, #1
 80093ea:	f43f af2a 	beq.w	8009242 <_printf_float+0xae>
 80093ee:	3701      	adds	r7, #1
 80093f0:	e7e7      	b.n	80093c2 <_printf_float+0x22e>
 80093f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	dc2b      	bgt.n	8009450 <_printf_float+0x2bc>
 80093f8:	2301      	movs	r3, #1
 80093fa:	4a26      	ldr	r2, [pc, #152]	; (8009494 <_printf_float+0x300>)
 80093fc:	4659      	mov	r1, fp
 80093fe:	4628      	mov	r0, r5
 8009400:	47b0      	blx	r6
 8009402:	3001      	adds	r0, #1
 8009404:	f43f af1d 	beq.w	8009242 <_printf_float+0xae>
 8009408:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800940a:	b923      	cbnz	r3, 8009416 <_printf_float+0x282>
 800940c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800940e:	b913      	cbnz	r3, 8009416 <_printf_float+0x282>
 8009410:	6823      	ldr	r3, [r4, #0]
 8009412:	07d9      	lsls	r1, r3, #31
 8009414:	d5d9      	bpl.n	80093ca <_printf_float+0x236>
 8009416:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800941a:	4659      	mov	r1, fp
 800941c:	4628      	mov	r0, r5
 800941e:	47b0      	blx	r6
 8009420:	3001      	adds	r0, #1
 8009422:	f43f af0e 	beq.w	8009242 <_printf_float+0xae>
 8009426:	f04f 0800 	mov.w	r8, #0
 800942a:	f104 091a 	add.w	r9, r4, #26
 800942e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009430:	425b      	negs	r3, r3
 8009432:	4543      	cmp	r3, r8
 8009434:	dc01      	bgt.n	800943a <_printf_float+0x2a6>
 8009436:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009438:	e797      	b.n	800936a <_printf_float+0x1d6>
 800943a:	2301      	movs	r3, #1
 800943c:	464a      	mov	r2, r9
 800943e:	4659      	mov	r1, fp
 8009440:	4628      	mov	r0, r5
 8009442:	47b0      	blx	r6
 8009444:	3001      	adds	r0, #1
 8009446:	f43f aefc 	beq.w	8009242 <_printf_float+0xae>
 800944a:	f108 0801 	add.w	r8, r8, #1
 800944e:	e7ee      	b.n	800942e <_printf_float+0x29a>
 8009450:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009452:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009454:	429a      	cmp	r2, r3
 8009456:	bfa8      	it	ge
 8009458:	461a      	movge	r2, r3
 800945a:	2a00      	cmp	r2, #0
 800945c:	4690      	mov	r8, r2
 800945e:	dd07      	ble.n	8009470 <_printf_float+0x2dc>
 8009460:	4613      	mov	r3, r2
 8009462:	4659      	mov	r1, fp
 8009464:	463a      	mov	r2, r7
 8009466:	4628      	mov	r0, r5
 8009468:	47b0      	blx	r6
 800946a:	3001      	adds	r0, #1
 800946c:	f43f aee9 	beq.w	8009242 <_printf_float+0xae>
 8009470:	f104 031a 	add.w	r3, r4, #26
 8009474:	f04f 0a00 	mov.w	sl, #0
 8009478:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800947c:	930b      	str	r3, [sp, #44]	; 0x2c
 800947e:	e015      	b.n	80094ac <_printf_float+0x318>
 8009480:	7fefffff 	.word	0x7fefffff
 8009484:	0800b0c4 	.word	0x0800b0c4
 8009488:	0800b0c0 	.word	0x0800b0c0
 800948c:	0800b0cc 	.word	0x0800b0cc
 8009490:	0800b0c8 	.word	0x0800b0c8
 8009494:	0800b0d0 	.word	0x0800b0d0
 8009498:	2301      	movs	r3, #1
 800949a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800949c:	4659      	mov	r1, fp
 800949e:	4628      	mov	r0, r5
 80094a0:	47b0      	blx	r6
 80094a2:	3001      	adds	r0, #1
 80094a4:	f43f aecd 	beq.w	8009242 <_printf_float+0xae>
 80094a8:	f10a 0a01 	add.w	sl, sl, #1
 80094ac:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80094b0:	eba9 0308 	sub.w	r3, r9, r8
 80094b4:	4553      	cmp	r3, sl
 80094b6:	dcef      	bgt.n	8009498 <_printf_float+0x304>
 80094b8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80094bc:	429a      	cmp	r2, r3
 80094be:	444f      	add	r7, r9
 80094c0:	db14      	blt.n	80094ec <_printf_float+0x358>
 80094c2:	6823      	ldr	r3, [r4, #0]
 80094c4:	07da      	lsls	r2, r3, #31
 80094c6:	d411      	bmi.n	80094ec <_printf_float+0x358>
 80094c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 80094cc:	eba3 0209 	sub.w	r2, r3, r9
 80094d0:	eba3 0901 	sub.w	r9, r3, r1
 80094d4:	4591      	cmp	r9, r2
 80094d6:	bfa8      	it	ge
 80094d8:	4691      	movge	r9, r2
 80094da:	f1b9 0f00 	cmp.w	r9, #0
 80094de:	dc0d      	bgt.n	80094fc <_printf_float+0x368>
 80094e0:	2700      	movs	r7, #0
 80094e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80094e6:	f104 081a 	add.w	r8, r4, #26
 80094ea:	e018      	b.n	800951e <_printf_float+0x38a>
 80094ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094f0:	4659      	mov	r1, fp
 80094f2:	4628      	mov	r0, r5
 80094f4:	47b0      	blx	r6
 80094f6:	3001      	adds	r0, #1
 80094f8:	d1e6      	bne.n	80094c8 <_printf_float+0x334>
 80094fa:	e6a2      	b.n	8009242 <_printf_float+0xae>
 80094fc:	464b      	mov	r3, r9
 80094fe:	463a      	mov	r2, r7
 8009500:	4659      	mov	r1, fp
 8009502:	4628      	mov	r0, r5
 8009504:	47b0      	blx	r6
 8009506:	3001      	adds	r0, #1
 8009508:	d1ea      	bne.n	80094e0 <_printf_float+0x34c>
 800950a:	e69a      	b.n	8009242 <_printf_float+0xae>
 800950c:	2301      	movs	r3, #1
 800950e:	4642      	mov	r2, r8
 8009510:	4659      	mov	r1, fp
 8009512:	4628      	mov	r0, r5
 8009514:	47b0      	blx	r6
 8009516:	3001      	adds	r0, #1
 8009518:	f43f ae93 	beq.w	8009242 <_printf_float+0xae>
 800951c:	3701      	adds	r7, #1
 800951e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009522:	1a9b      	subs	r3, r3, r2
 8009524:	eba3 0309 	sub.w	r3, r3, r9
 8009528:	42bb      	cmp	r3, r7
 800952a:	dcef      	bgt.n	800950c <_printf_float+0x378>
 800952c:	e74d      	b.n	80093ca <_printf_float+0x236>
 800952e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009530:	2a01      	cmp	r2, #1
 8009532:	dc01      	bgt.n	8009538 <_printf_float+0x3a4>
 8009534:	07db      	lsls	r3, r3, #31
 8009536:	d538      	bpl.n	80095aa <_printf_float+0x416>
 8009538:	2301      	movs	r3, #1
 800953a:	463a      	mov	r2, r7
 800953c:	4659      	mov	r1, fp
 800953e:	4628      	mov	r0, r5
 8009540:	47b0      	blx	r6
 8009542:	3001      	adds	r0, #1
 8009544:	f43f ae7d 	beq.w	8009242 <_printf_float+0xae>
 8009548:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800954c:	4659      	mov	r1, fp
 800954e:	4628      	mov	r0, r5
 8009550:	47b0      	blx	r6
 8009552:	3001      	adds	r0, #1
 8009554:	f107 0701 	add.w	r7, r7, #1
 8009558:	f43f ae73 	beq.w	8009242 <_printf_float+0xae>
 800955c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009560:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009562:	2200      	movs	r2, #0
 8009564:	f103 38ff 	add.w	r8, r3, #4294967295
 8009568:	2300      	movs	r3, #0
 800956a:	f7f7 fa89 	bl	8000a80 <__aeabi_dcmpeq>
 800956e:	b9c0      	cbnz	r0, 80095a2 <_printf_float+0x40e>
 8009570:	4643      	mov	r3, r8
 8009572:	463a      	mov	r2, r7
 8009574:	4659      	mov	r1, fp
 8009576:	4628      	mov	r0, r5
 8009578:	47b0      	blx	r6
 800957a:	3001      	adds	r0, #1
 800957c:	d10d      	bne.n	800959a <_printf_float+0x406>
 800957e:	e660      	b.n	8009242 <_printf_float+0xae>
 8009580:	2301      	movs	r3, #1
 8009582:	4642      	mov	r2, r8
 8009584:	4659      	mov	r1, fp
 8009586:	4628      	mov	r0, r5
 8009588:	47b0      	blx	r6
 800958a:	3001      	adds	r0, #1
 800958c:	f43f ae59 	beq.w	8009242 <_printf_float+0xae>
 8009590:	3701      	adds	r7, #1
 8009592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009594:	3b01      	subs	r3, #1
 8009596:	42bb      	cmp	r3, r7
 8009598:	dcf2      	bgt.n	8009580 <_printf_float+0x3ec>
 800959a:	464b      	mov	r3, r9
 800959c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80095a0:	e6e4      	b.n	800936c <_printf_float+0x1d8>
 80095a2:	2700      	movs	r7, #0
 80095a4:	f104 081a 	add.w	r8, r4, #26
 80095a8:	e7f3      	b.n	8009592 <_printf_float+0x3fe>
 80095aa:	2301      	movs	r3, #1
 80095ac:	e7e1      	b.n	8009572 <_printf_float+0x3de>
 80095ae:	2301      	movs	r3, #1
 80095b0:	4642      	mov	r2, r8
 80095b2:	4659      	mov	r1, fp
 80095b4:	4628      	mov	r0, r5
 80095b6:	47b0      	blx	r6
 80095b8:	3001      	adds	r0, #1
 80095ba:	f43f ae42 	beq.w	8009242 <_printf_float+0xae>
 80095be:	3701      	adds	r7, #1
 80095c0:	68e3      	ldr	r3, [r4, #12]
 80095c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80095c4:	1a9b      	subs	r3, r3, r2
 80095c6:	42bb      	cmp	r3, r7
 80095c8:	dcf1      	bgt.n	80095ae <_printf_float+0x41a>
 80095ca:	e702      	b.n	80093d2 <_printf_float+0x23e>
 80095cc:	2700      	movs	r7, #0
 80095ce:	f104 0819 	add.w	r8, r4, #25
 80095d2:	e7f5      	b.n	80095c0 <_printf_float+0x42c>
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f43f ae94 	beq.w	8009302 <_printf_float+0x16e>
 80095da:	f04f 0c00 	mov.w	ip, #0
 80095de:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80095e2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80095e6:	6022      	str	r2, [r4, #0]
 80095e8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80095ec:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	463a      	mov	r2, r7
 80095f4:	464b      	mov	r3, r9
 80095f6:	4628      	mov	r0, r5
 80095f8:	f7ff fd3a 	bl	8009070 <__cvt>
 80095fc:	4607      	mov	r7, r0
 80095fe:	e64f      	b.n	80092a0 <_printf_float+0x10c>

08009600 <_printf_common>:
 8009600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009604:	4691      	mov	r9, r2
 8009606:	461f      	mov	r7, r3
 8009608:	688a      	ldr	r2, [r1, #8]
 800960a:	690b      	ldr	r3, [r1, #16]
 800960c:	4606      	mov	r6, r0
 800960e:	4293      	cmp	r3, r2
 8009610:	bfb8      	it	lt
 8009612:	4613      	movlt	r3, r2
 8009614:	f8c9 3000 	str.w	r3, [r9]
 8009618:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800961c:	460c      	mov	r4, r1
 800961e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009622:	b112      	cbz	r2, 800962a <_printf_common+0x2a>
 8009624:	3301      	adds	r3, #1
 8009626:	f8c9 3000 	str.w	r3, [r9]
 800962a:	6823      	ldr	r3, [r4, #0]
 800962c:	0699      	lsls	r1, r3, #26
 800962e:	bf42      	ittt	mi
 8009630:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009634:	3302      	addmi	r3, #2
 8009636:	f8c9 3000 	strmi.w	r3, [r9]
 800963a:	6825      	ldr	r5, [r4, #0]
 800963c:	f015 0506 	ands.w	r5, r5, #6
 8009640:	d107      	bne.n	8009652 <_printf_common+0x52>
 8009642:	f104 0a19 	add.w	sl, r4, #25
 8009646:	68e3      	ldr	r3, [r4, #12]
 8009648:	f8d9 2000 	ldr.w	r2, [r9]
 800964c:	1a9b      	subs	r3, r3, r2
 800964e:	42ab      	cmp	r3, r5
 8009650:	dc29      	bgt.n	80096a6 <_printf_common+0xa6>
 8009652:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009656:	6822      	ldr	r2, [r4, #0]
 8009658:	3300      	adds	r3, #0
 800965a:	bf18      	it	ne
 800965c:	2301      	movne	r3, #1
 800965e:	0692      	lsls	r2, r2, #26
 8009660:	d42e      	bmi.n	80096c0 <_printf_common+0xc0>
 8009662:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009666:	4639      	mov	r1, r7
 8009668:	4630      	mov	r0, r6
 800966a:	47c0      	blx	r8
 800966c:	3001      	adds	r0, #1
 800966e:	d021      	beq.n	80096b4 <_printf_common+0xb4>
 8009670:	6823      	ldr	r3, [r4, #0]
 8009672:	68e5      	ldr	r5, [r4, #12]
 8009674:	f003 0306 	and.w	r3, r3, #6
 8009678:	2b04      	cmp	r3, #4
 800967a:	bf18      	it	ne
 800967c:	2500      	movne	r5, #0
 800967e:	f8d9 2000 	ldr.w	r2, [r9]
 8009682:	f04f 0900 	mov.w	r9, #0
 8009686:	bf08      	it	eq
 8009688:	1aad      	subeq	r5, r5, r2
 800968a:	68a3      	ldr	r3, [r4, #8]
 800968c:	6922      	ldr	r2, [r4, #16]
 800968e:	bf08      	it	eq
 8009690:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009694:	4293      	cmp	r3, r2
 8009696:	bfc4      	itt	gt
 8009698:	1a9b      	subgt	r3, r3, r2
 800969a:	18ed      	addgt	r5, r5, r3
 800969c:	341a      	adds	r4, #26
 800969e:	454d      	cmp	r5, r9
 80096a0:	d11a      	bne.n	80096d8 <_printf_common+0xd8>
 80096a2:	2000      	movs	r0, #0
 80096a4:	e008      	b.n	80096b8 <_printf_common+0xb8>
 80096a6:	2301      	movs	r3, #1
 80096a8:	4652      	mov	r2, sl
 80096aa:	4639      	mov	r1, r7
 80096ac:	4630      	mov	r0, r6
 80096ae:	47c0      	blx	r8
 80096b0:	3001      	adds	r0, #1
 80096b2:	d103      	bne.n	80096bc <_printf_common+0xbc>
 80096b4:	f04f 30ff 	mov.w	r0, #4294967295
 80096b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096bc:	3501      	adds	r5, #1
 80096be:	e7c2      	b.n	8009646 <_printf_common+0x46>
 80096c0:	2030      	movs	r0, #48	; 0x30
 80096c2:	18e1      	adds	r1, r4, r3
 80096c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80096c8:	1c5a      	adds	r2, r3, #1
 80096ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80096ce:	4422      	add	r2, r4
 80096d0:	3302      	adds	r3, #2
 80096d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80096d6:	e7c4      	b.n	8009662 <_printf_common+0x62>
 80096d8:	2301      	movs	r3, #1
 80096da:	4622      	mov	r2, r4
 80096dc:	4639      	mov	r1, r7
 80096de:	4630      	mov	r0, r6
 80096e0:	47c0      	blx	r8
 80096e2:	3001      	adds	r0, #1
 80096e4:	d0e6      	beq.n	80096b4 <_printf_common+0xb4>
 80096e6:	f109 0901 	add.w	r9, r9, #1
 80096ea:	e7d8      	b.n	800969e <_printf_common+0x9e>

080096ec <_printf_i>:
 80096ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80096f4:	460c      	mov	r4, r1
 80096f6:	7e09      	ldrb	r1, [r1, #24]
 80096f8:	b085      	sub	sp, #20
 80096fa:	296e      	cmp	r1, #110	; 0x6e
 80096fc:	4617      	mov	r7, r2
 80096fe:	4606      	mov	r6, r0
 8009700:	4698      	mov	r8, r3
 8009702:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009704:	f000 80b3 	beq.w	800986e <_printf_i+0x182>
 8009708:	d822      	bhi.n	8009750 <_printf_i+0x64>
 800970a:	2963      	cmp	r1, #99	; 0x63
 800970c:	d036      	beq.n	800977c <_printf_i+0x90>
 800970e:	d80a      	bhi.n	8009726 <_printf_i+0x3a>
 8009710:	2900      	cmp	r1, #0
 8009712:	f000 80b9 	beq.w	8009888 <_printf_i+0x19c>
 8009716:	2958      	cmp	r1, #88	; 0x58
 8009718:	f000 8083 	beq.w	8009822 <_printf_i+0x136>
 800971c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009720:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009724:	e032      	b.n	800978c <_printf_i+0xa0>
 8009726:	2964      	cmp	r1, #100	; 0x64
 8009728:	d001      	beq.n	800972e <_printf_i+0x42>
 800972a:	2969      	cmp	r1, #105	; 0x69
 800972c:	d1f6      	bne.n	800971c <_printf_i+0x30>
 800972e:	6820      	ldr	r0, [r4, #0]
 8009730:	6813      	ldr	r3, [r2, #0]
 8009732:	0605      	lsls	r5, r0, #24
 8009734:	f103 0104 	add.w	r1, r3, #4
 8009738:	d52a      	bpl.n	8009790 <_printf_i+0xa4>
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	6011      	str	r1, [r2, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	da03      	bge.n	800974a <_printf_i+0x5e>
 8009742:	222d      	movs	r2, #45	; 0x2d
 8009744:	425b      	negs	r3, r3
 8009746:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800974a:	486f      	ldr	r0, [pc, #444]	; (8009908 <_printf_i+0x21c>)
 800974c:	220a      	movs	r2, #10
 800974e:	e039      	b.n	80097c4 <_printf_i+0xd8>
 8009750:	2973      	cmp	r1, #115	; 0x73
 8009752:	f000 809d 	beq.w	8009890 <_printf_i+0x1a4>
 8009756:	d808      	bhi.n	800976a <_printf_i+0x7e>
 8009758:	296f      	cmp	r1, #111	; 0x6f
 800975a:	d020      	beq.n	800979e <_printf_i+0xb2>
 800975c:	2970      	cmp	r1, #112	; 0x70
 800975e:	d1dd      	bne.n	800971c <_printf_i+0x30>
 8009760:	6823      	ldr	r3, [r4, #0]
 8009762:	f043 0320 	orr.w	r3, r3, #32
 8009766:	6023      	str	r3, [r4, #0]
 8009768:	e003      	b.n	8009772 <_printf_i+0x86>
 800976a:	2975      	cmp	r1, #117	; 0x75
 800976c:	d017      	beq.n	800979e <_printf_i+0xb2>
 800976e:	2978      	cmp	r1, #120	; 0x78
 8009770:	d1d4      	bne.n	800971c <_printf_i+0x30>
 8009772:	2378      	movs	r3, #120	; 0x78
 8009774:	4865      	ldr	r0, [pc, #404]	; (800990c <_printf_i+0x220>)
 8009776:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800977a:	e055      	b.n	8009828 <_printf_i+0x13c>
 800977c:	6813      	ldr	r3, [r2, #0]
 800977e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009782:	1d19      	adds	r1, r3, #4
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	6011      	str	r1, [r2, #0]
 8009788:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800978c:	2301      	movs	r3, #1
 800978e:	e08c      	b.n	80098aa <_printf_i+0x1be>
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009796:	6011      	str	r1, [r2, #0]
 8009798:	bf18      	it	ne
 800979a:	b21b      	sxthne	r3, r3
 800979c:	e7cf      	b.n	800973e <_printf_i+0x52>
 800979e:	6813      	ldr	r3, [r2, #0]
 80097a0:	6825      	ldr	r5, [r4, #0]
 80097a2:	1d18      	adds	r0, r3, #4
 80097a4:	6010      	str	r0, [r2, #0]
 80097a6:	0628      	lsls	r0, r5, #24
 80097a8:	d501      	bpl.n	80097ae <_printf_i+0xc2>
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	e002      	b.n	80097b4 <_printf_i+0xc8>
 80097ae:	0668      	lsls	r0, r5, #25
 80097b0:	d5fb      	bpl.n	80097aa <_printf_i+0xbe>
 80097b2:	881b      	ldrh	r3, [r3, #0]
 80097b4:	296f      	cmp	r1, #111	; 0x6f
 80097b6:	bf14      	ite	ne
 80097b8:	220a      	movne	r2, #10
 80097ba:	2208      	moveq	r2, #8
 80097bc:	4852      	ldr	r0, [pc, #328]	; (8009908 <_printf_i+0x21c>)
 80097be:	2100      	movs	r1, #0
 80097c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80097c4:	6865      	ldr	r5, [r4, #4]
 80097c6:	2d00      	cmp	r5, #0
 80097c8:	60a5      	str	r5, [r4, #8]
 80097ca:	f2c0 8095 	blt.w	80098f8 <_printf_i+0x20c>
 80097ce:	6821      	ldr	r1, [r4, #0]
 80097d0:	f021 0104 	bic.w	r1, r1, #4
 80097d4:	6021      	str	r1, [r4, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d13d      	bne.n	8009856 <_printf_i+0x16a>
 80097da:	2d00      	cmp	r5, #0
 80097dc:	f040 808e 	bne.w	80098fc <_printf_i+0x210>
 80097e0:	4665      	mov	r5, ip
 80097e2:	2a08      	cmp	r2, #8
 80097e4:	d10b      	bne.n	80097fe <_printf_i+0x112>
 80097e6:	6823      	ldr	r3, [r4, #0]
 80097e8:	07db      	lsls	r3, r3, #31
 80097ea:	d508      	bpl.n	80097fe <_printf_i+0x112>
 80097ec:	6923      	ldr	r3, [r4, #16]
 80097ee:	6862      	ldr	r2, [r4, #4]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	bfde      	ittt	le
 80097f4:	2330      	movle	r3, #48	; 0x30
 80097f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80097fe:	ebac 0305 	sub.w	r3, ip, r5
 8009802:	6123      	str	r3, [r4, #16]
 8009804:	f8cd 8000 	str.w	r8, [sp]
 8009808:	463b      	mov	r3, r7
 800980a:	aa03      	add	r2, sp, #12
 800980c:	4621      	mov	r1, r4
 800980e:	4630      	mov	r0, r6
 8009810:	f7ff fef6 	bl	8009600 <_printf_common>
 8009814:	3001      	adds	r0, #1
 8009816:	d14d      	bne.n	80098b4 <_printf_i+0x1c8>
 8009818:	f04f 30ff 	mov.w	r0, #4294967295
 800981c:	b005      	add	sp, #20
 800981e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009822:	4839      	ldr	r0, [pc, #228]	; (8009908 <_printf_i+0x21c>)
 8009824:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009828:	6813      	ldr	r3, [r2, #0]
 800982a:	6821      	ldr	r1, [r4, #0]
 800982c:	1d1d      	adds	r5, r3, #4
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6015      	str	r5, [r2, #0]
 8009832:	060a      	lsls	r2, r1, #24
 8009834:	d50b      	bpl.n	800984e <_printf_i+0x162>
 8009836:	07ca      	lsls	r2, r1, #31
 8009838:	bf44      	itt	mi
 800983a:	f041 0120 	orrmi.w	r1, r1, #32
 800983e:	6021      	strmi	r1, [r4, #0]
 8009840:	b91b      	cbnz	r3, 800984a <_printf_i+0x15e>
 8009842:	6822      	ldr	r2, [r4, #0]
 8009844:	f022 0220 	bic.w	r2, r2, #32
 8009848:	6022      	str	r2, [r4, #0]
 800984a:	2210      	movs	r2, #16
 800984c:	e7b7      	b.n	80097be <_printf_i+0xd2>
 800984e:	064d      	lsls	r5, r1, #25
 8009850:	bf48      	it	mi
 8009852:	b29b      	uxthmi	r3, r3
 8009854:	e7ef      	b.n	8009836 <_printf_i+0x14a>
 8009856:	4665      	mov	r5, ip
 8009858:	fbb3 f1f2 	udiv	r1, r3, r2
 800985c:	fb02 3311 	mls	r3, r2, r1, r3
 8009860:	5cc3      	ldrb	r3, [r0, r3]
 8009862:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009866:	460b      	mov	r3, r1
 8009868:	2900      	cmp	r1, #0
 800986a:	d1f5      	bne.n	8009858 <_printf_i+0x16c>
 800986c:	e7b9      	b.n	80097e2 <_printf_i+0xf6>
 800986e:	6813      	ldr	r3, [r2, #0]
 8009870:	6825      	ldr	r5, [r4, #0]
 8009872:	1d18      	adds	r0, r3, #4
 8009874:	6961      	ldr	r1, [r4, #20]
 8009876:	6010      	str	r0, [r2, #0]
 8009878:	0628      	lsls	r0, r5, #24
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	d501      	bpl.n	8009882 <_printf_i+0x196>
 800987e:	6019      	str	r1, [r3, #0]
 8009880:	e002      	b.n	8009888 <_printf_i+0x19c>
 8009882:	066a      	lsls	r2, r5, #25
 8009884:	d5fb      	bpl.n	800987e <_printf_i+0x192>
 8009886:	8019      	strh	r1, [r3, #0]
 8009888:	2300      	movs	r3, #0
 800988a:	4665      	mov	r5, ip
 800988c:	6123      	str	r3, [r4, #16]
 800988e:	e7b9      	b.n	8009804 <_printf_i+0x118>
 8009890:	6813      	ldr	r3, [r2, #0]
 8009892:	1d19      	adds	r1, r3, #4
 8009894:	6011      	str	r1, [r2, #0]
 8009896:	681d      	ldr	r5, [r3, #0]
 8009898:	6862      	ldr	r2, [r4, #4]
 800989a:	2100      	movs	r1, #0
 800989c:	4628      	mov	r0, r5
 800989e:	f000 fed9 	bl	800a654 <memchr>
 80098a2:	b108      	cbz	r0, 80098a8 <_printf_i+0x1bc>
 80098a4:	1b40      	subs	r0, r0, r5
 80098a6:	6060      	str	r0, [r4, #4]
 80098a8:	6863      	ldr	r3, [r4, #4]
 80098aa:	6123      	str	r3, [r4, #16]
 80098ac:	2300      	movs	r3, #0
 80098ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098b2:	e7a7      	b.n	8009804 <_printf_i+0x118>
 80098b4:	6923      	ldr	r3, [r4, #16]
 80098b6:	462a      	mov	r2, r5
 80098b8:	4639      	mov	r1, r7
 80098ba:	4630      	mov	r0, r6
 80098bc:	47c0      	blx	r8
 80098be:	3001      	adds	r0, #1
 80098c0:	d0aa      	beq.n	8009818 <_printf_i+0x12c>
 80098c2:	6823      	ldr	r3, [r4, #0]
 80098c4:	079b      	lsls	r3, r3, #30
 80098c6:	d413      	bmi.n	80098f0 <_printf_i+0x204>
 80098c8:	68e0      	ldr	r0, [r4, #12]
 80098ca:	9b03      	ldr	r3, [sp, #12]
 80098cc:	4298      	cmp	r0, r3
 80098ce:	bfb8      	it	lt
 80098d0:	4618      	movlt	r0, r3
 80098d2:	e7a3      	b.n	800981c <_printf_i+0x130>
 80098d4:	2301      	movs	r3, #1
 80098d6:	464a      	mov	r2, r9
 80098d8:	4639      	mov	r1, r7
 80098da:	4630      	mov	r0, r6
 80098dc:	47c0      	blx	r8
 80098de:	3001      	adds	r0, #1
 80098e0:	d09a      	beq.n	8009818 <_printf_i+0x12c>
 80098e2:	3501      	adds	r5, #1
 80098e4:	68e3      	ldr	r3, [r4, #12]
 80098e6:	9a03      	ldr	r2, [sp, #12]
 80098e8:	1a9b      	subs	r3, r3, r2
 80098ea:	42ab      	cmp	r3, r5
 80098ec:	dcf2      	bgt.n	80098d4 <_printf_i+0x1e8>
 80098ee:	e7eb      	b.n	80098c8 <_printf_i+0x1dc>
 80098f0:	2500      	movs	r5, #0
 80098f2:	f104 0919 	add.w	r9, r4, #25
 80098f6:	e7f5      	b.n	80098e4 <_printf_i+0x1f8>
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1ac      	bne.n	8009856 <_printf_i+0x16a>
 80098fc:	7803      	ldrb	r3, [r0, #0]
 80098fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009902:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009906:	e76c      	b.n	80097e2 <_printf_i+0xf6>
 8009908:	0800b0d2 	.word	0x0800b0d2
 800990c:	0800b0e3 	.word	0x0800b0e3

08009910 <_sbrk_r>:
 8009910:	b538      	push	{r3, r4, r5, lr}
 8009912:	2300      	movs	r3, #0
 8009914:	4c05      	ldr	r4, [pc, #20]	; (800992c <_sbrk_r+0x1c>)
 8009916:	4605      	mov	r5, r0
 8009918:	4608      	mov	r0, r1
 800991a:	6023      	str	r3, [r4, #0]
 800991c:	f7fe fc92 	bl	8008244 <_sbrk>
 8009920:	1c43      	adds	r3, r0, #1
 8009922:	d102      	bne.n	800992a <_sbrk_r+0x1a>
 8009924:	6823      	ldr	r3, [r4, #0]
 8009926:	b103      	cbz	r3, 800992a <_sbrk_r+0x1a>
 8009928:	602b      	str	r3, [r5, #0]
 800992a:	bd38      	pop	{r3, r4, r5, pc}
 800992c:	20000318 	.word	0x20000318

08009930 <siprintf>:
 8009930:	b40e      	push	{r1, r2, r3}
 8009932:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009936:	b500      	push	{lr}
 8009938:	b09c      	sub	sp, #112	; 0x70
 800993a:	ab1d      	add	r3, sp, #116	; 0x74
 800993c:	9002      	str	r0, [sp, #8]
 800993e:	9006      	str	r0, [sp, #24]
 8009940:	9107      	str	r1, [sp, #28]
 8009942:	9104      	str	r1, [sp, #16]
 8009944:	4808      	ldr	r0, [pc, #32]	; (8009968 <siprintf+0x38>)
 8009946:	4909      	ldr	r1, [pc, #36]	; (800996c <siprintf+0x3c>)
 8009948:	f853 2b04 	ldr.w	r2, [r3], #4
 800994c:	9105      	str	r1, [sp, #20]
 800994e:	6800      	ldr	r0, [r0, #0]
 8009950:	a902      	add	r1, sp, #8
 8009952:	9301      	str	r3, [sp, #4]
 8009954:	f001 f9d0 	bl	800acf8 <_svfiprintf_r>
 8009958:	2200      	movs	r2, #0
 800995a:	9b02      	ldr	r3, [sp, #8]
 800995c:	701a      	strb	r2, [r3, #0]
 800995e:	b01c      	add	sp, #112	; 0x70
 8009960:	f85d eb04 	ldr.w	lr, [sp], #4
 8009964:	b003      	add	sp, #12
 8009966:	4770      	bx	lr
 8009968:	20000050 	.word	0x20000050
 800996c:	ffff0208 	.word	0xffff0208

08009970 <_vsiprintf_r>:
 8009970:	b500      	push	{lr}
 8009972:	b09b      	sub	sp, #108	; 0x6c
 8009974:	9100      	str	r1, [sp, #0]
 8009976:	9104      	str	r1, [sp, #16]
 8009978:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800997c:	9105      	str	r1, [sp, #20]
 800997e:	9102      	str	r1, [sp, #8]
 8009980:	4905      	ldr	r1, [pc, #20]	; (8009998 <_vsiprintf_r+0x28>)
 8009982:	9103      	str	r1, [sp, #12]
 8009984:	4669      	mov	r1, sp
 8009986:	f001 f9b7 	bl	800acf8 <_svfiprintf_r>
 800998a:	2200      	movs	r2, #0
 800998c:	9b00      	ldr	r3, [sp, #0]
 800998e:	701a      	strb	r2, [r3, #0]
 8009990:	b01b      	add	sp, #108	; 0x6c
 8009992:	f85d fb04 	ldr.w	pc, [sp], #4
 8009996:	bf00      	nop
 8009998:	ffff0208 	.word	0xffff0208

0800999c <vsiprintf>:
 800999c:	4613      	mov	r3, r2
 800999e:	460a      	mov	r2, r1
 80099a0:	4601      	mov	r1, r0
 80099a2:	4802      	ldr	r0, [pc, #8]	; (80099ac <vsiprintf+0x10>)
 80099a4:	6800      	ldr	r0, [r0, #0]
 80099a6:	f7ff bfe3 	b.w	8009970 <_vsiprintf_r>
 80099aa:	bf00      	nop
 80099ac:	20000050 	.word	0x20000050

080099b0 <quorem>:
 80099b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b4:	6903      	ldr	r3, [r0, #16]
 80099b6:	690c      	ldr	r4, [r1, #16]
 80099b8:	4680      	mov	r8, r0
 80099ba:	42a3      	cmp	r3, r4
 80099bc:	f2c0 8084 	blt.w	8009ac8 <quorem+0x118>
 80099c0:	3c01      	subs	r4, #1
 80099c2:	f101 0714 	add.w	r7, r1, #20
 80099c6:	f100 0614 	add.w	r6, r0, #20
 80099ca:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80099ce:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80099d2:	3501      	adds	r5, #1
 80099d4:	fbb0 f5f5 	udiv	r5, r0, r5
 80099d8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80099dc:	eb06 030c 	add.w	r3, r6, ip
 80099e0:	eb07 090c 	add.w	r9, r7, ip
 80099e4:	9301      	str	r3, [sp, #4]
 80099e6:	b39d      	cbz	r5, 8009a50 <quorem+0xa0>
 80099e8:	f04f 0a00 	mov.w	sl, #0
 80099ec:	4638      	mov	r0, r7
 80099ee:	46b6      	mov	lr, r6
 80099f0:	46d3      	mov	fp, sl
 80099f2:	f850 2b04 	ldr.w	r2, [r0], #4
 80099f6:	b293      	uxth	r3, r2
 80099f8:	fb05 a303 	mla	r3, r5, r3, sl
 80099fc:	0c12      	lsrs	r2, r2, #16
 80099fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a02:	fb05 a202 	mla	r2, r5, r2, sl
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	ebab 0303 	sub.w	r3, fp, r3
 8009a0c:	f8de b000 	ldr.w	fp, [lr]
 8009a10:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009a14:	fa1f fb8b 	uxth.w	fp, fp
 8009a18:	445b      	add	r3, fp
 8009a1a:	fa1f fb82 	uxth.w	fp, r2
 8009a1e:	f8de 2000 	ldr.w	r2, [lr]
 8009a22:	4581      	cmp	r9, r0
 8009a24:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009a28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a32:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009a36:	f84e 3b04 	str.w	r3, [lr], #4
 8009a3a:	d2da      	bcs.n	80099f2 <quorem+0x42>
 8009a3c:	f856 300c 	ldr.w	r3, [r6, ip]
 8009a40:	b933      	cbnz	r3, 8009a50 <quorem+0xa0>
 8009a42:	9b01      	ldr	r3, [sp, #4]
 8009a44:	3b04      	subs	r3, #4
 8009a46:	429e      	cmp	r6, r3
 8009a48:	461a      	mov	r2, r3
 8009a4a:	d331      	bcc.n	8009ab0 <quorem+0x100>
 8009a4c:	f8c8 4010 	str.w	r4, [r8, #16]
 8009a50:	4640      	mov	r0, r8
 8009a52:	f001 f82f 	bl	800aab4 <__mcmp>
 8009a56:	2800      	cmp	r0, #0
 8009a58:	db26      	blt.n	8009aa8 <quorem+0xf8>
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	f04f 0c00 	mov.w	ip, #0
 8009a60:	3501      	adds	r5, #1
 8009a62:	f857 1b04 	ldr.w	r1, [r7], #4
 8009a66:	f8d0 e000 	ldr.w	lr, [r0]
 8009a6a:	b28b      	uxth	r3, r1
 8009a6c:	ebac 0303 	sub.w	r3, ip, r3
 8009a70:	fa1f f28e 	uxth.w	r2, lr
 8009a74:	4413      	add	r3, r2
 8009a76:	0c0a      	lsrs	r2, r1, #16
 8009a78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009a7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a86:	45b9      	cmp	r9, r7
 8009a88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009a8c:	f840 3b04 	str.w	r3, [r0], #4
 8009a90:	d2e7      	bcs.n	8009a62 <quorem+0xb2>
 8009a92:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009a96:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009a9a:	b92a      	cbnz	r2, 8009aa8 <quorem+0xf8>
 8009a9c:	3b04      	subs	r3, #4
 8009a9e:	429e      	cmp	r6, r3
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	d30b      	bcc.n	8009abc <quorem+0x10c>
 8009aa4:	f8c8 4010 	str.w	r4, [r8, #16]
 8009aa8:	4628      	mov	r0, r5
 8009aaa:	b003      	add	sp, #12
 8009aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab0:	6812      	ldr	r2, [r2, #0]
 8009ab2:	3b04      	subs	r3, #4
 8009ab4:	2a00      	cmp	r2, #0
 8009ab6:	d1c9      	bne.n	8009a4c <quorem+0x9c>
 8009ab8:	3c01      	subs	r4, #1
 8009aba:	e7c4      	b.n	8009a46 <quorem+0x96>
 8009abc:	6812      	ldr	r2, [r2, #0]
 8009abe:	3b04      	subs	r3, #4
 8009ac0:	2a00      	cmp	r2, #0
 8009ac2:	d1ef      	bne.n	8009aa4 <quorem+0xf4>
 8009ac4:	3c01      	subs	r4, #1
 8009ac6:	e7ea      	b.n	8009a9e <quorem+0xee>
 8009ac8:	2000      	movs	r0, #0
 8009aca:	e7ee      	b.n	8009aaa <quorem+0xfa>
 8009acc:	0000      	movs	r0, r0
	...

08009ad0 <_dtoa_r>:
 8009ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad4:	4616      	mov	r6, r2
 8009ad6:	461f      	mov	r7, r3
 8009ad8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009ada:	b095      	sub	sp, #84	; 0x54
 8009adc:	4604      	mov	r4, r0
 8009ade:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8009ae2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009ae6:	b93d      	cbnz	r5, 8009af8 <_dtoa_r+0x28>
 8009ae8:	2010      	movs	r0, #16
 8009aea:	f7ff f9f5 	bl	8008ed8 <malloc>
 8009aee:	6260      	str	r0, [r4, #36]	; 0x24
 8009af0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009af4:	6005      	str	r5, [r0, #0]
 8009af6:	60c5      	str	r5, [r0, #12]
 8009af8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009afa:	6819      	ldr	r1, [r3, #0]
 8009afc:	b151      	cbz	r1, 8009b14 <_dtoa_r+0x44>
 8009afe:	685a      	ldr	r2, [r3, #4]
 8009b00:	2301      	movs	r3, #1
 8009b02:	4093      	lsls	r3, r2
 8009b04:	604a      	str	r2, [r1, #4]
 8009b06:	608b      	str	r3, [r1, #8]
 8009b08:	4620      	mov	r0, r4
 8009b0a:	f000 fdf2 	bl	800a6f2 <_Bfree>
 8009b0e:	2200      	movs	r2, #0
 8009b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b12:	601a      	str	r2, [r3, #0]
 8009b14:	1e3b      	subs	r3, r7, #0
 8009b16:	bfaf      	iteee	ge
 8009b18:	2300      	movge	r3, #0
 8009b1a:	2201      	movlt	r2, #1
 8009b1c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009b20:	9303      	strlt	r3, [sp, #12]
 8009b22:	bfac      	ite	ge
 8009b24:	f8c8 3000 	strge.w	r3, [r8]
 8009b28:	f8c8 2000 	strlt.w	r2, [r8]
 8009b2c:	4bae      	ldr	r3, [pc, #696]	; (8009de8 <_dtoa_r+0x318>)
 8009b2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009b32:	ea33 0308 	bics.w	r3, r3, r8
 8009b36:	d11b      	bne.n	8009b70 <_dtoa_r+0xa0>
 8009b38:	f242 730f 	movw	r3, #9999	; 0x270f
 8009b3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009b3e:	6013      	str	r3, [r2, #0]
 8009b40:	9b02      	ldr	r3, [sp, #8]
 8009b42:	b923      	cbnz	r3, 8009b4e <_dtoa_r+0x7e>
 8009b44:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	f000 8545 	beq.w	800a5d8 <_dtoa_r+0xb08>
 8009b4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b50:	b953      	cbnz	r3, 8009b68 <_dtoa_r+0x98>
 8009b52:	4ba6      	ldr	r3, [pc, #664]	; (8009dec <_dtoa_r+0x31c>)
 8009b54:	e021      	b.n	8009b9a <_dtoa_r+0xca>
 8009b56:	4ba6      	ldr	r3, [pc, #664]	; (8009df0 <_dtoa_r+0x320>)
 8009b58:	9306      	str	r3, [sp, #24]
 8009b5a:	3308      	adds	r3, #8
 8009b5c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009b5e:	6013      	str	r3, [r2, #0]
 8009b60:	9806      	ldr	r0, [sp, #24]
 8009b62:	b015      	add	sp, #84	; 0x54
 8009b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b68:	4ba0      	ldr	r3, [pc, #640]	; (8009dec <_dtoa_r+0x31c>)
 8009b6a:	9306      	str	r3, [sp, #24]
 8009b6c:	3303      	adds	r3, #3
 8009b6e:	e7f5      	b.n	8009b5c <_dtoa_r+0x8c>
 8009b70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009b74:	2200      	movs	r2, #0
 8009b76:	2300      	movs	r3, #0
 8009b78:	4630      	mov	r0, r6
 8009b7a:	4639      	mov	r1, r7
 8009b7c:	f7f6 ff80 	bl	8000a80 <__aeabi_dcmpeq>
 8009b80:	4682      	mov	sl, r0
 8009b82:	b160      	cbz	r0, 8009b9e <_dtoa_r+0xce>
 8009b84:	2301      	movs	r3, #1
 8009b86:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009b88:	6013      	str	r3, [r2, #0]
 8009b8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f000 8520 	beq.w	800a5d2 <_dtoa_r+0xb02>
 8009b92:	4b98      	ldr	r3, [pc, #608]	; (8009df4 <_dtoa_r+0x324>)
 8009b94:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009b96:	6013      	str	r3, [r2, #0]
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	9306      	str	r3, [sp, #24]
 8009b9c:	e7e0      	b.n	8009b60 <_dtoa_r+0x90>
 8009b9e:	ab12      	add	r3, sp, #72	; 0x48
 8009ba0:	9301      	str	r3, [sp, #4]
 8009ba2:	ab13      	add	r3, sp, #76	; 0x4c
 8009ba4:	9300      	str	r3, [sp, #0]
 8009ba6:	4632      	mov	r2, r6
 8009ba8:	463b      	mov	r3, r7
 8009baa:	4620      	mov	r0, r4
 8009bac:	f000 fffa 	bl	800aba4 <__d2b>
 8009bb0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009bb4:	4683      	mov	fp, r0
 8009bb6:	2d00      	cmp	r5, #0
 8009bb8:	d07d      	beq.n	8009cb6 <_dtoa_r+0x1e6>
 8009bba:	46b0      	mov	r8, r6
 8009bbc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009bc0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8009bc4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8009bc8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009bcc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	4b89      	ldr	r3, [pc, #548]	; (8009df8 <_dtoa_r+0x328>)
 8009bd4:	4640      	mov	r0, r8
 8009bd6:	4649      	mov	r1, r9
 8009bd8:	f7f6 fb32 	bl	8000240 <__aeabi_dsub>
 8009bdc:	a37c      	add	r3, pc, #496	; (adr r3, 8009dd0 <_dtoa_r+0x300>)
 8009bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be2:	f7f6 fce5 	bl	80005b0 <__aeabi_dmul>
 8009be6:	a37c      	add	r3, pc, #496	; (adr r3, 8009dd8 <_dtoa_r+0x308>)
 8009be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bec:	f7f6 fb2a 	bl	8000244 <__adddf3>
 8009bf0:	4606      	mov	r6, r0
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	460f      	mov	r7, r1
 8009bf6:	f7f6 fc71 	bl	80004dc <__aeabi_i2d>
 8009bfa:	a379      	add	r3, pc, #484	; (adr r3, 8009de0 <_dtoa_r+0x310>)
 8009bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c00:	f7f6 fcd6 	bl	80005b0 <__aeabi_dmul>
 8009c04:	4602      	mov	r2, r0
 8009c06:	460b      	mov	r3, r1
 8009c08:	4630      	mov	r0, r6
 8009c0a:	4639      	mov	r1, r7
 8009c0c:	f7f6 fb1a 	bl	8000244 <__adddf3>
 8009c10:	4606      	mov	r6, r0
 8009c12:	460f      	mov	r7, r1
 8009c14:	f7f6 ff7c 	bl	8000b10 <__aeabi_d2iz>
 8009c18:	2200      	movs	r2, #0
 8009c1a:	4682      	mov	sl, r0
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	4630      	mov	r0, r6
 8009c20:	4639      	mov	r1, r7
 8009c22:	f7f6 ff37 	bl	8000a94 <__aeabi_dcmplt>
 8009c26:	b148      	cbz	r0, 8009c3c <_dtoa_r+0x16c>
 8009c28:	4650      	mov	r0, sl
 8009c2a:	f7f6 fc57 	bl	80004dc <__aeabi_i2d>
 8009c2e:	4632      	mov	r2, r6
 8009c30:	463b      	mov	r3, r7
 8009c32:	f7f6 ff25 	bl	8000a80 <__aeabi_dcmpeq>
 8009c36:	b908      	cbnz	r0, 8009c3c <_dtoa_r+0x16c>
 8009c38:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c3c:	f1ba 0f16 	cmp.w	sl, #22
 8009c40:	d85a      	bhi.n	8009cf8 <_dtoa_r+0x228>
 8009c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c46:	496d      	ldr	r1, [pc, #436]	; (8009dfc <_dtoa_r+0x32c>)
 8009c48:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009c4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c50:	f7f6 ff3e 	bl	8000ad0 <__aeabi_dcmpgt>
 8009c54:	2800      	cmp	r0, #0
 8009c56:	d051      	beq.n	8009cfc <_dtoa_r+0x22c>
 8009c58:	2300      	movs	r3, #0
 8009c5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c5e:	930d      	str	r3, [sp, #52]	; 0x34
 8009c60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c62:	1b5d      	subs	r5, r3, r5
 8009c64:	1e6b      	subs	r3, r5, #1
 8009c66:	9307      	str	r3, [sp, #28]
 8009c68:	bf43      	ittte	mi
 8009c6a:	2300      	movmi	r3, #0
 8009c6c:	f1c5 0901 	rsbmi	r9, r5, #1
 8009c70:	9307      	strmi	r3, [sp, #28]
 8009c72:	f04f 0900 	movpl.w	r9, #0
 8009c76:	f1ba 0f00 	cmp.w	sl, #0
 8009c7a:	db41      	blt.n	8009d00 <_dtoa_r+0x230>
 8009c7c:	9b07      	ldr	r3, [sp, #28]
 8009c7e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8009c82:	4453      	add	r3, sl
 8009c84:	9307      	str	r3, [sp, #28]
 8009c86:	2300      	movs	r3, #0
 8009c88:	9308      	str	r3, [sp, #32]
 8009c8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009c8c:	2b09      	cmp	r3, #9
 8009c8e:	f200 808f 	bhi.w	8009db0 <_dtoa_r+0x2e0>
 8009c92:	2b05      	cmp	r3, #5
 8009c94:	bfc4      	itt	gt
 8009c96:	3b04      	subgt	r3, #4
 8009c98:	931e      	strgt	r3, [sp, #120]	; 0x78
 8009c9a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009c9c:	bfc8      	it	gt
 8009c9e:	2500      	movgt	r5, #0
 8009ca0:	f1a3 0302 	sub.w	r3, r3, #2
 8009ca4:	bfd8      	it	le
 8009ca6:	2501      	movle	r5, #1
 8009ca8:	2b03      	cmp	r3, #3
 8009caa:	f200 808d 	bhi.w	8009dc8 <_dtoa_r+0x2f8>
 8009cae:	e8df f003 	tbb	[pc, r3]
 8009cb2:	7d7b      	.short	0x7d7b
 8009cb4:	6f2f      	.short	0x6f2f
 8009cb6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009cba:	441d      	add	r5, r3
 8009cbc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009cc0:	2820      	cmp	r0, #32
 8009cc2:	dd13      	ble.n	8009cec <_dtoa_r+0x21c>
 8009cc4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009cc8:	9b02      	ldr	r3, [sp, #8]
 8009cca:	fa08 f800 	lsl.w	r8, r8, r0
 8009cce:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009cd2:	fa23 f000 	lsr.w	r0, r3, r0
 8009cd6:	ea48 0000 	orr.w	r0, r8, r0
 8009cda:	f7f6 fbef 	bl	80004bc <__aeabi_ui2d>
 8009cde:	2301      	movs	r3, #1
 8009ce0:	4680      	mov	r8, r0
 8009ce2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8009ce6:	3d01      	subs	r5, #1
 8009ce8:	9310      	str	r3, [sp, #64]	; 0x40
 8009cea:	e771      	b.n	8009bd0 <_dtoa_r+0x100>
 8009cec:	9b02      	ldr	r3, [sp, #8]
 8009cee:	f1c0 0020 	rsb	r0, r0, #32
 8009cf2:	fa03 f000 	lsl.w	r0, r3, r0
 8009cf6:	e7f0      	b.n	8009cda <_dtoa_r+0x20a>
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e7b0      	b.n	8009c5e <_dtoa_r+0x18e>
 8009cfc:	900d      	str	r0, [sp, #52]	; 0x34
 8009cfe:	e7af      	b.n	8009c60 <_dtoa_r+0x190>
 8009d00:	f1ca 0300 	rsb	r3, sl, #0
 8009d04:	9308      	str	r3, [sp, #32]
 8009d06:	2300      	movs	r3, #0
 8009d08:	eba9 090a 	sub.w	r9, r9, sl
 8009d0c:	930c      	str	r3, [sp, #48]	; 0x30
 8009d0e:	e7bc      	b.n	8009c8a <_dtoa_r+0x1ba>
 8009d10:	2301      	movs	r3, #1
 8009d12:	9309      	str	r3, [sp, #36]	; 0x24
 8009d14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	dd74      	ble.n	8009e04 <_dtoa_r+0x334>
 8009d1a:	4698      	mov	r8, r3
 8009d1c:	9304      	str	r3, [sp, #16]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d22:	6072      	str	r2, [r6, #4]
 8009d24:	2204      	movs	r2, #4
 8009d26:	f102 0014 	add.w	r0, r2, #20
 8009d2a:	4298      	cmp	r0, r3
 8009d2c:	6871      	ldr	r1, [r6, #4]
 8009d2e:	d96e      	bls.n	8009e0e <_dtoa_r+0x33e>
 8009d30:	4620      	mov	r0, r4
 8009d32:	f000 fcaa 	bl	800a68a <_Balloc>
 8009d36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d38:	6030      	str	r0, [r6, #0]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f1b8 0f0e 	cmp.w	r8, #14
 8009d40:	9306      	str	r3, [sp, #24]
 8009d42:	f200 80ed 	bhi.w	8009f20 <_dtoa_r+0x450>
 8009d46:	2d00      	cmp	r5, #0
 8009d48:	f000 80ea 	beq.w	8009f20 <_dtoa_r+0x450>
 8009d4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009d50:	f1ba 0f00 	cmp.w	sl, #0
 8009d54:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009d58:	dd77      	ble.n	8009e4a <_dtoa_r+0x37a>
 8009d5a:	4a28      	ldr	r2, [pc, #160]	; (8009dfc <_dtoa_r+0x32c>)
 8009d5c:	f00a 030f 	and.w	r3, sl, #15
 8009d60:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009d64:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009d68:	06f0      	lsls	r0, r6, #27
 8009d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009d72:	d568      	bpl.n	8009e46 <_dtoa_r+0x376>
 8009d74:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009d78:	4b21      	ldr	r3, [pc, #132]	; (8009e00 <_dtoa_r+0x330>)
 8009d7a:	2503      	movs	r5, #3
 8009d7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d80:	f7f6 fd40 	bl	8000804 <__aeabi_ddiv>
 8009d84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d88:	f006 060f 	and.w	r6, r6, #15
 8009d8c:	4f1c      	ldr	r7, [pc, #112]	; (8009e00 <_dtoa_r+0x330>)
 8009d8e:	e04f      	b.n	8009e30 <_dtoa_r+0x360>
 8009d90:	2301      	movs	r3, #1
 8009d92:	9309      	str	r3, [sp, #36]	; 0x24
 8009d94:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009d96:	4453      	add	r3, sl
 8009d98:	f103 0801 	add.w	r8, r3, #1
 8009d9c:	9304      	str	r3, [sp, #16]
 8009d9e:	4643      	mov	r3, r8
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	bfb8      	it	lt
 8009da4:	2301      	movlt	r3, #1
 8009da6:	e7ba      	b.n	8009d1e <_dtoa_r+0x24e>
 8009da8:	2300      	movs	r3, #0
 8009daa:	e7b2      	b.n	8009d12 <_dtoa_r+0x242>
 8009dac:	2300      	movs	r3, #0
 8009dae:	e7f0      	b.n	8009d92 <_dtoa_r+0x2c2>
 8009db0:	2501      	movs	r5, #1
 8009db2:	2300      	movs	r3, #0
 8009db4:	9509      	str	r5, [sp, #36]	; 0x24
 8009db6:	931e      	str	r3, [sp, #120]	; 0x78
 8009db8:	f04f 33ff 	mov.w	r3, #4294967295
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	9304      	str	r3, [sp, #16]
 8009dc0:	4698      	mov	r8, r3
 8009dc2:	2312      	movs	r3, #18
 8009dc4:	921f      	str	r2, [sp, #124]	; 0x7c
 8009dc6:	e7aa      	b.n	8009d1e <_dtoa_r+0x24e>
 8009dc8:	2301      	movs	r3, #1
 8009dca:	9309      	str	r3, [sp, #36]	; 0x24
 8009dcc:	e7f4      	b.n	8009db8 <_dtoa_r+0x2e8>
 8009dce:	bf00      	nop
 8009dd0:	636f4361 	.word	0x636f4361
 8009dd4:	3fd287a7 	.word	0x3fd287a7
 8009dd8:	8b60c8b3 	.word	0x8b60c8b3
 8009ddc:	3fc68a28 	.word	0x3fc68a28
 8009de0:	509f79fb 	.word	0x509f79fb
 8009de4:	3fd34413 	.word	0x3fd34413
 8009de8:	7ff00000 	.word	0x7ff00000
 8009dec:	0800b0fd 	.word	0x0800b0fd
 8009df0:	0800b0f4 	.word	0x0800b0f4
 8009df4:	0800b0d1 	.word	0x0800b0d1
 8009df8:	3ff80000 	.word	0x3ff80000
 8009dfc:	0800b130 	.word	0x0800b130
 8009e00:	0800b108 	.word	0x0800b108
 8009e04:	2301      	movs	r3, #1
 8009e06:	9304      	str	r3, [sp, #16]
 8009e08:	4698      	mov	r8, r3
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	e7da      	b.n	8009dc4 <_dtoa_r+0x2f4>
 8009e0e:	3101      	adds	r1, #1
 8009e10:	6071      	str	r1, [r6, #4]
 8009e12:	0052      	lsls	r2, r2, #1
 8009e14:	e787      	b.n	8009d26 <_dtoa_r+0x256>
 8009e16:	07f1      	lsls	r1, r6, #31
 8009e18:	d508      	bpl.n	8009e2c <_dtoa_r+0x35c>
 8009e1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009e1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e22:	f7f6 fbc5 	bl	80005b0 <__aeabi_dmul>
 8009e26:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009e2a:	3501      	adds	r5, #1
 8009e2c:	1076      	asrs	r6, r6, #1
 8009e2e:	3708      	adds	r7, #8
 8009e30:	2e00      	cmp	r6, #0
 8009e32:	d1f0      	bne.n	8009e16 <_dtoa_r+0x346>
 8009e34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009e38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e3c:	f7f6 fce2 	bl	8000804 <__aeabi_ddiv>
 8009e40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e44:	e01b      	b.n	8009e7e <_dtoa_r+0x3ae>
 8009e46:	2502      	movs	r5, #2
 8009e48:	e7a0      	b.n	8009d8c <_dtoa_r+0x2bc>
 8009e4a:	f000 80a4 	beq.w	8009f96 <_dtoa_r+0x4c6>
 8009e4e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009e52:	f1ca 0600 	rsb	r6, sl, #0
 8009e56:	4ba0      	ldr	r3, [pc, #640]	; (800a0d8 <_dtoa_r+0x608>)
 8009e58:	f006 020f 	and.w	r2, r6, #15
 8009e5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e64:	f7f6 fba4 	bl	80005b0 <__aeabi_dmul>
 8009e68:	2502      	movs	r5, #2
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e70:	4f9a      	ldr	r7, [pc, #616]	; (800a0dc <_dtoa_r+0x60c>)
 8009e72:	1136      	asrs	r6, r6, #4
 8009e74:	2e00      	cmp	r6, #0
 8009e76:	f040 8083 	bne.w	8009f80 <_dtoa_r+0x4b0>
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d1e0      	bne.n	8009e40 <_dtoa_r+0x370>
 8009e7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f000 808a 	beq.w	8009f9a <_dtoa_r+0x4ca>
 8009e86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e8a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009e8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009e92:	2200      	movs	r2, #0
 8009e94:	4b92      	ldr	r3, [pc, #584]	; (800a0e0 <_dtoa_r+0x610>)
 8009e96:	f7f6 fdfd 	bl	8000a94 <__aeabi_dcmplt>
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	d07d      	beq.n	8009f9a <_dtoa_r+0x4ca>
 8009e9e:	f1b8 0f00 	cmp.w	r8, #0
 8009ea2:	d07a      	beq.n	8009f9a <_dtoa_r+0x4ca>
 8009ea4:	9b04      	ldr	r3, [sp, #16]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	dd36      	ble.n	8009f18 <_dtoa_r+0x448>
 8009eaa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009eae:	2200      	movs	r2, #0
 8009eb0:	4b8c      	ldr	r3, [pc, #560]	; (800a0e4 <_dtoa_r+0x614>)
 8009eb2:	f7f6 fb7d 	bl	80005b0 <__aeabi_dmul>
 8009eb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009eba:	9e04      	ldr	r6, [sp, #16]
 8009ebc:	f10a 37ff 	add.w	r7, sl, #4294967295
 8009ec0:	3501      	adds	r5, #1
 8009ec2:	4628      	mov	r0, r5
 8009ec4:	f7f6 fb0a 	bl	80004dc <__aeabi_i2d>
 8009ec8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ecc:	f7f6 fb70 	bl	80005b0 <__aeabi_dmul>
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	4b85      	ldr	r3, [pc, #532]	; (800a0e8 <_dtoa_r+0x618>)
 8009ed4:	f7f6 f9b6 	bl	8000244 <__adddf3>
 8009ed8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8009edc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009ee0:	950b      	str	r5, [sp, #44]	; 0x2c
 8009ee2:	2e00      	cmp	r6, #0
 8009ee4:	d15c      	bne.n	8009fa0 <_dtoa_r+0x4d0>
 8009ee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eea:	2200      	movs	r2, #0
 8009eec:	4b7f      	ldr	r3, [pc, #508]	; (800a0ec <_dtoa_r+0x61c>)
 8009eee:	f7f6 f9a7 	bl	8000240 <__aeabi_dsub>
 8009ef2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ef4:	462b      	mov	r3, r5
 8009ef6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009efa:	f7f6 fde9 	bl	8000ad0 <__aeabi_dcmpgt>
 8009efe:	2800      	cmp	r0, #0
 8009f00:	f040 8281 	bne.w	800a406 <_dtoa_r+0x936>
 8009f04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f0a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009f0e:	f7f6 fdc1 	bl	8000a94 <__aeabi_dcmplt>
 8009f12:	2800      	cmp	r0, #0
 8009f14:	f040 8275 	bne.w	800a402 <_dtoa_r+0x932>
 8009f18:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009f1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	f2c0 814b 	blt.w	800a1be <_dtoa_r+0x6ee>
 8009f28:	f1ba 0f0e 	cmp.w	sl, #14
 8009f2c:	f300 8147 	bgt.w	800a1be <_dtoa_r+0x6ee>
 8009f30:	4b69      	ldr	r3, [pc, #420]	; (800a0d8 <_dtoa_r+0x608>)
 8009f32:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009f3e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	f280 80d7 	bge.w	800a0f4 <_dtoa_r+0x624>
 8009f46:	f1b8 0f00 	cmp.w	r8, #0
 8009f4a:	f300 80d3 	bgt.w	800a0f4 <_dtoa_r+0x624>
 8009f4e:	f040 8257 	bne.w	800a400 <_dtoa_r+0x930>
 8009f52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f56:	2200      	movs	r2, #0
 8009f58:	4b64      	ldr	r3, [pc, #400]	; (800a0ec <_dtoa_r+0x61c>)
 8009f5a:	f7f6 fb29 	bl	80005b0 <__aeabi_dmul>
 8009f5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f62:	f7f6 fdab 	bl	8000abc <__aeabi_dcmpge>
 8009f66:	4646      	mov	r6, r8
 8009f68:	4647      	mov	r7, r8
 8009f6a:	2800      	cmp	r0, #0
 8009f6c:	f040 822d 	bne.w	800a3ca <_dtoa_r+0x8fa>
 8009f70:	9b06      	ldr	r3, [sp, #24]
 8009f72:	9a06      	ldr	r2, [sp, #24]
 8009f74:	1c5d      	adds	r5, r3, #1
 8009f76:	2331      	movs	r3, #49	; 0x31
 8009f78:	f10a 0a01 	add.w	sl, sl, #1
 8009f7c:	7013      	strb	r3, [r2, #0]
 8009f7e:	e228      	b.n	800a3d2 <_dtoa_r+0x902>
 8009f80:	07f2      	lsls	r2, r6, #31
 8009f82:	d505      	bpl.n	8009f90 <_dtoa_r+0x4c0>
 8009f84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f88:	f7f6 fb12 	bl	80005b0 <__aeabi_dmul>
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	3501      	adds	r5, #1
 8009f90:	1076      	asrs	r6, r6, #1
 8009f92:	3708      	adds	r7, #8
 8009f94:	e76e      	b.n	8009e74 <_dtoa_r+0x3a4>
 8009f96:	2502      	movs	r5, #2
 8009f98:	e771      	b.n	8009e7e <_dtoa_r+0x3ae>
 8009f9a:	4657      	mov	r7, sl
 8009f9c:	4646      	mov	r6, r8
 8009f9e:	e790      	b.n	8009ec2 <_dtoa_r+0x3f2>
 8009fa0:	4b4d      	ldr	r3, [pc, #308]	; (800a0d8 <_dtoa_r+0x608>)
 8009fa2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009fa6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d048      	beq.n	800a042 <_dtoa_r+0x572>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	494e      	ldr	r1, [pc, #312]	; (800a0f0 <_dtoa_r+0x620>)
 8009fb8:	f7f6 fc24 	bl	8000804 <__aeabi_ddiv>
 8009fbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009fc0:	f7f6 f93e 	bl	8000240 <__aeabi_dsub>
 8009fc4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009fc8:	9d06      	ldr	r5, [sp, #24]
 8009fca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fce:	f7f6 fd9f 	bl	8000b10 <__aeabi_d2iz>
 8009fd2:	9011      	str	r0, [sp, #68]	; 0x44
 8009fd4:	f7f6 fa82 	bl	80004dc <__aeabi_i2d>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	460b      	mov	r3, r1
 8009fdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fe0:	f7f6 f92e 	bl	8000240 <__aeabi_dsub>
 8009fe4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009fe6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fea:	3330      	adds	r3, #48	; 0x30
 8009fec:	f805 3b01 	strb.w	r3, [r5], #1
 8009ff0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009ff4:	f7f6 fd4e 	bl	8000a94 <__aeabi_dcmplt>
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	d163      	bne.n	800a0c4 <_dtoa_r+0x5f4>
 8009ffc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a000:	2000      	movs	r0, #0
 800a002:	4937      	ldr	r1, [pc, #220]	; (800a0e0 <_dtoa_r+0x610>)
 800a004:	f7f6 f91c 	bl	8000240 <__aeabi_dsub>
 800a008:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a00c:	f7f6 fd42 	bl	8000a94 <__aeabi_dcmplt>
 800a010:	2800      	cmp	r0, #0
 800a012:	f040 80b5 	bne.w	800a180 <_dtoa_r+0x6b0>
 800a016:	9b06      	ldr	r3, [sp, #24]
 800a018:	1aeb      	subs	r3, r5, r3
 800a01a:	429e      	cmp	r6, r3
 800a01c:	f77f af7c 	ble.w	8009f18 <_dtoa_r+0x448>
 800a020:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a024:	2200      	movs	r2, #0
 800a026:	4b2f      	ldr	r3, [pc, #188]	; (800a0e4 <_dtoa_r+0x614>)
 800a028:	f7f6 fac2 	bl	80005b0 <__aeabi_dmul>
 800a02c:	2200      	movs	r2, #0
 800a02e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a032:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a036:	4b2b      	ldr	r3, [pc, #172]	; (800a0e4 <_dtoa_r+0x614>)
 800a038:	f7f6 faba 	bl	80005b0 <__aeabi_dmul>
 800a03c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a040:	e7c3      	b.n	8009fca <_dtoa_r+0x4fa>
 800a042:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a046:	f7f6 fab3 	bl	80005b0 <__aeabi_dmul>
 800a04a:	9b06      	ldr	r3, [sp, #24]
 800a04c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a050:	199d      	adds	r5, r3, r6
 800a052:	461e      	mov	r6, r3
 800a054:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a058:	f7f6 fd5a 	bl	8000b10 <__aeabi_d2iz>
 800a05c:	9011      	str	r0, [sp, #68]	; 0x44
 800a05e:	f7f6 fa3d 	bl	80004dc <__aeabi_i2d>
 800a062:	4602      	mov	r2, r0
 800a064:	460b      	mov	r3, r1
 800a066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a06a:	f7f6 f8e9 	bl	8000240 <__aeabi_dsub>
 800a06e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a070:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a074:	3330      	adds	r3, #48	; 0x30
 800a076:	f806 3b01 	strb.w	r3, [r6], #1
 800a07a:	42ae      	cmp	r6, r5
 800a07c:	f04f 0200 	mov.w	r2, #0
 800a080:	d124      	bne.n	800a0cc <_dtoa_r+0x5fc>
 800a082:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a086:	4b1a      	ldr	r3, [pc, #104]	; (800a0f0 <_dtoa_r+0x620>)
 800a088:	f7f6 f8dc 	bl	8000244 <__adddf3>
 800a08c:	4602      	mov	r2, r0
 800a08e:	460b      	mov	r3, r1
 800a090:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a094:	f7f6 fd1c 	bl	8000ad0 <__aeabi_dcmpgt>
 800a098:	2800      	cmp	r0, #0
 800a09a:	d171      	bne.n	800a180 <_dtoa_r+0x6b0>
 800a09c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	4913      	ldr	r1, [pc, #76]	; (800a0f0 <_dtoa_r+0x620>)
 800a0a4:	f7f6 f8cc 	bl	8000240 <__aeabi_dsub>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0b0:	f7f6 fcf0 	bl	8000a94 <__aeabi_dcmplt>
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	f43f af2f 	beq.w	8009f18 <_dtoa_r+0x448>
 800a0ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a0be:	1e6a      	subs	r2, r5, #1
 800a0c0:	2b30      	cmp	r3, #48	; 0x30
 800a0c2:	d001      	beq.n	800a0c8 <_dtoa_r+0x5f8>
 800a0c4:	46ba      	mov	sl, r7
 800a0c6:	e04a      	b.n	800a15e <_dtoa_r+0x68e>
 800a0c8:	4615      	mov	r5, r2
 800a0ca:	e7f6      	b.n	800a0ba <_dtoa_r+0x5ea>
 800a0cc:	4b05      	ldr	r3, [pc, #20]	; (800a0e4 <_dtoa_r+0x614>)
 800a0ce:	f7f6 fa6f 	bl	80005b0 <__aeabi_dmul>
 800a0d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0d6:	e7bd      	b.n	800a054 <_dtoa_r+0x584>
 800a0d8:	0800b130 	.word	0x0800b130
 800a0dc:	0800b108 	.word	0x0800b108
 800a0e0:	3ff00000 	.word	0x3ff00000
 800a0e4:	40240000 	.word	0x40240000
 800a0e8:	401c0000 	.word	0x401c0000
 800a0ec:	40140000 	.word	0x40140000
 800a0f0:	3fe00000 	.word	0x3fe00000
 800a0f4:	9d06      	ldr	r5, [sp, #24]
 800a0f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a0fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a0fe:	4630      	mov	r0, r6
 800a100:	4639      	mov	r1, r7
 800a102:	f7f6 fb7f 	bl	8000804 <__aeabi_ddiv>
 800a106:	f7f6 fd03 	bl	8000b10 <__aeabi_d2iz>
 800a10a:	4681      	mov	r9, r0
 800a10c:	f7f6 f9e6 	bl	80004dc <__aeabi_i2d>
 800a110:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a114:	f7f6 fa4c 	bl	80005b0 <__aeabi_dmul>
 800a118:	4602      	mov	r2, r0
 800a11a:	460b      	mov	r3, r1
 800a11c:	4630      	mov	r0, r6
 800a11e:	4639      	mov	r1, r7
 800a120:	f7f6 f88e 	bl	8000240 <__aeabi_dsub>
 800a124:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800a128:	f805 6b01 	strb.w	r6, [r5], #1
 800a12c:	9e06      	ldr	r6, [sp, #24]
 800a12e:	4602      	mov	r2, r0
 800a130:	1bae      	subs	r6, r5, r6
 800a132:	45b0      	cmp	r8, r6
 800a134:	460b      	mov	r3, r1
 800a136:	d135      	bne.n	800a1a4 <_dtoa_r+0x6d4>
 800a138:	f7f6 f884 	bl	8000244 <__adddf3>
 800a13c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a140:	4606      	mov	r6, r0
 800a142:	460f      	mov	r7, r1
 800a144:	f7f6 fcc4 	bl	8000ad0 <__aeabi_dcmpgt>
 800a148:	b9c8      	cbnz	r0, 800a17e <_dtoa_r+0x6ae>
 800a14a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a14e:	4630      	mov	r0, r6
 800a150:	4639      	mov	r1, r7
 800a152:	f7f6 fc95 	bl	8000a80 <__aeabi_dcmpeq>
 800a156:	b110      	cbz	r0, 800a15e <_dtoa_r+0x68e>
 800a158:	f019 0f01 	tst.w	r9, #1
 800a15c:	d10f      	bne.n	800a17e <_dtoa_r+0x6ae>
 800a15e:	4659      	mov	r1, fp
 800a160:	4620      	mov	r0, r4
 800a162:	f000 fac6 	bl	800a6f2 <_Bfree>
 800a166:	2300      	movs	r3, #0
 800a168:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a16a:	702b      	strb	r3, [r5, #0]
 800a16c:	f10a 0301 	add.w	r3, sl, #1
 800a170:	6013      	str	r3, [r2, #0]
 800a172:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a174:	2b00      	cmp	r3, #0
 800a176:	f43f acf3 	beq.w	8009b60 <_dtoa_r+0x90>
 800a17a:	601d      	str	r5, [r3, #0]
 800a17c:	e4f0      	b.n	8009b60 <_dtoa_r+0x90>
 800a17e:	4657      	mov	r7, sl
 800a180:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a184:	1e6b      	subs	r3, r5, #1
 800a186:	2a39      	cmp	r2, #57	; 0x39
 800a188:	d106      	bne.n	800a198 <_dtoa_r+0x6c8>
 800a18a:	9a06      	ldr	r2, [sp, #24]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d107      	bne.n	800a1a0 <_dtoa_r+0x6d0>
 800a190:	2330      	movs	r3, #48	; 0x30
 800a192:	7013      	strb	r3, [r2, #0]
 800a194:	4613      	mov	r3, r2
 800a196:	3701      	adds	r7, #1
 800a198:	781a      	ldrb	r2, [r3, #0]
 800a19a:	3201      	adds	r2, #1
 800a19c:	701a      	strb	r2, [r3, #0]
 800a19e:	e791      	b.n	800a0c4 <_dtoa_r+0x5f4>
 800a1a0:	461d      	mov	r5, r3
 800a1a2:	e7ed      	b.n	800a180 <_dtoa_r+0x6b0>
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	4b99      	ldr	r3, [pc, #612]	; (800a40c <_dtoa_r+0x93c>)
 800a1a8:	f7f6 fa02 	bl	80005b0 <__aeabi_dmul>
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	4606      	mov	r6, r0
 800a1b2:	460f      	mov	r7, r1
 800a1b4:	f7f6 fc64 	bl	8000a80 <__aeabi_dcmpeq>
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	d09e      	beq.n	800a0fa <_dtoa_r+0x62a>
 800a1bc:	e7cf      	b.n	800a15e <_dtoa_r+0x68e>
 800a1be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1c0:	2a00      	cmp	r2, #0
 800a1c2:	f000 8088 	beq.w	800a2d6 <_dtoa_r+0x806>
 800a1c6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a1c8:	2a01      	cmp	r2, #1
 800a1ca:	dc6d      	bgt.n	800a2a8 <_dtoa_r+0x7d8>
 800a1cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a1ce:	2a00      	cmp	r2, #0
 800a1d0:	d066      	beq.n	800a2a0 <_dtoa_r+0x7d0>
 800a1d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a1d6:	464d      	mov	r5, r9
 800a1d8:	9e08      	ldr	r6, [sp, #32]
 800a1da:	9a07      	ldr	r2, [sp, #28]
 800a1dc:	2101      	movs	r1, #1
 800a1de:	441a      	add	r2, r3
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	4499      	add	r9, r3
 800a1e4:	9207      	str	r2, [sp, #28]
 800a1e6:	f000 fb24 	bl	800a832 <__i2b>
 800a1ea:	4607      	mov	r7, r0
 800a1ec:	2d00      	cmp	r5, #0
 800a1ee:	dd0b      	ble.n	800a208 <_dtoa_r+0x738>
 800a1f0:	9b07      	ldr	r3, [sp, #28]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	dd08      	ble.n	800a208 <_dtoa_r+0x738>
 800a1f6:	42ab      	cmp	r3, r5
 800a1f8:	bfa8      	it	ge
 800a1fa:	462b      	movge	r3, r5
 800a1fc:	9a07      	ldr	r2, [sp, #28]
 800a1fe:	eba9 0903 	sub.w	r9, r9, r3
 800a202:	1aed      	subs	r5, r5, r3
 800a204:	1ad3      	subs	r3, r2, r3
 800a206:	9307      	str	r3, [sp, #28]
 800a208:	9b08      	ldr	r3, [sp, #32]
 800a20a:	b1eb      	cbz	r3, 800a248 <_dtoa_r+0x778>
 800a20c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d065      	beq.n	800a2de <_dtoa_r+0x80e>
 800a212:	b18e      	cbz	r6, 800a238 <_dtoa_r+0x768>
 800a214:	4639      	mov	r1, r7
 800a216:	4632      	mov	r2, r6
 800a218:	4620      	mov	r0, r4
 800a21a:	f000 fba9 	bl	800a970 <__pow5mult>
 800a21e:	465a      	mov	r2, fp
 800a220:	4601      	mov	r1, r0
 800a222:	4607      	mov	r7, r0
 800a224:	4620      	mov	r0, r4
 800a226:	f000 fb0d 	bl	800a844 <__multiply>
 800a22a:	4659      	mov	r1, fp
 800a22c:	900a      	str	r0, [sp, #40]	; 0x28
 800a22e:	4620      	mov	r0, r4
 800a230:	f000 fa5f 	bl	800a6f2 <_Bfree>
 800a234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a236:	469b      	mov	fp, r3
 800a238:	9b08      	ldr	r3, [sp, #32]
 800a23a:	1b9a      	subs	r2, r3, r6
 800a23c:	d004      	beq.n	800a248 <_dtoa_r+0x778>
 800a23e:	4659      	mov	r1, fp
 800a240:	4620      	mov	r0, r4
 800a242:	f000 fb95 	bl	800a970 <__pow5mult>
 800a246:	4683      	mov	fp, r0
 800a248:	2101      	movs	r1, #1
 800a24a:	4620      	mov	r0, r4
 800a24c:	f000 faf1 	bl	800a832 <__i2b>
 800a250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a252:	4606      	mov	r6, r0
 800a254:	2b00      	cmp	r3, #0
 800a256:	f000 81c6 	beq.w	800a5e6 <_dtoa_r+0xb16>
 800a25a:	461a      	mov	r2, r3
 800a25c:	4601      	mov	r1, r0
 800a25e:	4620      	mov	r0, r4
 800a260:	f000 fb86 	bl	800a970 <__pow5mult>
 800a264:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a266:	4606      	mov	r6, r0
 800a268:	2b01      	cmp	r3, #1
 800a26a:	dc3e      	bgt.n	800a2ea <_dtoa_r+0x81a>
 800a26c:	9b02      	ldr	r3, [sp, #8]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d137      	bne.n	800a2e2 <_dtoa_r+0x812>
 800a272:	9b03      	ldr	r3, [sp, #12]
 800a274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d134      	bne.n	800a2e6 <_dtoa_r+0x816>
 800a27c:	9b03      	ldr	r3, [sp, #12]
 800a27e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a282:	0d1b      	lsrs	r3, r3, #20
 800a284:	051b      	lsls	r3, r3, #20
 800a286:	b12b      	cbz	r3, 800a294 <_dtoa_r+0x7c4>
 800a288:	9b07      	ldr	r3, [sp, #28]
 800a28a:	f109 0901 	add.w	r9, r9, #1
 800a28e:	3301      	adds	r3, #1
 800a290:	9307      	str	r3, [sp, #28]
 800a292:	2301      	movs	r3, #1
 800a294:	9308      	str	r3, [sp, #32]
 800a296:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d128      	bne.n	800a2ee <_dtoa_r+0x81e>
 800a29c:	2001      	movs	r0, #1
 800a29e:	e02e      	b.n	800a2fe <_dtoa_r+0x82e>
 800a2a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a2a2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a2a6:	e796      	b.n	800a1d6 <_dtoa_r+0x706>
 800a2a8:	9b08      	ldr	r3, [sp, #32]
 800a2aa:	f108 36ff 	add.w	r6, r8, #4294967295
 800a2ae:	42b3      	cmp	r3, r6
 800a2b0:	bfb7      	itett	lt
 800a2b2:	9b08      	ldrlt	r3, [sp, #32]
 800a2b4:	1b9e      	subge	r6, r3, r6
 800a2b6:	1af2      	sublt	r2, r6, r3
 800a2b8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800a2ba:	bfbf      	itttt	lt
 800a2bc:	9608      	strlt	r6, [sp, #32]
 800a2be:	189b      	addlt	r3, r3, r2
 800a2c0:	930c      	strlt	r3, [sp, #48]	; 0x30
 800a2c2:	2600      	movlt	r6, #0
 800a2c4:	f1b8 0f00 	cmp.w	r8, #0
 800a2c8:	bfb9      	ittee	lt
 800a2ca:	eba9 0508 	sublt.w	r5, r9, r8
 800a2ce:	2300      	movlt	r3, #0
 800a2d0:	464d      	movge	r5, r9
 800a2d2:	4643      	movge	r3, r8
 800a2d4:	e781      	b.n	800a1da <_dtoa_r+0x70a>
 800a2d6:	9e08      	ldr	r6, [sp, #32]
 800a2d8:	464d      	mov	r5, r9
 800a2da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a2dc:	e786      	b.n	800a1ec <_dtoa_r+0x71c>
 800a2de:	9a08      	ldr	r2, [sp, #32]
 800a2e0:	e7ad      	b.n	800a23e <_dtoa_r+0x76e>
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	e7d6      	b.n	800a294 <_dtoa_r+0x7c4>
 800a2e6:	9b02      	ldr	r3, [sp, #8]
 800a2e8:	e7d4      	b.n	800a294 <_dtoa_r+0x7c4>
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	9308      	str	r3, [sp, #32]
 800a2ee:	6933      	ldr	r3, [r6, #16]
 800a2f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a2f4:	6918      	ldr	r0, [r3, #16]
 800a2f6:	f000 fa4e 	bl	800a796 <__hi0bits>
 800a2fa:	f1c0 0020 	rsb	r0, r0, #32
 800a2fe:	9b07      	ldr	r3, [sp, #28]
 800a300:	4418      	add	r0, r3
 800a302:	f010 001f 	ands.w	r0, r0, #31
 800a306:	d047      	beq.n	800a398 <_dtoa_r+0x8c8>
 800a308:	f1c0 0320 	rsb	r3, r0, #32
 800a30c:	2b04      	cmp	r3, #4
 800a30e:	dd3b      	ble.n	800a388 <_dtoa_r+0x8b8>
 800a310:	9b07      	ldr	r3, [sp, #28]
 800a312:	f1c0 001c 	rsb	r0, r0, #28
 800a316:	4481      	add	r9, r0
 800a318:	4405      	add	r5, r0
 800a31a:	4403      	add	r3, r0
 800a31c:	9307      	str	r3, [sp, #28]
 800a31e:	f1b9 0f00 	cmp.w	r9, #0
 800a322:	dd05      	ble.n	800a330 <_dtoa_r+0x860>
 800a324:	4659      	mov	r1, fp
 800a326:	464a      	mov	r2, r9
 800a328:	4620      	mov	r0, r4
 800a32a:	f000 fb6f 	bl	800aa0c <__lshift>
 800a32e:	4683      	mov	fp, r0
 800a330:	9b07      	ldr	r3, [sp, #28]
 800a332:	2b00      	cmp	r3, #0
 800a334:	dd05      	ble.n	800a342 <_dtoa_r+0x872>
 800a336:	4631      	mov	r1, r6
 800a338:	461a      	mov	r2, r3
 800a33a:	4620      	mov	r0, r4
 800a33c:	f000 fb66 	bl	800aa0c <__lshift>
 800a340:	4606      	mov	r6, r0
 800a342:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a344:	b353      	cbz	r3, 800a39c <_dtoa_r+0x8cc>
 800a346:	4631      	mov	r1, r6
 800a348:	4658      	mov	r0, fp
 800a34a:	f000 fbb3 	bl	800aab4 <__mcmp>
 800a34e:	2800      	cmp	r0, #0
 800a350:	da24      	bge.n	800a39c <_dtoa_r+0x8cc>
 800a352:	2300      	movs	r3, #0
 800a354:	4659      	mov	r1, fp
 800a356:	220a      	movs	r2, #10
 800a358:	4620      	mov	r0, r4
 800a35a:	f000 f9e1 	bl	800a720 <__multadd>
 800a35e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a360:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a364:	4683      	mov	fp, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	f000 8144 	beq.w	800a5f4 <_dtoa_r+0xb24>
 800a36c:	2300      	movs	r3, #0
 800a36e:	4639      	mov	r1, r7
 800a370:	220a      	movs	r2, #10
 800a372:	4620      	mov	r0, r4
 800a374:	f000 f9d4 	bl	800a720 <__multadd>
 800a378:	9b04      	ldr	r3, [sp, #16]
 800a37a:	4607      	mov	r7, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	dc4d      	bgt.n	800a41c <_dtoa_r+0x94c>
 800a380:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a382:	2b02      	cmp	r3, #2
 800a384:	dd4a      	ble.n	800a41c <_dtoa_r+0x94c>
 800a386:	e011      	b.n	800a3ac <_dtoa_r+0x8dc>
 800a388:	d0c9      	beq.n	800a31e <_dtoa_r+0x84e>
 800a38a:	9a07      	ldr	r2, [sp, #28]
 800a38c:	331c      	adds	r3, #28
 800a38e:	441a      	add	r2, r3
 800a390:	4499      	add	r9, r3
 800a392:	441d      	add	r5, r3
 800a394:	4613      	mov	r3, r2
 800a396:	e7c1      	b.n	800a31c <_dtoa_r+0x84c>
 800a398:	4603      	mov	r3, r0
 800a39a:	e7f6      	b.n	800a38a <_dtoa_r+0x8ba>
 800a39c:	f1b8 0f00 	cmp.w	r8, #0
 800a3a0:	dc36      	bgt.n	800a410 <_dtoa_r+0x940>
 800a3a2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	dd33      	ble.n	800a410 <_dtoa_r+0x940>
 800a3a8:	f8cd 8010 	str.w	r8, [sp, #16]
 800a3ac:	9b04      	ldr	r3, [sp, #16]
 800a3ae:	b963      	cbnz	r3, 800a3ca <_dtoa_r+0x8fa>
 800a3b0:	4631      	mov	r1, r6
 800a3b2:	2205      	movs	r2, #5
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	f000 f9b3 	bl	800a720 <__multadd>
 800a3ba:	4601      	mov	r1, r0
 800a3bc:	4606      	mov	r6, r0
 800a3be:	4658      	mov	r0, fp
 800a3c0:	f000 fb78 	bl	800aab4 <__mcmp>
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	f73f add3 	bgt.w	8009f70 <_dtoa_r+0x4a0>
 800a3ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a3cc:	9d06      	ldr	r5, [sp, #24]
 800a3ce:	ea6f 0a03 	mvn.w	sl, r3
 800a3d2:	f04f 0900 	mov.w	r9, #0
 800a3d6:	4631      	mov	r1, r6
 800a3d8:	4620      	mov	r0, r4
 800a3da:	f000 f98a 	bl	800a6f2 <_Bfree>
 800a3de:	2f00      	cmp	r7, #0
 800a3e0:	f43f aebd 	beq.w	800a15e <_dtoa_r+0x68e>
 800a3e4:	f1b9 0f00 	cmp.w	r9, #0
 800a3e8:	d005      	beq.n	800a3f6 <_dtoa_r+0x926>
 800a3ea:	45b9      	cmp	r9, r7
 800a3ec:	d003      	beq.n	800a3f6 <_dtoa_r+0x926>
 800a3ee:	4649      	mov	r1, r9
 800a3f0:	4620      	mov	r0, r4
 800a3f2:	f000 f97e 	bl	800a6f2 <_Bfree>
 800a3f6:	4639      	mov	r1, r7
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	f000 f97a 	bl	800a6f2 <_Bfree>
 800a3fe:	e6ae      	b.n	800a15e <_dtoa_r+0x68e>
 800a400:	2600      	movs	r6, #0
 800a402:	4637      	mov	r7, r6
 800a404:	e7e1      	b.n	800a3ca <_dtoa_r+0x8fa>
 800a406:	46ba      	mov	sl, r7
 800a408:	4637      	mov	r7, r6
 800a40a:	e5b1      	b.n	8009f70 <_dtoa_r+0x4a0>
 800a40c:	40240000 	.word	0x40240000
 800a410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a412:	f8cd 8010 	str.w	r8, [sp, #16]
 800a416:	2b00      	cmp	r3, #0
 800a418:	f000 80f3 	beq.w	800a602 <_dtoa_r+0xb32>
 800a41c:	2d00      	cmp	r5, #0
 800a41e:	dd05      	ble.n	800a42c <_dtoa_r+0x95c>
 800a420:	4639      	mov	r1, r7
 800a422:	462a      	mov	r2, r5
 800a424:	4620      	mov	r0, r4
 800a426:	f000 faf1 	bl	800aa0c <__lshift>
 800a42a:	4607      	mov	r7, r0
 800a42c:	9b08      	ldr	r3, [sp, #32]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d04c      	beq.n	800a4cc <_dtoa_r+0x9fc>
 800a432:	6879      	ldr	r1, [r7, #4]
 800a434:	4620      	mov	r0, r4
 800a436:	f000 f928 	bl	800a68a <_Balloc>
 800a43a:	4605      	mov	r5, r0
 800a43c:	693a      	ldr	r2, [r7, #16]
 800a43e:	f107 010c 	add.w	r1, r7, #12
 800a442:	3202      	adds	r2, #2
 800a444:	0092      	lsls	r2, r2, #2
 800a446:	300c      	adds	r0, #12
 800a448:	f000 f912 	bl	800a670 <memcpy>
 800a44c:	2201      	movs	r2, #1
 800a44e:	4629      	mov	r1, r5
 800a450:	4620      	mov	r0, r4
 800a452:	f000 fadb 	bl	800aa0c <__lshift>
 800a456:	46b9      	mov	r9, r7
 800a458:	4607      	mov	r7, r0
 800a45a:	9b06      	ldr	r3, [sp, #24]
 800a45c:	9307      	str	r3, [sp, #28]
 800a45e:	9b02      	ldr	r3, [sp, #8]
 800a460:	f003 0301 	and.w	r3, r3, #1
 800a464:	9308      	str	r3, [sp, #32]
 800a466:	4631      	mov	r1, r6
 800a468:	4658      	mov	r0, fp
 800a46a:	f7ff faa1 	bl	80099b0 <quorem>
 800a46e:	4649      	mov	r1, r9
 800a470:	4605      	mov	r5, r0
 800a472:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a476:	4658      	mov	r0, fp
 800a478:	f000 fb1c 	bl	800aab4 <__mcmp>
 800a47c:	463a      	mov	r2, r7
 800a47e:	9002      	str	r0, [sp, #8]
 800a480:	4631      	mov	r1, r6
 800a482:	4620      	mov	r0, r4
 800a484:	f000 fb30 	bl	800aae8 <__mdiff>
 800a488:	68c3      	ldr	r3, [r0, #12]
 800a48a:	4602      	mov	r2, r0
 800a48c:	bb03      	cbnz	r3, 800a4d0 <_dtoa_r+0xa00>
 800a48e:	4601      	mov	r1, r0
 800a490:	9009      	str	r0, [sp, #36]	; 0x24
 800a492:	4658      	mov	r0, fp
 800a494:	f000 fb0e 	bl	800aab4 <__mcmp>
 800a498:	4603      	mov	r3, r0
 800a49a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a49c:	4611      	mov	r1, r2
 800a49e:	4620      	mov	r0, r4
 800a4a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a4a2:	f000 f926 	bl	800a6f2 <_Bfree>
 800a4a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4a8:	b9a3      	cbnz	r3, 800a4d4 <_dtoa_r+0xa04>
 800a4aa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a4ac:	b992      	cbnz	r2, 800a4d4 <_dtoa_r+0xa04>
 800a4ae:	9a08      	ldr	r2, [sp, #32]
 800a4b0:	b982      	cbnz	r2, 800a4d4 <_dtoa_r+0xa04>
 800a4b2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a4b6:	d029      	beq.n	800a50c <_dtoa_r+0xa3c>
 800a4b8:	9b02      	ldr	r3, [sp, #8]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	dd01      	ble.n	800a4c2 <_dtoa_r+0x9f2>
 800a4be:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a4c2:	9b07      	ldr	r3, [sp, #28]
 800a4c4:	1c5d      	adds	r5, r3, #1
 800a4c6:	f883 8000 	strb.w	r8, [r3]
 800a4ca:	e784      	b.n	800a3d6 <_dtoa_r+0x906>
 800a4cc:	4638      	mov	r0, r7
 800a4ce:	e7c2      	b.n	800a456 <_dtoa_r+0x986>
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	e7e3      	b.n	800a49c <_dtoa_r+0x9cc>
 800a4d4:	9a02      	ldr	r2, [sp, #8]
 800a4d6:	2a00      	cmp	r2, #0
 800a4d8:	db04      	blt.n	800a4e4 <_dtoa_r+0xa14>
 800a4da:	d123      	bne.n	800a524 <_dtoa_r+0xa54>
 800a4dc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a4de:	bb0a      	cbnz	r2, 800a524 <_dtoa_r+0xa54>
 800a4e0:	9a08      	ldr	r2, [sp, #32]
 800a4e2:	b9fa      	cbnz	r2, 800a524 <_dtoa_r+0xa54>
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	ddec      	ble.n	800a4c2 <_dtoa_r+0x9f2>
 800a4e8:	4659      	mov	r1, fp
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	f000 fa8d 	bl	800aa0c <__lshift>
 800a4f2:	4631      	mov	r1, r6
 800a4f4:	4683      	mov	fp, r0
 800a4f6:	f000 fadd 	bl	800aab4 <__mcmp>
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	dc03      	bgt.n	800a506 <_dtoa_r+0xa36>
 800a4fe:	d1e0      	bne.n	800a4c2 <_dtoa_r+0x9f2>
 800a500:	f018 0f01 	tst.w	r8, #1
 800a504:	d0dd      	beq.n	800a4c2 <_dtoa_r+0x9f2>
 800a506:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a50a:	d1d8      	bne.n	800a4be <_dtoa_r+0x9ee>
 800a50c:	9b07      	ldr	r3, [sp, #28]
 800a50e:	9a07      	ldr	r2, [sp, #28]
 800a510:	1c5d      	adds	r5, r3, #1
 800a512:	2339      	movs	r3, #57	; 0x39
 800a514:	7013      	strb	r3, [r2, #0]
 800a516:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a51a:	1e6a      	subs	r2, r5, #1
 800a51c:	2b39      	cmp	r3, #57	; 0x39
 800a51e:	d04d      	beq.n	800a5bc <_dtoa_r+0xaec>
 800a520:	3301      	adds	r3, #1
 800a522:	e052      	b.n	800a5ca <_dtoa_r+0xafa>
 800a524:	9a07      	ldr	r2, [sp, #28]
 800a526:	2b00      	cmp	r3, #0
 800a528:	f102 0501 	add.w	r5, r2, #1
 800a52c:	dd06      	ble.n	800a53c <_dtoa_r+0xa6c>
 800a52e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a532:	d0eb      	beq.n	800a50c <_dtoa_r+0xa3c>
 800a534:	f108 0801 	add.w	r8, r8, #1
 800a538:	9b07      	ldr	r3, [sp, #28]
 800a53a:	e7c4      	b.n	800a4c6 <_dtoa_r+0x9f6>
 800a53c:	9b06      	ldr	r3, [sp, #24]
 800a53e:	9a04      	ldr	r2, [sp, #16]
 800a540:	1aeb      	subs	r3, r5, r3
 800a542:	4293      	cmp	r3, r2
 800a544:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a548:	d021      	beq.n	800a58e <_dtoa_r+0xabe>
 800a54a:	4659      	mov	r1, fp
 800a54c:	2300      	movs	r3, #0
 800a54e:	220a      	movs	r2, #10
 800a550:	4620      	mov	r0, r4
 800a552:	f000 f8e5 	bl	800a720 <__multadd>
 800a556:	45b9      	cmp	r9, r7
 800a558:	4683      	mov	fp, r0
 800a55a:	f04f 0300 	mov.w	r3, #0
 800a55e:	f04f 020a 	mov.w	r2, #10
 800a562:	4649      	mov	r1, r9
 800a564:	4620      	mov	r0, r4
 800a566:	d105      	bne.n	800a574 <_dtoa_r+0xaa4>
 800a568:	f000 f8da 	bl	800a720 <__multadd>
 800a56c:	4681      	mov	r9, r0
 800a56e:	4607      	mov	r7, r0
 800a570:	9507      	str	r5, [sp, #28]
 800a572:	e778      	b.n	800a466 <_dtoa_r+0x996>
 800a574:	f000 f8d4 	bl	800a720 <__multadd>
 800a578:	4639      	mov	r1, r7
 800a57a:	4681      	mov	r9, r0
 800a57c:	2300      	movs	r3, #0
 800a57e:	220a      	movs	r2, #10
 800a580:	4620      	mov	r0, r4
 800a582:	f000 f8cd 	bl	800a720 <__multadd>
 800a586:	4607      	mov	r7, r0
 800a588:	e7f2      	b.n	800a570 <_dtoa_r+0xaa0>
 800a58a:	f04f 0900 	mov.w	r9, #0
 800a58e:	4659      	mov	r1, fp
 800a590:	2201      	movs	r2, #1
 800a592:	4620      	mov	r0, r4
 800a594:	f000 fa3a 	bl	800aa0c <__lshift>
 800a598:	4631      	mov	r1, r6
 800a59a:	4683      	mov	fp, r0
 800a59c:	f000 fa8a 	bl	800aab4 <__mcmp>
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	dcb8      	bgt.n	800a516 <_dtoa_r+0xa46>
 800a5a4:	d102      	bne.n	800a5ac <_dtoa_r+0xadc>
 800a5a6:	f018 0f01 	tst.w	r8, #1
 800a5aa:	d1b4      	bne.n	800a516 <_dtoa_r+0xa46>
 800a5ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a5b0:	1e6a      	subs	r2, r5, #1
 800a5b2:	2b30      	cmp	r3, #48	; 0x30
 800a5b4:	f47f af0f 	bne.w	800a3d6 <_dtoa_r+0x906>
 800a5b8:	4615      	mov	r5, r2
 800a5ba:	e7f7      	b.n	800a5ac <_dtoa_r+0xadc>
 800a5bc:	9b06      	ldr	r3, [sp, #24]
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d105      	bne.n	800a5ce <_dtoa_r+0xafe>
 800a5c2:	2331      	movs	r3, #49	; 0x31
 800a5c4:	9a06      	ldr	r2, [sp, #24]
 800a5c6:	f10a 0a01 	add.w	sl, sl, #1
 800a5ca:	7013      	strb	r3, [r2, #0]
 800a5cc:	e703      	b.n	800a3d6 <_dtoa_r+0x906>
 800a5ce:	4615      	mov	r5, r2
 800a5d0:	e7a1      	b.n	800a516 <_dtoa_r+0xa46>
 800a5d2:	4b17      	ldr	r3, [pc, #92]	; (800a630 <_dtoa_r+0xb60>)
 800a5d4:	f7ff bae1 	b.w	8009b9a <_dtoa_r+0xca>
 800a5d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	f47f aabb 	bne.w	8009b56 <_dtoa_r+0x86>
 800a5e0:	4b14      	ldr	r3, [pc, #80]	; (800a634 <_dtoa_r+0xb64>)
 800a5e2:	f7ff bada 	b.w	8009b9a <_dtoa_r+0xca>
 800a5e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	f77f ae3f 	ble.w	800a26c <_dtoa_r+0x79c>
 800a5ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5f0:	9308      	str	r3, [sp, #32]
 800a5f2:	e653      	b.n	800a29c <_dtoa_r+0x7cc>
 800a5f4:	9b04      	ldr	r3, [sp, #16]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	dc03      	bgt.n	800a602 <_dtoa_r+0xb32>
 800a5fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a5fc:	2b02      	cmp	r3, #2
 800a5fe:	f73f aed5 	bgt.w	800a3ac <_dtoa_r+0x8dc>
 800a602:	9d06      	ldr	r5, [sp, #24]
 800a604:	4631      	mov	r1, r6
 800a606:	4658      	mov	r0, fp
 800a608:	f7ff f9d2 	bl	80099b0 <quorem>
 800a60c:	9b06      	ldr	r3, [sp, #24]
 800a60e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a612:	f805 8b01 	strb.w	r8, [r5], #1
 800a616:	9a04      	ldr	r2, [sp, #16]
 800a618:	1aeb      	subs	r3, r5, r3
 800a61a:	429a      	cmp	r2, r3
 800a61c:	ddb5      	ble.n	800a58a <_dtoa_r+0xaba>
 800a61e:	4659      	mov	r1, fp
 800a620:	2300      	movs	r3, #0
 800a622:	220a      	movs	r2, #10
 800a624:	4620      	mov	r0, r4
 800a626:	f000 f87b 	bl	800a720 <__multadd>
 800a62a:	4683      	mov	fp, r0
 800a62c:	e7ea      	b.n	800a604 <_dtoa_r+0xb34>
 800a62e:	bf00      	nop
 800a630:	0800b0d0 	.word	0x0800b0d0
 800a634:	0800b0f4 	.word	0x0800b0f4

0800a638 <_localeconv_r>:
 800a638:	4b04      	ldr	r3, [pc, #16]	; (800a64c <_localeconv_r+0x14>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	6a18      	ldr	r0, [r3, #32]
 800a63e:	4b04      	ldr	r3, [pc, #16]	; (800a650 <_localeconv_r+0x18>)
 800a640:	2800      	cmp	r0, #0
 800a642:	bf08      	it	eq
 800a644:	4618      	moveq	r0, r3
 800a646:	30f0      	adds	r0, #240	; 0xf0
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	20000050 	.word	0x20000050
 800a650:	200000b4 	.word	0x200000b4

0800a654 <memchr>:
 800a654:	b510      	push	{r4, lr}
 800a656:	b2c9      	uxtb	r1, r1
 800a658:	4402      	add	r2, r0
 800a65a:	4290      	cmp	r0, r2
 800a65c:	4603      	mov	r3, r0
 800a65e:	d101      	bne.n	800a664 <memchr+0x10>
 800a660:	2300      	movs	r3, #0
 800a662:	e003      	b.n	800a66c <memchr+0x18>
 800a664:	781c      	ldrb	r4, [r3, #0]
 800a666:	3001      	adds	r0, #1
 800a668:	428c      	cmp	r4, r1
 800a66a:	d1f6      	bne.n	800a65a <memchr+0x6>
 800a66c:	4618      	mov	r0, r3
 800a66e:	bd10      	pop	{r4, pc}

0800a670 <memcpy>:
 800a670:	b510      	push	{r4, lr}
 800a672:	1e43      	subs	r3, r0, #1
 800a674:	440a      	add	r2, r1
 800a676:	4291      	cmp	r1, r2
 800a678:	d100      	bne.n	800a67c <memcpy+0xc>
 800a67a:	bd10      	pop	{r4, pc}
 800a67c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a680:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a684:	e7f7      	b.n	800a676 <memcpy+0x6>

0800a686 <__malloc_lock>:
 800a686:	4770      	bx	lr

0800a688 <__malloc_unlock>:
 800a688:	4770      	bx	lr

0800a68a <_Balloc>:
 800a68a:	b570      	push	{r4, r5, r6, lr}
 800a68c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a68e:	4604      	mov	r4, r0
 800a690:	460e      	mov	r6, r1
 800a692:	b93d      	cbnz	r5, 800a6a4 <_Balloc+0x1a>
 800a694:	2010      	movs	r0, #16
 800a696:	f7fe fc1f 	bl	8008ed8 <malloc>
 800a69a:	6260      	str	r0, [r4, #36]	; 0x24
 800a69c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a6a0:	6005      	str	r5, [r0, #0]
 800a6a2:	60c5      	str	r5, [r0, #12]
 800a6a4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a6a6:	68eb      	ldr	r3, [r5, #12]
 800a6a8:	b183      	cbz	r3, 800a6cc <_Balloc+0x42>
 800a6aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a6b2:	b9b8      	cbnz	r0, 800a6e4 <_Balloc+0x5a>
 800a6b4:	2101      	movs	r1, #1
 800a6b6:	fa01 f506 	lsl.w	r5, r1, r6
 800a6ba:	1d6a      	adds	r2, r5, #5
 800a6bc:	0092      	lsls	r2, r2, #2
 800a6be:	4620      	mov	r0, r4
 800a6c0:	f7fe fc22 	bl	8008f08 <_calloc_r>
 800a6c4:	b160      	cbz	r0, 800a6e0 <_Balloc+0x56>
 800a6c6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a6ca:	e00e      	b.n	800a6ea <_Balloc+0x60>
 800a6cc:	2221      	movs	r2, #33	; 0x21
 800a6ce:	2104      	movs	r1, #4
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f7fe fc19 	bl	8008f08 <_calloc_r>
 800a6d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6d8:	60e8      	str	r0, [r5, #12]
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d1e4      	bne.n	800a6aa <_Balloc+0x20>
 800a6e0:	2000      	movs	r0, #0
 800a6e2:	bd70      	pop	{r4, r5, r6, pc}
 800a6e4:	6802      	ldr	r2, [r0, #0]
 800a6e6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a6f0:	e7f7      	b.n	800a6e2 <_Balloc+0x58>

0800a6f2 <_Bfree>:
 800a6f2:	b570      	push	{r4, r5, r6, lr}
 800a6f4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a6f6:	4606      	mov	r6, r0
 800a6f8:	460d      	mov	r5, r1
 800a6fa:	b93c      	cbnz	r4, 800a70c <_Bfree+0x1a>
 800a6fc:	2010      	movs	r0, #16
 800a6fe:	f7fe fbeb 	bl	8008ed8 <malloc>
 800a702:	6270      	str	r0, [r6, #36]	; 0x24
 800a704:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a708:	6004      	str	r4, [r0, #0]
 800a70a:	60c4      	str	r4, [r0, #12]
 800a70c:	b13d      	cbz	r5, 800a71e <_Bfree+0x2c>
 800a70e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a710:	686a      	ldr	r2, [r5, #4]
 800a712:	68db      	ldr	r3, [r3, #12]
 800a714:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a718:	6029      	str	r1, [r5, #0]
 800a71a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a71e:	bd70      	pop	{r4, r5, r6, pc}

0800a720 <__multadd>:
 800a720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a724:	461f      	mov	r7, r3
 800a726:	4606      	mov	r6, r0
 800a728:	460c      	mov	r4, r1
 800a72a:	2300      	movs	r3, #0
 800a72c:	690d      	ldr	r5, [r1, #16]
 800a72e:	f101 0c14 	add.w	ip, r1, #20
 800a732:	f8dc 0000 	ldr.w	r0, [ip]
 800a736:	3301      	adds	r3, #1
 800a738:	b281      	uxth	r1, r0
 800a73a:	fb02 7101 	mla	r1, r2, r1, r7
 800a73e:	0c00      	lsrs	r0, r0, #16
 800a740:	0c0f      	lsrs	r7, r1, #16
 800a742:	fb02 7000 	mla	r0, r2, r0, r7
 800a746:	b289      	uxth	r1, r1
 800a748:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a74c:	429d      	cmp	r5, r3
 800a74e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a752:	f84c 1b04 	str.w	r1, [ip], #4
 800a756:	dcec      	bgt.n	800a732 <__multadd+0x12>
 800a758:	b1d7      	cbz	r7, 800a790 <__multadd+0x70>
 800a75a:	68a3      	ldr	r3, [r4, #8]
 800a75c:	42ab      	cmp	r3, r5
 800a75e:	dc12      	bgt.n	800a786 <__multadd+0x66>
 800a760:	6861      	ldr	r1, [r4, #4]
 800a762:	4630      	mov	r0, r6
 800a764:	3101      	adds	r1, #1
 800a766:	f7ff ff90 	bl	800a68a <_Balloc>
 800a76a:	4680      	mov	r8, r0
 800a76c:	6922      	ldr	r2, [r4, #16]
 800a76e:	f104 010c 	add.w	r1, r4, #12
 800a772:	3202      	adds	r2, #2
 800a774:	0092      	lsls	r2, r2, #2
 800a776:	300c      	adds	r0, #12
 800a778:	f7ff ff7a 	bl	800a670 <memcpy>
 800a77c:	4621      	mov	r1, r4
 800a77e:	4630      	mov	r0, r6
 800a780:	f7ff ffb7 	bl	800a6f2 <_Bfree>
 800a784:	4644      	mov	r4, r8
 800a786:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a78a:	3501      	adds	r5, #1
 800a78c:	615f      	str	r7, [r3, #20]
 800a78e:	6125      	str	r5, [r4, #16]
 800a790:	4620      	mov	r0, r4
 800a792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a796 <__hi0bits>:
 800a796:	0c02      	lsrs	r2, r0, #16
 800a798:	0412      	lsls	r2, r2, #16
 800a79a:	4603      	mov	r3, r0
 800a79c:	b9b2      	cbnz	r2, 800a7cc <__hi0bits+0x36>
 800a79e:	0403      	lsls	r3, r0, #16
 800a7a0:	2010      	movs	r0, #16
 800a7a2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a7a6:	bf04      	itt	eq
 800a7a8:	021b      	lsleq	r3, r3, #8
 800a7aa:	3008      	addeq	r0, #8
 800a7ac:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a7b0:	bf04      	itt	eq
 800a7b2:	011b      	lsleq	r3, r3, #4
 800a7b4:	3004      	addeq	r0, #4
 800a7b6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a7ba:	bf04      	itt	eq
 800a7bc:	009b      	lsleq	r3, r3, #2
 800a7be:	3002      	addeq	r0, #2
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	db06      	blt.n	800a7d2 <__hi0bits+0x3c>
 800a7c4:	005b      	lsls	r3, r3, #1
 800a7c6:	d503      	bpl.n	800a7d0 <__hi0bits+0x3a>
 800a7c8:	3001      	adds	r0, #1
 800a7ca:	4770      	bx	lr
 800a7cc:	2000      	movs	r0, #0
 800a7ce:	e7e8      	b.n	800a7a2 <__hi0bits+0xc>
 800a7d0:	2020      	movs	r0, #32
 800a7d2:	4770      	bx	lr

0800a7d4 <__lo0bits>:
 800a7d4:	6803      	ldr	r3, [r0, #0]
 800a7d6:	4601      	mov	r1, r0
 800a7d8:	f013 0207 	ands.w	r2, r3, #7
 800a7dc:	d00b      	beq.n	800a7f6 <__lo0bits+0x22>
 800a7de:	07da      	lsls	r2, r3, #31
 800a7e0:	d423      	bmi.n	800a82a <__lo0bits+0x56>
 800a7e2:	0798      	lsls	r0, r3, #30
 800a7e4:	bf49      	itett	mi
 800a7e6:	085b      	lsrmi	r3, r3, #1
 800a7e8:	089b      	lsrpl	r3, r3, #2
 800a7ea:	2001      	movmi	r0, #1
 800a7ec:	600b      	strmi	r3, [r1, #0]
 800a7ee:	bf5c      	itt	pl
 800a7f0:	600b      	strpl	r3, [r1, #0]
 800a7f2:	2002      	movpl	r0, #2
 800a7f4:	4770      	bx	lr
 800a7f6:	b298      	uxth	r0, r3
 800a7f8:	b9a8      	cbnz	r0, 800a826 <__lo0bits+0x52>
 800a7fa:	2010      	movs	r0, #16
 800a7fc:	0c1b      	lsrs	r3, r3, #16
 800a7fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a802:	bf04      	itt	eq
 800a804:	0a1b      	lsreq	r3, r3, #8
 800a806:	3008      	addeq	r0, #8
 800a808:	071a      	lsls	r2, r3, #28
 800a80a:	bf04      	itt	eq
 800a80c:	091b      	lsreq	r3, r3, #4
 800a80e:	3004      	addeq	r0, #4
 800a810:	079a      	lsls	r2, r3, #30
 800a812:	bf04      	itt	eq
 800a814:	089b      	lsreq	r3, r3, #2
 800a816:	3002      	addeq	r0, #2
 800a818:	07da      	lsls	r2, r3, #31
 800a81a:	d402      	bmi.n	800a822 <__lo0bits+0x4e>
 800a81c:	085b      	lsrs	r3, r3, #1
 800a81e:	d006      	beq.n	800a82e <__lo0bits+0x5a>
 800a820:	3001      	adds	r0, #1
 800a822:	600b      	str	r3, [r1, #0]
 800a824:	4770      	bx	lr
 800a826:	4610      	mov	r0, r2
 800a828:	e7e9      	b.n	800a7fe <__lo0bits+0x2a>
 800a82a:	2000      	movs	r0, #0
 800a82c:	4770      	bx	lr
 800a82e:	2020      	movs	r0, #32
 800a830:	4770      	bx	lr

0800a832 <__i2b>:
 800a832:	b510      	push	{r4, lr}
 800a834:	460c      	mov	r4, r1
 800a836:	2101      	movs	r1, #1
 800a838:	f7ff ff27 	bl	800a68a <_Balloc>
 800a83c:	2201      	movs	r2, #1
 800a83e:	6144      	str	r4, [r0, #20]
 800a840:	6102      	str	r2, [r0, #16]
 800a842:	bd10      	pop	{r4, pc}

0800a844 <__multiply>:
 800a844:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a848:	4614      	mov	r4, r2
 800a84a:	690a      	ldr	r2, [r1, #16]
 800a84c:	6923      	ldr	r3, [r4, #16]
 800a84e:	4688      	mov	r8, r1
 800a850:	429a      	cmp	r2, r3
 800a852:	bfbe      	ittt	lt
 800a854:	460b      	movlt	r3, r1
 800a856:	46a0      	movlt	r8, r4
 800a858:	461c      	movlt	r4, r3
 800a85a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a85e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a862:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a866:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a86a:	eb07 0609 	add.w	r6, r7, r9
 800a86e:	42b3      	cmp	r3, r6
 800a870:	bfb8      	it	lt
 800a872:	3101      	addlt	r1, #1
 800a874:	f7ff ff09 	bl	800a68a <_Balloc>
 800a878:	f100 0514 	add.w	r5, r0, #20
 800a87c:	462b      	mov	r3, r5
 800a87e:	2200      	movs	r2, #0
 800a880:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a884:	4573      	cmp	r3, lr
 800a886:	d316      	bcc.n	800a8b6 <__multiply+0x72>
 800a888:	f104 0214 	add.w	r2, r4, #20
 800a88c:	f108 0114 	add.w	r1, r8, #20
 800a890:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a894:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a898:	9300      	str	r3, [sp, #0]
 800a89a:	9b00      	ldr	r3, [sp, #0]
 800a89c:	9201      	str	r2, [sp, #4]
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d80c      	bhi.n	800a8bc <__multiply+0x78>
 800a8a2:	2e00      	cmp	r6, #0
 800a8a4:	dd03      	ble.n	800a8ae <__multiply+0x6a>
 800a8a6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d05d      	beq.n	800a96a <__multiply+0x126>
 800a8ae:	6106      	str	r6, [r0, #16]
 800a8b0:	b003      	add	sp, #12
 800a8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b6:	f843 2b04 	str.w	r2, [r3], #4
 800a8ba:	e7e3      	b.n	800a884 <__multiply+0x40>
 800a8bc:	f8b2 b000 	ldrh.w	fp, [r2]
 800a8c0:	f1bb 0f00 	cmp.w	fp, #0
 800a8c4:	d023      	beq.n	800a90e <__multiply+0xca>
 800a8c6:	4689      	mov	r9, r1
 800a8c8:	46ac      	mov	ip, r5
 800a8ca:	f04f 0800 	mov.w	r8, #0
 800a8ce:	f859 4b04 	ldr.w	r4, [r9], #4
 800a8d2:	f8dc a000 	ldr.w	sl, [ip]
 800a8d6:	b2a3      	uxth	r3, r4
 800a8d8:	fa1f fa8a 	uxth.w	sl, sl
 800a8dc:	fb0b a303 	mla	r3, fp, r3, sl
 800a8e0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a8e4:	f8dc 4000 	ldr.w	r4, [ip]
 800a8e8:	4443      	add	r3, r8
 800a8ea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a8ee:	fb0b 840a 	mla	r4, fp, sl, r8
 800a8f2:	46e2      	mov	sl, ip
 800a8f4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a8fe:	454f      	cmp	r7, r9
 800a900:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a904:	f84a 3b04 	str.w	r3, [sl], #4
 800a908:	d82b      	bhi.n	800a962 <__multiply+0x11e>
 800a90a:	f8cc 8004 	str.w	r8, [ip, #4]
 800a90e:	9b01      	ldr	r3, [sp, #4]
 800a910:	3204      	adds	r2, #4
 800a912:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a916:	f1ba 0f00 	cmp.w	sl, #0
 800a91a:	d020      	beq.n	800a95e <__multiply+0x11a>
 800a91c:	4689      	mov	r9, r1
 800a91e:	46a8      	mov	r8, r5
 800a920:	f04f 0b00 	mov.w	fp, #0
 800a924:	682b      	ldr	r3, [r5, #0]
 800a926:	f8b9 c000 	ldrh.w	ip, [r9]
 800a92a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a92e:	b29b      	uxth	r3, r3
 800a930:	fb0a 440c 	mla	r4, sl, ip, r4
 800a934:	46c4      	mov	ip, r8
 800a936:	445c      	add	r4, fp
 800a938:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a93c:	f84c 3b04 	str.w	r3, [ip], #4
 800a940:	f859 3b04 	ldr.w	r3, [r9], #4
 800a944:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a948:	0c1b      	lsrs	r3, r3, #16
 800a94a:	fb0a b303 	mla	r3, sl, r3, fp
 800a94e:	454f      	cmp	r7, r9
 800a950:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a954:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a958:	d805      	bhi.n	800a966 <__multiply+0x122>
 800a95a:	f8c8 3004 	str.w	r3, [r8, #4]
 800a95e:	3504      	adds	r5, #4
 800a960:	e79b      	b.n	800a89a <__multiply+0x56>
 800a962:	46d4      	mov	ip, sl
 800a964:	e7b3      	b.n	800a8ce <__multiply+0x8a>
 800a966:	46e0      	mov	r8, ip
 800a968:	e7dd      	b.n	800a926 <__multiply+0xe2>
 800a96a:	3e01      	subs	r6, #1
 800a96c:	e799      	b.n	800a8a2 <__multiply+0x5e>
	...

0800a970 <__pow5mult>:
 800a970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a974:	4615      	mov	r5, r2
 800a976:	f012 0203 	ands.w	r2, r2, #3
 800a97a:	4606      	mov	r6, r0
 800a97c:	460f      	mov	r7, r1
 800a97e:	d007      	beq.n	800a990 <__pow5mult+0x20>
 800a980:	4c21      	ldr	r4, [pc, #132]	; (800aa08 <__pow5mult+0x98>)
 800a982:	3a01      	subs	r2, #1
 800a984:	2300      	movs	r3, #0
 800a986:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a98a:	f7ff fec9 	bl	800a720 <__multadd>
 800a98e:	4607      	mov	r7, r0
 800a990:	10ad      	asrs	r5, r5, #2
 800a992:	d035      	beq.n	800aa00 <__pow5mult+0x90>
 800a994:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a996:	b93c      	cbnz	r4, 800a9a8 <__pow5mult+0x38>
 800a998:	2010      	movs	r0, #16
 800a99a:	f7fe fa9d 	bl	8008ed8 <malloc>
 800a99e:	6270      	str	r0, [r6, #36]	; 0x24
 800a9a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9a4:	6004      	str	r4, [r0, #0]
 800a9a6:	60c4      	str	r4, [r0, #12]
 800a9a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a9ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a9b0:	b94c      	cbnz	r4, 800a9c6 <__pow5mult+0x56>
 800a9b2:	f240 2171 	movw	r1, #625	; 0x271
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	f7ff ff3b 	bl	800a832 <__i2b>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	4604      	mov	r4, r0
 800a9c0:	f8c8 0008 	str.w	r0, [r8, #8]
 800a9c4:	6003      	str	r3, [r0, #0]
 800a9c6:	f04f 0800 	mov.w	r8, #0
 800a9ca:	07eb      	lsls	r3, r5, #31
 800a9cc:	d50a      	bpl.n	800a9e4 <__pow5mult+0x74>
 800a9ce:	4639      	mov	r1, r7
 800a9d0:	4622      	mov	r2, r4
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	f7ff ff36 	bl	800a844 <__multiply>
 800a9d8:	4681      	mov	r9, r0
 800a9da:	4639      	mov	r1, r7
 800a9dc:	4630      	mov	r0, r6
 800a9de:	f7ff fe88 	bl	800a6f2 <_Bfree>
 800a9e2:	464f      	mov	r7, r9
 800a9e4:	106d      	asrs	r5, r5, #1
 800a9e6:	d00b      	beq.n	800aa00 <__pow5mult+0x90>
 800a9e8:	6820      	ldr	r0, [r4, #0]
 800a9ea:	b938      	cbnz	r0, 800a9fc <__pow5mult+0x8c>
 800a9ec:	4622      	mov	r2, r4
 800a9ee:	4621      	mov	r1, r4
 800a9f0:	4630      	mov	r0, r6
 800a9f2:	f7ff ff27 	bl	800a844 <__multiply>
 800a9f6:	6020      	str	r0, [r4, #0]
 800a9f8:	f8c0 8000 	str.w	r8, [r0]
 800a9fc:	4604      	mov	r4, r0
 800a9fe:	e7e4      	b.n	800a9ca <__pow5mult+0x5a>
 800aa00:	4638      	mov	r0, r7
 800aa02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa06:	bf00      	nop
 800aa08:	0800b1f8 	.word	0x0800b1f8

0800aa0c <__lshift>:
 800aa0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa10:	460c      	mov	r4, r1
 800aa12:	4607      	mov	r7, r0
 800aa14:	4616      	mov	r6, r2
 800aa16:	6923      	ldr	r3, [r4, #16]
 800aa18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa1c:	eb0a 0903 	add.w	r9, sl, r3
 800aa20:	6849      	ldr	r1, [r1, #4]
 800aa22:	68a3      	ldr	r3, [r4, #8]
 800aa24:	f109 0501 	add.w	r5, r9, #1
 800aa28:	42ab      	cmp	r3, r5
 800aa2a:	db32      	blt.n	800aa92 <__lshift+0x86>
 800aa2c:	4638      	mov	r0, r7
 800aa2e:	f7ff fe2c 	bl	800a68a <_Balloc>
 800aa32:	2300      	movs	r3, #0
 800aa34:	4680      	mov	r8, r0
 800aa36:	461a      	mov	r2, r3
 800aa38:	f100 0114 	add.w	r1, r0, #20
 800aa3c:	4553      	cmp	r3, sl
 800aa3e:	db2b      	blt.n	800aa98 <__lshift+0x8c>
 800aa40:	6920      	ldr	r0, [r4, #16]
 800aa42:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa46:	f104 0314 	add.w	r3, r4, #20
 800aa4a:	f016 021f 	ands.w	r2, r6, #31
 800aa4e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa52:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aa56:	d025      	beq.n	800aaa4 <__lshift+0x98>
 800aa58:	2000      	movs	r0, #0
 800aa5a:	f1c2 0e20 	rsb	lr, r2, #32
 800aa5e:	468a      	mov	sl, r1
 800aa60:	681e      	ldr	r6, [r3, #0]
 800aa62:	4096      	lsls	r6, r2
 800aa64:	4330      	orrs	r0, r6
 800aa66:	f84a 0b04 	str.w	r0, [sl], #4
 800aa6a:	f853 0b04 	ldr.w	r0, [r3], #4
 800aa6e:	459c      	cmp	ip, r3
 800aa70:	fa20 f00e 	lsr.w	r0, r0, lr
 800aa74:	d814      	bhi.n	800aaa0 <__lshift+0x94>
 800aa76:	6048      	str	r0, [r1, #4]
 800aa78:	b108      	cbz	r0, 800aa7e <__lshift+0x72>
 800aa7a:	f109 0502 	add.w	r5, r9, #2
 800aa7e:	3d01      	subs	r5, #1
 800aa80:	4638      	mov	r0, r7
 800aa82:	f8c8 5010 	str.w	r5, [r8, #16]
 800aa86:	4621      	mov	r1, r4
 800aa88:	f7ff fe33 	bl	800a6f2 <_Bfree>
 800aa8c:	4640      	mov	r0, r8
 800aa8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa92:	3101      	adds	r1, #1
 800aa94:	005b      	lsls	r3, r3, #1
 800aa96:	e7c7      	b.n	800aa28 <__lshift+0x1c>
 800aa98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	e7cd      	b.n	800aa3c <__lshift+0x30>
 800aaa0:	4651      	mov	r1, sl
 800aaa2:	e7dc      	b.n	800aa5e <__lshift+0x52>
 800aaa4:	3904      	subs	r1, #4
 800aaa6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaaa:	459c      	cmp	ip, r3
 800aaac:	f841 2f04 	str.w	r2, [r1, #4]!
 800aab0:	d8f9      	bhi.n	800aaa6 <__lshift+0x9a>
 800aab2:	e7e4      	b.n	800aa7e <__lshift+0x72>

0800aab4 <__mcmp>:
 800aab4:	6903      	ldr	r3, [r0, #16]
 800aab6:	690a      	ldr	r2, [r1, #16]
 800aab8:	b530      	push	{r4, r5, lr}
 800aaba:	1a9b      	subs	r3, r3, r2
 800aabc:	d10c      	bne.n	800aad8 <__mcmp+0x24>
 800aabe:	0092      	lsls	r2, r2, #2
 800aac0:	3014      	adds	r0, #20
 800aac2:	3114      	adds	r1, #20
 800aac4:	1884      	adds	r4, r0, r2
 800aac6:	4411      	add	r1, r2
 800aac8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aacc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aad0:	4295      	cmp	r5, r2
 800aad2:	d003      	beq.n	800aadc <__mcmp+0x28>
 800aad4:	d305      	bcc.n	800aae2 <__mcmp+0x2e>
 800aad6:	2301      	movs	r3, #1
 800aad8:	4618      	mov	r0, r3
 800aada:	bd30      	pop	{r4, r5, pc}
 800aadc:	42a0      	cmp	r0, r4
 800aade:	d3f3      	bcc.n	800aac8 <__mcmp+0x14>
 800aae0:	e7fa      	b.n	800aad8 <__mcmp+0x24>
 800aae2:	f04f 33ff 	mov.w	r3, #4294967295
 800aae6:	e7f7      	b.n	800aad8 <__mcmp+0x24>

0800aae8 <__mdiff>:
 800aae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaec:	460d      	mov	r5, r1
 800aaee:	4607      	mov	r7, r0
 800aaf0:	4611      	mov	r1, r2
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	4614      	mov	r4, r2
 800aaf6:	f7ff ffdd 	bl	800aab4 <__mcmp>
 800aafa:	1e06      	subs	r6, r0, #0
 800aafc:	d108      	bne.n	800ab10 <__mdiff+0x28>
 800aafe:	4631      	mov	r1, r6
 800ab00:	4638      	mov	r0, r7
 800ab02:	f7ff fdc2 	bl	800a68a <_Balloc>
 800ab06:	2301      	movs	r3, #1
 800ab08:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ab0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab10:	bfa4      	itt	ge
 800ab12:	4623      	movge	r3, r4
 800ab14:	462c      	movge	r4, r5
 800ab16:	4638      	mov	r0, r7
 800ab18:	6861      	ldr	r1, [r4, #4]
 800ab1a:	bfa6      	itte	ge
 800ab1c:	461d      	movge	r5, r3
 800ab1e:	2600      	movge	r6, #0
 800ab20:	2601      	movlt	r6, #1
 800ab22:	f7ff fdb2 	bl	800a68a <_Balloc>
 800ab26:	f04f 0e00 	mov.w	lr, #0
 800ab2a:	60c6      	str	r6, [r0, #12]
 800ab2c:	692b      	ldr	r3, [r5, #16]
 800ab2e:	6926      	ldr	r6, [r4, #16]
 800ab30:	f104 0214 	add.w	r2, r4, #20
 800ab34:	f105 0914 	add.w	r9, r5, #20
 800ab38:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ab3c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ab40:	f100 0114 	add.w	r1, r0, #20
 800ab44:	f852 ab04 	ldr.w	sl, [r2], #4
 800ab48:	f859 5b04 	ldr.w	r5, [r9], #4
 800ab4c:	fa1f f38a 	uxth.w	r3, sl
 800ab50:	4473      	add	r3, lr
 800ab52:	b2ac      	uxth	r4, r5
 800ab54:	1b1b      	subs	r3, r3, r4
 800ab56:	0c2c      	lsrs	r4, r5, #16
 800ab58:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800ab5c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800ab66:	45c8      	cmp	r8, r9
 800ab68:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800ab6c:	4694      	mov	ip, r2
 800ab6e:	f841 4b04 	str.w	r4, [r1], #4
 800ab72:	d8e7      	bhi.n	800ab44 <__mdiff+0x5c>
 800ab74:	45bc      	cmp	ip, r7
 800ab76:	d304      	bcc.n	800ab82 <__mdiff+0x9a>
 800ab78:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ab7c:	b183      	cbz	r3, 800aba0 <__mdiff+0xb8>
 800ab7e:	6106      	str	r6, [r0, #16]
 800ab80:	e7c4      	b.n	800ab0c <__mdiff+0x24>
 800ab82:	f85c 4b04 	ldr.w	r4, [ip], #4
 800ab86:	b2a2      	uxth	r2, r4
 800ab88:	4472      	add	r2, lr
 800ab8a:	1413      	asrs	r3, r2, #16
 800ab8c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ab90:	b292      	uxth	r2, r2
 800ab92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ab96:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ab9a:	f841 2b04 	str.w	r2, [r1], #4
 800ab9e:	e7e9      	b.n	800ab74 <__mdiff+0x8c>
 800aba0:	3e01      	subs	r6, #1
 800aba2:	e7e9      	b.n	800ab78 <__mdiff+0x90>

0800aba4 <__d2b>:
 800aba4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800aba8:	461c      	mov	r4, r3
 800abaa:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800abae:	2101      	movs	r1, #1
 800abb0:	4690      	mov	r8, r2
 800abb2:	f7ff fd6a 	bl	800a68a <_Balloc>
 800abb6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800abba:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800abbe:	4607      	mov	r7, r0
 800abc0:	bb34      	cbnz	r4, 800ac10 <__d2b+0x6c>
 800abc2:	9201      	str	r2, [sp, #4]
 800abc4:	f1b8 0200 	subs.w	r2, r8, #0
 800abc8:	d027      	beq.n	800ac1a <__d2b+0x76>
 800abca:	a802      	add	r0, sp, #8
 800abcc:	f840 2d08 	str.w	r2, [r0, #-8]!
 800abd0:	f7ff fe00 	bl	800a7d4 <__lo0bits>
 800abd4:	9900      	ldr	r1, [sp, #0]
 800abd6:	b1f0      	cbz	r0, 800ac16 <__d2b+0x72>
 800abd8:	9a01      	ldr	r2, [sp, #4]
 800abda:	f1c0 0320 	rsb	r3, r0, #32
 800abde:	fa02 f303 	lsl.w	r3, r2, r3
 800abe2:	430b      	orrs	r3, r1
 800abe4:	40c2      	lsrs	r2, r0
 800abe6:	617b      	str	r3, [r7, #20]
 800abe8:	9201      	str	r2, [sp, #4]
 800abea:	9b01      	ldr	r3, [sp, #4]
 800abec:	2b00      	cmp	r3, #0
 800abee:	bf14      	ite	ne
 800abf0:	2102      	movne	r1, #2
 800abf2:	2101      	moveq	r1, #1
 800abf4:	61bb      	str	r3, [r7, #24]
 800abf6:	6139      	str	r1, [r7, #16]
 800abf8:	b1c4      	cbz	r4, 800ac2c <__d2b+0x88>
 800abfa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800abfe:	4404      	add	r4, r0
 800ac00:	6034      	str	r4, [r6, #0]
 800ac02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac06:	6028      	str	r0, [r5, #0]
 800ac08:	4638      	mov	r0, r7
 800ac0a:	b002      	add	sp, #8
 800ac0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac10:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ac14:	e7d5      	b.n	800abc2 <__d2b+0x1e>
 800ac16:	6179      	str	r1, [r7, #20]
 800ac18:	e7e7      	b.n	800abea <__d2b+0x46>
 800ac1a:	a801      	add	r0, sp, #4
 800ac1c:	f7ff fdda 	bl	800a7d4 <__lo0bits>
 800ac20:	2101      	movs	r1, #1
 800ac22:	9b01      	ldr	r3, [sp, #4]
 800ac24:	6139      	str	r1, [r7, #16]
 800ac26:	617b      	str	r3, [r7, #20]
 800ac28:	3020      	adds	r0, #32
 800ac2a:	e7e5      	b.n	800abf8 <__d2b+0x54>
 800ac2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ac30:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ac34:	6030      	str	r0, [r6, #0]
 800ac36:	6918      	ldr	r0, [r3, #16]
 800ac38:	f7ff fdad 	bl	800a796 <__hi0bits>
 800ac3c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ac40:	e7e1      	b.n	800ac06 <__d2b+0x62>

0800ac42 <__ssputs_r>:
 800ac42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac46:	688e      	ldr	r6, [r1, #8]
 800ac48:	4682      	mov	sl, r0
 800ac4a:	429e      	cmp	r6, r3
 800ac4c:	460c      	mov	r4, r1
 800ac4e:	4690      	mov	r8, r2
 800ac50:	4699      	mov	r9, r3
 800ac52:	d837      	bhi.n	800acc4 <__ssputs_r+0x82>
 800ac54:	898a      	ldrh	r2, [r1, #12]
 800ac56:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac5a:	d031      	beq.n	800acc0 <__ssputs_r+0x7e>
 800ac5c:	2302      	movs	r3, #2
 800ac5e:	6825      	ldr	r5, [r4, #0]
 800ac60:	6909      	ldr	r1, [r1, #16]
 800ac62:	1a6f      	subs	r7, r5, r1
 800ac64:	6965      	ldr	r5, [r4, #20]
 800ac66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac6a:	fb95 f5f3 	sdiv	r5, r5, r3
 800ac6e:	f109 0301 	add.w	r3, r9, #1
 800ac72:	443b      	add	r3, r7
 800ac74:	429d      	cmp	r5, r3
 800ac76:	bf38      	it	cc
 800ac78:	461d      	movcc	r5, r3
 800ac7a:	0553      	lsls	r3, r2, #21
 800ac7c:	d530      	bpl.n	800ace0 <__ssputs_r+0x9e>
 800ac7e:	4629      	mov	r1, r5
 800ac80:	f7fe f99c 	bl	8008fbc <_malloc_r>
 800ac84:	4606      	mov	r6, r0
 800ac86:	b950      	cbnz	r0, 800ac9e <__ssputs_r+0x5c>
 800ac88:	230c      	movs	r3, #12
 800ac8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac8e:	f8ca 3000 	str.w	r3, [sl]
 800ac92:	89a3      	ldrh	r3, [r4, #12]
 800ac94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac98:	81a3      	strh	r3, [r4, #12]
 800ac9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac9e:	463a      	mov	r2, r7
 800aca0:	6921      	ldr	r1, [r4, #16]
 800aca2:	f7ff fce5 	bl	800a670 <memcpy>
 800aca6:	89a3      	ldrh	r3, [r4, #12]
 800aca8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800acac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acb0:	81a3      	strh	r3, [r4, #12]
 800acb2:	6126      	str	r6, [r4, #16]
 800acb4:	443e      	add	r6, r7
 800acb6:	6026      	str	r6, [r4, #0]
 800acb8:	464e      	mov	r6, r9
 800acba:	6165      	str	r5, [r4, #20]
 800acbc:	1bed      	subs	r5, r5, r7
 800acbe:	60a5      	str	r5, [r4, #8]
 800acc0:	454e      	cmp	r6, r9
 800acc2:	d900      	bls.n	800acc6 <__ssputs_r+0x84>
 800acc4:	464e      	mov	r6, r9
 800acc6:	4632      	mov	r2, r6
 800acc8:	4641      	mov	r1, r8
 800acca:	6820      	ldr	r0, [r4, #0]
 800accc:	f000 f91e 	bl	800af0c <memmove>
 800acd0:	68a3      	ldr	r3, [r4, #8]
 800acd2:	2000      	movs	r0, #0
 800acd4:	1b9b      	subs	r3, r3, r6
 800acd6:	60a3      	str	r3, [r4, #8]
 800acd8:	6823      	ldr	r3, [r4, #0]
 800acda:	441e      	add	r6, r3
 800acdc:	6026      	str	r6, [r4, #0]
 800acde:	e7dc      	b.n	800ac9a <__ssputs_r+0x58>
 800ace0:	462a      	mov	r2, r5
 800ace2:	f000 f92c 	bl	800af3e <_realloc_r>
 800ace6:	4606      	mov	r6, r0
 800ace8:	2800      	cmp	r0, #0
 800acea:	d1e2      	bne.n	800acb2 <__ssputs_r+0x70>
 800acec:	6921      	ldr	r1, [r4, #16]
 800acee:	4650      	mov	r0, sl
 800acf0:	f7fe f918 	bl	8008f24 <_free_r>
 800acf4:	e7c8      	b.n	800ac88 <__ssputs_r+0x46>
	...

0800acf8 <_svfiprintf_r>:
 800acf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acfc:	461d      	mov	r5, r3
 800acfe:	898b      	ldrh	r3, [r1, #12]
 800ad00:	b09d      	sub	sp, #116	; 0x74
 800ad02:	061f      	lsls	r7, r3, #24
 800ad04:	4680      	mov	r8, r0
 800ad06:	460c      	mov	r4, r1
 800ad08:	4616      	mov	r6, r2
 800ad0a:	d50f      	bpl.n	800ad2c <_svfiprintf_r+0x34>
 800ad0c:	690b      	ldr	r3, [r1, #16]
 800ad0e:	b96b      	cbnz	r3, 800ad2c <_svfiprintf_r+0x34>
 800ad10:	2140      	movs	r1, #64	; 0x40
 800ad12:	f7fe f953 	bl	8008fbc <_malloc_r>
 800ad16:	6020      	str	r0, [r4, #0]
 800ad18:	6120      	str	r0, [r4, #16]
 800ad1a:	b928      	cbnz	r0, 800ad28 <_svfiprintf_r+0x30>
 800ad1c:	230c      	movs	r3, #12
 800ad1e:	f8c8 3000 	str.w	r3, [r8]
 800ad22:	f04f 30ff 	mov.w	r0, #4294967295
 800ad26:	e0c8      	b.n	800aeba <_svfiprintf_r+0x1c2>
 800ad28:	2340      	movs	r3, #64	; 0x40
 800ad2a:	6163      	str	r3, [r4, #20]
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad30:	2320      	movs	r3, #32
 800ad32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad36:	2330      	movs	r3, #48	; 0x30
 800ad38:	f04f 0b01 	mov.w	fp, #1
 800ad3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad40:	9503      	str	r5, [sp, #12]
 800ad42:	4637      	mov	r7, r6
 800ad44:	463d      	mov	r5, r7
 800ad46:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ad4a:	b10b      	cbz	r3, 800ad50 <_svfiprintf_r+0x58>
 800ad4c:	2b25      	cmp	r3, #37	; 0x25
 800ad4e:	d13e      	bne.n	800adce <_svfiprintf_r+0xd6>
 800ad50:	ebb7 0a06 	subs.w	sl, r7, r6
 800ad54:	d00b      	beq.n	800ad6e <_svfiprintf_r+0x76>
 800ad56:	4653      	mov	r3, sl
 800ad58:	4632      	mov	r2, r6
 800ad5a:	4621      	mov	r1, r4
 800ad5c:	4640      	mov	r0, r8
 800ad5e:	f7ff ff70 	bl	800ac42 <__ssputs_r>
 800ad62:	3001      	adds	r0, #1
 800ad64:	f000 80a4 	beq.w	800aeb0 <_svfiprintf_r+0x1b8>
 800ad68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad6a:	4453      	add	r3, sl
 800ad6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad6e:	783b      	ldrb	r3, [r7, #0]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	f000 809d 	beq.w	800aeb0 <_svfiprintf_r+0x1b8>
 800ad76:	2300      	movs	r3, #0
 800ad78:	f04f 32ff 	mov.w	r2, #4294967295
 800ad7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad80:	9304      	str	r3, [sp, #16]
 800ad82:	9307      	str	r3, [sp, #28]
 800ad84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad88:	931a      	str	r3, [sp, #104]	; 0x68
 800ad8a:	462f      	mov	r7, r5
 800ad8c:	2205      	movs	r2, #5
 800ad8e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ad92:	4850      	ldr	r0, [pc, #320]	; (800aed4 <_svfiprintf_r+0x1dc>)
 800ad94:	f7ff fc5e 	bl	800a654 <memchr>
 800ad98:	9b04      	ldr	r3, [sp, #16]
 800ad9a:	b9d0      	cbnz	r0, 800add2 <_svfiprintf_r+0xda>
 800ad9c:	06d9      	lsls	r1, r3, #27
 800ad9e:	bf44      	itt	mi
 800ada0:	2220      	movmi	r2, #32
 800ada2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ada6:	071a      	lsls	r2, r3, #28
 800ada8:	bf44      	itt	mi
 800adaa:	222b      	movmi	r2, #43	; 0x2b
 800adac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800adb0:	782a      	ldrb	r2, [r5, #0]
 800adb2:	2a2a      	cmp	r2, #42	; 0x2a
 800adb4:	d015      	beq.n	800ade2 <_svfiprintf_r+0xea>
 800adb6:	462f      	mov	r7, r5
 800adb8:	2000      	movs	r0, #0
 800adba:	250a      	movs	r5, #10
 800adbc:	9a07      	ldr	r2, [sp, #28]
 800adbe:	4639      	mov	r1, r7
 800adc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adc4:	3b30      	subs	r3, #48	; 0x30
 800adc6:	2b09      	cmp	r3, #9
 800adc8:	d94d      	bls.n	800ae66 <_svfiprintf_r+0x16e>
 800adca:	b1b8      	cbz	r0, 800adfc <_svfiprintf_r+0x104>
 800adcc:	e00f      	b.n	800adee <_svfiprintf_r+0xf6>
 800adce:	462f      	mov	r7, r5
 800add0:	e7b8      	b.n	800ad44 <_svfiprintf_r+0x4c>
 800add2:	4a40      	ldr	r2, [pc, #256]	; (800aed4 <_svfiprintf_r+0x1dc>)
 800add4:	463d      	mov	r5, r7
 800add6:	1a80      	subs	r0, r0, r2
 800add8:	fa0b f000 	lsl.w	r0, fp, r0
 800addc:	4318      	orrs	r0, r3
 800adde:	9004      	str	r0, [sp, #16]
 800ade0:	e7d3      	b.n	800ad8a <_svfiprintf_r+0x92>
 800ade2:	9a03      	ldr	r2, [sp, #12]
 800ade4:	1d11      	adds	r1, r2, #4
 800ade6:	6812      	ldr	r2, [r2, #0]
 800ade8:	9103      	str	r1, [sp, #12]
 800adea:	2a00      	cmp	r2, #0
 800adec:	db01      	blt.n	800adf2 <_svfiprintf_r+0xfa>
 800adee:	9207      	str	r2, [sp, #28]
 800adf0:	e004      	b.n	800adfc <_svfiprintf_r+0x104>
 800adf2:	4252      	negs	r2, r2
 800adf4:	f043 0302 	orr.w	r3, r3, #2
 800adf8:	9207      	str	r2, [sp, #28]
 800adfa:	9304      	str	r3, [sp, #16]
 800adfc:	783b      	ldrb	r3, [r7, #0]
 800adfe:	2b2e      	cmp	r3, #46	; 0x2e
 800ae00:	d10c      	bne.n	800ae1c <_svfiprintf_r+0x124>
 800ae02:	787b      	ldrb	r3, [r7, #1]
 800ae04:	2b2a      	cmp	r3, #42	; 0x2a
 800ae06:	d133      	bne.n	800ae70 <_svfiprintf_r+0x178>
 800ae08:	9b03      	ldr	r3, [sp, #12]
 800ae0a:	3702      	adds	r7, #2
 800ae0c:	1d1a      	adds	r2, r3, #4
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	9203      	str	r2, [sp, #12]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	bfb8      	it	lt
 800ae16:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae1a:	9305      	str	r3, [sp, #20]
 800ae1c:	4d2e      	ldr	r5, [pc, #184]	; (800aed8 <_svfiprintf_r+0x1e0>)
 800ae1e:	2203      	movs	r2, #3
 800ae20:	7839      	ldrb	r1, [r7, #0]
 800ae22:	4628      	mov	r0, r5
 800ae24:	f7ff fc16 	bl	800a654 <memchr>
 800ae28:	b138      	cbz	r0, 800ae3a <_svfiprintf_r+0x142>
 800ae2a:	2340      	movs	r3, #64	; 0x40
 800ae2c:	1b40      	subs	r0, r0, r5
 800ae2e:	fa03 f000 	lsl.w	r0, r3, r0
 800ae32:	9b04      	ldr	r3, [sp, #16]
 800ae34:	3701      	adds	r7, #1
 800ae36:	4303      	orrs	r3, r0
 800ae38:	9304      	str	r3, [sp, #16]
 800ae3a:	7839      	ldrb	r1, [r7, #0]
 800ae3c:	2206      	movs	r2, #6
 800ae3e:	4827      	ldr	r0, [pc, #156]	; (800aedc <_svfiprintf_r+0x1e4>)
 800ae40:	1c7e      	adds	r6, r7, #1
 800ae42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae46:	f7ff fc05 	bl	800a654 <memchr>
 800ae4a:	2800      	cmp	r0, #0
 800ae4c:	d038      	beq.n	800aec0 <_svfiprintf_r+0x1c8>
 800ae4e:	4b24      	ldr	r3, [pc, #144]	; (800aee0 <_svfiprintf_r+0x1e8>)
 800ae50:	bb13      	cbnz	r3, 800ae98 <_svfiprintf_r+0x1a0>
 800ae52:	9b03      	ldr	r3, [sp, #12]
 800ae54:	3307      	adds	r3, #7
 800ae56:	f023 0307 	bic.w	r3, r3, #7
 800ae5a:	3308      	adds	r3, #8
 800ae5c:	9303      	str	r3, [sp, #12]
 800ae5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae60:	444b      	add	r3, r9
 800ae62:	9309      	str	r3, [sp, #36]	; 0x24
 800ae64:	e76d      	b.n	800ad42 <_svfiprintf_r+0x4a>
 800ae66:	fb05 3202 	mla	r2, r5, r2, r3
 800ae6a:	2001      	movs	r0, #1
 800ae6c:	460f      	mov	r7, r1
 800ae6e:	e7a6      	b.n	800adbe <_svfiprintf_r+0xc6>
 800ae70:	2300      	movs	r3, #0
 800ae72:	250a      	movs	r5, #10
 800ae74:	4619      	mov	r1, r3
 800ae76:	3701      	adds	r7, #1
 800ae78:	9305      	str	r3, [sp, #20]
 800ae7a:	4638      	mov	r0, r7
 800ae7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae80:	3a30      	subs	r2, #48	; 0x30
 800ae82:	2a09      	cmp	r2, #9
 800ae84:	d903      	bls.n	800ae8e <_svfiprintf_r+0x196>
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d0c8      	beq.n	800ae1c <_svfiprintf_r+0x124>
 800ae8a:	9105      	str	r1, [sp, #20]
 800ae8c:	e7c6      	b.n	800ae1c <_svfiprintf_r+0x124>
 800ae8e:	fb05 2101 	mla	r1, r5, r1, r2
 800ae92:	2301      	movs	r3, #1
 800ae94:	4607      	mov	r7, r0
 800ae96:	e7f0      	b.n	800ae7a <_svfiprintf_r+0x182>
 800ae98:	ab03      	add	r3, sp, #12
 800ae9a:	9300      	str	r3, [sp, #0]
 800ae9c:	4622      	mov	r2, r4
 800ae9e:	4b11      	ldr	r3, [pc, #68]	; (800aee4 <_svfiprintf_r+0x1ec>)
 800aea0:	a904      	add	r1, sp, #16
 800aea2:	4640      	mov	r0, r8
 800aea4:	f7fe f976 	bl	8009194 <_printf_float>
 800aea8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800aeac:	4681      	mov	r9, r0
 800aeae:	d1d6      	bne.n	800ae5e <_svfiprintf_r+0x166>
 800aeb0:	89a3      	ldrh	r3, [r4, #12]
 800aeb2:	065b      	lsls	r3, r3, #25
 800aeb4:	f53f af35 	bmi.w	800ad22 <_svfiprintf_r+0x2a>
 800aeb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aeba:	b01d      	add	sp, #116	; 0x74
 800aebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aec0:	ab03      	add	r3, sp, #12
 800aec2:	9300      	str	r3, [sp, #0]
 800aec4:	4622      	mov	r2, r4
 800aec6:	4b07      	ldr	r3, [pc, #28]	; (800aee4 <_svfiprintf_r+0x1ec>)
 800aec8:	a904      	add	r1, sp, #16
 800aeca:	4640      	mov	r0, r8
 800aecc:	f7fe fc0e 	bl	80096ec <_printf_i>
 800aed0:	e7ea      	b.n	800aea8 <_svfiprintf_r+0x1b0>
 800aed2:	bf00      	nop
 800aed4:	0800b204 	.word	0x0800b204
 800aed8:	0800b20a 	.word	0x0800b20a
 800aedc:	0800b20e 	.word	0x0800b20e
 800aee0:	08009195 	.word	0x08009195
 800aee4:	0800ac43 	.word	0x0800ac43

0800aee8 <__ascii_mbtowc>:
 800aee8:	b082      	sub	sp, #8
 800aeea:	b901      	cbnz	r1, 800aeee <__ascii_mbtowc+0x6>
 800aeec:	a901      	add	r1, sp, #4
 800aeee:	b142      	cbz	r2, 800af02 <__ascii_mbtowc+0x1a>
 800aef0:	b14b      	cbz	r3, 800af06 <__ascii_mbtowc+0x1e>
 800aef2:	7813      	ldrb	r3, [r2, #0]
 800aef4:	600b      	str	r3, [r1, #0]
 800aef6:	7812      	ldrb	r2, [r2, #0]
 800aef8:	1c10      	adds	r0, r2, #0
 800aefa:	bf18      	it	ne
 800aefc:	2001      	movne	r0, #1
 800aefe:	b002      	add	sp, #8
 800af00:	4770      	bx	lr
 800af02:	4610      	mov	r0, r2
 800af04:	e7fb      	b.n	800aefe <__ascii_mbtowc+0x16>
 800af06:	f06f 0001 	mvn.w	r0, #1
 800af0a:	e7f8      	b.n	800aefe <__ascii_mbtowc+0x16>

0800af0c <memmove>:
 800af0c:	4288      	cmp	r0, r1
 800af0e:	b510      	push	{r4, lr}
 800af10:	eb01 0302 	add.w	r3, r1, r2
 800af14:	d807      	bhi.n	800af26 <memmove+0x1a>
 800af16:	1e42      	subs	r2, r0, #1
 800af18:	4299      	cmp	r1, r3
 800af1a:	d00a      	beq.n	800af32 <memmove+0x26>
 800af1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af20:	f802 4f01 	strb.w	r4, [r2, #1]!
 800af24:	e7f8      	b.n	800af18 <memmove+0xc>
 800af26:	4283      	cmp	r3, r0
 800af28:	d9f5      	bls.n	800af16 <memmove+0xa>
 800af2a:	1881      	adds	r1, r0, r2
 800af2c:	1ad2      	subs	r2, r2, r3
 800af2e:	42d3      	cmn	r3, r2
 800af30:	d100      	bne.n	800af34 <memmove+0x28>
 800af32:	bd10      	pop	{r4, pc}
 800af34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af38:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800af3c:	e7f7      	b.n	800af2e <memmove+0x22>

0800af3e <_realloc_r>:
 800af3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af40:	4607      	mov	r7, r0
 800af42:	4614      	mov	r4, r2
 800af44:	460e      	mov	r6, r1
 800af46:	b921      	cbnz	r1, 800af52 <_realloc_r+0x14>
 800af48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800af4c:	4611      	mov	r1, r2
 800af4e:	f7fe b835 	b.w	8008fbc <_malloc_r>
 800af52:	b922      	cbnz	r2, 800af5e <_realloc_r+0x20>
 800af54:	f7fd ffe6 	bl	8008f24 <_free_r>
 800af58:	4625      	mov	r5, r4
 800af5a:	4628      	mov	r0, r5
 800af5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af5e:	f000 f821 	bl	800afa4 <_malloc_usable_size_r>
 800af62:	42a0      	cmp	r0, r4
 800af64:	d20f      	bcs.n	800af86 <_realloc_r+0x48>
 800af66:	4621      	mov	r1, r4
 800af68:	4638      	mov	r0, r7
 800af6a:	f7fe f827 	bl	8008fbc <_malloc_r>
 800af6e:	4605      	mov	r5, r0
 800af70:	2800      	cmp	r0, #0
 800af72:	d0f2      	beq.n	800af5a <_realloc_r+0x1c>
 800af74:	4631      	mov	r1, r6
 800af76:	4622      	mov	r2, r4
 800af78:	f7ff fb7a 	bl	800a670 <memcpy>
 800af7c:	4631      	mov	r1, r6
 800af7e:	4638      	mov	r0, r7
 800af80:	f7fd ffd0 	bl	8008f24 <_free_r>
 800af84:	e7e9      	b.n	800af5a <_realloc_r+0x1c>
 800af86:	4635      	mov	r5, r6
 800af88:	e7e7      	b.n	800af5a <_realloc_r+0x1c>

0800af8a <__ascii_wctomb>:
 800af8a:	b149      	cbz	r1, 800afa0 <__ascii_wctomb+0x16>
 800af8c:	2aff      	cmp	r2, #255	; 0xff
 800af8e:	bf8b      	itete	hi
 800af90:	238a      	movhi	r3, #138	; 0x8a
 800af92:	700a      	strbls	r2, [r1, #0]
 800af94:	6003      	strhi	r3, [r0, #0]
 800af96:	2001      	movls	r0, #1
 800af98:	bf88      	it	hi
 800af9a:	f04f 30ff 	movhi.w	r0, #4294967295
 800af9e:	4770      	bx	lr
 800afa0:	4608      	mov	r0, r1
 800afa2:	4770      	bx	lr

0800afa4 <_malloc_usable_size_r>:
 800afa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afa8:	1f18      	subs	r0, r3, #4
 800afaa:	2b00      	cmp	r3, #0
 800afac:	bfbc      	itt	lt
 800afae:	580b      	ldrlt	r3, [r1, r0]
 800afb0:	18c0      	addlt	r0, r0, r3
 800afb2:	4770      	bx	lr

0800afb4 <_init>:
 800afb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afb6:	bf00      	nop
 800afb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afba:	bc08      	pop	{r3}
 800afbc:	469e      	mov	lr, r3
 800afbe:	4770      	bx	lr

0800afc0 <_fini>:
 800afc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afc2:	bf00      	nop
 800afc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afc6:	bc08      	pop	{r3}
 800afc8:	469e      	mov	lr, r3
 800afca:	4770      	bx	lr
